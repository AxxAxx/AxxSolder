
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a920  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d98  0801ab00  0801ab00  0002ab00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d898  0801d898  00030540  2**0
                  CONTENTS
  4 .ARM          00000008  0801d898  0801d898  0002d898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d8a0  0801d8a0  00030540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d8a0  0801d8a0  0002d8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d8a4  0801d8a4  0002d8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000540  20000000  0801d8a8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e88  20000540  0801dde8  00030540  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200033c8  0801dde8  000333c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f5a5  00000000  00000000  000305b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065b2  00000000  00000000  0005fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002998  00000000  00000000  00066110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fe4  00000000  00000000  00068aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028961  00000000  00000000  0006aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000355aa  00000000  00000000  000933ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee788  00000000  00000000  000c8997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c6f4  00000000  00000000  001b7120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c3814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000540 	.word	0x20000540
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801aae8 	.word	0x0801aae8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000544 	.word	0x20000544
 800021c:	0801aae8 	.word	0x0801aae8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800104e:	0adb      	lsrs	r3, r3, #11
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <FlashCheckCRC>:

bool FlashCheckCRC()
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <FlashCheckCRC+0x70>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <FlashCheckCRC+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <FlashCheckCRC+0x70>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <FlashCheckCRC+0x74>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <FlashCheckCRC+0x78>)
 8001094:	f007 fbf8 	bl	8008888 <HAL_CRC_Calculate>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bf08      	it	eq
 80010ba:	4290      	cmpeq	r0, r2
 80010bc:	d101      	bne.n	80010c2 <FlashCheckCRC+0x66>
	{
		return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <FlashCheckCRC+0x68>
	}
	return false;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0801f000 	.word	0x0801f000
 80010d4:	20001b44 	.word	0x20001b44

080010d8 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	int i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <FlashReadToBuf+0x88>)
 80010e4:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 80010e6:	f7ff ffb9 	bl	800105c <FlashCheckCRC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d031      	beq.n	8001154 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010f0:	e025      	b.n	800113e <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e013      	b.n	800112c <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <FlashReadToBuf+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d208      	bcs.n	8001126 <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	440a      	add	r2, r1
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FlashReadToBuf+0x90>)
 8001124:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	dde8      	ble.n	8001104 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3308      	adds	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3308      	adds	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FlashReadToBuf+0x8c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d203      	bcs.n	8001150 <FlashReadToBuf+0x78>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <FlashReadToBuf+0x94>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d3d0      	bcc.n	80010f2 <FlashReadToBuf+0x1a>
		}
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <FlashReadToBuf+0x7e>
	}
	return false;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801f000 	.word	0x0801f000
 8001164:	20000000 	.word	0x20000000
 8001168:	20000560 	.word	0x20000560
 800116c:	0801ffff 	.word	0x0801ffff

08001170 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8001178:	f7ff ffae 	bl	80010d8 <FlashReadToBuf>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FlashRead+0x30>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	2348      	movs	r3, #72	; 0x48
 800118c:	461a      	mov	r2, r3
 800118e:	f015 ff6c 	bl	801706a <memcpy>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <FlashRead+0x28>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000560 	.word	0x20000560

080011a4 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <FlashWrite+0x170>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <FlashWrite+0x174>)
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 80011da:	f7ff ff7d 	bl	80010d8 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <FlashWrite+0x178>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	2348      	movs	r3, #72	; 0x48
 80011e8:	461a      	mov	r2, r3
 80011ea:	f015 ff3e 	bl	801706a <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <FlashWrite+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4949      	ldr	r1, [pc, #292]	; (800131c <FlashWrite+0x178>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <FlashWrite+0x180>)
 80011f8:	f007 fb46 	bl	8008888 <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	461c      	mov	r4, r3
 8001202:	4615      	mov	r5, r2
 8001204:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 8001208:	f008 f826 	bl	8009258 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <FlashWrite+0x184>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <FlashWrite+0x188>)
 8001216:	f7ff ff13 	bl	8001040 <GetPage>
 800121a:	4604      	mov	r4, r0
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <FlashWrite+0x174>)
 800121e:	f7ff ff0f 	bl	8001040 <GetPage>
 8001222:	4603      	mov	r3, r0
 8001224:	1ae3      	subs	r3, r4, r3
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <FlashWrite+0x18c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <FlashWrite+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <FlashWrite+0x174>)
 8001238:	f7ff ff02 	bl	8001040 <GetPage>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <FlashWrite+0x18c>)
 8001240:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <FlashWrite+0x18c>)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <FlashWrite+0x18c>)
 8001250:	f008 f8ee 	bl	8009430 <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d152      	bne.n	8001300 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 800125a:	e04b      	b.n	80012f4 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e01b      	b.n	800129a <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <FlashWrite+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20a      	bcs.n	8001288 <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	441a      	add	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	440b      	add	r3, r1
 8001280:	4926      	ldr	r1, [pc, #152]	; (800131c <FlashWrite+0x178>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b07      	cmp	r3, #7
 800129e:	dde0      	ble.n	8001262 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <FlashWrite+0x17c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20f      	bcs.n	80012ca <FlashWrite+0x126>
 80012aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b0:	2000      	movs	r0, #0
 80012b2:	f007 ff65 	bl	8009180 <HAL_FLASH_Program>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <FlashWrite+0x126>
			{
				Address = Address + 8;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	3308      	adds	r3, #8
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	3308      	adds	r3, #8
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	e014      	b.n	80012f4 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <FlashWrite+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d314      	bcc.n	80012fe <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 80012d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012da:	2000      	movs	r0, #0
 80012dc:	f007 ff50 	bl	8009180 <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 80012e6:	f007 ffd9 	bl	800929c <HAL_FLASH_Lock>
					flashWriting = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <FlashWrite+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					return true;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00b      	b.n	800130c <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <FlashWrite+0x188>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3af      	bcc.n	800125c <FlashWrite+0xb8>
 80012fc:	e000      	b.n	8001300 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012fe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001300:	f007 ffcc 	bl	800929c <HAL_FLASH_Lock>

	flashWriting = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FlashWrite+0x170>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	2000055c 	.word	0x2000055c
 8001318:	0801f000 	.word	0x0801f000
 800131c:	20000560 	.word	0x20000560
 8001320:	20000000 	.word	0x20000000
 8001324:	20001b44 	.word	0x20001b44
 8001328:	40022000 	.word	0x40022000
 800132c:	0801ffff 	.word	0x0801ffff
 8001330:	200005a8 	.word	0x200005a8

08001334 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0b04 	vstr	d0, [r7, #16]
 800133e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001342:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <clamp+0x2a>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	e001      	b.n	8001362 <clamp+0x2e>
 800135e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136e:	f7ff fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <clamp+0x4a>
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	e001      	b.n	8001382 <clamp+0x4e>
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e012      	b.n	80013d2 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <get_mean_ADC_reading_indexed+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dde9      	ble.n	80013ac <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <get_mean_ADC_reading_indexed+0x78>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000628 	.word	0x20000628
 8001408:	2000062c 	.word	0x2000062c
 800140c:	40330000 	.word	0x40330000

08001410 <get_mcu_temp>:

void get_mcu_temp(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ffbd 	bl	8001394 <get_mean_ADC_reading_indexed>
 800141a:	ec51 0b10 	vmov	r0, r1, d0
 800141e:	a328      	add	r3, pc, #160	; (adr r3, 80014c0 <get_mcu_temp+0xb0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f910 	bl	8000648 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <get_mcu_temp+0xa0>)
 8001436:	f7ff fa31 	bl	800089c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a317      	add	r3, pc, #92	; (adr r3, 80014a0 <get_mcu_temp+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff46 	bl	80002d8 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <get_mcu_temp+0x98>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fa1f 	bl	800089c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <get_mcu_temp+0xa4>)
 800146c:	f7fe ff36 	bl	80002dc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <get_mcu_temp+0xa8>)
 8001480:	4618      	mov	r0, r3
 8001482:	f002 feb7 	bl	80041f4 <Moving_Average_Compute>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbd3 	bl	8000c38 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <get_mcu_temp+0xac>)
 8001496:	6193      	str	r3, [r2, #24]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	40390000 	.word	0x40390000
 80014b8:	20000a30 	.word	0x20000a30
 80014bc:	20000038 	.word	0x20000038
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666

080014c8 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <change_state>:

void change_state(mainstates new_state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <change_state+0x58>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <change_state+0x5c>)
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <change_state+0x58>)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <change_state+0x58>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <change_state+0x44>
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <change_state+0x60>)
 8001518:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <change_state+0x64>)
 8001522:	f7ff faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <change_state+0x68>)
 8001532:	f008 fa3b 	bl	80099ac <HAL_GPIO_WritePin>
 8001536:	e005      	b.n	8001544 <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <change_state+0x68>)
 800153e:	f008 fa35 	bl	80099ac <HAL_GPIO_WritePin>
	}
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001d 	.word	0x2000001d
 8001550:	20000038 	.word	0x20000038
 8001554:	200006a0 	.word	0x200006a0
 8001558:	3ff00000 	.word	0x3ff00000
 800155c:	48000400 	.word	0x48000400

08001560 <get_bus_voltage>:

void get_bus_voltage(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff15 	bl	8001394 <get_mean_ADC_reading_indexed>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb41 	bl	8000bf8 <__aeabi_d2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	490d      	ldr	r1, [pc, #52]	; (80015b0 <get_bus_voltage+0x50>)
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fe3a 	bl	80041f4 <Moving_Average_Compute>
 8001580:	ec51 0b10 	vmov	r0, r1, d0
 8001584:	a308      	add	r3, pc, #32	; (adr r3, 80015a8 <get_bus_voltage+0x48>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <get_bus_voltage+0x54>)
 800159e:	6113      	str	r3, [r2, #16]
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	ada68bd9 	.word	0xada68bd9
 80015ac:	3f813656 	.word	0x3f813656
 80015b0:	20000d5c 	.word	0x20000d5c
 80015b4:	20000038 	.word	0x20000038

080015b8 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fee8 	bl	8001394 <get_mean_ADC_reading_indexed>
 80015c4:	ec53 2b10 	vmov	r2, r3, d0
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fb14 	bl	8000bf8 <__aeabi_d2uiz>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4977      	ldr	r1, [pc, #476]	; (80017b0 <get_thermocouple_temperature+0x1f8>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fe0d 	bl	80041f4 <Moving_Average_Compute>
 80015da:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 80015de:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <get_thermocouple_temperature+0x1fc>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d12e      	bne.n	8001644 <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 80015e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ee:	f7ff f82b 	bl	8000648 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	a357      	add	r3, pc, #348	; (adr r3, 8001758 <get_thermocouple_temperature+0x1a0>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7ff f822 	bl	8000648 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4614      	mov	r4, r2
 800160a:	461d      	mov	r5, r3
 800160c:	a354      	add	r3, pc, #336	; (adr r3, 8001760 <get_thermocouple_temperature+0x1a8>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001616:	f7ff f817 	bl	8000648 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4620      	mov	r0, r4
 8001620:	4629      	mov	r1, r5
 8001622:	f7fe fe5b 	bl	80002dc <__adddf3>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	a34e      	add	r3, pc, #312	; (adr r3, 8001768 <get_thermocouple_temperature+0x1b0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe fe52 	bl	80002dc <__adddf3>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	495e      	ldr	r1, [pc, #376]	; (80017b8 <get_thermocouple_temperature+0x200>)
 800163e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001642:	e064      	b.n	800170e <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 8001644:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <get_thermocouple_temperature+0x1fc>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d12e      	bne.n	80016aa <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800164c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001654:	f7fe fff8 	bl	8000648 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	a343      	add	r3, pc, #268	; (adr r3, 8001770 <get_thermocouple_temperature+0x1b8>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffef 	bl	8000648 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4614      	mov	r4, r2
 8001670:	461d      	mov	r5, r3
 8001672:	a341      	add	r3, pc, #260	; (adr r3, 8001778 <get_thermocouple_temperature+0x1c0>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800167c:	f7fe ffe4 	bl	8000648 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe fe28 	bl	80002dc <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	a33a      	add	r3, pc, #232	; (adr r3, 8001780 <get_thermocouple_temperature+0x1c8>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe fe1f 	bl	80002dc <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4945      	ldr	r1, [pc, #276]	; (80017b8 <get_thermocouple_temperature+0x200>)
 80016a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016a8:	e031      	b.n	800170e <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <get_thermocouple_temperature+0x1fc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d12d      	bne.n	800170e <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 80016b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ba:	f7fe ffc5 	bl	8000648 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	a330      	add	r3, pc, #192	; (adr r3, 8001788 <get_thermocouple_temperature+0x1d0>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe ffbc 	bl	8000648 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4614      	mov	r4, r2
 80016d6:	461d      	mov	r5, r3
 80016d8:	a32d      	add	r3, pc, #180	; (adr r3, 8001790 <get_thermocouple_temperature+0x1d8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e2:	f7fe ffb1 	bl	8000648 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdf5 	bl	80002dc <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	a327      	add	r3, pc, #156	; (adr r3, 8001798 <get_thermocouple_temperature+0x1e0>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe fdec 	bl	80002dc <__adddf3>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	492b      	ldr	r1, [pc, #172]	; (80017b8 <get_thermocouple_temperature+0x200>)
 800170a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <get_thermocouple_temperature+0x200>)
 8001710:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <get_thermocouple_temperature+0x204>)
 8001716:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800171a:	f7fe fddf 	bl	80002dc <__adddf3>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4925      	ldr	r1, [pc, #148]	; (80017b8 <get_thermocouple_temperature+0x200>)
 8001724:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <get_thermocouple_temperature+0x200>)
 800172a:	ed93 7b02 	vldr	d7, [r3, #8]
 800172e:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80017a0 <get_thermocouple_temperature+0x1e8>
 8001732:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80017a8 <get_thermocouple_temperature+0x1f0>
 8001736:	eeb0 0a47 	vmov.f32	s0, s14
 800173a:	eef0 0a67 	vmov.f32	s1, s15
 800173e:	f7ff fdf9 	bl	8001334 <clamp>
 8001742:	eeb0 7a40 	vmov.f32	s14, s0
 8001746:	eef0 7a60 	vmov.f32	s15, s1
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <get_thermocouple_temperature+0x200>)
 800174c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	92e63abf 	.word	0x92e63abf
 800175c:	3ee1b6ee 	.word	0x3ee1b6ee
 8001760:	1a8bcf67 	.word	0x1a8bcf67
 8001764:	3fd3ea38 	.word	0x3fd3ea38
 8001768:	ef80bf90 	.word	0xef80bf90
 800176c:	403810db 	.word	0x403810db
 8001770:	82fead10 	.word	0x82fead10
 8001774:	3ea7dc92 	.word	0x3ea7dc92
 8001778:	c53ce03f 	.word	0xc53ce03f
 800177c:	3fbd94aa 	.word	0x3fbd94aa
 8001780:	34da2134 	.word	0x34da2134
 8001784:	403a2648 	.word	0x403a2648
 8001788:	202b3c5a 	.word	0x202b3c5a
 800178c:	3f0edf88 	.word	0x3f0edf88
 8001790:	15fb4706 	.word	0x15fb4706
 8001794:	3fda2f75 	.word	0x3fda2f75
 8001798:	53430524 	.word	0x53430524
 800179c:	40381413 	.word	0x40381413
 80017a0:	00000000 	.word	0x00000000
 80017a4:	408f3800 	.word	0x408f3800
	...
 80017b0:	20000704 	.word	0x20000704
 80017b4:	200005b8 	.word	0x200005b8
 80017b8:	20000038 	.word	0x20000038
 80017bc:	200006a0 	.word	0x200006a0

080017c0 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <set_heater_duty+0x48>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fecd 	bl	8000574 <__aeabi_i2d>
 80017da:	a309      	add	r3, pc, #36	; (adr r3, 8001800 <set_heater_duty+0x40>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe ff32 	bl	8000648 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4907      	ldr	r1, [pc, #28]	; (8001808 <set_heater_duty+0x48>)
 80017ea:	680c      	ldr	r4, [r1, #0]
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff fa02 	bl	8000bf8 <__aeabi_d2uiz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	6363      	str	r3, [r4, #52]	; 0x34
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}
 8001800:	33333333 	.word	0x33333333
 8001804:	3fd33333 	.word	0x3fd33333
 8001808:	20001c80 	.word	0x20001c80
 800180c:	00000000 	.word	0x00000000

08001810 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <heater_on+0xa0>)
 8001816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe febd 	bl	8000598 <__aeabi_f2d>
 800181e:	a31e      	add	r3, pc, #120	; (adr r3, 8001898 <heater_on+0x88>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe ff10 	bl	8000648 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4614      	mov	r4, r2
 800182e:	461d      	mov	r5, r3
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <heater_on+0xa0>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe feaf 	bl	8000598 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7ff f82b 	bl	800089c <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <heater_on+0xa4>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fef8 	bl	8000648 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4916      	ldr	r1, [pc, #88]	; (80018b8 <heater_on+0xa8>)
 800185e:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <heater_on+0xa8>)
 8001864:	ed93 7b00 	vldr	d7, [r3]
 8001868:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80018a0 <heater_on+0x90>
 800186c:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80018a8 <heater_on+0x98>
 8001870:	eeb0 0a47 	vmov.f32	s0, s14
 8001874:	eef0 0a67 	vmov.f32	s1, s15
 8001878:	f7ff fd5c 	bl	8001334 <clamp>
 800187c:	ec53 2b10 	vmov	r2, r3, d0
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f9b8 	bl	8000bf8 <__aeabi_d2uiz>
 8001888:	4603      	mov	r3, r0
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff97 	bl	80017c0 <set_heater_duty>
}
 8001892:	bf00      	nop
 8001894:	bdb0      	pop	{r4, r5, r7, pc}
 8001896:	bf00      	nop
 8001898:	a5e353f8 	.word	0xa5e353f8
 800189c:	3fc0c49b 	.word	0x3fc0c49b
 80018a0:	00000000 	.word	0x00000000
 80018a4:	407f4000 	.word	0x407f4000
	...
 80018b0:	20000038 	.word	0x20000038
 80018b4:	200006e8 	.word	0x200006e8
 80018b8:	200006f8 	.word	0x200006f8

080018bc <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff ff7d 	bl	80017c0 <set_heater_duty>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	0000      	movs	r0, r0
 80018cc:	0000      	movs	r0, r0
	...

080018d0 <settings_menue>:

void settings_menue(){
 80018d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018d4:	b08d      	sub	sp, #52	; 0x34
 80018d6:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 80018d8:	2120      	movs	r1, #32
 80018da:	48c1      	ldr	r0, [pc, #772]	; (8001be0 <settings_menue+0x310>)
 80018dc:	f008 f84e 	bl	800997c <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	f040 82cb 	bne.w	8001e7e <settings_menue+0x5ae>
		LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80018e8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80018ec:	f7ff fdec 	bl	80014c8 <RGB_to_BRG>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461c      	mov	r4, r3
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fde7 	bl	80014c8 <RGB_to_BRG>
 80018fa:	4603      	mov	r3, r0
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	9400      	str	r4, [sp, #0]
 8001900:	4bb8      	ldr	r3, [pc, #736]	; (8001be4 <settings_menue+0x314>)
 8001902:	4ab9      	ldr	r2, [pc, #740]	; (8001be8 <settings_menue+0x318>)
 8001904:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001908:	2000      	movs	r0, #0
 800190a:	f004 f9e7 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 800190e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001912:	f7ff fdd9 	bl	80014c8 <RGB_to_BRG>
 8001916:	4603      	mov	r3, r0
 8001918:	461c      	mov	r4, r3
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fdd4 	bl	80014c8 <RGB_to_BRG>
 8001920:	4603      	mov	r3, r0
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	9400      	str	r4, [sp, #0]
 8001926:	4baf      	ldr	r3, [pc, #700]	; (8001be4 <settings_menue+0x314>)
 8001928:	4ab0      	ldr	r2, [pc, #704]	; (8001bec <settings_menue+0x31c>)
 800192a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800192e:	2096      	movs	r0, #150	; 0x96
 8001930:	f004 f9d4 	bl	8005cdc <LCD_PutStr>

		TIM2->CNT = 1000;
 8001934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 800194e:	2301      	movs	r3, #1
 8001950:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8001958:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800195c:	f7ff fdb4 	bl	80014c8 <RGB_to_BRG>
 8001960:	4603      	mov	r3, r0
 8001962:	461c      	mov	r4, r3
 8001964:	2000      	movs	r0, #0
 8001966:	f7ff fdaf 	bl	80014c8 <RGB_to_BRG>
 800196a:	4603      	mov	r3, r0
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	9400      	str	r4, [sp, #0]
 8001970:	4b9c      	ldr	r3, [pc, #624]	; (8001be4 <settings_menue+0x314>)
 8001972:	4a9f      	ldr	r2, [pc, #636]	; (8001bf0 <settings_menue+0x320>)
 8001974:	210c      	movs	r1, #12
 8001976:	203c      	movs	r0, #60	; 0x3c
 8001978:	f004 f9b0 	bl	8005cdc <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 800197c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001980:	f7ff fda2 	bl	80014c8 <RGB_to_BRG>
 8001984:	4603      	mov	r3, r0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2328      	movs	r3, #40	; 0x28
 800198a:	22f0      	movs	r2, #240	; 0xf0
 800198c:	2128      	movs	r1, #40	; 0x28
 800198e:	2000      	movs	r0, #0
 8001990:	f004 f966 	bl	8005c60 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001994:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001998:	f7ff fd96 	bl	80014c8 <RGB_to_BRG>
 800199c:	4603      	mov	r3, r0
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2329      	movs	r3, #41	; 0x29
 80019a2:	22f0      	movs	r2, #240	; 0xf0
 80019a4:	2129      	movs	r1, #41	; 0x29
 80019a6:	2000      	movs	r0, #0
 80019a8:	f004 f95a 	bl	8005c60 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 80019ac:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80019b0:	f7ff fd8a 	bl	80014c8 <RGB_to_BRG>
 80019b4:	4603      	mov	r3, r0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	232a      	movs	r3, #42	; 0x2a
 80019ba:	22f0      	movs	r2, #240	; 0xf0
 80019bc:	212a      	movs	r1, #42	; 0x2a
 80019be:	2000      	movs	r0, #0
 80019c0:	f004 f94e 	bl	8005c60 <LCD_DrawLine>

		HAL_Delay(500);
 80019c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c8:	f004 faa2 	bl	8005f10 <HAL_Delay>
		while(menu_active == 1){
 80019cc:	e253      	b.n	8001e76 <settings_menue+0x5a6>
			if(menue_level == 0){
 80019ce:	8c3b      	ldrh	r3, [r7, #32]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d120      	bne.n	8001a16 <settings_menue+0x146>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 80019d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdba 	bl	8000554 <__aeabi_ui2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8001bc8 <settings_menue+0x2f8>
 80019e8:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001bd0 <settings_menue+0x300>
 80019ec:	ec43 2b10 	vmov	d0, r2, r3
 80019f0:	f7ff fca0 	bl	8001334 <clamp>
 80019f4:	ec53 2b10 	vmov	r2, r3, d0
 80019f8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f8fa 	bl	8000bf8 <__aeabi_d2uiz>
 8001a04:	4603      	mov	r3, r0
 8001a06:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001a08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 8001a16:	8c3b      	ldrh	r3, [r7, #32]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	f040 8091 	bne.w	8001b40 <settings_menue+0x270>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001a1e:	69b8      	ldr	r0, [r7, #24]
 8001a20:	f7fe fdba 	bl	8000598 <__aeabi_f2d>
 8001a24:	4604      	mov	r4, r0
 8001a26:	460d      	mov	r5, r1
 8001a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd90 	bl	8000554 <__aeabi_ui2d>
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b6e      	ldr	r3, [pc, #440]	; (8001bf4 <settings_menue+0x324>)
 8001a3a:	f7fe fc4d 	bl	80002d8 <__aeabi_dsub>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f8f7 	bl	8000c38 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fda3 	bl	8000598 <__aeabi_f2d>
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a5a:	f7fe ff1f 	bl	800089c <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4620      	mov	r0, r4
 8001a64:	4629      	mov	r1, r5
 8001a66:	f7fe fc39 	bl	80002dc <__adddf3>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4690      	mov	r8, r2
 8001a70:	4699      	mov	r9, r3
 8001a72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7c:	ee17 0a90 	vmov	r0, s15
 8001a80:	f7fe fd8a 	bl	8000598 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001a8a:	00c9      	lsls	r1, r1, #3
 8001a8c:	485a      	ldr	r0, [pc, #360]	; (8001bf8 <settings_menue+0x328>)
 8001a8e:	180c      	adds	r4, r1, r0
 8001a90:	4640      	mov	r0, r8
 8001a92:	4649      	mov	r1, r9
 8001a94:	f7fe fc20 	bl	80002d8 <__aeabi_dsub>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001aa0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d002      	beq.n	8001aac <settings_menue+0x1dc>
 8001aa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d12c      	bne.n	8001b06 <settings_menue+0x236>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001aac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4a51      	ldr	r2, [pc, #324]	; (8001bf8 <settings_menue+0x328>)
 8001ab2:	4413      	add	r3, r2
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f874 	bl	8000ba8 <__aeabi_d2iz>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bfb8      	it	lt
 8001ac6:	425b      	neglt	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd53 	bl	8000574 <__aeabi_i2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001bd8 <settings_menue+0x308>
 8001ad6:	ec43 2b10 	vmov	d0, r2, r3
 8001ada:	f018 fe81 	bl	801a7e0 <fmod>
 8001ade:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae2:	eef0 7a60 	vmov.f32	s15, s1
 8001ae6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4a43      	ldr	r2, [pc, #268]	; (8001bf8 <settings_menue+0x328>)
 8001aec:	189c      	adds	r4, r3, r2
 8001aee:	eeb0 0a47 	vmov.f32	s0, s14
 8001af2:	eef0 0a67 	vmov.f32	s1, s15
 8001af6:	f018 fea1 	bl	801a83c <round>
 8001afa:	eeb0 7a40 	vmov.f32	s14, s0
 8001afe:	eef0 7a60 	vmov.f32	s15, s1
 8001b02:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 8001b06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d019      	beq.n	8001b40 <settings_menue+0x270>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001b0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4a39      	ldr	r2, [pc, #228]	; (8001bf8 <settings_menue+0x328>)
 8001b12:	4413      	add	r3, r2
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f844 	bl	8000ba8 <__aeabi_d2iz>
 8001b20:	4603      	mov	r3, r0
 8001b22:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b26:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4932      	ldr	r1, [pc, #200]	; (8001bf8 <settings_menue+0x328>)
 8001b30:	185c      	adds	r4, r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	f7fe fd1e 	bl	8000574 <__aeabi_i2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001b40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b42:	2b0b      	cmp	r3, #11
 8001b44:	d906      	bls.n	8001b54 <settings_menue+0x284>
							menu_cursor_position = menu_length-1;
 8001b46:	230b      	movs	r3, #11
 8001b48:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 8001b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b4e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 7){
 8001b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d903      	bls.n	8001b62 <settings_menue+0x292>
				menue_start = menu_cursor_position-7;
 8001b5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b5c:	3b07      	subs	r3, #7
 8001b5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b60:	e001      	b.n	8001b66 <settings_menue+0x296>
			}
			else{
				menue_start = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001b66:	2120      	movs	r1, #32
 8001b68:	481d      	ldr	r0, [pc, #116]	; (8001be0 <settings_menue+0x310>)
 8001b6a:	f007 ff07 	bl	800997c <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d143      	bne.n	8001bfc <settings_menue+0x32c>
 8001b74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d840      	bhi.n	8001bfc <settings_menue+0x32c>
				if(menue_level == 0){
 8001b7a:	8c3b      	ldrh	r3, [r7, #32]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <settings_menue+0x2cc>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001b80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <settings_menue+0x328>)
 8001b86:	4413      	add	r3, r2
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7ff f852 	bl	8000c38 <__aeabi_d2f>
 8001b94:	4603      	mov	r3, r0
 8001b96:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001b98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b9a:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001b9c:	8c3b      	ldrh	r3, [r7, #32]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d106      	bne.n	8001bb0 <settings_menue+0x2e0>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ba4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ba8:	005a      	lsls	r2, r3, #1
 8001baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001bb0:	8c3b      	ldrh	r3, [r7, #32]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bfb8      	it	lt
 8001bb8:	425b      	neglt	r3, r3
 8001bba:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001bbc:	20c8      	movs	r0, #200	; 0xc8
 8001bbe:	f004 f9a7 	bl	8005f10 <HAL_Delay>
 8001bc2:	e04a      	b.n	8001c5a <settings_menue+0x38a>
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	412e8480 	.word	0x412e8480
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	408f4000 	.word	0x408f4000
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40000000 	.word	0x40000000
 8001be0:	48000400 	.word	0x48000400
 8001be4:	0801bd00 	.word	0x0801bd00
 8001be8:	0801ab00 	.word	0x0801ab00
 8001bec:	0801ab0c 	.word	0x0801ab0c
 8001bf0:	0801ab14 	.word	0x0801ab14
 8001bf4:	408f4000 	.word	0x408f4000
 8001bf8:	200006a0 	.word	0x200006a0
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	48a4      	ldr	r0, [pc, #656]	; (8001e90 <settings_menue+0x5c0>)
 8001c00:	f007 febc 	bl	800997c <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d105      	bne.n	8001c16 <settings_menue+0x346>
 8001c0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c0c:	2b0b      	cmp	r3, #11
 8001c0e:	d102      	bne.n	8001c16 <settings_menue+0x346>
				menu_active = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	83fb      	strh	r3, [r7, #30]
 8001c14:	e021      	b.n	8001c5a <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001c16:	2120      	movs	r1, #32
 8001c18:	489d      	ldr	r0, [pc, #628]	; (8001e90 <settings_menue+0x5c0>)
 8001c1a:	f007 feaf 	bl	800997c <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <settings_menue+0x366>
 8001c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	d105      	bne.n	8001c36 <settings_menue+0x366>
				menu_active = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001c2e:	4899      	ldr	r0, [pc, #612]	; (8001e94 <settings_menue+0x5c4>)
 8001c30:	f7ff fab8 	bl	80011a4 <FlashWrite>
 8001c34:	e011      	b.n	8001c5a <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001c36:	2120      	movs	r1, #32
 8001c38:	4895      	ldr	r0, [pc, #596]	; (8001e90 <settings_menue+0x5c0>)
 8001c3a:	f007 fe9f 	bl	800997c <HAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d10a      	bne.n	8001c5a <settings_menue+0x38a>
 8001c44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c46:	2b09      	cmp	r3, #9
 8001c48:	d107      	bne.n	8001c5a <settings_menue+0x38a>
				flash_values = default_flash_values;
 8001c4a:	4a92      	ldr	r2, [pc, #584]	; (8001e94 <settings_menue+0x5c4>)
 8001c4c:	4b92      	ldr	r3, [pc, #584]	; (8001e98 <settings_menue+0x5c8>)
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	2348      	movs	r3, #72	; 0x48
 8001c54:	461a      	mov	r2, r3
 8001c56:	f015 fa08 	bl	801706a <memcpy>
			}

			for(int i = menue_start;i<=menue_start+7;i++){
 8001c5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e104      	b.n	8001e6a <settings_menue+0x59a>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001c60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d12b      	bne.n	8001cc0 <settings_menue+0x3f0>
 8001c68:	8c3b      	ldrh	r3, [r7, #32]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d128      	bne.n	8001cc0 <settings_menue+0x3f0>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001c6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	0091      	lsls	r1, r2, #2
 8001c80:	461a      	mov	r2, r3
 8001c82:	460b      	mov	r3, r1
 8001c84:	4413      	add	r3, r2
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	332d      	adds	r3, #45	; 0x2d
 8001c8a:	b29c      	uxth	r4, r3
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4a81      	ldr	r2, [pc, #516]	; (8001e9c <settings_menue+0x5cc>)
 8001c98:	189d      	adds	r5, r3, r2
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f7ff fc14 	bl	80014c8 <RGB_to_BRG>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461e      	mov	r6, r3
 8001ca4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ca8:	f7ff fc0e 	bl	80014c8 <RGB_to_BRG>
 8001cac:	4603      	mov	r3, r0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	9600      	str	r6, [sp, #0]
 8001cb2:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <settings_menue+0x5d0>)
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	2005      	movs	r0, #5
 8001cba:	f004 f80f 	bl	8005cdc <LCD_PutStr>
 8001cbe:	e027      	b.n	8001d10 <settings_menue+0x440>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001cc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	0091      	lsls	r1, r2, #2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	332d      	adds	r3, #45	; 0x2d
 8001cdc:	b29c      	uxth	r4, r3
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4a6c      	ldr	r2, [pc, #432]	; (8001e9c <settings_menue+0x5cc>)
 8001cea:	189d      	adds	r5, r3, r2
 8001cec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cf0:	f7ff fbea 	bl	80014c8 <RGB_to_BRG>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461e      	mov	r6, r3
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fbe5 	bl	80014c8 <RGB_to_BRG>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	9600      	str	r6, [sp, #0]
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <settings_menue+0x5d0>)
 8001d06:	462a      	mov	r2, r5
 8001d08:	4621      	mov	r1, r4
 8001d0a:	2005      	movs	r0, #5
 8001d0c:	f003 ffe6 	bl	8005cdc <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001d10:	463b      	mov	r3, r7
 8001d12:	2214      	movs	r2, #20
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f015 f927 	bl	8016f6a <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4a5c      	ldr	r2, [pc, #368]	; (8001e94 <settings_menue+0x5c4>)
 8001d22:	4413      	add	r3, r2
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	4638      	mov	r0, r7
 8001d2a:	495e      	ldr	r1, [pc, #376]	; (8001ea4 <settings_menue+0x5d4>)
 8001d2c:	f015 f8ba 	bl	8016ea4 <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4a57      	ldr	r2, [pc, #348]	; (8001e94 <settings_menue+0x5c4>)
 8001d36:	4413      	add	r3, r2
 8001d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <settings_menue+0x5d8>)
 8001d42:	f7fe fef3 	bl	8000b2c <__aeabi_dcmplt>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <settings_menue+0x48e>
					str[1] = 32;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001d50:	2320      	movs	r3, #32
 8001d52:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001d54:	2320      	movs	r3, #32
 8001d56:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	713b      	strb	r3, [r7, #4]
 8001d5c:	e011      	b.n	8001d82 <settings_menue+0x4b2>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4a4c      	ldr	r2, [pc, #304]	; (8001e94 <settings_menue+0x5c4>)
 8001d64:	4413      	add	r3, r2
 8001d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d6a:	a347      	add	r3, pc, #284	; (adr r3, 8001e88 <settings_menue+0x5b8>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fedc 	bl	8000b2c <__aeabi_dcmplt>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <settings_menue+0x4b2>
					str[2] = 32;
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	dc49      	bgt.n	8001e1c <settings_menue+0x54c>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001d88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d124      	bne.n	8001dda <settings_menue+0x50a>
 8001d90:	8c3b      	ldrh	r3, [r7, #32]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d121      	bne.n	8001dda <settings_menue+0x50a>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001d96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	0091      	lsls	r1, r2, #2
 8001da8:	461a      	mov	r2, r3
 8001daa:	460b      	mov	r3, r1
 8001dac:	4413      	add	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	332d      	adds	r3, #45	; 0x2d
 8001db2:	b29c      	uxth	r4, r3
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff fb87 	bl	80014c8 <RGB_to_BRG>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461d      	mov	r5, r3
 8001dbe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dc2:	f7ff fb81 	bl	80014c8 <RGB_to_BRG>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	463a      	mov	r2, r7
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	9500      	str	r5, [sp, #0]
 8001dce:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <settings_menue+0x5d0>)
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	20c8      	movs	r0, #200	; 0xc8
 8001dd4:	f003 ff82 	bl	8005cdc <LCD_PutStr>
 8001dd8:	e020      	b.n	8001e1c <settings_menue+0x54c>
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001dda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	0091      	lsls	r1, r2, #2
 8001dec:	461a      	mov	r2, r3
 8001dee:	460b      	mov	r3, r1
 8001df0:	4413      	add	r3, r2
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	332d      	adds	r3, #45	; 0x2d
 8001df6:	b29c      	uxth	r4, r3
 8001df8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dfc:	f7ff fb64 	bl	80014c8 <RGB_to_BRG>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461d      	mov	r5, r3
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fb5f 	bl	80014c8 <RGB_to_BRG>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	463a      	mov	r2, r7
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	9500      	str	r5, [sp, #0]
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <settings_menue+0x5d0>)
 8001e14:	4621      	mov	r1, r4
 8001e16:	20c8      	movs	r0, #200	; 0xc8
 8001e18:	f003 ff60 	bl	8005cdc <LCD_PutStr>

					}
				}
				if(i >= menu_length-3){
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	dd20      	ble.n	8001e64 <settings_menue+0x594>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	461a      	mov	r2, r3
 8001e32:	0091      	lsls	r1, r2, #2
 8001e34:	461a      	mov	r2, r3
 8001e36:	460b      	mov	r3, r1
 8001e38:	4413      	add	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	332d      	adds	r3, #45	; 0x2d
 8001e3e:	b29c      	uxth	r4, r3
 8001e40:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e44:	f7ff fb40 	bl	80014c8 <RGB_to_BRG>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461d      	mov	r5, r3
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff fb3b 	bl	80014c8 <RGB_to_BRG>
 8001e52:	4603      	mov	r3, r0
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	9500      	str	r5, [sp, #0]
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <settings_menue+0x5d0>)
 8001e5a:	4a14      	ldr	r2, [pc, #80]	; (8001eac <settings_menue+0x5dc>)
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	20c8      	movs	r0, #200	; 0xc8
 8001e60:	f003 ff3c 	bl	8005cdc <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+7;i++){
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3301      	adds	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e6c:	3307      	adds	r3, #7
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f77f aef5 	ble.w	8001c60 <settings_menue+0x390>
		while(menu_active == 1){
 8001e76:	8bfb      	ldrh	r3, [r7, #30]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	f43f ada8 	beq.w	80019ce <settings_menue+0xfe>
				}

			}
		}
	}
}
 8001e7e:	bf00      	nop
 8001e80:	372c      	adds	r7, #44	; 0x2c
 8001e82:	46bd      	mov	sp, r7
 8001e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	4058e000 	.word	0x4058e000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	200006a0 	.word	0x200006a0
 8001e98:	20000088 	.word	0x20000088
 8001e9c:	200000d0 	.word	0x200000d0
 8001ea0:	0801bd00 	.word	0x0801bd00
 8001ea4:	0801ab20 	.word	0x0801ab20
 8001ea8:	40230000 	.word	0x40230000
 8001eac:	0801ab28 	.word	0x0801ab28

08001eb0 <update_display>:

void update_display(){
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 8001eb6:	2228      	movs	r2, #40	; 0x28
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4875      	ldr	r0, [pc, #468]	; (8002090 <update_display+0x1e0>)
 8001ebc:	f015 f855 	bl	8016f6a <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001ec0:	4b74      	ldr	r3, [pc, #464]	; (8002094 <update_display+0x1e4>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	4974      	ldr	r1, [pc, #464]	; (8002098 <update_display+0x1e8>)
 8001ec8:	4871      	ldr	r0, [pc, #452]	; (8002090 <update_display+0x1e0>)
 8001eca:	f014 ffeb 	bl	8016ea4 <siprintf>
	if(sensor_values.set_temperature < 99.5){
 8001ece:	4b71      	ldr	r3, [pc, #452]	; (8002094 <update_display+0x1e4>)
 8001ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed4:	a36c      	add	r3, pc, #432	; (adr r3, 8002088 <update_display+0x1d8>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fe27 	bl	8000b2c <__aeabi_dcmplt>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <update_display+0x40>
		buffer[2] = 32;
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <update_display+0x1e0>)
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 8001eea:	4b69      	ldr	r3, [pc, #420]	; (8002090 <update_display+0x1e0>)
 8001eec:	2220      	movs	r2, #32
 8001eee:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(14, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ef0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ef4:	f7ff fae8 	bl	80014c8 <RGB_to_BRG>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461c      	mov	r4, r3
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff fae3 	bl	80014c8 <RGB_to_BRG>
 8001f02:	4603      	mov	r3, r0
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	9400      	str	r4, [sp, #0]
 8001f08:	4b64      	ldr	r3, [pc, #400]	; (800209c <update_display+0x1ec>)
 8001f0a:	4a61      	ldr	r2, [pc, #388]	; (8002090 <update_display+0x1e0>)
 8001f0c:	214b      	movs	r1, #75	; 0x4b
 8001f0e:	200e      	movs	r0, #14
 8001f10:	f003 fee4 	bl	8005cdc <LCD_PutStr>

	if(sensor_values.heater_current < 500){ //NT115 at 9V draws 810
 8001f14:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <update_display+0x1e4>)
 8001f16:	8a9b      	ldrh	r3, [r3, #20]
 8001f18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f1c:	d212      	bcs.n	8001f44 <update_display+0x94>
	  	LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f22:	f7ff fad1 	bl	80014c8 <RGB_to_BRG>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461c      	mov	r4, r3
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7ff facc 	bl	80014c8 <RGB_to_BRG>
 8001f30:	4603      	mov	r3, r0
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	9400      	str	r4, [sp, #0]
 8001f36:	4b59      	ldr	r3, [pc, #356]	; (800209c <update_display+0x1ec>)
 8001f38:	4a59      	ldr	r2, [pc, #356]	; (80020a0 <update_display+0x1f0>)
 8001f3a:	21a5      	movs	r1, #165	; 0xa5
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f003 fecd 	bl	8005cdc <LCD_PutStr>
 8001f42:	e02e      	b.n	8001fa2 <update_display+0xf2>
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 8001f44:	2228      	movs	r2, #40	; 0x28
 8001f46:	2100      	movs	r1, #0
 8001f48:	4851      	ldr	r0, [pc, #324]	; (8002090 <update_display+0x1e0>)
 8001f4a:	f015 f80e 	bl	8016f6a <memset>
		sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8001f4e:	4b51      	ldr	r3, [pc, #324]	; (8002094 <update_display+0x1e4>)
 8001f50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f54:	4950      	ldr	r1, [pc, #320]	; (8002098 <update_display+0x1e8>)
 8001f56:	484e      	ldr	r0, [pc, #312]	; (8002090 <update_display+0x1e0>)
 8001f58:	f014 ffa4 	bl	8016ea4 <siprintf>
		if(sensor_values.thermocouple_temperature < 99.5){
 8001f5c:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <update_display+0x1e4>)
 8001f5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f62:	a349      	add	r3, pc, #292	; (adr r3, 8002088 <update_display+0x1d8>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fde0 	bl	8000b2c <__aeabi_dcmplt>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <update_display+0xce>
			buffer[2] = 32;
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <update_display+0x1e0>)
 8001f74:	2220      	movs	r2, #32
 8001f76:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001f78:	4b45      	ldr	r3, [pc, #276]	; (8002090 <update_display+0x1e0>)
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	70da      	strb	r2, [r3, #3]
		}
	  	LCD_PutStr(14, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f82:	f7ff faa1 	bl	80014c8 <RGB_to_BRG>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461c      	mov	r4, r3
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff fa9c 	bl	80014c8 <RGB_to_BRG>
 8001f90:	4603      	mov	r3, r0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	9400      	str	r4, [sp, #0]
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <update_display+0x1ec>)
 8001f98:	4a3d      	ldr	r2, [pc, #244]	; (8002090 <update_display+0x1e0>)
 8001f9a:	21a5      	movs	r1, #165	; 0xa5
 8001f9c:	200e      	movs	r0, #14
 8001f9e:	f003 fe9d 	bl	8005cdc <LCD_PutStr>
	}

	memset(&buffer, '\0', sizeof(buffer));
 8001fa2:	2228      	movs	r2, #40	; 0x28
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	483a      	ldr	r0, [pc, #232]	; (8002090 <update_display+0x1e0>)
 8001fa8:	f014 ffdf 	bl	8016f6a <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 8001fac:	4b39      	ldr	r3, [pc, #228]	; (8002094 <update_display+0x1e4>)
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe faf1 	bl	8000598 <__aeabi_f2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	493a      	ldr	r1, [pc, #232]	; (80020a4 <update_display+0x1f4>)
 8001fbc:	4834      	ldr	r0, [pc, #208]	; (8002090 <update_display+0x1e0>)
 8001fbe:	f014 ff71 	bl	8016ea4 <siprintf>
	LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001fc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fc6:	f7ff fa7f 	bl	80014c8 <RGB_to_BRG>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461c      	mov	r4, r3
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fa7a 	bl	80014c8 <RGB_to_BRG>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	9400      	str	r4, [sp, #0]
 8001fda:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <update_display+0x1f8>)
 8001fdc:	4a2c      	ldr	r2, [pc, #176]	; (8002090 <update_display+0x1e0>)
 8001fde:	21ff      	movs	r1, #255	; 0xff
 8001fe0:	2064      	movs	r0, #100	; 0x64
 8001fe2:	f003 fe7b 	bl	8005cdc <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 8001fe6:	2228      	movs	r2, #40	; 0x28
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4829      	ldr	r0, [pc, #164]	; (8002090 <update_display+0x1e0>)
 8001fec:	f014 ffbd 	bl	8016f6a <memset>
	sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <update_display+0x1e4>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe facf 	bl	8000598 <__aeabi_f2d>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4929      	ldr	r1, [pc, #164]	; (80020a4 <update_display+0x1f4>)
 8002000:	4823      	ldr	r0, [pc, #140]	; (8002090 <update_display+0x1e0>)
 8002002:	f014 ff4f 	bl	8016ea4 <siprintf>
	LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002006:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800200a:	f7ff fa5d 	bl	80014c8 <RGB_to_BRG>
 800200e:	4603      	mov	r3, r0
 8002010:	461c      	mov	r4, r3
 8002012:	2000      	movs	r0, #0
 8002014:	f7ff fa58 	bl	80014c8 <RGB_to_BRG>
 8002018:	4603      	mov	r3, r0
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	9400      	str	r4, [sp, #0]
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <update_display+0x1f8>)
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <update_display+0x1e0>)
 8002022:	f240 1113 	movw	r1, #275	; 0x113
 8002026:	2064      	movs	r0, #100	; 0x64
 8002028:	f003 fe58 	bl	8005cdc <LCD_PutStr>

	if(handle == T210){
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <update_display+0x1fc>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d112      	bne.n	800205a <update_display+0x1aa>
		LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002034:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002038:	f7ff fa46 	bl	80014c8 <RGB_to_BRG>
 800203c:	4603      	mov	r3, r0
 800203e:	461c      	mov	r4, r3
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fa41 	bl	80014c8 <RGB_to_BRG>
 8002046:	4603      	mov	r3, r0
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	9400      	str	r4, [sp, #0]
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <update_display+0x1f8>)
 800204e:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <update_display+0x200>)
 8002050:	21eb      	movs	r1, #235	; 0xeb
 8002052:	2064      	movs	r0, #100	; 0x64
 8002054:	f003 fe42 	bl	8005cdc <LCD_PutStr>
 8002058:	e044      	b.n	80020e4 <update_display+0x234>
	}
	else if(handle == T245){
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <update_display+0x1fc>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d12a      	bne.n	80020b8 <update_display+0x208>
		LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002062:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002066:	f7ff fa2f 	bl	80014c8 <RGB_to_BRG>
 800206a:	4603      	mov	r3, r0
 800206c:	461c      	mov	r4, r3
 800206e:	2000      	movs	r0, #0
 8002070:	f7ff fa2a 	bl	80014c8 <RGB_to_BRG>
 8002074:	4603      	mov	r3, r0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	9400      	str	r4, [sp, #0]
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <update_display+0x1f8>)
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <update_display+0x204>)
 800207e:	21eb      	movs	r1, #235	; 0xeb
 8002080:	2064      	movs	r0, #100	; 0x64
 8002082:	f003 fe2b 	bl	8005cdc <LCD_PutStr>
 8002086:	e02d      	b.n	80020e4 <update_display+0x234>
 8002088:	00000000 	.word	0x00000000
 800208c:	4058e000 	.word	0x4058e000
 8002090:	20000600 	.word	0x20000600
 8002094:	20000038 	.word	0x20000038
 8002098:	0801ab30 	.word	0x0801ab30
 800209c:	0801cc78 	.word	0x0801cc78
 80020a0:	0801ab34 	.word	0x0801ab34
 80020a4:	0801ab3c 	.word	0x0801ab3c
 80020a8:	0801ad30 	.word	0x0801ad30
 80020ac:	200005b8 	.word	0x200005b8
 80020b0:	0801ab44 	.word	0x0801ab44
 80020b4:	0801ab4c 	.word	0x0801ab4c
	}
	else if(handle == NT115){
 80020b8:	4bab      	ldr	r3, [pc, #684]	; (8002368 <update_display+0x4b8>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d111      	bne.n	80020e4 <update_display+0x234>
		LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020c4:	f7ff fa00 	bl	80014c8 <RGB_to_BRG>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461c      	mov	r4, r3
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff f9fb 	bl	80014c8 <RGB_to_BRG>
 80020d2:	4603      	mov	r3, r0
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	9400      	str	r4, [sp, #0]
 80020d8:	4ba4      	ldr	r3, [pc, #656]	; (800236c <update_display+0x4bc>)
 80020da:	4aa5      	ldr	r2, [pc, #660]	; (8002370 <update_display+0x4c0>)
 80020dc:	21eb      	movs	r1, #235	; 0xeb
 80020de:	2064      	movs	r0, #100	; 0x64
 80020e0:	f003 fdfc 	bl	8005cdc <LCD_PutStr>
	}

	if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 80020e4:	4ba3      	ldr	r3, [pc, #652]	; (8002374 <update_display+0x4c4>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d008      	beq.n	80020fe <update_display+0x24e>
 80020ec:	4ba1      	ldr	r3, [pc, #644]	; (8002374 <update_display+0x4c4>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d004      	beq.n	80020fe <update_display+0x24e>
 80020f4:	4b9f      	ldr	r3, [pc, #636]	; (8002374 <update_display+0x4c4>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	f040 8098 	bne.w	800222e <update_display+0x37e>
 80020fe:	4b9e      	ldr	r3, [pc, #632]	; (8002378 <update_display+0x4c8>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 8093 	bne.w	800222e <update_display+0x37e>
		UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 8002108:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800210c:	f7ff f9dc 	bl	80014c8 <RGB_to_BRG>
 8002110:	4603      	mov	r3, r0
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002118:	22e6      	movs	r2, #230	; 0xe6
 800211a:	2137      	movs	r1, #55	; 0x37
 800211c:	20d2      	movs	r0, #210	; 0xd2
 800211e:	f010 f82d 	bl	801217c <UG_FillFrame>
		LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff f9d0 	bl	80014c8 <RGB_to_BRG>
 8002128:	4603      	mov	r3, r0
 800212a:	461c      	mov	r4, r3
 800212c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002130:	f7ff f9ca 	bl	80014c8 <RGB_to_BRG>
 8002134:	4603      	mov	r3, r0
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	9400      	str	r4, [sp, #0]
 800213a:	4b90      	ldr	r3, [pc, #576]	; (800237c <update_display+0x4cc>)
 800213c:	4a90      	ldr	r2, [pc, #576]	; (8002380 <update_display+0x4d0>)
 800213e:	213a      	movs	r1, #58	; 0x3a
 8002140:	20d6      	movs	r0, #214	; 0xd6
 8002142:	f003 fdcb 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff f9be 	bl	80014c8 <RGB_to_BRG>
 800214c:	4603      	mov	r3, r0
 800214e:	461c      	mov	r4, r3
 8002150:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002154:	f7ff f9b8 	bl	80014c8 <RGB_to_BRG>
 8002158:	4603      	mov	r3, r0
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	9400      	str	r4, [sp, #0]
 800215e:	4b87      	ldr	r3, [pc, #540]	; (800237c <update_display+0x4cc>)
 8002160:	4a88      	ldr	r2, [pc, #544]	; (8002384 <update_display+0x4d4>)
 8002162:	215c      	movs	r1, #92	; 0x5c
 8002164:	20d8      	movs	r0, #216	; 0xd8
 8002166:	f003 fdb9 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800216a:	2000      	movs	r0, #0
 800216c:	f7ff f9ac 	bl	80014c8 <RGB_to_BRG>
 8002170:	4603      	mov	r3, r0
 8002172:	461c      	mov	r4, r3
 8002174:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002178:	f7ff f9a6 	bl	80014c8 <RGB_to_BRG>
 800217c:	4603      	mov	r3, r0
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	9400      	str	r4, [sp, #0]
 8002182:	4b7e      	ldr	r3, [pc, #504]	; (800237c <update_display+0x4cc>)
 8002184:	4a7e      	ldr	r2, [pc, #504]	; (8002380 <update_display+0x4d0>)
 8002186:	217e      	movs	r1, #126	; 0x7e
 8002188:	20d6      	movs	r0, #214	; 0xd6
 800218a:	f003 fda7 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff f99a 	bl	80014c8 <RGB_to_BRG>
 8002194:	4603      	mov	r3, r0
 8002196:	461c      	mov	r4, r3
 8002198:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800219c:	f7ff f994 	bl	80014c8 <RGB_to_BRG>
 80021a0:	4603      	mov	r3, r0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	9400      	str	r4, [sp, #0]
 80021a6:	4b75      	ldr	r3, [pc, #468]	; (800237c <update_display+0x4cc>)
 80021a8:	4a76      	ldr	r2, [pc, #472]	; (8002384 <update_display+0x4d4>)
 80021aa:	21a1      	movs	r1, #161	; 0xa1
 80021ac:	20d8      	movs	r0, #216	; 0xd8
 80021ae:	f003 fd95 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7ff f988 	bl	80014c8 <RGB_to_BRG>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461c      	mov	r4, r3
 80021bc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021c0:	f7ff f982 	bl	80014c8 <RGB_to_BRG>
 80021c4:	4603      	mov	r3, r0
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	9400      	str	r4, [sp, #0]
 80021ca:	4b6c      	ldr	r3, [pc, #432]	; (800237c <update_display+0x4cc>)
 80021cc:	4a6c      	ldr	r2, [pc, #432]	; (8002380 <update_display+0x4d0>)
 80021ce:	21c2      	movs	r1, #194	; 0xc2
 80021d0:	20d6      	movs	r0, #214	; 0xd6
 80021d2:	f003 fd83 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff f976 	bl	80014c8 <RGB_to_BRG>
 80021dc:	4603      	mov	r3, r0
 80021de:	461c      	mov	r4, r3
 80021e0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021e4:	f7ff f970 	bl	80014c8 <RGB_to_BRG>
 80021e8:	4603      	mov	r3, r0
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	9400      	str	r4, [sp, #0]
 80021ee:	4b63      	ldr	r3, [pc, #396]	; (800237c <update_display+0x4cc>)
 80021f0:	4a64      	ldr	r2, [pc, #400]	; (8002384 <update_display+0x4d4>)
 80021f2:	21e4      	movs	r1, #228	; 0xe4
 80021f4:	20d8      	movs	r0, #216	; 0xd8
 80021f6:	f003 fd71 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff f964 	bl	80014c8 <RGB_to_BRG>
 8002200:	4603      	mov	r3, r0
 8002202:	461c      	mov	r4, r3
 8002204:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002208:	f7ff f95e 	bl	80014c8 <RGB_to_BRG>
 800220c:	4603      	mov	r3, r0
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	9400      	str	r4, [sp, #0]
 8002212:	4b5a      	ldr	r3, [pc, #360]	; (800237c <update_display+0x4cc>)
 8002214:	4a5a      	ldr	r2, [pc, #360]	; (8002380 <update_display+0x4d0>)
 8002216:	f44f 7183 	mov.w	r1, #262	; 0x106
 800221a:	20d6      	movs	r0, #214	; 0xd6
 800221c:	f003 fd5e 	bl	8005cdc <LCD_PutStr>
		sleep_state_written_to_LCD = 1;
 8002220:	4b55      	ldr	r3, [pc, #340]	; (8002378 <update_display+0x4c8>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
		standby_state_written_to_LCD = 0;
 8002226:	4b58      	ldr	r3, [pc, #352]	; (8002388 <update_display+0x4d8>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e128      	b.n	8002480 <update_display+0x5d0>
	}
	else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800222e:	4b51      	ldr	r3, [pc, #324]	; (8002374 <update_display+0x4c4>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	f040 80b8 	bne.w	80023a8 <update_display+0x4f8>
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <update_display+0x4d8>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 80b3 	bne.w	80023a8 <update_display+0x4f8>
		UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 8002242:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002246:	f7ff f93f 	bl	80014c8 <RGB_to_BRG>
 800224a:	4603      	mov	r3, r0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002252:	22e6      	movs	r2, #230	; 0xe6
 8002254:	2137      	movs	r1, #55	; 0x37
 8002256:	20d2      	movs	r0, #210	; 0xd2
 8002258:	f00f ff90 	bl	801217c <UG_FillFrame>
		LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff f933 	bl	80014c8 <RGB_to_BRG>
 8002262:	4603      	mov	r3, r0
 8002264:	461c      	mov	r4, r3
 8002266:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800226a:	f7ff f92d 	bl	80014c8 <RGB_to_BRG>
 800226e:	4603      	mov	r3, r0
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	9400      	str	r4, [sp, #0]
 8002274:	4b41      	ldr	r3, [pc, #260]	; (800237c <update_display+0x4cc>)
 8002276:	4a45      	ldr	r2, [pc, #276]	; (800238c <update_display+0x4dc>)
 8002278:	213a      	movs	r1, #58	; 0x3a
 800227a:	20d6      	movs	r0, #214	; 0xd6
 800227c:	f003 fd2e 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002280:	2000      	movs	r0, #0
 8002282:	f7ff f921 	bl	80014c8 <RGB_to_BRG>
 8002286:	4603      	mov	r3, r0
 8002288:	461c      	mov	r4, r3
 800228a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800228e:	f7ff f91b 	bl	80014c8 <RGB_to_BRG>
 8002292:	4603      	mov	r3, r0
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	9400      	str	r4, [sp, #0]
 8002298:	4b38      	ldr	r3, [pc, #224]	; (800237c <update_display+0x4cc>)
 800229a:	4a3d      	ldr	r2, [pc, #244]	; (8002390 <update_display+0x4e0>)
 800229c:	215c      	movs	r1, #92	; 0x5c
 800229e:	20d6      	movs	r0, #214	; 0xd6
 80022a0:	f003 fd1c 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff f90f 	bl	80014c8 <RGB_to_BRG>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461c      	mov	r4, r3
 80022ae:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022b2:	f7ff f909 	bl	80014c8 <RGB_to_BRG>
 80022b6:	4603      	mov	r3, r0
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	9400      	str	r4, [sp, #0]
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <update_display+0x4cc>)
 80022be:	4a35      	ldr	r2, [pc, #212]	; (8002394 <update_display+0x4e4>)
 80022c0:	217e      	movs	r1, #126	; 0x7e
 80022c2:	20d6      	movs	r0, #214	; 0xd6
 80022c4:	f003 fd0a 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff f8fd 	bl	80014c8 <RGB_to_BRG>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461c      	mov	r4, r3
 80022d2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022d6:	f7ff f8f7 	bl	80014c8 <RGB_to_BRG>
 80022da:	4603      	mov	r3, r0
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	9400      	str	r4, [sp, #0]
 80022e0:	4b26      	ldr	r3, [pc, #152]	; (800237c <update_display+0x4cc>)
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <update_display+0x4e8>)
 80022e4:	21a1      	movs	r1, #161	; 0xa1
 80022e6:	20d6      	movs	r0, #214	; 0xd6
 80022e8:	f003 fcf8 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7ff f8eb 	bl	80014c8 <RGB_to_BRG>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461c      	mov	r4, r3
 80022f6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022fa:	f7ff f8e5 	bl	80014c8 <RGB_to_BRG>
 80022fe:	4603      	mov	r3, r0
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	9400      	str	r4, [sp, #0]
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <update_display+0x4cc>)
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <update_display+0x4ec>)
 8002308:	21c2      	movs	r1, #194	; 0xc2
 800230a:	20d6      	movs	r0, #214	; 0xd6
 800230c:	f003 fce6 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff f8d9 	bl	80014c8 <RGB_to_BRG>
 8002316:	4603      	mov	r3, r0
 8002318:	461c      	mov	r4, r3
 800231a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800231e:	f7ff f8d3 	bl	80014c8 <RGB_to_BRG>
 8002322:	4603      	mov	r3, r0
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	9400      	str	r4, [sp, #0]
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <update_display+0x4cc>)
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <update_display+0x4f0>)
 800232c:	21e4      	movs	r1, #228	; 0xe4
 800232e:	20d6      	movs	r0, #214	; 0xd6
 8002330:	f003 fcd4 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff f8c7 	bl	80014c8 <RGB_to_BRG>
 800233a:	4603      	mov	r3, r0
 800233c:	461c      	mov	r4, r3
 800233e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002342:	f7ff f8c1 	bl	80014c8 <RGB_to_BRG>
 8002346:	4603      	mov	r3, r0
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	9400      	str	r4, [sp, #0]
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <update_display+0x4cc>)
 800234e:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <update_display+0x4f4>)
 8002350:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002354:	20d6      	movs	r0, #214	; 0xd6
 8002356:	f003 fcc1 	bl	8005cdc <LCD_PutStr>
		standby_state_written_to_LCD = 1;
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <update_display+0x4d8>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <update_display+0x4c8>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e08b      	b.n	8002480 <update_display+0x5d0>
 8002368:	200005b8 	.word	0x200005b8
 800236c:	0801ad30 	.word	0x0801ad30
 8002370:	0801ab54 	.word	0x0801ab54
 8002374:	2000001d 	.word	0x2000001d
 8002378:	200005df 	.word	0x200005df
 800237c:	0801bd00 	.word	0x0801bd00
 8002380:	0801ab5c 	.word	0x0801ab5c
 8002384:	0801ab60 	.word	0x0801ab60
 8002388:	200005e0 	.word	0x200005e0
 800238c:	0801ab64 	.word	0x0801ab64
 8002390:	0801ab68 	.word	0x0801ab68
 8002394:	0801ab6c 	.word	0x0801ab6c
 8002398:	0801ab70 	.word	0x0801ab70
 800239c:	0801ab74 	.word	0x0801ab74
 80023a0:	0801ab78 	.word	0x0801ab78
 80023a4:	0801ab7c 	.word	0x0801ab7c
	}
	else if(active_state == RUN){
 80023a8:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <update_display+0x5e8>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d167      	bne.n	8002480 <update_display+0x5d0>
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 80023b0:	4b3a      	ldr	r3, [pc, #232]	; (800249c <update_display+0x5ec>)
 80023b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <update_display+0x5f0>)
 80023bc:	f7fe fa6e 	bl	800089c <__aeabi_ddiv>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <update_display+0x5f4>)
 80023ce:	f7fe f93b 	bl	8000648 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	a12c      	add	r1, pc, #176	; (adr r1, 8002488 <update_display+0x5d8>)
 80023d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023dc:	f7fd ff7c 	bl	80002d8 <__aeabi_dsub>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fbde 	bl	8000ba8 <__aeabi_d2iz>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b21c      	sxth	r4, r3
 80023f0:	f248 607e 	movw	r0, #34430	; 0x867e
 80023f4:	f7ff f868 	bl	80014c8 <RGB_to_BRG>
 80023f8:	4603      	mov	r3, r0
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	f240 131f 	movw	r3, #287	; 0x11f
 8002400:	22e6      	movs	r2, #230	; 0xe6
 8002402:	4621      	mov	r1, r4
 8002404:	20d2      	movs	r0, #210	; 0xd2
 8002406:	f00f feb9 	bl	801217c <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <update_display+0x5ec>)
 800240c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <update_display+0x5f0>)
 8002416:	f7fe fa41 	bl	800089c <__aeabi_ddiv>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	a31b      	add	r3, pc, #108	; (adr r3, 8002490 <update_display+0x5e0>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f90e 	bl	8000648 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	a115      	add	r1, pc, #84	; (adr r1, 8002488 <update_display+0x5d8>)
 8002432:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002436:	f7fd ff4f 	bl	80002d8 <__aeabi_dsub>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <update_display+0x5f8>)
 8002448:	f7fd ff46 	bl	80002d8 <__aeabi_dsub>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fba8 	bl	8000ba8 <__aeabi_d2iz>
 8002458:	4603      	mov	r3, r0
 800245a:	b21c      	sxth	r4, r3
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff f833 	bl	80014c8 <RGB_to_BRG>
 8002462:	4603      	mov	r3, r0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4623      	mov	r3, r4
 8002468:	22e6      	movs	r2, #230	; 0xe6
 800246a:	2137      	movs	r1, #55	; 0x37
 800246c:	20d2      	movs	r0, #210	; 0xd2
 800246e:	f00f fe85 	bl	801217c <UG_FillFrame>
		standby_state_written_to_LCD = 0;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <update_display+0x5fc>)
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 8002478:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <update_display+0x600>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
	}
}
 800247e:	e7ff      	b.n	8002480 <update_display+0x5d0>
 8002480:	bf00      	nop
 8002482:	3704      	adds	r7, #4
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	00000000 	.word	0x00000000
 800248c:	4071f000 	.word	0x4071f000
 8002490:	00000000 	.word	0x00000000
 8002494:	406ce000 	.word	0x406ce000
 8002498:	2000001d 	.word	0x2000001d
 800249c:	200006e8 	.word	0x200006e8
 80024a0:	407f4000 	.word	0x407f4000
 80024a4:	406d0000 	.word	0x406d0000
 80024a8:	3ff00000 	.word	0x3ff00000
 80024ac:	200005e0 	.word	0x200005e0
 80024b0:	200005df 	.word	0x200005df

080024b4 <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af02      	add	r7, sp, #8
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff f804 	bl	80014c8 <RGB_to_BRG>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00f fe36 	bl	8012134 <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80024c8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80024cc:	f7fe fffc 	bl	80014c8 <RGB_to_BRG>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461c      	mov	r4, r3
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7fe fff7 	bl	80014c8 <RGB_to_BRG>
 80024da:	4603      	mov	r3, r0
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	9400      	str	r4, [sp, #0]
 80024e0:	4bc3      	ldr	r3, [pc, #780]	; (80027f0 <LCD_draw_main_screen+0x33c>)
 80024e2:	4ac4      	ldr	r2, [pc, #784]	; (80027f4 <LCD_draw_main_screen+0x340>)
 80024e4:	210c      	movs	r1, #12
 80024e6:	2035      	movs	r0, #53	; 0x35
 80024e8:	f003 fbf8 	bl	8005cdc <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 80024ec:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80024f0:	f7fe ffea 	bl	80014c8 <RGB_to_BRG>
 80024f4:	4603      	mov	r3, r0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2328      	movs	r3, #40	; 0x28
 80024fa:	22f0      	movs	r2, #240	; 0xf0
 80024fc:	2128      	movs	r1, #40	; 0x28
 80024fe:	2000      	movs	r0, #0
 8002500:	f003 fbae 	bl	8005c60 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002504:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002508:	f7fe ffde 	bl	80014c8 <RGB_to_BRG>
 800250c:	4603      	mov	r3, r0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2329      	movs	r3, #41	; 0x29
 8002512:	22f0      	movs	r2, #240	; 0xf0
 8002514:	2129      	movs	r1, #41	; 0x29
 8002516:	2000      	movs	r0, #0
 8002518:	f003 fba2 	bl	8005c60 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 800251c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002520:	f7fe ffd2 	bl	80014c8 <RGB_to_BRG>
 8002524:	4603      	mov	r3, r0
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	232a      	movs	r3, #42	; 0x2a
 800252a:	22f0      	movs	r2, #240	; 0xf0
 800252c:	212a      	movs	r1, #42	; 0x2a
 800252e:	2000      	movs	r0, #0
 8002530:	f003 fb96 	bl	8005c60 <LCD_DrawLine>


		LCD_PutStr(14, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002534:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002538:	f7fe ffc6 	bl	80014c8 <RGB_to_BRG>
 800253c:	4603      	mov	r3, r0
 800253e:	461c      	mov	r4, r3
 8002540:	2000      	movs	r0, #0
 8002542:	f7fe ffc1 	bl	80014c8 <RGB_to_BRG>
 8002546:	4603      	mov	r3, r0
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	9400      	str	r4, [sp, #0]
 800254c:	4baa      	ldr	r3, [pc, #680]	; (80027f8 <LCD_draw_main_screen+0x344>)
 800254e:	4aab      	ldr	r2, [pc, #684]	; (80027fc <LCD_draw_main_screen+0x348>)
 8002550:	2132      	movs	r1, #50	; 0x32
 8002552:	200e      	movs	r0, #14
 8002554:	f003 fbc2 	bl	8005cdc <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002558:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800255c:	f7fe ffb4 	bl	80014c8 <RGB_to_BRG>
 8002560:	4603      	mov	r3, r0
 8002562:	2205      	movs	r2, #5
 8002564:	2155      	movs	r1, #85	; 0x55
 8002566:	2078      	movs	r0, #120	; 0x78
 8002568:	f00f fec2 	bl	80122f0 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 800256c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002570:	f7fe ffaa 	bl	80014c8 <RGB_to_BRG>
 8002574:	4603      	mov	r3, r0
 8002576:	2204      	movs	r2, #4
 8002578:	2155      	movs	r1, #85	; 0x55
 800257a:	2078      	movs	r0, #120	; 0x78
 800257c:	f00f feb8 	bl	80122f0 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002580:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002584:	f7fe ffa0 	bl	80014c8 <RGB_to_BRG>
 8002588:	4603      	mov	r3, r0
 800258a:	2203      	movs	r2, #3
 800258c:	2155      	movs	r1, #85	; 0x55
 800258e:	2078      	movs	r0, #120	; 0x78
 8002590:	f00f feae 	bl	80122f0 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002594:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002598:	f7fe ff96 	bl	80014c8 <RGB_to_BRG>
 800259c:	4603      	mov	r3, r0
 800259e:	461c      	mov	r4, r3
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7fe ff91 	bl	80014c8 <RGB_to_BRG>
 80025a6:	4603      	mov	r3, r0
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	9400      	str	r4, [sp, #0]
 80025ac:	4b94      	ldr	r3, [pc, #592]	; (8002800 <LCD_draw_main_screen+0x34c>)
 80025ae:	4a95      	ldr	r2, [pc, #596]	; (8002804 <LCD_draw_main_screen+0x350>)
 80025b0:	214b      	movs	r1, #75	; 0x4b
 80025b2:	2082      	movs	r0, #130	; 0x82
 80025b4:	f003 fb92 	bl	8005cdc <LCD_PutStr>


		LCD_PutStr(14, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80025b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025bc:	f7fe ff84 	bl	80014c8 <RGB_to_BRG>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461c      	mov	r4, r3
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe ff7f 	bl	80014c8 <RGB_to_BRG>
 80025ca:	4603      	mov	r3, r0
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	9400      	str	r4, [sp, #0]
 80025d0:	4b89      	ldr	r3, [pc, #548]	; (80027f8 <LCD_draw_main_screen+0x344>)
 80025d2:	4a8d      	ldr	r2, [pc, #564]	; (8002808 <LCD_draw_main_screen+0x354>)
 80025d4:	218c      	movs	r1, #140	; 0x8c
 80025d6:	200e      	movs	r0, #14
 80025d8:	f003 fb80 	bl	8005cdc <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 80025dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025e0:	f7fe ff72 	bl	80014c8 <RGB_to_BRG>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2205      	movs	r2, #5
 80025e8:	21af      	movs	r1, #175	; 0xaf
 80025ea:	2078      	movs	r0, #120	; 0x78
 80025ec:	f00f fe80 	bl	80122f0 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 80025f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025f4:	f7fe ff68 	bl	80014c8 <RGB_to_BRG>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2204      	movs	r2, #4
 80025fc:	21af      	movs	r1, #175	; 0xaf
 80025fe:	2078      	movs	r0, #120	; 0x78
 8002600:	f00f fe76 	bl	80122f0 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 8002604:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002608:	f7fe ff5e 	bl	80014c8 <RGB_to_BRG>
 800260c:	4603      	mov	r3, r0
 800260e:	2203      	movs	r2, #3
 8002610:	21af      	movs	r1, #175	; 0xaf
 8002612:	2078      	movs	r0, #120	; 0x78
 8002614:	f00f fe6c 	bl	80122f0 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002618:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800261c:	f7fe ff54 	bl	80014c8 <RGB_to_BRG>
 8002620:	4603      	mov	r3, r0
 8002622:	461c      	mov	r4, r3
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe ff4f 	bl	80014c8 <RGB_to_BRG>
 800262a:	4603      	mov	r3, r0
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	9400      	str	r4, [sp, #0]
 8002630:	4b73      	ldr	r3, [pc, #460]	; (8002800 <LCD_draw_main_screen+0x34c>)
 8002632:	4a74      	ldr	r2, [pc, #464]	; (8002804 <LCD_draw_main_screen+0x350>)
 8002634:	21a5      	movs	r1, #165	; 0xa5
 8002636:	2082      	movs	r0, #130	; 0x82
 8002638:	f003 fb50 	bl	8005cdc <LCD_PutStr>

		UG_DrawFrame(6, 134, 182, 220, RGB_to_BRG(C_WHITE));
 800263c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002640:	f7fe ff42 	bl	80014c8 <RGB_to_BRG>
 8002644:	4603      	mov	r3, r0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	23dc      	movs	r3, #220	; 0xdc
 800264a:	22b6      	movs	r2, #182	; 0xb6
 800264c:	2186      	movs	r1, #134	; 0x86
 800264e:	2006      	movs	r0, #6
 8002650:	f00f fe06 	bl	8012260 <UG_DrawFrame>
		UG_DrawFrame(5, 133, 183, 221, RGB_to_BRG(C_WHITE));
 8002654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002658:	f7fe ff36 	bl	80014c8 <RGB_to_BRG>
 800265c:	4603      	mov	r3, r0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	23dd      	movs	r3, #221	; 0xdd
 8002662:	22b7      	movs	r2, #183	; 0xb7
 8002664:	2185      	movs	r1, #133	; 0x85
 8002666:	2005      	movs	r0, #5
 8002668:	f00f fdfa 	bl	8012260 <UG_DrawFrame>

		LCD_PutStr(6, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800266c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002670:	f7fe ff2a 	bl	80014c8 <RGB_to_BRG>
 8002674:	4603      	mov	r3, r0
 8002676:	461c      	mov	r4, r3
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe ff25 	bl	80014c8 <RGB_to_BRG>
 800267e:	4603      	mov	r3, r0
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9400      	str	r4, [sp, #0]
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <LCD_draw_main_screen+0x358>)
 8002686:	4a62      	ldr	r2, [pc, #392]	; (8002810 <LCD_draw_main_screen+0x35c>)
 8002688:	21eb      	movs	r1, #235	; 0xeb
 800268a:	2006      	movs	r0, #6
 800268c:	f003 fb26 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(6, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002690:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002694:	f7fe ff18 	bl	80014c8 <RGB_to_BRG>
 8002698:	4603      	mov	r3, r0
 800269a:	461c      	mov	r4, r3
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe ff13 	bl	80014c8 <RGB_to_BRG>
 80026a2:	4603      	mov	r3, r0
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	9400      	str	r4, [sp, #0]
 80026a8:	4b58      	ldr	r3, [pc, #352]	; (800280c <LCD_draw_main_screen+0x358>)
 80026aa:	4a5a      	ldr	r2, [pc, #360]	; (8002814 <LCD_draw_main_screen+0x360>)
 80026ac:	21ff      	movs	r1, #255	; 0xff
 80026ae:	2006      	movs	r0, #6
 80026b0:	f003 fb14 	bl	8005cdc <LCD_PutStr>
		LCD_PutStr(6, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026b8:	f7fe ff06 	bl	80014c8 <RGB_to_BRG>
 80026bc:	4603      	mov	r3, r0
 80026be:	461c      	mov	r4, r3
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe ff01 	bl	80014c8 <RGB_to_BRG>
 80026c6:	4603      	mov	r3, r0
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	9400      	str	r4, [sp, #0]
 80026cc:	4b4f      	ldr	r3, [pc, #316]	; (800280c <LCD_draw_main_screen+0x358>)
 80026ce:	4a52      	ldr	r2, [pc, #328]	; (8002818 <LCD_draw_main_screen+0x364>)
 80026d0:	f240 1113 	movw	r1, #275	; 0x113
 80026d4:	2006      	movs	r0, #6
 80026d6:	f003 fb01 	bl	8005cdc <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 80026da:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80026de:	f7fe fef3 	bl	80014c8 <RGB_to_BRG>
 80026e2:	4603      	mov	r3, r0
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	f44f 7394 	mov.w	r3, #296	; 0x128
 80026ea:	22f0      	movs	r2, #240	; 0xf0
 80026ec:	f44f 7194 	mov.w	r1, #296	; 0x128
 80026f0:	2002      	movs	r0, #2
 80026f2:	f00f fee3 	bl	80124bc <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 80026f6:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80026fa:	f7fe fee5 	bl	80014c8 <RGB_to_BRG>
 80026fe:	4603      	mov	r3, r0
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f240 1329 	movw	r3, #297	; 0x129
 8002706:	22f0      	movs	r2, #240	; 0xf0
 8002708:	f240 1129 	movw	r1, #297	; 0x129
 800270c:	2002      	movs	r0, #2
 800270e:	f00f fed5 	bl	80124bc <UG_DrawLine>


		LCD_PutStr(6, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002712:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002716:	f7fe fed7 	bl	80014c8 <RGB_to_BRG>
 800271a:	4603      	mov	r3, r0
 800271c:	461c      	mov	r4, r3
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe fed2 	bl	80014c8 <RGB_to_BRG>
 8002724:	4603      	mov	r3, r0
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	9400      	str	r4, [sp, #0]
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <LCD_draw_main_screen+0x344>)
 800272c:	4a3b      	ldr	r2, [pc, #236]	; (800281c <LCD_draw_main_screen+0x368>)
 800272e:	f240 112d 	movw	r1, #301	; 0x12d
 8002732:	2006      	movs	r0, #6
 8002734:	f003 fad2 	bl	8005cdc <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002738:	2228      	movs	r2, #40	; 0x28
 800273a:	2100      	movs	r1, #0
 800273c:	4838      	ldr	r0, [pc, #224]	; (8002820 <LCD_draw_main_screen+0x36c>)
 800273e:	f014 fc14 	bl	8016f6a <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <LCD_draw_main_screen+0x370>)
 8002744:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002748:	4937      	ldr	r1, [pc, #220]	; (8002828 <LCD_draw_main_screen+0x374>)
 800274a:	4835      	ldr	r0, [pc, #212]	; (8002820 <LCD_draw_main_screen+0x36c>)
 800274c:	f014 fbaa 	bl	8016ea4 <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002750:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002754:	f7fe feb8 	bl	80014c8 <RGB_to_BRG>
 8002758:	4603      	mov	r3, r0
 800275a:	461c      	mov	r4, r3
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe feb3 	bl	80014c8 <RGB_to_BRG>
 8002762:	4603      	mov	r3, r0
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	9400      	str	r4, [sp, #0]
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <LCD_draw_main_screen+0x344>)
 800276a:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <LCD_draw_main_screen+0x36c>)
 800276c:	f240 112d 	movw	r1, #301	; 0x12d
 8002770:	2082      	movs	r0, #130	; 0x82
 8002772:	f003 fab3 	bl	8005cdc <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002776:	2228      	movs	r2, #40	; 0x28
 8002778:	2100      	movs	r1, #0
 800277a:	4829      	ldr	r0, [pc, #164]	; (8002820 <LCD_draw_main_screen+0x36c>)
 800277c:	f014 fbf5 	bl	8016f6a <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <LCD_draw_main_screen+0x370>)
 8002782:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002786:	4928      	ldr	r1, [pc, #160]	; (8002828 <LCD_draw_main_screen+0x374>)
 8002788:	4825      	ldr	r0, [pc, #148]	; (8002820 <LCD_draw_main_screen+0x36c>)
 800278a:	f014 fb8b 	bl	8016ea4 <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 800278e:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002792:	f7fe fe99 	bl	80014c8 <RGB_to_BRG>
 8002796:	4603      	mov	r3, r0
 8002798:	461c      	mov	r4, r3
 800279a:	2000      	movs	r0, #0
 800279c:	f7fe fe94 	bl	80014c8 <RGB_to_BRG>
 80027a0:	4603      	mov	r3, r0
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	9400      	str	r4, [sp, #0]
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <LCD_draw_main_screen+0x344>)
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <LCD_draw_main_screen+0x36c>)
 80027aa:	f240 112d 	movw	r1, #301	; 0x12d
 80027ae:	20be      	movs	r0, #190	; 0xbe
 80027b0:	f003 fa94 	bl	8005cdc <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 80027b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027b8:	f7fe fe86 	bl	80014c8 <RGB_to_BRG>
 80027bc:	4603      	mov	r3, r0
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	f240 1321 	movw	r3, #289	; 0x121
 80027c4:	22e8      	movs	r2, #232	; 0xe8
 80027c6:	2135      	movs	r1, #53	; 0x35
 80027c8:	20d0      	movs	r0, #208	; 0xd0
 80027ca:	f00f fd49 	bl	8012260 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 80027ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027d2:	f7fe fe79 	bl	80014c8 <RGB_to_BRG>
 80027d6:	4603      	mov	r3, r0
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	f44f 7390 	mov.w	r3, #288	; 0x120
 80027de:	22e7      	movs	r2, #231	; 0xe7
 80027e0:	2136      	movs	r1, #54	; 0x36
 80027e2:	20d1      	movs	r0, #209	; 0xd1
 80027e4:	f00f fd3c 	bl	8012260 <UG_DrawFrame>
}
 80027e8:	bf00      	nop
 80027ea:	3704      	adds	r7, #4
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}
 80027f0:	0801bacc 	.word	0x0801bacc
 80027f4:	0801ab80 	.word	0x0801ab80
 80027f8:	0801bd00 	.word	0x0801bd00
 80027fc:	0801ab8c 	.word	0x0801ab8c
 8002800:	0801cb98 	.word	0x0801cb98
 8002804:	0801ab98 	.word	0x0801ab98
 8002808:	0801ab9c 	.word	0x0801ab9c
 800280c:	0801ad30 	.word	0x0801ad30
 8002810:	0801aba8 	.word	0x0801aba8
 8002814:	0801abb8 	.word	0x0801abb8
 8002818:	0801abd4 	.word	0x0801abd4
 800281c:	0801abf4 	.word	0x0801abf4
 8002820:	20000600 	.word	0x20000600
 8002824:	200006a0 	.word	0x200006a0
 8002828:	0801ab20 	.word	0x0801ab20

0800282c <LCD_draw_earth_fault_popup>:

void LCD_draw_earth_fault_popup(){
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b083      	sub	sp, #12
 8002830:	af02      	add	r7, sp, #8
	heater_off();
 8002832:	f7ff f843 	bl	80018bc <heater_off>

	UG_FillFrame(10, 50, 205, 205, RGB_to_BRG(C_ORANGE));
 8002836:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800283a:	f7fe fe45 	bl	80014c8 <RGB_to_BRG>
 800283e:	4603      	mov	r3, r0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	23cd      	movs	r3, #205	; 0xcd
 8002844:	22cd      	movs	r2, #205	; 0xcd
 8002846:	2132      	movs	r1, #50	; 0x32
 8002848:	200a      	movs	r0, #10
 800284a:	f00f fc97 	bl	801217c <UG_FillFrame>
	UG_FillFrame(15, 55, 200, 200, RGB_to_BRG(C_WHITE));
 800284e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002852:	f7fe fe39 	bl	80014c8 <RGB_to_BRG>
 8002856:	4603      	mov	r3, r0
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	23c8      	movs	r3, #200	; 0xc8
 800285c:	22c8      	movs	r2, #200	; 0xc8
 800285e:	2137      	movs	r1, #55	; 0x37
 8002860:	200f      	movs	r0, #15
 8002862:	f00f fc8b 	bl	801217c <UG_FillFrame>
	LCD_PutStr(20, 60, "GROUNDING", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8002866:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800286a:	f7fe fe2d 	bl	80014c8 <RGB_to_BRG>
 800286e:	4603      	mov	r3, r0
 8002870:	461c      	mov	r4, r3
 8002872:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002876:	f7fe fe27 	bl	80014c8 <RGB_to_BRG>
 800287a:	4603      	mov	r3, r0
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	9400      	str	r4, [sp, #0]
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <LCD_draw_earth_fault_popup+0x104>)
 8002882:	4a2c      	ldr	r2, [pc, #176]	; (8002934 <LCD_draw_earth_fault_popup+0x108>)
 8002884:	213c      	movs	r1, #60	; 0x3c
 8002886:	2014      	movs	r0, #20
 8002888:	f003 fa28 	bl	8005cdc <LCD_PutStr>
	LCD_PutStr(20, 80, "ERROR", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800288c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002890:	f7fe fe1a 	bl	80014c8 <RGB_to_BRG>
 8002894:	4603      	mov	r3, r0
 8002896:	461c      	mov	r4, r3
 8002898:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800289c:	f7fe fe14 	bl	80014c8 <RGB_to_BRG>
 80028a0:	4603      	mov	r3, r0
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	9400      	str	r4, [sp, #0]
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <LCD_draw_earth_fault_popup+0x104>)
 80028a8:	4a23      	ldr	r2, [pc, #140]	; (8002938 <LCD_draw_earth_fault_popup+0x10c>)
 80028aa:	2150      	movs	r1, #80	; 0x50
 80028ac:	2014      	movs	r0, #20
 80028ae:	f003 fa15 	bl	8005cdc <LCD_PutStr>

	LCD_PutStr(20, 120, "CHECK", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80028b2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028b6:	f7fe fe07 	bl	80014c8 <RGB_to_BRG>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461c      	mov	r4, r3
 80028be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028c2:	f7fe fe01 	bl	80014c8 <RGB_to_BRG>
 80028c6:	4603      	mov	r3, r0
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	9400      	str	r4, [sp, #0]
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <LCD_draw_earth_fault_popup+0x104>)
 80028ce:	4a1b      	ldr	r2, [pc, #108]	; (800293c <LCD_draw_earth_fault_popup+0x110>)
 80028d0:	2178      	movs	r1, #120	; 0x78
 80028d2:	2014      	movs	r0, #20
 80028d4:	f003 fa02 	bl	8005cdc <LCD_PutStr>
	LCD_PutStr(20, 140, "CONNECTIONS", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80028d8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028dc:	f7fe fdf4 	bl	80014c8 <RGB_to_BRG>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461c      	mov	r4, r3
 80028e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028e8:	f7fe fdee 	bl	80014c8 <RGB_to_BRG>
 80028ec:	4603      	mov	r3, r0
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	9400      	str	r4, [sp, #0]
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <LCD_draw_earth_fault_popup+0x104>)
 80028f4:	4a12      	ldr	r2, [pc, #72]	; (8002940 <LCD_draw_earth_fault_popup+0x114>)
 80028f6:	218c      	movs	r1, #140	; 0x8c
 80028f8:	2014      	movs	r0, #20
 80028fa:	f003 f9ef 	bl	8005cdc <LCD_PutStr>
	LCD_PutStr(20, 160, "AND REBOOT", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80028fe:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002902:	f7fe fde1 	bl	80014c8 <RGB_to_BRG>
 8002906:	4603      	mov	r3, r0
 8002908:	461c      	mov	r4, r3
 800290a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800290e:	f7fe fddb 	bl	80014c8 <RGB_to_BRG>
 8002912:	4603      	mov	r3, r0
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	9400      	str	r4, [sp, #0]
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <LCD_draw_earth_fault_popup+0x104>)
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <LCD_draw_earth_fault_popup+0x118>)
 800291c:	21a0      	movs	r1, #160	; 0xa0
 800291e:	2014      	movs	r0, #20
 8002920:	f003 f9dc 	bl	8005cdc <LCD_PutStr>

	Error_Handler();
 8002924:	f001 fc30 	bl	8004188 <Error_Handler>
}
 8002928:	bf00      	nop
 800292a:	3704      	adds	r7, #4
 800292c:	46bd      	mov	sp, r7
 800292e:	bd90      	pop	{r4, r7, pc}
 8002930:	0801bd00 	.word	0x0801bd00
 8002934:	0801abfc 	.word	0x0801abfc
 8002938:	0801ac08 	.word	0x0801ac08
 800293c:	0801ac10 	.word	0x0801ac10
 8002940:	0801ac18 	.word	0x0801ac18
 8002944:	0801ac24 	.word	0x0801ac24

08002948 <get_set_temperature>:


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8002948:	b598      	push	{r3, r4, r7, lr}
 800294a:	af00      	add	r7, sp, #0
	if(custom_temperature_on == 0){
 800294c:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <get_set_temperature+0x70>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d12f      	bne.n	80029b4 <get_set_temperature+0x6c>
		TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8002954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fdfa 	bl	8000554 <__aeabi_ui2d>
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <get_set_temperature+0x74>)
 8002962:	ed93 7b00 	vldr	d7, [r3]
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <get_set_temperature+0x78>)
 8002968:	ed93 6b00 	vldr	d6, [r3]
 800296c:	eeb0 2a46 	vmov.f32	s4, s12
 8002970:	eef0 2a66 	vmov.f32	s5, s13
 8002974:	eeb0 1a47 	vmov.f32	s2, s14
 8002978:	eef0 1a67 	vmov.f32	s3, s15
 800297c:	ec41 0b10 	vmov	d0, r0, r1
 8002980:	f7fe fcd8 	bl	8001334 <clamp>
 8002984:	ec53 2b10 	vmov	r2, r3, d0
 8002988:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	f7fe f932 	bl	8000bf8 <__aeabi_d2uiz>
 8002994:	4603      	mov	r3, r0
 8002996:	6263      	str	r3, [r4, #36]	; 0x24
		sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 8002998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fde5 	bl	8000574 <__aeabi_i2d>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4905      	ldr	r1, [pc, #20]	; (80029c4 <get_set_temperature+0x7c>)
 80029b0:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80029b4:	bf00      	nop
 80029b6:	bd98      	pop	{r3, r4, r7, pc}
 80029b8:	2000069e 	.word	0x2000069e
 80029bc:	20000028 	.word	0x20000028
 80029c0:	20000030 	.word	0x20000030
 80029c4:	20000038 	.word	0x20000038

080029c8 <beep>:

/* Beep the beeper */
void beep(){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <beep+0x30>)
 80029ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <beep+0x34>)
 80029d8:	f7fe f89e 	bl	8000b18 <__aeabi_dcmpeq>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d100      	bne.n	80029e4 <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 80029e2:	e006      	b.n	80029f2 <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80029e4:	2104      	movs	r1, #4
 80029e6:	4806      	ldr	r0, [pc, #24]	; (8002a00 <beep+0x38>)
 80029e8:	f00a fca4 	bl	800d334 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <beep+0x3c>)
 80029ee:	f00a fbb1 	bl	800d154 <HAL_TIM_Base_Start_IT>
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200006a0 	.word	0x200006a0
 80029fc:	3ff00000 	.word	0x3ff00000
 8002a00:	20001d18 	.word	0x20001d18
 8002a04:	20001e94 	.word	0x20001e94

08002a08 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 8002a08:	b5b0      	push	{r4, r5, r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8002a0c:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <handle_emergency_shutdown+0xd8>)
 8002a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <handle_emergency_shutdown+0x20>
 8002a16:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <handle_emergency_shutdown+0xdc>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8002a1e:	f003 fa6b 	bl	8005ef8 <HAL_GetTick>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a30      	ldr	r2, [pc, #192]	; (8002ae8 <handle_emergency_shutdown+0xe0>)
 8002a26:	6013      	str	r3, [r2, #0]
	}

	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8002a28:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <handle_emergency_shutdown+0xd8>)
 8002a2a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	f7fe f86f 	bl	8000b18 <__aeabi_dcmpeq>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d024      	beq.n	8002a8a <handle_emergency_shutdown+0x82>
 8002a40:	f003 fa5a 	bl	8005ef8 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <handle_emergency_shutdown+0xe0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fd81 	bl	8000554 <__aeabi_ui2d>
 8002a52:	4604      	mov	r4, r0
 8002a54:	460d      	mov	r5, r1
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <handle_emergency_shutdown+0xe4>)
 8002a58:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002a5c:	a31e      	add	r3, pc, #120	; (adr r3, 8002ad8 <handle_emergency_shutdown+0xd0>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd fdf1 	bl	8000648 <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	f7fe f871 	bl	8000b54 <__aeabi_dcmpge>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <handle_emergency_shutdown+0x82>
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <handle_emergency_shutdown+0xdc>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <handle_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 8002a80:	2003      	movs	r0, #3
 8002a82:	f7fe fd37 	bl	80014f4 <change_state>
		beep();
 8002a86:	f7ff ff9f 	bl	80029c8 <beep>
	}

	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <handle_emergency_shutdown+0xd8>)
 8002a8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <handle_emergency_shutdown+0xe8>)
 8002a96:	f7fe f867 	bl	8000b68 <__aeabi_dcmpgt>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <handle_emergency_shutdown+0xaa>
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <handle_emergency_shutdown+0xdc>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d104      	bne.n	8002ab2 <handle_emergency_shutdown+0xaa>
		change_state(EMERGENCY_SLEEP);
 8002aa8:	2003      	movs	r0, #3
 8002aaa:	f7fe fd23 	bl	80014f4 <change_state>
		beep();
 8002aae:	f7ff ff8b 	bl	80029c8 <beep>
	}
	/* Set state to EMERGENCY_SLEEP if input voltage is too low */
	if(sensor_values.bus_voltage <= MIN_BUSVOLTAGE){
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <handle_emergency_shutdown+0xd8>)
 8002ab4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ab8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac4:	d900      	bls.n	8002ac8 <handle_emergency_shutdown+0xc0>
		change_state(EMERGENCY_SLEEP);
	}
}
 8002ac6:	e002      	b.n	8002ace <handle_emergency_shutdown+0xc6>
		change_state(EMERGENCY_SLEEP);
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f7fe fd13 	bl	80014f4 <change_state>
}
 8002ace:	bf00      	nop
 8002ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	f3af 8000 	nop.w
 8002ad8:	00000000 	.word	0x00000000
 8002adc:	40ed4c00 	.word	0x40ed4c00
 8002ae0:	20000038 	.word	0x20000038
 8002ae4:	2000001d 	.word	0x2000001d
 8002ae8:	200005c8 	.word	0x200005c8
 8002aec:	200006a0 	.word	0x200006a0
 8002af0:	407e0000 	.word	0x407e0000

08002af4 <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 8002af4:	b598      	push	{r3, r4, r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <handle_button_status+0x98>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d11e      	bne.n	8002b3e <handle_button_status+0x4a>
		SW_1_pressed = 0;
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <handle_button_status+0x98>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 8002b06:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <handle_button_status+0x9c>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <handle_button_status+0x22>
 8002b0e:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <handle_button_status+0x9c>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d103      	bne.n	8002b1e <handle_button_status+0x2a>
			change_state(HALTED);
 8002b16:	2004      	movs	r0, #4
 8002b18:	f7fe fcec 	bl	80014f4 <change_state>
 8002b1c:	e00a      	b.n	8002b34 <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <handle_button_status+0x9c>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d003      	beq.n	8002b2e <handle_button_status+0x3a>
 8002b26:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <handle_button_status+0x9c>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d102      	bne.n	8002b34 <handle_button_status+0x40>
			change_state(RUN);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fe fce0 	bl	80014f4 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8002b34:	f003 f9e0 	bl	8005ef8 <HAL_GetTick>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <handle_button_status+0xa0>)
 8002b3c:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <handle_button_status+0xa4>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10d      	bne.n	8002b62 <handle_button_status+0x6e>
		SW_2_pressed = 0;
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <handle_button_status+0xa4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <handle_button_status+0xa8>)
 8002b4e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002b52:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f84d 	bl	8000bf8 <__aeabi_d2uiz>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <handle_button_status+0xac>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10d      	bne.n	8002b86 <handle_button_status+0x92>
		SW_3_pressed = 0;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <handle_button_status+0xac>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <handle_button_status+0xa8>)
 8002b72:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b76:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fe f83b 	bl	8000bf8 <__aeabi_d2uiz>
 8002b82:	4603      	mov	r3, r0
 8002b84:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 8002b86:	bf00      	nop
 8002b88:	bd98      	pop	{r3, r4, r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200005dc 	.word	0x200005dc
 8002b90:	2000001d 	.word	0x2000001d
 8002b94:	200005c4 	.word	0x200005c4
 8002b98:	200005dd 	.word	0x200005dd
 8002b9c:	200006a0 	.word	0x200006a0
 8002ba0:	200005de 	.word	0x200005de
 8002ba4:	00000000 	.word	0x00000000

08002ba8 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8002ba8:	b5b0      	push	{r4, r5, r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8002bae:	2140      	movs	r1, #64	; 0x40
 8002bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bb4:	f006 fee2 	bl	800997c <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d102      	bne.n	8002bc4 <get_stand_status+0x1c>
		stand_status = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	71fb      	strb	r3, [r7, #7]
 8002bc2:	e001      	b.n	8002bc8 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	493b      	ldr	r1, [pc, #236]	; (8002cb8 <get_stand_status+0x110>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 fb11 	bl	80041f4 <Moving_Average_Compute>
 8002bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8002bd6:	eef0 7a60 	vmov.f32	s15, s1
 8002bda:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <get_stand_status+0x114>)
 8002bdc:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 8002be0:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <get_stand_status+0x114>)
 8002be2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002be6:	a330      	add	r3, pc, #192	; (adr r3, 8002ca8 <get_stand_status+0x100>)
 8002be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bec:	f7fd ffb2 	bl	8000b54 <__aeabi_dcmpge>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d039      	beq.n	8002c6a <get_stand_status+0xc2>
		if(active_state == RUN){
 8002bf6:	4b32      	ldr	r3, [pc, #200]	; (8002cc0 <get_stand_status+0x118>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d107      	bne.n	8002c0e <get_stand_status+0x66>
			change_state(STANDBY);
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f7fe fc78 	bl	80014f4 <change_state>
			previous_standby_millis = HAL_GetTick();
 8002c04:	f003 f978 	bl	8005ef8 <HAL_GetTick>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4a2e      	ldr	r2, [pc, #184]	; (8002cc4 <get_stand_status+0x11c>)
 8002c0c:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 8002c0e:	f003 f973 	bl	8005ef8 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <get_stand_status+0x11c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc9a 	bl	8000554 <__aeabi_ui2d>
 8002c20:	4604      	mov	r4, r0
 8002c22:	460d      	mov	r5, r1
 8002c24:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <get_stand_status+0x120>)
 8002c26:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002c2a:	a321      	add	r3, pc, #132	; (adr r3, 8002cb0 <get_stand_status+0x108>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fd0a 	bl	8000648 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4620      	mov	r0, r4
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	f7fd ff8a 	bl	8000b54 <__aeabi_dcmpge>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <get_stand_status+0xac>
 8002c46:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <get_stand_status+0x118>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d102      	bne.n	8002c54 <get_stand_status+0xac>
			change_state(SLEEP);
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f7fe fc50 	bl	80014f4 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <get_stand_status+0x118>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d003      	beq.n	8002c64 <get_stand_status+0xbc>
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <get_stand_status+0x118>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d102      	bne.n	8002c6a <get_stand_status+0xc2>
			change_state(SLEEP);
 8002c64:	2002      	movs	r0, #2
 8002c66:	f7fe fc45 	bl	80014f4 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <get_stand_status+0x114>)
 8002c6c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c70:	a30d      	add	r3, pc, #52	; (adr r3, 8002ca8 <get_stand_status+0x100>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f7fd ff59 	bl	8000b2c <__aeabi_dcmplt>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d100      	bne.n	8002c82 <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 8002c80:	e00e      	b.n	8002ca0 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <get_stand_status+0x118>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d007      	beq.n	8002c9a <get_stand_status+0xf2>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <get_stand_status+0x118>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d003      	beq.n	8002c9a <get_stand_status+0xf2>
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <get_stand_status+0x118>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <get_stand_status+0xf8>
			change_state(RUN);
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fc2a 	bl	80014f4 <change_state>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca8:	9999999a 	.word	0x9999999a
 8002cac:	3fc99999 	.word	0x3fc99999
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	40ed4c00 	.word	0x40ed4c00
 8002cb8:	20001088 	.word	0x20001088
 8002cbc:	20000038 	.word	0x20000038
 8002cc0:	2000001d 	.word	0x2000001d
 8002cc4:	200005cc 	.word	0x200005cc
 8002cc8:	200006a0 	.word	0x200006a0
 8002ccc:	00000000 	.word	0x00000000

08002cd0 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 8002cd6:	2110      	movs	r1, #16
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cdc:	f006 fe4e 	bl	800997c <HAL_GPIO_ReadPin>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <get_handle_type+0x1c>
		handle_status = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	71fb      	strb	r3, [r7, #7]
 8002cea:	e001      	b.n	8002cf0 <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 8002cec:	2301      	movs	r3, #1
 8002cee:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	496f      	ldr	r1, [pc, #444]	; (8002eb0 <get_handle_type+0x1e0>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 fa7d 	bl	80041f4 <Moving_Average_Compute>
 8002cfa:	eeb0 7a40 	vmov.f32	s14, s0
 8002cfe:	eef0 7a60 	vmov.f32	s15, s1
 8002d02:	4b6c      	ldr	r3, [pc, #432]	; (8002eb4 <get_handle_type+0x1e4>)
 8002d04:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8002d08:	2120      	movs	r1, #32
 8002d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0e:	f006 fe35 	bl	800997c <HAL_GPIO_ReadPin>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <get_handle_type+0x4e>
		handle_status = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	71fb      	strb	r3, [r7, #7]
 8002d1c:	e001      	b.n	8002d22 <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	4964      	ldr	r1, [pc, #400]	; (8002eb8 <get_handle_type+0x1e8>)
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 fa64 	bl	80041f4 <Moving_Average_Compute>
 8002d2c:	eeb0 7a40 	vmov.f32	s14, s0
 8002d30:	eef0 7a60 	vmov.f32	s15, s1
 8002d34:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <get_handle_type+0x1e4>)
 8002d36:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* Determine if NT115 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 8002d3a:	4b5e      	ldr	r3, [pc, #376]	; (8002eb4 <get_handle_type+0x1e4>)
 8002d3c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <get_handle_type+0x1ec>)
 8002d46:	f7fd ff05 	bl	8000b54 <__aeabi_dcmpge>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d029      	beq.n	8002da4 <get_handle_type+0xd4>
 8002d50:	4b58      	ldr	r3, [pc, #352]	; (8002eb4 <get_handle_type+0x1e4>)
 8002d52:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	4b58      	ldr	r3, [pc, #352]	; (8002ebc <get_handle_type+0x1ec>)
 8002d5c:	f7fd fee6 	bl	8000b2c <__aeabi_dcmplt>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01e      	beq.n	8002da4 <get_handle_type+0xd4>
		handle = NT115;
 8002d66:	4b56      	ldr	r3, [pc, #344]	; (8002ec0 <get_handle_type+0x1f0>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 20; //20W
 8002d6c:	4b51      	ldr	r3, [pc, #324]	; (8002eb4 <get_handle_type+0x1e4>)
 8002d6e:	4a55      	ldr	r2, [pc, #340]	; (8002ec4 <get_handle_type+0x1f4>)
 8002d70:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 8002d72:	4955      	ldr	r1, [pc, #340]	; (8002ec8 <get_handle_type+0x1f8>)
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b54      	ldr	r3, [pc, #336]	; (8002ecc <get_handle_type+0x1fc>)
 8002d7a:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 8002d7e:	4954      	ldr	r1, [pc, #336]	; (8002ed0 <get_handle_type+0x200>)
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <get_handle_type+0x204>)
 8002d86:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8002d8a:	4953      	ldr	r1, [pc, #332]	; (8002ed8 <get_handle_type+0x208>)
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	4b52      	ldr	r3, [pc, #328]	; (8002edc <get_handle_type+0x20c>)
 8002d92:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 100;
 8002d96:	4952      	ldr	r1, [pc, #328]	; (8002ee0 <get_handle_type+0x210>)
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <get_handle_type+0x214>)
 8002d9e:	e9c1 2300 	strd	r2, r3, [r1]
 8002da2:	e052      	b.n	8002e4a <get_handle_type+0x17a>
	}
	/* Determine if T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <get_handle_type+0x1e4>)
 8002da6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <get_handle_type+0x1ec>)
 8002db0:	f7fd febc 	bl	8000b2c <__aeabi_dcmplt>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d029      	beq.n	8002e0e <get_handle_type+0x13e>
 8002dba:	4b3e      	ldr	r3, [pc, #248]	; (8002eb4 <get_handle_type+0x1e4>)
 8002dbc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <get_handle_type+0x1ec>)
 8002dc6:	f7fd fec5 	bl	8000b54 <__aeabi_dcmpge>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01e      	beq.n	8002e0e <get_handle_type+0x13e>
		handle = T210;
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <get_handle_type+0x1f0>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <get_handle_type+0x1e4>)
 8002dd8:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <get_handle_type+0x218>)
 8002dda:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 5;
 8002ddc:	493a      	ldr	r1, [pc, #232]	; (8002ec8 <get_handle_type+0x1f8>)
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	4b42      	ldr	r3, [pc, #264]	; (8002eec <get_handle_type+0x21c>)
 8002de4:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 8002de8:	4939      	ldr	r1, [pc, #228]	; (8002ed0 <get_handle_type+0x200>)
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	4b3f      	ldr	r3, [pc, #252]	; (8002eec <get_handle_type+0x21c>)
 8002df0:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002df4:	4938      	ldr	r1, [pc, #224]	; (8002ed8 <get_handle_type+0x208>)
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <get_handle_type+0x1ec>)
 8002dfc:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 125;
 8002e00:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <get_handle_type+0x210>)
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <get_handle_type+0x220>)
 8002e08:	e9c1 2300 	strd	r2, r3, [r1]
 8002e0c:	e01d      	b.n	8002e4a <get_handle_type+0x17a>
	}
	else{
		handle = T245;
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <get_handle_type+0x1f0>)
 8002e10:	2202      	movs	r2, #2
 8002e12:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8002e14:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <get_handle_type+0x1e4>)
 8002e16:	4a37      	ldr	r2, [pc, #220]	; (8002ef4 <get_handle_type+0x224>)
 8002e18:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 8002e1a:	492b      	ldr	r1, [pc, #172]	; (8002ec8 <get_handle_type+0x1f8>)
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <get_handle_type+0x228>)
 8002e22:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 8002e26:	492a      	ldr	r1, [pc, #168]	; (8002ed0 <get_handle_type+0x200>)
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <get_handle_type+0x1fc>)
 8002e2e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002e32:	4929      	ldr	r1, [pc, #164]	; (8002ed8 <get_handle_type+0x208>)
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <get_handle_type+0x1ec>)
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 150;
 8002e3e:	4928      	ldr	r1, [pc, #160]	; (8002ee0 <get_handle_type+0x210>)
 8002e40:	a319      	add	r3, pc, #100	; (adr r3, 8002ea8 <get_handle_type+0x1d8>)
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8002e4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <get_handle_type+0x1f8>)
 8002e4c:	ed93 7b00 	vldr	d7, [r3]
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <get_handle_type+0x200>)
 8002e52:	ed93 6b00 	vldr	d6, [r3]
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <get_handle_type+0x208>)
 8002e58:	ed93 5b00 	vldr	d5, [r3]
 8002e5c:	eeb0 2a45 	vmov.f32	s4, s10
 8002e60:	eef0 2a65 	vmov.f32	s5, s11
 8002e64:	eeb0 1a46 	vmov.f32	s2, s12
 8002e68:	eef0 1a66 	vmov.f32	s3, s13
 8002e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e70:	eef0 0a67 	vmov.f32	s1, s15
 8002e74:	4821      	ldr	r0, [pc, #132]	; (8002efc <get_handle_type+0x22c>)
 8002e76:	f001 fc96 	bl	80047a6 <PID_SetTunings>
	PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <get_handle_type+0x210>)
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	4614      	mov	r4, r2
 8002e82:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002e86:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <get_handle_type+0x210>)
 8002e88:	ed93 7b00 	vldr	d7, [r3]
 8002e8c:	eeb0 1a47 	vmov.f32	s2, s14
 8002e90:	eef0 1a67 	vmov.f32	s3, s15
 8002e94:	ec45 4b10 	vmov	d0, r4, r5
 8002e98:	4818      	ldr	r0, [pc, #96]	; (8002efc <get_handle_type+0x22c>)
 8002e9a:	f001 fc64 	bl	8004766 <PID_SetILimits>

}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	4062c000 	.word	0x4062c000
 8002eb0:	200013b4 	.word	0x200013b4
 8002eb4:	20000038 	.word	0x20000038
 8002eb8:	200016e0 	.word	0x200016e0
 8002ebc:	3fe00000 	.word	0x3fe00000
 8002ec0:	200005b8 	.word	0x200005b8
 8002ec4:	41a00000 	.word	0x41a00000
 8002ec8:	200005e8 	.word	0x200005e8
 8002ecc:	40080000 	.word	0x40080000
 8002ed0:	200005f0 	.word	0x200005f0
 8002ed4:	3ff00000 	.word	0x3ff00000
 8002ed8:	200005f8 	.word	0x200005f8
 8002edc:	3fd00000 	.word	0x3fd00000
 8002ee0:	20000020 	.word	0x20000020
 8002ee4:	40590000 	.word	0x40590000
 8002ee8:	42700000 	.word	0x42700000
 8002eec:	40140000 	.word	0x40140000
 8002ef0:	405f4000 	.word	0x405f4000
 8002ef4:	42f00000 	.word	0x42f00000
 8002ef8:	40200000 	.word	0x40200000
 8002efc:	20001f78 	.word	0x20001f78

08002f00 <HAL_GPIO_EXTI_Callback>:

/* Interrupts at button press */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d006      	beq.n	8002f1e <HAL_GPIO_EXTI_Callback+0x1e>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_EXTI_Callback+0x1e>
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1c:	d109      	bne.n	8002f32 <HAL_GPIO_EXTI_Callback+0x32>
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 8002f26:	4806      	ldr	r0, [pc, #24]	; (8002f40 <HAL_GPIO_EXTI_Callback+0x40>)
 8002f28:	f00a f914 	bl	800d154 <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
    }
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	2000001c 	.word	0x2000001c
 8002f40:	20001e48 	.word	0x20001e48

08002f44 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7f1b      	ldrb	r3, [r3, #28]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d003      	beq.n	8002f5c <HAL_TIM_IC_CaptureCallback+0x18>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7f1b      	ldrb	r3, [r3, #28]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 8002f5c:	f7ff fd34 	bl	80029c8 <beep>
	}
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d110      	bne.n	8002f9a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7f1b      	ldrb	r3, [r3, #28]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10c      	bne.n	8002f9a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d108      	bne.n	8002f9a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		current_measurement_requested = 0;
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 8002f94:	4806      	ldr	r0, [pc, #24]	; (8002fb0 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8002f96:	f003 fcc7 	bl	8006928 <HAL_ADC_Start_IT>
	}
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20001c80 	.word	0x20001c80
 8002fa8:	20000700 	.word	0x20000700
 8002fac:	200001c0 	.word	0x200001c0
 8002fb0:	20001a78 	.word	0x20001a78

08002fb4 <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a35      	ldr	r2, [pc, #212]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10c      	bne.n	8002fde <HAL_TIM_PeriodElapsedCallback+0x2a>
		heater_off();
 8002fc4:	f7fe fc7a 	bl	80018bc <heater_off>
		thermocouple_measurement_done = 0;
 8002fc8:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim7);
 8002fce:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b31      	ldr	r3, [pc, #196]	; (800309c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a2e      	ldr	r2, [pc, #184]	; (800309c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d104      	bne.n	8002ff0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8002fe6:	2239      	movs	r2, #57	; 0x39
 8002fe8:	492d      	ldr	r1, [pc, #180]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002fea:	482e      	ldr	r0, [pc, #184]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002fec:	f003 fdcc 	bl	8006b88 <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d106      	bne.n	8003006 <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_TIM_Base_Stop_IT(&htim17);
 8002ff8:	482b      	ldr	r0, [pc, #172]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002ffa:	f00a f915 	bl	800d228 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 8002ffe:	2104      	movs	r1, #4
 8003000:	482a      	ldr	r0, [pc, #168]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003002:	f00a fae3 	bl	800d5cc <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d13d      	bne.n	800308a <HAL_TIM_PeriodElapsedCallback+0xd6>
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d139      	bne.n	800308a <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8003016:	2120      	movs	r1, #32
 8003018:	4827      	ldr	r0, [pc, #156]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800301a:	f006 fcaf 	bl	800997c <HAL_GPIO_ReadPin>
 800301e:	4603      	mov	r3, r0
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10b      	bne.n	800303c <HAL_TIM_PeriodElapsedCallback+0x88>
			SW_ready = 1;
 8003024:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x108>)
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
			beep();
 8003030:	f7ff fcca 	bl	80029c8 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003034:	481e      	ldr	r0, [pc, #120]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003036:	f00a f8f7 	bl	800d228 <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 800303a:	e026      	b.n	800308a <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003042:	f006 fc9b 	bl	800997c <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10b      	bne.n	8003064 <HAL_TIM_PeriodElapsedCallback+0xb0>
			SW_ready = 1;
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
			beep();
 8003058:	f7ff fcb6 	bl	80029c8 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 800305c:	4814      	ldr	r0, [pc, #80]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800305e:	f00a f8e3 	bl	800d228 <HAL_TIM_Base_Stop_IT>
}
 8003062:	e012      	b.n	800308a <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8003064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003068:	4813      	ldr	r0, [pc, #76]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800306a:	f006 fc87 	bl	800997c <HAL_GPIO_ReadPin>
 800306e:	4603      	mov	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10a      	bne.n	800308a <HAL_TIM_PeriodElapsedCallback+0xd6>
			SW_ready = 1;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
			beep();
 8003080:	f7ff fca2 	bl	80029c8 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003084:	480a      	ldr	r0, [pc, #40]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003086:	f00a f8cf 	bl	800d228 <HAL_TIM_Base_Stop_IT>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20001d64 	.word	0x20001d64
 8003098:	200001c1 	.word	0x200001c1
 800309c:	20001db0 	.word	0x20001db0
 80030a0:	2000062c 	.word	0x2000062c
 80030a4:	20001a0c 	.word	0x20001a0c
 80030a8:	20001e94 	.word	0x20001e94
 80030ac:	20001d18 	.word	0x20001d18
 80030b0:	20001e48 	.word	0x20001e48
 80030b4:	2000001c 	.word	0x2000001c
 80030b8:	48000400 	.word	0x48000400
 80030bc:	200005dc 	.word	0x200005dc
 80030c0:	200005dd 	.word	0x200005dd
 80030c4:	200005de 	.word	0x200005de

080030c8 <HAL_ADC_ConvCpltCallback>:
/* ADC conversion completed Callbacks */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d8:	d110      	bne.n	80030fc <HAL_ADC_ConvCpltCallback+0x34>
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_ADC_ConvCpltCallback+0x74>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_ADC_ConvCpltCallback+0x34>
		get_thermocouple_temperature();
 80030e2:	f7fe fa69 	bl	80015b8 <get_thermocouple_temperature>
		heater_on();
 80030e6:	f7fe fb93 	bl	8001810 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 80030ea:	4815      	ldr	r0, [pc, #84]	; (8003140 <HAL_ADC_ConvCpltCallback+0x78>)
 80030ec:	f001 f968 	bl	80043c0 <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 80030f0:	4814      	ldr	r0, [pc, #80]	; (8003144 <HAL_ADC_ConvCpltCallback+0x7c>)
 80030f2:	f003 fdfd 	bl	8006cf0 <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_ADC_ConvCpltCallback+0x74>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2) && (current_measurement_done == 0)){
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a11      	ldr	r2, [pc, #68]	; (8003148 <HAL_ADC_ConvCpltCallback+0x80>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d116      	bne.n	8003134 <HAL_ADC_ConvCpltCallback+0x6c>
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_ADC_ConvCpltCallback+0x84>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d112      	bne.n	8003134 <HAL_ADC_ConvCpltCallback+0x6c>
		sensor_values.leak_current = HAL_ADC_GetValue(&hadc2);
 800310e:	4810      	ldr	r0, [pc, #64]	; (8003150 <HAL_ADC_ConvCpltCallback+0x88>)
 8003110:	f003 fe4f 	bl	8006db2 <HAL_ADC_GetValue>
 8003114:	4603      	mov	r3, r0
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_ADC_ConvCpltCallback+0x8c>)
 800311a:	82da      	strh	r2, [r3, #22]
		sensor_values.heater_current = HAL_ADC_GetValue(&hadc2);
 800311c:	480c      	ldr	r0, [pc, #48]	; (8003150 <HAL_ADC_ConvCpltCallback+0x88>)
 800311e:	f003 fe48 	bl	8006db2 <HAL_ADC_GetValue>
 8003122:	4603      	mov	r3, r0
 8003124:	b29a      	uxth	r2, r3
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003128:	829a      	strh	r2, [r3, #20]
		heater_on();
 800312a:	f7fe fb71 	bl	8001810 <heater_on>
		current_measurement_done = 1;
 800312e:	4b07      	ldr	r3, [pc, #28]	; (800314c <HAL_ADC_ConvCpltCallback+0x84>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
	}
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200001c1 	.word	0x200001c1
 8003140:	20001f78 	.word	0x20001f78
 8003144:	20001a0c 	.word	0x20001a0c
 8003148:	50000100 	.word	0x50000100
 800314c:	200001c0 	.word	0x200001c0
 8003150:	20001a78 	.word	0x20001a78
 8003154:	20000038 	.word	0x20000038

08003158 <HAL_ADC_LevelOutOfWindowCallback>:

/* ADC watchdog Callback */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
		LCD_draw_earth_fault_popup();
 8003160:	f7ff fb64 	bl	800282c <LCD_draw_earth_fault_popup>

}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	0000      	movs	r0, r0
	...

08003170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	ed2d 8b06 	vpush	{d8-d10}
 8003178:	b08e      	sub	sp, #56	; 0x38
 800317a:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800317c:	f002 fe58 	bl	8005e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003180:	f000 fa54 	bl	800362c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003184:	f000 ff50 	bl	8004028 <MX_GPIO_Init>
  MX_DMA_Init();
 8003188:	f000 ff1c 	bl	8003fc4 <MX_DMA_Init>
  MX_ADC1_Init();
 800318c:	f000 fa9c 	bl	80036c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003190:	f000 fb32 	bl	80037f8 <MX_ADC2_Init>
  MX_CRC_Init();
 8003194:	f000 fbce 	bl	8003934 <MX_CRC_Init>
  MX_TIM1_Init();
 8003198:	f000 fc6c 	bl	8003a74 <MX_TIM1_Init>
  MX_TIM2_Init();
 800319c:	f000 fd0a 	bl	8003bb4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80031a0:	f000 fd5c 	bl	8003c5c <MX_TIM4_Init>
  MX_SPI2_Init();
 80031a4:	f000 fc28 	bl	80039f8 <MX_SPI2_Init>
  MX_I2C1_Init();
 80031a8:	f000 fbe6 	bl	8003978 <MX_I2C1_Init>
  MX_USB_Device_Init();
 80031ac:	f012 fa38 	bl	8015620 <MX_USB_Device_Init>
  MX_TIM17_Init();
 80031b0:	f000 fe8c 	bl	8003ecc <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80031b4:	f000 feba 	bl	8003f2c <MX_USART1_UART_Init>
  MX_TIM7_Init();
 80031b8:	f000 fde0 	bl	8003d7c <MX_TIM7_Init>
  MX_TIM8_Init();
 80031bc:	f000 fe1e 	bl	8003dfc <MX_TIM8_Init>
  MX_TIM6_Init();
 80031c0:	f000 fda6 	bl	8003d10 <MX_TIM6_Init>
  MX_TIM16_Init();
 80031c4:	f000 fe5a 	bl	8003e7c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fe faf9 	bl	80017c0 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 80031ce:	2108      	movs	r1, #8
 80031d0:	488b      	ldr	r0, [pc, #556]	; (8003400 <main+0x290>)
 80031d2:	f00b fab3 	bl	800e73c <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80031d6:	213c      	movs	r1, #60	; 0x3c
 80031d8:	488a      	ldr	r0, [pc, #552]	; (8003404 <main+0x294>)
 80031da:	f00a fbd1 	bl	800d980 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80031de:	2100      	movs	r1, #0
 80031e0:	4887      	ldr	r0, [pc, #540]	; (8003400 <main+0x290>)
 80031e2:	f00a f8a7 	bl	800d334 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 80031e6:	4b88      	ldr	r3, [pc, #544]	; (8003408 <main+0x298>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2205      	movs	r2, #5
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 80031ee:	4887      	ldr	r0, [pc, #540]	; (800340c <main+0x29c>)
 80031f0:	f009 ffb0 	bl	800d154 <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 80031f4:	4b86      	ldr	r3, [pc, #536]	; (8003410 <main+0x2a0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	4b85      	ldr	r3, [pc, #532]	; (8003410 <main+0x2a0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003204:	217f      	movs	r1, #127	; 0x7f
 8003206:	4883      	ldr	r0, [pc, #524]	; (8003414 <main+0x2a4>)
 8003208:	f005 f892 	bl	8008330 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800320c:	217f      	movs	r1, #127	; 0x7f
 800320e:	4882      	ldr	r0, [pc, #520]	; (8003418 <main+0x2a8>)
 8003210:	f005 f88e 	bl	8008330 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8003214:	2239      	movs	r2, #57	; 0x39
 8003216:	4981      	ldr	r1, [pc, #516]	; (800341c <main+0x2ac>)
 8003218:	487f      	ldr	r0, [pc, #508]	; (8003418 <main+0x2a8>)
 800321a:	f003 fcb5 	bl	8006b88 <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,30);
 800321e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003222:	487f      	ldr	r0, [pc, #508]	; (8003420 <main+0x2b0>)
 8003224:	f000 ffb5 	bl	8004192 <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 8003228:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8003424 <main+0x2b4>
 800322c:	487e      	ldr	r0, [pc, #504]	; (8003428 <main+0x2b8>)
 800322e:	f000 ffb0 	bl	8004192 <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 8003232:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003236:	487d      	ldr	r0, [pc, #500]	; (800342c <main+0x2bc>)
 8003238:	f000 ffab 	bl	8004192 <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 800323c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003240:	487b      	ldr	r0, [pc, #492]	; (8003430 <main+0x2c0>)
 8003242:	f000 ffa6 	bl	8004192 <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 8003246:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800324a:	487a      	ldr	r0, [pc, #488]	; (8003434 <main+0x2c4>)
 800324c:	f000 ffa1 	bl	8004192 <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 8003250:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003254:	4878      	ldr	r0, [pc, #480]	; (8003438 <main+0x2c8>)
 8003256:	f000 ff9c 	bl	8004192 <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 800325a:	20c8      	movs	r0, #200	; 0xc8
 800325c:	f002 fe58 	bl	8005f10 <HAL_Delay>
	LCD_init();
 8003260:	f002 fd7a 	bl	8005d58 <LCD_init>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8003264:	f7fd fefa 	bl	800105c <FlashCheckCRC>
 8003268:	4603      	mov	r3, r0
 800326a:	f083 0301 	eor.w	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <main+0x10a>
  	    	FlashWrite(&default_flash_values);
 8003274:	4871      	ldr	r0, [pc, #452]	; (800343c <main+0x2cc>)
 8003276:	f7fd ff95 	bl	80011a4 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 800327a:	4871      	ldr	r0, [pc, #452]	; (8003440 <main+0x2d0>)
 800327c:	f7fd ff78 	bl	8001170 <FlashRead>

  		/* Set startup state */
  	    change_state(HALTED);
 8003280:	2004      	movs	r0, #4
 8003282:	f7fe f937 	bl	80014f4 <change_state>

  		settings_menue();
 8003286:	f7fe fb23 	bl	80018d0 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 800328a:	4b6d      	ldr	r3, [pc, #436]	; (8003440 <main+0x2d0>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f7fd fcae 	bl	8000bf8 <__aeabi_d2uiz>
 800329c:	4603      	mov	r3, r0
 800329e:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80032a0:	4b68      	ldr	r3, [pc, #416]	; (8003444 <main+0x2d4>)
 80032a2:	ed93 7b00 	vldr	d7, [r3]
 80032a6:	4b68      	ldr	r3, [pc, #416]	; (8003448 <main+0x2d8>)
 80032a8:	ed93 6b00 	vldr	d6, [r3]
 80032ac:	4b67      	ldr	r3, [pc, #412]	; (800344c <main+0x2dc>)
 80032ae:	ed93 5b00 	vldr	d5, [r3]
 80032b2:	2300      	movs	r3, #0
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	2301      	movs	r3, #1
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	eeb0 2a45 	vmov.f32	s4, s10
 80032be:	eef0 2a65 	vmov.f32	s5, s11
 80032c2:	eeb0 1a46 	vmov.f32	s2, s12
 80032c6:	eef0 1a66 	vmov.f32	s3, s13
 80032ca:	eeb0 0a47 	vmov.f32	s0, s14
 80032ce:	eef0 0a67 	vmov.f32	s1, s15
 80032d2:	4b5f      	ldr	r3, [pc, #380]	; (8003450 <main+0x2e0>)
 80032d4:	4a5f      	ldr	r2, [pc, #380]	; (8003454 <main+0x2e4>)
 80032d6:	4960      	ldr	r1, [pc, #384]	; (8003458 <main+0x2e8>)
 80032d8:	4860      	ldr	r0, [pc, #384]	; (800345c <main+0x2ec>)
 80032da:	f001 f825 	bl	8004328 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80032de:	2101      	movs	r1, #1
 80032e0:	485e      	ldr	r0, [pc, #376]	; (800345c <main+0x2ec>)
 80032e2:	f001 f9b4 	bl	800464e <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 80032e6:	4b5e      	ldr	r3, [pc, #376]	; (8003460 <main+0x2f0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	4619      	mov	r1, r3
 80032ee:	485b      	ldr	r0, [pc, #364]	; (800345c <main+0x2ec>)
 80032f0:	f001 fb5c 	bl	80049ac <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 80032f4:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 80033f0 <main+0x280>
 80032f8:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 80033f8 <main+0x288>
 80032fc:	4857      	ldr	r0, [pc, #348]	; (800345c <main+0x2ec>)
 80032fe:	f001 f9c4 	bl	800468a <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 8003302:	4b58      	ldr	r3, [pc, #352]	; (8003464 <main+0x2f4>)
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	4690      	mov	r8, r2
 800330a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800330e:	4b55      	ldr	r3, [pc, #340]	; (8003464 <main+0x2f4>)
 8003310:	ed93 7b00 	vldr	d7, [r3]
 8003314:	eeb0 1a47 	vmov.f32	s2, s14
 8003318:	eef0 1a67 	vmov.f32	s3, s15
 800331c:	ec49 8b10 	vmov	d0, r8, r9
 8003320:	484e      	ldr	r0, [pc, #312]	; (800345c <main+0x2ec>)
 8003322:	f001 fa20 	bl	8004766 <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 8003326:	f7ff f8c5 	bl	80024b4 <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	e00e      	b.n	800334e <main+0x1de>
  			get_bus_voltage();
 8003330:	f7fe f916 	bl	8001560 <get_bus_voltage>
  			get_mcu_temp();
 8003334:	f7fe f86c 	bl	8001410 <get_mcu_temp>
  			get_thermocouple_temperature();
 8003338:	f7fe f93e 	bl	80015b8 <get_thermocouple_temperature>
  			get_handle_type();
 800333c:	f7ff fcc8 	bl	8002cd0 <get_handle_type>
  			get_stand_status();
 8003340:	f7ff fc32 	bl	8002ba8 <get_stand_status>
  			handle_button_status();
 8003344:	f7ff fbd6 	bl	8002af4 <handle_button_status>
  		for (int i = 0; i<200;i++){
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3301      	adds	r3, #1
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2bc7      	cmp	r3, #199	; 0xc7
 8003352:	dded      	ble.n	8003330 <main+0x1c0>
  		}

  		/* Start-up beep */
  		beep();
 8003354:	f7ff fb38 	bl	80029c8 <beep>
  		HAL_Delay(100);
 8003358:	2064      	movs	r0, #100	; 0x64
 800335a:	f002 fdd9 	bl	8005f10 <HAL_Delay>
  		beep();
 800335e:	f7ff fb33 	bl	80029c8 <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003362:	f002 fdc9 	bl	8005ef8 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <main+0x2f8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	1ad2      	subs	r2, r2, r3
 800336e:	4b3f      	ldr	r3, [pc, #252]	; (800346c <main+0x2fc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d30e      	bcc.n	8003394 <main+0x224>
  				get_stand_status();
 8003376:	f7ff fc17 	bl	8002ba8 <get_stand_status>
  				get_handle_type();
 800337a:	f7ff fca9 	bl	8002cd0 <get_handle_type>
  				get_set_temperature();
 800337e:	f7ff fae3 	bl	8002948 <get_set_temperature>
  				handle_button_status();
 8003382:	f7ff fbb7 	bl	8002af4 <handle_button_status>
  	  			handle_emergency_shutdown();
 8003386:	f7ff fb3f 	bl	8002a08 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 800338a:	f002 fdb5 	bl	8005ef8 <HAL_GetTick>
 800338e:	4603      	mov	r3, r0
 8003390:	4a35      	ldr	r2, [pc, #212]	; (8003468 <main+0x2f8>)
 8003392:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 8003394:	f002 fdb0 	bl	8005ef8 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	4b35      	ldr	r3, [pc, #212]	; (8003470 <main+0x300>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	4b34      	ldr	r3, [pc, #208]	; (8003474 <main+0x304>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d308      	bcc.n	80033ba <main+0x24a>
  				get_bus_voltage();
 80033a8:	f7fe f8da 	bl	8001560 <get_bus_voltage>
  				get_mcu_temp();
 80033ac:	f7fe f830 	bl	8001410 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 80033b0:	f002 fda2 	bl	8005ef8 <HAL_GetTick>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4a2e      	ldr	r2, [pc, #184]	; (8003470 <main+0x300>)
 80033b8:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 80033ba:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <main+0x308>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	dc66      	bgt.n	8003490 <main+0x320>
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	da5c      	bge.n	8003480 <main+0x310>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <main+0x260>
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d007      	beq.n	80033de <main+0x26e>
 80033ce:	e05f      	b.n	8003490 <main+0x320>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <main+0x30c>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	491e      	ldr	r1, [pc, #120]	; (8003450 <main+0x2e0>)
 80033d8:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80033dc:	e058      	b.n	8003490 <main+0x320>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 80033de:	4b18      	ldr	r3, [pc, #96]	; (8003440 <main+0x2d0>)
 80033e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033e4:	491a      	ldr	r1, [pc, #104]	; (8003450 <main+0x2e0>)
 80033e6:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80033ea:	e051      	b.n	8003490 <main+0x320>
 80033ec:	f3af 8000 	nop.w
 80033f0:	00000000 	.word	0x00000000
 80033f4:	407f4000 	.word	0x407f4000
	...
 8003400:	20001c80 	.word	0x20001c80
 8003404:	20001ccc 	.word	0x20001ccc
 8003408:	20001d18 	.word	0x20001d18
 800340c:	20001d64 	.word	0x20001d64
 8003410:	20001db0 	.word	0x20001db0
 8003414:	20001a78 	.word	0x20001a78
 8003418:	20001a0c 	.word	0x20001a0c
 800341c:	2000062c 	.word	0x2000062c
 8003420:	20000704 	.word	0x20000704
 8003424:	42c80000 	.word	0x42c80000
 8003428:	20000a30 	.word	0x20000a30
 800342c:	20000d5c 	.word	0x20000d5c
 8003430:	20001088 	.word	0x20001088
 8003434:	200013b4 	.word	0x200013b4
 8003438:	200016e0 	.word	0x200016e0
 800343c:	20000088 	.word	0x20000088
 8003440:	200006a0 	.word	0x200006a0
 8003444:	200005e8 	.word	0x200005e8
 8003448:	200005f0 	.word	0x200005f0
 800344c:	200005f8 	.word	0x200005f8
 8003450:	200006f0 	.word	0x200006f0
 8003454:	200006e8 	.word	0x200006e8
 8003458:	20000040 	.word	0x20000040
 800345c:	20001f78 	.word	0x20001f78
 8003460:	2000000c 	.word	0x2000000c
 8003464:	20000020 	.word	0x20000020
 8003468:	200005d4 	.word	0x200005d4
 800346c:	20000014 	.word	0x20000014
 8003470:	200005d8 	.word	0x200005d8
 8003474:	20000018 	.word	0x20000018
 8003478:	2000001d 	.word	0x2000001d
 800347c:	20000038 	.word	0x20000038
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 8003480:	4958      	ldr	r1, [pc, #352]	; (80035e4 <main+0x474>)
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800348e:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8003490:	f002 fd32 	bl	8005ef8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	4b54      	ldr	r3, [pc, #336]	; (80035e8 <main+0x478>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1ad2      	subs	r2, r2, r3
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <main+0x47c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d370      	bcc.n	8003586 <main+0x416>
  				memset(&buffer, '\0', sizeof(buffer));
 80034a4:	2228      	movs	r2, #40	; 0x28
 80034a6:	2100      	movs	r1, #0
 80034a8:	4851      	ldr	r0, [pc, #324]	; (80035f0 <main+0x480>)
 80034aa:	f013 fd5e 	bl	8016f6a <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80034ae:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <main+0x484>)
 80034b0:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 80034b4:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <main+0x484>)
 80034b6:	e9d3 8900 	ldrd	r8, r9, [r3]
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current*1.0);
 80034ba:	4b4f      	ldr	r3, [pc, #316]	; (80035f8 <main+0x488>)
 80034bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <main+0x48c>)
 80034c6:	f7fd f9e9 	bl	800089c <__aeabi_ddiv>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <main+0x490>)
 80034d8:	f7fd f8b6 	bl	8000648 <__aeabi_dmul>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	ec43 2b19 	vmov	d9, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current*1.0);
 80034e4:	4847      	ldr	r0, [pc, #284]	; (8003604 <main+0x494>)
 80034e6:	f001 faa5 	bl	8004a34 <PID_GetPpart>
 80034ea:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	4b45      	ldr	r3, [pc, #276]	; (8003608 <main+0x498>)
 80034f4:	f7fd f9d2 	bl	800089c <__aeabi_ddiv>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current*1.0);
 8003500:	4840      	ldr	r0, [pc, #256]	; (8003604 <main+0x494>)
 8003502:	f001 faa9 	bl	8004a58 <PID_GetIpart>
 8003506:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <main+0x498>)
 8003510:	f7fd f9c4 	bl	800089c <__aeabi_ddiv>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current*1.0);
 800351c:	4839      	ldr	r0, [pc, #228]	; (8003604 <main+0x494>)
 800351e:	f001 faad 	bl	8004a7c <PID_GetDpart>
 8003522:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <main+0x498>)
 800352c:	f7fd f9b6 	bl	800089c <__aeabi_ddiv>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4614      	mov	r4, r2
 8003536:	461d      	mov	r5, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current*1.0);
 8003538:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <main+0x484>)
 800353a:	8a9b      	ldrh	r3, [r3, #20]
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd f819 	bl	8000574 <__aeabi_i2d>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800354a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800354e:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003552:	ed8d ab04 	vstr	d10, [sp, #16]
 8003556:	ed8d 9b02 	vstr	d9, [sp, #8]
 800355a:	e9cd 8900 	strd	r8, r9, [sp]
 800355e:	4652      	mov	r2, sl
 8003560:	465b      	mov	r3, fp
 8003562:	492a      	ldr	r1, [pc, #168]	; (800360c <main+0x49c>)
 8003564:	4822      	ldr	r0, [pc, #136]	; (80035f0 <main+0x480>)
 8003566:	f013 fc9d 	bl	8016ea4 <siprintf>
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 800356a:	4821      	ldr	r0, [pc, #132]	; (80035f0 <main+0x480>)
 800356c:	f7fc fea8 	bl	80002c0 <strlen>
 8003570:	4603      	mov	r3, r0
 8003572:	b29b      	uxth	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	481e      	ldr	r0, [pc, #120]	; (80035f0 <main+0x480>)
 8003578:	f012 f910 	bl	801579c <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 800357c:	f002 fcbc 	bl	8005ef8 <HAL_GetTick>
 8003580:	4603      	mov	r3, r0
 8003582:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <main+0x478>)
 8003584:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 8003586:	f002 fcb7 	bl	8005ef8 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	4b20      	ldr	r3, [pc, #128]	; (8003610 <main+0x4a0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	1ad2      	subs	r2, r2, r3
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <main+0x4a4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d311      	bcc.n	80035be <main+0x44e>
  					if(thermocouple_measurement_done == 1){
 800359a:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <main+0x4a8>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10d      	bne.n	80035be <main+0x44e>
						current_measurement_done = 0;
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <main+0x4ac>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 80035a8:	20fa      	movs	r0, #250	; 0xfa
 80035aa:	f7fe f909 	bl	80017c0 <set_heater_duty>
						current_measurement_requested = 1;
 80035ae:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <main+0x4b0>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 80035b4:	f002 fca0 	bl	8005ef8 <HAL_GetTick>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <main+0x4a0>)
 80035bc:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 80035be:	f002 fc9b 	bl	8005ef8 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <main+0x4b4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	1ad2      	subs	r2, r2, r3
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <main+0x4b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	f4ff aec7 	bcc.w	8003362 <main+0x1f2>
  				update_display();
 80035d4:	f7fe fc6c 	bl	8001eb0 <update_display>
  				previous_millis_display = HAL_GetTick();
 80035d8:	f002 fc8e 	bl	8005ef8 <HAL_GetTick>
 80035dc:	4603      	mov	r3, r0
 80035de:	4a11      	ldr	r2, [pc, #68]	; (8003624 <main+0x4b4>)
 80035e0:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 80035e2:	e6be      	b.n	8003362 <main+0x1f2>
 80035e4:	200006f0 	.word	0x200006f0
 80035e8:	200005c0 	.word	0x200005c0
 80035ec:	20000008 	.word	0x20000008
 80035f0:	20000600 	.word	0x20000600
 80035f4:	20000038 	.word	0x20000038
 80035f8:	200006e8 	.word	0x200006e8
 80035fc:	407f4000 	.word	0x407f4000
 8003600:	40590000 	.word	0x40590000
 8003604:	20001f78 	.word	0x20001f78
 8003608:	40240000 	.word	0x40240000
 800360c:	0801ac30 	.word	0x0801ac30
 8003610:	200005d0 	.word	0x200005d0
 8003614:	20000010 	.word	0x20000010
 8003618:	200001c1 	.word	0x200001c1
 800361c:	200001c0 	.word	0x200001c0
 8003620:	20000700 	.word	0x20000700
 8003624:	200005bc 	.word	0x200005bc
 8003628:	20000004 	.word	0x20000004

0800362c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b094      	sub	sp, #80	; 0x50
 8003630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003632:	f107 0318 	add.w	r3, r7, #24
 8003636:	2238      	movs	r2, #56	; 0x38
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f013 fc95 	bl	8016f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800364e:	2000      	movs	r0, #0
 8003650:	f008 f842 	bl	800b6d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8003654:	2322      	movs	r3, #34	; 0x22
 8003656:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800365e:	2340      	movs	r3, #64	; 0x40
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003662:	2301      	movs	r3, #1
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003666:	2302      	movs	r3, #2
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800366a:	2302      	movs	r3, #2
 800366c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800366e:	2304      	movs	r3, #4
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003672:	2355      	movs	r3, #85	; 0x55
 8003674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003676:	2302      	movs	r3, #2
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800367a:	2302      	movs	r3, #2
 800367c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800367e:	2302      	movs	r3, #2
 8003680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003682:	f107 0318 	add.w	r3, r7, #24
 8003686:	4618      	mov	r0, r3
 8003688:	f008 f8da 	bl	800b840 <HAL_RCC_OscConfig>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003692:	f000 fd79 	bl	8004188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003696:	230f      	movs	r3, #15
 8003698:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800369a:	2303      	movs	r3, #3
 800369c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	2104      	movs	r1, #4
 80036ae:	4618      	mov	r0, r3
 80036b0:	f008 fbd8 	bl	800be64 <HAL_RCC_ClockConfig>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80036ba:	f000 fd65 	bl	8004188 <Error_Handler>
  }
}
 80036be:	bf00      	nop
 80036c0:	3750      	adds	r7, #80	; 0x50
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80036ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	2220      	movs	r2, #32
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f013 fc42 	bl	8016f6a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80036e6:	4b40      	ldr	r3, [pc, #256]	; (80037e8 <MX_ADC1_Init+0x120>)
 80036e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80036ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80036ee:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <MX_ADC1_Init+0x120>)
 80036f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036f6:	4b3c      	ldr	r3, [pc, #240]	; (80037e8 <MX_ADC1_Init+0x120>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036fc:	4b3a      	ldr	r3, [pc, #232]	; (80037e8 <MX_ADC1_Init+0x120>)
 80036fe:	2200      	movs	r2, #0
 8003700:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003708:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <MX_ADC1_Init+0x120>)
 800370a:	2201      	movs	r2, #1
 800370c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003710:	2204      	movs	r2, #4
 8003712:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003714:	4b34      	ldr	r3, [pc, #208]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003716:	2200      	movs	r2, #0
 8003718:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800371a:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <MX_ADC1_Init+0x120>)
 800371c:	2201      	movs	r2, #1
 800371e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8003720:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003722:	2203      	movs	r2, #3
 8003724:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003726:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800372e:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003730:	2200      	movs	r2, #0
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003734:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003736:	2200      	movs	r2, #0
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800373a:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <MX_ADC1_Init+0x120>)
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003742:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003744:	2200      	movs	r2, #0
 8003746:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <MX_ADC1_Init+0x120>)
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003750:	4825      	ldr	r0, [pc, #148]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003752:	f002 ff65 	bl	8006620 <HAL_ADC_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800375c:	f000 fd14 	bl	8004188 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003760:	2300      	movs	r3, #0
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003768:	4619      	mov	r1, r3
 800376a:	481f      	ldr	r0, [pc, #124]	; (80037e8 <MX_ADC1_Init+0x120>)
 800376c:	f004 fe74 	bl	8008458 <HAL_ADCEx_MultiModeConfigChannel>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003776:	f000 fd07 	bl	8004188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <MX_ADC1_Init+0x124>)
 800377c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800377e:	2306      	movs	r3, #6
 8003780:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003782:	2306      	movs	r3, #6
 8003784:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003786:	237f      	movs	r3, #127	; 0x7f
 8003788:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800378a:	2304      	movs	r3, #4
 800378c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4814      	ldr	r0, [pc, #80]	; (80037e8 <MX_ADC1_Init+0x120>)
 8003798:	f003 fd46 	bl	8007228 <HAL_ADC_ConfigChannel>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80037a2:	f000 fcf1 	bl	8004188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <MX_ADC1_Init+0x128>)
 80037a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80037aa:	230c      	movs	r3, #12
 80037ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	480d      	ldr	r0, [pc, #52]	; (80037e8 <MX_ADC1_Init+0x120>)
 80037b4:	f003 fd38 	bl	8007228 <HAL_ADC_ConfigChannel>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80037be:	f000 fce3 	bl	8004188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <MX_ADC1_Init+0x12c>)
 80037c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80037c6:	2312      	movs	r3, #18
 80037c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4806      	ldr	r0, [pc, #24]	; (80037e8 <MX_ADC1_Init+0x120>)
 80037d0:	f003 fd2a 	bl	8007228 <HAL_ADC_ConfigChannel>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80037da:	f000 fcd5 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037de:	bf00      	nop
 80037e0:	3730      	adds	r7, #48	; 0x30
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20001a0c 	.word	0x20001a0c
 80037ec:	0c900008 	.word	0x0c900008
 80037f0:	10c00010 	.word	0x10c00010
 80037f4:	c3210000 	.word	0xc3210000

080037f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b090      	sub	sp, #64	; 0x40
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80037fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	611a      	str	r2, [r3, #16]
 800380e:	615a      	str	r2, [r3, #20]
 8003810:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	2220      	movs	r2, #32
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f013 fba6 	bl	8016f6a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <MX_ADC2_Init+0x128>)
 8003820:	4a40      	ldr	r2, [pc, #256]	; (8003924 <MX_ADC2_Init+0x12c>)
 8003822:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003824:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <MX_ADC2_Init+0x128>)
 8003826:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800382a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800382c:	4b3c      	ldr	r3, [pc, #240]	; (8003920 <MX_ADC2_Init+0x128>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <MX_ADC2_Init+0x128>)
 8003834:	2200      	movs	r2, #0
 8003836:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003838:	4b39      	ldr	r3, [pc, #228]	; (8003920 <MX_ADC2_Init+0x128>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800383e:	4b38      	ldr	r3, [pc, #224]	; (8003920 <MX_ADC2_Init+0x128>)
 8003840:	2201      	movs	r2, #1
 8003842:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003844:	4b36      	ldr	r3, [pc, #216]	; (8003920 <MX_ADC2_Init+0x128>)
 8003846:	2204      	movs	r2, #4
 8003848:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800384a:	4b35      	ldr	r3, [pc, #212]	; (8003920 <MX_ADC2_Init+0x128>)
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003850:	4b33      	ldr	r3, [pc, #204]	; (8003920 <MX_ADC2_Init+0x128>)
 8003852:	2200      	movs	r2, #0
 8003854:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8003856:	4b32      	ldr	r3, [pc, #200]	; (8003920 <MX_ADC2_Init+0x128>)
 8003858:	2202      	movs	r2, #2
 800385a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800385c:	4b30      	ldr	r3, [pc, #192]	; (8003920 <MX_ADC2_Init+0x128>)
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <MX_ADC2_Init+0x128>)
 8003866:	2200      	movs	r2, #0
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800386a:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <MX_ADC2_Init+0x128>)
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003870:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <MX_ADC2_Init+0x128>)
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003878:	4b29      	ldr	r3, [pc, #164]	; (8003920 <MX_ADC2_Init+0x128>)
 800387a:	2200      	movs	r2, #0
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800387e:	4b28      	ldr	r3, [pc, #160]	; (8003920 <MX_ADC2_Init+0x128>)
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003886:	4826      	ldr	r0, [pc, #152]	; (8003920 <MX_ADC2_Init+0x128>)
 8003888:	f002 feca 	bl	8006620 <HAL_ADC_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 8003892:	f000 fc79 	bl	8004188 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <MX_ADC2_Init+0x130>)
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800389a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 80038a0:	4b22      	ldr	r3, [pc, #136]	; (800392c <MX_ADC2_Init+0x134>)
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 2000;
 80038aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80038b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038bc:	4619      	mov	r1, r3
 80038be:	4818      	ldr	r0, [pc, #96]	; (8003920 <MX_ADC2_Init+0x128>)
 80038c0:	f004 f8a2 	bl	8007a08 <HAL_ADC_AnalogWDGConfig>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80038ca:	f000 fc5d 	bl	8004188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <MX_ADC2_Init+0x134>)
 80038d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038d2:	2306      	movs	r3, #6
 80038d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038da:	237f      	movs	r3, #127	; 0x7f
 80038dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038de:	2304      	movs	r3, #4
 80038e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038e6:	1d3b      	adds	r3, r7, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	480d      	ldr	r0, [pc, #52]	; (8003920 <MX_ADC2_Init+0x128>)
 80038ec:	f003 fc9c 	bl	8007228 <HAL_ADC_ConfigChannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 80038f6:	f000 fc47 	bl	8004188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80038fa:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <MX_ADC2_Init+0x138>)
 80038fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038fe:	230c      	movs	r3, #12
 8003900:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4806      	ldr	r0, [pc, #24]	; (8003920 <MX_ADC2_Init+0x128>)
 8003908:	f003 fc8e 	bl	8007228 <HAL_ADC_ConfigChannel>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 8003912:	f000 fc39 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003916:	bf00      	nop
 8003918:	3740      	adds	r7, #64	; 0x40
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20001a78 	.word	0x20001a78
 8003924:	50000100 	.word	0x50000100
 8003928:	7dc00000 	.word	0x7dc00000
 800392c:	08600004 	.word	0x08600004
 8003930:	2a000400 	.word	0x2a000400

08003934 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003938:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <MX_CRC_Init+0x3c>)
 800393a:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <MX_CRC_Init+0x40>)
 800393c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <MX_CRC_Init+0x3c>)
 8003940:	2200      	movs	r2, #0
 8003942:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <MX_CRC_Init+0x3c>)
 8003946:	2200      	movs	r2, #0
 8003948:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <MX_CRC_Init+0x3c>)
 800394c:	2200      	movs	r2, #0
 800394e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <MX_CRC_Init+0x3c>)
 8003952:	2200      	movs	r2, #0
 8003954:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <MX_CRC_Init+0x3c>)
 8003958:	2201      	movs	r2, #1
 800395a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800395c:	4804      	ldr	r0, [pc, #16]	; (8003970 <MX_CRC_Init+0x3c>)
 800395e:	f004 ff2f 	bl	80087c0 <HAL_CRC_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003968:	f000 fc0e 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20001b44 	.word	0x20001b44
 8003974:	40023000 	.word	0x40023000

08003978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <MX_I2C1_Init+0x74>)
 800397e:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <MX_I2C1_Init+0x78>)
 8003980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <MX_I2C1_Init+0x74>)
 8003984:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <MX_I2C1_Init+0x7c>)
 8003986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <MX_I2C1_Init+0x74>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <MX_I2C1_Init+0x74>)
 8003990:	2201      	movs	r2, #1
 8003992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003994:	4b15      	ldr	r3, [pc, #84]	; (80039ec <MX_I2C1_Init+0x74>)
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800399a:	4b14      	ldr	r3, [pc, #80]	; (80039ec <MX_I2C1_Init+0x74>)
 800399c:	2200      	movs	r2, #0
 800399e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <MX_I2C1_Init+0x74>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <MX_I2C1_Init+0x74>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <MX_I2C1_Init+0x74>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039b2:	480e      	ldr	r0, [pc, #56]	; (80039ec <MX_I2C1_Init+0x74>)
 80039b4:	f006 f82a 	bl	8009a0c <HAL_I2C_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80039be:	f000 fbe3 	bl	8004188 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039c2:	2100      	movs	r1, #0
 80039c4:	4809      	ldr	r0, [pc, #36]	; (80039ec <MX_I2C1_Init+0x74>)
 80039c6:	f006 f8bc 	bl	8009b42 <HAL_I2CEx_ConfigAnalogFilter>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80039d0:	f000 fbda 	bl	8004188 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039d4:	2100      	movs	r1, #0
 80039d6:	4805      	ldr	r0, [pc, #20]	; (80039ec <MX_I2C1_Init+0x74>)
 80039d8:	f006 f8fe 	bl	8009bd8 <HAL_I2CEx_ConfigDigitalFilter>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039e2:	f000 fbd1 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20001b68 	.word	0x20001b68
 80039f0:	40005400 	.word	0x40005400
 80039f4:	30a0a7fb 	.word	0x30a0a7fb

080039f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80039fc:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <MX_SPI2_Init+0x74>)
 80039fe:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <MX_SPI2_Init+0x78>)
 8003a00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8003a0a:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a10:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a12:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a20:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a30:	2210      	movs	r2, #16
 8003a32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a48:	2207      	movs	r2, #7
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a54:	2208      	movs	r2, #8
 8003a56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a58:	4804      	ldr	r0, [pc, #16]	; (8003a6c <MX_SPI2_Init+0x74>)
 8003a5a:	f008 fe0f 	bl	800c67c <HAL_SPI_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8003a64:	f000 fb90 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a68:	bf00      	nop
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20001bbc 	.word	0x20001bbc
 8003a70:	40003800 	.word	0x40003800

08003a74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b098      	sub	sp, #96	; 0x60
 8003a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]
 8003a84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	609a      	str	r2, [r3, #8]
 8003a92:	60da      	str	r2, [r3, #12]
 8003a94:	611a      	str	r2, [r3, #16]
 8003a96:	615a      	str	r2, [r3, #20]
 8003a98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a9a:	1d3b      	adds	r3, r7, #4
 8003a9c:	2234      	movs	r2, #52	; 0x34
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f013 fa62 	bl	8016f6a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <MX_TIM1_Init+0x138>)
 8003aa8:	4a41      	ldr	r2, [pc, #260]	; (8003bb0 <MX_TIM1_Init+0x13c>)
 8003aaa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8003aac:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <MX_TIM1_Init+0x138>)
 8003aae:	2213      	movs	r2, #19
 8003ab0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <MX_TIM1_Init+0x138>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8003ab8:	4b3c      	ldr	r3, [pc, #240]	; (8003bac <MX_TIM1_Init+0x138>)
 8003aba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003abe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ac0:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <MX_TIM1_Init+0x138>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <MX_TIM1_Init+0x138>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003acc:	4b37      	ldr	r3, [pc, #220]	; (8003bac <MX_TIM1_Init+0x138>)
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ad2:	4836      	ldr	r0, [pc, #216]	; (8003bac <MX_TIM1_Init+0x138>)
 8003ad4:	f009 fbd7 	bl	800d286 <HAL_TIM_PWM_Init>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003ade:	f000 fb53 	bl	8004188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003aee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003af2:	4619      	mov	r1, r3
 8003af4:	482d      	ldr	r0, [pc, #180]	; (8003bac <MX_TIM1_Init+0x138>)
 8003af6:	f00a ff29 	bl	800e94c <HAL_TIMEx_MasterConfigSynchronization>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003b00:	f000 fb42 	bl	8004188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b04:	2360      	movs	r3, #96	; 0x60
 8003b06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b10:	2300      	movs	r3, #0
 8003b12:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b24:	2200      	movs	r2, #0
 8003b26:	4619      	mov	r1, r3
 8003b28:	4820      	ldr	r0, [pc, #128]	; (8003bac <MX_TIM1_Init+0x138>)
 8003b2a:	f00a f927 	bl	800dd7c <HAL_TIM_PWM_ConfigChannel>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003b34:	f000 fb28 	bl	8004188 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	4619      	mov	r1, r3
 8003b40:	481a      	ldr	r0, [pc, #104]	; (8003bac <MX_TIM1_Init+0x138>)
 8003b42:	f00a f91b 	bl	800dd7c <HAL_TIM_PWM_ConfigChannel>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003b4c:	f000 fb1c 	bl	8004188 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003b80:	2300      	movs	r3, #0
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b88:	1d3b      	adds	r3, r7, #4
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4807      	ldr	r0, [pc, #28]	; (8003bac <MX_TIM1_Init+0x138>)
 8003b8e:	f00a ff5f 	bl	800ea50 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003b98:	f000 faf6 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b9c:	4803      	ldr	r0, [pc, #12]	; (8003bac <MX_TIM1_Init+0x138>)
 8003b9e:	f001 faf5 	bl	800518c <HAL_TIM_MspPostInit>

}
 8003ba2:	bf00      	nop
 8003ba4:	3760      	adds	r7, #96	; 0x60
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20001c80 	.word	0x20001c80
 8003bb0:	40012c00 	.word	0x40012c00

08003bb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	; 0x30
 8003bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bba:	f107 030c 	add.w	r3, r7, #12
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f013 f9d1 	bl	8016f6a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bc8:	463b      	mov	r3, r7
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bd2:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <MX_TIM2_Init+0xa4>)
 8003bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003bda:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <MX_TIM2_Init+0xa4>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <MX_TIM2_Init+0xa4>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8003be6:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <MX_TIM2_Init+0xa4>)
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bee:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <MX_TIM2_Init+0xa4>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <MX_TIM2_Init+0xa4>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c02:	2301      	movs	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c12:	2301      	movs	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c16:	2300      	movs	r3, #0
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003c1e:	f107 030c 	add.w	r3, r7, #12
 8003c22:	4619      	mov	r1, r3
 8003c24:	480c      	ldr	r0, [pc, #48]	; (8003c58 <MX_TIM2_Init+0xa4>)
 8003c26:	f009 fe05 	bl	800d834 <HAL_TIM_Encoder_Init>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003c30:	f000 faaa 	bl	8004188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4805      	ldr	r0, [pc, #20]	; (8003c58 <MX_TIM2_Init+0xa4>)
 8003c42:	f00a fe83 	bl	800e94c <HAL_TIMEx_MasterConfigSynchronization>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003c4c:	f000 fa9c 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c50:	bf00      	nop
 8003c52:	3730      	adds	r7, #48	; 0x30
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20001ccc 	.word	0x20001ccc

08003c5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c62:	f107 031c 	add.w	r3, r7, #28
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c6e:	463b      	mov	r3, r7
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
 8003c7c:	615a      	str	r2, [r3, #20]
 8003c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c80:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003c82:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <MX_TIM4_Init+0xb0>)
 8003c84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003c88:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8003c94:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003c96:	220a      	movs	r2, #10
 8003c98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ca6:	4818      	ldr	r0, [pc, #96]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003ca8:	f009 faed 	bl	800d286 <HAL_TIM_PWM_Init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003cb2:	f000 fa69 	bl	8004188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cbe:	f107 031c 	add.w	r3, r7, #28
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4810      	ldr	r0, [pc, #64]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003cc6:	f00a fe41 	bl	800e94c <HAL_TIMEx_MasterConfigSynchronization>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003cd0:	f000 fa5a 	bl	8004188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cd4:	2360      	movs	r3, #96	; 0x60
 8003cd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4807      	ldr	r0, [pc, #28]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003cec:	f00a f846 	bl	800dd7c <HAL_TIM_PWM_ConfigChannel>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003cf6:	f000 fa47 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003cfa:	4803      	ldr	r0, [pc, #12]	; (8003d08 <MX_TIM4_Init+0xac>)
 8003cfc:	f001 fa46 	bl	800518c <HAL_TIM_MspPostInit>

}
 8003d00:	bf00      	nop
 8003d02:	3728      	adds	r7, #40	; 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20001d18 	.word	0x20001d18
 8003d0c:	40000800 	.word	0x40000800

08003d10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003d20:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <MX_TIM6_Init+0x64>)
 8003d22:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <MX_TIM6_Init+0x68>)
 8003d24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 8003d26:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <MX_TIM6_Init+0x64>)
 8003d28:	f244 2267 	movw	r2, #16999	; 0x4267
 8003d2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <MX_TIM6_Init+0x64>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <MX_TIM6_Init+0x64>)
 8003d36:	22fa      	movs	r2, #250	; 0xfa
 8003d38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <MX_TIM6_Init+0x64>)
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003d40:	480c      	ldr	r0, [pc, #48]	; (8003d74 <MX_TIM6_Init+0x64>)
 8003d42:	f009 f9af 	bl	800d0a4 <HAL_TIM_Base_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003d4c:	f000 fa1c 	bl	8004188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003d58:	1d3b      	adds	r3, r7, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4805      	ldr	r0, [pc, #20]	; (8003d74 <MX_TIM6_Init+0x64>)
 8003d5e:	f00a fdf5 	bl	800e94c <HAL_TIMEx_MasterConfigSynchronization>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003d68:	f000 fa0e 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20001d64 	.word	0x20001d64
 8003d78:	40001000 	.word	0x40001000

08003d7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <MX_TIM7_Init+0x78>)
 8003d8e:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <MX_TIM7_Init+0x7c>)
 8003d90:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8500-1;
 8003d92:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <MX_TIM7_Init+0x78>)
 8003d94:	f242 1233 	movw	r2, #8499	; 0x2133
 8003d98:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <MX_TIM7_Init+0x78>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8003da0:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <MX_TIM7_Init+0x78>)
 8003da2:	2209      	movs	r2, #9
 8003da4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <MX_TIM7_Init+0x78>)
 8003da8:	2280      	movs	r2, #128	; 0x80
 8003daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003dac:	4811      	ldr	r0, [pc, #68]	; (8003df4 <MX_TIM7_Init+0x78>)
 8003dae:	f009 f979 	bl	800d0a4 <HAL_TIM_Base_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003db8:	f000 f9e6 	bl	8004188 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	480d      	ldr	r0, [pc, #52]	; (8003df4 <MX_TIM7_Init+0x78>)
 8003dc0:	f009 fce8 	bl	800d794 <HAL_TIM_OnePulse_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8003dca:	f000 f9dd 	bl	8004188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4806      	ldr	r0, [pc, #24]	; (8003df4 <MX_TIM7_Init+0x78>)
 8003ddc:	f00a fdb6 	bl	800e94c <HAL_TIMEx_MasterConfigSynchronization>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8003de6:	f000 f9cf 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20001db0 	.word	0x20001db0
 8003df8:	40001400 	.word	0x40001400

08003dfc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <MX_TIM8_Init+0x78>)
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	; (8003e78 <MX_TIM8_Init+0x7c>)
 8003e10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003e12:	4b18      	ldr	r3, [pc, #96]	; (8003e74 <MX_TIM8_Init+0x78>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e18:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <MX_TIM8_Init+0x78>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <MX_TIM8_Init+0x78>)
 8003e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <MX_TIM8_Init+0x78>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <MX_TIM8_Init+0x78>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <MX_TIM8_Init+0x78>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8003e38:	2108      	movs	r1, #8
 8003e3a:	480e      	ldr	r0, [pc, #56]	; (8003e74 <MX_TIM8_Init+0x78>)
 8003e3c:	f009 fcaa 	bl	800d794 <HAL_TIM_OnePulse_Init>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 8003e46:	f000 f99f 	bl	8004188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4806      	ldr	r0, [pc, #24]	; (8003e74 <MX_TIM8_Init+0x78>)
 8003e5c:	f00a fd76 	bl	800e94c <HAL_TIMEx_MasterConfigSynchronization>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8003e66:	f000 f98f 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20001dfc 	.word	0x20001dfc
 8003e78:	40013400 	.word	0x40013400

08003e7c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003e80:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <MX_TIM16_Init+0x48>)
 8003e82:	4a11      	ldr	r2, [pc, #68]	; (8003ec8 <MX_TIM16_Init+0x4c>)
 8003e84:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <MX_TIM16_Init+0x48>)
 8003e88:	f244 2267 	movw	r2, #16999	; 0x4267
 8003e8c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <MX_TIM16_Init+0x48>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <MX_TIM16_Init+0x48>)
 8003e96:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003e9a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <MX_TIM16_Init+0x48>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <MX_TIM16_Init+0x48>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <MX_TIM16_Init+0x48>)
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003eae:	4805      	ldr	r0, [pc, #20]	; (8003ec4 <MX_TIM16_Init+0x48>)
 8003eb0:	f009 f8f8 	bl	800d0a4 <HAL_TIM_Base_Init>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003eba:	f000 f965 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20001e48 	.word	0x20001e48
 8003ec8:	40014400 	.word	0x40014400

08003ecc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <MX_TIM17_Init+0x58>)
 8003ed2:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <MX_TIM17_Init+0x5c>)
 8003ed4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 8003ed6:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <MX_TIM17_Init+0x58>)
 8003ed8:	f244 2267 	movw	r2, #16999	; 0x4267
 8003edc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <MX_TIM17_Init+0x58>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <MX_TIM17_Init+0x58>)
 8003ee6:	2231      	movs	r2, #49	; 0x31
 8003ee8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eea:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <MX_TIM17_Init+0x58>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <MX_TIM17_Init+0x58>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <MX_TIM17_Init+0x58>)
 8003ef8:	2280      	movs	r2, #128	; 0x80
 8003efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003efc:	4809      	ldr	r0, [pc, #36]	; (8003f24 <MX_TIM17_Init+0x58>)
 8003efe:	f009 f8d1 	bl	800d0a4 <HAL_TIM_Base_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8003f08:	f000 f93e 	bl	8004188 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8003f0c:	2108      	movs	r1, #8
 8003f0e:	4805      	ldr	r0, [pc, #20]	; (8003f24 <MX_TIM17_Init+0x58>)
 8003f10:	f009 fc40 	bl	800d794 <HAL_TIM_OnePulse_Init>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8003f1a:	f000 f935 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20001e94 	.word	0x20001e94
 8003f28:	40014800 	.word	0x40014800

08003f2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f30:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f32:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <MX_USART1_UART_Init+0x94>)
 8003f34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f36:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f4a:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f52:	220c      	movs	r2, #12
 8003f54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f56:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f68:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f6e:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f74:	4811      	ldr	r0, [pc, #68]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f76:	f00a fe62 	bl	800ec3e <HAL_UART_Init>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f80:	f000 f902 	bl	8004188 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f84:	2100      	movs	r1, #0
 8003f86:	480d      	ldr	r0, [pc, #52]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f88:	f00b fbce 	bl	800f728 <HAL_UARTEx_SetTxFifoThreshold>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f92:	f000 f8f9 	bl	8004188 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f96:	2100      	movs	r1, #0
 8003f98:	4808      	ldr	r0, [pc, #32]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003f9a:	f00b fc03 	bl	800f7a4 <HAL_UARTEx_SetRxFifoThreshold>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003fa4:	f000 f8f0 	bl	8004188 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003fa8:	4804      	ldr	r0, [pc, #16]	; (8003fbc <MX_USART1_UART_Init+0x90>)
 8003faa:	f00b fb84 	bl	800f6b6 <HAL_UARTEx_DisableFifoMode>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003fb4:	f000 f8e8 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20001ee0 	.word	0x20001ee0
 8003fc0:	40013800 	.word	0x40013800

08003fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <MX_DMA_Init+0x60>)
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fce:	4a15      	ldr	r2, [pc, #84]	; (8004024 <MX_DMA_Init+0x60>)
 8003fd0:	f043 0304 	orr.w	r3, r3, #4
 8003fd4:	6493      	str	r3, [r2, #72]	; 0x48
 8003fd6:	4b13      	ldr	r3, [pc, #76]	; (8004024 <MX_DMA_Init+0x60>)
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <MX_DMA_Init+0x60>)
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <MX_DMA_Init+0x60>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6493      	str	r3, [r2, #72]	; 0x48
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <MX_DMA_Init+0x60>)
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	200b      	movs	r0, #11
 8004000:	f004 fba9 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004004:	200b      	movs	r0, #11
 8004006:	f004 fbc0 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800400a:	2200      	movs	r2, #0
 800400c:	2100      	movs	r1, #0
 800400e:	200d      	movs	r0, #13
 8004010:	f004 fba1 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004014:	200d      	movs	r0, #13
 8004016:	f004 fbb8 	bl	800878a <HAL_NVIC_EnableIRQ>

}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000

08004028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800403e:	4b4f      	ldr	r3, [pc, #316]	; (800417c <MX_GPIO_Init+0x154>)
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	4a4e      	ldr	r2, [pc, #312]	; (800417c <MX_GPIO_Init+0x154>)
 8004044:	f043 0304 	orr.w	r3, r3, #4
 8004048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800404a:	4b4c      	ldr	r3, [pc, #304]	; (800417c <MX_GPIO_Init+0x154>)
 800404c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004056:	4b49      	ldr	r3, [pc, #292]	; (800417c <MX_GPIO_Init+0x154>)
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	4a48      	ldr	r2, [pc, #288]	; (800417c <MX_GPIO_Init+0x154>)
 800405c:	f043 0320 	orr.w	r3, r3, #32
 8004060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004062:	4b46      	ldr	r3, [pc, #280]	; (800417c <MX_GPIO_Init+0x154>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800406e:	4b43      	ldr	r3, [pc, #268]	; (800417c <MX_GPIO_Init+0x154>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	4a42      	ldr	r2, [pc, #264]	; (800417c <MX_GPIO_Init+0x154>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800407a:	4b40      	ldr	r3, [pc, #256]	; (800417c <MX_GPIO_Init+0x154>)
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004086:	4b3d      	ldr	r3, [pc, #244]	; (800417c <MX_GPIO_Init+0x154>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	4a3c      	ldr	r2, [pc, #240]	; (800417c <MX_GPIO_Init+0x154>)
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004092:	4b3a      	ldr	r3, [pc, #232]	; (800417c <MX_GPIO_Init+0x154>)
 8004094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 800409e:	2200      	movs	r2, #0
 80040a0:	f645 4107 	movw	r1, #23559	; 0x5c07
 80040a4:	4836      	ldr	r0, [pc, #216]	; (8004180 <MX_GPIO_Init+0x158>)
 80040a6:	f005 fc81 	bl	80099ac <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 80040aa:	2200      	movs	r2, #0
 80040ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b4:	f005 fc7a 	bl	80099ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 80040b8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80040bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c6:	f107 0314 	add.w	r3, r7, #20
 80040ca:	4619      	mov	r1, r3
 80040cc:	482d      	ldr	r0, [pc, #180]	; (8004184 <MX_GPIO_Init+0x15c>)
 80040ce:	f005 fad3 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 80040d2:	2370      	movs	r3, #112	; 0x70
 80040d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040de:	f107 0314 	add.w	r3, r7, #20
 80040e2:	4619      	mov	r1, r3
 80040e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040e8:	f005 fac6 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80040f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80040f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 80040fa:	f107 0314 	add.w	r3, r7, #20
 80040fe:	4619      	mov	r1, r3
 8004100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004104:	f005 fab8 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004108:	f645 4307 	movw	r3, #23559	; 0x5c07
 800410c:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800410e:	2301      	movs	r3, #1
 8004110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004116:	2300      	movs	r3, #0
 8004118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800411a:	f107 0314 	add.w	r3, r7, #20
 800411e:	4619      	mov	r1, r3
 8004120:	4817      	ldr	r0, [pc, #92]	; (8004180 <MX_GPIO_Init+0x158>)
 8004122:	f005 faa9 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8004126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800412c:	2301      	movs	r3, #1
 800412e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	2300      	movs	r3, #0
 8004136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	4619      	mov	r1, r3
 800413e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004142:	f005 fa99 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8004146:	f44f 7390 	mov.w	r3, #288	; 0x120
 800414a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800414c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004156:	f107 0314 	add.w	r3, r7, #20
 800415a:	4619      	mov	r1, r3
 800415c:	4808      	ldr	r0, [pc, #32]	; (8004180 <MX_GPIO_Init+0x158>)
 800415e:	f005 fa8b 	bl	8009678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004162:	2200      	movs	r2, #0
 8004164:	2100      	movs	r1, #0
 8004166:	2017      	movs	r0, #23
 8004168:	f004 faf5 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800416c:	2017      	movs	r0, #23
 800416e:	f004 fb0c 	bl	800878a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004172:	bf00      	nop
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
 8004180:	48000400 	.word	0x48000400
 8004184:	48000800 	.word	0x48000800

08004188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800418c:	b672      	cpsid	i
}
 800418e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004190:	e7fe      	b.n	8004190 <Error_Handler+0x8>

08004192 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e008      	b.n	80041cc <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	2200      	movs	r2, #0
 80041c4:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	edd3 7a00 	vldr	s15, [r3]
 80041dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	d4e9      	bmi.n	80041ba <Moving_Average_Init+0x28>
	}
}
 80041e6:	bf00      	nop
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	441a      	add	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800421a:	6839      	ldr	r1, [r7, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	edd3 7a00 	vldr	s15, [r3]
 800424e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004252:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	d507      	bpl.n	8004270 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 800426e:	e003      	b.n	8004278 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	edd3 7a00 	vldr	s15, [r3]
 800428c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004290:	ee16 0a90 	vmov	r0, s13
 8004294:	f7fc f980 	bl	8000598 <__aeabi_f2d>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	ec43 2b17 	vmov	d7, r2, r3
}
 80042a0:	eeb0 0a47 	vmov.f32	s0, s14
 80042a4:	eef0 0a67 	vmov.f32	s1, s15
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80042de:	f7fc fc43 	bl	8000b68 <__aeabi_dcmpgt>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80042f4:	e011      	b.n	800431a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004302:	f7fc fc13 	bl	8000b2c <__aeabi_dcmplt>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d100      	bne.n	800430e <PID_Init+0x60>
}
 800430c:	e005      	b.n	800431a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	0000      	movs	r0, r0
 8004324:	0000      	movs	r0, r0
	...

08004328 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6278      	str	r0, [r7, #36]	; 0x24
 8004330:	6239      	str	r1, [r7, #32]
 8004332:	61fa      	str	r2, [r7, #28]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	ed87 0b04 	vstr	d0, [r7, #16]
 800433a:	ed87 1b02 	vstr	d1, [r7, #8]
 800433e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	6a3a      	ldr	r2, [r7, #32]
 800434c:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	2200      	movs	r2, #0
 8004358:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800435a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80043b0 <PID+0x88>
 800435e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80043b8 <PID+0x90>
 8004362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004364:	f000 f991 	bl	800468a <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	2264      	movs	r2, #100	; 0x64
 800436c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800436e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004372:	4619      	mov	r1, r3
 8004374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004376:	f000 fad9 	bl	800492c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800437a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800437e:	4619      	mov	r1, r3
 8004380:	ed97 2b00 	vldr	d2, [r7]
 8004384:	ed97 1b02 	vldr	d1, [r7, #8]
 8004388:	ed97 0b04 	vldr	d0, [r7, #16]
 800438c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800438e:	f000 fa25 	bl	80047dc <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8004392:	f001 fdb1 	bl	8005ef8 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	1ad2      	subs	r2, r2, r3
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	605a      	str	r2, [r3, #4]

}
 80043a2:	bf00      	nop
 80043a4:	3728      	adds	r7, #40	; 0x28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	f3af 8000 	nop.w
 80043b0:	00000000 	.word	0x00000000
 80043b4:	406fe000 	.word	0x406fe000
	...

080043c0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80043c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c4:	b08c      	sub	sp, #48	; 0x30
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <PID_Compute+0x16>
	{
		return _FALSE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e136      	b.n	8004644 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80043d6:	f001 fd8f 	bl	8005ef8 <HAL_GetTick>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	6a3a      	ldr	r2, [r7, #32]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d204      	bcs.n	80043fa <PID_Compute+0x3a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8124 	beq.w	8004642 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800440e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004412:	f7fb ff61 	bl	80002d8 <__aeabi_dsub>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004424:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004428:	f7fb ff56 	bl	80002d8 <__aeabi_dsub>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004440:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004444:	f7fc f900 	bl	8000648 <__aeabi_dmul>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4650      	mov	r0, sl
 800444e:	4659      	mov	r1, fp
 8004450:	f7fb ff44 	bl	80002dc <__adddf3>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800446a:	f7fc fb7d 	bl	8000b68 <__aeabi_dcmpgt>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d006      	beq.n	8004482 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004480:	e010      	b.n	80044a4 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800448e:	f7fc fb4d 	bl	8000b2c <__aeabi_dcmplt>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d114      	bne.n	80044e2 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80044c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c8:	f7fc f8be 	bl	8000648 <__aeabi_dmul>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4650      	mov	r0, sl
 80044d2:	4659      	mov	r1, fp
 80044d4:	f7fb ff00 	bl	80002d8 <__aeabi_dsub>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80044ee:	f7fc fb3b 	bl	8000b68 <__aeabi_dcmpgt>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d006      	beq.n	8004506 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004504:	e010      	b.n	8004528 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004512:	f7fc fb0b 	bl	8000b2c <__aeabi_dcmplt>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800452e:	4690      	mov	r8, r2
 8004530:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004538:	4640      	mov	r0, r8
 800453a:	4649      	mov	r1, r9
 800453c:	f7fc f884 	bl	8000648 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d017      	beq.n	8004582 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004558:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800455c:	f7fc f874 	bl	8000648 <__aeabi_dmul>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800456e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004572:	f7fc f869 	bl	8000648 <__aeabi_dmul>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004580:	e005      	b.n	800458e <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800459a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800459e:	f7fc f853 	bl	8000648 <__aeabi_dmul>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4640      	mov	r0, r8
 80045a8:	4649      	mov	r1, r9
 80045aa:	f7fb fe95 	bl	80002d8 <__aeabi_dsub>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045b6:	f7fb fe91 	bl	80002dc <__adddf3>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80045c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045cc:	f7fc facc 	bl	8000b68 <__aeabi_dcmpgt>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80045dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80045e0:	e00e      	b.n	8004600 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80045e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045ec:	f7fc fa9e 	bl	8000b2c <__aeabi_dcmplt>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d004      	beq.n	8004600 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80045fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004606:	4614      	mov	r4, r2
 8004608:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800460c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004610:	4620      	mov	r0, r4
 8004612:	4629      	mov	r1, r5
 8004614:	f7fc f818 	bl	8000648 <__aeabi_dmul>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800462a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004634:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 8004642:	2300      	movs	r3, #0
	}

}
 8004644:	4618      	mov	r0, r3
 8004646:	3730      	adds	r7, #48	; 0x30
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800464e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d006      	beq.n	800467c <PID_SetMode+0x2e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fe19 	bl	80042ae <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	7bfa      	ldrb	r2, [r7, #15]
 8004680:	705a      	strb	r2, [r3, #1]

}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	6178      	str	r0, [r7, #20]
 8004692:	ed87 0b02 	vstr	d0, [r7, #8]
 8004696:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800469a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800469e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046a2:	f7fc fa57 	bl	8000b54 <__aeabi_dcmpge>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d158      	bne.n	800475e <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80046ac:	6979      	ldr	r1, [r7, #20]
 80046ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 80046b6:	6979      	ldr	r1, [r7, #20]
 80046b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046bc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d04b      	beq.n	8004760 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80046d6:	f7fc fa47 	bl	8000b68 <__aeabi_dcmpgt>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80046ea:	e9c1 2300 	strd	r2, r3, [r1]
 80046ee:	e012      	b.n	8004716 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80046fe:	f7fc fa15 	bl	8000b2c <__aeabi_dcmplt>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d006      	beq.n	8004716 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004712:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004722:	f7fc fa21 	bl	8000b68 <__aeabi_dcmpgt>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d006      	beq.n	800473a <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004738:	e012      	b.n	8004760 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004746:	f7fc f9f1 	bl	8000b2c <__aeabi_dcmplt>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800475c:	e000      	b.n	8004760 <PID_SetOutputLimits+0xd6>
		return;
 800475e:	bf00      	nop
		}
		else { }

	}

}
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b086      	sub	sp, #24
 800476a:	af00      	add	r7, sp, #0
 800476c:	6178      	str	r0, [r7, #20]
 800476e:	ed87 0b02 	vstr	d0, [r7, #8]
 8004772:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8004776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800477a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800477e:	f7fc f9e9 	bl	8000b54 <__aeabi_dcmpge>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8004788:	6979      	ldr	r1, [r7, #20]
 800478a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800478e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8004792:	6979      	ldr	r1, [r7, #20]
 8004794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004798:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800479c:	e000      	b.n	80047a0 <PID_SetILimits+0x3a>
		return;
 800479e:	bf00      	nop
}
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b088      	sub	sp, #32
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	61f8      	str	r0, [r7, #28]
 80047ae:	ed87 0b04 	vstr	d0, [r7, #16]
 80047b2:	ed87 1b02 	vstr	d1, [r7, #8]
 80047b6:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	789b      	ldrb	r3, [r3, #2]
 80047be:	4619      	mov	r1, r3
 80047c0:	ed97 2b00 	vldr	d2, [r7]
 80047c4:	ed97 1b02 	vldr	d1, [r7, #8]
 80047c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80047cc:	69f8      	ldr	r0, [r7, #28]
 80047ce:	f000 f805 	bl	80047dc <PID_SetTunings2>
}
 80047d2:	bf00      	nop
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	61f8      	str	r0, [r7, #28]
 80047e4:	ed87 0b04 	vstr	d0, [r7, #16]
 80047e8:	ed87 1b02 	vstr	d1, [r7, #8]
 80047ec:	ed87 2b00 	vstr	d2, [r7]
 80047f0:	460b      	mov	r3, r1
 80047f2:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004800:	f7fc f994 	bl	8000b2c <__aeabi_dcmplt>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 8089 	bne.w	800491e <PID_SetTunings2+0x142>
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004818:	f7fc f988 	bl	8000b2c <__aeabi_dcmplt>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d17d      	bne.n	800491e <PID_SetTunings2+0x142>
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800482e:	f7fc f97d 	bl	8000b2c <__aeabi_dcmplt>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d172      	bne.n	800491e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	7efa      	ldrb	r2, [r7, #27]
 800483c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800483e:	7efb      	ldrb	r3, [r7, #27]
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004856:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800485a:	69f9      	ldr	r1, [r7, #28]
 800485c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004860:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8004864:	69f9      	ldr	r1, [r7, #28]
 8004866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800486a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb fe6e 	bl	8000554 <__aeabi_ui2d>
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <PID_SetTunings2+0x14c>)
 800487e:	f7fc f80d 	bl	800089c <__aeabi_ddiv>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800488a:	69f9      	ldr	r1, [r7, #28]
 800488c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004890:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8004894:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004898:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800489c:	f7fb fed4 	bl	8000648 <__aeabi_dmul>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	69f9      	ldr	r1, [r7, #28]
 80048a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80048aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048b2:	f7fb fff3 	bl	800089c <__aeabi_ddiv>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	69f9      	ldr	r1, [r7, #28]
 80048bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	78db      	ldrb	r3, [r3, #3]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d12b      	bne.n	8004920 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80048ce:	f04f 0000 	mov.w	r0, #0
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	f7fb fcff 	bl	80002d8 <__aeabi_dsub>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	69f9      	ldr	r1, [r7, #28]
 80048e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80048ea:	f04f 0000 	mov.w	r0, #0
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	f7fb fcf1 	bl	80002d8 <__aeabi_dsub>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	69f9      	ldr	r1, [r7, #28]
 80048fc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004906:	f04f 0000 	mov.w	r0, #0
 800490a:	f04f 0100 	mov.w	r1, #0
 800490e:	f7fb fce3 	bl	80002d8 <__aeabi_dsub>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	69f9      	ldr	r1, [r7, #28]
 8004918:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800491c:	e000      	b.n	8004920 <PID_SetTunings2+0x144>
		return;
 800491e:	bf00      	nop

	}

}
 8004920:	3728      	adds	r7, #40	; 0x28
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	408f4000 	.word	0x408f4000

0800492c <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02e      	beq.n	800499e <PID_SetControllerDirection+0x72>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	78db      	ldrb	r3, [r3, #3]
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	429a      	cmp	r2, r3
 8004948:	d029      	beq.n	800499e <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	f7fb fcbe 	bl	80002d8 <__aeabi_dsub>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800496c:	f04f 0000 	mov.w	r0, #0
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	f7fb fcb0 	bl	80002d8 <__aeabi_dsub>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004988:	f04f 0000 	mov.w	r0, #0
 800498c:	f04f 0100 	mov.w	r1, #0
 8004990:	f7fb fca2 	bl	80002d8 <__aeabi_dsub>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	70da      	strb	r2, [r3, #3]

}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 80049ac:	b5b0      	push	{r4, r5, r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	dd01      	ble.n	80049c2 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	dd2e      	ble.n	8004a2c <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80049ce:	68b8      	ldr	r0, [r7, #8]
 80049d0:	f7fb fdd0 	bl	8000574 <__aeabi_i2d>
 80049d4:	4604      	mov	r4, r0
 80049d6:	460d      	mov	r5, r1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fdb9 	bl	8000554 <__aeabi_ui2d>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4620      	mov	r0, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7fb ff57 	bl	800089c <__aeabi_ddiv>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80049fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a00:	f7fb fe22 	bl	8000648 <__aeabi_dmul>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	68f9      	ldr	r1, [r7, #12]
 8004a0a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004a14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a18:	f7fb ff40 	bl	800089c <__aeabi_ddiv>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	68f9      	ldr	r1, [r7, #12]
 8004a22:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	609a      	str	r2, [r3, #8]

	}

}
 8004a2c:	bf00      	nop
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bdb0      	pop	{r4, r5, r7, pc}

08004a34 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004a42:	ec43 2b17 	vmov	d7, r2, r3
}
 8004a46:	eeb0 0a47 	vmov.f32	s0, s14
 8004a4a:	eef0 0a67 	vmov.f32	s1, s15
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004a66:	ec43 2b17 	vmov	d7, r2, r3
}
 8004a6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004a6e:	eef0 0a67 	vmov.f32	s1, s15
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004a8a:	ec43 2b17 	vmov	d7, r2, r3
}
 8004a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8004a92:	eef0 0a67 	vmov.f32	s1, s15
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <HAL_MspInit+0x44>)
 8004aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <HAL_MspInit+0x44>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <HAL_MspInit+0x44>)
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_MspInit+0x44>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <HAL_MspInit+0x44>)
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <HAL_MspInit+0x44>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004ad6:	f006 fea3 	bl	800b820 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b09e      	sub	sp, #120	; 0x78
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b00:	f107 0320 	add.w	r3, r7, #32
 8004b04:	2244      	movs	r2, #68	; 0x44
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f012 fa2e 	bl	8016f6a <memset>
  if(hadc->Instance==ADC1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b16:	d171      	bne.n	8004bfc <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004b18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004b1e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004b22:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b24:	f107 0320 	add.w	r3, r7, #32
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f007 fbb7 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004b34:	f7ff fb28 	bl	8004188 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004b38:	4b64      	ldr	r3, [pc, #400]	; (8004ccc <HAL_ADC_MspInit+0x1e4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	4a63      	ldr	r2, [pc, #396]	; (8004ccc <HAL_ADC_MspInit+0x1e4>)
 8004b40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004b42:	4b62      	ldr	r3, [pc, #392]	; (8004ccc <HAL_ADC_MspInit+0x1e4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d10b      	bne.n	8004b62 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004b4a:	4b61      	ldr	r3, [pc, #388]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	4a60      	ldr	r2, [pc, #384]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004b50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b56:	4b5e      	ldr	r3, [pc, #376]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b62:	4b5b      	ldr	r3, [pc, #364]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b66:	4a5a      	ldr	r2, [pc, #360]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b6e:	4b58      	ldr	r3, [pc, #352]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBUS_Pin|THERMOCOUPLE_Pin;
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b86:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b90:	f004 fd72 	bl	8009678 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8004b94:	4b4f      	ldr	r3, [pc, #316]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004b96:	4a50      	ldr	r2, [pc, #320]	; (8004cd8 <HAL_ADC_MspInit+0x1f0>)
 8004b98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004b9a:	4b4e      	ldr	r3, [pc, #312]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004b9c:	2205      	movs	r2, #5
 8004b9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ba0:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ba6:	4b4b      	ldr	r3, [pc, #300]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004bac:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004bb2:	4b48      	ldr	r3, [pc, #288]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004bba:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004bc2:	4b44      	ldr	r3, [pc, #272]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004bc8:	4b42      	ldr	r3, [pc, #264]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004bce:	4841      	ldr	r0, [pc, #260]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004bd0:	f003 fffc 	bl	8008bcc <HAL_DMA_Init>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004bda:	f7ff fad5 	bl	8004188 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a3c      	ldr	r2, [pc, #240]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
 8004be4:	4a3b      	ldr	r2, [pc, #236]	; (8004cd4 <HAL_ADC_MspInit+0x1ec>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004bea:	2200      	movs	r2, #0
 8004bec:	210a      	movs	r1, #10
 8004bee:	2012      	movs	r0, #18
 8004bf0:	f003 fdb1 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004bf4:	2012      	movs	r0, #18
 8004bf6:	f003 fdc8 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004bfa:	e062      	b.n	8004cc2 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a36      	ldr	r2, [pc, #216]	; (8004cdc <HAL_ADC_MspInit+0x1f4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d15d      	bne.n	8004cc2 <HAL_ADC_MspInit+0x1da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004c0c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004c10:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c12:	f107 0320 	add.w	r3, r7, #32
 8004c16:	4618      	mov	r0, r3
 8004c18:	f007 fb40 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8004c22:	f7ff fab1 	bl	8004188 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004c26:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <HAL_ADC_MspInit+0x1e4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	4a27      	ldr	r2, [pc, #156]	; (8004ccc <HAL_ADC_MspInit+0x1e4>)
 8004c2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <HAL_ADC_MspInit+0x1e4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10b      	bne.n	8004c50 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004c38:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3c:	4a24      	ldr	r2, [pc, #144]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004c3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c44:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c50:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c54:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004c56:	f043 0320 	orr.w	r3, r3, #32
 8004c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c5c:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6c:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c74:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <HAL_ADC_MspInit+0x1e8>)
 8004c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_Pin;
 8004c80:	2302      	movs	r3, #2
 8004c82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c84:	2303      	movs	r3, #3
 8004c86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 8004c8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004c90:	4619      	mov	r1, r3
 8004c92:	4813      	ldr	r0, [pc, #76]	; (8004ce0 <HAL_ADC_MspInit+0x1f8>)
 8004c94:	f004 fcf0 	bl	8009678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_LEAK_Pin;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(I_LEAK_GPIO_Port, &GPIO_InitStruct);
 8004ca4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cae:	f004 fce3 	bl	8009678 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	210a      	movs	r1, #10
 8004cb6:	2012      	movs	r0, #18
 8004cb8:	f003 fd4d 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004cbc:	2012      	movs	r0, #18
 8004cbe:	f003 fd64 	bl	800878a <HAL_NVIC_EnableIRQ>
}
 8004cc2:	bf00      	nop
 8004cc4:	3778      	adds	r7, #120	; 0x78
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20002010 	.word	0x20002010
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	20001ae4 	.word	0x20001ae4
 8004cd8:	40020030 	.word	0x40020030
 8004cdc:	50000100 	.word	0x50000100
 8004ce0:	48001400 	.word	0x48001400

08004ce4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_CRC_MspInit+0x38>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10b      	bne.n	8004d0e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <HAL_CRC_MspInit+0x3c>)
 8004cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <HAL_CRC_MspInit+0x3c>)
 8004cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d00:	6493      	str	r3, [r2, #72]	; 0x48
 8004d02:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <HAL_CRC_MspInit+0x3c>)
 8004d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40023000 	.word	0x40023000
 8004d20:	40021000 	.word	0x40021000

08004d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b09c      	sub	sp, #112	; 0x70
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d3c:	f107 0318 	add.w	r3, r7, #24
 8004d40:	2244      	movs	r2, #68	; 0x44
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f012 f910 	bl	8016f6a <memset>
  if(hi2c->Instance==I2C1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2e      	ldr	r2, [pc, #184]	; (8004e08 <HAL_I2C_MspInit+0xe4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d154      	bne.n	8004dfe <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004d54:	2340      	movs	r3, #64	; 0x40
 8004d56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d5c:	f107 0318 	add.w	r3, r7, #24
 8004d60:	4618      	mov	r0, r3
 8004d62:	f007 fa9b 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004d6c:	f7ff fa0c 	bl	8004188 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d70:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <HAL_I2C_MspInit+0xe8>)
 8004d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d74:	4a25      	ldr	r2, [pc, #148]	; (8004e0c <HAL_I2C_MspInit+0xe8>)
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d7c:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <HAL_I2C_MspInit+0xe8>)
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d88:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <HAL_I2C_MspInit+0xe8>)
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HAL_I2C_MspInit+0xe8>)
 8004d8e:	f043 0302 	orr.w	r3, r3, #2
 8004d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_I2C_MspInit+0xe8>)
 8004d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004da6:	2312      	movs	r3, #18
 8004da8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dae:	2300      	movs	r3, #0
 8004db0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004db2:	2304      	movs	r3, #4
 8004db4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dc0:	f004 fc5a 	bl	8009678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dca:	2312      	movs	r3, #18
 8004dcc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004dd6:	2304      	movs	r3, #4
 8004dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004dde:	4619      	mov	r1, r3
 8004de0:	480b      	ldr	r0, [pc, #44]	; (8004e10 <HAL_I2C_MspInit+0xec>)
 8004de2:	f004 fc49 	bl	8009678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_I2C_MspInit+0xe8>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	4a08      	ldr	r2, [pc, #32]	; (8004e0c <HAL_I2C_MspInit+0xe8>)
 8004dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004df0:	6593      	str	r3, [r2, #88]	; 0x58
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_I2C_MspInit+0xe8>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004dfe:	bf00      	nop
 8004e00:	3770      	adds	r7, #112	; 0x70
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40005400 	.word	0x40005400
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	48000400 	.word	0x48000400

08004e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	; 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1c:	f107 0314 	add.w	r3, r7, #20
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2c      	ldr	r2, [pc, #176]	; (8004ee4 <HAL_SPI_MspInit+0xd0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d151      	bne.n	8004eda <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e36:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <HAL_SPI_MspInit+0xd4>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	4a2b      	ldr	r2, [pc, #172]	; (8004ee8 <HAL_SPI_MspInit+0xd4>)
 8004e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e40:	6593      	str	r3, [r2, #88]	; 0x58
 8004e42:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <HAL_SPI_MspInit+0xd4>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e4e:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <HAL_SPI_MspInit+0xd4>)
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	4a25      	ldr	r2, [pc, #148]	; (8004ee8 <HAL_SPI_MspInit+0xd4>)
 8004e54:	f043 0302 	orr.w	r3, r3, #2
 8004e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <HAL_SPI_MspInit+0xd4>)
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004e66:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e74:	2300      	movs	r3, #0
 8004e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e78:	2305      	movs	r3, #5
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e7c:	f107 0314 	add.w	r3, r7, #20
 8004e80:	4619      	mov	r1, r3
 8004e82:	481a      	ldr	r0, [pc, #104]	; (8004eec <HAL_SPI_MspInit+0xd8>)
 8004e84:	f004 fbf8 	bl	8009678 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8004e88:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <HAL_SPI_MspInit+0xe0>)
 8004e8c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004e8e:	4b18      	ldr	r3, [pc, #96]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004e90:	220d      	movs	r2, #13
 8004e92:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e94:	4b16      	ldr	r3, [pc, #88]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004e96:	2210      	movs	r2, #16
 8004e98:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004ea2:	2280      	movs	r2, #128	; 0x80
 8004ea4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004eac:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004ec0:	f003 fe84 	bl	8008bcc <HAL_DMA_Init>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004eca:	f7ff f95d 	bl	8004188 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a07      	ldr	r2, [pc, #28]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
 8004ed4:	4a06      	ldr	r2, [pc, #24]	; (8004ef0 <HAL_SPI_MspInit+0xdc>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004eda:	bf00      	nop
 8004edc:	3728      	adds	r7, #40	; 0x28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40003800 	.word	0x40003800
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	48000400 	.word	0x48000400
 8004ef0:	20001c20 	.word	0x20001c20
 8004ef4:	40020008 	.word	0x40020008

08004ef8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <HAL_TIM_PWM_MspInit+0x98>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d12c      	bne.n	8004f64 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f0a:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <HAL_TIM_PWM_MspInit+0x9c>)
 8004f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0e:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <HAL_TIM_PWM_MspInit+0x9c>)
 8004f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f14:	6613      	str	r3, [r2, #96]	; 0x60
 8004f16:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <HAL_TIM_PWM_MspInit+0x9c>)
 8004f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	2018      	movs	r0, #24
 8004f28:	f003 fc15 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004f2c:	2018      	movs	r0, #24
 8004f2e:	f003 fc2c 	bl	800878a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004f32:	2200      	movs	r2, #0
 8004f34:	2100      	movs	r1, #0
 8004f36:	2019      	movs	r0, #25
 8004f38:	f003 fc0d 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004f3c:	2019      	movs	r0, #25
 8004f3e:	f003 fc24 	bl	800878a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004f42:	2200      	movs	r2, #0
 8004f44:	2100      	movs	r1, #0
 8004f46:	201a      	movs	r0, #26
 8004f48:	f003 fc05 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004f4c:	201a      	movs	r0, #26
 8004f4e:	f003 fc1c 	bl	800878a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004f52:	2200      	movs	r2, #0
 8004f54:	2100      	movs	r1, #0
 8004f56:	201b      	movs	r0, #27
 8004f58:	f003 fbfd 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004f5c:	201b      	movs	r0, #27
 8004f5e:	f003 fc14 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004f62:	e010      	b.n	8004f86 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a0b      	ldr	r2, [pc, #44]	; (8004f98 <HAL_TIM_PWM_MspInit+0xa0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10b      	bne.n	8004f86 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_TIM_PWM_MspInit+0x9c>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <HAL_TIM_PWM_MspInit+0x9c>)
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	6593      	str	r3, [r2, #88]	; 0x58
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_TIM_PWM_MspInit+0x9c>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40000800 	.word	0x40000800

08004f9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d144      	bne.n	8005048 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fbe:	4b24      	ldr	r3, [pc, #144]	; (8005050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	4a23      	ldr	r2, [pc, #140]	; (8005050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fca:	4b21      	ldr	r3, [pc, #132]	; (8005050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd6:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fee:	4b18      	ldr	r3, [pc, #96]	; (8005050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff2:	4a17      	ldr	r2, [pc, #92]	; (8005050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ffa:	4b15      	ldr	r3, [pc, #84]	; (8005050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8005006:	2301      	movs	r3, #1
 8005008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500a:	2302      	movs	r3, #2
 800500c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005012:	2300      	movs	r3, #0
 8005014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005016:	2301      	movs	r3, #1
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 800501a:	f107 0314 	add.w	r3, r7, #20
 800501e:	4619      	mov	r1, r3
 8005020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005024:	f004 fb28 	bl	8009678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8005028:	2308      	movs	r3, #8
 800502a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502c:	2302      	movs	r3, #2
 800502e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005034:	2300      	movs	r3, #0
 8005036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005038:	2301      	movs	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 800503c:	f107 0314 	add.w	r3, r7, #20
 8005040:	4619      	mov	r1, r3
 8005042:	4804      	ldr	r0, [pc, #16]	; (8005054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8005044:	f004 fb18 	bl	8009678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005048:	bf00      	nop
 800504a:	3728      	adds	r7, #40	; 0x28
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	48000400 	.word	0x48000400

08005058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a34      	ldr	r2, [pc, #208]	; (8005138 <HAL_TIM_Base_MspInit+0xe0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d114      	bne.n	8005094 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800506a:	4b34      	ldr	r3, [pc, #208]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506e:	4a33      	ldr	r2, [pc, #204]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 8005070:	f043 0310 	orr.w	r3, r3, #16
 8005074:	6593      	str	r3, [r2, #88]	; 0x58
 8005076:	4b31      	ldr	r3, [pc, #196]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005082:	2200      	movs	r2, #0
 8005084:	2100      	movs	r1, #0
 8005086:	2036      	movs	r0, #54	; 0x36
 8005088:	f003 fb65 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800508c:	2036      	movs	r0, #54	; 0x36
 800508e:	f003 fb7c 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005092:	e04c      	b.n	800512e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a29      	ldr	r2, [pc, #164]	; (8005140 <HAL_TIM_Base_MspInit+0xe8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d114      	bne.n	80050c8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800509e:	4b27      	ldr	r3, [pc, #156]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 80050a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a2:	4a26      	ldr	r2, [pc, #152]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 80050a4:	f043 0320 	orr.w	r3, r3, #32
 80050a8:	6593      	str	r3, [r2, #88]	; 0x58
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80050b6:	2200      	movs	r2, #0
 80050b8:	2100      	movs	r1, #0
 80050ba:	2037      	movs	r0, #55	; 0x37
 80050bc:	f003 fb4b 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80050c0:	2037      	movs	r0, #55	; 0x37
 80050c2:	f003 fb62 	bl	800878a <HAL_NVIC_EnableIRQ>
}
 80050c6:	e032      	b.n	800512e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <HAL_TIM_Base_MspInit+0xec>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d114      	bne.n	80050fc <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80050d2:	4b1a      	ldr	r3, [pc, #104]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 80050d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d6:	4a19      	ldr	r2, [pc, #100]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 80050d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050dc:	6613      	str	r3, [r2, #96]	; 0x60
 80050de:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 80050e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80050ea:	2200      	movs	r2, #0
 80050ec:	2100      	movs	r1, #0
 80050ee:	2019      	movs	r0, #25
 80050f0:	f003 fb31 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80050f4:	2019      	movs	r0, #25
 80050f6:	f003 fb48 	bl	800878a <HAL_NVIC_EnableIRQ>
}
 80050fa:	e018      	b.n	800512e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a11      	ldr	r2, [pc, #68]	; (8005148 <HAL_TIM_Base_MspInit+0xf0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d113      	bne.n	800512e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 8005108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 800510c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005110:	6613      	str	r3, [r2, #96]	; 0x60
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <HAL_TIM_Base_MspInit+0xe4>)
 8005114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800511e:	2200      	movs	r2, #0
 8005120:	2100      	movs	r1, #0
 8005122:	201a      	movs	r0, #26
 8005124:	f003 fb17 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005128:	201a      	movs	r0, #26
 800512a:	f003 fb2e 	bl	800878a <HAL_NVIC_EnableIRQ>
}
 800512e:	bf00      	nop
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40001000 	.word	0x40001000
 800513c:	40021000 	.word	0x40021000
 8005140:	40001400 	.word	0x40001400
 8005144:	40014400 	.word	0x40014400
 8005148:	40014800 	.word	0x40014800

0800514c <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <HAL_TIM_OnePulse_MspInit+0x38>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d10b      	bne.n	8005176 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	4a09      	ldr	r2, [pc, #36]	; (8005188 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005164:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005168:	6613      	str	r3, [r2, #96]	; 0x60
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800516c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40013400 	.word	0x40013400
 8005188:	40021000 	.word	0x40021000

0800518c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005194:	f107 0314 	add.w	r3, r7, #20
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	60da      	str	r2, [r3, #12]
 80051a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a22      	ldr	r2, [pc, #136]	; (8005234 <HAL_TIM_MspPostInit+0xa8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d11c      	bne.n	80051e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80051ae:	4b22      	ldr	r3, [pc, #136]	; (8005238 <HAL_TIM_MspPostInit+0xac>)
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b2:	4a21      	ldr	r2, [pc, #132]	; (8005238 <HAL_TIM_MspPostInit+0xac>)
 80051b4:	f043 0320 	orr.w	r3, r3, #32
 80051b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051ba:	4b1f      	ldr	r3, [pc, #124]	; (8005238 <HAL_TIM_MspPostInit+0xac>)
 80051bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 80051c6:	2301      	movs	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ca:	2302      	movs	r3, #2
 80051cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d2:	2300      	movs	r3, #0
 80051d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80051d6:	2306      	movs	r3, #6
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80051da:	f107 0314 	add.w	r3, r7, #20
 80051de:	4619      	mov	r1, r3
 80051e0:	4816      	ldr	r0, [pc, #88]	; (800523c <HAL_TIM_MspPostInit+0xb0>)
 80051e2:	f004 fa49 	bl	8009678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80051e6:	e020      	b.n	800522a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <HAL_TIM_MspPostInit+0xb4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d11b      	bne.n	800522a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051f2:	4b11      	ldr	r3, [pc, #68]	; (8005238 <HAL_TIM_MspPostInit+0xac>)
 80051f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <HAL_TIM_MspPostInit+0xac>)
 80051f8:	f043 0302 	orr.w	r3, r3, #2
 80051fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051fe:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <HAL_TIM_MspPostInit+0xac>)
 8005200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520e:	2302      	movs	r3, #2
 8005210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005216:	2300      	movs	r3, #0
 8005218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800521a:	2302      	movs	r3, #2
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800521e:	f107 0314 	add.w	r3, r7, #20
 8005222:	4619      	mov	r1, r3
 8005224:	4807      	ldr	r0, [pc, #28]	; (8005244 <HAL_TIM_MspPostInit+0xb8>)
 8005226:	f004 fa27 	bl	8009678 <HAL_GPIO_Init>
}
 800522a:	bf00      	nop
 800522c:	3728      	adds	r7, #40	; 0x28
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40021000 	.word	0x40021000
 800523c:	48001400 	.word	0x48001400
 8005240:	40000800 	.word	0x40000800
 8005244:	48000400 	.word	0x48000400

08005248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b09a      	sub	sp, #104	; 0x68
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005250:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	609a      	str	r2, [r3, #8]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005260:	f107 0310 	add.w	r3, r7, #16
 8005264:	2244      	movs	r2, #68	; 0x44
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f011 fe7e 	bl	8016f6a <memset>
  if(huart->Instance==USART1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <HAL_UART_MspInit+0xa8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d137      	bne.n	80052e8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005278:	2301      	movs	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005280:	f107 0310 	add.w	r3, r7, #16
 8005284:	4618      	mov	r0, r3
 8005286:	f007 f809 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005290:	f7fe ff7a 	bl	8004188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005294:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <HAL_UART_MspInit+0xac>)
 8005296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005298:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <HAL_UART_MspInit+0xac>)
 800529a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800529e:	6613      	str	r3, [r2, #96]	; 0x60
 80052a0:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <HAL_UART_MspInit+0xac>)
 80052a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_UART_MspInit+0xac>)
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <HAL_UART_MspInit+0xac>)
 80052b2:	f043 0301 	orr.w	r3, r3, #1
 80052b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <HAL_UART_MspInit+0xac>)
 80052ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80052c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ca:	2302      	movs	r3, #2
 80052cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d2:	2300      	movs	r3, #0
 80052d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052d6:	2307      	movs	r3, #7
 80052d8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052de:	4619      	mov	r1, r3
 80052e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052e4:	f004 f9c8 	bl	8009678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80052e8:	bf00      	nop
 80052ea:	3768      	adds	r7, #104	; 0x68
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40013800 	.word	0x40013800
 80052f4:	40021000 	.word	0x40021000

080052f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052fc:	e7fe      	b.n	80052fc <NMI_Handler+0x4>

080052fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005302:	e7fe      	b.n	8005302 <HardFault_Handler+0x4>

08005304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005308:	e7fe      	b.n	8005308 <MemManage_Handler+0x4>

0800530a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800530e:	e7fe      	b.n	800530e <BusFault_Handler+0x4>

08005310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005314:	e7fe      	b.n	8005314 <UsageFault_Handler+0x4>

08005316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800531a:	bf00      	nop
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005344:	f000 fdc6 	bl	8005ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005348:	bf00      	nop
 800534a:	bd80      	pop	{r7, pc}

0800534c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005350:	4802      	ldr	r0, [pc, #8]	; (800535c <DMA1_Channel1_IRQHandler+0x10>)
 8005352:	f003 fdb7 	bl	8008ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005356:	bf00      	nop
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20001c20 	.word	0x20001c20

08005360 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005364:	4802      	ldr	r0, [pc, #8]	; (8005370 <DMA1_Channel3_IRQHandler+0x10>)
 8005366:	f003 fdad 	bl	8008ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20001ae4 	.word	0x20001ae4

08005374 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005378:	4803      	ldr	r0, [pc, #12]	; (8005388 <ADC1_2_IRQHandler+0x14>)
 800537a:	f001 fd27 	bl	8006dcc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800537e:	4803      	ldr	r0, [pc, #12]	; (800538c <ADC1_2_IRQHandler+0x18>)
 8005380:	f001 fd24 	bl	8006dcc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005384:	bf00      	nop
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20001a0c 	.word	0x20001a0c
 800538c:	20001a78 	.word	0x20001a78

08005390 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005394:	4802      	ldr	r0, [pc, #8]	; (80053a0 <USB_LP_IRQHandler+0x10>)
 8005396:	f004 fd5b 	bl	8009e50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20002d80 	.word	0x20002d80

080053a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 80053a8:	2020      	movs	r0, #32
 80053aa:	f004 fb17 	bl	80099dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 80053ae:	2080      	movs	r0, #128	; 0x80
 80053b0:	f004 fb14 	bl	80099dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 80053b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053b8:	f004 fb10 	bl	80099dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80053bc:	bf00      	nop
 80053be:	bd80      	pop	{r7, pc}

080053c0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80053c4:	4802      	ldr	r0, [pc, #8]	; (80053d0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80053c6:	f008 fb89 	bl	800dadc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80053ca:	bf00      	nop
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20001c80 	.word	0x20001c80

080053d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80053d8:	4803      	ldr	r0, [pc, #12]	; (80053e8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80053da:	f008 fb7f 	bl	800dadc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80053de:	4803      	ldr	r0, [pc, #12]	; (80053ec <TIM1_UP_TIM16_IRQHandler+0x18>)
 80053e0:	f008 fb7c 	bl	800dadc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80053e4:	bf00      	nop
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20001c80 	.word	0x20001c80
 80053ec:	20001e48 	.word	0x20001e48

080053f0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80053f4:	4803      	ldr	r0, [pc, #12]	; (8005404 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80053f6:	f008 fb71 	bl	800dadc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80053fa:	4803      	ldr	r0, [pc, #12]	; (8005408 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80053fc:	f008 fb6e 	bl	800dadc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005400:	bf00      	nop
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20001c80 	.word	0x20001c80
 8005408:	20001e94 	.word	0x20001e94

0800540c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005410:	4802      	ldr	r0, [pc, #8]	; (800541c <TIM1_CC_IRQHandler+0x10>)
 8005412:	f008 fb63 	bl	800dadc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005416:	bf00      	nop
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20001c80 	.word	0x20001c80

08005420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005424:	4802      	ldr	r0, [pc, #8]	; (8005430 <TIM6_DAC_IRQHandler+0x10>)
 8005426:	f008 fb59 	bl	800dadc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20001d64 	.word	0x20001d64

08005434 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005438:	4802      	ldr	r0, [pc, #8]	; (8005444 <TIM7_IRQHandler+0x10>)
 800543a:	f008 fb4f 	bl	800dadc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800543e:	bf00      	nop
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20001db0 	.word	0x20001db0

08005448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  return 1;
 800544c:	2301      	movs	r3, #1
}
 800544e:	4618      	mov	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <_kill>:

int _kill(int pid, int sig)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005462:	f011 fdd5 	bl	8017010 <__errno>
 8005466:	4603      	mov	r3, r0
 8005468:	2216      	movs	r2, #22
 800546a:	601a      	str	r2, [r3, #0]
  return -1;
 800546c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <_exit>:

void _exit (int status)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005480:	f04f 31ff 	mov.w	r1, #4294967295
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff ffe7 	bl	8005458 <_kill>
  while (1) {}    /* Make sure we hang here */
 800548a:	e7fe      	b.n	800548a <_exit+0x12>

0800548c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e00a      	b.n	80054b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800549e:	f3af 8000 	nop.w
 80054a2:	4601      	mov	r1, r0
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	60ba      	str	r2, [r7, #8]
 80054aa:	b2ca      	uxtb	r2, r1
 80054ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	3301      	adds	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	dbf0      	blt.n	800549e <_read+0x12>
  }

  return len;
 80054bc:	687b      	ldr	r3, [r7, #4]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b086      	sub	sp, #24
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e009      	b.n	80054ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	60ba      	str	r2, [r7, #8]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	3301      	adds	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	dbf1      	blt.n	80054d8 <_write+0x12>
  }
  return len;
 80054f4:	687b      	ldr	r3, [r7, #4]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <_close>:

int _close(int file)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005526:	605a      	str	r2, [r3, #4]
  return 0;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <_isatty>:

int _isatty(int file)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800553e:	2301      	movs	r3, #1
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <_sbrk+0x5c>)
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <_sbrk+0x60>)
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800557c:	4b13      	ldr	r3, [pc, #76]	; (80055cc <_sbrk+0x64>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <_sbrk+0x64>)
 8005586:	4a12      	ldr	r2, [pc, #72]	; (80055d0 <_sbrk+0x68>)
 8005588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <_sbrk+0x64>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	429a      	cmp	r2, r3
 8005596:	d207      	bcs.n	80055a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005598:	f011 fd3a 	bl	8017010 <__errno>
 800559c:	4603      	mov	r3, r0
 800559e:	220c      	movs	r2, #12
 80055a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055a2:	f04f 33ff 	mov.w	r3, #4294967295
 80055a6:	e009      	b.n	80055bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <_sbrk+0x64>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <_sbrk+0x64>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	4a05      	ldr	r2, [pc, #20]	; (80055cc <_sbrk+0x64>)
 80055b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055ba:	68fb      	ldr	r3, [r7, #12]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20008000 	.word	0x20008000
 80055c8:	00000400 	.word	0x00000400
 80055cc:	20002014 	.word	0x20002014
 80055d0:	200033c8 	.word	0x200033c8

080055d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <SystemInit+0x20>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <SystemInit+0x20>)
 80055e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055e8:	bf00      	nop
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	e000ed00 	.word	0xe000ed00

080055f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055f8:	480d      	ldr	r0, [pc, #52]	; (8005630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80055fc:	f7ff ffea 	bl	80055d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
                                   ldr r0, =_sdata
 8005600:	480c      	ldr	r0, [pc, #48]	; (8005634 <LoopForever+0x6>)
  ldr r1, =_edata
 8005602:	490d      	ldr	r1, [pc, #52]	; (8005638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005604:	4a0d      	ldr	r2, [pc, #52]	; (800563c <LoopForever+0xe>)
  movs r3, #0
 8005606:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005608:	e002      	b.n	8005610 <LoopCopyDataInit>

0800560a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800560a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800560c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800560e:	3304      	adds	r3, #4

08005610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005614:	d3f9      	bcc.n	800560a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005616:	4a0a      	ldr	r2, [pc, #40]	; (8005640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005618:	4c0a      	ldr	r4, [pc, #40]	; (8005644 <LoopForever+0x16>)
  movs r3, #0
 800561a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800561c:	e001      	b.n	8005622 <LoopFillZerobss>

0800561e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800561e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005620:	3204      	adds	r2, #4

08005622 <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 8005622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005624:	d3fb      	bcc.n	800561e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005626:	f011 fcf9 	bl	801701c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800562a:	f7fd fda1 	bl	8003170 <main>

0800562e <LoopForever>:

LoopForever:
    b LoopForever
 800562e:	e7fe      	b.n	800562e <LoopForever>
  ldr   r0, =_estack
 8005630:	20008000 	.word	0x20008000
                                   ldr r0, =_sdata
 8005634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005638:	20000540 	.word	0x20000540
  ldr r2, =_sidata
 800563c:	0801d8a8 	.word	0x0801d8a8
  ldr r2, =_sbss
 8005640:	20000540 	.word	0x20000540
  ldr r4, =_ebss
 8005644:	200033c8 	.word	0x200033c8

08005648 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005648:	e7fe      	b.n	8005648 <COMP1_2_3_IRQHandler>
	...

0800564c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8005656:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <setSPI_Size+0x54>)
 8005658:	f993 3000 	ldrsb.w	r3, [r3]
 800565c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005660:	429a      	cmp	r2, r3
 8005662:	d017      	beq.n	8005694 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <setSPI_Size+0x58>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <setSPI_Size+0x58>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005672:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8005674:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <setSPI_Size+0x54>)
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800567a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d104      	bne.n	800568c <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <setSPI_Size+0x58>)
 8005684:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005688:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 800568a:	e003      	b.n	8005694 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <setSPI_Size+0x58>)
 800568e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005692:	60da      	str	r2, [r3, #12]
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	200001c8 	.word	0x200001c8
 80056a4:	20001bbc 	.word	0x20001bbc

080056a8 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	460a      	mov	r2, r1
 80056b2:	71fb      	strb	r3, [r7, #7]
 80056b4:	4613      	mov	r3, r2
 80056b6:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 80056b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff ffc5 	bl	800564c <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 80056c2:	4b3c      	ldr	r3, [pc, #240]	; (80057b4 <setDMAMemMode+0x10c>)
 80056c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80056c8:	461a      	mov	r2, r3
 80056ca:	79bb      	ldrb	r3, [r7, #6]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d106      	bne.n	80056de <setDMAMemMode+0x36>
 80056d0:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <setDMAMemMode+0x10c>)
 80056d2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80056d6:	461a      	mov	r2, r3
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d066      	beq.n	80057ac <setDMAMemMode+0x104>
    config.dma_sz =size;
 80056de:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80056e2:	4b34      	ldr	r3, [pc, #208]	; (80057b4 <setDMAMemMode+0x10c>)
 80056e4:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80056e6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80056ea:	4b32      	ldr	r3, [pc, #200]	; (80057b4 <setDMAMemMode+0x10c>)
 80056ec:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 80056ee:	4b32      	ldr	r3, [pc, #200]	; (80057b8 <setDMAMemMode+0x110>)
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <setDMAMemMode+0x110>)
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8005702:	bf00      	nop
 8005704:	4b2c      	ldr	r3, [pc, #176]	; (80057b8 <setDMAMemMode+0x110>)
 8005706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f7      	bne.n	8005704 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d10e      	bne.n	8005738 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800571a:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <setDMAMemMode+0x110>)
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8005722:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <setDMAMemMode+0x110>)
 8005724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <setDMAMemMode+0x110>)
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	e00d      	b.n	8005754 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8005738:	4b1f      	ldr	r3, [pc, #124]	; (80057b8 <setDMAMemMode+0x110>)
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	2200      	movs	r2, #0
 800573e:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8005740:	4b1d      	ldr	r3, [pc, #116]	; (80057b8 <setDMAMemMode+0x110>)
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <setDMAMemMode+0x110>)
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005752:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 8005754:	79bb      	ldrb	r3, [r7, #6]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d116      	bne.n	8005788 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800575a:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <setDMAMemMode+0x110>)
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005762:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005764:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <setDMAMemMode+0x110>)
 8005766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800576c:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <setDMAMemMode+0x110>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800577a:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <setDMAMemMode+0x110>)
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8005784:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8005786:	e011      	b.n	80057ac <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <setDMAMemMode+0x110>)
 800578a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578c:	2200      	movs	r2, #0
 800578e:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <setDMAMemMode+0x110>)
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	2200      	movs	r2, #0
 8005796:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8005798:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <setDMAMemMode+0x110>)
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <setDMAMemMode+0x110>)
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80057aa:	601a      	str	r2, [r3, #0]
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	200001c8 	.word	0x200001c8
 80057b8:	20001bbc 	.word	0x20001bbc

080057bc <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 80057c8:	2000      	movs	r0, #0
 80057ca:	f7ff ff3f 	bl	800564c <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 80057ce:	2200      	movs	r2, #0
 80057d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057d4:	4815      	ldr	r0, [pc, #84]	; (800582c <LCD_WriteCommand+0x70>)
 80057d6:	f004 f8e9 	bl	80099ac <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80057da:	2200      	movs	r2, #0
 80057dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057e0:	4812      	ldr	r0, [pc, #72]	; (800582c <LCD_WriteCommand+0x70>)
 80057e2:	f004 f8e3 	bl	80099ac <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ea:	2201      	movs	r2, #1
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4810      	ldr	r0, [pc, #64]	; (8005830 <LCD_WriteCommand+0x74>)
 80057f0:	f006 ffef 	bl	800c7d2 <HAL_SPI_Transmit>
  if(argc){
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00e      	beq.n	8005818 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80057fa:	2201      	movs	r2, #1
 80057fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005800:	480a      	ldr	r0, [pc, #40]	; (800582c <LCD_WriteCommand+0x70>)
 8005802:	f004 f8d3 	bl	80099ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	1c59      	adds	r1, r3, #1
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	b29a      	uxth	r2, r3
 800580e:	f04f 33ff 	mov.w	r3, #4294967295
 8005812:	4807      	ldr	r0, [pc, #28]	; (8005830 <LCD_WriteCommand+0x74>)
 8005814:	f006 ffdd 	bl	800c7d2 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005818:	2201      	movs	r2, #1
 800581a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800581e:	4803      	ldr	r0, [pc, #12]	; (800582c <LCD_WriteCommand+0x70>)
 8005820:	f004 f8c4 	bl	80099ac <HAL_GPIO_WritePin>
#endif
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	48000400 	.word	0x48000400
 8005830:	20001bbc 	.word	0x20001bbc

08005834 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800583e:	2201      	movs	r2, #1
 8005840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005844:	4830      	ldr	r0, [pc, #192]	; (8005908 <LCD_WriteData+0xd4>)
 8005846:	f004 f8b1 	bl	80099ac <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800584a:	2200      	movs	r2, #0
 800584c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005850:	482d      	ldr	r0, [pc, #180]	; (8005908 <LCD_WriteData+0xd4>)
 8005852:	f004 f8ab 	bl	80099ac <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8005856:	e049      	b.n	80058ec <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585e:	4293      	cmp	r3, r2
 8005860:	bf28      	it	cs
 8005862:	4613      	movcs	r3, r2
 8005864:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b20      	cmp	r3, #32
 800586a:	d924      	bls.n	80058b6 <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800586c:	89fb      	ldrh	r3, [r7, #14]
 800586e:	461a      	mov	r2, r3
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	4826      	ldr	r0, [pc, #152]	; (800590c <LCD_WriteData+0xd8>)
 8005874:	f007 f922 	bl	800cabc <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8005878:	bf00      	nop
 800587a:	4b24      	ldr	r3, [pc, #144]	; (800590c <LCD_WriteData+0xd8>)
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	4618      	mov	r0, r3
 8005880:	f003 fbcf 	bl	8009022 <HAL_DMA_GetState>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d1f7      	bne.n	800587a <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 800588a:	4b21      	ldr	r3, [pc, #132]	; (8005910 <LCD_WriteData+0xdc>)
 800588c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d127      	bne.n	80058e4 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8005894:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <LCD_WriteData+0xdc>)
 8005896:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d104      	bne.n	80058a8 <LCD_WriteData+0x74>
          buff += chunk_size;
 800589e:	89fb      	ldrh	r3, [r7, #14]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	e01d      	b.n	80058e4 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 80058a8:	89fb      	ldrh	r3, [r7, #14]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	461a      	mov	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	e016      	b.n	80058e4 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80058b6:	89fa      	ldrh	r2, [r7, #14]
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4813      	ldr	r0, [pc, #76]	; (800590c <LCD_WriteData+0xd8>)
 80058c0:	f006 ff87 	bl	800c7d2 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 80058c4:	4b12      	ldr	r3, [pc, #72]	; (8005910 <LCD_WriteData+0xdc>)
 80058c6:	f993 3000 	ldrsb.w	r3, [r3]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d104      	bne.n	80058d8 <LCD_WriteData+0xa4>
        buff += chunk_size;
 80058ce:	89fb      	ldrh	r3, [r7, #14]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	4413      	add	r3, r2
 80058d4:	607b      	str	r3, [r7, #4]
 80058d6:	e005      	b.n	80058e4 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 80058d8:	89fb      	ldrh	r3, [r7, #14]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	461a      	mov	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80058e4:	89fb      	ldrh	r3, [r7, #14]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1b2      	bne.n	8005858 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80058f2:	2201      	movs	r2, #1
 80058f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058f8:	4803      	ldr	r0, [pc, #12]	; (8005908 <LCD_WriteData+0xd4>)
 80058fa:	f004 f857 	bl	80099ac <HAL_GPIO_WritePin>
#endif
}
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	48000400 	.word	0x48000400
 800590c:	20001bbc 	.word	0x20001bbc
 8005910:	200001c8 	.word	0x200001c8

08005914 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b08b      	sub	sp, #44	; 0x2c
 8005918:	af00      	add	r7, sp, #0
 800591a:	4604      	mov	r4, r0
 800591c:	4608      	mov	r0, r1
 800591e:	4611      	mov	r1, r2
 8005920:	461a      	mov	r2, r3
 8005922:	4623      	mov	r3, r4
 8005924:	80fb      	strh	r3, [r7, #6]
 8005926:	4603      	mov	r3, r0
 8005928:	80bb      	strh	r3, [r7, #4]
 800592a:	460b      	mov	r3, r1
 800592c:	807b      	strh	r3, [r7, #2]
 800592e:	4613      	mov	r3, r2
 8005930:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005936:	887b      	ldrh	r3, [r7, #2]
 8005938:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800593a:	88bb      	ldrh	r3, [r7, #4]
 800593c:	847b      	strh	r3, [r7, #34]	; 0x22
 800593e:	883b      	ldrh	r3, [r7, #0]
 8005940:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8005942:	232a      	movs	r3, #42	; 0x2a
 8005944:	763b      	strb	r3, [r7, #24]
 8005946:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800594a:	121b      	asrs	r3, r3, #8
 800594c:	b21b      	sxth	r3, r3
 800594e:	b2db      	uxtb	r3, r3
 8005950:	767b      	strb	r3, [r7, #25]
 8005952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005954:	b2db      	uxtb	r3, r3
 8005956:	76bb      	strb	r3, [r7, #26]
 8005958:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800595c:	121b      	asrs	r3, r3, #8
 800595e:	b21b      	sxth	r3, r3
 8005960:	b2db      	uxtb	r3, r3
 8005962:	76fb      	strb	r3, [r7, #27]
 8005964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005966:	b2db      	uxtb	r3, r3
 8005968:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800596a:	f107 0318 	add.w	r3, r7, #24
 800596e:	2104      	movs	r1, #4
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff ff23 	bl	80057bc <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8005976:	232b      	movs	r3, #43	; 0x2b
 8005978:	743b      	strb	r3, [r7, #16]
 800597a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800597e:	121b      	asrs	r3, r3, #8
 8005980:	b21b      	sxth	r3, r3
 8005982:	b2db      	uxtb	r3, r3
 8005984:	747b      	strb	r3, [r7, #17]
 8005986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005988:	b2db      	uxtb	r3, r3
 800598a:	74bb      	strb	r3, [r7, #18]
 800598c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005990:	121b      	asrs	r3, r3, #8
 8005992:	b21b      	sxth	r3, r3
 8005994:	b2db      	uxtb	r3, r3
 8005996:	74fb      	strb	r3, [r7, #19]
 8005998:	8c3b      	ldrh	r3, [r7, #32]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800599e:	f107 0310 	add.w	r3, r7, #16
 80059a2:	2104      	movs	r1, #4
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff ff09 	bl	80057bc <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80059aa:	232c      	movs	r3, #44	; 0x2c
 80059ac:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80059ae:	f107 030c 	add.w	r3, r7, #12
 80059b2:	2100      	movs	r1, #0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff ff01 	bl	80057bc <LCD_WriteCommand>
  }
}
 80059ba:	bf00      	nop
 80059bc:	372c      	adds	r7, #44	; 0x2c
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd90      	pop	{r4, r7, pc}
	...

080059c4 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	80fb      	strh	r3, [r7, #6]
 80059ce:	460b      	mov	r3, r1
 80059d0:	80bb      	strh	r3, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80059d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	db39      	blt.n	8005a52 <LCD_DrawPixel+0x8e>
 80059de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059e2:	2bef      	cmp	r3, #239	; 0xef
 80059e4:	dc35      	bgt.n	8005a52 <LCD_DrawPixel+0x8e>
 80059e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	db31      	blt.n	8005a52 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80059ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80059f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80059f6:	da2c      	bge.n	8005a52 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80059f8:	887b      	ldrh	r3, [r7, #2]
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	733b      	strb	r3, [r7, #12]
 8005a02:	887b      	ldrh	r3, [r7, #2]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8005a08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a10:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005a14:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005a18:	f7ff ff7c 	bl	8005914 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a22:	480e      	ldr	r0, [pc, #56]	; (8005a5c <LCD_DrawPixel+0x98>)
 8005a24:	f003 ffc2 	bl	80099ac <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a2e:	480b      	ldr	r0, [pc, #44]	; (8005a5c <LCD_DrawPixel+0x98>)
 8005a30:	f003 ffbc 	bl	80099ac <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8005a34:	f107 010c 	add.w	r1, r7, #12
 8005a38:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	4808      	ldr	r0, [pc, #32]	; (8005a60 <LCD_DrawPixel+0x9c>)
 8005a40:	f006 fec7 	bl	800c7d2 <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005a44:	2201      	movs	r2, #1
 8005a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a4a:	4804      	ldr	r0, [pc, #16]	; (8005a5c <LCD_DrawPixel+0x98>)
 8005a4c:	f003 ffae 	bl	80099ac <HAL_GPIO_WritePin>
 8005a50:	e000      	b.n	8005a54 <LCD_DrawPixel+0x90>
    return;
 8005a52:	bf00      	nop
#endif
}
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	48000400 	.word	0x48000400
 8005a60:	20001bbc 	.word	0x20001bbc

08005a64 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b094      	sub	sp, #80	; 0x50
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d905      	bls.n	8005a82 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8005a76:	1cbb      	adds	r3, r7, #2
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff feda 	bl	8005834 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8005a80:	e026      	b.n	8005ad0 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8005a82:	2300      	movs	r3, #0
 8005a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a86:	e009      	b.n	8005a9c <LCD_FillPixels+0x38>
      fill[t]=color;
 8005a88:	887a      	ldrh	r2, [r7, #2]
 8005a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	3350      	adds	r3, #80	; 0x50
 8005a90:	443b      	add	r3, r7
 8005a92:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8005a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a98:	3301      	adds	r3, #1
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	bf28      	it	cs
 8005aa2:	2320      	movcs	r3, #32
 8005aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3ee      	bcc.n	8005a88 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 8005aaa:	e00e      	b.n	8005aca <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	bf28      	it	cs
 8005ab2:	2320      	movcs	r3, #32
 8005ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8005ab6:	f107 0308 	add.w	r3, r7, #8
 8005aba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff feb9 	bl	8005834 <LCD_WriteData>
      pixels-=sz;
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1ed      	bne.n	8005aac <LCD_FillPixels+0x48>
}
 8005ad0:	bf00      	nop
 8005ad2:	3750      	adds	r7, #80	; 0x50
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	80fb      	strh	r3, [r7, #6]
 8005aea:	4603      	mov	r3, r0
 8005aec:	80bb      	strh	r3, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	807b      	strh	r3, [r7, #2]
 8005af2:	4613      	mov	r3, r2
 8005af4:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8005af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afe:	d105      	bne.n	8005b0c <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8005b00:	2100      	movs	r1, #0
 8005b02:	2001      	movs	r0, #1
 8005b04:	f7ff fdd0 	bl	80056a8 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e014      	b.n	8005b36 <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8005b0c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005b10:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b14:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b18:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b1c:	f7ff fefa 	bl	8005914 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005b20:	2101      	movs	r1, #1
 8005b22:	2000      	movs	r0, #0
 8005b24:	f7ff fdc0 	bl	80056a8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b2e:	4804      	ldr	r0, [pc, #16]	; (8005b40 <LCD_FillArea+0x68>)
 8005b30:	f003 ff3c 	bl	80099ac <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8005b34:	4b03      	ldr	r3, [pc, #12]	; (8005b44 <LCD_FillArea+0x6c>)
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd90      	pop	{r4, r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	48000400 	.word	0x48000400
 8005b44:	08005a65 	.word	0x08005a65

08005b48 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8005b48:	b590      	push	{r4, r7, lr}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	4611      	mov	r1, r2
 8005b54:	461a      	mov	r2, r3
 8005b56:	4623      	mov	r3, r4
 8005b58:	80fb      	strh	r3, [r7, #6]
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	80bb      	strh	r3, [r7, #4]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	807b      	strh	r3, [r7, #2]
 8005b62:	4613      	mov	r3, r2
 8005b64:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8005b66:	887a      	ldrh	r2, [r7, #2]
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4619      	mov	r1, r3
 8005b70:	883a      	ldrh	r2, [r7, #0]
 8005b72:	88bb      	ldrh	r3, [r7, #4]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	3301      	adds	r3, #1
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8005b7e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b82:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b86:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005b8e:	f7ff fec1 	bl	8005914 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005b92:	2101      	movs	r1, #1
 8005b94:	2000      	movs	r0, #0
 8005b96:	f7ff fd87 	bl	80056a8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8005b9a:	8c3b      	ldrh	r3, [r7, #32]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f7ff ff60 	bl	8005a64 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	f7ff fd7e 	bl	80056a8 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd90      	pop	{r4, r7, pc}

08005bb6 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8005bb6:	b590      	push	{r4, r7, lr}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	603a      	str	r2, [r7, #0]
 8005bc0:	80fb      	strh	r3, [r7, #6]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	889b      	ldrh	r3, [r3, #4]
 8005bca:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	88db      	ldrh	r3, [r3, #6]
 8005bd0:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	2bef      	cmp	r3, #239	; 0xef
 8005bd6:	d839      	bhi.n	8005c4c <LCD_DrawImage+0x96>
 8005bd8:	88bb      	ldrh	r3, [r7, #4]
 8005bda:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005bde:	d235      	bcs.n	8005c4c <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	89fb      	ldrh	r3, [r7, #14]
 8005be4:	4413      	add	r3, r2
 8005be6:	2bf0      	cmp	r3, #240	; 0xf0
 8005be8:	dc32      	bgt.n	8005c50 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8005bea:	88ba      	ldrh	r2, [r7, #4]
 8005bec:	89bb      	ldrh	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005bf4:	dc2e      	bgt.n	8005c54 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	7a1b      	ldrb	r3, [r3, #8]
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d12c      	bne.n	8005c58 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8005bfe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005c02:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	89fb      	ldrh	r3, [r7, #14]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	b21c      	sxth	r4, r3
 8005c14:	88ba      	ldrh	r2, [r7, #4]
 8005c16:	89bb      	ldrh	r3, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	b21b      	sxth	r3, r3
 8005c22:	4622      	mov	r2, r4
 8005c24:	f7ff fe76 	bl	8005914 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005c28:	2101      	movs	r1, #1
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	f7ff fd3c 	bl	80056a8 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	89fb      	ldrh	r3, [r7, #14]
 8005c36:	89ba      	ldrh	r2, [r7, #12]
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	f7ff fdf9 	bl	8005834 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005c42:	2100      	movs	r1, #0
 8005c44:	2001      	movs	r0, #1
 8005c46:	f7ff fd2f 	bl	80056a8 <setDMAMemMode>
 8005c4a:	e006      	b.n	8005c5a <LCD_DrawImage+0xa4>
    return;
 8005c4c:	bf00      	nop
 8005c4e:	e004      	b.n	8005c5a <LCD_DrawImage+0xa4>
    return;
 8005c50:	bf00      	nop
 8005c52:	e002      	b.n	8005c5a <LCD_DrawImage+0xa4>
    return;
 8005c54:	bf00      	nop
 8005c56:	e000      	b.n	8005c5a <LCD_DrawImage+0xa4>
    return;
 8005c58:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd90      	pop	{r4, r7, pc}

08005c60 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8005c60:	b590      	push	{r4, r7, lr}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	4604      	mov	r4, r0
 8005c68:	4608      	mov	r0, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4623      	mov	r3, r4
 8005c70:	80fb      	strh	r3, [r7, #6]
 8005c72:	4603      	mov	r3, r0
 8005c74:	80bb      	strh	r3, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	807b      	strh	r3, [r7, #2]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8005c7e:	88fa      	ldrh	r2, [r7, #6]
 8005c80:	887b      	ldrh	r3, [r7, #2]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d10a      	bne.n	8005c9c <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8005c86:	88ba      	ldrh	r2, [r7, #4]
 8005c88:	883b      	ldrh	r3, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d918      	bls.n	8005cc0 <LCD_DrawLine+0x60>
 8005c8e:	88bb      	ldrh	r3, [r7, #4]
 8005c90:	81bb      	strh	r3, [r7, #12]
 8005c92:	883b      	ldrh	r3, [r7, #0]
 8005c94:	80bb      	strh	r3, [r7, #4]
 8005c96:	89bb      	ldrh	r3, [r7, #12]
 8005c98:	803b      	strh	r3, [r7, #0]
 8005c9a:	e011      	b.n	8005cc0 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8005c9c:	88ba      	ldrh	r2, [r7, #4]
 8005c9e:	883b      	ldrh	r3, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d10a      	bne.n	8005cba <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	887b      	ldrh	r3, [r7, #2]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d909      	bls.n	8005cc0 <LCD_DrawLine+0x60>
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	81fb      	strh	r3, [r7, #14]
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	80fb      	strh	r3, [r7, #6]
 8005cb4:	89fb      	ldrh	r3, [r7, #14]
 8005cb6:	807b      	strh	r3, [r7, #2]
 8005cb8:	e002      	b.n	8005cc0 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8005cba:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbe:	e009      	b.n	8005cd4 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8005cc0:	883c      	ldrh	r4, [r7, #0]
 8005cc2:	887a      	ldrh	r2, [r7, #2]
 8005cc4:	88b9      	ldrh	r1, [r7, #4]
 8005cc6:	88f8      	ldrh	r0, [r7, #6]
 8005cc8:	8c3b      	ldrh	r3, [r7, #32]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	4623      	mov	r3, r4
 8005cce:	f7ff ff3b 	bl	8005b48 <LCD_Fill>
  return UG_RESULT_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd90      	pop	{r4, r7, pc}

08005cdc <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60ba      	str	r2, [r7, #8]
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	81fb      	strh	r3, [r7, #14]
 8005cea:	460b      	mov	r3, r1
 8005cec:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f00c fa10 	bl	8012114 <UG_FontSelect>
  UG_SetForecolor(color);
 8005cf4:	8b3b      	ldrh	r3, [r7, #24]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f00c fd58 	bl	80127ac <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8005cfc:	8bbb      	ldrh	r3, [r7, #28]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f00c fd66 	bl	80127d0 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8005d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d08:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f00c fcb4 	bl	801267c <UG_PutString>
}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <LCD_setPower+0x14>
 8005d2c:	2329      	movs	r3, #41	; 0x29
 8005d2e:	e000      	b.n	8005d32 <LCD_setPower+0x16>
 8005d30:	2328      	movs	r3, #40	; 0x28
 8005d32:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005d34:	f107 030c 	add.w	r3, r7, #12
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff fd3e 	bl	80057bc <LCD_WriteCommand>
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <LCD_Update>:

static void LCD_Update(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f7ff fcaa 	bl	80056a8 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8005d54:	bf00      	nop
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d64:	482a      	ldr	r0, [pc, #168]	; (8005e10 <LCD_init+0xb8>)
 8005d66:	f003 fe21 	bl	80099ac <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d70:	4827      	ldr	r0, [pc, #156]	; (8005e10 <LCD_init+0xb8>)
 8005d72:	f003 fe1b 	bl	80099ac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005d76:	2001      	movs	r0, #1
 8005d78:	f000 f8ca 	bl	8005f10 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d82:	4823      	ldr	r0, [pc, #140]	; (8005e10 <LCD_init+0xb8>)
 8005d84:	f003 fe12 	bl	80099ac <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8005d88:	20c8      	movs	r0, #200	; 0xc8
 8005d8a:	f000 f8c1 	bl	8005f10 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8005d8e:	4921      	ldr	r1, [pc, #132]	; (8005e14 <LCD_init+0xbc>)
 8005d90:	4821      	ldr	r0, [pc, #132]	; (8005e18 <LCD_init+0xc0>)
 8005d92:	f00c f925 	bl	8011fe0 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8005d96:	4921      	ldr	r1, [pc, #132]	; (8005e1c <LCD_init+0xc4>)
 8005d98:	2000      	movs	r0, #0
 8005d9a:	f00d fdaf 	bl	80138fc <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8005d9e:	4920      	ldr	r1, [pc, #128]	; (8005e20 <LCD_init+0xc8>)
 8005da0:	2001      	movs	r0, #1
 8005da2:	f00d fdab 	bl	80138fc <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8005da6:	491f      	ldr	r1, [pc, #124]	; (8005e24 <LCD_init+0xcc>)
 8005da8:	2002      	movs	r0, #2
 8005daa:	f00d fda7 	bl	80138fc <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8005dae:	491e      	ldr	r1, [pc, #120]	; (8005e28 <LCD_init+0xd0>)
 8005db0:	2003      	movs	r0, #3
 8005db2:	f00d fda3 	bl	80138fc <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8005db6:	2000      	movs	r0, #0
 8005db8:	f00c fd1c 	bl	80127f4 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f00c fd2d 	bl	801281c <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	80fb      	strh	r3, [r7, #6]
 8005dc6:	e013      	b.n	8005df0 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <LCD_init+0xd4>)
 8005dce:	441a      	add	r2, r3
 8005dd0:	88fb      	ldrh	r3, [r7, #6]
 8005dd2:	4916      	ldr	r1, [pc, #88]	; (8005e2c <LCD_init+0xd4>)
 8005dd4:	5ccb      	ldrb	r3, [r1, r3]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7ff fcef 	bl	80057bc <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	4a12      	ldr	r2, [pc, #72]	; (8005e2c <LCD_init+0xd4>)
 8005de2:	5cd3      	ldrb	r3, [r2, r3]
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	4413      	add	r3, r2
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3302      	adds	r3, #2
 8005dee:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	2b4b      	cmp	r3, #75	; 0x4b
 8005df4:	d9e8      	bls.n	8005dc8 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8005df6:	2000      	movs	r0, #0
 8005df8:	f00c f99c 	bl	8012134 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	f7ff ff8d 	bl	8005d1c <LCD_setPower>
  UG_Update();
 8005e02:	f00d fd9d 	bl	8013940 <UG_Update>
}
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	48000400 	.word	0x48000400
 8005e14:	200001cc 	.word	0x200001cc
 8005e18:	20002018 	.word	0x20002018
 8005e1c:	08005c61 	.word	0x08005c61
 8005e20:	08005b49 	.word	0x08005b49
 8005e24:	08005ad9 	.word	0x08005ad9
 8005e28:	08005bb7 	.word	0x08005bb7
 8005e2c:	0801acbc 	.word	0x0801acbc

08005e30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e3a:	2003      	movs	r0, #3
 8005e3c:	f002 fc80 	bl	8008740 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e40:	200f      	movs	r0, #15
 8005e42:	f000 f80d 	bl	8005e60 <HAL_InitTick>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	71fb      	strb	r3, [r7, #7]
 8005e50:	e001      	b.n	8005e56 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e52:	f7fe fe25 	bl	8004aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e56:	79fb      	ldrb	r3, [r7, #7]

}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005e6c:	4b16      	ldr	r3, [pc, #88]	; (8005ec8 <HAL_InitTick+0x68>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d022      	beq.n	8005eba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <HAL_InitTick+0x6c>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <HAL_InitTick+0x68>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f002 fc8c 	bl	80087a6 <HAL_SYSTICK_Config>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10f      	bne.n	8005eb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b0f      	cmp	r3, #15
 8005e98:	d809      	bhi.n	8005eae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea2:	f002 fc58 	bl	8008756 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ea6:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <HAL_InitTick+0x70>)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	e007      	b.n	8005ebe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
 8005eb2:	e004      	b.n	8005ebe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
 8005eb8:	e001      	b.n	8005ebe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200001dc 	.word	0x200001dc
 8005ecc:	200001c4 	.word	0x200001c4
 8005ed0:	200001d8 	.word	0x200001d8

08005ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <HAL_IncTick+0x1c>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <HAL_IncTick+0x20>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	4a03      	ldr	r2, [pc, #12]	; (8005ef0 <HAL_IncTick+0x1c>)
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	2000208c 	.word	0x2000208c
 8005ef4:	200001dc 	.word	0x200001dc

08005ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return uwTick;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_GetTick+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	2000208c 	.word	0x2000208c

08005f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f18:	f7ff ffee 	bl	8005ef8 <HAL_GetTick>
 8005f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d004      	beq.n	8005f34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_Delay+0x40>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f34:	bf00      	nop
 8005f36:	f7ff ffdf 	bl	8005ef8 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d8f7      	bhi.n	8005f36 <HAL_Delay+0x26>
  {
  }
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	200001dc 	.word	0x200001dc

08005f54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	609a      	str	r2, [r3, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	609a      	str	r2, [r3, #8]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3360      	adds	r3, #96	; 0x60
 8005fce:	461a      	mov	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	4b08      	ldr	r3, [pc, #32]	; (8006000 <LL_ADC_SetOffset+0x44>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	03fff000 	.word	0x03fff000

08006004 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3360      	adds	r3, #96	; 0x60
 8006012:	461a      	mov	r2, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3360      	adds	r3, #96	; 0x60
 8006040:	461a      	mov	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	431a      	orrs	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006066:	b480      	push	{r7}
 8006068:	b087      	sub	sp, #28
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3360      	adds	r3, #96	; 0x60
 8006076:	461a      	mov	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	431a      	orrs	r2, r3
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3360      	adds	r3, #96	; 0x60
 80060ac:	461a      	mov	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	615a      	str	r2, [r3, #20]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800611e:	b480      	push	{r7}
 8006120:	b087      	sub	sp, #28
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3330      	adds	r3, #48	; 0x30
 800612e:	461a      	mov	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	0a1b      	lsrs	r3, r3, #8
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	f003 030c 	and.w	r3, r3, #12
 800613a:	4413      	add	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	211f      	movs	r1, #31
 800614a:	fa01 f303 	lsl.w	r3, r1, r3
 800614e:	43db      	mvns	r3, r3
 8006150:	401a      	ands	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	0e9b      	lsrs	r3, r3, #26
 8006156:	f003 011f 	and.w	r1, r3, #31
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	fa01 f303 	lsl.w	r3, r1, r3
 8006164:	431a      	orrs	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3314      	adds	r3, #20
 80061ac:	461a      	mov	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	0e5b      	lsrs	r3, r3, #25
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	4413      	add	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	0d1b      	lsrs	r3, r3, #20
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2107      	movs	r1, #7
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	43db      	mvns	r3, r3
 80061d0:	401a      	ands	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	0d1b      	lsrs	r3, r3, #20
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	fa01 f303 	lsl.w	r3, r1, r3
 80061e0:	431a      	orrs	r2, r3
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800620c:	43db      	mvns	r3, r3
 800620e:	401a      	ands	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f003 0318 	and.w	r3, r3, #24
 8006216:	4908      	ldr	r1, [pc, #32]	; (8006238 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006218:	40d9      	lsrs	r1, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	400b      	ands	r3, r1
 800621e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006222:	431a      	orrs	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	0007ffff 	.word	0x0007ffff

0800623c <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	330c      	adds	r3, #12
 800624c:	4618      	mov	r0, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	0d1b      	lsrs	r3, r3, #20
 8006252:	f003 0103 	and.w	r1, r3, #3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f003 0201 	and.w	r2, r3, #1
 800625c:	4613      	mov	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4403      	add	r3, r0
 800626a:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006276:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800627a:	43db      	mvns	r3, r3
 800627c:	401a      	ands	r2, r3
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	400b      	ands	r3, r1
 8006284:	431a      	orrs	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8006296:	b480      	push	{r7}
 8006298:	b087      	sub	sp, #28
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3320      	adds	r3, #32
 80062a8:	461a      	mov	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	0d1b      	lsrs	r3, r3, #20
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	f003 030c 	and.w	r3, r3, #12
 80062b4:	4413      	add	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	0419      	lsls	r1, r3, #16
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	430b      	orrs	r3, r1
 80062c8:	431a      	orrs	r2, r3
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 031f 	and.w	r3, r3, #31
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006322:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6093      	str	r3, [r2, #8]
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800634a:	d101      	bne.n	8006350 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800636e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006372:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800639a:	d101      	bne.n	80063a0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063ea:	f043 0202 	orr.w	r2, r3, #2
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <LL_ADC_IsEnabled+0x18>
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <LL_ADC_IsEnabled+0x1a>
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b02      	cmp	r3, #2
 8006436:	d101      	bne.n	800643c <LL_ADC_IsDisableOngoing+0x18>
 8006438:	2301      	movs	r3, #1
 800643a:	e000      	b.n	800643e <LL_ADC_IsDisableOngoing+0x1a>
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800645a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800645e:	f043 0204 	orr.w	r2, r3, #4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006482:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006486:	f043 0210 	orr.w	r2, r3, #16
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d101      	bne.n	80064b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064d4:	f043 0220 	orr.w	r2, r3, #32
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d101      	bne.n	8006500 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2280      	movs	r2, #128	; 0x80
 800651a:	601a      	str	r2, [r3, #0]
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006536:	601a      	str	r2, [r3, #0]
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006552:	601a      	str	r2, [r3, #0]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	605a      	str	r2, [r3, #4]
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	605a      	str	r2, [r3, #4]
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	605a      	str	r2, [r3, #4]
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	605a      	str	r2, [r3, #4]
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	605a      	str	r2, [r3, #4]
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	605a      	str	r2, [r3, #4]
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006620:	b590      	push	{r4, r7, lr}
 8006622:	b089      	sub	sp, #36	; 0x24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e167      	b.n	800690a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d109      	bne.n	800665c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7fe fa4d 	bl	8004ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fe68 	bl	8006336 <LL_ADC_IsDeepPowerDownEnabled>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff fe4e 	bl	8006312 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fe83 	bl	8006386 <LL_ADC_IsInternalRegulatorEnabled>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d115      	bne.n	80066b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fe67 	bl	800635e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006690:	4ba0      	ldr	r3, [pc, #640]	; (8006914 <HAL_ADC_Init+0x2f4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	099b      	lsrs	r3, r3, #6
 8006696:	4aa0      	ldr	r2, [pc, #640]	; (8006918 <HAL_ADC_Init+0x2f8>)
 8006698:	fba2 2303 	umull	r2, r3, r2, r3
 800669c:	099b      	lsrs	r3, r3, #6
 800669e:	3301      	adds	r3, #1
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80066a4:	e002      	b.n	80066ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f9      	bne.n	80066a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fe65 	bl	8006386 <LL_ADC_IsInternalRegulatorEnabled>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10d      	bne.n	80066de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c6:	f043 0210 	orr.w	r2, r3, #16
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d2:	f043 0201 	orr.w	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fed9 	bl	800649a <LL_ADC_REG_IsConversionOngoing>
 80066e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f040 8100 	bne.w	80068f8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f040 80fc 	bne.w	80068f8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006704:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006708:	f043 0202 	orr.w	r2, r3, #2
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fe72 	bl	80063fe <LL_ADC_IsEnabled>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d111      	bne.n	8006744 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006720:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006724:	f7ff fe6b 	bl	80063fe <LL_ADC_IsEnabled>
 8006728:	4604      	mov	r4, r0
 800672a:	487c      	ldr	r0, [pc, #496]	; (800691c <HAL_ADC_Init+0x2fc>)
 800672c:	f7ff fe67 	bl	80063fe <LL_ADC_IsEnabled>
 8006730:	4603      	mov	r3, r0
 8006732:	4323      	orrs	r3, r4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4619      	mov	r1, r3
 800673e:	4878      	ldr	r0, [pc, #480]	; (8006920 <HAL_ADC_Init+0x300>)
 8006740:	f7ff fc08 	bl	8005f54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7f5b      	ldrb	r3, [r3, #29]
 8006748:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800674e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006754:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800675a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006762:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006764:	4313      	orrs	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800676e:	2b01      	cmp	r3, #1
 8006770:	d106      	bne.n	8006780 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	3b01      	subs	r3, #1
 8006778:	045b      	lsls	r3, r3, #17
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	4313      	orrs	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	4b60      	ldr	r3, [pc, #384]	; (8006924 <HAL_ADC_Init+0x304>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	69b9      	ldr	r1, [r7, #24]
 80067ac:	430b      	orrs	r3, r1
 80067ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fe8c 	bl	80064e8 <LL_ADC_INJ_IsConversionOngoing>
 80067d0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d16d      	bne.n	80068b4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d16a      	bne.n	80068b4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80067e2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80067ec:	4313      	orrs	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067fa:	f023 0302 	bic.w	r3, r3, #2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6812      	ldr	r2, [r2, #0]
 8006802:	69b9      	ldr	r1, [r7, #24]
 8006804:	430b      	orrs	r3, r1
 8006806:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d017      	beq.n	8006840 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800681e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006828:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800682c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6911      	ldr	r1, [r2, #16]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	430b      	orrs	r3, r1
 800683a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800683e:	e013      	b.n	8006868 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800684e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006864:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800686e:	2b01      	cmp	r3, #1
 8006870:	d118      	bne.n	80068a4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800687c:	f023 0304 	bic.w	r3, r3, #4
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006888:	4311      	orrs	r1, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800688e:	4311      	orrs	r1, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006894:	430a      	orrs	r2, r1
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	611a      	str	r2, [r3, #16]
 80068a2:	e007      	b.n	80068b4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0201 	bic.w	r2, r2, #1
 80068b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d10c      	bne.n	80068d6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	f023 010f 	bic.w	r1, r3, #15
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	1e5a      	subs	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
 80068d4:	e007      	b.n	80068e6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 020f 	bic.w	r2, r2, #15
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ea:	f023 0303 	bic.w	r3, r3, #3
 80068ee:	f043 0201 	orr.w	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80068f6:	e007      	b.n	8006908 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	f043 0210 	orr.w	r2, r3, #16
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006908:	7ffb      	ldrb	r3, [r7, #31]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3724      	adds	r7, #36	; 0x24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd90      	pop	{r4, r7, pc}
 8006912:	bf00      	nop
 8006914:	200001c4 	.word	0x200001c4
 8006918:	053e2d63 	.word	0x053e2d63
 800691c:	50000100 	.word	0x50000100
 8006920:	50000300 	.word	0x50000300
 8006924:	fff04007 	.word	0xfff04007

08006928 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006930:	4893      	ldr	r0, [pc, #588]	; (8006b80 <HAL_ADC_Start_IT+0x258>)
 8006932:	f7ff fcd2 	bl	80062da <LL_ADC_GetMultimode>
 8006936:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff fdac 	bl	800649a <LL_ADC_REG_IsConversionOngoing>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	f040 8113 	bne.w	8006b70 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_ADC_Start_IT+0x30>
 8006954:	2302      	movs	r3, #2
 8006956:	e10e      	b.n	8006b76 <HAL_ADC_Start_IT+0x24e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 fb19 	bl	8007f98 <ADC_Enable>
 8006966:	4603      	mov	r3, r0
 8006968:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 80fa 	bne.w	8006b66 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006976:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a7e      	ldr	r2, [pc, #504]	; (8006b84 <HAL_ADC_Start_IT+0x25c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d002      	beq.n	8006996 <HAL_ADC_Start_IT+0x6e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	e001      	b.n	800699a <HAL_ADC_Start_IT+0x72>
 8006996:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	4293      	cmp	r3, r2
 80069a0:	d002      	beq.n	80069a8 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d006      	beq.n	80069ce <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c4:	f023 0206 	bic.w	r2, r3, #6
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	661a      	str	r2, [r3, #96]	; 0x60
 80069cc:	e002      	b.n	80069d4 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	221c      	movs	r2, #28
 80069da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 021c 	bic.w	r2, r2, #28
 80069f2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d108      	bne.n	8006a0e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0208 	orr.w	r2, r2, #8
 8006a0a:	605a      	str	r2, [r3, #4]
          break;
 8006a0c:	e008      	b.n	8006a20 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0204 	orr.w	r2, r2, #4
 8006a1c:	605a      	str	r2, [r3, #4]
          break;
 8006a1e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d107      	bne.n	8006a38 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0210 	orr.w	r2, r2, #16
 8006a36:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a51      	ldr	r2, [pc, #324]	; (8006b84 <HAL_ADC_Start_IT+0x25c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d002      	beq.n	8006a48 <HAL_ADC_Start_IT+0x120>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	e001      	b.n	8006a4c <HAL_ADC_Start_IT+0x124>
 8006a48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d008      	beq.n	8006a66 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b05      	cmp	r3, #5
 8006a5e:	d002      	beq.n	8006a66 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	2b09      	cmp	r3, #9
 8006a64:	d13a      	bne.n	8006adc <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d02d      	beq.n	8006ad0 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d110      	bne.n	8006aae <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0220 	bic.w	r2, r2, #32
 8006a9a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aaa:	605a      	str	r2, [r3, #4]
              break;
 8006aac:	e010      	b.n	8006ad0 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006abc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0220 	orr.w	r2, r2, #32
 8006acc:	605a      	str	r2, [r3, #4]
              break;
 8006ace:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fcb8 	bl	800644a <LL_ADC_REG_StartConversion>
 8006ada:	e04b      	b.n	8006b74 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a25      	ldr	r2, [pc, #148]	; (8006b84 <HAL_ADC_Start_IT+0x25c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d002      	beq.n	8006af8 <HAL_ADC_Start_IT+0x1d0>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	e001      	b.n	8006afc <HAL_ADC_Start_IT+0x1d4>
 8006af8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006afc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d034      	beq.n	8006b74 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d110      	bne.n	8006b44 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0220 	bic.w	r2, r2, #32
 8006b30:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b40:	605a      	str	r2, [r3, #4]
              break;
 8006b42:	e017      	b.n	8006b74 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b52:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0220 	orr.w	r2, r2, #32
 8006b62:	605a      	str	r2, [r3, #4]
              break;
 8006b64:	e006      	b.n	8006b74 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006b6e:	e001      	b.n	8006b74 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006b70:	2302      	movs	r3, #2
 8006b72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	50000300 	.word	0x50000300
 8006b84:	50000100 	.word	0x50000100

08006b88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b94:	4851      	ldr	r0, [pc, #324]	; (8006cdc <HAL_ADC_Start_DMA+0x154>)
 8006b96:	f7ff fba0 	bl	80062da <LL_ADC_GetMultimode>
 8006b9a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff fc7a 	bl	800649a <LL_ADC_REG_IsConversionOngoing>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f040 808f 	bne.w	8006ccc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_ADC_Start_DMA+0x34>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e08a      	b.n	8006cd2 <HAL_ADC_Start_DMA+0x14a>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d002      	beq.n	8006bd6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b09      	cmp	r3, #9
 8006bd4:	d173      	bne.n	8006cbe <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f001 f9de 	bl	8007f98 <ADC_Enable>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d166      	bne.n	8006cb4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a38      	ldr	r2, [pc, #224]	; (8006ce0 <HAL_ADC_Start_DMA+0x158>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d002      	beq.n	8006c0a <HAL_ADC_Start_DMA+0x82>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	e001      	b.n	8006c0e <HAL_ADC_Start_DMA+0x86>
 8006c0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d002      	beq.n	8006c1c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d105      	bne.n	8006c28 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c38:	f023 0206 	bic.w	r2, r3, #6
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	661a      	str	r2, [r3, #96]	; 0x60
 8006c40:	e002      	b.n	8006c48 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4c:	4a25      	ldr	r2, [pc, #148]	; (8006ce4 <HAL_ADC_Start_DMA+0x15c>)
 8006c4e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c54:	4a24      	ldr	r2, [pc, #144]	; (8006ce8 <HAL_ADC_Start_DMA+0x160>)
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5c:	4a23      	ldr	r2, [pc, #140]	; (8006cec <HAL_ADC_Start_DMA+0x164>)
 8006c5e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	221c      	movs	r2, #28
 8006c66:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0210 	orr.w	r2, r2, #16
 8006c7e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3340      	adds	r3, #64	; 0x40
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f002 f83c 	bl	8008d1c <HAL_DMA_Start_IT>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fbcc 	bl	800644a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006cb2:	e00d      	b.n	8006cd0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006cbc:	e008      	b.n	8006cd0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006cca:	e001      	b.n	8006cd0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	50000300 	.word	0x50000300
 8006ce0:	50000100 	.word	0x50000100
 8006ce4:	08008163 	.word	0x08008163
 8006ce8:	0800823b 	.word	0x0800823b
 8006cec:	08008257 	.word	0x08008257

08006cf0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_ADC_Stop_DMA+0x16>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e051      	b.n	8006daa <HAL_ADC_Stop_DMA+0xba>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006d0e:	2103      	movs	r1, #3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 f885 	bl	8007e20 <ADC_ConversionStop>
 8006d16:	4603      	mov	r3, r0
 8006d18:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d13f      	bne.n	8006da0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d10f      	bne.n	8006d5e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d42:	4618      	mov	r0, r3
 8006d44:	f002 f865 	bl	8008e12 <HAL_DMA_Abort>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0210 	bic.w	r2, r2, #16
 8006d6c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d105      	bne.n	8006d80 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 f995 	bl	80080a4 <ADC_Disable>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73fb      	strb	r3, [r7, #15]
 8006d7e:	e002      	b.n	8006d86 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f98f 	bl	80080a4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	f043 0201 	orr.w	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	; 0x28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006de8:	4883      	ldr	r0, [pc, #524]	; (8006ff8 <HAL_ADC_IRQHandler+0x22c>)
 8006dea:	f7ff fa76 	bl	80062da <LL_ADC_GetMultimode>
 8006dee:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d017      	beq.n	8006e2a <HAL_ADC_IRQHandler+0x5e>
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d012      	beq.n	8006e2a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e08:	f003 0310 	and.w	r3, r3, #16
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d105      	bne.n	8006e1c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e14:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fb11 	bl	8008444 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2202      	movs	r2, #2
 8006e28:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d004      	beq.n	8006e3e <HAL_ADC_IRQHandler+0x72>
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 8085 	beq.w	8006f54 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d07f      	beq.n	8006f54 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d105      	bne.n	8006e6c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff f941 	bl	80060f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d064      	beq.n	8006f46 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a5e      	ldr	r2, [pc, #376]	; (8006ffc <HAL_ADC_IRQHandler+0x230>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d002      	beq.n	8006e8c <HAL_ADC_IRQHandler+0xc0>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	e001      	b.n	8006e90 <HAL_ADC_IRQHandler+0xc4>
 8006e8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6812      	ldr	r2, [r2, #0]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d008      	beq.n	8006eaa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b05      	cmp	r3, #5
 8006ea2:	d002      	beq.n	8006eaa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b09      	cmp	r3, #9
 8006ea8:	d104      	bne.n	8006eb4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	623b      	str	r3, [r7, #32]
 8006eb2:	e00d      	b.n	8006ed0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a50      	ldr	r2, [pc, #320]	; (8006ffc <HAL_ADC_IRQHandler+0x230>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d002      	beq.n	8006ec4 <HAL_ADC_IRQHandler+0xf8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	e001      	b.n	8006ec8 <HAL_ADC_IRQHandler+0xfc>
 8006ec4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006ec8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d135      	bne.n	8006f46 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d12e      	bne.n	8006f46 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff fad4 	bl	800649a <LL_ADC_REG_IsConversionOngoing>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d11a      	bne.n	8006f2e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 020c 	bic.w	r2, r2, #12
 8006f06:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d112      	bne.n	8006f46 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f24:	f043 0201 	orr.w	r2, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f2c:	e00b      	b.n	8006f46 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	f043 0210 	orr.w	r2, r3, #16
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f3e:	f043 0201 	orr.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fc f8be 	bl	80030c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	220c      	movs	r2, #12
 8006f52:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <HAL_ADC_IRQHandler+0x19c>
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 809e 	beq.w	80070b0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8098 	beq.w	80070b0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d105      	bne.n	8006f98 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff f8ea 	bl	8006176 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006fa2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff f8a5 	bl	80060f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006fae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a11      	ldr	r2, [pc, #68]	; (8006ffc <HAL_ADC_IRQHandler+0x230>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d002      	beq.n	8006fc0 <HAL_ADC_IRQHandler+0x1f4>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	e001      	b.n	8006fc4 <HAL_ADC_IRQHandler+0x1f8>
 8006fc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d008      	beq.n	8006fde <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b06      	cmp	r3, #6
 8006fd6:	d002      	beq.n	8006fde <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b07      	cmp	r3, #7
 8006fdc:	d104      	bne.n	8006fe8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	623b      	str	r3, [r7, #32]
 8006fe6:	e011      	b.n	800700c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a03      	ldr	r2, [pc, #12]	; (8006ffc <HAL_ADC_IRQHandler+0x230>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d006      	beq.n	8007000 <HAL_ADC_IRQHandler+0x234>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	e005      	b.n	8007004 <HAL_ADC_IRQHandler+0x238>
 8006ff8:	50000300 	.word	0x50000300
 8006ffc:	50000100 	.word	0x50000100
 8007000:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007004:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d047      	beq.n	80070a2 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <HAL_ADC_IRQHandler+0x260>
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d03f      	beq.n	80070a2 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007028:	2b00      	cmp	r3, #0
 800702a:	d13a      	bne.n	80070a2 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d133      	bne.n	80070a2 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d12e      	bne.n	80070a2 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff fa4d 	bl	80064e8 <LL_ADC_INJ_IsConversionOngoing>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d11a      	bne.n	800708a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007062:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007068:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007078:	2b00      	cmp	r3, #0
 800707a:	d112      	bne.n	80070a2 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007080:	f043 0201 	orr.w	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	65da      	str	r2, [r3, #92]	; 0x5c
 8007088:	e00b      	b.n	80070a2 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708e:	f043 0210 	orr.w	r2, r3, #16
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709a:	f043 0201 	orr.w	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 f9a6 	bl	80083f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2260      	movs	r2, #96	; 0x60
 80070ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d011      	beq.n	80070de <HAL_ADC_IRQHandler+0x312>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00c      	beq.n	80070de <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7fc f841 	bl	8003158 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2280      	movs	r2, #128	; 0x80
 80070dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d012      	beq.n	800710e <HAL_ADC_IRQHandler+0x342>
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00d      	beq.n	800710e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 f98c 	bl	800841c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800710c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007114:	2b00      	cmp	r3, #0
 8007116:	d012      	beq.n	800713e <HAL_ADC_IRQHandler+0x372>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00d      	beq.n	800713e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007126:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 f97e 	bl	8008430 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800713c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f003 0310 	and.w	r3, r3, #16
 8007144:	2b00      	cmp	r3, #0
 8007146:	d036      	beq.n	80071b6 <HAL_ADC_IRQHandler+0x3ea>
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b00      	cmp	r3, #0
 8007150:	d031      	beq.n	80071b6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d102      	bne.n	8007160 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800715a:	2301      	movs	r3, #1
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
 800715e:	e014      	b.n	800718a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d008      	beq.n	8007178 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007166:	4825      	ldr	r0, [pc, #148]	; (80071fc <HAL_ADC_IRQHandler+0x430>)
 8007168:	f7ff f8c5 	bl	80062f6 <LL_ADC_GetMultiDMATransfer>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007172:	2301      	movs	r3, #1
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
 8007176:	e008      	b.n	800718a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007186:	2301      	movs	r3, #1
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	2b01      	cmp	r3, #1
 800718e:	d10e      	bne.n	80071ae <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007194:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a0:	f043 0202 	orr.w	r2, r3, #2
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f833 	bl	8007214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2210      	movs	r2, #16
 80071b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d018      	beq.n	80071f2 <HAL_ADC_IRQHandler+0x426>
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d013      	beq.n	80071f2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071da:	f043 0208 	orr.w	r2, r3, #8
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071ea:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 f90b 	bl	8008408 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80071f2:	bf00      	nop
 80071f4:	3728      	adds	r7, #40	; 0x28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	50000300 	.word	0x50000300

08007200 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b0b6      	sub	sp, #216	; 0xd8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <HAL_ADC_ConfigChannel+0x22>
 8007246:	2302      	movs	r3, #2
 8007248:	e3c8      	b.n	80079dc <HAL_ADC_ConfigChannel+0x7b4>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff f91f 	bl	800649a <LL_ADC_REG_IsConversionOngoing>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	f040 83ad 	bne.w	80079be <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	6859      	ldr	r1, [r3, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	f7fe ff54 	bl	800611e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff f90d 	bl	800649a <LL_ADC_REG_IsConversionOngoing>
 8007280:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff f92d 	bl	80064e8 <LL_ADC_INJ_IsConversionOngoing>
 800728e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007292:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 81d9 	bne.w	800764e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800729c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f040 81d4 	bne.w	800764e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ae:	d10f      	bne.n	80072d0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2200      	movs	r2, #0
 80072ba:	4619      	mov	r1, r3
 80072bc:	f7fe ff6e 	bl	800619c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fe ff02 	bl	80060d2 <LL_ADC_SetSamplingTimeCommonConfig>
 80072ce:	e00e      	b.n	80072ee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	6819      	ldr	r1, [r3, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	461a      	mov	r2, r3
 80072de:	f7fe ff5d 	bl	800619c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2100      	movs	r1, #0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fef2 	bl	80060d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	08db      	lsrs	r3, r3, #3
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2b04      	cmp	r3, #4
 800730e:	d022      	beq.n	8007356 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	6919      	ldr	r1, [r3, #16]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007320:	f7fe fe4c 	bl	8005fbc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	6919      	ldr	r1, [r3, #16]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	461a      	mov	r2, r3
 8007332:	f7fe fe98 	bl	8006066 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007342:	2b01      	cmp	r3, #1
 8007344:	d102      	bne.n	800734c <HAL_ADC_ConfigChannel+0x124>
 8007346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800734a:	e000      	b.n	800734e <HAL_ADC_ConfigChannel+0x126>
 800734c:	2300      	movs	r3, #0
 800734e:	461a      	mov	r2, r3
 8007350:	f7fe fea4 	bl	800609c <LL_ADC_SetOffsetSaturation>
 8007354:	e17b      	b.n	800764e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2100      	movs	r1, #0
 800735c:	4618      	mov	r0, r3
 800735e:	f7fe fe51 	bl	8006004 <LL_ADC_GetOffsetChannel>
 8007362:	4603      	mov	r3, r0
 8007364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <HAL_ADC_ConfigChannel+0x15a>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fe46 	bl	8006004 <LL_ADC_GetOffsetChannel>
 8007378:	4603      	mov	r3, r0
 800737a:	0e9b      	lsrs	r3, r3, #26
 800737c:	f003 021f 	and.w	r2, r3, #31
 8007380:	e01e      	b.n	80073c0 <HAL_ADC_ConfigChannel+0x198>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe fe3b 	bl	8006004 <LL_ADC_GetOffsetChannel>
 800738e:	4603      	mov	r3, r0
 8007390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007394:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007398:	fa93 f3a3 	rbit	r3, r3
 800739c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80073a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80073a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80073b0:	2320      	movs	r3, #32
 80073b2:	e004      	b.n	80073be <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80073b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073b8:	fab3 f383 	clz	r3, r3
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d105      	bne.n	80073d8 <HAL_ADC_ConfigChannel+0x1b0>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	0e9b      	lsrs	r3, r3, #26
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	e018      	b.n	800740a <HAL_ADC_ConfigChannel+0x1e2>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073e4:	fa93 f3a3 	rbit	r3, r3
 80073e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80073ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80073f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80073fc:	2320      	movs	r3, #32
 80073fe:	e004      	b.n	800740a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007404:	fab3 f383 	clz	r3, r3
 8007408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800740a:	429a      	cmp	r2, r3
 800740c:	d106      	bne.n	800741c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2200      	movs	r2, #0
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fe0a 	bl	8006030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2101      	movs	r1, #1
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe fdee 	bl	8006004 <LL_ADC_GetOffsetChannel>
 8007428:	4603      	mov	r3, r0
 800742a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <HAL_ADC_ConfigChannel+0x220>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2101      	movs	r1, #1
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fde3 	bl	8006004 <LL_ADC_GetOffsetChannel>
 800743e:	4603      	mov	r3, r0
 8007440:	0e9b      	lsrs	r3, r3, #26
 8007442:	f003 021f 	and.w	r2, r3, #31
 8007446:	e01e      	b.n	8007486 <HAL_ADC_ConfigChannel+0x25e>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2101      	movs	r1, #1
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fdd8 	bl	8006004 <LL_ADC_GetOffsetChannel>
 8007454:	4603      	mov	r3, r0
 8007456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800745a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800745e:	fa93 f3a3 	rbit	r3, r3
 8007462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800746a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800746e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007476:	2320      	movs	r3, #32
 8007478:	e004      	b.n	8007484 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800747a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800747e:	fab3 f383 	clz	r3, r3
 8007482:	b2db      	uxtb	r3, r3
 8007484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <HAL_ADC_ConfigChannel+0x276>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	0e9b      	lsrs	r3, r3, #26
 8007498:	f003 031f 	and.w	r3, r3, #31
 800749c:	e018      	b.n	80074d0 <HAL_ADC_ConfigChannel+0x2a8>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074aa:	fa93 f3a3 	rbit	r3, r3
 80074ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80074b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80074ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80074c2:	2320      	movs	r3, #32
 80074c4:	e004      	b.n	80074d0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80074c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074ca:	fab3 f383 	clz	r3, r3
 80074ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d106      	bne.n	80074e2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2200      	movs	r2, #0
 80074da:	2101      	movs	r1, #1
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe fda7 	bl	8006030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2102      	movs	r1, #2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fd8b 	bl	8006004 <LL_ADC_GetOffsetChannel>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <HAL_ADC_ConfigChannel+0x2e6>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2102      	movs	r1, #2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fd80 	bl	8006004 <LL_ADC_GetOffsetChannel>
 8007504:	4603      	mov	r3, r0
 8007506:	0e9b      	lsrs	r3, r3, #26
 8007508:	f003 021f 	and.w	r2, r3, #31
 800750c:	e01e      	b.n	800754c <HAL_ADC_ConfigChannel+0x324>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2102      	movs	r1, #2
 8007514:	4618      	mov	r0, r3
 8007516:	f7fe fd75 	bl	8006004 <LL_ADC_GetOffsetChannel>
 800751a:	4603      	mov	r3, r0
 800751c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007524:	fa93 f3a3 	rbit	r3, r3
 8007528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800752c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800753c:	2320      	movs	r3, #32
 800753e:	e004      	b.n	800754a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007544:	fab3 f383 	clz	r3, r3
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x33c>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	0e9b      	lsrs	r3, r3, #26
 800755e:	f003 031f 	and.w	r3, r3, #31
 8007562:	e016      	b.n	8007592 <HAL_ADC_ConfigChannel+0x36a>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007570:	fa93 f3a3 	rbit	r3, r3
 8007574:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800757c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007584:	2320      	movs	r3, #32
 8007586:	e004      	b.n	8007592 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800758c:	fab3 f383 	clz	r3, r3
 8007590:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007592:	429a      	cmp	r2, r3
 8007594:	d106      	bne.n	80075a4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	2102      	movs	r1, #2
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fd46 	bl	8006030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2103      	movs	r1, #3
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fd2a 	bl	8006004 <LL_ADC_GetOffsetChannel>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <HAL_ADC_ConfigChannel+0x3a8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2103      	movs	r1, #3
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fd1f 	bl	8006004 <LL_ADC_GetOffsetChannel>
 80075c6:	4603      	mov	r3, r0
 80075c8:	0e9b      	lsrs	r3, r3, #26
 80075ca:	f003 021f 	and.w	r2, r3, #31
 80075ce:	e017      	b.n	8007600 <HAL_ADC_ConfigChannel+0x3d8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2103      	movs	r1, #3
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fd14 	bl	8006004 <LL_ADC_GetOffsetChannel>
 80075dc:	4603      	mov	r3, r0
 80075de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e2:	fa93 f3a3 	rbit	r3, r3
 80075e6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80075e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075ea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80075ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80075f2:	2320      	movs	r3, #32
 80075f4:	e003      	b.n	80075fe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80075f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f8:	fab3 f383 	clz	r3, r3
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007608:	2b00      	cmp	r3, #0
 800760a:	d105      	bne.n	8007618 <HAL_ADC_ConfigChannel+0x3f0>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	0e9b      	lsrs	r3, r3, #26
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	e011      	b.n	800763c <HAL_ADC_ConfigChannel+0x414>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800761e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007620:	fa93 f3a3 	rbit	r3, r3
 8007624:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007628:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800762a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8007630:	2320      	movs	r3, #32
 8007632:	e003      	b.n	800763c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8007634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007636:	fab3 f383 	clz	r3, r3
 800763a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800763c:	429a      	cmp	r2, r3
 800763e:	d106      	bne.n	800764e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2200      	movs	r2, #0
 8007646:	2103      	movs	r1, #3
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe fcf1 	bl	8006030 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fed3 	bl	80063fe <LL_ADC_IsEnabled>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	f040 8140 	bne.w	80078e0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	6819      	ldr	r1, [r3, #0]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	461a      	mov	r2, r3
 800766e:	f7fe fdc1 	bl	80061f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	4a8f      	ldr	r2, [pc, #572]	; (80078b4 <HAL_ADC_ConfigChannel+0x68c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	f040 8131 	bne.w	80078e0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <HAL_ADC_ConfigChannel+0x47e>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	0e9b      	lsrs	r3, r3, #26
 8007694:	3301      	adds	r3, #1
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	2b09      	cmp	r3, #9
 800769c:	bf94      	ite	ls
 800769e:	2301      	movls	r3, #1
 80076a0:	2300      	movhi	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	e019      	b.n	80076da <HAL_ADC_ConfigChannel+0x4b2>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ae:	fa93 f3a3 	rbit	r3, r3
 80076b2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80076b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80076b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80076be:	2320      	movs	r3, #32
 80076c0:	e003      	b.n	80076ca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80076c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076c4:	fab3 f383 	clz	r3, r3
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	3301      	adds	r3, #1
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	2b09      	cmp	r3, #9
 80076d2:	bf94      	ite	ls
 80076d4:	2301      	movls	r3, #1
 80076d6:	2300      	movhi	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d079      	beq.n	80077d2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d107      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x4d2>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	0e9b      	lsrs	r3, r3, #26
 80076f0:	3301      	adds	r3, #1
 80076f2:	069b      	lsls	r3, r3, #26
 80076f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076f8:	e015      	b.n	8007726 <HAL_ADC_ConfigChannel+0x4fe>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007702:	fa93 f3a3 	rbit	r3, r3
 8007706:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800770c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007712:	2320      	movs	r3, #32
 8007714:	e003      	b.n	800771e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8007716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007718:	fab3 f383 	clz	r3, r3
 800771c:	b2db      	uxtb	r3, r3
 800771e:	3301      	adds	r3, #1
 8007720:	069b      	lsls	r3, r3, #26
 8007722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <HAL_ADC_ConfigChannel+0x51e>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	0e9b      	lsrs	r3, r3, #26
 8007738:	3301      	adds	r3, #1
 800773a:	f003 031f 	and.w	r3, r3, #31
 800773e:	2101      	movs	r1, #1
 8007740:	fa01 f303 	lsl.w	r3, r1, r3
 8007744:	e017      	b.n	8007776 <HAL_ADC_ConfigChannel+0x54e>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774e:	fa93 f3a3 	rbit	r3, r3
 8007752:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007756:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800775e:	2320      	movs	r3, #32
 8007760:	e003      	b.n	800776a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8007762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007764:	fab3 f383 	clz	r3, r3
 8007768:	b2db      	uxtb	r3, r3
 800776a:	3301      	adds	r3, #1
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	2101      	movs	r1, #1
 8007772:	fa01 f303 	lsl.w	r3, r1, r3
 8007776:	ea42 0103 	orr.w	r1, r2, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <HAL_ADC_ConfigChannel+0x574>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	0e9b      	lsrs	r3, r3, #26
 800778c:	3301      	adds	r3, #1
 800778e:	f003 021f 	and.w	r2, r3, #31
 8007792:	4613      	mov	r3, r2
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4413      	add	r3, r2
 8007798:	051b      	lsls	r3, r3, #20
 800779a:	e018      	b.n	80077ce <HAL_ADC_ConfigChannel+0x5a6>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	fa93 f3a3 	rbit	r3, r3
 80077a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80077aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80077ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80077b4:	2320      	movs	r3, #32
 80077b6:	e003      	b.n	80077c0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80077b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ba:	fab3 f383 	clz	r3, r3
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	3301      	adds	r3, #1
 80077c2:	f003 021f 	and.w	r2, r3, #31
 80077c6:	4613      	mov	r3, r2
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	4413      	add	r3, r2
 80077cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077ce:	430b      	orrs	r3, r1
 80077d0:	e081      	b.n	80078d6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d107      	bne.n	80077ee <HAL_ADC_ConfigChannel+0x5c6>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	0e9b      	lsrs	r3, r3, #26
 80077e4:	3301      	adds	r3, #1
 80077e6:	069b      	lsls	r3, r3, #26
 80077e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077ec:	e015      	b.n	800781a <HAL_ADC_ConfigChannel+0x5f2>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	fa93 f3a3 	rbit	r3, r3
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8007806:	2320      	movs	r3, #32
 8007808:	e003      	b.n	8007812 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	fab3 f383 	clz	r3, r3
 8007810:	b2db      	uxtb	r3, r3
 8007812:	3301      	adds	r3, #1
 8007814:	069b      	lsls	r3, r3, #26
 8007816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <HAL_ADC_ConfigChannel+0x612>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	0e9b      	lsrs	r3, r3, #26
 800782c:	3301      	adds	r3, #1
 800782e:	f003 031f 	and.w	r3, r3, #31
 8007832:	2101      	movs	r1, #1
 8007834:	fa01 f303 	lsl.w	r3, r1, r3
 8007838:	e017      	b.n	800786a <HAL_ADC_ConfigChannel+0x642>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	fa93 f3a3 	rbit	r3, r3
 8007846:	61fb      	str	r3, [r7, #28]
  return result;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8007852:	2320      	movs	r3, #32
 8007854:	e003      	b.n	800785e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	fab3 f383 	clz	r3, r3
 800785c:	b2db      	uxtb	r3, r3
 800785e:	3301      	adds	r3, #1
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	2101      	movs	r1, #1
 8007866:	fa01 f303 	lsl.w	r3, r1, r3
 800786a:	ea42 0103 	orr.w	r1, r2, r3
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10d      	bne.n	8007896 <HAL_ADC_ConfigChannel+0x66e>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	0e9b      	lsrs	r3, r3, #26
 8007880:	3301      	adds	r3, #1
 8007882:	f003 021f 	and.w	r2, r3, #31
 8007886:	4613      	mov	r3, r2
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	4413      	add	r3, r2
 800788c:	3b1e      	subs	r3, #30
 800788e:	051b      	lsls	r3, r3, #20
 8007890:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007894:	e01e      	b.n	80078d4 <HAL_ADC_ConfigChannel+0x6ac>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	fa93 f3a3 	rbit	r3, r3
 80078a2:	613b      	str	r3, [r7, #16]
  return result;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d104      	bne.n	80078b8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80078ae:	2320      	movs	r3, #32
 80078b0:	e006      	b.n	80078c0 <HAL_ADC_ConfigChannel+0x698>
 80078b2:	bf00      	nop
 80078b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	fab3 f383 	clz	r3, r3
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	3301      	adds	r3, #1
 80078c2:	f003 021f 	and.w	r2, r3, #31
 80078c6:	4613      	mov	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	4413      	add	r3, r2
 80078cc:	3b1e      	subs	r3, #30
 80078ce:	051b      	lsls	r3, r3, #20
 80078d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078da:	4619      	mov	r1, r3
 80078dc:	f7fe fc5e 	bl	800619c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	4b3f      	ldr	r3, [pc, #252]	; (80079e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80078e6:	4013      	ands	r3, r2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d071      	beq.n	80079d0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078ec:	483e      	ldr	r0, [pc, #248]	; (80079e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80078ee:	f7fe fb57 	bl	8005fa0 <LL_ADC_GetCommonPathInternalCh>
 80078f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a3c      	ldr	r2, [pc, #240]	; (80079ec <HAL_ADC_ConfigChannel+0x7c4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d004      	beq.n	800790a <HAL_ADC_ConfigChannel+0x6e2>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a3a      	ldr	r2, [pc, #232]	; (80079f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d127      	bne.n	800795a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800790a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800790e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d121      	bne.n	800795a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800791e:	d157      	bne.n	80079d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007928:	4619      	mov	r1, r3
 800792a:	482f      	ldr	r0, [pc, #188]	; (80079e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800792c:	f7fe fb25 	bl	8005f7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007930:	4b30      	ldr	r3, [pc, #192]	; (80079f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	099b      	lsrs	r3, r3, #6
 8007936:	4a30      	ldr	r2, [pc, #192]	; (80079f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8007938:	fba2 2303 	umull	r2, r3, r2, r3
 800793c:	099b      	lsrs	r3, r3, #6
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	4613      	mov	r3, r2
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800794a:	e002      	b.n	8007952 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3b01      	subs	r3, #1
 8007950:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f9      	bne.n	800794c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007958:	e03a      	b.n	80079d0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a27      	ldr	r2, [pc, #156]	; (80079fc <HAL_ADC_ConfigChannel+0x7d4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d113      	bne.n	800798c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10d      	bne.n	800798c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <HAL_ADC_ConfigChannel+0x7d8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d02a      	beq.n	80079d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800797a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800797e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007982:	4619      	mov	r1, r3
 8007984:	4818      	ldr	r0, [pc, #96]	; (80079e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8007986:	f7fe faf8 	bl	8005f7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800798a:	e021      	b.n	80079d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a1c      	ldr	r2, [pc, #112]	; (8007a04 <HAL_ADC_ConfigChannel+0x7dc>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d11c      	bne.n	80079d0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800799a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d116      	bne.n	80079d0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a16      	ldr	r2, [pc, #88]	; (8007a00 <HAL_ADC_ConfigChannel+0x7d8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d011      	beq.n	80079d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079b4:	4619      	mov	r1, r3
 80079b6:	480c      	ldr	r0, [pc, #48]	; (80079e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80079b8:	f7fe fadf 	bl	8005f7a <LL_ADC_SetCommonPathInternalCh>
 80079bc:	e008      	b.n	80079d0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c2:	f043 0220 	orr.w	r2, r3, #32
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80079d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80079dc:	4618      	mov	r0, r3
 80079de:	37d8      	adds	r7, #216	; 0xd8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	80080000 	.word	0x80080000
 80079e8:	50000300 	.word	0x50000300
 80079ec:	c3210000 	.word	0xc3210000
 80079f0:	90c00010 	.word	0x90c00010
 80079f4:	200001c4 	.word	0x200001c4
 80079f8:	053e2d63 	.word	0x053e2d63
 80079fc:	c7520000 	.word	0xc7520000
 8007a00:	50000100 	.word	0x50000100
 8007a04:	cb840000 	.word	0xcb840000

08007a08 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08e      	sub	sp, #56	; 0x38
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a20:	d003      	beq.n	8007a2a <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007a26:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_ADC_AnalogWDGConfig+0x30>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e1ea      	b.n	8007e0e <HAL_ADC_AnalogWDGConfig+0x406>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe fd28 	bl	800649a <LL_ADC_REG_IsConversionOngoing>
 8007a4a:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fd49 	bl	80064e8 <LL_ADC_INJ_IsConversionOngoing>
 8007a56:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f040 8175 	bne.w	8007d4a <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f040 8171 	bne.w	8007d4a <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a90      	ldr	r2, [pc, #576]	; (8007cb0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	f040 808d 	bne.w	8007b8e <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007a7c:	d034      	beq.n	8007ae8 <HAL_ADC_AnalogWDGConfig+0xe0>
 8007a7e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007a82:	d856      	bhi.n	8007b32 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a88:	d04b      	beq.n	8007b22 <HAL_ADC_AnalogWDGConfig+0x11a>
 8007a8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a8e:	d850      	bhi.n	8007b32 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007a90:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a94:	d01b      	beq.n	8007ace <HAL_ADC_AnalogWDGConfig+0xc6>
 8007a96:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a9a:	d84a      	bhi.n	8007b32 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007aa0:	d037      	beq.n	8007b12 <HAL_ADC_AnalogWDGConfig+0x10a>
 8007aa2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007aa6:	d844      	bhi.n	8007b32 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aac:	d029      	beq.n	8007b02 <HAL_ADC_AnalogWDGConfig+0xfa>
 8007aae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ab2:	d13e      	bne.n	8007b32 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007ac0:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	497a      	ldr	r1, [pc, #488]	; (8007cb0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007ac8:	f7fe fbb8 	bl	800623c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8007acc:	e039      	b.n	8007b42 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007ada:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8007ade:	461a      	mov	r2, r3
 8007ae0:	4973      	ldr	r1, [pc, #460]	; (8007cb0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007ae2:	f7fe fbab 	bl	800623c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 8007ae6:	e02c      	b.n	8007b42 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007af4:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8007af8:	461a      	mov	r2, r3
 8007afa:	496d      	ldr	r1, [pc, #436]	; (8007cb0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007afc:	f7fe fb9e 	bl	800623c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8007b00:	e01f      	b.n	8007b42 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a6b      	ldr	r2, [pc, #428]	; (8007cb4 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8007b08:	4969      	ldr	r1, [pc, #420]	; (8007cb0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fb96 	bl	800623c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007b10:	e017      	b.n	8007b42 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a68      	ldr	r2, [pc, #416]	; (8007cb8 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8007b18:	4965      	ldr	r1, [pc, #404]	; (8007cb0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fb8e 	bl	800623c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007b20:	e00f      	b.n	8007b42 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a65      	ldr	r2, [pc, #404]	; (8007cbc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8007b28:	4961      	ldr	r1, [pc, #388]	; (8007cb0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fb86 	bl	800623c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007b30:	e007      	b.n	8007b42 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2200      	movs	r2, #0
 8007b38:	495d      	ldr	r1, [pc, #372]	; (8007cb0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe fb7e 	bl	800623c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007b40:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	699a      	ldr	r2, [r3, #24]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fe fcd0 	bl	800650e <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	7b1b      	ldrb	r3, [r3, #12]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d105      	bne.n	8007b82 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe fcf0 	bl	8006560 <LL_ADC_EnableIT_AWD1>
 8007b80:	e0e3      	b.n	8007d4a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fd1a 	bl	80065c0 <LL_ADC_DisableIT_AWD1>
 8007b8c:	e0dd      	b.n	8007d4a <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007b96:	d01d      	beq.n	8007bd4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8007b98:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007b9c:	f200 8092 	bhi.w	8007cc4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007ba0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ba4:	d07b      	beq.n	8007c9e <HAL_ADC_AnalogWDGConfig+0x296>
 8007ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007baa:	f200 808b 	bhi.w	8007cc4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007bae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007bb2:	d00f      	beq.n	8007bd4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8007bb4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007bb8:	f200 8084 	bhi.w	8007cc4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bc0:	d06d      	beq.n	8007c9e <HAL_ADC_AnalogWDGConfig+0x296>
 8007bc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bc6:	d87d      	bhi.n	8007cc4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007bc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bcc:	d067      	beq.n	8007c9e <HAL_ADC_AnalogWDGConfig+0x296>
 8007bce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bd2:	d177      	bne.n	8007cc4 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a39      	ldr	r2, [pc, #228]	; (8007cc0 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d12f      	bne.n	8007c3e <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d108      	bne.n	8007bfc <HAL_ADC_AnalogWDGConfig+0x1f4>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	0e9b      	lsrs	r3, r3, #26
 8007bf0:	f003 031f 	and.w	r3, r3, #31
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	e016      	b.n	8007c2a <HAL_ADC_AnalogWDGConfig+0x222>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	fa93 f3a3 	rbit	r3, r3
 8007c08:	61bb      	str	r3, [r7, #24]
  return result;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8007c14:	2320      	movs	r3, #32
 8007c16:	e003      	b.n	8007c20 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	fab3 f383 	clz	r3, r3
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 031f 	and.w	r3, r3, #31
 8007c24:	2201      	movs	r2, #1
 8007c26:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6812      	ldr	r2, [r2, #0]
 8007c2e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6812      	ldr	r2, [r2, #0]
 8007c36:	430b      	orrs	r3, r1
 8007c38:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8007c3c:	e04b      	b.n	8007cd6 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d108      	bne.n	8007c5c <HAL_ADC_AnalogWDGConfig+0x254>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	0e9b      	lsrs	r3, r3, #26
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2201      	movs	r2, #1
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	e016      	b.n	8007c8a <HAL_ADC_AnalogWDGConfig+0x282>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	fa93 f3a3 	rbit	r3, r3
 8007c68:	60fb      	str	r3, [r7, #12]
  return result;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8007c74:	2320      	movs	r3, #32
 8007c76:	e003      	b.n	8007c80 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	fab3 f383 	clz	r3, r3
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2201      	movs	r2, #1
 8007c86:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	430b      	orrs	r3, r1
 8007c98:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8007c9c:	e01b      	b.n	8007cd6 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8007ca6:	4a05      	ldr	r2, [pc, #20]	; (8007cbc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8007ca8:	4619      	mov	r1, r3
 8007caa:	f7fe fac7 	bl	800623c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007cae:	e012      	b.n	8007cd6 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8007cb0:	7dc00000 	.word	0x7dc00000
 8007cb4:	0087ffff 	.word	0x0087ffff
 8007cb8:	0107ffff 	.word	0x0107ffff
 8007cbc:	0187ffff 	.word	0x0187ffff
 8007cc0:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	4619      	mov	r1, r3
 8007cd0:	f7fe fab4 	bl	800623c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007cd4:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a4f      	ldr	r2, [pc, #316]	; (8007e18 <HAL_ADC_AnalogWDGConfig+0x410>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d11a      	bne.n	8007d16 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe fc19 	bl	8006528 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	7b1b      	ldrb	r3, [r3, #12]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d105      	bne.n	8007d0a <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fc3c 	bl	8006580 <LL_ADC_EnableIT_AWD2>
 8007d08:	e01f      	b.n	8007d4a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fc66 	bl	80065e0 <LL_ADC_DisableIT_AWD2>
 8007d14:	e019      	b.n	8007d4a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fc0c 	bl	8006544 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	7b1b      	ldrb	r3, [r3, #12]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d105      	bne.n	8007d40 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fe fc31 	bl	80065a0 <LL_ADC_EnableIT_AWD3>
 8007d3e:	e004      	b.n	8007d4a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fc5b 	bl	8006600 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a33      	ldr	r2, [pc, #204]	; (8007e1c <HAL_ADC_AnalogWDGConfig+0x414>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d118      	bne.n	8007d86 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	08db      	lsrs	r3, r3, #3
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	695a      	ldr	r2, [r3, #20]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	08db      	lsrs	r3, r3, #3
 8007d78:	f003 0303 	and.w	r3, r3, #3
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	633b      	str	r3, [r7, #48]	; 0x30
 8007d84:	e035      	b.n	8007df2 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0318 	and.w	r3, r3, #24
 8007d90:	2b18      	cmp	r3, #24
 8007d92:	d00f      	beq.n	8007db4 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	08db      	lsrs	r3, r3, #3
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	f1c3 0302 	rsb	r3, r3, #2
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	f003 031e 	and.w	r3, r3, #30
 8007dae:	fa22 f303 	lsr.w	r3, r2, r3
 8007db2:	e002      	b.n	8007dba <HAL_ADC_AnalogWDGConfig+0x3b2>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f003 0318 	and.w	r3, r3, #24
 8007dc6:	2b18      	cmp	r3, #24
 8007dc8:	d00f      	beq.n	8007dea <HAL_ADC_AnalogWDGConfig+0x3e2>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	08db      	lsrs	r3, r3, #3
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	f1c3 0302 	rsb	r3, r3, #2
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	f003 031e 	and.w	r3, r3, #30
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
 8007de8:	e002      	b.n	8007df0 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	6819      	ldr	r1, [r3, #0]
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dfe:	f7fe fa4a 	bl	8006296 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3738      	adds	r7, #56	; 0x38
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	0017ffff 	.word	0x0017ffff
 8007e1c:	7dc00000 	.word	0x7dc00000

08007e20 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fb2f 	bl	800649a <LL_ADC_REG_IsConversionOngoing>
 8007e3c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fb50 	bl	80064e8 <LL_ADC_INJ_IsConversionOngoing>
 8007e48:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d103      	bne.n	8007e58 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 8098 	beq.w	8007f88 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d02a      	beq.n	8007ebc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7f5b      	ldrb	r3, [r3, #29]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d126      	bne.n	8007ebc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	7f1b      	ldrb	r3, [r3, #28]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d122      	bne.n	8007ebc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007e76:	2301      	movs	r3, #1
 8007e78:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007e7a:	e014      	b.n	8007ea6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	4a45      	ldr	r2, [pc, #276]	; (8007f94 <ADC_ConversionStop+0x174>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d90d      	bls.n	8007ea0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e88:	f043 0210 	orr.w	r2, r3, #16
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e94:	f043 0201 	orr.w	r2, r3, #1
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e074      	b.n	8007f8a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d1e3      	bne.n	8007e7c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2240      	movs	r2, #64	; 0x40
 8007eba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d014      	beq.n	8007eec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe fae7 	bl	800649a <LL_ADC_REG_IsConversionOngoing>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00c      	beq.n	8007eec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe faa4 	bl	8006424 <LL_ADC_IsDisableOngoing>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d104      	bne.n	8007eec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe fac3 	bl	8006472 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d014      	beq.n	8007f1c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe faf6 	bl	80064e8 <LL_ADC_INJ_IsConversionOngoing>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00c      	beq.n	8007f1c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fa8c 	bl	8006424 <LL_ADC_IsDisableOngoing>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fad2 	bl	80064c0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d005      	beq.n	8007f2e <ADC_ConversionStop+0x10e>
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d105      	bne.n	8007f34 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007f28:	230c      	movs	r3, #12
 8007f2a:	617b      	str	r3, [r7, #20]
        break;
 8007f2c:	e005      	b.n	8007f3a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007f2e:	2308      	movs	r3, #8
 8007f30:	617b      	str	r3, [r7, #20]
        break;
 8007f32:	e002      	b.n	8007f3a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007f34:	2304      	movs	r3, #4
 8007f36:	617b      	str	r3, [r7, #20]
        break;
 8007f38:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007f3a:	f7fd ffdd 	bl	8005ef8 <HAL_GetTick>
 8007f3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007f40:	e01b      	b.n	8007f7a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007f42:	f7fd ffd9 	bl	8005ef8 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b05      	cmp	r3, #5
 8007f4e:	d914      	bls.n	8007f7a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00d      	beq.n	8007f7a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f62:	f043 0210 	orr.w	r2, r3, #16
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6e:	f043 0201 	orr.w	r2, r3, #1
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e007      	b.n	8007f8a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1dc      	bne.n	8007f42 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3720      	adds	r7, #32
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	a33fffff 	.word	0xa33fffff

08007f98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe fa28 	bl	80063fe <LL_ADC_IsEnabled>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d169      	bne.n	8008088 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	4b36      	ldr	r3, [pc, #216]	; (8008094 <ADC_Enable+0xfc>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00d      	beq.n	8007fde <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc6:	f043 0210 	orr.w	r2, r3, #16
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd2:	f043 0201 	orr.w	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e055      	b.n	800808a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe f9e3 	bl	80063ae <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007fe8:	482b      	ldr	r0, [pc, #172]	; (8008098 <ADC_Enable+0x100>)
 8007fea:	f7fd ffd9 	bl	8005fa0 <LL_ADC_GetCommonPathInternalCh>
 8007fee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d013      	beq.n	8008020 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007ff8:	4b28      	ldr	r3, [pc, #160]	; (800809c <ADC_Enable+0x104>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	099b      	lsrs	r3, r3, #6
 8007ffe:	4a28      	ldr	r2, [pc, #160]	; (80080a0 <ADC_Enable+0x108>)
 8008000:	fba2 2303 	umull	r2, r3, r2, r3
 8008004:	099b      	lsrs	r3, r3, #6
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	4613      	mov	r3, r2
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008012:	e002      	b.n	800801a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	3b01      	subs	r3, #1
 8008018:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f9      	bne.n	8008014 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008020:	f7fd ff6a 	bl	8005ef8 <HAL_GetTick>
 8008024:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008026:	e028      	b.n	800807a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe f9e6 	bl	80063fe <LL_ADC_IsEnabled>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d104      	bne.n	8008042 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4618      	mov	r0, r3
 800803e:	f7fe f9b6 	bl	80063ae <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008042:	f7fd ff59 	bl	8005ef8 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	2b02      	cmp	r3, #2
 800804e:	d914      	bls.n	800807a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d00d      	beq.n	800807a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008062:	f043 0210 	orr.w	r2, r3, #16
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806e:	f043 0201 	orr.w	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e007      	b.n	800808a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b01      	cmp	r3, #1
 8008086:	d1cf      	bne.n	8008028 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	8000003f 	.word	0x8000003f
 8008098:	50000300 	.word	0x50000300
 800809c:	200001c4 	.word	0x200001c4
 80080a0:	053e2d63 	.word	0x053e2d63

080080a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe f9b7 	bl	8006424 <LL_ADC_IsDisableOngoing>
 80080b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe f99e 	bl	80063fe <LL_ADC_IsEnabled>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d047      	beq.n	8008158 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d144      	bne.n	8008158 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f003 030d 	and.w	r3, r3, #13
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d10c      	bne.n	80080f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe f978 	bl	80063d6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2203      	movs	r2, #3
 80080ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80080ee:	f7fd ff03 	bl	8005ef8 <HAL_GetTick>
 80080f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80080f4:	e029      	b.n	800814a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fa:	f043 0210 	orr.w	r2, r3, #16
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008106:	f043 0201 	orr.w	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e023      	b.n	800815a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008112:	f7fd fef1 	bl	8005ef8 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d914      	bls.n	800814a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00d      	beq.n	800814a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008132:	f043 0210 	orr.w	r2, r3, #16
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813e:	f043 0201 	orr.w	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e007      	b.n	800815a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1dc      	bne.n	8008112 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008178:	2b00      	cmp	r3, #0
 800817a:	d14b      	bne.n	8008214 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008180:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d021      	beq.n	80081da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd ffac 	bl	80060f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d032      	beq.n	800820c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d12b      	bne.n	800820c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d11f      	bne.n	800820c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d0:	f043 0201 	orr.w	r2, r3, #1
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80081d8:	e018      	b.n	800820c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d111      	bne.n	800820c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d105      	bne.n	800820c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008204:	f043 0201 	orr.w	r2, r3, #1
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7fa ff5b 	bl	80030c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008212:	e00e      	b.n	8008232 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7fe fff7 	bl	8007214 <HAL_ADC_ErrorCallback>
}
 8008226:	e004      	b.n	8008232 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f7fe ffd9 	bl	8007200 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008274:	f043 0204 	orr.w	r2, r3, #4
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f7fe ffc9 	bl	8007214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008282:	bf00      	nop
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <LL_ADC_IsEnabled>:
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b01      	cmp	r3, #1
 800829c:	d101      	bne.n	80082a2 <LL_ADC_IsEnabled+0x18>
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <LL_ADC_IsEnabled+0x1a>
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <LL_ADC_StartCalibration>:
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80082c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80082cc:	4313      	orrs	r3, r2
 80082ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	609a      	str	r2, [r3, #8]
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <LL_ADC_IsCalibrationOnGoing>:
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082f6:	d101      	bne.n	80082fc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80082f8:	2301      	movs	r3, #1
 80082fa:	e000      	b.n	80082fe <LL_ADC_IsCalibrationOnGoing+0x1c>
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <LL_ADC_REG_IsConversionOngoing>:
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0304 	and.w	r3, r3, #4
 800831a:	2b04      	cmp	r3, #4
 800831c:	d101      	bne.n	8008322 <LL_ADC_REG_IsConversionOngoing+0x18>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800833a:	2300      	movs	r3, #0
 800833c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_ADCEx_Calibration_Start+0x1c>
 8008348:	2302      	movs	r3, #2
 800834a:	e04d      	b.n	80083e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff fea5 	bl	80080a4 <ADC_Disable>
 800835a:	4603      	mov	r3, r0
 800835c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d136      	bne.n	80083d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008368:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800836c:	f023 0302 	bic.w	r3, r3, #2
 8008370:	f043 0202 	orr.w	r2, r3, #2
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff ff96 	bl	80082b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008384:	e014      	b.n	80083b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	3301      	adds	r3, #1
 800838a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4a18      	ldr	r2, [pc, #96]	; (80083f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d90d      	bls.n	80083b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008398:	f023 0312 	bic.w	r3, r3, #18
 800839c:	f043 0210 	orr.w	r2, r3, #16
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e01b      	b.n	80083e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff ff94 	bl	80082e2 <LL_ADC_IsCalibrationOnGoing>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e2      	bne.n	8008386 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c4:	f023 0303 	bic.w	r3, r3, #3
 80083c8:	f043 0201 	orr.w	r2, r3, #1
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80083d0:	e005      	b.n	80083de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d6:	f043 0210 	orr.w	r2, r3, #16
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	0004de01 	.word	0x0004de01

080083f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008458:	b590      	push	{r4, r7, lr}
 800845a:	b0a1      	sub	sp, #132	; 0x84
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008472:	2302      	movs	r3, #2
 8008474:	e08b      	b.n	800858e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800847e:	2300      	movs	r3, #0
 8008480:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008482:	2300      	movs	r3, #0
 8008484:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800848e:	d102      	bne.n	8008496 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008490:	4b41      	ldr	r3, [pc, #260]	; (8008598 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	e001      	b.n	800849a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008496:	2300      	movs	r3, #0
 8008498:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10b      	bne.n	80084b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a4:	f043 0220 	orr.w	r2, r3, #32
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e06a      	b.n	800858e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff ff25 	bl	800830a <LL_ADC_REG_IsConversionOngoing>
 80084c0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff ff1f 	bl	800830a <LL_ADC_REG_IsConversionOngoing>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d14c      	bne.n	800856c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80084d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d149      	bne.n	800856c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80084d8:	4b30      	ldr	r3, [pc, #192]	; (800859c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80084da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d028      	beq.n	8008536 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80084e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	6859      	ldr	r1, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084f6:	035b      	lsls	r3, r3, #13
 80084f8:	430b      	orrs	r3, r1
 80084fa:	431a      	orrs	r2, r3
 80084fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008500:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008504:	f7ff fec1 	bl	800828a <LL_ADC_IsEnabled>
 8008508:	4604      	mov	r4, r0
 800850a:	4823      	ldr	r0, [pc, #140]	; (8008598 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800850c:	f7ff febd 	bl	800828a <LL_ADC_IsEnabled>
 8008510:	4603      	mov	r3, r0
 8008512:	4323      	orrs	r3, r4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d133      	bne.n	8008580 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008520:	f023 030f 	bic.w	r3, r3, #15
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	6811      	ldr	r1, [r2, #0]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	6892      	ldr	r2, [r2, #8]
 800852c:	430a      	orrs	r2, r1
 800852e:	431a      	orrs	r2, r3
 8008530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008532:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008534:	e024      	b.n	8008580 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800853e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008540:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008542:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008546:	f7ff fea0 	bl	800828a <LL_ADC_IsEnabled>
 800854a:	4604      	mov	r4, r0
 800854c:	4812      	ldr	r0, [pc, #72]	; (8008598 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800854e:	f7ff fe9c 	bl	800828a <LL_ADC_IsEnabled>
 8008552:	4603      	mov	r3, r0
 8008554:	4323      	orrs	r3, r4
 8008556:	2b00      	cmp	r3, #0
 8008558:	d112      	bne.n	8008580 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800855a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008562:	f023 030f 	bic.w	r3, r3, #15
 8008566:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008568:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800856a:	e009      	b.n	8008580 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008570:	f043 0220 	orr.w	r2, r3, #32
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800857e:	e000      	b.n	8008582 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008580:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800858a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800858e:	4618      	mov	r0, r3
 8008590:	3784      	adds	r7, #132	; 0x84
 8008592:	46bd      	mov	sp, r7
 8008594:	bd90      	pop	{r4, r7, pc}
 8008596:	bf00      	nop
 8008598:	50000100 	.word	0x50000100
 800859c:	50000300 	.word	0x50000300

080085a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085b0:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <__NVIC_SetPriorityGrouping+0x44>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085bc:	4013      	ands	r3, r2
 80085be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085d2:	4a04      	ldr	r2, [pc, #16]	; (80085e4 <__NVIC_SetPriorityGrouping+0x44>)
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	60d3      	str	r3, [r2, #12]
}
 80085d8:	bf00      	nop
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	e000ed00 	.word	0xe000ed00

080085e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085ec:	4b04      	ldr	r3, [pc, #16]	; (8008600 <__NVIC_GetPriorityGrouping+0x18>)
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	0a1b      	lsrs	r3, r3, #8
 80085f2:	f003 0307 	and.w	r3, r3, #7
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	e000ed00 	.word	0xe000ed00

08008604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800860e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008612:	2b00      	cmp	r3, #0
 8008614:	db0b      	blt.n	800862e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	f003 021f 	and.w	r2, r3, #31
 800861c:	4907      	ldr	r1, [pc, #28]	; (800863c <__NVIC_EnableIRQ+0x38>)
 800861e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	2001      	movs	r0, #1
 8008626:	fa00 f202 	lsl.w	r2, r0, r2
 800862a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800862e:	bf00      	nop
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	e000e100 	.word	0xe000e100

08008640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800864c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008650:	2b00      	cmp	r3, #0
 8008652:	db0a      	blt.n	800866a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	b2da      	uxtb	r2, r3
 8008658:	490c      	ldr	r1, [pc, #48]	; (800868c <__NVIC_SetPriority+0x4c>)
 800865a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865e:	0112      	lsls	r2, r2, #4
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	440b      	add	r3, r1
 8008664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008668:	e00a      	b.n	8008680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	4908      	ldr	r1, [pc, #32]	; (8008690 <__NVIC_SetPriority+0x50>)
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	3b04      	subs	r3, #4
 8008678:	0112      	lsls	r2, r2, #4
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	440b      	add	r3, r1
 800867e:	761a      	strb	r2, [r3, #24]
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	e000e100 	.word	0xe000e100
 8008690:	e000ed00 	.word	0xe000ed00

08008694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008694:	b480      	push	{r7}
 8008696:	b089      	sub	sp, #36	; 0x24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f1c3 0307 	rsb	r3, r3, #7
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	bf28      	it	cs
 80086b2:	2304      	movcs	r3, #4
 80086b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	3304      	adds	r3, #4
 80086ba:	2b06      	cmp	r3, #6
 80086bc:	d902      	bls.n	80086c4 <NVIC_EncodePriority+0x30>
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	3b03      	subs	r3, #3
 80086c2:	e000      	b.n	80086c6 <NVIC_EncodePriority+0x32>
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086c8:	f04f 32ff 	mov.w	r2, #4294967295
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
 80086d2:	43da      	mvns	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	401a      	ands	r2, r3
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086dc:	f04f 31ff 	mov.w	r1, #4294967295
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	fa01 f303 	lsl.w	r3, r1, r3
 80086e6:	43d9      	mvns	r1, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086ec:	4313      	orrs	r3, r2
         );
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3724      	adds	r7, #36	; 0x24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
	...

080086fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3b01      	subs	r3, #1
 8008708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800870c:	d301      	bcc.n	8008712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800870e:	2301      	movs	r3, #1
 8008710:	e00f      	b.n	8008732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008712:	4a0a      	ldr	r2, [pc, #40]	; (800873c <SysTick_Config+0x40>)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3b01      	subs	r3, #1
 8008718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800871a:	210f      	movs	r1, #15
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	f7ff ff8e 	bl	8008640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <SysTick_Config+0x40>)
 8008726:	2200      	movs	r2, #0
 8008728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800872a:	4b04      	ldr	r3, [pc, #16]	; (800873c <SysTick_Config+0x40>)
 800872c:	2207      	movs	r2, #7
 800872e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	e000e010 	.word	0xe000e010

08008740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff ff29 	bl	80085a0 <__NVIC_SetPriorityGrouping>
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	4603      	mov	r3, r0
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	607a      	str	r2, [r7, #4]
 8008762:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008764:	f7ff ff40 	bl	80085e8 <__NVIC_GetPriorityGrouping>
 8008768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	6978      	ldr	r0, [r7, #20]
 8008770:	f7ff ff90 	bl	8008694 <NVIC_EncodePriority>
 8008774:	4602      	mov	r2, r0
 8008776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff ff5f 	bl	8008640 <__NVIC_SetPriority>
}
 8008782:	bf00      	nop
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	4603      	mov	r3, r0
 8008792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff ff33 	bl	8008604 <__NVIC_EnableIRQ>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff ffa4 	bl	80086fc <SysTick_Config>
 80087b4:	4603      	mov	r3, r0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e054      	b.n	800887c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	7f5b      	ldrb	r3, [r3, #29]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7fc fa7e 	bl	8004ce4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	791b      	ldrb	r3, [r3, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10c      	bne.n	8008810 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a22      	ldr	r2, [pc, #136]	; (8008884 <HAL_CRC_Init+0xc4>)
 80087fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0218 	bic.w	r2, r2, #24
 800880c:	609a      	str	r2, [r3, #8]
 800880e:	e00c      	b.n	800882a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6899      	ldr	r1, [r3, #8]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	461a      	mov	r2, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f948 	bl	8008ab0 <HAL_CRCEx_Polynomial_Set>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e028      	b.n	800887c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	795b      	ldrb	r3, [r3, #5]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d105      	bne.n	800883e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f04f 32ff 	mov.w	r2, #4294967295
 800883a:	611a      	str	r2, [r3, #16]
 800883c:	e004      	b.n	8008848 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	6912      	ldr	r2, [r2, #16]
 8008846:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	699a      	ldr	r2, [r3, #24]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	04c11db7 	.word	0x04c11db7

08008888 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008894:	2300      	movs	r3, #0
 8008896:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2202      	movs	r2, #2
 800889c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0201 	orr.w	r2, r2, #1
 80088ac:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d006      	beq.n	80088c4 <HAL_CRC_Calculate+0x3c>
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d829      	bhi.n	800890e <HAL_CRC_Calculate+0x86>
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d019      	beq.n	80088f2 <HAL_CRC_Calculate+0x6a>
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d01e      	beq.n	8008900 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80088c2:	e024      	b.n	800890e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80088c4:	2300      	movs	r3, #0
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	e00a      	b.n	80088e0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	441a      	add	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6812      	ldr	r2, [r2, #0]
 80088d8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	3301      	adds	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d3f0      	bcc.n	80088ca <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	613b      	str	r3, [r7, #16]
      break;
 80088f0:	e00e      	b.n	8008910 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 f812 	bl	8008920 <CRC_Handle_8>
 80088fc:	6138      	str	r0, [r7, #16]
      break;
 80088fe:	e007      	b.n	8008910 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f899 	bl	8008a3c <CRC_Handle_16>
 800890a:	6138      	str	r0, [r7, #16]
      break;
 800890c:	e000      	b.n	8008910 <HAL_CRC_Calculate+0x88>
      break;
 800890e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8008916:	693b      	ldr	r3, [r7, #16]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8008920:	b480      	push	{r7}
 8008922:	b089      	sub	sp, #36	; 0x24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800892c:	2300      	movs	r3, #0
 800892e:	61fb      	str	r3, [r7, #28]
 8008930:	e023      	b.n	800897a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	4413      	add	r3, r2
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	3301      	adds	r3, #1
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	440b      	add	r3, r1
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800894c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	3302      	adds	r3, #2
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	440b      	add	r3, r1
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800895c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	3303      	adds	r3, #3
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	440b      	add	r3, r1
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008970:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008972:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	3301      	adds	r3, #1
 8008978:	61fb      	str	r3, [r7, #28]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	089b      	lsrs	r3, r3, #2
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	429a      	cmp	r2, r3
 8008982:	d3d6      	bcc.n	8008932 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d04d      	beq.n	8008a2a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	2b01      	cmp	r3, #1
 8008996:	d107      	bne.n	80089a8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	4413      	add	r3, r2
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	6812      	ldr	r2, [r2, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d116      	bne.n	80089e0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	4413      	add	r3, r2
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	b21a      	sxth	r2, r3
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	3301      	adds	r3, #1
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	440b      	add	r3, r1
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	b21b      	sxth	r3, r3
 80089ce:	4313      	orrs	r3, r2
 80089d0:	b21b      	sxth	r3, r3
 80089d2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	8b7a      	ldrh	r2, [r7, #26]
 80089de:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d11f      	bne.n	8008a2a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	b21a      	sxth	r2, r3
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	3301      	adds	r3, #1
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	440b      	add	r3, r1
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	b21b      	sxth	r3, r3
 8008a06:	4313      	orrs	r3, r2
 8008a08:	b21b      	sxth	r3, r3
 8008a0a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	8b7a      	ldrh	r2, [r7, #26]
 8008a16:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	4413      	add	r3, r2
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3724      	adds	r7, #36	; 0x24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008a48:	2300      	movs	r3, #0
 8008a4a:	617b      	str	r3, [r7, #20]
 8008a4c:	e013      	b.n	8008a76 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	4413      	add	r3, r2
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	041a      	lsls	r2, r3, #16
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	3302      	adds	r3, #2
 8008a60:	68b9      	ldr	r1, [r7, #8]
 8008a62:	440b      	add	r3, r1
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	4619      	mov	r1, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	3301      	adds	r3, #1
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	085b      	lsrs	r3, r3, #1
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d3e6      	bcc.n	8008a4e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	4413      	add	r3, r2
 8008a98:	881a      	ldrh	r2, [r3, #0]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008ac0:	231f      	movs	r3, #31
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d102      	bne.n	8008ad4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	75fb      	strb	r3, [r7, #23]
 8008ad2:	e063      	b.n	8008b9c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008ad4:	bf00      	nop
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	1e5a      	subs	r2, r3, #1
 8008ada:	613a      	str	r2, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d009      	beq.n	8008af4 <HAL_CRCEx_Polynomial_Set+0x44>
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f003 031f 	and.w	r3, r3, #31
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0f0      	beq.n	8008ad6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b18      	cmp	r3, #24
 8008af8:	d846      	bhi.n	8008b88 <HAL_CRCEx_Polynomial_Set+0xd8>
 8008afa:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <HAL_CRCEx_Polynomial_Set+0x50>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b8f 	.word	0x08008b8f
 8008b04:	08008b89 	.word	0x08008b89
 8008b08:	08008b89 	.word	0x08008b89
 8008b0c:	08008b89 	.word	0x08008b89
 8008b10:	08008b89 	.word	0x08008b89
 8008b14:	08008b89 	.word	0x08008b89
 8008b18:	08008b89 	.word	0x08008b89
 8008b1c:	08008b89 	.word	0x08008b89
 8008b20:	08008b7d 	.word	0x08008b7d
 8008b24:	08008b89 	.word	0x08008b89
 8008b28:	08008b89 	.word	0x08008b89
 8008b2c:	08008b89 	.word	0x08008b89
 8008b30:	08008b89 	.word	0x08008b89
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b89 	.word	0x08008b89
 8008b3c:	08008b89 	.word	0x08008b89
 8008b40:	08008b71 	.word	0x08008b71
 8008b44:	08008b89 	.word	0x08008b89
 8008b48:	08008b89 	.word	0x08008b89
 8008b4c:	08008b89 	.word	0x08008b89
 8008b50:	08008b89 	.word	0x08008b89
 8008b54:	08008b89 	.word	0x08008b89
 8008b58:	08008b89 	.word	0x08008b89
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	08008b65 	.word	0x08008b65
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	d913      	bls.n	8008b92 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008b6e:	e010      	b.n	8008b92 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	2b07      	cmp	r3, #7
 8008b74:	d90f      	bls.n	8008b96 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008b7a:	e00c      	b.n	8008b96 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b0f      	cmp	r3, #15
 8008b80:	d90b      	bls.n	8008b9a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008b86:	e008      	b.n	8008b9a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	75fb      	strb	r3, [r7, #23]
        break;
 8008b8c:	e006      	b.n	8008b9c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b8e:	bf00      	nop
 8008b90:	e004      	b.n	8008b9c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b92:	bf00      	nop
 8008b94:	e002      	b.n	8008b9c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b96:	bf00      	nop
 8008b98:	e000      	b.n	8008b9c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b9a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10d      	bne.n	8008bbe <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f023 0118 	bic.w	r1, r3, #24
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e08d      	b.n	8008cfa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	4b47      	ldr	r3, [pc, #284]	; (8008d04 <HAL_DMA_Init+0x138>)
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d80f      	bhi.n	8008c0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	4b45      	ldr	r3, [pc, #276]	; (8008d08 <HAL_DMA_Init+0x13c>)
 8008bf2:	4413      	add	r3, r2
 8008bf4:	4a45      	ldr	r2, [pc, #276]	; (8008d0c <HAL_DMA_Init+0x140>)
 8008bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfa:	091b      	lsrs	r3, r3, #4
 8008bfc:	009a      	lsls	r2, r3, #2
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a42      	ldr	r2, [pc, #264]	; (8008d10 <HAL_DMA_Init+0x144>)
 8008c06:	641a      	str	r2, [r3, #64]	; 0x40
 8008c08:	e00e      	b.n	8008c28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	4b40      	ldr	r3, [pc, #256]	; (8008d14 <HAL_DMA_Init+0x148>)
 8008c12:	4413      	add	r3, r2
 8008c14:	4a3d      	ldr	r2, [pc, #244]	; (8008d0c <HAL_DMA_Init+0x140>)
 8008c16:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1a:	091b      	lsrs	r3, r3, #4
 8008c1c:	009a      	lsls	r2, r3, #2
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a3c      	ldr	r2, [pc, #240]	; (8008d18 <HAL_DMA_Init+0x14c>)
 8008c26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa1e 	bl	80090bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c88:	d102      	bne.n	8008c90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008ca4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d010      	beq.n	8008cd0 <HAL_DMA_Init+0x104>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	2b04      	cmp	r3, #4
 8008cb4:	d80c      	bhi.n	8008cd0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa3e 	bl	8009138 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008ccc:	605a      	str	r2, [r3, #4]
 8008cce:	e008      	b.n	8008ce2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	40020407 	.word	0x40020407
 8008d08:	bffdfff8 	.word	0xbffdfff8
 8008d0c:	cccccccd 	.word	0xcccccccd
 8008d10:	40020000 	.word	0x40020000
 8008d14:	bffdfbf8 	.word	0xbffdfbf8
 8008d18:	40020400 	.word	0x40020400

08008d1c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d101      	bne.n	8008d3c <HAL_DMA_Start_IT+0x20>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e066      	b.n	8008e0a <HAL_DMA_Start_IT+0xee>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d155      	bne.n	8008dfc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2202      	movs	r2, #2
 8008d54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 0201 	bic.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 f962 	bl	800903e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d008      	beq.n	8008d94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f042 020e 	orr.w	r2, r2, #14
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	e00f      	b.n	8008db4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0204 	bic.w	r2, r2, #4
 8008da2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 020a 	orr.w	r2, r2, #10
 8008db2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d007      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d007      	beq.n	8008dea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008de8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0201 	orr.w	r2, r2, #1
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e005      	b.n	8008e08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008e04:	2302      	movs	r3, #2
 8008e06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b085      	sub	sp, #20
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d005      	beq.n	8008e36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
 8008e34:	e037      	b.n	8008ea6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 020e 	bic.w	r2, r2, #14
 8008e44:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e54:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f022 0201 	bic.w	r2, r2, #1
 8008e64:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6a:	f003 021f 	and.w	r2, r3, #31
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	2101      	movs	r1, #1
 8008e74:	fa01 f202 	lsl.w	r2, r1, r2
 8008e78:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008e82:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00c      	beq.n	8008ea6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e9a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008ea4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee0:	f003 031f 	and.w	r3, r3, #31
 8008ee4:	2204      	movs	r2, #4
 8008ee6:	409a      	lsls	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4013      	ands	r3, r2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d026      	beq.n	8008f3e <HAL_DMA_IRQHandler+0x7a>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d021      	beq.n	8008f3e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0320 	and.w	r3, r3, #32
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d107      	bne.n	8008f18 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0204 	bic.w	r2, r2, #4
 8008f16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f1c:	f003 021f 	and.w	r2, r3, #31
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f24:	2104      	movs	r1, #4
 8008f26:	fa01 f202 	lsl.w	r2, r1, r2
 8008f2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d071      	beq.n	8009018 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008f3c:	e06c      	b.n	8009018 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f42:	f003 031f 	and.w	r3, r3, #31
 8008f46:	2202      	movs	r2, #2
 8008f48:	409a      	lsls	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d02e      	beq.n	8008fb0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d029      	beq.n	8008fb0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10b      	bne.n	8008f82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f022 020a 	bic.w	r2, r2, #10
 8008f78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f86:	f003 021f 	and.w	r2, r3, #31
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	2102      	movs	r1, #2
 8008f90:	fa01 f202 	lsl.w	r2, r1, r2
 8008f94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d038      	beq.n	8009018 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008fae:	e033      	b.n	8009018 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb4:	f003 031f 	and.w	r3, r3, #31
 8008fb8:	2208      	movs	r2, #8
 8008fba:	409a      	lsls	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d02a      	beq.n	800901a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f003 0308 	and.w	r3, r3, #8
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d025      	beq.n	800901a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 020e 	bic.w	r2, r2, #14
 8008fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	f003 021f 	and.w	r2, r3, #31
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	2101      	movs	r1, #1
 8008fec:	fa01 f202 	lsl.w	r2, r1, r2
 8008ff0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900c:	2b00      	cmp	r3, #0
 800900e:	d004      	beq.n	800901a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009018:	bf00      	nop
 800901a:	bf00      	nop
}
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009030:	b2db      	uxtb	r3, r3
}
 8009032:	4618      	mov	r0, r3
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800903e:	b480      	push	{r7}
 8009040:	b085      	sub	sp, #20
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
 800904a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009054:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905a:	2b00      	cmp	r3, #0
 800905c:	d004      	beq.n	8009068 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009066:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906c:	f003 021f 	and.w	r2, r3, #31
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009074:	2101      	movs	r1, #1
 8009076:	fa01 f202 	lsl.w	r2, r1, r2
 800907a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2b10      	cmp	r3, #16
 800908a:	d108      	bne.n	800909e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800909c:	e007      	b.n	80090ae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	60da      	str	r2, [r3, #12]
}
 80090ae:	bf00      	nop
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
	...

080090bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b16      	ldr	r3, [pc, #88]	; (8009124 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d802      	bhi.n	80090d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80090d0:	4b15      	ldr	r3, [pc, #84]	; (8009128 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	e001      	b.n	80090da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80090d6:	4b15      	ldr	r3, [pc, #84]	; (800912c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80090d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	3b08      	subs	r3, #8
 80090e6:	4a12      	ldr	r2, [pc, #72]	; (8009130 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80090e8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ec:	091b      	lsrs	r3, r3, #4
 80090ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f4:	089b      	lsrs	r3, r3, #2
 80090f6:	009a      	lsls	r2, r3, #2
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	4413      	add	r3, r2
 80090fc:	461a      	mov	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a0b      	ldr	r2, [pc, #44]	; (8009134 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009106:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f003 031f 	and.w	r3, r3, #31
 800910e:	2201      	movs	r2, #1
 8009110:	409a      	lsls	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009116:	bf00      	nop
 8009118:	371c      	adds	r7, #28
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40020407 	.word	0x40020407
 8009128:	40020800 	.word	0x40020800
 800912c:	40020820 	.word	0x40020820
 8009130:	cccccccd 	.word	0xcccccccd
 8009134:	40020880 	.word	0x40020880

08009138 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	461a      	mov	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a08      	ldr	r2, [pc, #32]	; (800917c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800915a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3b01      	subs	r3, #1
 8009160:	f003 031f 	and.w	r3, r3, #31
 8009164:	2201      	movs	r2, #1
 8009166:	409a      	lsls	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	1000823f 	.word	0x1000823f
 800917c:	40020940 	.word	0x40020940

08009180 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009192:	4b2f      	ldr	r3, [pc, #188]	; (8009250 <HAL_FLASH_Program+0xd0>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d101      	bne.n	800919e <HAL_FLASH_Program+0x1e>
 800919a:	2302      	movs	r3, #2
 800919c:	e053      	b.n	8009246 <HAL_FLASH_Program+0xc6>
 800919e:	4b2c      	ldr	r3, [pc, #176]	; (8009250 <HAL_FLASH_Program+0xd0>)
 80091a0:	2201      	movs	r2, #1
 80091a2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80091a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091a8:	f000 f892 	bl	80092d0 <FLASH_WaitForLastOperation>
 80091ac:	4603      	mov	r3, r0
 80091ae:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d143      	bne.n	800923e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091b6:	4b26      	ldr	r3, [pc, #152]	; (8009250 <HAL_FLASH_Program+0xd0>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80091bc:	4b25      	ldr	r3, [pc, #148]	; (8009254 <HAL_FLASH_Program+0xd4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80091c8:	4b22      	ldr	r3, [pc, #136]	; (8009254 <HAL_FLASH_Program+0xd4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a21      	ldr	r2, [pc, #132]	; (8009254 <HAL_FLASH_Program+0xd4>)
 80091ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091d2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80091d4:	4b1e      	ldr	r3, [pc, #120]	; (8009250 <HAL_FLASH_Program+0xd0>)
 80091d6:	2202      	movs	r2, #2
 80091d8:	771a      	strb	r2, [r3, #28]
 80091da:	e002      	b.n	80091e2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80091dc:	4b1c      	ldr	r3, [pc, #112]	; (8009250 <HAL_FLASH_Program+0xd0>)
 80091de:	2200      	movs	r2, #0
 80091e0:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d107      	bne.n	80091f8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80091e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ec:	68b8      	ldr	r0, [r7, #8]
 80091ee:	f000 f8c3 	bl	8009378 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80091f2:	2301      	movs	r3, #1
 80091f4:	613b      	str	r3, [r7, #16]
 80091f6:	e010      	b.n	800921a <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d002      	beq.n	8009204 <HAL_FLASH_Program+0x84>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d10a      	bne.n	800921a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	68b8      	ldr	r0, [r7, #8]
 800920a:	f000 f8db 	bl	80093c4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d102      	bne.n	800921a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009214:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009218:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800921a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800921e:	f000 f857 	bl	80092d0 <FLASH_WaitForLastOperation>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d006      	beq.n	800923a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800922c:	4b09      	ldr	r3, [pc, #36]	; (8009254 <HAL_FLASH_Program+0xd4>)
 800922e:	695a      	ldr	r2, [r3, #20]
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	43db      	mvns	r3, r3
 8009234:	4907      	ldr	r1, [pc, #28]	; (8009254 <HAL_FLASH_Program+0xd4>)
 8009236:	4013      	ands	r3, r2
 8009238:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800923a:	f000 f9d3 	bl	80095e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800923e:	4b04      	ldr	r3, [pc, #16]	; (8009250 <HAL_FLASH_Program+0xd0>)
 8009240:	2200      	movs	r2, #0
 8009242:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	200001e0 	.word	0x200001e0
 8009254:	40022000 	.word	0x40022000

08009258 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009262:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <HAL_FLASH_Unlock+0x38>)
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	da0b      	bge.n	8009282 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800926a:	4b09      	ldr	r3, [pc, #36]	; (8009290 <HAL_FLASH_Unlock+0x38>)
 800926c:	4a09      	ldr	r2, [pc, #36]	; (8009294 <HAL_FLASH_Unlock+0x3c>)
 800926e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <HAL_FLASH_Unlock+0x38>)
 8009272:	4a09      	ldr	r2, [pc, #36]	; (8009298 <HAL_FLASH_Unlock+0x40>)
 8009274:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009276:	4b06      	ldr	r3, [pc, #24]	; (8009290 <HAL_FLASH_Unlock+0x38>)
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	2b00      	cmp	r3, #0
 800927c:	da01      	bge.n	8009282 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009282:	79fb      	ldrb	r3, [r7, #7]
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	40022000 	.word	0x40022000
 8009294:	45670123 	.word	0x45670123
 8009298:	cdef89ab 	.word	0xcdef89ab

0800929c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <HAL_FLASH_Lock+0x30>)
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	4a08      	ldr	r2, [pc, #32]	; (80092cc <HAL_FLASH_Lock+0x30>)
 80092ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092b0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <HAL_FLASH_Lock+0x30>)
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	da01      	bge.n	80092be <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80092be:	79fb      	ldrb	r3, [r7, #7]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	40022000 	.word	0x40022000

080092d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80092d8:	f7fc fe0e 	bl	8005ef8 <HAL_GetTick>
 80092dc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80092de:	e009      	b.n	80092f4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80092e0:	f7fc fe0a 	bl	8005ef8 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d201      	bcs.n	80092f4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e038      	b.n	8009366 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80092f4:	4b1e      	ldr	r3, [pc, #120]	; (8009370 <FLASH_WaitForLastOperation+0xa0>)
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009300:	d0ee      	beq.n	80092e0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009302:	4b1b      	ldr	r3, [pc, #108]	; (8009370 <FLASH_WaitForLastOperation+0xa0>)
 8009304:	691a      	ldr	r2, [r3, #16]
 8009306:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800930a:	4013      	ands	r3, r2
 800930c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d01e      	beq.n	8009352 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009314:	4b17      	ldr	r3, [pc, #92]	; (8009374 <FLASH_WaitForLastOperation+0xa4>)
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4313      	orrs	r3, r2
 800931c:	4a15      	ldr	r2, [pc, #84]	; (8009374 <FLASH_WaitForLastOperation+0xa4>)
 800931e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <FLASH_WaitForLastOperation+0x6a>
 800932a:	4b11      	ldr	r3, [pc, #68]	; (8009370 <FLASH_WaitForLastOperation+0xa0>)
 800932c:	699a      	ldr	r2, [r3, #24]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009334:	490e      	ldr	r1, [pc, #56]	; (8009370 <FLASH_WaitForLastOperation+0xa0>)
 8009336:	4313      	orrs	r3, r2
 8009338:	618b      	str	r3, [r1, #24]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d004      	beq.n	800934e <FLASH_WaitForLastOperation+0x7e>
 8009344:	4a0a      	ldr	r2, [pc, #40]	; (8009370 <FLASH_WaitForLastOperation+0xa0>)
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800934c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e009      	b.n	8009366 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009352:	4b07      	ldr	r3, [pc, #28]	; (8009370 <FLASH_WaitForLastOperation+0xa0>)
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b01      	cmp	r3, #1
 800935c:	d102      	bne.n	8009364 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800935e:	4b04      	ldr	r3, [pc, #16]	; (8009370 <FLASH_WaitForLastOperation+0xa0>)
 8009360:	2201      	movs	r2, #1
 8009362:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	40022000 	.word	0x40022000
 8009374:	200001e0 	.word	0x200001e0

08009378 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009384:	4b0e      	ldr	r3, [pc, #56]	; (80093c0 <FLASH_Program_DoubleWord+0x48>)
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	4a0d      	ldr	r2, [pc, #52]	; (80093c0 <FLASH_Program_DoubleWord+0x48>)
 800938a:	f043 0301 	orr.w	r3, r3, #1
 800938e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009396:	f3bf 8f6f 	isb	sy
}
 800939a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800939c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	000a      	movs	r2, r1
 80093aa:	2300      	movs	r3, #0
 80093ac:	68f9      	ldr	r1, [r7, #12]
 80093ae:	3104      	adds	r1, #4
 80093b0:	4613      	mov	r3, r2
 80093b2:	600b      	str	r3, [r1, #0]
}
 80093b4:	bf00      	nop
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	40022000 	.word	0x40022000

080093c4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b089      	sub	sp, #36	; 0x24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80093ce:	2340      	movs	r3, #64	; 0x40
 80093d0:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80093da:	4b14      	ldr	r3, [pc, #80]	; (800942c <FLASH_Program_Fast+0x68>)
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	4a13      	ldr	r2, [pc, #76]	; (800942c <FLASH_Program_Fast+0x68>)
 80093e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093e6:	f3ef 8310 	mrs	r3, PRIMASK
 80093ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80093ec:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80093ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80093f0:	b672      	cpsid	i
}
 80093f2:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	3304      	adds	r3, #4
 8009400:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	3304      	adds	r3, #4
 8009406:	617b      	str	r3, [r7, #20]
    row_index--;
 8009408:	7ffb      	ldrb	r3, [r7, #31]
 800940a:	3b01      	subs	r3, #1
 800940c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800940e:	7ffb      	ldrb	r3, [r7, #31]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1ef      	bne.n	80093f4 <FLASH_Program_Fast+0x30>
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f383 8810 	msr	PRIMASK, r3
}
 800941e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009420:	bf00      	nop
 8009422:	3724      	adds	r7, #36	; 0x24
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	40022000 	.word	0x40022000

08009430 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800943a:	4b47      	ldr	r3, [pc, #284]	; (8009558 <HAL_FLASHEx_Erase+0x128>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_FLASHEx_Erase+0x16>
 8009442:	2302      	movs	r3, #2
 8009444:	e083      	b.n	800954e <HAL_FLASHEx_Erase+0x11e>
 8009446:	4b44      	ldr	r3, [pc, #272]	; (8009558 <HAL_FLASHEx_Erase+0x128>)
 8009448:	2201      	movs	r2, #1
 800944a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800944c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009450:	f7ff ff3e 	bl	80092d0 <FLASH_WaitForLastOperation>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d173      	bne.n	8009546 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800945e:	4b3e      	ldr	r3, [pc, #248]	; (8009558 <HAL_FLASHEx_Erase+0x128>)
 8009460:	2200      	movs	r2, #0
 8009462:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009464:	4b3d      	ldr	r3, [pc, #244]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800946c:	2b00      	cmp	r3, #0
 800946e:	d013      	beq.n	8009498 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009470:	4b3a      	ldr	r3, [pc, #232]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009478:	2b00      	cmp	r3, #0
 800947a:	d009      	beq.n	8009490 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800947c:	4b37      	ldr	r3, [pc, #220]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a36      	ldr	r2, [pc, #216]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 8009482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009486:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009488:	4b33      	ldr	r3, [pc, #204]	; (8009558 <HAL_FLASHEx_Erase+0x128>)
 800948a:	2203      	movs	r2, #3
 800948c:	771a      	strb	r2, [r3, #28]
 800948e:	e016      	b.n	80094be <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009490:	4b31      	ldr	r3, [pc, #196]	; (8009558 <HAL_FLASHEx_Erase+0x128>)
 8009492:	2201      	movs	r2, #1
 8009494:	771a      	strb	r2, [r3, #28]
 8009496:	e012      	b.n	80094be <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009498:	4b30      	ldr	r3, [pc, #192]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d009      	beq.n	80094b8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80094a4:	4b2d      	ldr	r3, [pc, #180]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a2c      	ldr	r2, [pc, #176]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 80094aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094ae:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80094b0:	4b29      	ldr	r3, [pc, #164]	; (8009558 <HAL_FLASHEx_Erase+0x128>)
 80094b2:	2202      	movs	r2, #2
 80094b4:	771a      	strb	r2, [r3, #28]
 80094b6:	e002      	b.n	80094be <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80094b8:	4b27      	ldr	r3, [pc, #156]	; (8009558 <HAL_FLASHEx_Erase+0x128>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d111      	bne.n	80094ea <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f848 	bl	8009560 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80094d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094d4:	f7ff fefc 	bl	80092d0 <FLASH_WaitForLastOperation>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80094dc:	4b1f      	ldr	r3, [pc, #124]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	4a1e      	ldr	r2, [pc, #120]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 80094e2:	f023 0304 	bic.w	r3, r3, #4
 80094e6:	6153      	str	r3, [r2, #20]
 80094e8:	e02b      	b.n	8009542 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	f04f 32ff 	mov.w	r2, #4294967295
 80094f0:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	60bb      	str	r3, [r7, #8]
 80094f8:	e01b      	b.n	8009532 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	4619      	mov	r1, r3
 8009500:	68b8      	ldr	r0, [r7, #8]
 8009502:	f000 f84b 	bl	800959c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800950a:	f7ff fee1 	bl	80092d0 <FLASH_WaitForLastOperation>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009512:	4b12      	ldr	r3, [pc, #72]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	4a11      	ldr	r2, [pc, #68]	; (800955c <HAL_FLASHEx_Erase+0x12c>)
 8009518:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 800951c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	601a      	str	r2, [r3, #0]
          break;
 800952a:	e00a      	b.n	8009542 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	3301      	adds	r3, #1
 8009530:	60bb      	str	r3, [r7, #8]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689a      	ldr	r2, [r3, #8]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	4413      	add	r3, r2
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	429a      	cmp	r2, r3
 8009540:	d3db      	bcc.n	80094fa <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009542:	f000 f84f 	bl	80095e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009546:	4b04      	ldr	r3, [pc, #16]	; (8009558 <HAL_FLASHEx_Erase+0x128>)
 8009548:	2200      	movs	r2, #0
 800954a:	701a      	strb	r2, [r3, #0]

  return status;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	200001e0 	.word	0x200001e0
 800955c:	40022000 	.word	0x40022000

08009560 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <FLASH_MassErase+0x38>)
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	4a08      	ldr	r2, [pc, #32]	; (8009598 <FLASH_MassErase+0x38>)
 8009578:	f043 0304 	orr.w	r3, r3, #4
 800957c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <FLASH_MassErase+0x38>)
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	4a05      	ldr	r2, [pc, #20]	; (8009598 <FLASH_MassErase+0x38>)
 8009584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009588:	6153      	str	r3, [r2, #20]
}
 800958a:	bf00      	nop
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40022000 	.word	0x40022000

0800959c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80095a6:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <FLASH_PageErase+0x44>)
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80095b6:	490a      	ldr	r1, [pc, #40]	; (80095e0 <FLASH_PageErase+0x44>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80095bc:	4b08      	ldr	r3, [pc, #32]	; (80095e0 <FLASH_PageErase+0x44>)
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	4a07      	ldr	r2, [pc, #28]	; (80095e0 <FLASH_PageErase+0x44>)
 80095c2:	f043 0302 	orr.w	r3, r3, #2
 80095c6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <FLASH_PageErase+0x44>)
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	4a04      	ldr	r2, [pc, #16]	; (80095e0 <FLASH_PageErase+0x44>)
 80095ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095d2:	6153      	str	r3, [r2, #20]
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	40022000 	.word	0x40022000

080095e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80095ea:	4b21      	ldr	r3, [pc, #132]	; (8009670 <FLASH_FlushCaches+0x8c>)
 80095ec:	7f1b      	ldrb	r3, [r3, #28]
 80095ee:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d002      	beq.n	80095fc <FLASH_FlushCaches+0x18>
 80095f6:	79fb      	ldrb	r3, [r7, #7]
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d117      	bne.n	800962c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80095fc:	4b1d      	ldr	r3, [pc, #116]	; (8009674 <FLASH_FlushCaches+0x90>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a1c      	ldr	r2, [pc, #112]	; (8009674 <FLASH_FlushCaches+0x90>)
 8009602:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009606:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009608:	4b1a      	ldr	r3, [pc, #104]	; (8009674 <FLASH_FlushCaches+0x90>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a19      	ldr	r2, [pc, #100]	; (8009674 <FLASH_FlushCaches+0x90>)
 800960e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	4b17      	ldr	r3, [pc, #92]	; (8009674 <FLASH_FlushCaches+0x90>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a16      	ldr	r2, [pc, #88]	; (8009674 <FLASH_FlushCaches+0x90>)
 800961a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800961e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009620:	4b14      	ldr	r3, [pc, #80]	; (8009674 <FLASH_FlushCaches+0x90>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a13      	ldr	r2, [pc, #76]	; (8009674 <FLASH_FlushCaches+0x90>)
 8009626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800962a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d002      	beq.n	8009638 <FLASH_FlushCaches+0x54>
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	2b03      	cmp	r3, #3
 8009636:	d111      	bne.n	800965c <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009638:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <FLASH_FlushCaches+0x90>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a0d      	ldr	r2, [pc, #52]	; (8009674 <FLASH_FlushCaches+0x90>)
 800963e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <FLASH_FlushCaches+0x90>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a0a      	ldr	r2, [pc, #40]	; (8009674 <FLASH_FlushCaches+0x90>)
 800964a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800964e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009650:	4b08      	ldr	r3, [pc, #32]	; (8009674 <FLASH_FlushCaches+0x90>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a07      	ldr	r2, [pc, #28]	; (8009674 <FLASH_FlushCaches+0x90>)
 8009656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800965a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800965c:	4b04      	ldr	r3, [pc, #16]	; (8009670 <FLASH_FlushCaches+0x8c>)
 800965e:	2200      	movs	r2, #0
 8009660:	771a      	strb	r2, [r3, #28]
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	200001e0 	.word	0x200001e0
 8009674:	40022000 	.word	0x40022000

08009678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009678:	b480      	push	{r7}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009686:	e15a      	b.n	800993e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	2101      	movs	r1, #1
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	fa01 f303 	lsl.w	r3, r1, r3
 8009694:	4013      	ands	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 814c 	beq.w	8009938 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	f003 0303 	and.w	r3, r3, #3
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d005      	beq.n	80096b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d130      	bne.n	800971a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	2203      	movs	r2, #3
 80096c4:	fa02 f303 	lsl.w	r3, r2, r3
 80096c8:	43db      	mvns	r3, r3
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4013      	ands	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	68da      	ldr	r2, [r3, #12]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	fa02 f303 	lsl.w	r3, r2, r3
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	4313      	orrs	r3, r2
 80096e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096ee:	2201      	movs	r2, #1
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	fa02 f303 	lsl.w	r3, r2, r3
 80096f6:	43db      	mvns	r3, r3
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4013      	ands	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	091b      	lsrs	r3, r3, #4
 8009704:	f003 0201 	and.w	r2, r3, #1
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	fa02 f303 	lsl.w	r3, r2, r3
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	4313      	orrs	r3, r2
 8009712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d017      	beq.n	8009756 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	005b      	lsls	r3, r3, #1
 8009730:	2203      	movs	r2, #3
 8009732:	fa02 f303 	lsl.w	r3, r2, r3
 8009736:	43db      	mvns	r3, r3
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4013      	ands	r3, r2
 800973c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	fa02 f303 	lsl.w	r3, r2, r3
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	4313      	orrs	r3, r2
 800974e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f003 0303 	and.w	r3, r3, #3
 800975e:	2b02      	cmp	r3, #2
 8009760:	d123      	bne.n	80097aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	08da      	lsrs	r2, r3, #3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3208      	adds	r2, #8
 800976a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f003 0307 	and.w	r3, r3, #7
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	220f      	movs	r2, #15
 800977a:	fa02 f303 	lsl.w	r3, r2, r3
 800977e:	43db      	mvns	r3, r3
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	4013      	ands	r3, r2
 8009784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	691a      	ldr	r2, [r3, #16]
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	fa02 f303 	lsl.w	r3, r2, r3
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	4313      	orrs	r3, r2
 800979a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	08da      	lsrs	r2, r3, #3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3208      	adds	r2, #8
 80097a4:	6939      	ldr	r1, [r7, #16]
 80097a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	2203      	movs	r2, #3
 80097b6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ba:	43db      	mvns	r3, r3
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	4013      	ands	r3, r2
 80097c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f003 0203 	and.w	r2, r3, #3
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	fa02 f303 	lsl.w	r3, r2, r3
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 80a6 	beq.w	8009938 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097ec:	4b5b      	ldr	r3, [pc, #364]	; (800995c <HAL_GPIO_Init+0x2e4>)
 80097ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f0:	4a5a      	ldr	r2, [pc, #360]	; (800995c <HAL_GPIO_Init+0x2e4>)
 80097f2:	f043 0301 	orr.w	r3, r3, #1
 80097f6:	6613      	str	r3, [r2, #96]	; 0x60
 80097f8:	4b58      	ldr	r3, [pc, #352]	; (800995c <HAL_GPIO_Init+0x2e4>)
 80097fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	60bb      	str	r3, [r7, #8]
 8009802:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009804:	4a56      	ldr	r2, [pc, #344]	; (8009960 <HAL_GPIO_Init+0x2e8>)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	089b      	lsrs	r3, r3, #2
 800980a:	3302      	adds	r3, #2
 800980c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009810:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f003 0303 	and.w	r3, r3, #3
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	220f      	movs	r2, #15
 800981c:	fa02 f303 	lsl.w	r3, r2, r3
 8009820:	43db      	mvns	r3, r3
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4013      	ands	r3, r2
 8009826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800982e:	d01f      	beq.n	8009870 <HAL_GPIO_Init+0x1f8>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a4c      	ldr	r2, [pc, #304]	; (8009964 <HAL_GPIO_Init+0x2ec>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d019      	beq.n	800986c <HAL_GPIO_Init+0x1f4>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a4b      	ldr	r2, [pc, #300]	; (8009968 <HAL_GPIO_Init+0x2f0>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <HAL_GPIO_Init+0x1f0>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a4a      	ldr	r2, [pc, #296]	; (800996c <HAL_GPIO_Init+0x2f4>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00d      	beq.n	8009864 <HAL_GPIO_Init+0x1ec>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a49      	ldr	r2, [pc, #292]	; (8009970 <HAL_GPIO_Init+0x2f8>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d007      	beq.n	8009860 <HAL_GPIO_Init+0x1e8>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a48      	ldr	r2, [pc, #288]	; (8009974 <HAL_GPIO_Init+0x2fc>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d101      	bne.n	800985c <HAL_GPIO_Init+0x1e4>
 8009858:	2305      	movs	r3, #5
 800985a:	e00a      	b.n	8009872 <HAL_GPIO_Init+0x1fa>
 800985c:	2306      	movs	r3, #6
 800985e:	e008      	b.n	8009872 <HAL_GPIO_Init+0x1fa>
 8009860:	2304      	movs	r3, #4
 8009862:	e006      	b.n	8009872 <HAL_GPIO_Init+0x1fa>
 8009864:	2303      	movs	r3, #3
 8009866:	e004      	b.n	8009872 <HAL_GPIO_Init+0x1fa>
 8009868:	2302      	movs	r3, #2
 800986a:	e002      	b.n	8009872 <HAL_GPIO_Init+0x1fa>
 800986c:	2301      	movs	r3, #1
 800986e:	e000      	b.n	8009872 <HAL_GPIO_Init+0x1fa>
 8009870:	2300      	movs	r3, #0
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	f002 0203 	and.w	r2, r2, #3
 8009878:	0092      	lsls	r2, r2, #2
 800987a:	4093      	lsls	r3, r2
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009882:	4937      	ldr	r1, [pc, #220]	; (8009960 <HAL_GPIO_Init+0x2e8>)
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	089b      	lsrs	r3, r3, #2
 8009888:	3302      	adds	r3, #2
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009890:	4b39      	ldr	r3, [pc, #228]	; (8009978 <HAL_GPIO_Init+0x300>)
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	43db      	mvns	r3, r3
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	4013      	ands	r3, r2
 800989e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80098b4:	4a30      	ldr	r2, [pc, #192]	; (8009978 <HAL_GPIO_Init+0x300>)
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80098ba:	4b2f      	ldr	r3, [pc, #188]	; (8009978 <HAL_GPIO_Init+0x300>)
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	43db      	mvns	r3, r3
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	4013      	ands	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4313      	orrs	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80098de:	4a26      	ldr	r2, [pc, #152]	; (8009978 <HAL_GPIO_Init+0x300>)
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80098e4:	4b24      	ldr	r3, [pc, #144]	; (8009978 <HAL_GPIO_Init+0x300>)
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	43db      	mvns	r3, r3
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	4013      	ands	r3, r2
 80098f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4313      	orrs	r3, r2
 8009906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009908:	4a1b      	ldr	r2, [pc, #108]	; (8009978 <HAL_GPIO_Init+0x300>)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800990e:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <HAL_GPIO_Init+0x300>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	43db      	mvns	r3, r3
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	4013      	ands	r3, r2
 800991c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4313      	orrs	r3, r2
 8009930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009932:	4a11      	ldr	r2, [pc, #68]	; (8009978 <HAL_GPIO_Init+0x300>)
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	3301      	adds	r3, #1
 800993c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	fa22 f303 	lsr.w	r3, r2, r3
 8009948:	2b00      	cmp	r3, #0
 800994a:	f47f ae9d 	bne.w	8009688 <HAL_GPIO_Init+0x10>
  }
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	371c      	adds	r7, #28
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	40021000 	.word	0x40021000
 8009960:	40010000 	.word	0x40010000
 8009964:	48000400 	.word	0x48000400
 8009968:	48000800 	.word	0x48000800
 800996c:	48000c00 	.word	0x48000c00
 8009970:	48001000 	.word	0x48001000
 8009974:	48001400 	.word	0x48001400
 8009978:	40010400 	.word	0x40010400

0800997c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	691a      	ldr	r2, [r3, #16]
 800998c:	887b      	ldrh	r3, [r7, #2]
 800998e:	4013      	ands	r3, r2
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009994:	2301      	movs	r3, #1
 8009996:	73fb      	strb	r3, [r7, #15]
 8009998:	e001      	b.n	800999e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	807b      	strh	r3, [r7, #2]
 80099b8:	4613      	mov	r3, r2
 80099ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80099bc:	787b      	ldrb	r3, [r7, #1]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80099c2:	887a      	ldrh	r2, [r7, #2]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80099c8:	e002      	b.n	80099d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80099ca:	887a      	ldrh	r2, [r7, #2]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80099e6:	4b08      	ldr	r3, [pc, #32]	; (8009a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099e8:	695a      	ldr	r2, [r3, #20]
 80099ea:	88fb      	ldrh	r3, [r7, #6]
 80099ec:	4013      	ands	r3, r2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d006      	beq.n	8009a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80099f2:	4a05      	ldr	r2, [pc, #20]	; (8009a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099f4:	88fb      	ldrh	r3, [r7, #6]
 80099f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80099f8:	88fb      	ldrh	r3, [r7, #6]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7f9 fa80 	bl	8002f00 <HAL_GPIO_EXTI_Callback>
  }
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	40010400 	.word	0x40010400

08009a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e08d      	b.n	8009b3a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d106      	bne.n	8009a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7fb f976 	bl	8004d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2224      	movs	r2, #36	; 0x24
 8009a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 0201 	bic.w	r2, r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d107      	bne.n	8009a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	689a      	ldr	r2, [r3, #8]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a82:	609a      	str	r2, [r3, #8]
 8009a84:	e006      	b.n	8009a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	689a      	ldr	r2, [r3, #8]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d108      	bne.n	8009aae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aaa:	605a      	str	r2, [r3, #4]
 8009aac:	e007      	b.n	8009abe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	6812      	ldr	r2, [r2, #0]
 8009ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ae0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	691a      	ldr	r2, [r3, #16]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	69d9      	ldr	r1, [r3, #28]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a1a      	ldr	r2, [r3, #32]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f042 0201 	orr.w	r2, r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b083      	sub	sp, #12
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b20      	cmp	r3, #32
 8009b56:	d138      	bne.n	8009bca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d101      	bne.n	8009b66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b62:	2302      	movs	r3, #2
 8009b64:	e032      	b.n	8009bcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2224      	movs	r2, #36	; 0x24
 8009b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f022 0201 	bic.w	r2, r2, #1
 8009b84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6819      	ldr	r1, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0201 	orr.w	r2, r2, #1
 8009bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e000      	b.n	8009bcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bca:	2302      	movs	r3, #2
  }
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b20      	cmp	r3, #32
 8009bec:	d139      	bne.n	8009c62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d101      	bne.n	8009bfc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e033      	b.n	8009c64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2224      	movs	r2, #36	; 0x24
 8009c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0201 	bic.w	r2, r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	021b      	lsls	r3, r3, #8
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f042 0201 	orr.w	r2, r2, #1
 8009c4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e000      	b.n	8009c64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c62:	2302      	movs	r3, #2
  }
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e0c0      	b.n	8009e04 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f00b fec8 	bl	8015a2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2203      	movs	r2, #3
 8009ca0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f005 fe1e 	bl	800f8ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
 8009cb2:	e03e      	b.n	8009d32 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009cb4:	7bfa      	ldrb	r2, [r7, #15]
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	440b      	add	r3, r1
 8009cc2:	3311      	adds	r3, #17
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009cc8:	7bfa      	ldrb	r2, [r7, #15]
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	440b      	add	r3, r1
 8009cd6:	3310      	adds	r3, #16
 8009cd8:	7bfa      	ldrb	r2, [r7, #15]
 8009cda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009cdc:	7bfa      	ldrb	r2, [r7, #15]
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	440b      	add	r3, r1
 8009cea:	3313      	adds	r3, #19
 8009cec:	2200      	movs	r2, #0
 8009cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009cf0:	7bfa      	ldrb	r2, [r7, #15]
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	00db      	lsls	r3, r3, #3
 8009cfc:	440b      	add	r3, r1
 8009cfe:	3320      	adds	r3, #32
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009d04:	7bfa      	ldrb	r2, [r7, #15]
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	440b      	add	r3, r1
 8009d12:	3324      	adds	r3, #36	; 0x24
 8009d14:	2200      	movs	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	1c5a      	adds	r2, r3, #1
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	00db      	lsls	r3, r3, #3
 8009d26:	440b      	add	r3, r1
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	73fb      	strb	r3, [r7, #15]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	791b      	ldrb	r3, [r3, #4]
 8009d36:	7bfa      	ldrb	r2, [r7, #15]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d3bb      	bcc.n	8009cb4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73fb      	strb	r3, [r7, #15]
 8009d40:	e044      	b.n	8009dcc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009d42:	7bfa      	ldrb	r2, [r7, #15]
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	00db      	lsls	r3, r3, #3
 8009d4e:	440b      	add	r3, r1
 8009d50:	f203 1351 	addw	r3, r3, #337	; 0x151
 8009d54:	2200      	movs	r2, #0
 8009d56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009d58:	7bfa      	ldrb	r2, [r7, #15]
 8009d5a:	6879      	ldr	r1, [r7, #4]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	00db      	lsls	r3, r3, #3
 8009d64:	440b      	add	r3, r1
 8009d66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d6a:	7bfa      	ldrb	r2, [r7, #15]
 8009d6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009d6e:	7bfa      	ldrb	r2, [r7, #15]
 8009d70:	6879      	ldr	r1, [r7, #4]
 8009d72:	4613      	mov	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	00db      	lsls	r3, r3, #3
 8009d7a:	440b      	add	r3, r1
 8009d7c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8009d80:	2200      	movs	r2, #0
 8009d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009d84:	7bfa      	ldrb	r2, [r7, #15]
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	00db      	lsls	r3, r3, #3
 8009d90:	440b      	add	r3, r1
 8009d92:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009d9a:	7bfa      	ldrb	r2, [r7, #15]
 8009d9c:	6879      	ldr	r1, [r7, #4]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	440b      	add	r3, r1
 8009da8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009db0:	7bfa      	ldrb	r2, [r7, #15]
 8009db2:	6879      	ldr	r1, [r7, #4]
 8009db4:	4613      	mov	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	440b      	add	r3, r1
 8009dbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	791b      	ldrb	r3, [r3, #4]
 8009dd0:	7bfa      	ldrb	r2, [r7, #15]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d3b5      	bcc.n	8009d42 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009de2:	f005 fd9d 	bl	800f920 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	7a9b      	ldrb	r3, [r3, #10]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d102      	bne.n	8009e02 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 fc41 	bl	800b684 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d101      	bne.n	8009e22 <HAL_PCD_Start+0x16>
 8009e1e:	2302      	movs	r3, #2
 8009e20:	e012      	b.n	8009e48 <HAL_PCD_Start+0x3c>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f005 fd44 	bl	800f8bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f008 f804 	bl	8011e46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f008 f809 	bl	8011e74 <USB_ReadInterrupts>
 8009e62:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fb04 	bl	800a47c <PCD_EP_ISR_Handler>

    return;
 8009e74:	e110      	b.n	800a098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d013      	beq.n	8009ea8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e92:	b292      	uxth	r2, r2
 8009e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f00b fe58 	bl	8015b4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f8fc 	bl	800a09e <HAL_PCD_SetAddress>

    return;
 8009ea6:	e0f7      	b.n	800a098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00c      	beq.n	8009ecc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ec4:	b292      	uxth	r2, r2
 8009ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009eca:	e0e5      	b.n	800a098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00c      	beq.n	8009ef0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ee8:	b292      	uxth	r2, r2
 8009eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009eee:	e0d3      	b.n	800a098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d034      	beq.n	8009f64 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 0204 	bic.w	r2, r2, #4
 8009f0c:	b292      	uxth	r2, r2
 8009f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f022 0208 	bic.w	r2, r2, #8
 8009f24:	b292      	uxth	r2, r2
 8009f26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d107      	bne.n	8009f44 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f00b fff8 	bl	8015f34 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f00b fe3b 	bl	8015bc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f5c:	b292      	uxth	r2, r2
 8009f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009f62:	e099      	b.n	800a098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d027      	beq.n	8009fbe <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 0208 	orr.w	r2, r2, #8
 8009f80:	b292      	uxth	r2, r2
 8009f82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f98:	b292      	uxth	r2, r2
 8009f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f042 0204 	orr.w	r2, r2, #4
 8009fb0:	b292      	uxth	r2, r2
 8009fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f00b fde8 	bl	8015b8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009fbc:	e06c      	b.n	800a098 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d040      	beq.n	800a04a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fda:	b292      	uxth	r2, r2
 8009fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d12b      	bne.n	800a042 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0204 	orr.w	r2, r2, #4
 8009ffc:	b292      	uxth	r2, r2
 8009ffe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f042 0208 	orr.w	r2, r2, #8
 800a014:	b292      	uxth	r2, r2
 800a016:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	089b      	lsrs	r3, r3, #2
 800a02e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a038:	2101      	movs	r1, #1
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f00b ff7a 	bl	8015f34 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a040:	e02a      	b.n	800a098 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f00b fda2 	bl	8015b8c <HAL_PCD_SuspendCallback>
    return;
 800a048:	e026      	b.n	800a098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00f      	beq.n	800a074 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a066:	b292      	uxth	r2, r2
 800a068:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f00b fd60 	bl	8015b32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a072:	e011      	b.n	800a098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00c      	beq.n	800a098 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a086:	b29a      	uxth	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a090:	b292      	uxth	r2, r2
 800a092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a096:	bf00      	nop
  }
}
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d101      	bne.n	800a0b8 <HAL_PCD_SetAddress+0x1a>
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	e012      	b.n	800a0de <HAL_PCD_SetAddress+0x40>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	78fa      	ldrb	r2, [r7, #3]
 800a0c4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	78fa      	ldrb	r2, [r7, #3]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f007 fea5 	bl	8011e1e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	4608      	mov	r0, r1
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	70fb      	strb	r3, [r7, #3]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	803b      	strh	r3, [r7, #0]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	da0e      	bge.n	800a12a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a10c:	78fb      	ldrb	r3, [r7, #3]
 800a10e:	f003 0207 	and.w	r2, r3, #7
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	00db      	lsls	r3, r3, #3
 800a11a:	3310      	adds	r3, #16
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	4413      	add	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2201      	movs	r2, #1
 800a126:	705a      	strb	r2, [r3, #1]
 800a128:	e00e      	b.n	800a148 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	f003 0207 	and.w	r2, r3, #7
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	4413      	add	r3, r2
 800a140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a148:	78fb      	ldrb	r3, [r7, #3]
 800a14a:	f003 0307 	and.w	r3, r3, #7
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a154:	883a      	ldrh	r2, [r7, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	78ba      	ldrb	r2, [r7, #2]
 800a15e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a160:	78bb      	ldrb	r3, [r7, #2]
 800a162:	2b02      	cmp	r3, #2
 800a164:	d102      	bne.n	800a16c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a172:	2b01      	cmp	r3, #1
 800a174:	d101      	bne.n	800a17a <HAL_PCD_EP_Open+0x94>
 800a176:	2302      	movs	r3, #2
 800a178:	e00e      	b.n	800a198 <HAL_PCD_EP_Open+0xb2>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68f9      	ldr	r1, [r7, #12]
 800a188:	4618      	mov	r0, r3
 800a18a:	f005 fbe7 	bl	800f95c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800a196:	7afb      	ldrb	r3, [r7, #11]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a1ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	da0e      	bge.n	800a1d2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1b4:	78fb      	ldrb	r3, [r7, #3]
 800a1b6:	f003 0207 	and.w	r2, r3, #7
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	3310      	adds	r3, #16
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	705a      	strb	r2, [r3, #1]
 800a1d0:	e00e      	b.n	800a1f0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	f003 0207 	and.w	r2, r3, #7
 800a1d8:	4613      	mov	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1f0:	78fb      	ldrb	r3, [r7, #3]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a202:	2b01      	cmp	r3, #1
 800a204:	d101      	bne.n	800a20a <HAL_PCD_EP_Close+0x6a>
 800a206:	2302      	movs	r3, #2
 800a208:	e00e      	b.n	800a228 <HAL_PCD_EP_Close+0x88>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	4618      	mov	r0, r3
 800a21a:	f005 ff63 	bl	80100e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	607a      	str	r2, [r7, #4]
 800a23a:	603b      	str	r3, [r7, #0]
 800a23c:	460b      	mov	r3, r1
 800a23e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	f003 0207 	and.w	r2, r3, #7
 800a246:	4613      	mov	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	00db      	lsls	r3, r3, #3
 800a24e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4413      	add	r3, r2
 800a256:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2200      	movs	r2, #0
 800a268:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	2200      	movs	r2, #0
 800a26e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a270:	7afb      	ldrb	r3, [r7, #11]
 800a272:	f003 0307 	and.w	r3, r3, #7
 800a276:	b2da      	uxtb	r2, r3
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6979      	ldr	r1, [r7, #20]
 800a282:	4618      	mov	r0, r3
 800a284:	f006 f91b 	bl	80104be <USB_EPStartXfer>

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a29e:	78fb      	ldrb	r3, [r7, #3]
 800a2a0:	f003 0207 	and.w	r2, r3, #7
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	440b      	add	r3, r1
 800a2b0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800a2b4:	681b      	ldr	r3, [r3, #0]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b086      	sub	sp, #24
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2d2:	7afb      	ldrb	r3, [r7, #11]
 800a2d4:	f003 0207 	and.w	r2, r3, #7
 800a2d8:	4613      	mov	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	3310      	adds	r3, #16
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2200      	movs	r2, #0
 800a306:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2201      	movs	r2, #1
 800a30c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a30e:	7afb      	ldrb	r3, [r7, #11]
 800a310:	f003 0307 	and.w	r3, r3, #7
 800a314:	b2da      	uxtb	r2, r3
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6979      	ldr	r1, [r7, #20]
 800a320:	4618      	mov	r0, r3
 800a322:	f006 f8cc 	bl	80104be <USB_EPStartXfer>

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	f003 0307 	and.w	r3, r3, #7
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	7912      	ldrb	r2, [r2, #4]
 800a346:	4293      	cmp	r3, r2
 800a348:	d901      	bls.n	800a34e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e03e      	b.n	800a3cc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a34e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a352:	2b00      	cmp	r3, #0
 800a354:	da0e      	bge.n	800a374 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a356:	78fb      	ldrb	r3, [r7, #3]
 800a358:	f003 0207 	and.w	r2, r3, #7
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	3310      	adds	r3, #16
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	4413      	add	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2201      	movs	r2, #1
 800a370:	705a      	strb	r2, [r3, #1]
 800a372:	e00c      	b.n	800a38e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a374:	78fa      	ldrb	r2, [r7, #3]
 800a376:	4613      	mov	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	4413      	add	r3, r2
 800a37c:	00db      	lsls	r3, r3, #3
 800a37e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	4413      	add	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2201      	movs	r2, #1
 800a392:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a394:	78fb      	ldrb	r3, [r7, #3]
 800a396:	f003 0307 	and.w	r3, r3, #7
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d101      	bne.n	800a3ae <HAL_PCD_EP_SetStall+0x7e>
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e00e      	b.n	800a3cc <HAL_PCD_EP_SetStall+0x9c>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f007 fc2f 	bl	8011c20 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a3e0:	78fb      	ldrb	r3, [r7, #3]
 800a3e2:	f003 030f 	and.w	r3, r3, #15
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	7912      	ldrb	r2, [r2, #4]
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d901      	bls.n	800a3f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e040      	b.n	800a474 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a3f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	da0e      	bge.n	800a418 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3fa:	78fb      	ldrb	r3, [r7, #3]
 800a3fc:	f003 0207 	and.w	r2, r3, #7
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	3310      	adds	r3, #16
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	4413      	add	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2201      	movs	r2, #1
 800a414:	705a      	strb	r2, [r3, #1]
 800a416:	e00e      	b.n	800a436 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a418:	78fb      	ldrb	r3, [r7, #3]
 800a41a:	f003 0207 	and.w	r2, r3, #7
 800a41e:	4613      	mov	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	00db      	lsls	r3, r3, #3
 800a426:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	b2da      	uxtb	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d101      	bne.n	800a456 <HAL_PCD_EP_ClrStall+0x82>
 800a452:	2302      	movs	r3, #2
 800a454:	e00e      	b.n	800a474 <HAL_PCD_EP_ClrStall+0xa0>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68f9      	ldr	r1, [r7, #12]
 800a464:	4618      	mov	r0, r3
 800a466:	f007 fc2c 	bl	8011cc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b096      	sub	sp, #88	; 0x58
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a484:	e3ae      	b.n	800abe4 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a48e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a492:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a496:	b2db      	uxtb	r3, r3
 800a498:	f003 030f 	and.w	r3, r3, #15
 800a49c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800a4a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f040 8170 	bne.w	800a78a <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a4aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4ae:	f003 0310 	and.w	r3, r3, #16
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d14d      	bne.n	800a552 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a4c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c6:	81fb      	strh	r3, [r7, #14]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	89fb      	ldrh	r3, [r7, #14]
 800a4ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3310      	adds	r3, #16
 800a4de:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	00db      	lsls	r3, r3, #3
 800a4f2:	4413      	add	r3, r2
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6812      	ldr	r2, [r2, #0]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4fe:	881b      	ldrh	r3, [r3, #0]
 800a500:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a506:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a50a:	695a      	ldr	r2, [r3, #20]
 800a50c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a50e:	69db      	ldr	r3, [r3, #28]
 800a510:	441a      	add	r2, r3
 800a512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a514:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a516:	2100      	movs	r1, #0
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f00b faf0 	bl	8015afe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	7b1b      	ldrb	r3, [r3, #12]
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 835d 	beq.w	800abe4 <PCD_EP_ISR_Handler+0x768>
 800a52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f040 8358 	bne.w	800abe4 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	7b1b      	ldrb	r3, [r3, #12]
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	b292      	uxth	r2, r2
 800a546:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	731a      	strb	r2, [r3, #12]
 800a550:	e348      	b.n	800abe4 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a558:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a564:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d032      	beq.n	800a5d6 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a578:	b29b      	uxth	r3, r3
 800a57a:	461a      	mov	r2, r3
 800a57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	4413      	add	r3, r2
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	6812      	ldr	r2, [r2, #0]
 800a588:	4413      	add	r3, r2
 800a58a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a596:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800a5a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a5a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	f007 fcb4 	bl	8011f18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	881b      	ldrh	r3, [r3, #0]
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a5bc:	4013      	ands	r3, r2
 800a5be:	823b      	strh	r3, [r7, #16]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	8a3a      	ldrh	r2, [r7, #16]
 800a5c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5ca:	b292      	uxth	r2, r2
 800a5cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f00b fa68 	bl	8015aa4 <HAL_PCD_SetupStageCallback>
 800a5d4:	e306      	b.n	800abe4 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a5d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f280 8302 	bge.w	800abe4 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	83fb      	strh	r3, [r7, #30]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	8bfa      	ldrh	r2, [r7, #30]
 800a5f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5fa:	b292      	uxth	r2, r2
 800a5fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a606:	b29b      	uxth	r3, r3
 800a608:	461a      	mov	r2, r3
 800a60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	00db      	lsls	r3, r3, #3
 800a610:	4413      	add	r3, r2
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	6812      	ldr	r2, [r2, #0]
 800a616:	4413      	add	r3, r2
 800a618:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a61c:	881b      	ldrh	r3, [r3, #0]
 800a61e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a624:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d019      	beq.n	800a662 <PCD_EP_ISR_Handler+0x1e6>
 800a62e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d015      	beq.n	800a662 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6818      	ldr	r0, [r3, #0]
 800a63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a63c:	6959      	ldr	r1, [r3, #20]
 800a63e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a640:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a644:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a646:	b29b      	uxth	r3, r3
 800a648:	f007 fc66 	bl	8011f18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a64e:	695a      	ldr	r2, [r3, #20]
 800a650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a652:	69db      	ldr	r3, [r3, #28]
 800a654:	441a      	add	r2, r3
 800a656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a658:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a65a:	2100      	movs	r1, #0
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f00b fa33 	bl	8015ac8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a66c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a674:	2b00      	cmp	r3, #0
 800a676:	f040 82b5 	bne.w	800abe4 <PCD_EP_ISR_Handler+0x768>
 800a67a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a67e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a682:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a686:	f000 82ad 	beq.w	800abe4 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	61bb      	str	r3, [r7, #24]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a698:	b29b      	uxth	r3, r3
 800a69a:	461a      	mov	r2, r3
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	4413      	add	r3, r2
 800a6a0:	61bb      	str	r3, [r7, #24]
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	881b      	ldrh	r3, [r3, #0]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	801a      	strh	r2, [r3, #0]
 800a6ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	2b3e      	cmp	r3, #62	; 0x3e
 800a6c0:	d91d      	bls.n	800a6fe <PCD_EP_ISR_Handler+0x282>
 800a6c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	095b      	lsrs	r3, r3, #5
 800a6c8:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	f003 031f 	and.w	r3, r3, #31
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d102      	bne.n	800a6dc <PCD_EP_ISR_Handler+0x260>
 800a6d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	647b      	str	r3, [r7, #68]	; 0x44
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	029b      	lsls	r3, r3, #10
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	801a      	strh	r2, [r3, #0]
 800a6fc:	e026      	b.n	800a74c <PCD_EP_ISR_Handler+0x2d0>
 800a6fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10a      	bne.n	800a71c <PCD_EP_ISR_Handler+0x2a0>
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a714:	b29a      	uxth	r2, r3
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	801a      	strh	r2, [r3, #0]
 800a71a:	e017      	b.n	800a74c <PCD_EP_ISR_Handler+0x2d0>
 800a71c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	085b      	lsrs	r3, r3, #1
 800a722:	647b      	str	r3, [r7, #68]	; 0x44
 800a724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	f003 0301 	and.w	r3, r3, #1
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <PCD_EP_ISR_Handler+0x2ba>
 800a730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a732:	3301      	adds	r3, #1
 800a734:	647b      	str	r3, [r7, #68]	; 0x44
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a73e:	b29b      	uxth	r3, r3
 800a740:	029b      	lsls	r3, r3, #10
 800a742:	b29b      	uxth	r3, r3
 800a744:	4313      	orrs	r3, r2
 800a746:	b29a      	uxth	r2, r3
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	b29b      	uxth	r3, r3
 800a754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a75c:	827b      	strh	r3, [r7, #18]
 800a75e:	8a7b      	ldrh	r3, [r7, #18]
 800a760:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a764:	827b      	strh	r3, [r7, #18]
 800a766:	8a7b      	ldrh	r3, [r7, #18]
 800a768:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a76c:	827b      	strh	r3, [r7, #18]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	8a7b      	ldrh	r3, [r7, #18]
 800a774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a77c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a784:	b29b      	uxth	r3, r3
 800a786:	8013      	strh	r3, [r2, #0]
 800a788:	e22c      	b.n	800abe4 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a79e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f280 80f6 	bge.w	800a994 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a7be:	4013      	ands	r3, r2
 800a7c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a7d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7da:	b292      	uxth	r2, r2
 800a7dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a7de:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	00db      	lsls	r3, r3, #3
 800a7ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a7f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7f6:	7b1b      	ldrb	r3, [r3, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d123      	bne.n	800a844 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a804:	b29b      	uxth	r3, r3
 800a806:	461a      	mov	r2, r3
 800a808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	4413      	add	r3, r2
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	6812      	ldr	r2, [r2, #0]
 800a814:	4413      	add	r3, r2
 800a816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a820:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a824:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f000 808e 	beq.w	800a94a <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a834:	6959      	ldr	r1, [r3, #20]
 800a836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a838:	88da      	ldrh	r2, [r3, #6]
 800a83a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a83e:	f007 fb6b 	bl	8011f18 <USB_ReadPMA>
 800a842:	e082      	b.n	800a94a <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a846:	78db      	ldrb	r3, [r3, #3]
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d10a      	bne.n	800a862 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a84c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a850:	461a      	mov	r2, r3
 800a852:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f9d3 	bl	800ac00 <HAL_PCD_EP_DB_Receive>
 800a85a:	4603      	mov	r3, r0
 800a85c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a860:	e073      	b.n	800a94a <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	b29b      	uxth	r3, r3
 800a874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a87c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	441a      	add	r2, r3
 800a88e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a89a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a89e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d022      	beq.n	800a906 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	6812      	ldr	r2, [r2, #0]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a8e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d02c      	beq.n	800a94a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6818      	ldr	r0, [r3, #0]
 800a8f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8f6:	6959      	ldr	r1, [r3, #20]
 800a8f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8fa:	891a      	ldrh	r2, [r3, #8]
 800a8fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a900:	f007 fb0a 	bl	8011f18 <USB_ReadPMA>
 800a904:	e021      	b.n	800a94a <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a90e:	b29b      	uxth	r3, r3
 800a910:	461a      	mov	r2, r3
 800a912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	4413      	add	r3, r2
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6812      	ldr	r2, [r2, #0]
 800a91e:	4413      	add	r3, r2
 800a920:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a92a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a92e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a932:	2b00      	cmp	r3, #0
 800a934:	d009      	beq.n	800a94a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6818      	ldr	r0, [r3, #0]
 800a93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a93c:	6959      	ldr	r1, [r3, #20]
 800a93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a940:	895a      	ldrh	r2, [r3, #10]
 800a942:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a946:	f007 fae7 	bl	8011f18 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a94a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a94c:	69da      	ldr	r2, [r3, #28]
 800a94e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a952:	441a      	add	r2, r3
 800a954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a956:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a95a:	695a      	ldr	r2, [r3, #20]
 800a95c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a960:	441a      	add	r2, r3
 800a962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a964:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d005      	beq.n	800a97a <PCD_EP_ISR_Handler+0x4fe>
 800a96e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	429a      	cmp	r2, r3
 800a978:	d206      	bcs.n	800a988 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f00b f8a1 	bl	8015ac8 <HAL_PCD_DataOutStageCallback>
 800a986:	e005      	b.n	800a994 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a98e:	4618      	mov	r0, r3
 800a990:	f005 fd95 	bl	80104be <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a994:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f000 8121 	beq.w	800abe4 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800a9a2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4413      	add	r3, r2
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	3310      	adds	r3, #16
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a9cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	441a      	add	r2, r3
 800a9e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a9e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a9f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9f4:	78db      	ldrb	r3, [r3, #3]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	f040 80a2 	bne.w	800ab40 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800a9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9fe:	2200      	movs	r2, #0
 800aa00:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800aa02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa04:	7b1b      	ldrb	r3, [r3, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 8093 	beq.w	800ab32 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800aa0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d046      	beq.n	800aaa6 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa1a:	785b      	ldrb	r3, [r3, #1]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d126      	bne.n	800aa6e <PCD_EP_ISR_Handler+0x5f2>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	627b      	str	r3, [r7, #36]	; 0x24
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	461a      	mov	r2, r3
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	4413      	add	r3, r2
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
 800aa38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	00da      	lsls	r2, r3, #3
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	4413      	add	r3, r2
 800aa42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa46:	623b      	str	r3, [r7, #32]
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	801a      	strh	r2, [r3, #0]
 800aa58:	6a3b      	ldr	r3, [r7, #32]
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	801a      	strh	r2, [r3, #0]
 800aa6c:	e061      	b.n	800ab32 <PCD_EP_ISR_Handler+0x6b6>
 800aa6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa70:	785b      	ldrb	r3, [r3, #1]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d15d      	bne.n	800ab32 <PCD_EP_ISR_Handler+0x6b6>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	461a      	mov	r2, r3
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8a:	4413      	add	r3, r2
 800aa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	00da      	lsls	r2, r3, #3
 800aa94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa96:	4413      	add	r3, r2
 800aa98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	801a      	strh	r2, [r3, #0]
 800aaa4:	e045      	b.n	800ab32 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaae:	785b      	ldrb	r3, [r3, #1]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d126      	bne.n	800ab02 <PCD_EP_ISR_Handler+0x686>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	637b      	str	r3, [r7, #52]	; 0x34
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	461a      	mov	r2, r3
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac8:	4413      	add	r3, r2
 800aaca:	637b      	str	r3, [r7, #52]	; 0x34
 800aacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	00da      	lsls	r2, r3, #3
 800aad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad4:	4413      	add	r3, r2
 800aad6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aada:	633b      	str	r3, [r7, #48]	; 0x30
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	801a      	strh	r2, [r3, #0]
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafe:	801a      	strh	r2, [r3, #0]
 800ab00:	e017      	b.n	800ab32 <PCD_EP_ISR_Handler+0x6b6>
 800ab02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab04:	785b      	ldrb	r3, [r3, #1]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d113      	bne.n	800ab32 <PCD_EP_ISR_Handler+0x6b6>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab18:	4413      	add	r3, r2
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	00da      	lsls	r2, r3, #3
 800ab22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab24:	4413      	add	r3, r2
 800ab26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	2200      	movs	r2, #0
 800ab30:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f00a ffe0 	bl	8015afe <HAL_PCD_DataInStageCallback>
 800ab3e:	e051      	b.n	800abe4 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ab40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ab44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d144      	bne.n	800abd6 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	461a      	mov	r2, r3
 800ab58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	4413      	add	r3, r2
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	6812      	ldr	r2, [r2, #0]
 800ab64:	4413      	add	r3, r2
 800ab66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800ab74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab76:	699a      	ldr	r2, [r3, #24]
 800ab78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d907      	bls.n	800ab90 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800ab80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab82:	699a      	ldr	r2, [r3, #24]
 800ab84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab88:	1ad2      	subs	r2, r2, r3
 800ab8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab8c:	619a      	str	r2, [r3, #24]
 800ab8e:	e002      	b.n	800ab96 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800ab90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab92:	2200      	movs	r2, #0
 800ab94:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ab96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d106      	bne.n	800abac <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f00a ffaa 	bl	8015afe <HAL_PCD_DataInStageCallback>
 800abaa:	e01b      	b.n	800abe4 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800abac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abae:	695a      	ldr	r2, [r3, #20]
 800abb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800abb4:	441a      	add	r2, r3
 800abb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abb8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800abba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abbc:	69da      	ldr	r2, [r3, #28]
 800abbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800abc2:	441a      	add	r2, r3
 800abc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abc6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abce:	4618      	mov	r0, r3
 800abd0:	f005 fc75 	bl	80104be <USB_EPStartXfer>
 800abd4:	e006      	b.n	800abe4 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800abd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800abda:	461a      	mov	r2, r3
 800abdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f917 	bl	800ae12 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800abec:	b29b      	uxth	r3, r3
 800abee:	b21b      	sxth	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f6ff ac48 	blt.w	800a486 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3758      	adds	r7, #88	; 0x58
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ac0e:	88fb      	ldrh	r3, [r7, #6]
 800ac10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d07c      	beq.n	800ad12 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	4413      	add	r3, r2
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	6812      	ldr	r2, [r2, #0]
 800ac30:	4413      	add	r3, r2
 800ac32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	699a      	ldr	r2, [r3, #24]
 800ac42:	8b7b      	ldrh	r3, [r7, #26]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d306      	bcc.n	800ac56 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	699a      	ldr	r2, [r3, #24]
 800ac4c:	8b7b      	ldrh	r3, [r7, #26]
 800ac4e:	1ad2      	subs	r2, r2, r3
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	619a      	str	r2, [r3, #24]
 800ac54:	e002      	b.n	800ac5c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d123      	bne.n	800acac <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac7e:	833b      	strh	r3, [r7, #24]
 800ac80:	8b3b      	ldrh	r3, [r7, #24]
 800ac82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac86:	833b      	strh	r3, [r7, #24]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	441a      	add	r2, r3
 800ac96:	8b3b      	ldrh	r3, [r7, #24]
 800ac98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800acac:	88fb      	ldrh	r3, [r7, #6]
 800acae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d01f      	beq.n	800acf6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800accc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd0:	82fb      	strh	r3, [r7, #22]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	441a      	add	r2, r3
 800ace0:	8afb      	ldrh	r3, [r7, #22]
 800ace2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800acf6:	8b7b      	ldrh	r3, [r7, #26]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 8085 	beq.w	800ae08 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	6959      	ldr	r1, [r3, #20]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	891a      	ldrh	r2, [r3, #8]
 800ad0a:	8b7b      	ldrh	r3, [r7, #26]
 800ad0c:	f007 f904 	bl	8011f18 <USB_ReadPMA>
 800ad10:	e07a      	b.n	800ae08 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	4413      	add	r3, r2
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	6812      	ldr	r2, [r2, #0]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	699a      	ldr	r2, [r3, #24]
 800ad3c:	8b7b      	ldrh	r3, [r7, #26]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d306      	bcc.n	800ad50 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	8b7b      	ldrh	r3, [r7, #26]
 800ad48:	1ad2      	subs	r2, r2, r3
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	619a      	str	r2, [r3, #24]
 800ad4e:	e002      	b.n	800ad56 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2200      	movs	r2, #0
 800ad54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d123      	bne.n	800ada6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	461a      	mov	r2, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad78:	83fb      	strh	r3, [r7, #30]
 800ad7a:	8bfb      	ldrh	r3, [r7, #30]
 800ad7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad80:	83fb      	strh	r3, [r7, #30]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	461a      	mov	r2, r3
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	441a      	add	r2, r3
 800ad90:	8bfb      	ldrh	r3, [r7, #30]
 800ad92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ada6:	88fb      	ldrh	r3, [r7, #6]
 800ada8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adac:	2b00      	cmp	r3, #0
 800adae:	d11f      	bne.n	800adf0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adca:	83bb      	strh	r3, [r7, #28]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	461a      	mov	r2, r3
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	441a      	add	r2, r3
 800adda:	8bbb      	ldrh	r3, [r7, #28]
 800addc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ade4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ade8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800adec:	b29b      	uxth	r3, r3
 800adee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800adf0:	8b7b      	ldrh	r3, [r7, #26]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d008      	beq.n	800ae08 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	6959      	ldr	r1, [r3, #20]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	895a      	ldrh	r2, [r3, #10]
 800ae02:	8b7b      	ldrh	r3, [r7, #26]
 800ae04:	f007 f888 	bl	8011f18 <USB_ReadPMA>
    }
  }

  return count;
 800ae08:	8b7b      	ldrh	r3, [r7, #26]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3720      	adds	r7, #32
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b0a4      	sub	sp, #144	; 0x90
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ae20:	88fb      	ldrh	r3, [r7, #6]
 800ae22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 81db 	beq.w	800b1e2 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	461a      	mov	r2, r3
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	00db      	lsls	r3, r3, #3
 800ae3e:	4413      	add	r3, r2
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	6812      	ldr	r2, [r2, #0]
 800ae44:	4413      	add	r3, r2
 800ae46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae50:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	699a      	ldr	r2, [r3, #24]
 800ae58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d907      	bls.n	800ae70 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	699a      	ldr	r2, [r3, #24]
 800ae64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ae68:	1ad2      	subs	r2, r2, r3
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	619a      	str	r2, [r3, #24]
 800ae6e:	e002      	b.n	800ae76 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2200      	movs	r2, #0
 800ae74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f040 80b9 	bne.w	800aff2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d126      	bne.n	800aed6 <HAL_PCD_EP_DB_Transmit+0xc4>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	461a      	mov	r2, r3
 800ae9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9c:	4413      	add	r3, r2
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	00da      	lsls	r2, r3, #3
 800aea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea8:	4413      	add	r3, r2
 800aeaa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aeae:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	881b      	ldrh	r3, [r3, #0]
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	801a      	strh	r2, [r3, #0]
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	881b      	ldrh	r3, [r3, #0]
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aece:	b29a      	uxth	r2, r3
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	801a      	strh	r2, [r3, #0]
 800aed4:	e01a      	b.n	800af0c <HAL_PCD_EP_DB_Transmit+0xfa>
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	785b      	ldrb	r3, [r3, #1]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d116      	bne.n	800af0c <HAL_PCD_EP_DB_Transmit+0xfa>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	637b      	str	r3, [r7, #52]	; 0x34
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	461a      	mov	r2, r3
 800aef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef2:	4413      	add	r3, r2
 800aef4:	637b      	str	r3, [r7, #52]	; 0x34
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	00da      	lsls	r2, r3, #3
 800aefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefe:	4413      	add	r3, r2
 800af00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af04:	633b      	str	r3, [r7, #48]	; 0x30
 800af06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af08:	2200      	movs	r2, #0
 800af0a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	627b      	str	r3, [r7, #36]	; 0x24
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	785b      	ldrb	r3, [r3, #1]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d126      	bne.n	800af68 <HAL_PCD_EP_DB_Transmit+0x156>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	61fb      	str	r3, [r7, #28]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af28:	b29b      	uxth	r3, r3
 800af2a:	461a      	mov	r2, r3
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	4413      	add	r3, r2
 800af30:	61fb      	str	r3, [r7, #28]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	00da      	lsls	r2, r3, #3
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	4413      	add	r3, r2
 800af3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af40:	61bb      	str	r3, [r7, #24]
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	b29b      	uxth	r3, r3
 800af48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	801a      	strh	r2, [r3, #0]
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	b29b      	uxth	r3, r3
 800af58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af60:	b29a      	uxth	r2, r3
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	801a      	strh	r2, [r3, #0]
 800af66:	e017      	b.n	800af98 <HAL_PCD_EP_DB_Transmit+0x186>
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d113      	bne.n	800af98 <HAL_PCD_EP_DB_Transmit+0x186>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af78:	b29b      	uxth	r3, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	4413      	add	r3, r2
 800af80:	627b      	str	r3, [r7, #36]	; 0x24
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	00da      	lsls	r2, r3, #3
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	4413      	add	r3, r2
 800af8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af90:	623b      	str	r3, [r7, #32]
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	2200      	movs	r2, #0
 800af96:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	4619      	mov	r1, r3
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f00a fdad 	bl	8015afe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800afa4:	88fb      	ldrh	r3, [r7, #6]
 800afa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 82fa 	beq.w	800b5a4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	461a      	mov	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afca:	82fb      	strh	r3, [r7, #22]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	441a      	add	r2, r3
 800afda:	8afb      	ldrh	r3, [r7, #22]
 800afdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afec:	b29b      	uxth	r3, r3
 800afee:	8013      	strh	r3, [r2, #0]
 800aff0:	e2d8      	b.n	800b5a4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800aff2:	88fb      	ldrh	r3, [r7, #6]
 800aff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d021      	beq.n	800b040 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b016:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	441a      	add	r2, r3
 800b028:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b02c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b046:	2b01      	cmp	r3, #1
 800b048:	f040 82ac 	bne.w	800b5a4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	695a      	ldr	r2, [r3, #20]
 800b050:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b054:	441a      	add	r2, r3
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	69da      	ldr	r2, [r3, #28]
 800b05e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b062:	441a      	add	r2, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	6a1a      	ldr	r2, [r3, #32]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	429a      	cmp	r2, r3
 800b072:	d30b      	bcc.n	800b08c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	6a1a      	ldr	r2, [r3, #32]
 800b080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b084:	1ad2      	subs	r2, r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	621a      	str	r2, [r3, #32]
 800b08a:	e017      	b.n	800b0bc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	6a1b      	ldr	r3, [r3, #32]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d108      	bne.n	800b0a6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800b094:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b0a4:	e00a      	b.n	800b0bc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	785b      	ldrb	r3, [r3, #1]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d165      	bne.n	800b190 <HAL_PCD_EP_DB_Transmit+0x37e>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d8:	4413      	add	r3, r2
 800b0da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	00da      	lsls	r2, r3, #3
 800b0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	881b      	ldrh	r3, [r3, #0]
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	801a      	strh	r2, [r3, #0]
 800b0fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b100:	2b3e      	cmp	r3, #62	; 0x3e
 800b102:	d91d      	bls.n	800b140 <HAL_PCD_EP_DB_Transmit+0x32e>
 800b104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b108:	095b      	lsrs	r3, r3, #5
 800b10a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b10c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b110:	f003 031f 	and.w	r3, r3, #31
 800b114:	2b00      	cmp	r3, #0
 800b116:	d102      	bne.n	800b11e <HAL_PCD_EP_DB_Transmit+0x30c>
 800b118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b11a:	3b01      	subs	r3, #1
 800b11c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	b29a      	uxth	r2, r3
 800b124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b126:	b29b      	uxth	r3, r3
 800b128:	029b      	lsls	r3, r3, #10
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	4313      	orrs	r3, r2
 800b12e:	b29b      	uxth	r3, r3
 800b130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b138:	b29a      	uxth	r2, r3
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	801a      	strh	r2, [r3, #0]
 800b13e:	e044      	b.n	800b1ca <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <HAL_PCD_EP_DB_Transmit+0x34c>
 800b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b156:	b29a      	uxth	r2, r3
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	801a      	strh	r2, [r3, #0]
 800b15c:	e035      	b.n	800b1ca <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b15e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b162:	085b      	lsrs	r3, r3, #1
 800b164:	64bb      	str	r3, [r7, #72]	; 0x48
 800b166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b16a:	f003 0301 	and.w	r3, r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <HAL_PCD_EP_DB_Transmit+0x366>
 800b172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b174:	3301      	adds	r3, #1
 800b176:	64bb      	str	r3, [r7, #72]	; 0x48
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b180:	b29b      	uxth	r3, r3
 800b182:	029b      	lsls	r3, r3, #10
 800b184:	b29b      	uxth	r3, r3
 800b186:	4313      	orrs	r3, r2
 800b188:	b29a      	uxth	r2, r3
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	801a      	strh	r2, [r3, #0]
 800b18e:	e01c      	b.n	800b1ca <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	785b      	ldrb	r3, [r3, #1]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d118      	bne.n	800b1ca <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	647b      	str	r3, [r7, #68]	; 0x44
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ac:	4413      	add	r3, r2
 800b1ae:	647b      	str	r3, [r7, #68]	; 0x44
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	00da      	lsls	r2, r3, #3
 800b1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1be:	643b      	str	r3, [r7, #64]	; 0x40
 800b1c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6818      	ldr	r0, [r3, #0]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	6959      	ldr	r1, [r3, #20]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	891a      	ldrh	r2, [r3, #8]
 800b1d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	f006 fe5a 	bl	8011e94 <USB_WritePMA>
 800b1e0:	e1e0      	b.n	800b5a4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	00db      	lsls	r3, r3, #3
 800b1f4:	4413      	add	r3, r2
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	6812      	ldr	r2, [r2, #0]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b206:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	699a      	ldr	r2, [r3, #24]
 800b20e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b212:	429a      	cmp	r2, r3
 800b214:	d307      	bcc.n	800b226 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b21e:	1ad2      	subs	r2, r2, r3
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	619a      	str	r2, [r3, #24]
 800b224:	e002      	b.n	800b22c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2200      	movs	r2, #0
 800b22a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f040 80c0 	bne.w	800b3b6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	785b      	ldrb	r3, [r3, #1]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d126      	bne.n	800b28c <HAL_PCD_EP_DB_Transmit+0x47a>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	461a      	mov	r2, r3
 800b250:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b252:	4413      	add	r3, r2
 800b254:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	00da      	lsls	r2, r3, #3
 800b25c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b25e:	4413      	add	r3, r2
 800b260:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b264:	67bb      	str	r3, [r7, #120]	; 0x78
 800b266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b270:	b29a      	uxth	r2, r3
 800b272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b274:	801a      	strh	r2, [r3, #0]
 800b276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b284:	b29a      	uxth	r2, r3
 800b286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b288:	801a      	strh	r2, [r3, #0]
 800b28a:	e01a      	b.n	800b2c2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	785b      	ldrb	r3, [r3, #1]
 800b290:	2b01      	cmp	r3, #1
 800b292:	d116      	bne.n	800b2c2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	667b      	str	r3, [r7, #100]	; 0x64
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2a8:	4413      	add	r3, r2
 800b2aa:	667b      	str	r3, [r7, #100]	; 0x64
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	00da      	lsls	r2, r3, #3
 800b2b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2ba:	663b      	str	r3, [r7, #96]	; 0x60
 800b2bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2be:	2200      	movs	r2, #0
 800b2c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	677b      	str	r3, [r7, #116]	; 0x74
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	785b      	ldrb	r3, [r3, #1]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d12b      	bne.n	800b328 <HAL_PCD_EP_DB_Transmit+0x516>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e4:	4413      	add	r3, r2
 800b2e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	00da      	lsls	r2, r3, #3
 800b2ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	b29b      	uxth	r3, r3
 800b302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b306:	b29a      	uxth	r2, r3
 800b308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b30c:	801a      	strh	r2, [r3, #0]
 800b30e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	b29b      	uxth	r3, r3
 800b316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b31a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b31e:	b29a      	uxth	r2, r3
 800b320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b324:	801a      	strh	r2, [r3, #0]
 800b326:	e017      	b.n	800b358 <HAL_PCD_EP_DB_Transmit+0x546>
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	785b      	ldrb	r3, [r3, #1]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d113      	bne.n	800b358 <HAL_PCD_EP_DB_Transmit+0x546>
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b338:	b29b      	uxth	r3, r3
 800b33a:	461a      	mov	r2, r3
 800b33c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b33e:	4413      	add	r3, r2
 800b340:	677b      	str	r3, [r7, #116]	; 0x74
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	00da      	lsls	r2, r3, #3
 800b348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b34a:	4413      	add	r3, r2
 800b34c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b350:	673b      	str	r3, [r7, #112]	; 0x70
 800b352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b354:	2200      	movs	r2, #0
 800b356:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	4619      	mov	r1, r3
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f00a fbcd 	bl	8015afe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b364:	88fb      	ldrh	r3, [r7, #6]
 800b366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f040 811a 	bne.w	800b5a4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	881b      	ldrh	r3, [r3, #0]
 800b380:	b29b      	uxth	r3, r3
 800b382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	441a      	add	r2, r3
 800b39c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b3a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	8013      	strh	r3, [r2, #0]
 800b3b4:	e0f6      	b.n	800b5a4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b3b6:	88fb      	ldrh	r3, [r7, #6]
 800b3b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d121      	bne.n	800b404 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4413      	add	r3, r2
 800b3ce:	881b      	ldrh	r3, [r3, #0]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	441a      	add	r2, r3
 800b3ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b3f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b400:	b29b      	uxth	r3, r3
 800b402:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	f040 80ca 	bne.w	800b5a4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	695a      	ldr	r2, [r3, #20]
 800b414:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b418:	441a      	add	r2, r3
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	69da      	ldr	r2, [r3, #28]
 800b422:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b426:	441a      	add	r2, r3
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	6a1a      	ldr	r2, [r3, #32]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	429a      	cmp	r2, r3
 800b436:	d30b      	bcc.n	800b450 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	6a1a      	ldr	r2, [r3, #32]
 800b444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b448:	1ad2      	subs	r2, r2, r3
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	621a      	str	r2, [r3, #32]
 800b44e:	e017      	b.n	800b480 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d108      	bne.n	800b46a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800b458:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b45c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b468:	e00a      	b.n	800b480 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2200      	movs	r2, #0
 800b476:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	657b      	str	r3, [r7, #84]	; 0x54
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	785b      	ldrb	r3, [r3, #1]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d165      	bne.n	800b55a <HAL_PCD_EP_DB_Transmit+0x748>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	461a      	mov	r2, r3
 800b4a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4a2:	4413      	add	r3, r2
 800b4a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	00da      	lsls	r2, r3, #3
 800b4ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4c4:	801a      	strh	r2, [r3, #0]
 800b4c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4ca:	2b3e      	cmp	r3, #62	; 0x3e
 800b4cc:	d91d      	bls.n	800b50a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800b4ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4d2:	095b      	lsrs	r3, r3, #5
 800b4d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4da:	f003 031f 	and.w	r3, r3, #31
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d102      	bne.n	800b4e8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800b4e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	029b      	lsls	r3, r3, #10
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b502:	b29a      	uxth	r2, r3
 800b504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b506:	801a      	strh	r2, [r3, #0]
 800b508:	e041      	b.n	800b58e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b50a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10a      	bne.n	800b528 <HAL_PCD_EP_DB_Transmit+0x716>
 800b512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	b29b      	uxth	r3, r3
 800b518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b51c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b520:	b29a      	uxth	r2, r3
 800b522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b524:	801a      	strh	r2, [r3, #0]
 800b526:	e032      	b.n	800b58e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b52c:	085b      	lsrs	r3, r3, #1
 800b52e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <HAL_PCD_EP_DB_Transmit+0x730>
 800b53c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b53e:	3301      	adds	r3, #1
 800b540:	66bb      	str	r3, [r7, #104]	; 0x68
 800b542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	b29a      	uxth	r2, r3
 800b548:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	029b      	lsls	r3, r3, #10
 800b54e:	b29b      	uxth	r3, r3
 800b550:	4313      	orrs	r3, r2
 800b552:	b29a      	uxth	r2, r3
 800b554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b556:	801a      	strh	r2, [r3, #0]
 800b558:	e019      	b.n	800b58e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	785b      	ldrb	r3, [r3, #1]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d115      	bne.n	800b58e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	461a      	mov	r2, r3
 800b56e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b570:	4413      	add	r3, r2
 800b572:	657b      	str	r3, [r7, #84]	; 0x54
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	00da      	lsls	r2, r3, #3
 800b57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b57c:	4413      	add	r3, r2
 800b57e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b582:	653b      	str	r3, [r7, #80]	; 0x50
 800b584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b588:	b29a      	uxth	r2, r3
 800b58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b58c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	6959      	ldr	r1, [r3, #20]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	895a      	ldrh	r2, [r3, #10]
 800b59a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	f006 fc78 	bl	8011e94 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5be:	82bb      	strh	r3, [r7, #20]
 800b5c0:	8abb      	ldrh	r3, [r7, #20]
 800b5c2:	f083 0310 	eor.w	r3, r3, #16
 800b5c6:	82bb      	strh	r3, [r7, #20]
 800b5c8:	8abb      	ldrh	r3, [r7, #20]
 800b5ca:	f083 0320 	eor.w	r3, r3, #32
 800b5ce:	82bb      	strh	r3, [r7, #20]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	441a      	add	r2, r3
 800b5de:	8abb      	ldrh	r3, [r7, #20]
 800b5e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3790      	adds	r7, #144	; 0x90
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b087      	sub	sp, #28
 800b602:	af00      	add	r7, sp, #0
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	607b      	str	r3, [r7, #4]
 800b608:	460b      	mov	r3, r1
 800b60a:	817b      	strh	r3, [r7, #10]
 800b60c:	4613      	mov	r3, r2
 800b60e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b610:	897b      	ldrh	r3, [r7, #10]
 800b612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b616:	b29b      	uxth	r3, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b61c:	897b      	ldrh	r3, [r7, #10]
 800b61e:	f003 0207 	and.w	r2, r3, #7
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	00db      	lsls	r3, r3, #3
 800b62a:	3310      	adds	r3, #16
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	4413      	add	r3, r2
 800b630:	617b      	str	r3, [r7, #20]
 800b632:	e009      	b.n	800b648 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b634:	897a      	ldrh	r2, [r7, #10]
 800b636:	4613      	mov	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	4413      	add	r3, r2
 800b646:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b648:	893b      	ldrh	r3, [r7, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d107      	bne.n	800b65e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2200      	movs	r2, #0
 800b652:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	b29a      	uxth	r2, r3
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	80da      	strh	r2, [r3, #6]
 800b65c:	e00b      	b.n	800b676 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2201      	movs	r2, #1
 800b662:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	b29a      	uxth	r2, r3
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	0c1b      	lsrs	r3, r3, #16
 800b670:	b29a      	uxth	r2, r3
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	371c      	adds	r7, #28
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	f043 0301 	orr.w	r3, r3, #1
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	f043 0302 	orr.w	r3, r3, #2
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d141      	bne.n	800b76a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b6e6:	4b4b      	ldr	r3, [pc, #300]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6f2:	d131      	bne.n	800b758 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b6f4:	4b47      	ldr	r3, [pc, #284]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6fa:	4a46      	ldr	r2, [pc, #280]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b704:	4b43      	ldr	r3, [pc, #268]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b70c:	4a41      	ldr	r2, [pc, #260]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b70e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b712:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b714:	4b40      	ldr	r3, [pc, #256]	; (800b818 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2232      	movs	r2, #50	; 0x32
 800b71a:	fb02 f303 	mul.w	r3, r2, r3
 800b71e:	4a3f      	ldr	r2, [pc, #252]	; (800b81c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b720:	fba2 2303 	umull	r2, r3, r2, r3
 800b724:	0c9b      	lsrs	r3, r3, #18
 800b726:	3301      	adds	r3, #1
 800b728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b72a:	e002      	b.n	800b732 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	3b01      	subs	r3, #1
 800b730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b732:	4b38      	ldr	r3, [pc, #224]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b73a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b73e:	d102      	bne.n	800b746 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1f2      	bne.n	800b72c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b746:	4b33      	ldr	r3, [pc, #204]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b74e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b752:	d158      	bne.n	800b806 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e057      	b.n	800b808 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b758:	4b2e      	ldr	r3, [pc, #184]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b75e:	4a2d      	ldr	r2, [pc, #180]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b768:	e04d      	b.n	800b806 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b770:	d141      	bne.n	800b7f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b772:	4b28      	ldr	r3, [pc, #160]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b77a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b77e:	d131      	bne.n	800b7e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b780:	4b24      	ldr	r3, [pc, #144]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b786:	4a23      	ldr	r2, [pc, #140]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b78c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b790:	4b20      	ldr	r3, [pc, #128]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b798:	4a1e      	ldr	r2, [pc, #120]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b79a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b79e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b7a0:	4b1d      	ldr	r3, [pc, #116]	; (800b818 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2232      	movs	r2, #50	; 0x32
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
 800b7aa:	4a1c      	ldr	r2, [pc, #112]	; (800b81c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b7b0:	0c9b      	lsrs	r3, r3, #18
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b7b6:	e002      	b.n	800b7be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b7be:	4b15      	ldr	r3, [pc, #84]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7ca:	d102      	bne.n	800b7d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1f2      	bne.n	800b7b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b7d2:	4b10      	ldr	r3, [pc, #64]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7de:	d112      	bne.n	800b806 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e011      	b.n	800b808 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b7e4:	4b0b      	ldr	r3, [pc, #44]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7ea:	4a0a      	ldr	r2, [pc, #40]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b7f4:	e007      	b.n	800b806 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b7f6:	4b07      	ldr	r3, [pc, #28]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b7fe:	4a05      	ldr	r2, [pc, #20]	; (800b814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b804:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3714      	adds	r7, #20
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr
 800b814:	40007000 	.word	0x40007000
 800b818:	200001c4 	.word	0x200001c4
 800b81c:	431bde83 	.word	0x431bde83

0800b820 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b820:	b480      	push	{r7}
 800b822:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b824:	4b05      	ldr	r3, [pc, #20]	; (800b83c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	4a04      	ldr	r2, [pc, #16]	; (800b83c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b82a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b82e:	6093      	str	r3, [r2, #8]
}
 800b830:	bf00      	nop
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	40007000 	.word	0x40007000

0800b840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d101      	bne.n	800b852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	e2fe      	b.n	800be50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d075      	beq.n	800b94a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b85e:	4b97      	ldr	r3, [pc, #604]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f003 030c 	and.w	r3, r3, #12
 800b866:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b868:	4b94      	ldr	r3, [pc, #592]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	f003 0303 	and.w	r3, r3, #3
 800b870:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	2b0c      	cmp	r3, #12
 800b876:	d102      	bne.n	800b87e <HAL_RCC_OscConfig+0x3e>
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d002      	beq.n	800b884 <HAL_RCC_OscConfig+0x44>
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	2b08      	cmp	r3, #8
 800b882:	d10b      	bne.n	800b89c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b884:	4b8d      	ldr	r3, [pc, #564]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d05b      	beq.n	800b948 <HAL_RCC_OscConfig+0x108>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d157      	bne.n	800b948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e2d9      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8a4:	d106      	bne.n	800b8b4 <HAL_RCC_OscConfig+0x74>
 800b8a6:	4b85      	ldr	r3, [pc, #532]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a84      	ldr	r2, [pc, #528]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	e01d      	b.n	800b8f0 <HAL_RCC_OscConfig+0xb0>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8bc:	d10c      	bne.n	800b8d8 <HAL_RCC_OscConfig+0x98>
 800b8be:	4b7f      	ldr	r3, [pc, #508]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a7e      	ldr	r2, [pc, #504]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8c8:	6013      	str	r3, [r2, #0]
 800b8ca:	4b7c      	ldr	r3, [pc, #496]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a7b      	ldr	r2, [pc, #492]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	e00b      	b.n	800b8f0 <HAL_RCC_OscConfig+0xb0>
 800b8d8:	4b78      	ldr	r3, [pc, #480]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a77      	ldr	r2, [pc, #476]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	4b75      	ldr	r3, [pc, #468]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a74      	ldr	r2, [pc, #464]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b8ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d013      	beq.n	800b920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8f8:	f7fa fafe 	bl	8005ef8 <HAL_GetTick>
 800b8fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b8fe:	e008      	b.n	800b912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b900:	f7fa fafa 	bl	8005ef8 <HAL_GetTick>
 800b904:	4602      	mov	r2, r0
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	2b64      	cmp	r3, #100	; 0x64
 800b90c:	d901      	bls.n	800b912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b90e:	2303      	movs	r3, #3
 800b910:	e29e      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b912:	4b6a      	ldr	r3, [pc, #424]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d0f0      	beq.n	800b900 <HAL_RCC_OscConfig+0xc0>
 800b91e:	e014      	b.n	800b94a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b920:	f7fa faea 	bl	8005ef8 <HAL_GetTick>
 800b924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b926:	e008      	b.n	800b93a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b928:	f7fa fae6 	bl	8005ef8 <HAL_GetTick>
 800b92c:	4602      	mov	r2, r0
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	2b64      	cmp	r3, #100	; 0x64
 800b934:	d901      	bls.n	800b93a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b936:	2303      	movs	r3, #3
 800b938:	e28a      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b93a:	4b60      	ldr	r3, [pc, #384]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1f0      	bne.n	800b928 <HAL_RCC_OscConfig+0xe8>
 800b946:	e000      	b.n	800b94a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 0302 	and.w	r3, r3, #2
 800b952:	2b00      	cmp	r3, #0
 800b954:	d075      	beq.n	800ba42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b956:	4b59      	ldr	r3, [pc, #356]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	f003 030c 	and.w	r3, r3, #12
 800b95e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b960:	4b56      	ldr	r3, [pc, #344]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	f003 0303 	and.w	r3, r3, #3
 800b968:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b0c      	cmp	r3, #12
 800b96e:	d102      	bne.n	800b976 <HAL_RCC_OscConfig+0x136>
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	2b02      	cmp	r3, #2
 800b974:	d002      	beq.n	800b97c <HAL_RCC_OscConfig+0x13c>
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	2b04      	cmp	r3, #4
 800b97a:	d11f      	bne.n	800b9bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b97c:	4b4f      	ldr	r3, [pc, #316]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <HAL_RCC_OscConfig+0x154>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e25d      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b994:	4b49      	ldr	r3, [pc, #292]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	061b      	lsls	r3, r3, #24
 800b9a2:	4946      	ldr	r1, [pc, #280]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b9a8:	4b45      	ldr	r3, [pc, #276]	; (800bac0 <HAL_RCC_OscConfig+0x280>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fa fa57 	bl	8005e60 <HAL_InitTick>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d043      	beq.n	800ba40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e249      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d023      	beq.n	800ba0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b9c4:	4b3d      	ldr	r3, [pc, #244]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a3c      	ldr	r2, [pc, #240]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b9ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d0:	f7fa fa92 	bl	8005ef8 <HAL_GetTick>
 800b9d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b9d6:	e008      	b.n	800b9ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9d8:	f7fa fa8e 	bl	8005ef8 <HAL_GetTick>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d901      	bls.n	800b9ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e232      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b9ea:	4b34      	ldr	r3, [pc, #208]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0f0      	beq.n	800b9d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9f6:	4b31      	ldr	r3, [pc, #196]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	061b      	lsls	r3, r3, #24
 800ba04:	492d      	ldr	r1, [pc, #180]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	604b      	str	r3, [r1, #4]
 800ba0a:	e01a      	b.n	800ba42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ba0c:	4b2b      	ldr	r3, [pc, #172]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a2a      	ldr	r2, [pc, #168]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800ba12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba18:	f7fa fa6e 	bl	8005ef8 <HAL_GetTick>
 800ba1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ba1e:	e008      	b.n	800ba32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba20:	f7fa fa6a 	bl	8005ef8 <HAL_GetTick>
 800ba24:	4602      	mov	r2, r0
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d901      	bls.n	800ba32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	e20e      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ba32:	4b22      	ldr	r3, [pc, #136]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1f0      	bne.n	800ba20 <HAL_RCC_OscConfig+0x1e0>
 800ba3e:	e000      	b.n	800ba42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d041      	beq.n	800bad2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d01c      	beq.n	800ba90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba56:	4b19      	ldr	r3, [pc, #100]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800ba58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba5c:	4a17      	ldr	r2, [pc, #92]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800ba5e:	f043 0301 	orr.w	r3, r3, #1
 800ba62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba66:	f7fa fa47 	bl	8005ef8 <HAL_GetTick>
 800ba6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ba6c:	e008      	b.n	800ba80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba6e:	f7fa fa43 	bl	8005ef8 <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d901      	bls.n	800ba80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e1e7      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ba80:	4b0e      	ldr	r3, [pc, #56]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800ba82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba86:	f003 0302 	and.w	r3, r3, #2
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0ef      	beq.n	800ba6e <HAL_RCC_OscConfig+0x22e>
 800ba8e:	e020      	b.n	800bad2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba90:	4b0a      	ldr	r3, [pc, #40]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800ba92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba96:	4a09      	ldr	r2, [pc, #36]	; (800babc <HAL_RCC_OscConfig+0x27c>)
 800ba98:	f023 0301 	bic.w	r3, r3, #1
 800ba9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baa0:	f7fa fa2a 	bl	8005ef8 <HAL_GetTick>
 800baa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800baa6:	e00d      	b.n	800bac4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800baa8:	f7fa fa26 	bl	8005ef8 <HAL_GetTick>
 800baac:	4602      	mov	r2, r0
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d906      	bls.n	800bac4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800bab6:	2303      	movs	r3, #3
 800bab8:	e1ca      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
 800baba:	bf00      	nop
 800babc:	40021000 	.word	0x40021000
 800bac0:	200001d8 	.word	0x200001d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bac4:	4b8c      	ldr	r3, [pc, #560]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baca:	f003 0302 	and.w	r3, r3, #2
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1ea      	bne.n	800baa8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 0304 	and.w	r3, r3, #4
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 80a6 	beq.w	800bc2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bae0:	2300      	movs	r3, #0
 800bae2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bae4:	4b84      	ldr	r3, [pc, #528]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <HAL_RCC_OscConfig+0x2b4>
 800baf0:	2301      	movs	r3, #1
 800baf2:	e000      	b.n	800baf6 <HAL_RCC_OscConfig+0x2b6>
 800baf4:	2300      	movs	r3, #0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00d      	beq.n	800bb16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bafa:	4b7f      	ldr	r3, [pc, #508]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bafc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafe:	4a7e      	ldr	r2, [pc, #504]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bb00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb04:	6593      	str	r3, [r2, #88]	; 0x58
 800bb06:	4b7c      	ldr	r3, [pc, #496]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb0e:	60fb      	str	r3, [r7, #12]
 800bb10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bb12:	2301      	movs	r3, #1
 800bb14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb16:	4b79      	ldr	r3, [pc, #484]	; (800bcfc <HAL_RCC_OscConfig+0x4bc>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d118      	bne.n	800bb54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb22:	4b76      	ldr	r3, [pc, #472]	; (800bcfc <HAL_RCC_OscConfig+0x4bc>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a75      	ldr	r2, [pc, #468]	; (800bcfc <HAL_RCC_OscConfig+0x4bc>)
 800bb28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bb2e:	f7fa f9e3 	bl	8005ef8 <HAL_GetTick>
 800bb32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb34:	e008      	b.n	800bb48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb36:	f7fa f9df 	bl	8005ef8 <HAL_GetTick>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d901      	bls.n	800bb48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800bb44:	2303      	movs	r3, #3
 800bb46:	e183      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb48:	4b6c      	ldr	r3, [pc, #432]	; (800bcfc <HAL_RCC_OscConfig+0x4bc>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0f0      	beq.n	800bb36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d108      	bne.n	800bb6e <HAL_RCC_OscConfig+0x32e>
 800bb5c:	4b66      	ldr	r3, [pc, #408]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb62:	4a65      	ldr	r2, [pc, #404]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bb64:	f043 0301 	orr.w	r3, r3, #1
 800bb68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bb6c:	e024      	b.n	800bbb8 <HAL_RCC_OscConfig+0x378>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	2b05      	cmp	r3, #5
 800bb74:	d110      	bne.n	800bb98 <HAL_RCC_OscConfig+0x358>
 800bb76:	4b60      	ldr	r3, [pc, #384]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb7c:	4a5e      	ldr	r2, [pc, #376]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bb7e:	f043 0304 	orr.w	r3, r3, #4
 800bb82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bb86:	4b5c      	ldr	r3, [pc, #368]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bb88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb8c:	4a5a      	ldr	r2, [pc, #360]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bb8e:	f043 0301 	orr.w	r3, r3, #1
 800bb92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bb96:	e00f      	b.n	800bbb8 <HAL_RCC_OscConfig+0x378>
 800bb98:	4b57      	ldr	r3, [pc, #348]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bb9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb9e:	4a56      	ldr	r2, [pc, #344]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bba0:	f023 0301 	bic.w	r3, r3, #1
 800bba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bba8:	4b53      	ldr	r3, [pc, #332]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bbaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbae:	4a52      	ldr	r2, [pc, #328]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bbb0:	f023 0304 	bic.w	r3, r3, #4
 800bbb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d016      	beq.n	800bbee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbc0:	f7fa f99a 	bl	8005ef8 <HAL_GetTick>
 800bbc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbc6:	e00a      	b.n	800bbde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbc8:	f7fa f996 	bl	8005ef8 <HAL_GetTick>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d901      	bls.n	800bbde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	e138      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbde:	4b46      	ldr	r3, [pc, #280]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bbe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe4:	f003 0302 	and.w	r3, r3, #2
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d0ed      	beq.n	800bbc8 <HAL_RCC_OscConfig+0x388>
 800bbec:	e015      	b.n	800bc1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbee:	f7fa f983 	bl	8005ef8 <HAL_GetTick>
 800bbf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bbf4:	e00a      	b.n	800bc0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbf6:	f7fa f97f 	bl	8005ef8 <HAL_GetTick>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d901      	bls.n	800bc0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	e121      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bc0c:	4b3a      	ldr	r3, [pc, #232]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bc0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc12:	f003 0302 	and.w	r3, r3, #2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1ed      	bne.n	800bbf6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bc1a:	7ffb      	ldrb	r3, [r7, #31]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d105      	bne.n	800bc2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc20:	4b35      	ldr	r3, [pc, #212]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bc22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc24:	4a34      	ldr	r2, [pc, #208]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bc26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f003 0320 	and.w	r3, r3, #32
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d03c      	beq.n	800bcb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d01c      	beq.n	800bc7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bc40:	4b2d      	ldr	r3, [pc, #180]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bc42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc46:	4a2c      	ldr	r2, [pc, #176]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bc48:	f043 0301 	orr.w	r3, r3, #1
 800bc4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc50:	f7fa f952 	bl	8005ef8 <HAL_GetTick>
 800bc54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bc56:	e008      	b.n	800bc6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc58:	f7fa f94e 	bl	8005ef8 <HAL_GetTick>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d901      	bls.n	800bc6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800bc66:	2303      	movs	r3, #3
 800bc68:	e0f2      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bc6a:	4b23      	ldr	r3, [pc, #140]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bc6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc70:	f003 0302 	and.w	r3, r3, #2
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d0ef      	beq.n	800bc58 <HAL_RCC_OscConfig+0x418>
 800bc78:	e01b      	b.n	800bcb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bc7a:	4b1f      	ldr	r3, [pc, #124]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bc7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc80:	4a1d      	ldr	r2, [pc, #116]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bc82:	f023 0301 	bic.w	r3, r3, #1
 800bc86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc8a:	f7fa f935 	bl	8005ef8 <HAL_GetTick>
 800bc8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bc90:	e008      	b.n	800bca4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc92:	f7fa f931 	bl	8005ef8 <HAL_GetTick>
 800bc96:	4602      	mov	r2, r0
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d901      	bls.n	800bca4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800bca0:	2303      	movs	r3, #3
 800bca2:	e0d5      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bca4:	4b14      	ldr	r3, [pc, #80]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcaa:	f003 0302 	and.w	r3, r3, #2
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1ef      	bne.n	800bc92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	69db      	ldr	r3, [r3, #28]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 80c9 	beq.w	800be4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bcbc:	4b0e      	ldr	r3, [pc, #56]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	f003 030c 	and.w	r3, r3, #12
 800bcc4:	2b0c      	cmp	r3, #12
 800bcc6:	f000 8083 	beq.w	800bdd0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d15e      	bne.n	800bd90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcd2:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a08      	ldr	r2, [pc, #32]	; (800bcf8 <HAL_RCC_OscConfig+0x4b8>)
 800bcd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcde:	f7fa f90b 	bl	8005ef8 <HAL_GetTick>
 800bce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bce4:	e00c      	b.n	800bd00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bce6:	f7fa f907 	bl	8005ef8 <HAL_GetTick>
 800bcea:	4602      	mov	r2, r0
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d905      	bls.n	800bd00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e0ab      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
 800bcf8:	40021000 	.word	0x40021000
 800bcfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd00:	4b55      	ldr	r3, [pc, #340]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1ec      	bne.n	800bce6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd0c:	4b52      	ldr	r3, [pc, #328]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd0e:	68da      	ldr	r2, [r3, #12]
 800bd10:	4b52      	ldr	r3, [pc, #328]	; (800be5c <HAL_RCC_OscConfig+0x61c>)
 800bd12:	4013      	ands	r3, r2
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	6a11      	ldr	r1, [r2, #32]
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bd1c:	3a01      	subs	r2, #1
 800bd1e:	0112      	lsls	r2, r2, #4
 800bd20:	4311      	orrs	r1, r2
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800bd26:	0212      	lsls	r2, r2, #8
 800bd28:	4311      	orrs	r1, r2
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd2e:	0852      	lsrs	r2, r2, #1
 800bd30:	3a01      	subs	r2, #1
 800bd32:	0552      	lsls	r2, r2, #21
 800bd34:	4311      	orrs	r1, r2
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bd3a:	0852      	lsrs	r2, r2, #1
 800bd3c:	3a01      	subs	r2, #1
 800bd3e:	0652      	lsls	r2, r2, #25
 800bd40:	4311      	orrs	r1, r2
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bd46:	06d2      	lsls	r2, r2, #27
 800bd48:	430a      	orrs	r2, r1
 800bd4a:	4943      	ldr	r1, [pc, #268]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd50:	4b41      	ldr	r3, [pc, #260]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a40      	ldr	r2, [pc, #256]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bd5c:	4b3e      	ldr	r3, [pc, #248]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	4a3d      	ldr	r2, [pc, #244]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd68:	f7fa f8c6 	bl	8005ef8 <HAL_GetTick>
 800bd6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bd6e:	e008      	b.n	800bd82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd70:	f7fa f8c2 	bl	8005ef8 <HAL_GetTick>
 800bd74:	4602      	mov	r2, r0
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d901      	bls.n	800bd82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	e066      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bd82:	4b35      	ldr	r3, [pc, #212]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d0f0      	beq.n	800bd70 <HAL_RCC_OscConfig+0x530>
 800bd8e:	e05e      	b.n	800be4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd90:	4b31      	ldr	r3, [pc, #196]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a30      	ldr	r2, [pc, #192]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bd96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd9c:	f7fa f8ac 	bl	8005ef8 <HAL_GetTick>
 800bda0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bda2:	e008      	b.n	800bdb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bda4:	f7fa f8a8 	bl	8005ef8 <HAL_GetTick>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d901      	bls.n	800bdb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e04c      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bdb6:	4b28      	ldr	r3, [pc, #160]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1f0      	bne.n	800bda4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bdc2:	4b25      	ldr	r3, [pc, #148]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bdc4:	68da      	ldr	r2, [r3, #12]
 800bdc6:	4924      	ldr	r1, [pc, #144]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bdc8:	4b25      	ldr	r3, [pc, #148]	; (800be60 <HAL_RCC_OscConfig+0x620>)
 800bdca:	4013      	ands	r3, r2
 800bdcc:	60cb      	str	r3, [r1, #12]
 800bdce:	e03e      	b.n	800be4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	69db      	ldr	r3, [r3, #28]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d101      	bne.n	800bddc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e039      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800bddc:	4b1e      	ldr	r3, [pc, #120]	; (800be58 <HAL_RCC_OscConfig+0x618>)
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f003 0203 	and.w	r2, r3, #3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d12c      	bne.n	800be4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d123      	bne.n	800be4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800be0e:	429a      	cmp	r2, r3
 800be10:	d11b      	bne.n	800be4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800be1e:	429a      	cmp	r2, r3
 800be20:	d113      	bne.n	800be4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2c:	085b      	lsrs	r3, r3, #1
 800be2e:	3b01      	subs	r3, #1
 800be30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800be32:	429a      	cmp	r2, r3
 800be34:	d109      	bne.n	800be4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be40:	085b      	lsrs	r3, r3, #1
 800be42:	3b01      	subs	r3, #1
 800be44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be46:	429a      	cmp	r2, r3
 800be48:	d001      	beq.n	800be4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3720      	adds	r7, #32
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	40021000 	.word	0x40021000
 800be5c:	019f800c 	.word	0x019f800c
 800be60:	feeefffc 	.word	0xfeeefffc

0800be64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800be6e:	2300      	movs	r3, #0
 800be70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	e11e      	b.n	800c0ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be7c:	4b91      	ldr	r3, [pc, #580]	; (800c0c4 <HAL_RCC_ClockConfig+0x260>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 030f 	and.w	r3, r3, #15
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	429a      	cmp	r2, r3
 800be88:	d910      	bls.n	800beac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be8a:	4b8e      	ldr	r3, [pc, #568]	; (800c0c4 <HAL_RCC_ClockConfig+0x260>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f023 020f 	bic.w	r2, r3, #15
 800be92:	498c      	ldr	r1, [pc, #560]	; (800c0c4 <HAL_RCC_ClockConfig+0x260>)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	4313      	orrs	r3, r2
 800be98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be9a:	4b8a      	ldr	r3, [pc, #552]	; (800c0c4 <HAL_RCC_ClockConfig+0x260>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 030f 	and.w	r3, r3, #15
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d001      	beq.n	800beac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e106      	b.n	800c0ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d073      	beq.n	800bfa0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d129      	bne.n	800bf14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bec0:	4b81      	ldr	r3, [pc, #516]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d101      	bne.n	800bed0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	e0f4      	b.n	800c0ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800bed0:	f000 f99e 	bl	800c210 <RCC_GetSysClockFreqFromPLLSource>
 800bed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	4a7c      	ldr	r2, [pc, #496]	; (800c0cc <HAL_RCC_ClockConfig+0x268>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d93f      	bls.n	800bf5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bede:	4b7a      	ldr	r3, [pc, #488]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d009      	beq.n	800befe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d033      	beq.n	800bf5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800befa:	2b00      	cmp	r3, #0
 800befc:	d12f      	bne.n	800bf5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800befe:	4b72      	ldr	r3, [pc, #456]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf06:	4a70      	ldr	r2, [pc, #448]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bf08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bf0e:	2380      	movs	r3, #128	; 0x80
 800bf10:	617b      	str	r3, [r7, #20]
 800bf12:	e024      	b.n	800bf5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d107      	bne.n	800bf2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bf1c:	4b6a      	ldr	r3, [pc, #424]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d109      	bne.n	800bf3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e0c6      	b.n	800c0ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf2c:	4b66      	ldr	r3, [pc, #408]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e0be      	b.n	800c0ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bf3c:	f000 f8ce 	bl	800c0dc <HAL_RCC_GetSysClockFreq>
 800bf40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	4a61      	ldr	r2, [pc, #388]	; (800c0cc <HAL_RCC_ClockConfig+0x268>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d909      	bls.n	800bf5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bf4a:	4b5f      	ldr	r3, [pc, #380]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf52:	4a5d      	ldr	r2, [pc, #372]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bf54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bf5a:	2380      	movs	r3, #128	; 0x80
 800bf5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bf5e:	4b5a      	ldr	r3, [pc, #360]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	f023 0203 	bic.w	r2, r3, #3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	4957      	ldr	r1, [pc, #348]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf70:	f7f9 ffc2 	bl	8005ef8 <HAL_GetTick>
 800bf74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf76:	e00a      	b.n	800bf8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf78:	f7f9 ffbe 	bl	8005ef8 <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d901      	bls.n	800bf8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e095      	b.n	800c0ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf8e:	4b4e      	ldr	r3, [pc, #312]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	f003 020c 	and.w	r2, r3, #12
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d1eb      	bne.n	800bf78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 0302 	and.w	r3, r3, #2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d023      	beq.n	800bff4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 0304 	and.w	r3, r3, #4
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d005      	beq.n	800bfc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bfb8:	4b43      	ldr	r3, [pc, #268]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	4a42      	ldr	r2, [pc, #264]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bfbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bfc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 0308 	and.w	r3, r3, #8
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d007      	beq.n	800bfe0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bfd0:	4b3d      	ldr	r3, [pc, #244]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bfd8:	4a3b      	ldr	r2, [pc, #236]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bfda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bfde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfe0:	4b39      	ldr	r3, [pc, #228]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	4936      	ldr	r1, [pc, #216]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bfee:	4313      	orrs	r3, r2
 800bff0:	608b      	str	r3, [r1, #8]
 800bff2:	e008      	b.n	800c006 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	2b80      	cmp	r3, #128	; 0x80
 800bff8:	d105      	bne.n	800c006 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bffa:	4b33      	ldr	r3, [pc, #204]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	4a32      	ldr	r2, [pc, #200]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800c000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c004:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c006:	4b2f      	ldr	r3, [pc, #188]	; (800c0c4 <HAL_RCC_ClockConfig+0x260>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 030f 	and.w	r3, r3, #15
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	429a      	cmp	r2, r3
 800c012:	d21d      	bcs.n	800c050 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c014:	4b2b      	ldr	r3, [pc, #172]	; (800c0c4 <HAL_RCC_ClockConfig+0x260>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f023 020f 	bic.w	r2, r3, #15
 800c01c:	4929      	ldr	r1, [pc, #164]	; (800c0c4 <HAL_RCC_ClockConfig+0x260>)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	4313      	orrs	r3, r2
 800c022:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c024:	f7f9 ff68 	bl	8005ef8 <HAL_GetTick>
 800c028:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c02a:	e00a      	b.n	800c042 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c02c:	f7f9 ff64 	bl	8005ef8 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	f241 3288 	movw	r2, #5000	; 0x1388
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d901      	bls.n	800c042 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e03b      	b.n	800c0ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c042:	4b20      	ldr	r3, [pc, #128]	; (800c0c4 <HAL_RCC_ClockConfig+0x260>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 030f 	and.w	r3, r3, #15
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d1ed      	bne.n	800c02c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0304 	and.w	r3, r3, #4
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d008      	beq.n	800c06e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c05c:	4b1a      	ldr	r3, [pc, #104]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	4917      	ldr	r1, [pc, #92]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f003 0308 	and.w	r3, r3, #8
 800c076:	2b00      	cmp	r3, #0
 800c078:	d009      	beq.n	800c08e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c07a:	4b13      	ldr	r3, [pc, #76]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	490f      	ldr	r1, [pc, #60]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800c08a:	4313      	orrs	r3, r2
 800c08c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c08e:	f000 f825 	bl	800c0dc <HAL_RCC_GetSysClockFreq>
 800c092:	4602      	mov	r2, r0
 800c094:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <HAL_RCC_ClockConfig+0x264>)
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	091b      	lsrs	r3, r3, #4
 800c09a:	f003 030f 	and.w	r3, r3, #15
 800c09e:	490c      	ldr	r1, [pc, #48]	; (800c0d0 <HAL_RCC_ClockConfig+0x26c>)
 800c0a0:	5ccb      	ldrb	r3, [r1, r3]
 800c0a2:	f003 031f 	and.w	r3, r3, #31
 800c0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0aa:	4a0a      	ldr	r2, [pc, #40]	; (800c0d4 <HAL_RCC_ClockConfig+0x270>)
 800c0ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c0ae:	4b0a      	ldr	r3, [pc, #40]	; (800c0d8 <HAL_RCC_ClockConfig+0x274>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7f9 fed4 	bl	8005e60 <HAL_InitTick>
 800c0b8:	4603      	mov	r3, r0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3718      	adds	r7, #24
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	40022000 	.word	0x40022000
 800c0c8:	40021000 	.word	0x40021000
 800c0cc:	04c4b400 	.word	0x04c4b400
 800c0d0:	0801aca4 	.word	0x0801aca4
 800c0d4:	200001c4 	.word	0x200001c4
 800c0d8:	200001d8 	.word	0x200001d8

0800c0dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c0e2:	4b2c      	ldr	r3, [pc, #176]	; (800c194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	f003 030c 	and.w	r3, r3, #12
 800c0ea:	2b04      	cmp	r3, #4
 800c0ec:	d102      	bne.n	800c0f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c0ee:	4b2a      	ldr	r3, [pc, #168]	; (800c198 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c0f0:	613b      	str	r3, [r7, #16]
 800c0f2:	e047      	b.n	800c184 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c0f4:	4b27      	ldr	r3, [pc, #156]	; (800c194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f003 030c 	and.w	r3, r3, #12
 800c0fc:	2b08      	cmp	r3, #8
 800c0fe:	d102      	bne.n	800c106 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c100:	4b26      	ldr	r3, [pc, #152]	; (800c19c <HAL_RCC_GetSysClockFreq+0xc0>)
 800c102:	613b      	str	r3, [r7, #16]
 800c104:	e03e      	b.n	800c184 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c106:	4b23      	ldr	r3, [pc, #140]	; (800c194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	f003 030c 	and.w	r3, r3, #12
 800c10e:	2b0c      	cmp	r3, #12
 800c110:	d136      	bne.n	800c180 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c112:	4b20      	ldr	r3, [pc, #128]	; (800c194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	f003 0303 	and.w	r3, r3, #3
 800c11a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c11c:	4b1d      	ldr	r3, [pc, #116]	; (800c194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	091b      	lsrs	r3, r3, #4
 800c122:	f003 030f 	and.w	r3, r3, #15
 800c126:	3301      	adds	r3, #1
 800c128:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d10c      	bne.n	800c14a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c130:	4a1a      	ldr	r2, [pc, #104]	; (800c19c <HAL_RCC_GetSysClockFreq+0xc0>)
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	fbb2 f3f3 	udiv	r3, r2, r3
 800c138:	4a16      	ldr	r2, [pc, #88]	; (800c194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c13a:	68d2      	ldr	r2, [r2, #12]
 800c13c:	0a12      	lsrs	r2, r2, #8
 800c13e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c142:	fb02 f303 	mul.w	r3, r2, r3
 800c146:	617b      	str	r3, [r7, #20]
      break;
 800c148:	e00c      	b.n	800c164 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c14a:	4a13      	ldr	r2, [pc, #76]	; (800c198 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c152:	4a10      	ldr	r2, [pc, #64]	; (800c194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c154:	68d2      	ldr	r2, [r2, #12]
 800c156:	0a12      	lsrs	r2, r2, #8
 800c158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c15c:	fb02 f303 	mul.w	r3, r2, r3
 800c160:	617b      	str	r3, [r7, #20]
      break;
 800c162:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c164:	4b0b      	ldr	r3, [pc, #44]	; (800c194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	0e5b      	lsrs	r3, r3, #25
 800c16a:	f003 0303 	and.w	r3, r3, #3
 800c16e:	3301      	adds	r3, #1
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c174:	697a      	ldr	r2, [r7, #20]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	fbb2 f3f3 	udiv	r3, r2, r3
 800c17c:	613b      	str	r3, [r7, #16]
 800c17e:	e001      	b.n	800c184 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c180:	2300      	movs	r3, #0
 800c182:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c184:	693b      	ldr	r3, [r7, #16]
}
 800c186:	4618      	mov	r0, r3
 800c188:	371c      	adds	r7, #28
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	40021000 	.word	0x40021000
 800c198:	00f42400 	.word	0x00f42400
 800c19c:	007a1200 	.word	0x007a1200

0800c1a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c1a4:	4b03      	ldr	r3, [pc, #12]	; (800c1b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	200001c4 	.word	0x200001c4

0800c1b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c1bc:	f7ff fff0 	bl	800c1a0 <HAL_RCC_GetHCLKFreq>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	4b06      	ldr	r3, [pc, #24]	; (800c1dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	0a1b      	lsrs	r3, r3, #8
 800c1c8:	f003 0307 	and.w	r3, r3, #7
 800c1cc:	4904      	ldr	r1, [pc, #16]	; (800c1e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c1ce:	5ccb      	ldrb	r3, [r1, r3]
 800c1d0:	f003 031f 	and.w	r3, r3, #31
 800c1d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	40021000 	.word	0x40021000
 800c1e0:	0801acb4 	.word	0x0801acb4

0800c1e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c1e8:	f7ff ffda 	bl	800c1a0 <HAL_RCC_GetHCLKFreq>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	4b06      	ldr	r3, [pc, #24]	; (800c208 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	0adb      	lsrs	r3, r3, #11
 800c1f4:	f003 0307 	and.w	r3, r3, #7
 800c1f8:	4904      	ldr	r1, [pc, #16]	; (800c20c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c1fa:	5ccb      	ldrb	r3, [r1, r3]
 800c1fc:	f003 031f 	and.w	r3, r3, #31
 800c200:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c204:	4618      	mov	r0, r3
 800c206:	bd80      	pop	{r7, pc}
 800c208:	40021000 	.word	0x40021000
 800c20c:	0801acb4 	.word	0x0801acb4

0800c210 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c210:	b480      	push	{r7}
 800c212:	b087      	sub	sp, #28
 800c214:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c216:	4b1e      	ldr	r3, [pc, #120]	; (800c290 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f003 0303 	and.w	r3, r3, #3
 800c21e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c220:	4b1b      	ldr	r3, [pc, #108]	; (800c290 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	091b      	lsrs	r3, r3, #4
 800c226:	f003 030f 	and.w	r3, r3, #15
 800c22a:	3301      	adds	r3, #1
 800c22c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	2b03      	cmp	r3, #3
 800c232:	d10c      	bne.n	800c24e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c234:	4a17      	ldr	r2, [pc, #92]	; (800c294 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	fbb2 f3f3 	udiv	r3, r2, r3
 800c23c:	4a14      	ldr	r2, [pc, #80]	; (800c290 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c23e:	68d2      	ldr	r2, [r2, #12]
 800c240:	0a12      	lsrs	r2, r2, #8
 800c242:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c246:	fb02 f303 	mul.w	r3, r2, r3
 800c24a:	617b      	str	r3, [r7, #20]
    break;
 800c24c:	e00c      	b.n	800c268 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c24e:	4a12      	ldr	r2, [pc, #72]	; (800c298 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	fbb2 f3f3 	udiv	r3, r2, r3
 800c256:	4a0e      	ldr	r2, [pc, #56]	; (800c290 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c258:	68d2      	ldr	r2, [r2, #12]
 800c25a:	0a12      	lsrs	r2, r2, #8
 800c25c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c260:	fb02 f303 	mul.w	r3, r2, r3
 800c264:	617b      	str	r3, [r7, #20]
    break;
 800c266:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c268:	4b09      	ldr	r3, [pc, #36]	; (800c290 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	0e5b      	lsrs	r3, r3, #25
 800c26e:	f003 0303 	and.w	r3, r3, #3
 800c272:	3301      	adds	r3, #1
 800c274:	005b      	lsls	r3, r3, #1
 800c276:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c280:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c282:	687b      	ldr	r3, [r7, #4]
}
 800c284:	4618      	mov	r0, r3
 800c286:	371c      	adds	r7, #28
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	40021000 	.word	0x40021000
 800c294:	007a1200 	.word	0x007a1200
 800c298:	00f42400 	.word	0x00f42400

0800c29c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f000 8098 	beq.w	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c2be:	4b43      	ldr	r3, [pc, #268]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d10d      	bne.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2ca:	4b40      	ldr	r3, [pc, #256]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ce:	4a3f      	ldr	r2, [pc, #252]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2d4:	6593      	str	r3, [r2, #88]	; 0x58
 800c2d6:	4b3d      	ldr	r3, [pc, #244]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2de:	60bb      	str	r3, [r7, #8]
 800c2e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2e6:	4b3a      	ldr	r3, [pc, #232]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a39      	ldr	r2, [pc, #228]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c2ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c2f2:	f7f9 fe01 	bl	8005ef8 <HAL_GetTick>
 800c2f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2f8:	e009      	b.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2fa:	f7f9 fdfd 	bl	8005ef8 <HAL_GetTick>
 800c2fe:	4602      	mov	r2, r0
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	2b02      	cmp	r3, #2
 800c306:	d902      	bls.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c308:	2303      	movs	r3, #3
 800c30a:	74fb      	strb	r3, [r7, #19]
        break;
 800c30c:	e005      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c30e:	4b30      	ldr	r3, [pc, #192]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c316:	2b00      	cmp	r3, #0
 800c318:	d0ef      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c31a:	7cfb      	ldrb	r3, [r7, #19]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d159      	bne.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c320:	4b2a      	ldr	r3, [pc, #168]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c32a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d01e      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d019      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c33c:	4b23      	ldr	r3, [pc, #140]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c346:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c348:	4b20      	ldr	r3, [pc, #128]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c34e:	4a1f      	ldr	r2, [pc, #124]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c358:	4b1c      	ldr	r3, [pc, #112]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c35e:	4a1b      	ldr	r2, [pc, #108]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c368:	4a18      	ldr	r2, [pc, #96]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	2b00      	cmp	r3, #0
 800c378:	d016      	beq.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c37a:	f7f9 fdbd 	bl	8005ef8 <HAL_GetTick>
 800c37e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c380:	e00b      	b.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c382:	f7f9 fdb9 	bl	8005ef8 <HAL_GetTick>
 800c386:	4602      	mov	r2, r0
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c390:	4293      	cmp	r3, r2
 800c392:	d902      	bls.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	74fb      	strb	r3, [r7, #19]
            break;
 800c398:	e006      	b.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c39a:	4b0c      	ldr	r3, [pc, #48]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3a0:	f003 0302 	and.w	r3, r3, #2
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d0ec      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c3a8:	7cfb      	ldrb	r3, [r7, #19]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10b      	bne.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c3ae:	4b07      	ldr	r3, [pc, #28]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3bc:	4903      	ldr	r1, [pc, #12]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c3c4:	e008      	b.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c3c6:	7cfb      	ldrb	r3, [r7, #19]
 800c3c8:	74bb      	strb	r3, [r7, #18]
 800c3ca:	e005      	b.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c3cc:	40021000 	.word	0x40021000
 800c3d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3d4:	7cfb      	ldrb	r3, [r7, #19]
 800c3d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c3d8:	7c7b      	ldrb	r3, [r7, #17]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d105      	bne.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3de:	4ba6      	ldr	r3, [pc, #664]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e2:	4aa5      	ldr	r2, [pc, #660]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00a      	beq.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c3f6:	4ba0      	ldr	r3, [pc, #640]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3fc:	f023 0203 	bic.w	r2, r3, #3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	499c      	ldr	r1, [pc, #624]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c406:	4313      	orrs	r3, r2
 800c408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0302 	and.w	r3, r3, #2
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00a      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c418:	4b97      	ldr	r3, [pc, #604]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c41a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c41e:	f023 020c 	bic.w	r2, r3, #12
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	4994      	ldr	r1, [pc, #592]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c428:	4313      	orrs	r3, r2
 800c42a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f003 0304 	and.w	r3, r3, #4
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c43a:	4b8f      	ldr	r3, [pc, #572]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c43c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c440:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	498b      	ldr	r1, [pc, #556]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c44a:	4313      	orrs	r3, r2
 800c44c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 0308 	and.w	r3, r3, #8
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00a      	beq.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c45c:	4b86      	ldr	r3, [pc, #536]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c462:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	4983      	ldr	r1, [pc, #524]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c46c:	4313      	orrs	r3, r2
 800c46e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f003 0320 	and.w	r3, r3, #32
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00a      	beq.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c47e:	4b7e      	ldr	r3, [pc, #504]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c484:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	695b      	ldr	r3, [r3, #20]
 800c48c:	497a      	ldr	r1, [pc, #488]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c48e:	4313      	orrs	r3, r2
 800c490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00a      	beq.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c4a0:	4b75      	ldr	r3, [pc, #468]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	4972      	ldr	r1, [pc, #456]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00a      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c4c2:	4b6d      	ldr	r3, [pc, #436]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	69db      	ldr	r3, [r3, #28]
 800c4d0:	4969      	ldr	r1, [pc, #420]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00a      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c4e4:	4b64      	ldr	r3, [pc, #400]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	4961      	ldr	r1, [pc, #388]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00a      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c506:	4b5c      	ldr	r3, [pc, #368]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c50c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c514:	4958      	ldr	r1, [pc, #352]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c516:	4313      	orrs	r3, r2
 800c518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c524:	2b00      	cmp	r3, #0
 800c526:	d015      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c528:	4b53      	ldr	r3, [pc, #332]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c52e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c536:	4950      	ldr	r1, [pc, #320]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c538:	4313      	orrs	r3, r2
 800c53a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c546:	d105      	bne.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c548:	4b4b      	ldr	r3, [pc, #300]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	4a4a      	ldr	r2, [pc, #296]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c54e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c552:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d015      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c560:	4b45      	ldr	r3, [pc, #276]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c566:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56e:	4942      	ldr	r1, [pc, #264]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c570:	4313      	orrs	r3, r2
 800c572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c57e:	d105      	bne.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c580:	4b3d      	ldr	r3, [pc, #244]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	4a3c      	ldr	r2, [pc, #240]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c58a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d015      	beq.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c598:	4b37      	ldr	r3, [pc, #220]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c59e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a6:	4934      	ldr	r1, [pc, #208]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5b6:	d105      	bne.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c5b8:	4b2f      	ldr	r3, [pc, #188]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	4a2e      	ldr	r2, [pc, #184]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d015      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5d0:	4b29      	ldr	r3, [pc, #164]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5de:	4926      	ldr	r1, [pc, #152]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5ee:	d105      	bne.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c5f0:	4b21      	ldr	r3, [pc, #132]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	4a20      	ldr	r2, [pc, #128]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d015      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c608:	4b1b      	ldr	r3, [pc, #108]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c60e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c616:	4918      	ldr	r1, [pc, #96]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c618:	4313      	orrs	r3, r2
 800c61a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c626:	d105      	bne.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c628:	4b13      	ldr	r3, [pc, #76]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	4a12      	ldr	r2, [pc, #72]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c62e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c632:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d015      	beq.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c640:	4b0d      	ldr	r3, [pc, #52]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c646:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c64e:	490a      	ldr	r1, [pc, #40]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c650:	4313      	orrs	r3, r2
 800c652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c65a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c65e:	d105      	bne.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c660:	4b05      	ldr	r3, [pc, #20]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	4a04      	ldr	r2, [pc, #16]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c66a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c66c:	7cbb      	ldrb	r3, [r7, #18]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3718      	adds	r7, #24
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	40021000 	.word	0x40021000

0800c67c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d101      	bne.n	800c68e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e09d      	b.n	800c7ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c692:	2b00      	cmp	r3, #0
 800c694:	d108      	bne.n	800c6a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c69e:	d009      	beq.n	800c6b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	61da      	str	r2, [r3, #28]
 800c6a6:	e005      	b.n	800c6b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7f8 fba0 	bl	8004e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2202      	movs	r2, #2
 800c6d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c6f4:	d902      	bls.n	800c6fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	60fb      	str	r3, [r7, #12]
 800c6fa:	e002      	b.n	800c702 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c6fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c700:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c70a:	d007      	beq.n	800c71c <HAL_SPI_Init+0xa0>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c714:	d002      	beq.n	800c71c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c72c:	431a      	orrs	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	f003 0302 	and.w	r3, r3, #2
 800c736:	431a      	orrs	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	431a      	orrs	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c74a:	431a      	orrs	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	69db      	ldr	r3, [r3, #28]
 800c750:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c754:	431a      	orrs	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c75e:	ea42 0103 	orr.w	r1, r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c766:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	430a      	orrs	r2, r1
 800c770:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	699b      	ldr	r3, [r3, #24]
 800c776:	0c1b      	lsrs	r3, r3, #16
 800c778:	f003 0204 	and.w	r2, r3, #4
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c780:	f003 0310 	and.w	r3, r3, #16
 800c784:	431a      	orrs	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c78a:	f003 0308 	and.w	r3, r3, #8
 800c78e:	431a      	orrs	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c798:	ea42 0103 	orr.w	r1, r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	430a      	orrs	r2, r1
 800c7a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	69da      	ldr	r2, [r3, #28]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b088      	sub	sp, #32
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	60f8      	str	r0, [r7, #12]
 800c7da:	60b9      	str	r1, [r7, #8]
 800c7dc:	603b      	str	r3, [r7, #0]
 800c7de:	4613      	mov	r3, r2
 800c7e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d101      	bne.n	800c7f4 <HAL_SPI_Transmit+0x22>
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	e15f      	b.n	800cab4 <HAL_SPI_Transmit+0x2e2>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7fc:	f7f9 fb7c 	bl	8005ef8 <HAL_GetTick>
 800c800:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c802:	88fb      	ldrh	r3, [r7, #6]
 800c804:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d002      	beq.n	800c818 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c812:	2302      	movs	r3, #2
 800c814:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c816:	e148      	b.n	800caaa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <HAL_SPI_Transmit+0x52>
 800c81e:	88fb      	ldrh	r3, [r7, #6]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d102      	bne.n	800c82a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c828:	e13f      	b.n	800caaa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2203      	movs	r2, #3
 800c82e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	88fa      	ldrh	r2, [r7, #6]
 800c842:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	88fa      	ldrh	r2, [r7, #6]
 800c848:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2200      	movs	r2, #0
 800c864:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2200      	movs	r2, #0
 800c86a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c874:	d10f      	bne.n	800c896 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c894:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a0:	2b40      	cmp	r3, #64	; 0x40
 800c8a2:	d007      	beq.n	800c8b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8bc:	d94f      	bls.n	800c95e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <HAL_SPI_Transmit+0xfa>
 800c8c6:	8afb      	ldrh	r3, [r7, #22]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d142      	bne.n	800c952 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d0:	881a      	ldrh	r2, [r3, #0]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8dc:	1c9a      	adds	r2, r3, #2
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c8f0:	e02f      	b.n	800c952 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	d112      	bne.n	800c926 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c904:	881a      	ldrh	r2, [r3, #0]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c910:	1c9a      	adds	r2, r3, #2
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	3b01      	subs	r3, #1
 800c91e:	b29a      	uxth	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c924:	e015      	b.n	800c952 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c926:	f7f9 fae7 	bl	8005ef8 <HAL_GetTick>
 800c92a:	4602      	mov	r2, r0
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	429a      	cmp	r2, r3
 800c934:	d803      	bhi.n	800c93e <HAL_SPI_Transmit+0x16c>
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c93c:	d102      	bne.n	800c944 <HAL_SPI_Transmit+0x172>
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d106      	bne.n	800c952 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c944:	2303      	movs	r3, #3
 800c946:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c950:	e0ab      	b.n	800caaa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c956:	b29b      	uxth	r3, r3
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1ca      	bne.n	800c8f2 <HAL_SPI_Transmit+0x120>
 800c95c:	e080      	b.n	800ca60 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d002      	beq.n	800c96c <HAL_SPI_Transmit+0x19a>
 800c966:	8afb      	ldrh	r3, [r7, #22]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d174      	bne.n	800ca56 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c970:	b29b      	uxth	r3, r3
 800c972:	2b01      	cmp	r3, #1
 800c974:	d912      	bls.n	800c99c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97a:	881a      	ldrh	r2, [r3, #0]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c986:	1c9a      	adds	r2, r3, #2
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c990:	b29b      	uxth	r3, r3
 800c992:	3b02      	subs	r3, #2
 800c994:	b29a      	uxth	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c99a:	e05c      	b.n	800ca56 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	330c      	adds	r3, #12
 800c9a6:	7812      	ldrb	r2, [r2, #0]
 800c9a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ae:	1c5a      	adds	r2, r3, #1
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c9c2:	e048      	b.n	800ca56 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f003 0302 	and.w	r3, r3, #2
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d12b      	bne.n	800ca2a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d912      	bls.n	800ca02 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e0:	881a      	ldrh	r2, [r3, #0]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ec:	1c9a      	adds	r2, r3, #2
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	3b02      	subs	r3, #2
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ca00:	e029      	b.n	800ca56 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	330c      	adds	r3, #12
 800ca0c:	7812      	ldrb	r2, [r2, #0]
 800ca0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca14:	1c5a      	adds	r2, r3, #1
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	3b01      	subs	r3, #1
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ca28:	e015      	b.n	800ca56 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca2a:	f7f9 fa65 	bl	8005ef8 <HAL_GetTick>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d803      	bhi.n	800ca42 <HAL_SPI_Transmit+0x270>
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca40:	d102      	bne.n	800ca48 <HAL_SPI_Transmit+0x276>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d106      	bne.n	800ca56 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ca54:	e029      	b.n	800caaa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1b1      	bne.n	800c9c4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca60:	69ba      	ldr	r2, [r7, #24]
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f000 fad7 	bl	800d018 <SPI_EndRxTxTransaction>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d002      	beq.n	800ca76 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2220      	movs	r2, #32
 800ca74:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10a      	bne.n	800ca94 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca7e:	2300      	movs	r3, #0
 800ca80:	613b      	str	r3, [r7, #16]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	613b      	str	r3, [r7, #16]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	613b      	str	r3, [r7, #16]
 800ca92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	77fb      	strb	r3, [r7, #31]
 800caa0:	e003      	b.n	800caaa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2201      	movs	r2, #1
 800caa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cab2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3720      	adds	r7, #32
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	4613      	mov	r3, r2
 800cac8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800caca:	2300      	movs	r3, #0
 800cacc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d101      	bne.n	800cadc <HAL_SPI_Transmit_DMA+0x20>
 800cad8:	2302      	movs	r3, #2
 800cada:	e0d4      	b.n	800cc86 <HAL_SPI_Transmit_DMA+0x1ca>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b01      	cmp	r3, #1
 800caee:	d002      	beq.n	800caf6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800caf0:	2302      	movs	r3, #2
 800caf2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800caf4:	e0c2      	b.n	800cc7c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d002      	beq.n	800cb02 <HAL_SPI_Transmit_DMA+0x46>
 800cafc:	88fb      	ldrh	r3, [r7, #6]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d102      	bne.n	800cb08 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cb06:	e0b9      	b.n	800cc7c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2203      	movs	r2, #3
 800cb0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2200      	movs	r2, #0
 800cb14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	88fa      	ldrh	r2, [r7, #6]
 800cb20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	88fa      	ldrh	r2, [r7, #6]
 800cb26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2200      	movs	r2, #0
 800cb32:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb52:	d10f      	bne.n	800cb74 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb78:	4a45      	ldr	r2, [pc, #276]	; (800cc90 <HAL_SPI_Transmit_DMA+0x1d4>)
 800cb7a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb80:	4a44      	ldr	r2, [pc, #272]	; (800cc94 <HAL_SPI_Transmit_DMA+0x1d8>)
 800cb82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb88:	4a43      	ldr	r2, [pc, #268]	; (800cc98 <HAL_SPI_Transmit_DMA+0x1dc>)
 800cb8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb90:	2200      	movs	r2, #0
 800cb92:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	685a      	ldr	r2, [r3, #4]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cba2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cbac:	d82d      	bhi.n	800cc0a <HAL_SPI_Transmit_DMA+0x14e>
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbb8:	d127      	bne.n	800cc0a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	f003 0301 	and.w	r3, r3, #1
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10f      	bne.n	800cbe8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	685a      	ldr	r2, [r3, #4]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cbd6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	085b      	lsrs	r3, r3, #1
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cbe6:	e010      	b.n	800cc0a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbf6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	085b      	lsrs	r3, r3, #1
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	3301      	adds	r3, #1
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc12:	4619      	mov	r1, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	330c      	adds	r3, #12
 800cc1a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc20:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc22:	f7fc f87b 	bl	8008d1c <HAL_DMA_Start_IT>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d008      	beq.n	800cc3e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc30:	f043 0210 	orr.w	r2, r3, #16
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cc3c:	e01e      	b.n	800cc7c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc48:	2b40      	cmp	r3, #64	; 0x40
 800cc4a:	d007      	beq.n	800cc5c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc5a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f042 0220 	orr.w	r2, r2, #32
 800cc6a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	685a      	ldr	r2, [r3, #4]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f042 0202 	orr.w	r2, r2, #2
 800cc7a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cc84:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3718      	adds	r7, #24
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	0800cd7f 	.word	0x0800cd7f
 800cc94:	0800ccd9 	.word	0x0800ccd9
 800cc98:	0800cd9b 	.word	0x0800cd9b

0800cc9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cce6:	f7f9 f907 	bl	8005ef8 <HAL_GetTick>
 800ccea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 0320 	and.w	r3, r3, #32
 800ccf6:	2b20      	cmp	r3, #32
 800ccf8:	d03b      	beq.n	800cd72 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f022 0220 	bic.w	r2, r2, #32
 800cd08:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	685a      	ldr	r2, [r3, #4]
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f022 0202 	bic.w	r2, r2, #2
 800cd18:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	2164      	movs	r1, #100	; 0x64
 800cd1e:	6978      	ldr	r0, [r7, #20]
 800cd20:	f000 f97a 	bl	800d018 <SPI_EndRxTxTransaction>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d005      	beq.n	800cd36 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd2e:	f043 0220 	orr.w	r2, r3, #32
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10a      	bne.n	800cd54 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd3e:	2300      	movs	r3, #0
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	60fb      	str	r3, [r7, #12]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	60fb      	str	r3, [r7, #12]
 800cd52:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2200      	movs	r2, #0
 800cd58:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d003      	beq.n	800cd72 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cd6a:	6978      	ldr	r0, [r7, #20]
 800cd6c:	f7ff ffaa 	bl	800ccc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cd70:	e002      	b.n	800cd78 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cd72:	6978      	ldr	r0, [r7, #20]
 800cd74:	f7ff ff92 	bl	800cc9c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd78:	3718      	adds	r7, #24
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd8a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f7ff ff8f 	bl	800ccb0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd92:	bf00      	nop
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	685a      	ldr	r2, [r3, #4]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f022 0203 	bic.w	r2, r2, #3
 800cdb6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdbc:	f043 0210 	orr.w	r2, r3, #16
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f7ff ff79 	bl	800ccc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cdd2:	bf00      	nop
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
	...

0800cddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b088      	sub	sp, #32
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	603b      	str	r3, [r7, #0]
 800cde8:	4613      	mov	r3, r2
 800cdea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cdec:	f7f9 f884 	bl	8005ef8 <HAL_GetTick>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf4:	1a9b      	subs	r3, r3, r2
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cdfc:	f7f9 f87c 	bl	8005ef8 <HAL_GetTick>
 800ce00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ce02:	4b39      	ldr	r3, [pc, #228]	; (800cee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	015b      	lsls	r3, r3, #5
 800ce08:	0d1b      	lsrs	r3, r3, #20
 800ce0a:	69fa      	ldr	r2, [r7, #28]
 800ce0c:	fb02 f303 	mul.w	r3, r2, r3
 800ce10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ce12:	e054      	b.n	800cebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce1a:	d050      	beq.n	800cebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ce1c:	f7f9 f86c 	bl	8005ef8 <HAL_GetTick>
 800ce20:	4602      	mov	r2, r0
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	69fa      	ldr	r2, [r7, #28]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d902      	bls.n	800ce32 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d13d      	bne.n	800ceae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	685a      	ldr	r2, [r3, #4]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ce40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce4a:	d111      	bne.n	800ce70 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce54:	d004      	beq.n	800ce60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce5e:	d107      	bne.n	800ce70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce78:	d10f      	bne.n	800ce9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ce98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ceaa:	2303      	movs	r3, #3
 800ceac:	e017      	b.n	800cede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	3b01      	subs	r3, #1
 800cebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	689a      	ldr	r2, [r3, #8]
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	4013      	ands	r3, r2
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	bf0c      	ite	eq
 800cece:	2301      	moveq	r3, #1
 800ced0:	2300      	movne	r3, #0
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	461a      	mov	r2, r3
 800ced6:	79fb      	ldrb	r3, [r7, #7]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d19b      	bne.n	800ce14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3720      	adds	r7, #32
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	200001c4 	.word	0x200001c4

0800ceec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08a      	sub	sp, #40	; 0x28
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cefe:	f7f8 fffb 	bl	8005ef8 <HAL_GetTick>
 800cf02:	4602      	mov	r2, r0
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	1a9b      	subs	r3, r3, r2
 800cf08:	683a      	ldr	r2, [r7, #0]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800cf0e:	f7f8 fff3 	bl	8005ef8 <HAL_GetTick>
 800cf12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	330c      	adds	r3, #12
 800cf1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cf1c:	4b3d      	ldr	r3, [pc, #244]	; (800d014 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	4613      	mov	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4413      	add	r3, r2
 800cf26:	00da      	lsls	r2, r3, #3
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	0d1b      	lsrs	r3, r3, #20
 800cf2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf2e:	fb02 f303 	mul.w	r3, r2, r3
 800cf32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cf34:	e060      	b.n	800cff8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cf3c:	d107      	bne.n	800cf4e <SPI_WaitFifoStateUntilTimeout+0x62>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d104      	bne.n	800cf4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf54:	d050      	beq.n	800cff8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cf56:	f7f8 ffcf 	bl	8005ef8 <HAL_GetTick>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d902      	bls.n	800cf6c <SPI_WaitFifoStateUntilTimeout+0x80>
 800cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d13d      	bne.n	800cfe8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	685a      	ldr	r2, [r3, #4]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cf7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf84:	d111      	bne.n	800cfaa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf8e:	d004      	beq.n	800cf9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf98:	d107      	bne.n	800cfaa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cfa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfb2:	d10f      	bne.n	800cfd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cfd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cfe4:	2303      	movs	r3, #3
 800cfe6:	e010      	b.n	800d00a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cfee:	2300      	movs	r3, #0
 800cff0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	3b01      	subs	r3, #1
 800cff6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	689a      	ldr	r2, [r3, #8]
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	4013      	ands	r3, r2
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	429a      	cmp	r2, r3
 800d006:	d196      	bne.n	800cf36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3728      	adds	r7, #40	; 0x28
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	200001c4 	.word	0x200001c4

0800d018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b086      	sub	sp, #24
 800d01c:	af02      	add	r7, sp, #8
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f7ff ff5b 	bl	800ceec <SPI_WaitFifoStateUntilTimeout>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d007      	beq.n	800d04c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d040:	f043 0220 	orr.w	r2, r3, #32
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d048:	2303      	movs	r3, #3
 800d04a:	e027      	b.n	800d09c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2200      	movs	r2, #0
 800d054:	2180      	movs	r1, #128	; 0x80
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7ff fec0 	bl	800cddc <SPI_WaitFlagStateUntilTimeout>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d007      	beq.n	800d072 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d066:	f043 0220 	orr.w	r2, r3, #32
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d06e:	2303      	movs	r3, #3
 800d070:	e014      	b.n	800d09c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2200      	movs	r2, #0
 800d07a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f7ff ff34 	bl	800ceec <SPI_WaitFifoStateUntilTimeout>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d007      	beq.n	800d09a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d08e:	f043 0220 	orr.w	r2, r3, #32
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d096:	2303      	movs	r3, #3
 800d098:	e000      	b.n	800d09c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e049      	b.n	800d14a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d106      	bne.n	800d0d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7f7 ffc4 	bl	8005058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	f000 ff72 	bl	800dfcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
	...

0800d154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b01      	cmp	r3, #1
 800d166:	d001      	beq.n	800d16c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	e04a      	b.n	800d202 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68da      	ldr	r2, [r3, #12]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f042 0201 	orr.w	r2, r2, #1
 800d182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a21      	ldr	r2, [pc, #132]	; (800d210 <HAL_TIM_Base_Start_IT+0xbc>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d018      	beq.n	800d1c0 <HAL_TIM_Base_Start_IT+0x6c>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d196:	d013      	beq.n	800d1c0 <HAL_TIM_Base_Start_IT+0x6c>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a1d      	ldr	r2, [pc, #116]	; (800d214 <HAL_TIM_Base_Start_IT+0xc0>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d00e      	beq.n	800d1c0 <HAL_TIM_Base_Start_IT+0x6c>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a1c      	ldr	r2, [pc, #112]	; (800d218 <HAL_TIM_Base_Start_IT+0xc4>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d009      	beq.n	800d1c0 <HAL_TIM_Base_Start_IT+0x6c>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a1a      	ldr	r2, [pc, #104]	; (800d21c <HAL_TIM_Base_Start_IT+0xc8>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d004      	beq.n	800d1c0 <HAL_TIM_Base_Start_IT+0x6c>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a19      	ldr	r2, [pc, #100]	; (800d220 <HAL_TIM_Base_Start_IT+0xcc>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d115      	bne.n	800d1ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	689a      	ldr	r2, [r3, #8]
 800d1c6:	4b17      	ldr	r3, [pc, #92]	; (800d224 <HAL_TIM_Base_Start_IT+0xd0>)
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2b06      	cmp	r3, #6
 800d1d0:	d015      	beq.n	800d1fe <HAL_TIM_Base_Start_IT+0xaa>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1d8:	d011      	beq.n	800d1fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f042 0201 	orr.w	r2, r2, #1
 800d1e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1ea:	e008      	b.n	800d1fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f042 0201 	orr.w	r2, r2, #1
 800d1fa:	601a      	str	r2, [r3, #0]
 800d1fc:	e000      	b.n	800d200 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3714      	adds	r7, #20
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	40012c00 	.word	0x40012c00
 800d214:	40000400 	.word	0x40000400
 800d218:	40000800 	.word	0x40000800
 800d21c:	40013400 	.word	0x40013400
 800d220:	40014000 	.word	0x40014000
 800d224:	00010007 	.word	0x00010007

0800d228 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	68da      	ldr	r2, [r3, #12]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f022 0201 	bic.w	r2, r2, #1
 800d23e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6a1a      	ldr	r2, [r3, #32]
 800d246:	f241 1311 	movw	r3, #4369	; 0x1111
 800d24a:	4013      	ands	r3, r2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10f      	bne.n	800d270 <HAL_TIM_Base_Stop_IT+0x48>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6a1a      	ldr	r2, [r3, #32]
 800d256:	f244 4344 	movw	r3, #17476	; 0x4444
 800d25a:	4013      	ands	r3, r2
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d107      	bne.n	800d270 <HAL_TIM_Base_Stop_IT+0x48>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f022 0201 	bic.w	r2, r2, #1
 800d26e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2201      	movs	r2, #1
 800d274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b082      	sub	sp, #8
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	e049      	b.n	800d32c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d106      	bne.n	800d2b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7f7 fe23 	bl	8004ef8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	f000 fe81 	bl	800dfcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2201      	movs	r2, #1
 800d306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2201      	movs	r2, #1
 800d30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2201      	movs	r2, #1
 800d316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2201      	movs	r2, #1
 800d31e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2201      	movs	r2, #1
 800d326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d33e:	2300      	movs	r3, #0
 800d340:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d109      	bne.n	800d35c <HAL_TIM_PWM_Start_IT+0x28>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2b01      	cmp	r3, #1
 800d352:	bf14      	ite	ne
 800d354:	2301      	movne	r3, #1
 800d356:	2300      	moveq	r3, #0
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	e03c      	b.n	800d3d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	2b04      	cmp	r3, #4
 800d360:	d109      	bne.n	800d376 <HAL_TIM_PWM_Start_IT+0x42>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	bf14      	ite	ne
 800d36e:	2301      	movne	r3, #1
 800d370:	2300      	moveq	r3, #0
 800d372:	b2db      	uxtb	r3, r3
 800d374:	e02f      	b.n	800d3d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	2b08      	cmp	r3, #8
 800d37a:	d109      	bne.n	800d390 <HAL_TIM_PWM_Start_IT+0x5c>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d382:	b2db      	uxtb	r3, r3
 800d384:	2b01      	cmp	r3, #1
 800d386:	bf14      	ite	ne
 800d388:	2301      	movne	r3, #1
 800d38a:	2300      	moveq	r3, #0
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	e022      	b.n	800d3d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	2b0c      	cmp	r3, #12
 800d394:	d109      	bne.n	800d3aa <HAL_TIM_PWM_Start_IT+0x76>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	bf14      	ite	ne
 800d3a2:	2301      	movne	r3, #1
 800d3a4:	2300      	moveq	r3, #0
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	e015      	b.n	800d3d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2b10      	cmp	r3, #16
 800d3ae:	d109      	bne.n	800d3c4 <HAL_TIM_PWM_Start_IT+0x90>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	bf14      	ite	ne
 800d3bc:	2301      	movne	r3, #1
 800d3be:	2300      	moveq	r3, #0
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	e008      	b.n	800d3d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	bf14      	ite	ne
 800d3d0:	2301      	movne	r3, #1
 800d3d2:	2300      	moveq	r3, #0
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d001      	beq.n	800d3de <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e0e2      	b.n	800d5a4 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d104      	bne.n	800d3ee <HAL_TIM_PWM_Start_IT+0xba>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2202      	movs	r2, #2
 800d3e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3ec:	e023      	b.n	800d436 <HAL_TIM_PWM_Start_IT+0x102>
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b04      	cmp	r3, #4
 800d3f2:	d104      	bne.n	800d3fe <HAL_TIM_PWM_Start_IT+0xca>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3fc:	e01b      	b.n	800d436 <HAL_TIM_PWM_Start_IT+0x102>
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	2b08      	cmp	r3, #8
 800d402:	d104      	bne.n	800d40e <HAL_TIM_PWM_Start_IT+0xda>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2202      	movs	r2, #2
 800d408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d40c:	e013      	b.n	800d436 <HAL_TIM_PWM_Start_IT+0x102>
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2b0c      	cmp	r3, #12
 800d412:	d104      	bne.n	800d41e <HAL_TIM_PWM_Start_IT+0xea>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2202      	movs	r2, #2
 800d418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d41c:	e00b      	b.n	800d436 <HAL_TIM_PWM_Start_IT+0x102>
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	2b10      	cmp	r3, #16
 800d422:	d104      	bne.n	800d42e <HAL_TIM_PWM_Start_IT+0xfa>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2202      	movs	r2, #2
 800d428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d42c:	e003      	b.n	800d436 <HAL_TIM_PWM_Start_IT+0x102>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2202      	movs	r2, #2
 800d432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b0c      	cmp	r3, #12
 800d43a:	d841      	bhi.n	800d4c0 <HAL_TIM_PWM_Start_IT+0x18c>
 800d43c:	a201      	add	r2, pc, #4	; (adr r2, 800d444 <HAL_TIM_PWM_Start_IT+0x110>)
 800d43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d442:	bf00      	nop
 800d444:	0800d479 	.word	0x0800d479
 800d448:	0800d4c1 	.word	0x0800d4c1
 800d44c:	0800d4c1 	.word	0x0800d4c1
 800d450:	0800d4c1 	.word	0x0800d4c1
 800d454:	0800d48b 	.word	0x0800d48b
 800d458:	0800d4c1 	.word	0x0800d4c1
 800d45c:	0800d4c1 	.word	0x0800d4c1
 800d460:	0800d4c1 	.word	0x0800d4c1
 800d464:	0800d49d 	.word	0x0800d49d
 800d468:	0800d4c1 	.word	0x0800d4c1
 800d46c:	0800d4c1 	.word	0x0800d4c1
 800d470:	0800d4c1 	.word	0x0800d4c1
 800d474:	0800d4af 	.word	0x0800d4af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	68da      	ldr	r2, [r3, #12]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f042 0202 	orr.w	r2, r2, #2
 800d486:	60da      	str	r2, [r3, #12]
      break;
 800d488:	e01d      	b.n	800d4c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	68da      	ldr	r2, [r3, #12]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f042 0204 	orr.w	r2, r2, #4
 800d498:	60da      	str	r2, [r3, #12]
      break;
 800d49a:	e014      	b.n	800d4c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	68da      	ldr	r2, [r3, #12]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f042 0208 	orr.w	r2, r2, #8
 800d4aa:	60da      	str	r2, [r3, #12]
      break;
 800d4ac:	e00b      	b.n	800d4c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68da      	ldr	r2, [r3, #12]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f042 0210 	orr.w	r2, r2, #16
 800d4bc:	60da      	str	r2, [r3, #12]
      break;
 800d4be:	e002      	b.n	800d4c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d4c4:	bf00      	nop
  }

  if (status == HAL_OK)
 800d4c6:	7bfb      	ldrb	r3, [r7, #15]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d16a      	bne.n	800d5a2 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f001 f90b 	bl	800e6f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a33      	ldr	r2, [pc, #204]	; (800d5ac <HAL_TIM_PWM_Start_IT+0x278>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d013      	beq.n	800d50c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a31      	ldr	r2, [pc, #196]	; (800d5b0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d00e      	beq.n	800d50c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a30      	ldr	r2, [pc, #192]	; (800d5b4 <HAL_TIM_PWM_Start_IT+0x280>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d009      	beq.n	800d50c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a2e      	ldr	r2, [pc, #184]	; (800d5b8 <HAL_TIM_PWM_Start_IT+0x284>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d004      	beq.n	800d50c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a2d      	ldr	r2, [pc, #180]	; (800d5bc <HAL_TIM_PWM_Start_IT+0x288>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d101      	bne.n	800d510 <HAL_TIM_PWM_Start_IT+0x1dc>
 800d50c:	2301      	movs	r3, #1
 800d50e:	e000      	b.n	800d512 <HAL_TIM_PWM_Start_IT+0x1de>
 800d510:	2300      	movs	r3, #0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d007      	beq.n	800d526 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d524:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a20      	ldr	r2, [pc, #128]	; (800d5ac <HAL_TIM_PWM_Start_IT+0x278>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d018      	beq.n	800d562 <HAL_TIM_PWM_Start_IT+0x22e>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d538:	d013      	beq.n	800d562 <HAL_TIM_PWM_Start_IT+0x22e>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a20      	ldr	r2, [pc, #128]	; (800d5c0 <HAL_TIM_PWM_Start_IT+0x28c>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d00e      	beq.n	800d562 <HAL_TIM_PWM_Start_IT+0x22e>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a1e      	ldr	r2, [pc, #120]	; (800d5c4 <HAL_TIM_PWM_Start_IT+0x290>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d009      	beq.n	800d562 <HAL_TIM_PWM_Start_IT+0x22e>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a17      	ldr	r2, [pc, #92]	; (800d5b0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d004      	beq.n	800d562 <HAL_TIM_PWM_Start_IT+0x22e>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a15      	ldr	r2, [pc, #84]	; (800d5b4 <HAL_TIM_PWM_Start_IT+0x280>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d115      	bne.n	800d58e <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	689a      	ldr	r2, [r3, #8]
 800d568:	4b17      	ldr	r3, [pc, #92]	; (800d5c8 <HAL_TIM_PWM_Start_IT+0x294>)
 800d56a:	4013      	ands	r3, r2
 800d56c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	2b06      	cmp	r3, #6
 800d572:	d015      	beq.n	800d5a0 <HAL_TIM_PWM_Start_IT+0x26c>
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d57a:	d011      	beq.n	800d5a0 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f042 0201 	orr.w	r2, r2, #1
 800d58a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d58c:	e008      	b.n	800d5a0 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f042 0201 	orr.w	r2, r2, #1
 800d59c:	601a      	str	r2, [r3, #0]
 800d59e:	e000      	b.n	800d5a2 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5a0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	40012c00 	.word	0x40012c00
 800d5b0:	40013400 	.word	0x40013400
 800d5b4:	40014000 	.word	0x40014000
 800d5b8:	40014400 	.word	0x40014400
 800d5bc:	40014800 	.word	0x40014800
 800d5c0:	40000400 	.word	0x40000400
 800d5c4:	40000800 	.word	0x40000800
 800d5c8:	00010007 	.word	0x00010007

0800d5cc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2b0c      	cmp	r3, #12
 800d5de:	d841      	bhi.n	800d664 <HAL_TIM_PWM_Stop_IT+0x98>
 800d5e0:	a201      	add	r2, pc, #4	; (adr r2, 800d5e8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800d5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e6:	bf00      	nop
 800d5e8:	0800d61d 	.word	0x0800d61d
 800d5ec:	0800d665 	.word	0x0800d665
 800d5f0:	0800d665 	.word	0x0800d665
 800d5f4:	0800d665 	.word	0x0800d665
 800d5f8:	0800d62f 	.word	0x0800d62f
 800d5fc:	0800d665 	.word	0x0800d665
 800d600:	0800d665 	.word	0x0800d665
 800d604:	0800d665 	.word	0x0800d665
 800d608:	0800d641 	.word	0x0800d641
 800d60c:	0800d665 	.word	0x0800d665
 800d610:	0800d665 	.word	0x0800d665
 800d614:	0800d665 	.word	0x0800d665
 800d618:	0800d653 	.word	0x0800d653
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68da      	ldr	r2, [r3, #12]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f022 0202 	bic.w	r2, r2, #2
 800d62a:	60da      	str	r2, [r3, #12]
      break;
 800d62c:	e01d      	b.n	800d66a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68da      	ldr	r2, [r3, #12]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f022 0204 	bic.w	r2, r2, #4
 800d63c:	60da      	str	r2, [r3, #12]
      break;
 800d63e:	e014      	b.n	800d66a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f022 0208 	bic.w	r2, r2, #8
 800d64e:	60da      	str	r2, [r3, #12]
      break;
 800d650:	e00b      	b.n	800d66a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	68da      	ldr	r2, [r3, #12]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f022 0210 	bic.w	r2, r2, #16
 800d660:	60da      	str	r2, [r3, #12]
      break;
 800d662:	e002      	b.n	800d66a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	73fb      	strb	r3, [r7, #15]
      break;
 800d668:	bf00      	nop
  }

  if (status == HAL_OK)
 800d66a:	7bfb      	ldrb	r3, [r7, #15]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f040 8081 	bne.w	800d774 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2200      	movs	r2, #0
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f001 f838 	bl	800e6f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4a3e      	ldr	r2, [pc, #248]	; (800d780 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d013      	beq.n	800d6b2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a3d      	ldr	r2, [pc, #244]	; (800d784 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d00e      	beq.n	800d6b2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a3b      	ldr	r2, [pc, #236]	; (800d788 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d009      	beq.n	800d6b2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a3a      	ldr	r2, [pc, #232]	; (800d78c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d004      	beq.n	800d6b2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a38      	ldr	r2, [pc, #224]	; (800d790 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d101      	bne.n	800d6b6 <HAL_TIM_PWM_Stop_IT+0xea>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e000      	b.n	800d6b8 <HAL_TIM_PWM_Stop_IT+0xec>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d017      	beq.n	800d6ec <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6a1a      	ldr	r2, [r3, #32]
 800d6c2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6c6:	4013      	ands	r3, r2
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10f      	bne.n	800d6ec <HAL_TIM_PWM_Stop_IT+0x120>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	6a1a      	ldr	r2, [r3, #32]
 800d6d2:	f244 4344 	movw	r3, #17476	; 0x4444
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d107      	bne.n	800d6ec <HAL_TIM_PWM_Stop_IT+0x120>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d6ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6a1a      	ldr	r2, [r3, #32]
 800d6f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10f      	bne.n	800d71c <HAL_TIM_PWM_Stop_IT+0x150>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6a1a      	ldr	r2, [r3, #32]
 800d702:	f244 4344 	movw	r3, #17476	; 0x4444
 800d706:	4013      	ands	r3, r2
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d107      	bne.n	800d71c <HAL_TIM_PWM_Stop_IT+0x150>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f022 0201 	bic.w	r2, r2, #1
 800d71a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d104      	bne.n	800d72c <HAL_TIM_PWM_Stop_IT+0x160>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d72a:	e023      	b.n	800d774 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d104      	bne.n	800d73c <HAL_TIM_PWM_Stop_IT+0x170>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2201      	movs	r2, #1
 800d736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d73a:	e01b      	b.n	800d774 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b08      	cmp	r3, #8
 800d740:	d104      	bne.n	800d74c <HAL_TIM_PWM_Stop_IT+0x180>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d74a:	e013      	b.n	800d774 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2b0c      	cmp	r3, #12
 800d750:	d104      	bne.n	800d75c <HAL_TIM_PWM_Stop_IT+0x190>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d75a:	e00b      	b.n	800d774 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	2b10      	cmp	r3, #16
 800d760:	d104      	bne.n	800d76c <HAL_TIM_PWM_Stop_IT+0x1a0>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2201      	movs	r2, #1
 800d766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d76a:	e003      	b.n	800d774 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800d774:	7bfb      	ldrb	r3, [r7, #15]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	40012c00 	.word	0x40012c00
 800d784:	40013400 	.word	0x40013400
 800d788:	40014000 	.word	0x40014000
 800d78c:	40014400 	.word	0x40014400
 800d790:	40014800 	.word	0x40014800

0800d794 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d101      	bne.n	800d7a8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	e041      	b.n	800d82c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d106      	bne.n	800d7c2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7f7 fcc5 	bl	800514c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2202      	movs	r2, #2
 800d7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	3304      	adds	r3, #4
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	4610      	mov	r0, r2
 800d7d6:	f000 fbf9 	bl	800dfcc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f022 0208 	bic.w	r2, r2, #8
 800d7e8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6819      	ldr	r1, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	430a      	orrs	r2, r1
 800d7f8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2201      	movs	r2, #1
 800d81e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2201      	movs	r2, #1
 800d826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d101      	bne.n	800d848 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	e097      	b.n	800d978 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b00      	cmp	r3, #0
 800d852:	d106      	bne.n	800d862 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7f7 fb9d 	bl	8004f9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2202      	movs	r2, #2
 800d866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	6812      	ldr	r2, [r2, #0]
 800d874:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d878:	f023 0307 	bic.w	r3, r3, #7
 800d87c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	3304      	adds	r3, #4
 800d886:	4619      	mov	r1, r3
 800d888:	4610      	mov	r0, r2
 800d88a:	f000 fb9f 	bl	800dfcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6a1b      	ldr	r3, [r3, #32]
 800d8a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8b6:	f023 0303 	bic.w	r3, r3, #3
 800d8ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	689a      	ldr	r2, [r3, #8]
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	699b      	ldr	r3, [r3, #24]
 800d8c4:	021b      	lsls	r3, r3, #8
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	693a      	ldr	r2, [r7, #16]
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d8d4:	f023 030c 	bic.w	r3, r3, #12
 800d8d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d8e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	68da      	ldr	r2, [r3, #12]
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	69db      	ldr	r3, [r3, #28]
 800d8ee:	021b      	lsls	r3, r3, #8
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	691b      	ldr	r3, [r3, #16]
 800d8fc:	011a      	lsls	r2, r3, #4
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	6a1b      	ldr	r3, [r3, #32]
 800d902:	031b      	lsls	r3, r3, #12
 800d904:	4313      	orrs	r3, r2
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	4313      	orrs	r3, r2
 800d90a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d912:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d91a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	695b      	ldr	r3, [r3, #20]
 800d924:	011b      	lsls	r3, r3, #4
 800d926:	4313      	orrs	r3, r2
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	693a      	ldr	r2, [r7, #16]
 800d93c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2201      	movs	r2, #1
 800d952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d990:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d998:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d110      	bne.n	800d9d2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d102      	bne.n	800d9bc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d9b6:	7b7b      	ldrb	r3, [r7, #13]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d001      	beq.n	800d9c0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e089      	b.n	800dad4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2202      	movs	r2, #2
 800d9cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9d0:	e031      	b.n	800da36 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b04      	cmp	r3, #4
 800d9d6:	d110      	bne.n	800d9fa <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9d8:	7bbb      	ldrb	r3, [r7, #14]
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d102      	bne.n	800d9e4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d9de:	7b3b      	ldrb	r3, [r7, #12]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d001      	beq.n	800d9e8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e075      	b.n	800dad4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2202      	movs	r2, #2
 800d9ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2202      	movs	r2, #2
 800d9f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9f8:	e01d      	b.n	800da36 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d108      	bne.n	800da12 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800da00:	7bbb      	ldrb	r3, [r7, #14]
 800da02:	2b01      	cmp	r3, #1
 800da04:	d105      	bne.n	800da12 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800da06:	7b7b      	ldrb	r3, [r7, #13]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d102      	bne.n	800da12 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800da0c:	7b3b      	ldrb	r3, [r7, #12]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d001      	beq.n	800da16 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800da12:	2301      	movs	r3, #1
 800da14:	e05e      	b.n	800dad4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2202      	movs	r2, #2
 800da1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2202      	movs	r2, #2
 800da22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2202      	movs	r2, #2
 800da2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2202      	movs	r2, #2
 800da32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d003      	beq.n	800da44 <HAL_TIM_Encoder_Start_IT+0xc4>
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	2b04      	cmp	r3, #4
 800da40:	d010      	beq.n	800da64 <HAL_TIM_Encoder_Start_IT+0xe4>
 800da42:	e01f      	b.n	800da84 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2201      	movs	r2, #1
 800da4a:	2100      	movs	r1, #0
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 fe4f 	bl	800e6f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68da      	ldr	r2, [r3, #12]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f042 0202 	orr.w	r2, r2, #2
 800da60:	60da      	str	r2, [r3, #12]
      break;
 800da62:	e02e      	b.n	800dac2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2201      	movs	r2, #1
 800da6a:	2104      	movs	r1, #4
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 fe3f 	bl	800e6f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	68da      	ldr	r2, [r3, #12]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f042 0204 	orr.w	r2, r2, #4
 800da80:	60da      	str	r2, [r3, #12]
      break;
 800da82:	e01e      	b.n	800dac2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2201      	movs	r2, #1
 800da8a:	2100      	movs	r1, #0
 800da8c:	4618      	mov	r0, r3
 800da8e:	f000 fe2f 	bl	800e6f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2201      	movs	r2, #1
 800da98:	2104      	movs	r1, #4
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 fe28 	bl	800e6f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68da      	ldr	r2, [r3, #12]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f042 0202 	orr.w	r2, r2, #2
 800daae:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68da      	ldr	r2, [r3, #12]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f042 0204 	orr.w	r2, r2, #4
 800dabe:	60da      	str	r2, [r3, #12]
      break;
 800dac0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f042 0201 	orr.w	r2, r2, #1
 800dad0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	691b      	ldr	r3, [r3, #16]
 800daf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	f003 0302 	and.w	r3, r3, #2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d020      	beq.n	800db40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f003 0302 	and.w	r3, r3, #2
 800db04:	2b00      	cmp	r3, #0
 800db06:	d01b      	beq.n	800db40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f06f 0202 	mvn.w	r2, #2
 800db10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2201      	movs	r2, #1
 800db16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	699b      	ldr	r3, [r3, #24]
 800db1e:	f003 0303 	and.w	r3, r3, #3
 800db22:	2b00      	cmp	r3, #0
 800db24:	d003      	beq.n	800db2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7f5 fa0c 	bl	8002f44 <HAL_TIM_IC_CaptureCallback>
 800db2c:	e005      	b.n	800db3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fa38 	bl	800dfa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7f5 fa17 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	f003 0304 	and.w	r3, r3, #4
 800db46:	2b00      	cmp	r3, #0
 800db48:	d020      	beq.n	800db8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f003 0304 	and.w	r3, r3, #4
 800db50:	2b00      	cmp	r3, #0
 800db52:	d01b      	beq.n	800db8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f06f 0204 	mvn.w	r2, #4
 800db5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2202      	movs	r2, #2
 800db62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	699b      	ldr	r3, [r3, #24]
 800db6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d003      	beq.n	800db7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7f5 f9e6 	bl	8002f44 <HAL_TIM_IC_CaptureCallback>
 800db78:	e005      	b.n	800db86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fa12 	bl	800dfa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f7f5 f9f1 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	f003 0308 	and.w	r3, r3, #8
 800db92:	2b00      	cmp	r3, #0
 800db94:	d020      	beq.n	800dbd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f003 0308 	and.w	r3, r3, #8
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d01b      	beq.n	800dbd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f06f 0208 	mvn.w	r2, #8
 800dba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2204      	movs	r2, #4
 800dbae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	69db      	ldr	r3, [r3, #28]
 800dbb6:	f003 0303 	and.w	r3, r3, #3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d003      	beq.n	800dbc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7f5 f9c0 	bl	8002f44 <HAL_TIM_IC_CaptureCallback>
 800dbc4:	e005      	b.n	800dbd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 f9ec 	bl	800dfa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7f5 f9cb 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	f003 0310 	and.w	r3, r3, #16
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d020      	beq.n	800dc24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f003 0310 	and.w	r3, r3, #16
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d01b      	beq.n	800dc24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f06f 0210 	mvn.w	r2, #16
 800dbf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2208      	movs	r2, #8
 800dbfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	69db      	ldr	r3, [r3, #28]
 800dc02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d003      	beq.n	800dc12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7f5 f99a 	bl	8002f44 <HAL_TIM_IC_CaptureCallback>
 800dc10:	e005      	b.n	800dc1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f9c6 	bl	800dfa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f7f5 f9a5 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	f003 0301 	and.w	r3, r3, #1
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00c      	beq.n	800dc48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f003 0301 	and.w	r3, r3, #1
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d007      	beq.n	800dc48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f06f 0201 	mvn.w	r2, #1
 800dc40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7f5 f9b6 	bl	8002fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d104      	bne.n	800dc5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00c      	beq.n	800dc76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d007      	beq.n	800dc76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800dc6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 ff83 	bl	800eb7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00c      	beq.n	800dc9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d007      	beq.n	800dc9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dc92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 ff7b 	bl	800eb90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00c      	beq.n	800dcbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dcb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f97d 	bl	800dfb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	f003 0320 	and.w	r3, r3, #32
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00c      	beq.n	800dce2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f003 0320 	and.w	r3, r3, #32
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d007      	beq.n	800dce2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f06f 0220 	mvn.w	r2, #32
 800dcda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 ff43 	bl	800eb68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00c      	beq.n	800dd06 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d007      	beq.n	800dd06 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800dcfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 ff4f 	bl	800eba4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00c      	beq.n	800dd2a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d007      	beq.n	800dd2a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800dd22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 ff47 	bl	800ebb8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00c      	beq.n	800dd4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d007      	beq.n	800dd4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800dd46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 ff3f 	bl	800ebcc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d00c      	beq.n	800dd72 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d007      	beq.n	800dd72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800dd6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 ff37 	bl	800ebe0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd72:	bf00      	nop
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
	...

0800dd7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b086      	sub	sp, #24
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d101      	bne.n	800dd9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd96:	2302      	movs	r3, #2
 800dd98:	e0ff      	b.n	800df9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b14      	cmp	r3, #20
 800dda6:	f200 80f0 	bhi.w	800df8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ddaa:	a201      	add	r2, pc, #4	; (adr r2, 800ddb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ddac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb0:	0800de05 	.word	0x0800de05
 800ddb4:	0800df8b 	.word	0x0800df8b
 800ddb8:	0800df8b 	.word	0x0800df8b
 800ddbc:	0800df8b 	.word	0x0800df8b
 800ddc0:	0800de45 	.word	0x0800de45
 800ddc4:	0800df8b 	.word	0x0800df8b
 800ddc8:	0800df8b 	.word	0x0800df8b
 800ddcc:	0800df8b 	.word	0x0800df8b
 800ddd0:	0800de87 	.word	0x0800de87
 800ddd4:	0800df8b 	.word	0x0800df8b
 800ddd8:	0800df8b 	.word	0x0800df8b
 800dddc:	0800df8b 	.word	0x0800df8b
 800dde0:	0800dec7 	.word	0x0800dec7
 800dde4:	0800df8b 	.word	0x0800df8b
 800dde8:	0800df8b 	.word	0x0800df8b
 800ddec:	0800df8b 	.word	0x0800df8b
 800ddf0:	0800df09 	.word	0x0800df09
 800ddf4:	0800df8b 	.word	0x0800df8b
 800ddf8:	0800df8b 	.word	0x0800df8b
 800ddfc:	0800df8b 	.word	0x0800df8b
 800de00:	0800df49 	.word	0x0800df49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68b9      	ldr	r1, [r7, #8]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f000 f97a 	bl	800e104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	699a      	ldr	r2, [r3, #24]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f042 0208 	orr.w	r2, r2, #8
 800de1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	699a      	ldr	r2, [r3, #24]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f022 0204 	bic.w	r2, r2, #4
 800de2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	6999      	ldr	r1, [r3, #24]
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	691a      	ldr	r2, [r3, #16]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	430a      	orrs	r2, r1
 800de40:	619a      	str	r2, [r3, #24]
      break;
 800de42:	e0a5      	b.n	800df90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	68b9      	ldr	r1, [r7, #8]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 f9ea 	bl	800e224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	699a      	ldr	r2, [r3, #24]
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	699a      	ldr	r2, [r3, #24]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6999      	ldr	r1, [r3, #24]
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	021a      	lsls	r2, r3, #8
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	430a      	orrs	r2, r1
 800de82:	619a      	str	r2, [r3, #24]
      break;
 800de84:	e084      	b.n	800df90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68b9      	ldr	r1, [r7, #8]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f000 fa53 	bl	800e338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	69da      	ldr	r2, [r3, #28]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f042 0208 	orr.w	r2, r2, #8
 800dea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	69da      	ldr	r2, [r3, #28]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f022 0204 	bic.w	r2, r2, #4
 800deb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	69d9      	ldr	r1, [r3, #28]
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	691a      	ldr	r2, [r3, #16]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	430a      	orrs	r2, r1
 800dec2:	61da      	str	r2, [r3, #28]
      break;
 800dec4:	e064      	b.n	800df90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	68b9      	ldr	r1, [r7, #8]
 800decc:	4618      	mov	r0, r3
 800dece:	f000 fabb 	bl	800e448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	69da      	ldr	r2, [r3, #28]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	69da      	ldr	r2, [r3, #28]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800def0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	69d9      	ldr	r1, [r3, #28]
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	021a      	lsls	r2, r3, #8
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	430a      	orrs	r2, r1
 800df04:	61da      	str	r2, [r3, #28]
      break;
 800df06:	e043      	b.n	800df90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	68b9      	ldr	r1, [r7, #8]
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 fb24 	bl	800e55c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f042 0208 	orr.w	r2, r2, #8
 800df22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f022 0204 	bic.w	r2, r2, #4
 800df32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	691a      	ldr	r2, [r3, #16]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	430a      	orrs	r2, r1
 800df44:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800df46:	e023      	b.n	800df90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	68b9      	ldr	r1, [r7, #8]
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 fb68 	bl	800e624 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df72:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	691b      	ldr	r3, [r3, #16]
 800df7e:	021a      	lsls	r2, r3, #8
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	430a      	orrs	r2, r1
 800df86:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800df88:	e002      	b.n	800df90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800df8a:	2301      	movs	r3, #1
 800df8c:	75fb      	strb	r3, [r7, #23]
      break;
 800df8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2200      	movs	r2, #0
 800df94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800df98:	7dfb      	ldrb	r3, [r7, #23]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop

0800dfa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dfac:	bf00      	nop
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a42      	ldr	r2, [pc, #264]	; (800e0e8 <TIM_Base_SetConfig+0x11c>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d00f      	beq.n	800e004 <TIM_Base_SetConfig+0x38>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfea:	d00b      	beq.n	800e004 <TIM_Base_SetConfig+0x38>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4a3f      	ldr	r2, [pc, #252]	; (800e0ec <TIM_Base_SetConfig+0x120>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d007      	beq.n	800e004 <TIM_Base_SetConfig+0x38>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a3e      	ldr	r2, [pc, #248]	; (800e0f0 <TIM_Base_SetConfig+0x124>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d003      	beq.n	800e004 <TIM_Base_SetConfig+0x38>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a3d      	ldr	r2, [pc, #244]	; (800e0f4 <TIM_Base_SetConfig+0x128>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d108      	bne.n	800e016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e00a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	4313      	orrs	r3, r2
 800e014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a33      	ldr	r2, [pc, #204]	; (800e0e8 <TIM_Base_SetConfig+0x11c>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d01b      	beq.n	800e056 <TIM_Base_SetConfig+0x8a>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e024:	d017      	beq.n	800e056 <TIM_Base_SetConfig+0x8a>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4a30      	ldr	r2, [pc, #192]	; (800e0ec <TIM_Base_SetConfig+0x120>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d013      	beq.n	800e056 <TIM_Base_SetConfig+0x8a>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a2f      	ldr	r2, [pc, #188]	; (800e0f0 <TIM_Base_SetConfig+0x124>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d00f      	beq.n	800e056 <TIM_Base_SetConfig+0x8a>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a2e      	ldr	r2, [pc, #184]	; (800e0f4 <TIM_Base_SetConfig+0x128>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d00b      	beq.n	800e056 <TIM_Base_SetConfig+0x8a>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a2d      	ldr	r2, [pc, #180]	; (800e0f8 <TIM_Base_SetConfig+0x12c>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d007      	beq.n	800e056 <TIM_Base_SetConfig+0x8a>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a2c      	ldr	r2, [pc, #176]	; (800e0fc <TIM_Base_SetConfig+0x130>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d003      	beq.n	800e056 <TIM_Base_SetConfig+0x8a>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4a2b      	ldr	r2, [pc, #172]	; (800e100 <TIM_Base_SetConfig+0x134>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d108      	bne.n	800e068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e05c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	4313      	orrs	r3, r2
 800e066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	695b      	ldr	r3, [r3, #20]
 800e072:	4313      	orrs	r3, r2
 800e074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	689a      	ldr	r2, [r3, #8]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	4a16      	ldr	r2, [pc, #88]	; (800e0e8 <TIM_Base_SetConfig+0x11c>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d00f      	beq.n	800e0b4 <TIM_Base_SetConfig+0xe8>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4a17      	ldr	r2, [pc, #92]	; (800e0f4 <TIM_Base_SetConfig+0x128>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d00b      	beq.n	800e0b4 <TIM_Base_SetConfig+0xe8>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4a16      	ldr	r2, [pc, #88]	; (800e0f8 <TIM_Base_SetConfig+0x12c>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d007      	beq.n	800e0b4 <TIM_Base_SetConfig+0xe8>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4a15      	ldr	r2, [pc, #84]	; (800e0fc <TIM_Base_SetConfig+0x130>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d003      	beq.n	800e0b4 <TIM_Base_SetConfig+0xe8>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4a14      	ldr	r2, [pc, #80]	; (800e100 <TIM_Base_SetConfig+0x134>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d103      	bne.n	800e0bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	691a      	ldr	r2, [r3, #16]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	691b      	ldr	r3, [r3, #16]
 800e0c6:	f003 0301 	and.w	r3, r3, #1
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d105      	bne.n	800e0da <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	f023 0201 	bic.w	r2, r3, #1
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	611a      	str	r2, [r3, #16]
  }
}
 800e0da:	bf00      	nop
 800e0dc:	3714      	adds	r7, #20
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr
 800e0e6:	bf00      	nop
 800e0e8:	40012c00 	.word	0x40012c00
 800e0ec:	40000400 	.word	0x40000400
 800e0f0:	40000800 	.word	0x40000800
 800e0f4:	40013400 	.word	0x40013400
 800e0f8:	40014000 	.word	0x40014000
 800e0fc:	40014400 	.word	0x40014400
 800e100:	40014800 	.word	0x40014800

0800e104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e104:	b480      	push	{r7}
 800e106:	b087      	sub	sp, #28
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a1b      	ldr	r3, [r3, #32]
 800e118:	f023 0201 	bic.w	r2, r3, #1
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	699b      	ldr	r3, [r3, #24]
 800e12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f023 0303 	bic.w	r3, r3, #3
 800e13e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	4313      	orrs	r3, r2
 800e148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	f023 0302 	bic.w	r3, r3, #2
 800e150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	697a      	ldr	r2, [r7, #20]
 800e158:	4313      	orrs	r3, r2
 800e15a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a2c      	ldr	r2, [pc, #176]	; (800e210 <TIM_OC1_SetConfig+0x10c>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d00f      	beq.n	800e184 <TIM_OC1_SetConfig+0x80>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a2b      	ldr	r2, [pc, #172]	; (800e214 <TIM_OC1_SetConfig+0x110>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d00b      	beq.n	800e184 <TIM_OC1_SetConfig+0x80>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a2a      	ldr	r2, [pc, #168]	; (800e218 <TIM_OC1_SetConfig+0x114>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d007      	beq.n	800e184 <TIM_OC1_SetConfig+0x80>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a29      	ldr	r2, [pc, #164]	; (800e21c <TIM_OC1_SetConfig+0x118>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d003      	beq.n	800e184 <TIM_OC1_SetConfig+0x80>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a28      	ldr	r2, [pc, #160]	; (800e220 <TIM_OC1_SetConfig+0x11c>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d10c      	bne.n	800e19e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	f023 0308 	bic.w	r3, r3, #8
 800e18a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	697a      	ldr	r2, [r7, #20]
 800e192:	4313      	orrs	r3, r2
 800e194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	f023 0304 	bic.w	r3, r3, #4
 800e19c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4a1b      	ldr	r2, [pc, #108]	; (800e210 <TIM_OC1_SetConfig+0x10c>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d00f      	beq.n	800e1c6 <TIM_OC1_SetConfig+0xc2>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	4a1a      	ldr	r2, [pc, #104]	; (800e214 <TIM_OC1_SetConfig+0x110>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d00b      	beq.n	800e1c6 <TIM_OC1_SetConfig+0xc2>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4a19      	ldr	r2, [pc, #100]	; (800e218 <TIM_OC1_SetConfig+0x114>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d007      	beq.n	800e1c6 <TIM_OC1_SetConfig+0xc2>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4a18      	ldr	r2, [pc, #96]	; (800e21c <TIM_OC1_SetConfig+0x118>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d003      	beq.n	800e1c6 <TIM_OC1_SetConfig+0xc2>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4a17      	ldr	r2, [pc, #92]	; (800e220 <TIM_OC1_SetConfig+0x11c>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d111      	bne.n	800e1ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	693a      	ldr	r2, [r7, #16]
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	699b      	ldr	r3, [r3, #24]
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	693a      	ldr	r2, [r7, #16]
 800e1ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	697a      	ldr	r2, [r7, #20]
 800e202:	621a      	str	r2, [r3, #32]
}
 800e204:	bf00      	nop
 800e206:	371c      	adds	r7, #28
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	40012c00 	.word	0x40012c00
 800e214:	40013400 	.word	0x40013400
 800e218:	40014000 	.word	0x40014000
 800e21c:	40014400 	.word	0x40014400
 800e220:	40014800 	.word	0x40014800

0800e224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e224:	b480      	push	{r7}
 800e226:	b087      	sub	sp, #28
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	f023 0210 	bic.w	r2, r3, #16
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	699b      	ldr	r3, [r3, #24]
 800e24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e25e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	021b      	lsls	r3, r3, #8
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	4313      	orrs	r3, r2
 800e26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	f023 0320 	bic.w	r3, r3, #32
 800e272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	011b      	lsls	r3, r3, #4
 800e27a:	697a      	ldr	r2, [r7, #20]
 800e27c:	4313      	orrs	r3, r2
 800e27e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	4a28      	ldr	r2, [pc, #160]	; (800e324 <TIM_OC2_SetConfig+0x100>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d003      	beq.n	800e290 <TIM_OC2_SetConfig+0x6c>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4a27      	ldr	r2, [pc, #156]	; (800e328 <TIM_OC2_SetConfig+0x104>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d10d      	bne.n	800e2ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	011b      	lsls	r3, r3, #4
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4a1d      	ldr	r2, [pc, #116]	; (800e324 <TIM_OC2_SetConfig+0x100>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d00f      	beq.n	800e2d4 <TIM_OC2_SetConfig+0xb0>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4a1c      	ldr	r2, [pc, #112]	; (800e328 <TIM_OC2_SetConfig+0x104>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d00b      	beq.n	800e2d4 <TIM_OC2_SetConfig+0xb0>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a1b      	ldr	r2, [pc, #108]	; (800e32c <TIM_OC2_SetConfig+0x108>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d007      	beq.n	800e2d4 <TIM_OC2_SetConfig+0xb0>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4a1a      	ldr	r2, [pc, #104]	; (800e330 <TIM_OC2_SetConfig+0x10c>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d003      	beq.n	800e2d4 <TIM_OC2_SetConfig+0xb0>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a19      	ldr	r2, [pc, #100]	; (800e334 <TIM_OC2_SetConfig+0x110>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d113      	bne.n	800e2fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e2da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e2e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	693a      	ldr	r2, [r7, #16]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	693a      	ldr	r2, [r7, #16]
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	685a      	ldr	r2, [r3, #4]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	621a      	str	r2, [r3, #32]
}
 800e316:	bf00      	nop
 800e318:	371c      	adds	r7, #28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	40012c00 	.word	0x40012c00
 800e328:	40013400 	.word	0x40013400
 800e32c:	40014000 	.word	0x40014000
 800e330:	40014400 	.word	0x40014400
 800e334:	40014800 	.word	0x40014800

0800e338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e338:	b480      	push	{r7}
 800e33a:	b087      	sub	sp, #28
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6a1b      	ldr	r3, [r3, #32]
 800e34c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	69db      	ldr	r3, [r3, #28]
 800e35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f023 0303 	bic.w	r3, r3, #3
 800e372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	021b      	lsls	r3, r3, #8
 800e38c:	697a      	ldr	r2, [r7, #20]
 800e38e:	4313      	orrs	r3, r2
 800e390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4a27      	ldr	r2, [pc, #156]	; (800e434 <TIM_OC3_SetConfig+0xfc>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d003      	beq.n	800e3a2 <TIM_OC3_SetConfig+0x6a>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4a26      	ldr	r2, [pc, #152]	; (800e438 <TIM_OC3_SetConfig+0x100>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d10d      	bne.n	800e3be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e3a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	021b      	lsls	r3, r3, #8
 800e3b0:	697a      	ldr	r2, [r7, #20]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4a1c      	ldr	r2, [pc, #112]	; (800e434 <TIM_OC3_SetConfig+0xfc>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d00f      	beq.n	800e3e6 <TIM_OC3_SetConfig+0xae>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4a1b      	ldr	r2, [pc, #108]	; (800e438 <TIM_OC3_SetConfig+0x100>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d00b      	beq.n	800e3e6 <TIM_OC3_SetConfig+0xae>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4a1a      	ldr	r2, [pc, #104]	; (800e43c <TIM_OC3_SetConfig+0x104>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d007      	beq.n	800e3e6 <TIM_OC3_SetConfig+0xae>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4a19      	ldr	r2, [pc, #100]	; (800e440 <TIM_OC3_SetConfig+0x108>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d003      	beq.n	800e3e6 <TIM_OC3_SetConfig+0xae>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4a18      	ldr	r2, [pc, #96]	; (800e444 <TIM_OC3_SetConfig+0x10c>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d113      	bne.n	800e40e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e3f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	695b      	ldr	r3, [r3, #20]
 800e3fa:	011b      	lsls	r3, r3, #4
 800e3fc:	693a      	ldr	r2, [r7, #16]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	011b      	lsls	r3, r3, #4
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	4313      	orrs	r3, r2
 800e40c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	693a      	ldr	r2, [r7, #16]
 800e412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	697a      	ldr	r2, [r7, #20]
 800e426:	621a      	str	r2, [r3, #32]
}
 800e428:	bf00      	nop
 800e42a:	371c      	adds	r7, #28
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	40012c00 	.word	0x40012c00
 800e438:	40013400 	.word	0x40013400
 800e43c:	40014000 	.word	0x40014000
 800e440:	40014400 	.word	0x40014400
 800e444:	40014800 	.word	0x40014800

0800e448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e448:	b480      	push	{r7}
 800e44a:	b087      	sub	sp, #28
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a1b      	ldr	r3, [r3, #32]
 800e456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6a1b      	ldr	r3, [r3, #32]
 800e45c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e47a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	021b      	lsls	r3, r3, #8
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	031b      	lsls	r3, r3, #12
 800e49e:	697a      	ldr	r2, [r7, #20]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a28      	ldr	r2, [pc, #160]	; (800e548 <TIM_OC4_SetConfig+0x100>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d003      	beq.n	800e4b4 <TIM_OC4_SetConfig+0x6c>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a27      	ldr	r2, [pc, #156]	; (800e54c <TIM_OC4_SetConfig+0x104>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d10d      	bne.n	800e4d0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e4ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	031b      	lsls	r3, r3, #12
 800e4c2:	697a      	ldr	r2, [r7, #20]
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e4ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	4a1d      	ldr	r2, [pc, #116]	; (800e548 <TIM_OC4_SetConfig+0x100>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d00f      	beq.n	800e4f8 <TIM_OC4_SetConfig+0xb0>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4a1c      	ldr	r2, [pc, #112]	; (800e54c <TIM_OC4_SetConfig+0x104>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d00b      	beq.n	800e4f8 <TIM_OC4_SetConfig+0xb0>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	4a1b      	ldr	r2, [pc, #108]	; (800e550 <TIM_OC4_SetConfig+0x108>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d007      	beq.n	800e4f8 <TIM_OC4_SetConfig+0xb0>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	4a1a      	ldr	r2, [pc, #104]	; (800e554 <TIM_OC4_SetConfig+0x10c>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d003      	beq.n	800e4f8 <TIM_OC4_SetConfig+0xb0>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	4a19      	ldr	r2, [pc, #100]	; (800e558 <TIM_OC4_SetConfig+0x110>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d113      	bne.n	800e520 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e4fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e506:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	019b      	lsls	r3, r3, #6
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	4313      	orrs	r3, r2
 800e512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	019b      	lsls	r3, r3, #6
 800e51a:	693a      	ldr	r2, [r7, #16]
 800e51c:	4313      	orrs	r3, r2
 800e51e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	693a      	ldr	r2, [r7, #16]
 800e524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	685a      	ldr	r2, [r3, #4]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	697a      	ldr	r2, [r7, #20]
 800e538:	621a      	str	r2, [r3, #32]
}
 800e53a:	bf00      	nop
 800e53c:	371c      	adds	r7, #28
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	40012c00 	.word	0x40012c00
 800e54c:	40013400 	.word	0x40013400
 800e550:	40014000 	.word	0x40014000
 800e554:	40014400 	.word	0x40014400
 800e558:	40014800 	.word	0x40014800

0800e55c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b087      	sub	sp, #28
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a1b      	ldr	r3, [r3, #32]
 800e56a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6a1b      	ldr	r3, [r3, #32]
 800e570:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e58e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	4313      	orrs	r3, r2
 800e598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e5a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	041b      	lsls	r3, r3, #16
 800e5a8:	693a      	ldr	r2, [r7, #16]
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a17      	ldr	r2, [pc, #92]	; (800e610 <TIM_OC5_SetConfig+0xb4>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d00f      	beq.n	800e5d6 <TIM_OC5_SetConfig+0x7a>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a16      	ldr	r2, [pc, #88]	; (800e614 <TIM_OC5_SetConfig+0xb8>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d00b      	beq.n	800e5d6 <TIM_OC5_SetConfig+0x7a>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a15      	ldr	r2, [pc, #84]	; (800e618 <TIM_OC5_SetConfig+0xbc>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d007      	beq.n	800e5d6 <TIM_OC5_SetConfig+0x7a>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4a14      	ldr	r2, [pc, #80]	; (800e61c <TIM_OC5_SetConfig+0xc0>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d003      	beq.n	800e5d6 <TIM_OC5_SetConfig+0x7a>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4a13      	ldr	r2, [pc, #76]	; (800e620 <TIM_OC5_SetConfig+0xc4>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d109      	bne.n	800e5ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	695b      	ldr	r3, [r3, #20]
 800e5e2:	021b      	lsls	r3, r3, #8
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	697a      	ldr	r2, [r7, #20]
 800e5ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	685a      	ldr	r2, [r3, #4]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	621a      	str	r2, [r3, #32]
}
 800e604:	bf00      	nop
 800e606:	371c      	adds	r7, #28
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr
 800e610:	40012c00 	.word	0x40012c00
 800e614:	40013400 	.word	0x40013400
 800e618:	40014000 	.word	0x40014000
 800e61c:	40014400 	.word	0x40014400
 800e620:	40014800 	.word	0x40014800

0800e624 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e624:	b480      	push	{r7}
 800e626:	b087      	sub	sp, #28
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6a1b      	ldr	r3, [r3, #32]
 800e632:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6a1b      	ldr	r3, [r3, #32]
 800e638:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	021b      	lsls	r3, r3, #8
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	4313      	orrs	r3, r2
 800e662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e66a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	051b      	lsls	r3, r3, #20
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	4313      	orrs	r3, r2
 800e676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4a18      	ldr	r2, [pc, #96]	; (800e6dc <TIM_OC6_SetConfig+0xb8>)
 800e67c:	4293      	cmp	r3, r2
 800e67e:	d00f      	beq.n	800e6a0 <TIM_OC6_SetConfig+0x7c>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4a17      	ldr	r2, [pc, #92]	; (800e6e0 <TIM_OC6_SetConfig+0xbc>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d00b      	beq.n	800e6a0 <TIM_OC6_SetConfig+0x7c>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	4a16      	ldr	r2, [pc, #88]	; (800e6e4 <TIM_OC6_SetConfig+0xc0>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d007      	beq.n	800e6a0 <TIM_OC6_SetConfig+0x7c>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	4a15      	ldr	r2, [pc, #84]	; (800e6e8 <TIM_OC6_SetConfig+0xc4>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d003      	beq.n	800e6a0 <TIM_OC6_SetConfig+0x7c>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4a14      	ldr	r2, [pc, #80]	; (800e6ec <TIM_OC6_SetConfig+0xc8>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d109      	bne.n	800e6b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	695b      	ldr	r3, [r3, #20]
 800e6ac:	029b      	lsls	r3, r3, #10
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	697a      	ldr	r2, [r7, #20]
 800e6b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	685a      	ldr	r2, [r3, #4]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	693a      	ldr	r2, [r7, #16]
 800e6cc:	621a      	str	r2, [r3, #32]
}
 800e6ce:	bf00      	nop
 800e6d0:	371c      	adds	r7, #28
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	40012c00 	.word	0x40012c00
 800e6e0:	40013400 	.word	0x40013400
 800e6e4:	40014000 	.word	0x40014000
 800e6e8:	40014400 	.word	0x40014400
 800e6ec:	40014800 	.word	0x40014800

0800e6f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b087      	sub	sp, #28
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	f003 031f 	and.w	r3, r3, #31
 800e702:	2201      	movs	r2, #1
 800e704:	fa02 f303 	lsl.w	r3, r2, r3
 800e708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6a1a      	ldr	r2, [r3, #32]
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	43db      	mvns	r3, r3
 800e712:	401a      	ands	r2, r3
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6a1a      	ldr	r2, [r3, #32]
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	f003 031f 	and.w	r3, r3, #31
 800e722:	6879      	ldr	r1, [r7, #4]
 800e724:	fa01 f303 	lsl.w	r3, r1, r3
 800e728:	431a      	orrs	r2, r3
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	621a      	str	r2, [r3, #32]
}
 800e72e:	bf00      	nop
 800e730:	371c      	adds	r7, #28
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
	...

0800e73c <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e746:	2300      	movs	r3, #0
 800e748:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d109      	bne.n	800e764 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e756:	b2db      	uxtb	r3, r3
 800e758:	2b01      	cmp	r3, #1
 800e75a:	bf14      	ite	ne
 800e75c:	2301      	movne	r3, #1
 800e75e:	2300      	moveq	r3, #0
 800e760:	b2db      	uxtb	r3, r3
 800e762:	e022      	b.n	800e7aa <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	2b04      	cmp	r3, #4
 800e768:	d109      	bne.n	800e77e <HAL_TIMEx_PWMN_Start_IT+0x42>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e770:	b2db      	uxtb	r3, r3
 800e772:	2b01      	cmp	r3, #1
 800e774:	bf14      	ite	ne
 800e776:	2301      	movne	r3, #1
 800e778:	2300      	moveq	r3, #0
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	e015      	b.n	800e7aa <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	2b08      	cmp	r3, #8
 800e782:	d109      	bne.n	800e798 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	bf14      	ite	ne
 800e790:	2301      	movne	r3, #1
 800e792:	2300      	moveq	r3, #0
 800e794:	b2db      	uxtb	r3, r3
 800e796:	e008      	b.n	800e7aa <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	bf14      	ite	ne
 800e7a4:	2301      	movne	r3, #1
 800e7a6:	2300      	moveq	r3, #0
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d001      	beq.n	800e7b2 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e0bc      	b.n	800e92c <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d104      	bne.n	800e7c2 <HAL_TIMEx_PWMN_Start_IT+0x86>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2202      	movs	r2, #2
 800e7bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7c0:	e013      	b.n	800e7ea <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	2b04      	cmp	r3, #4
 800e7c6:	d104      	bne.n	800e7d2 <HAL_TIMEx_PWMN_Start_IT+0x96>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2202      	movs	r2, #2
 800e7cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7d0:	e00b      	b.n	800e7ea <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	2b08      	cmp	r3, #8
 800e7d6:	d104      	bne.n	800e7e2 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2202      	movs	r2, #2
 800e7dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e7e0:	e003      	b.n	800e7ea <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2202      	movs	r2, #2
 800e7e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	2b0c      	cmp	r3, #12
 800e7ee:	d841      	bhi.n	800e874 <HAL_TIMEx_PWMN_Start_IT+0x138>
 800e7f0:	a201      	add	r2, pc, #4	; (adr r2, 800e7f8 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800e7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f6:	bf00      	nop
 800e7f8:	0800e82d 	.word	0x0800e82d
 800e7fc:	0800e875 	.word	0x0800e875
 800e800:	0800e875 	.word	0x0800e875
 800e804:	0800e875 	.word	0x0800e875
 800e808:	0800e83f 	.word	0x0800e83f
 800e80c:	0800e875 	.word	0x0800e875
 800e810:	0800e875 	.word	0x0800e875
 800e814:	0800e875 	.word	0x0800e875
 800e818:	0800e851 	.word	0x0800e851
 800e81c:	0800e875 	.word	0x0800e875
 800e820:	0800e875 	.word	0x0800e875
 800e824:	0800e875 	.word	0x0800e875
 800e828:	0800e863 	.word	0x0800e863
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	68da      	ldr	r2, [r3, #12]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f042 0202 	orr.w	r2, r2, #2
 800e83a:	60da      	str	r2, [r3, #12]
      break;
 800e83c:	e01d      	b.n	800e87a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68da      	ldr	r2, [r3, #12]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f042 0204 	orr.w	r2, r2, #4
 800e84c:	60da      	str	r2, [r3, #12]
      break;
 800e84e:	e014      	b.n	800e87a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68da      	ldr	r2, [r3, #12]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f042 0208 	orr.w	r2, r2, #8
 800e85e:	60da      	str	r2, [r3, #12]
      break;
 800e860:	e00b      	b.n	800e87a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	68da      	ldr	r2, [r3, #12]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f042 0210 	orr.w	r2, r2, #16
 800e870:	60da      	str	r2, [r3, #12]
      break;
 800e872:	e002      	b.n	800e87a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	73fb      	strb	r3, [r7, #15]
      break;
 800e878:	bf00      	nop
  }

  if (status == HAL_OK)
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d154      	bne.n	800e92a <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	68da      	ldr	r2, [r3, #12]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e88e:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2204      	movs	r2, #4
 800e896:	6839      	ldr	r1, [r7, #0]
 800e898:	4618      	mov	r0, r3
 800e89a:	f000 f9ab 	bl	800ebf4 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e8ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a20      	ldr	r2, [pc, #128]	; (800e934 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d018      	beq.n	800e8ea <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8c0:	d013      	beq.n	800e8ea <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a1c      	ldr	r2, [pc, #112]	; (800e938 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d00e      	beq.n	800e8ea <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a1a      	ldr	r2, [pc, #104]	; (800e93c <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d009      	beq.n	800e8ea <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a19      	ldr	r2, [pc, #100]	; (800e940 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d004      	beq.n	800e8ea <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4a17      	ldr	r2, [pc, #92]	; (800e944 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d115      	bne.n	800e916 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	689a      	ldr	r2, [r3, #8]
 800e8f0:	4b15      	ldr	r3, [pc, #84]	; (800e948 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800e8f2:	4013      	ands	r3, r2
 800e8f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	2b06      	cmp	r3, #6
 800e8fa:	d015      	beq.n	800e928 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e902:	d011      	beq.n	800e928 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f042 0201 	orr.w	r2, r2, #1
 800e912:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e914:	e008      	b.n	800e928 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f042 0201 	orr.w	r2, r2, #1
 800e924:	601a      	str	r2, [r3, #0]
 800e926:	e000      	b.n	800e92a <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e928:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	40012c00 	.word	0x40012c00
 800e938:	40000400 	.word	0x40000400
 800e93c:	40000800 	.word	0x40000800
 800e940:	40013400 	.word	0x40013400
 800e944:	40014000 	.word	0x40014000
 800e948:	00010007 	.word	0x00010007

0800e94c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d101      	bne.n	800e964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e960:	2302      	movs	r3, #2
 800e962:	e065      	b.n	800ea30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2202      	movs	r2, #2
 800e970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a2c      	ldr	r2, [pc, #176]	; (800ea3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d004      	beq.n	800e998 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a2b      	ldr	r2, [pc, #172]	; (800ea40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d108      	bne.n	800e9aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e99e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e9b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a1b      	ldr	r2, [pc, #108]	; (800ea3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d018      	beq.n	800ea04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9da:	d013      	beq.n	800ea04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a18      	ldr	r2, [pc, #96]	; (800ea44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d00e      	beq.n	800ea04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a17      	ldr	r2, [pc, #92]	; (800ea48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d009      	beq.n	800ea04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a12      	ldr	r2, [pc, #72]	; (800ea40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d004      	beq.n	800ea04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a13      	ldr	r2, [pc, #76]	; (800ea4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d10c      	bne.n	800ea1e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	4313      	orrs	r3, r2
 800ea14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2201      	movs	r2, #1
 800ea22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3714      	adds	r7, #20
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr
 800ea3c:	40012c00 	.word	0x40012c00
 800ea40:	40013400 	.word	0x40013400
 800ea44:	40000400 	.word	0x40000400
 800ea48:	40000800 	.word	0x40000800
 800ea4c:	40014000 	.word	0x40014000

0800ea50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d101      	bne.n	800ea6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ea68:	2302      	movs	r3, #2
 800ea6a:	e073      	b.n	800eb54 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	4313      	orrs	r3, r2
 800eab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	695b      	ldr	r3, [r3, #20]
 800eac4:	4313      	orrs	r3, r2
 800eac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ead2:	4313      	orrs	r3, r2
 800ead4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	041b      	lsls	r3, r3, #16
 800eae2:	4313      	orrs	r3, r2
 800eae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	69db      	ldr	r3, [r3, #28]
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a19      	ldr	r2, [pc, #100]	; (800eb60 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d004      	beq.n	800eb08 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4a18      	ldr	r2, [pc, #96]	; (800eb64 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d11c      	bne.n	800eb42 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb12:	051b      	lsls	r3, r3, #20
 800eb14:	4313      	orrs	r3, r2
 800eb16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	6a1b      	ldr	r3, [r3, #32]
 800eb22:	4313      	orrs	r3, r2
 800eb24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb30:	4313      	orrs	r3, r2
 800eb32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	68fa      	ldr	r2, [r7, #12]
 800eb48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3714      	adds	r7, #20
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr
 800eb60:	40012c00 	.word	0x40012c00
 800eb64:	40013400 	.word	0x40013400

0800eb68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb70:	bf00      	nop
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb84:	bf00      	nop
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eb98:	bf00      	nop
 800eb9a:	370c      	adds	r7, #12
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ebac:	bf00      	nop
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ebd4:	bf00      	nop
 800ebd6:	370c      	adds	r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ebe8:	bf00      	nop
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	f003 030f 	and.w	r3, r3, #15
 800ec06:	2204      	movs	r2, #4
 800ec08:	fa02 f303 	lsl.w	r3, r2, r3
 800ec0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	6a1a      	ldr	r2, [r3, #32]
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	43db      	mvns	r3, r3
 800ec16:	401a      	ands	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6a1a      	ldr	r2, [r3, #32]
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	f003 030f 	and.w	r3, r3, #15
 800ec26:	6879      	ldr	r1, [r7, #4]
 800ec28:	fa01 f303 	lsl.w	r3, r1, r3
 800ec2c:	431a      	orrs	r2, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	621a      	str	r2, [r3, #32]
}
 800ec32:	bf00      	nop
 800ec34:	371c      	adds	r7, #28
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d101      	bne.n	800ec50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e042      	b.n	800ecd6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d106      	bne.n	800ec68 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7f6 faf0 	bl	8005248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2224      	movs	r2, #36	; 0x24
 800ec6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f022 0201 	bic.w	r2, r2, #1
 800ec7e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d002      	beq.n	800ec8e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 faf5 	bl	800f278 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 f826 	bl	800ece0 <UART_SetConfig>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d101      	bne.n	800ec9e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e01b      	b.n	800ecd6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ecac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	689a      	ldr	r2, [r3, #8]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ecbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f042 0201 	orr.w	r2, r2, #1
 800eccc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 fb74 	bl	800f3bc <UART_CheckIdleState>
 800ecd4:	4603      	mov	r3, r0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
	...

0800ece0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ece0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ece4:	b08c      	sub	sp, #48	; 0x30
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecea:	2300      	movs	r3, #0
 800ecec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	689a      	ldr	r2, [r3, #8]
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	431a      	orrs	r2, r3
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	695b      	ldr	r3, [r3, #20]
 800ecfe:	431a      	orrs	r2, r3
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	69db      	ldr	r3, [r3, #28]
 800ed04:	4313      	orrs	r3, r2
 800ed06:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	4bab      	ldr	r3, [pc, #684]	; (800efbc <UART_SetConfig+0x2dc>)
 800ed10:	4013      	ands	r3, r2
 800ed12:	697a      	ldr	r2, [r7, #20]
 800ed14:	6812      	ldr	r2, [r2, #0]
 800ed16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed18:	430b      	orrs	r3, r1
 800ed1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	68da      	ldr	r2, [r3, #12]
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4aa0      	ldr	r2, [pc, #640]	; (800efc0 <UART_SetConfig+0x2e0>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d004      	beq.n	800ed4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	6a1b      	ldr	r3, [r3, #32]
 800ed46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ed56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ed5a:	697a      	ldr	r2, [r7, #20]
 800ed5c:	6812      	ldr	r2, [r2, #0]
 800ed5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed60:	430b      	orrs	r3, r1
 800ed62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed6a:	f023 010f 	bic.w	r1, r3, #15
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	430a      	orrs	r2, r1
 800ed78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4a91      	ldr	r2, [pc, #580]	; (800efc4 <UART_SetConfig+0x2e4>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d125      	bne.n	800edd0 <UART_SetConfig+0xf0>
 800ed84:	4b90      	ldr	r3, [pc, #576]	; (800efc8 <UART_SetConfig+0x2e8>)
 800ed86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed8a:	f003 0303 	and.w	r3, r3, #3
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d81a      	bhi.n	800edc8 <UART_SetConfig+0xe8>
 800ed92:	a201      	add	r2, pc, #4	; (adr r2, 800ed98 <UART_SetConfig+0xb8>)
 800ed94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed98:	0800eda9 	.word	0x0800eda9
 800ed9c:	0800edb9 	.word	0x0800edb9
 800eda0:	0800edb1 	.word	0x0800edb1
 800eda4:	0800edc1 	.word	0x0800edc1
 800eda8:	2301      	movs	r3, #1
 800edaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edae:	e0d6      	b.n	800ef5e <UART_SetConfig+0x27e>
 800edb0:	2302      	movs	r3, #2
 800edb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edb6:	e0d2      	b.n	800ef5e <UART_SetConfig+0x27e>
 800edb8:	2304      	movs	r3, #4
 800edba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edbe:	e0ce      	b.n	800ef5e <UART_SetConfig+0x27e>
 800edc0:	2308      	movs	r3, #8
 800edc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edc6:	e0ca      	b.n	800ef5e <UART_SetConfig+0x27e>
 800edc8:	2310      	movs	r3, #16
 800edca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edce:	e0c6      	b.n	800ef5e <UART_SetConfig+0x27e>
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a7d      	ldr	r2, [pc, #500]	; (800efcc <UART_SetConfig+0x2ec>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d138      	bne.n	800ee4c <UART_SetConfig+0x16c>
 800edda:	4b7b      	ldr	r3, [pc, #492]	; (800efc8 <UART_SetConfig+0x2e8>)
 800eddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ede0:	f003 030c 	and.w	r3, r3, #12
 800ede4:	2b0c      	cmp	r3, #12
 800ede6:	d82d      	bhi.n	800ee44 <UART_SetConfig+0x164>
 800ede8:	a201      	add	r2, pc, #4	; (adr r2, 800edf0 <UART_SetConfig+0x110>)
 800edea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edee:	bf00      	nop
 800edf0:	0800ee25 	.word	0x0800ee25
 800edf4:	0800ee45 	.word	0x0800ee45
 800edf8:	0800ee45 	.word	0x0800ee45
 800edfc:	0800ee45 	.word	0x0800ee45
 800ee00:	0800ee35 	.word	0x0800ee35
 800ee04:	0800ee45 	.word	0x0800ee45
 800ee08:	0800ee45 	.word	0x0800ee45
 800ee0c:	0800ee45 	.word	0x0800ee45
 800ee10:	0800ee2d 	.word	0x0800ee2d
 800ee14:	0800ee45 	.word	0x0800ee45
 800ee18:	0800ee45 	.word	0x0800ee45
 800ee1c:	0800ee45 	.word	0x0800ee45
 800ee20:	0800ee3d 	.word	0x0800ee3d
 800ee24:	2300      	movs	r3, #0
 800ee26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee2a:	e098      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ee2c:	2302      	movs	r3, #2
 800ee2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee32:	e094      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ee34:	2304      	movs	r3, #4
 800ee36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee3a:	e090      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ee3c:	2308      	movs	r3, #8
 800ee3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee42:	e08c      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ee44:	2310      	movs	r3, #16
 800ee46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee4a:	e088      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	4a5f      	ldr	r2, [pc, #380]	; (800efd0 <UART_SetConfig+0x2f0>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d125      	bne.n	800eea2 <UART_SetConfig+0x1c2>
 800ee56:	4b5c      	ldr	r3, [pc, #368]	; (800efc8 <UART_SetConfig+0x2e8>)
 800ee58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee60:	2b30      	cmp	r3, #48	; 0x30
 800ee62:	d016      	beq.n	800ee92 <UART_SetConfig+0x1b2>
 800ee64:	2b30      	cmp	r3, #48	; 0x30
 800ee66:	d818      	bhi.n	800ee9a <UART_SetConfig+0x1ba>
 800ee68:	2b20      	cmp	r3, #32
 800ee6a:	d00a      	beq.n	800ee82 <UART_SetConfig+0x1a2>
 800ee6c:	2b20      	cmp	r3, #32
 800ee6e:	d814      	bhi.n	800ee9a <UART_SetConfig+0x1ba>
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d002      	beq.n	800ee7a <UART_SetConfig+0x19a>
 800ee74:	2b10      	cmp	r3, #16
 800ee76:	d008      	beq.n	800ee8a <UART_SetConfig+0x1aa>
 800ee78:	e00f      	b.n	800ee9a <UART_SetConfig+0x1ba>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee80:	e06d      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ee82:	2302      	movs	r3, #2
 800ee84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee88:	e069      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ee8a:	2304      	movs	r3, #4
 800ee8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee90:	e065      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ee92:	2308      	movs	r3, #8
 800ee94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee98:	e061      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ee9a:	2310      	movs	r3, #16
 800ee9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eea0:	e05d      	b.n	800ef5e <UART_SetConfig+0x27e>
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4a4b      	ldr	r2, [pc, #300]	; (800efd4 <UART_SetConfig+0x2f4>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d125      	bne.n	800eef8 <UART_SetConfig+0x218>
 800eeac:	4b46      	ldr	r3, [pc, #280]	; (800efc8 <UART_SetConfig+0x2e8>)
 800eeae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eeb6:	2bc0      	cmp	r3, #192	; 0xc0
 800eeb8:	d016      	beq.n	800eee8 <UART_SetConfig+0x208>
 800eeba:	2bc0      	cmp	r3, #192	; 0xc0
 800eebc:	d818      	bhi.n	800eef0 <UART_SetConfig+0x210>
 800eebe:	2b80      	cmp	r3, #128	; 0x80
 800eec0:	d00a      	beq.n	800eed8 <UART_SetConfig+0x1f8>
 800eec2:	2b80      	cmp	r3, #128	; 0x80
 800eec4:	d814      	bhi.n	800eef0 <UART_SetConfig+0x210>
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d002      	beq.n	800eed0 <UART_SetConfig+0x1f0>
 800eeca:	2b40      	cmp	r3, #64	; 0x40
 800eecc:	d008      	beq.n	800eee0 <UART_SetConfig+0x200>
 800eece:	e00f      	b.n	800eef0 <UART_SetConfig+0x210>
 800eed0:	2300      	movs	r3, #0
 800eed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eed6:	e042      	b.n	800ef5e <UART_SetConfig+0x27e>
 800eed8:	2302      	movs	r3, #2
 800eeda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eede:	e03e      	b.n	800ef5e <UART_SetConfig+0x27e>
 800eee0:	2304      	movs	r3, #4
 800eee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eee6:	e03a      	b.n	800ef5e <UART_SetConfig+0x27e>
 800eee8:	2308      	movs	r3, #8
 800eeea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eeee:	e036      	b.n	800ef5e <UART_SetConfig+0x27e>
 800eef0:	2310      	movs	r3, #16
 800eef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eef6:	e032      	b.n	800ef5e <UART_SetConfig+0x27e>
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a30      	ldr	r2, [pc, #192]	; (800efc0 <UART_SetConfig+0x2e0>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d12a      	bne.n	800ef58 <UART_SetConfig+0x278>
 800ef02:	4b31      	ldr	r3, [pc, #196]	; (800efc8 <UART_SetConfig+0x2e8>)
 800ef04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ef0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ef10:	d01a      	beq.n	800ef48 <UART_SetConfig+0x268>
 800ef12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ef16:	d81b      	bhi.n	800ef50 <UART_SetConfig+0x270>
 800ef18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef1c:	d00c      	beq.n	800ef38 <UART_SetConfig+0x258>
 800ef1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef22:	d815      	bhi.n	800ef50 <UART_SetConfig+0x270>
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d003      	beq.n	800ef30 <UART_SetConfig+0x250>
 800ef28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef2c:	d008      	beq.n	800ef40 <UART_SetConfig+0x260>
 800ef2e:	e00f      	b.n	800ef50 <UART_SetConfig+0x270>
 800ef30:	2300      	movs	r3, #0
 800ef32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef36:	e012      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ef38:	2302      	movs	r3, #2
 800ef3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef3e:	e00e      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ef40:	2304      	movs	r3, #4
 800ef42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef46:	e00a      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ef48:	2308      	movs	r3, #8
 800ef4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef4e:	e006      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ef50:	2310      	movs	r3, #16
 800ef52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef56:	e002      	b.n	800ef5e <UART_SetConfig+0x27e>
 800ef58:	2310      	movs	r3, #16
 800ef5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a17      	ldr	r2, [pc, #92]	; (800efc0 <UART_SetConfig+0x2e0>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	f040 80a8 	bne.w	800f0ba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef6e:	2b08      	cmp	r3, #8
 800ef70:	d834      	bhi.n	800efdc <UART_SetConfig+0x2fc>
 800ef72:	a201      	add	r2, pc, #4	; (adr r2, 800ef78 <UART_SetConfig+0x298>)
 800ef74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef78:	0800ef9d 	.word	0x0800ef9d
 800ef7c:	0800efdd 	.word	0x0800efdd
 800ef80:	0800efa5 	.word	0x0800efa5
 800ef84:	0800efdd 	.word	0x0800efdd
 800ef88:	0800efab 	.word	0x0800efab
 800ef8c:	0800efdd 	.word	0x0800efdd
 800ef90:	0800efdd 	.word	0x0800efdd
 800ef94:	0800efdd 	.word	0x0800efdd
 800ef98:	0800efb3 	.word	0x0800efb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef9c:	f7fd f90c 	bl	800c1b8 <HAL_RCC_GetPCLK1Freq>
 800efa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800efa2:	e021      	b.n	800efe8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800efa4:	4b0c      	ldr	r3, [pc, #48]	; (800efd8 <UART_SetConfig+0x2f8>)
 800efa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800efa8:	e01e      	b.n	800efe8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800efaa:	f7fd f897 	bl	800c0dc <HAL_RCC_GetSysClockFreq>
 800efae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800efb0:	e01a      	b.n	800efe8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800efb8:	e016      	b.n	800efe8 <UART_SetConfig+0x308>
 800efba:	bf00      	nop
 800efbc:	cfff69f3 	.word	0xcfff69f3
 800efc0:	40008000 	.word	0x40008000
 800efc4:	40013800 	.word	0x40013800
 800efc8:	40021000 	.word	0x40021000
 800efcc:	40004400 	.word	0x40004400
 800efd0:	40004800 	.word	0x40004800
 800efd4:	40004c00 	.word	0x40004c00
 800efd8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800efdc:	2300      	movs	r3, #0
 800efde:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800efe0:	2301      	movs	r3, #1
 800efe2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800efe6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efea:	2b00      	cmp	r3, #0
 800efec:	f000 812a 	beq.w	800f244 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff4:	4a9e      	ldr	r2, [pc, #632]	; (800f270 <UART_SetConfig+0x590>)
 800eff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800effa:	461a      	mov	r2, r3
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	fbb3 f3f2 	udiv	r3, r3, r2
 800f002:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	685a      	ldr	r2, [r3, #4]
 800f008:	4613      	mov	r3, r2
 800f00a:	005b      	lsls	r3, r3, #1
 800f00c:	4413      	add	r3, r2
 800f00e:	69ba      	ldr	r2, [r7, #24]
 800f010:	429a      	cmp	r2, r3
 800f012:	d305      	bcc.n	800f020 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f01a:	69ba      	ldr	r2, [r7, #24]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d903      	bls.n	800f028 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800f020:	2301      	movs	r3, #1
 800f022:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f026:	e10d      	b.n	800f244 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	2200      	movs	r2, #0
 800f02c:	60bb      	str	r3, [r7, #8]
 800f02e:	60fa      	str	r2, [r7, #12]
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f034:	4a8e      	ldr	r2, [pc, #568]	; (800f270 <UART_SetConfig+0x590>)
 800f036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	2200      	movs	r2, #0
 800f03e:	603b      	str	r3, [r7, #0]
 800f040:	607a      	str	r2, [r7, #4]
 800f042:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f046:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f04a:	f7f1 fe45 	bl	8000cd8 <__aeabi_uldivmod>
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	4610      	mov	r0, r2
 800f054:	4619      	mov	r1, r3
 800f056:	f04f 0200 	mov.w	r2, #0
 800f05a:	f04f 0300 	mov.w	r3, #0
 800f05e:	020b      	lsls	r3, r1, #8
 800f060:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f064:	0202      	lsls	r2, r0, #8
 800f066:	6979      	ldr	r1, [r7, #20]
 800f068:	6849      	ldr	r1, [r1, #4]
 800f06a:	0849      	lsrs	r1, r1, #1
 800f06c:	2000      	movs	r0, #0
 800f06e:	460c      	mov	r4, r1
 800f070:	4605      	mov	r5, r0
 800f072:	eb12 0804 	adds.w	r8, r2, r4
 800f076:	eb43 0905 	adc.w	r9, r3, r5
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	469a      	mov	sl, r3
 800f082:	4693      	mov	fp, r2
 800f084:	4652      	mov	r2, sl
 800f086:	465b      	mov	r3, fp
 800f088:	4640      	mov	r0, r8
 800f08a:	4649      	mov	r1, r9
 800f08c:	f7f1 fe24 	bl	8000cd8 <__aeabi_uldivmod>
 800f090:	4602      	mov	r2, r0
 800f092:	460b      	mov	r3, r1
 800f094:	4613      	mov	r3, r2
 800f096:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f098:	6a3b      	ldr	r3, [r7, #32]
 800f09a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f09e:	d308      	bcc.n	800f0b2 <UART_SetConfig+0x3d2>
 800f0a0:	6a3b      	ldr	r3, [r7, #32]
 800f0a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0a6:	d204      	bcs.n	800f0b2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	6a3a      	ldr	r2, [r7, #32]
 800f0ae:	60da      	str	r2, [r3, #12]
 800f0b0:	e0c8      	b.n	800f244 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f0b8:	e0c4      	b.n	800f244 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	69db      	ldr	r3, [r3, #28]
 800f0be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0c2:	d167      	bne.n	800f194 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800f0c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f0c8:	2b08      	cmp	r3, #8
 800f0ca:	d828      	bhi.n	800f11e <UART_SetConfig+0x43e>
 800f0cc:	a201      	add	r2, pc, #4	; (adr r2, 800f0d4 <UART_SetConfig+0x3f4>)
 800f0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d2:	bf00      	nop
 800f0d4:	0800f0f9 	.word	0x0800f0f9
 800f0d8:	0800f101 	.word	0x0800f101
 800f0dc:	0800f109 	.word	0x0800f109
 800f0e0:	0800f11f 	.word	0x0800f11f
 800f0e4:	0800f10f 	.word	0x0800f10f
 800f0e8:	0800f11f 	.word	0x0800f11f
 800f0ec:	0800f11f 	.word	0x0800f11f
 800f0f0:	0800f11f 	.word	0x0800f11f
 800f0f4:	0800f117 	.word	0x0800f117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0f8:	f7fd f85e 	bl	800c1b8 <HAL_RCC_GetPCLK1Freq>
 800f0fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0fe:	e014      	b.n	800f12a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f100:	f7fd f870 	bl	800c1e4 <HAL_RCC_GetPCLK2Freq>
 800f104:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f106:	e010      	b.n	800f12a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f108:	4b5a      	ldr	r3, [pc, #360]	; (800f274 <UART_SetConfig+0x594>)
 800f10a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f10c:	e00d      	b.n	800f12a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f10e:	f7fc ffe5 	bl	800c0dc <HAL_RCC_GetSysClockFreq>
 800f112:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f114:	e009      	b.n	800f12a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f11a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f11c:	e005      	b.n	800f12a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800f11e:	2300      	movs	r3, #0
 800f120:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f122:	2301      	movs	r3, #1
 800f124:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f128:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f000 8089 	beq.w	800f244 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f136:	4a4e      	ldr	r2, [pc, #312]	; (800f270 <UART_SetConfig+0x590>)
 800f138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f13c:	461a      	mov	r2, r3
 800f13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f140:	fbb3 f3f2 	udiv	r3, r3, r2
 800f144:	005a      	lsls	r2, r3, #1
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	085b      	lsrs	r3, r3, #1
 800f14c:	441a      	add	r2, r3
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	fbb2 f3f3 	udiv	r3, r2, r3
 800f156:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f158:	6a3b      	ldr	r3, [r7, #32]
 800f15a:	2b0f      	cmp	r3, #15
 800f15c:	d916      	bls.n	800f18c <UART_SetConfig+0x4ac>
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f164:	d212      	bcs.n	800f18c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	b29b      	uxth	r3, r3
 800f16a:	f023 030f 	bic.w	r3, r3, #15
 800f16e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	085b      	lsrs	r3, r3, #1
 800f174:	b29b      	uxth	r3, r3
 800f176:	f003 0307 	and.w	r3, r3, #7
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	8bfb      	ldrh	r3, [r7, #30]
 800f17e:	4313      	orrs	r3, r2
 800f180:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	8bfa      	ldrh	r2, [r7, #30]
 800f188:	60da      	str	r2, [r3, #12]
 800f18a:	e05b      	b.n	800f244 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f18c:	2301      	movs	r3, #1
 800f18e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f192:	e057      	b.n	800f244 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f198:	2b08      	cmp	r3, #8
 800f19a:	d828      	bhi.n	800f1ee <UART_SetConfig+0x50e>
 800f19c:	a201      	add	r2, pc, #4	; (adr r2, 800f1a4 <UART_SetConfig+0x4c4>)
 800f19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a2:	bf00      	nop
 800f1a4:	0800f1c9 	.word	0x0800f1c9
 800f1a8:	0800f1d1 	.word	0x0800f1d1
 800f1ac:	0800f1d9 	.word	0x0800f1d9
 800f1b0:	0800f1ef 	.word	0x0800f1ef
 800f1b4:	0800f1df 	.word	0x0800f1df
 800f1b8:	0800f1ef 	.word	0x0800f1ef
 800f1bc:	0800f1ef 	.word	0x0800f1ef
 800f1c0:	0800f1ef 	.word	0x0800f1ef
 800f1c4:	0800f1e7 	.word	0x0800f1e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1c8:	f7fc fff6 	bl	800c1b8 <HAL_RCC_GetPCLK1Freq>
 800f1cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f1ce:	e014      	b.n	800f1fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1d0:	f7fd f808 	bl	800c1e4 <HAL_RCC_GetPCLK2Freq>
 800f1d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f1d6:	e010      	b.n	800f1fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f1d8:	4b26      	ldr	r3, [pc, #152]	; (800f274 <UART_SetConfig+0x594>)
 800f1da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f1dc:	e00d      	b.n	800f1fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f1de:	f7fc ff7d 	bl	800c0dc <HAL_RCC_GetSysClockFreq>
 800f1e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f1e4:	e009      	b.n	800f1fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f1ec:	e005      	b.n	800f1fa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f1f8:	bf00      	nop
    }

    if (pclk != 0U)
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d021      	beq.n	800f244 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f204:	4a1a      	ldr	r2, [pc, #104]	; (800f270 <UART_SetConfig+0x590>)
 800f206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f20a:	461a      	mov	r2, r3
 800f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	085b      	lsrs	r3, r3, #1
 800f218:	441a      	add	r2, r3
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f222:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f224:	6a3b      	ldr	r3, [r7, #32]
 800f226:	2b0f      	cmp	r3, #15
 800f228:	d909      	bls.n	800f23e <UART_SetConfig+0x55e>
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f230:	d205      	bcs.n	800f23e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f232:	6a3b      	ldr	r3, [r7, #32]
 800f234:	b29a      	uxth	r2, r3
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	60da      	str	r2, [r3, #12]
 800f23c:	e002      	b.n	800f244 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f23e:	2301      	movs	r3, #1
 800f240:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	2201      	movs	r2, #1
 800f248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	2201      	movs	r2, #1
 800f250:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	2200      	movs	r2, #0
 800f258:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	2200      	movs	r2, #0
 800f25e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f260:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f264:	4618      	mov	r0, r3
 800f266:	3730      	adds	r7, #48	; 0x30
 800f268:	46bd      	mov	sp, r7
 800f26a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f26e:	bf00      	nop
 800f270:	0801ad08 	.word	0x0801ad08
 800f274:	00f42400 	.word	0x00f42400

0800f278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f284:	f003 0308 	and.w	r3, r3, #8
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00a      	beq.n	800f2a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	430a      	orrs	r2, r1
 800f2a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a6:	f003 0301 	and.w	r3, r3, #1
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00a      	beq.n	800f2c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	430a      	orrs	r2, r1
 800f2c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c8:	f003 0302 	and.w	r3, r3, #2
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00a      	beq.n	800f2e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	430a      	orrs	r2, r1
 800f2e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ea:	f003 0304 	and.w	r3, r3, #4
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00a      	beq.n	800f308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	430a      	orrs	r2, r1
 800f306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f30c:	f003 0310 	and.w	r3, r3, #16
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00a      	beq.n	800f32a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	430a      	orrs	r2, r1
 800f328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f32e:	f003 0320 	and.w	r3, r3, #32
 800f332:	2b00      	cmp	r3, #0
 800f334:	d00a      	beq.n	800f34c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	430a      	orrs	r2, r1
 800f34a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f354:	2b00      	cmp	r3, #0
 800f356:	d01a      	beq.n	800f38e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	430a      	orrs	r2, r1
 800f36c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f376:	d10a      	bne.n	800f38e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	430a      	orrs	r2, r1
 800f38c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f396:	2b00      	cmp	r3, #0
 800f398:	d00a      	beq.n	800f3b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	430a      	orrs	r2, r1
 800f3ae:	605a      	str	r2, [r3, #4]
  }
}
 800f3b0:	bf00      	nop
 800f3b2:	370c      	adds	r7, #12
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b098      	sub	sp, #96	; 0x60
 800f3c0:	af02      	add	r7, sp, #8
 800f3c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f3cc:	f7f6 fd94 	bl	8005ef8 <HAL_GetTick>
 800f3d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f003 0308 	and.w	r3, r3, #8
 800f3dc:	2b08      	cmp	r3, #8
 800f3de:	d12f      	bne.n	800f440 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 f88e 	bl	800f510 <UART_WaitOnFlagUntilTimeout>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d022      	beq.n	800f440 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f402:	e853 3f00 	ldrex	r3, [r3]
 800f406:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f40a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f40e:	653b      	str	r3, [r7, #80]	; 0x50
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	461a      	mov	r2, r3
 800f416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f418:	647b      	str	r3, [r7, #68]	; 0x44
 800f41a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f41e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f420:	e841 2300 	strex	r3, r2, [r1]
 800f424:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1e6      	bne.n	800f3fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2220      	movs	r2, #32
 800f430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f43c:	2303      	movs	r3, #3
 800f43e:	e063      	b.n	800f508 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f003 0304 	and.w	r3, r3, #4
 800f44a:	2b04      	cmp	r3, #4
 800f44c:	d149      	bne.n	800f4e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f44e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f456:	2200      	movs	r2, #0
 800f458:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 f857 	bl	800f510 <UART_WaitOnFlagUntilTimeout>
 800f462:	4603      	mov	r3, r0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d03c      	beq.n	800f4e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f470:	e853 3f00 	ldrex	r3, [r3]
 800f474:	623b      	str	r3, [r7, #32]
   return(result);
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f47c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	461a      	mov	r2, r3
 800f484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f486:	633b      	str	r3, [r7, #48]	; 0x30
 800f488:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f48a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f48e:	e841 2300 	strex	r3, r2, [r1]
 800f492:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	2b00      	cmp	r3, #0
 800f498:	d1e6      	bne.n	800f468 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	3308      	adds	r3, #8
 800f4a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	e853 3f00 	ldrex	r3, [r3]
 800f4a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f023 0301 	bic.w	r3, r3, #1
 800f4b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	3308      	adds	r3, #8
 800f4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4ba:	61fa      	str	r2, [r7, #28]
 800f4bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4be:	69b9      	ldr	r1, [r7, #24]
 800f4c0:	69fa      	ldr	r2, [r7, #28]
 800f4c2:	e841 2300 	strex	r3, r2, [r1]
 800f4c6:	617b      	str	r3, [r7, #20]
   return(result);
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d1e5      	bne.n	800f49a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2220      	movs	r2, #32
 800f4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4de:	2303      	movs	r3, #3
 800f4e0:	e012      	b.n	800f508 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2220      	movs	r2, #32
 800f4e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2220      	movs	r2, #32
 800f4ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f506:	2300      	movs	r3, #0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3758      	adds	r7, #88	; 0x58
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	603b      	str	r3, [r7, #0]
 800f51c:	4613      	mov	r3, r2
 800f51e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f520:	e04f      	b.n	800f5c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f528:	d04b      	beq.n	800f5c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f52a:	f7f6 fce5 	bl	8005ef8 <HAL_GetTick>
 800f52e:	4602      	mov	r2, r0
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	1ad3      	subs	r3, r2, r3
 800f534:	69ba      	ldr	r2, [r7, #24]
 800f536:	429a      	cmp	r2, r3
 800f538:	d302      	bcc.n	800f540 <UART_WaitOnFlagUntilTimeout+0x30>
 800f53a:	69bb      	ldr	r3, [r7, #24]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d101      	bne.n	800f544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f540:	2303      	movs	r3, #3
 800f542:	e04e      	b.n	800f5e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f003 0304 	and.w	r3, r3, #4
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d037      	beq.n	800f5c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2b80      	cmp	r3, #128	; 0x80
 800f556:	d034      	beq.n	800f5c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	2b40      	cmp	r3, #64	; 0x40
 800f55c:	d031      	beq.n	800f5c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	69db      	ldr	r3, [r3, #28]
 800f564:	f003 0308 	and.w	r3, r3, #8
 800f568:	2b08      	cmp	r3, #8
 800f56a:	d110      	bne.n	800f58e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2208      	movs	r2, #8
 800f572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f000 f838 	bl	800f5ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2208      	movs	r2, #8
 800f57e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f58a:	2301      	movs	r3, #1
 800f58c:	e029      	b.n	800f5e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	69db      	ldr	r3, [r3, #28]
 800f594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f59c:	d111      	bne.n	800f5c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f000 f81e 	bl	800f5ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2220      	movs	r2, #32
 800f5b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f5be:	2303      	movs	r3, #3
 800f5c0:	e00f      	b.n	800f5e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	69da      	ldr	r2, [r3, #28]
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	68ba      	ldr	r2, [r7, #8]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	bf0c      	ite	eq
 800f5d2:	2301      	moveq	r3, #1
 800f5d4:	2300      	movne	r3, #0
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	461a      	mov	r2, r3
 800f5da:	79fb      	ldrb	r3, [r7, #7]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d0a0      	beq.n	800f522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5e0:	2300      	movs	r3, #0
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f5ea:	b480      	push	{r7}
 800f5ec:	b095      	sub	sp, #84	; 0x54
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5fa:	e853 3f00 	ldrex	r3, [r3]
 800f5fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f606:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	461a      	mov	r2, r3
 800f60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f610:	643b      	str	r3, [r7, #64]	; 0x40
 800f612:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f618:	e841 2300 	strex	r3, r2, [r1]
 800f61c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1e6      	bne.n	800f5f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3308      	adds	r3, #8
 800f62a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	e853 3f00 	ldrex	r3, [r3]
 800f632:	61fb      	str	r3, [r7, #28]
   return(result);
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f63a:	f023 0301 	bic.w	r3, r3, #1
 800f63e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	3308      	adds	r3, #8
 800f646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f648:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f64a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f64e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f650:	e841 2300 	strex	r3, r2, [r1]
 800f654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1e3      	bne.n	800f624 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f660:	2b01      	cmp	r3, #1
 800f662:	d118      	bne.n	800f696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	e853 3f00 	ldrex	r3, [r3]
 800f670:	60bb      	str	r3, [r7, #8]
   return(result);
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	f023 0310 	bic.w	r3, r3, #16
 800f678:	647b      	str	r3, [r7, #68]	; 0x44
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	461a      	mov	r2, r3
 800f680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f682:	61bb      	str	r3, [r7, #24]
 800f684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f686:	6979      	ldr	r1, [r7, #20]
 800f688:	69ba      	ldr	r2, [r7, #24]
 800f68a:	e841 2300 	strex	r3, r2, [r1]
 800f68e:	613b      	str	r3, [r7, #16]
   return(result);
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1e6      	bne.n	800f664 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2220      	movs	r2, #32
 800f69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f6aa:	bf00      	nop
 800f6ac:	3754      	adds	r7, #84	; 0x54
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f6b6:	b480      	push	{r7}
 800f6b8:	b085      	sub	sp, #20
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d101      	bne.n	800f6cc <HAL_UARTEx_DisableFifoMode+0x16>
 800f6c8:	2302      	movs	r3, #2
 800f6ca:	e027      	b.n	800f71c <HAL_UARTEx_DisableFifoMode+0x66>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2224      	movs	r2, #36	; 0x24
 800f6d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	681a      	ldr	r2, [r3, #0]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f022 0201 	bic.w	r2, r2, #1
 800f6f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f6fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2200      	movs	r2, #0
 800f700:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2220      	movs	r2, #32
 800f70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f71a:	2300      	movs	r3, #0
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3714      	adds	r7, #20
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d101      	bne.n	800f740 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f73c:	2302      	movs	r3, #2
 800f73e:	e02d      	b.n	800f79c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2201      	movs	r2, #1
 800f744:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2224      	movs	r2, #36	; 0x24
 800f74c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f022 0201 	bic.w	r2, r2, #1
 800f766:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	430a      	orrs	r2, r1
 800f77a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 f84f 	bl	800f820 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2220      	movs	r2, #32
 800f78e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d101      	bne.n	800f7bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	e02d      	b.n	800f818 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2224      	movs	r2, #36	; 0x24
 800f7c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f022 0201 	bic.w	r2, r2, #1
 800f7e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	683a      	ldr	r2, [r7, #0]
 800f7f4:	430a      	orrs	r2, r1
 800f7f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 f811 	bl	800f820 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2220      	movs	r2, #32
 800f80a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3710      	adds	r7, #16
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f820:	b480      	push	{r7}
 800f822:	b085      	sub	sp, #20
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d108      	bne.n	800f842 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2201      	movs	r2, #1
 800f834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2201      	movs	r2, #1
 800f83c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f840:	e031      	b.n	800f8a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f842:	2308      	movs	r3, #8
 800f844:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f846:	2308      	movs	r3, #8
 800f848:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	0e5b      	lsrs	r3, r3, #25
 800f852:	b2db      	uxtb	r3, r3
 800f854:	f003 0307 	and.w	r3, r3, #7
 800f858:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	0f5b      	lsrs	r3, r3, #29
 800f862:	b2db      	uxtb	r3, r3
 800f864:	f003 0307 	and.w	r3, r3, #7
 800f868:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f86a:	7bbb      	ldrb	r3, [r7, #14]
 800f86c:	7b3a      	ldrb	r2, [r7, #12]
 800f86e:	4911      	ldr	r1, [pc, #68]	; (800f8b4 <UARTEx_SetNbDataToProcess+0x94>)
 800f870:	5c8a      	ldrb	r2, [r1, r2]
 800f872:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f876:	7b3a      	ldrb	r2, [r7, #12]
 800f878:	490f      	ldr	r1, [pc, #60]	; (800f8b8 <UARTEx_SetNbDataToProcess+0x98>)
 800f87a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f87c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f880:	b29a      	uxth	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f888:	7bfb      	ldrb	r3, [r7, #15]
 800f88a:	7b7a      	ldrb	r2, [r7, #13]
 800f88c:	4909      	ldr	r1, [pc, #36]	; (800f8b4 <UARTEx_SetNbDataToProcess+0x94>)
 800f88e:	5c8a      	ldrb	r2, [r1, r2]
 800f890:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f894:	7b7a      	ldrb	r2, [r7, #13]
 800f896:	4908      	ldr	r1, [pc, #32]	; (800f8b8 <UARTEx_SetNbDataToProcess+0x98>)
 800f898:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f89a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f8a6:	bf00      	nop
 800f8a8:	3714      	adds	r7, #20
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	0801ad20 	.word	0x0801ad20
 800f8b8:	0801ad28 	.word	0x0801ad28

0800f8bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b085      	sub	sp, #20
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f8cc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f8d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	b29a      	uxth	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3714      	adds	r7, #20
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f8ea:	b480      	push	{r7}
 800f8ec:	b085      	sub	sp, #20
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f8f2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f8f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	b29b      	uxth	r3, r3
 800f904:	43db      	mvns	r3, r3
 800f906:	b29b      	uxth	r3, r3
 800f908:	4013      	ands	r3, r2
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f912:	2300      	movs	r3, #0
}
 800f914:	4618      	mov	r0, r3
 800f916:	3714      	adds	r7, #20
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	1d3b      	adds	r3, r7, #4
 800f92a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2201      	movs	r2, #1
 800f932:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2200      	movs	r2, #0
 800f93a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2200      	movs	r2, #0
 800f942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2200      	movs	r2, #0
 800f94a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3714      	adds	r7, #20
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b09d      	sub	sp, #116	; 0x74
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f966:	2300      	movs	r3, #0
 800f968:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f96c:	687a      	ldr	r2, [r7, #4]
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	4413      	add	r3, r2
 800f976:	881b      	ldrh	r3, [r3, #0]
 800f978:	b29b      	uxth	r3, r3
 800f97a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f982:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	78db      	ldrb	r3, [r3, #3]
 800f98a:	2b03      	cmp	r3, #3
 800f98c:	d81f      	bhi.n	800f9ce <USB_ActivateEndpoint+0x72>
 800f98e:	a201      	add	r2, pc, #4	; (adr r2, 800f994 <USB_ActivateEndpoint+0x38>)
 800f990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f994:	0800f9a5 	.word	0x0800f9a5
 800f998:	0800f9c1 	.word	0x0800f9c1
 800f99c:	0800f9d7 	.word	0x0800f9d7
 800f9a0:	0800f9b3 	.word	0x0800f9b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f9a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f9a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f9ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f9b0:	e012      	b.n	800f9d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f9b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f9b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f9ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f9be:	e00b      	b.n	800f9d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f9c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f9c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f9c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f9cc:	e004      	b.n	800f9d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800f9d4:	e000      	b.n	800f9d8 <USB_ActivateEndpoint+0x7c>
      break;
 800f9d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	441a      	add	r2, r3
 800f9e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f9e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	4413      	add	r3, r2
 800fa04:	881b      	ldrh	r3, [r3, #0]
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	b21b      	sxth	r3, r3
 800fa0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa12:	b21a      	sxth	r2, r3
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	b21b      	sxth	r3, r3
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	b21b      	sxth	r3, r3
 800fa1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	441a      	add	r2, r3
 800fa2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800fa30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	7b1b      	ldrb	r3, [r3, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f040 8178 	bne.w	800fd3e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	785b      	ldrb	r3, [r3, #1]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f000 8084 	beq.w	800fb60 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	61bb      	str	r3, [r7, #24]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	461a      	mov	r2, r3
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	4413      	add	r3, r2
 800fa6a:	61bb      	str	r3, [r7, #24]
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	00da      	lsls	r2, r3, #3
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	4413      	add	r3, r2
 800fa76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa7a:	617b      	str	r3, [r7, #20]
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	88db      	ldrh	r3, [r3, #6]
 800fa80:	085b      	lsrs	r3, r3, #1
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	005b      	lsls	r3, r3, #1
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	4413      	add	r3, r2
 800fa96:	881b      	ldrh	r3, [r3, #0]
 800fa98:	827b      	strh	r3, [r7, #18]
 800fa9a:	8a7b      	ldrh	r3, [r7, #18]
 800fa9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d01b      	beq.n	800fadc <USB_ActivateEndpoint+0x180>
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	4413      	add	r3, r2
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faba:	823b      	strh	r3, [r7, #16]
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	441a      	add	r2, r3
 800fac6:	8a3b      	ldrh	r3, [r7, #16]
 800fac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800facc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fad8:	b29b      	uxth	r3, r3
 800fada:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	78db      	ldrb	r3, [r3, #3]
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d020      	beq.n	800fb26 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	4413      	add	r3, r2
 800faee:	881b      	ldrh	r3, [r3, #0]
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fafa:	81bb      	strh	r3, [r7, #12]
 800fafc:	89bb      	ldrh	r3, [r7, #12]
 800fafe:	f083 0320 	eor.w	r3, r3, #32
 800fb02:	81bb      	strh	r3, [r7, #12]
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	009b      	lsls	r3, r3, #2
 800fb0c:	441a      	add	r2, r3
 800fb0e:	89bb      	ldrh	r3, [r7, #12]
 800fb10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	8013      	strh	r3, [r2, #0]
 800fb24:	e2d5      	b.n	80100d2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fb26:	687a      	ldr	r2, [r7, #4]
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	009b      	lsls	r3, r3, #2
 800fb2e:	4413      	add	r3, r2
 800fb30:	881b      	ldrh	r3, [r3, #0]
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb3c:	81fb      	strh	r3, [r7, #14]
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	441a      	add	r2, r3
 800fb48:	89fb      	ldrh	r3, [r7, #14]
 800fb4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	8013      	strh	r3, [r2, #0]
 800fb5e:	e2b8      	b.n	80100d2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	633b      	str	r3, [r7, #48]	; 0x30
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb70:	4413      	add	r3, r2
 800fb72:	633b      	str	r3, [r7, #48]	; 0x30
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	00da      	lsls	r2, r3, #3
 800fb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb7c:	4413      	add	r3, r2
 800fb7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fb82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	88db      	ldrh	r3, [r3, #6]
 800fb88:	085b      	lsrs	r3, r3, #1
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	005b      	lsls	r3, r3, #1
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb92:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	461a      	mov	r2, r3
 800fba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba4:	4413      	add	r3, r2
 800fba6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	00da      	lsls	r2, r3, #3
 800fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb0:	4413      	add	r3, r2
 800fbb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fbb6:	627b      	str	r3, [r7, #36]	; 0x24
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	801a      	strh	r2, [r3, #0]
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	691b      	ldr	r3, [r3, #16]
 800fbcc:	2b3e      	cmp	r3, #62	; 0x3e
 800fbce:	d91d      	bls.n	800fc0c <USB_ActivateEndpoint+0x2b0>
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	691b      	ldr	r3, [r3, #16]
 800fbd4:	095b      	lsrs	r3, r3, #5
 800fbd6:	66bb      	str	r3, [r7, #104]	; 0x68
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	f003 031f 	and.w	r3, r3, #31
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d102      	bne.n	800fbea <USB_ActivateEndpoint+0x28e>
 800fbe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	66bb      	str	r3, [r7, #104]	; 0x68
 800fbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbec:	881b      	ldrh	r3, [r3, #0]
 800fbee:	b29a      	uxth	r2, r3
 800fbf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	029b      	lsls	r3, r3, #10
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	801a      	strh	r2, [r3, #0]
 800fc0a:	e026      	b.n	800fc5a <USB_ActivateEndpoint+0x2fe>
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	691b      	ldr	r3, [r3, #16]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d10a      	bne.n	800fc2a <USB_ActivateEndpoint+0x2ce>
 800fc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc16:	881b      	ldrh	r3, [r3, #0]
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc22:	b29a      	uxth	r2, r3
 800fc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc26:	801a      	strh	r2, [r3, #0]
 800fc28:	e017      	b.n	800fc5a <USB_ActivateEndpoint+0x2fe>
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	085b      	lsrs	r3, r3, #1
 800fc30:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	691b      	ldr	r3, [r3, #16]
 800fc36:	f003 0301 	and.w	r3, r3, #1
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d002      	beq.n	800fc44 <USB_ActivateEndpoint+0x2e8>
 800fc3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc40:	3301      	adds	r3, #1
 800fc42:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc46:	881b      	ldrh	r3, [r3, #0]
 800fc48:	b29a      	uxth	r2, r3
 800fc4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	029b      	lsls	r3, r3, #10
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	4313      	orrs	r3, r2
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	4413      	add	r3, r2
 800fc64:	881b      	ldrh	r3, [r3, #0]
 800fc66:	847b      	strh	r3, [r7, #34]	; 0x22
 800fc68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d01b      	beq.n	800fcaa <USB_ActivateEndpoint+0x34e>
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	4413      	add	r3, r2
 800fc7c:	881b      	ldrh	r3, [r3, #0]
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc88:	843b      	strh	r3, [r7, #32]
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	441a      	add	r2, r3
 800fc94:	8c3b      	ldrh	r3, [r7, #32]
 800fc96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d124      	bne.n	800fcfc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4413      	add	r3, r2
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcc8:	83bb      	strh	r3, [r7, #28]
 800fcca:	8bbb      	ldrh	r3, [r7, #28]
 800fccc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fcd0:	83bb      	strh	r3, [r7, #28]
 800fcd2:	8bbb      	ldrh	r3, [r7, #28]
 800fcd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fcd8:	83bb      	strh	r3, [r7, #28]
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	441a      	add	r2, r3
 800fce4:	8bbb      	ldrh	r3, [r7, #28]
 800fce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fcea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fcee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	8013      	strh	r3, [r2, #0]
 800fcfa:	e1ea      	b.n	80100d2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	009b      	lsls	r3, r3, #2
 800fd04:	4413      	add	r3, r2
 800fd06:	881b      	ldrh	r3, [r3, #0]
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd12:	83fb      	strh	r3, [r7, #30]
 800fd14:	8bfb      	ldrh	r3, [r7, #30]
 800fd16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fd1a:	83fb      	strh	r3, [r7, #30]
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	441a      	add	r2, r3
 800fd26:	8bfb      	ldrh	r3, [r7, #30]
 800fd28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	8013      	strh	r3, [r2, #0]
 800fd3c:	e1c9      	b.n	80100d2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	78db      	ldrb	r3, [r3, #3]
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d11e      	bne.n	800fd84 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	4413      	add	r3, r2
 800fd50:	881b      	ldrh	r3, [r3, #0]
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd5c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	441a      	add	r2, r3
 800fd6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fd6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd76:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fd7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	8013      	strh	r3, [r2, #0]
 800fd82:	e01d      	b.n	800fdc0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	4413      	add	r3, r2
 800fd8e:	881b      	ldrh	r3, [r3, #0]
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800fd96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	441a      	add	r2, r3
 800fda8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fdac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	461a      	mov	r2, r3
 800fdce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdd0:	4413      	add	r3, r2
 800fdd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	00da      	lsls	r2, r3, #3
 800fdda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fddc:	4413      	add	r3, r2
 800fdde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fde2:	65bb      	str	r3, [r7, #88]	; 0x58
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	891b      	ldrh	r3, [r3, #8]
 800fde8:	085b      	lsrs	r3, r3, #1
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	005b      	lsls	r3, r3, #1
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdf2:	801a      	strh	r2, [r3, #0]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	657b      	str	r3, [r7, #84]	; 0x54
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	461a      	mov	r2, r3
 800fe02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe04:	4413      	add	r3, r2
 800fe06:	657b      	str	r3, [r7, #84]	; 0x54
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	00da      	lsls	r2, r3, #3
 800fe0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe10:	4413      	add	r3, r2
 800fe12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fe16:	653b      	str	r3, [r7, #80]	; 0x50
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	895b      	ldrh	r3, [r3, #10]
 800fe1c:	085b      	lsrs	r3, r3, #1
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	005b      	lsls	r3, r3, #1
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	785b      	ldrb	r3, [r3, #1]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f040 8093 	bne.w	800ff58 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4413      	add	r3, r2
 800fe3c:	881b      	ldrh	r3, [r3, #0]
 800fe3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fe42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d01b      	beq.n	800fe86 <USB_ActivateEndpoint+0x52a>
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	4413      	add	r3, r2
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe64:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	441a      	add	r2, r3
 800fe70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fe72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fe7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	009b      	lsls	r3, r3, #2
 800fe8e:	4413      	add	r3, r2
 800fe90:	881b      	ldrh	r3, [r3, #0]
 800fe92:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fe94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d01b      	beq.n	800fed6 <USB_ActivateEndpoint+0x57a>
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	4413      	add	r3, r2
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	b29b      	uxth	r3, r3
 800feac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800feb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feb4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	441a      	add	r2, r3
 800fec0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800feca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fece:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fed6:	687a      	ldr	r2, [r7, #4]
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4413      	add	r3, r2
 800fee0:	881b      	ldrh	r3, [r3, #0]
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feec:	873b      	strh	r3, [r7, #56]	; 0x38
 800feee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fef0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fef4:	873b      	strh	r3, [r7, #56]	; 0x38
 800fef6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fef8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fefc:	873b      	strh	r3, [r7, #56]	; 0x38
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	441a      	add	r2, r3
 800ff08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ff0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	009b      	lsls	r3, r3, #2
 800ff26:	4413      	add	r3, r2
 800ff28:	881b      	ldrh	r3, [r3, #0]
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff34:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	009b      	lsls	r3, r3, #2
 800ff3e:	441a      	add	r2, r3
 800ff40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	8013      	strh	r3, [r2, #0]
 800ff56:	e0bc      	b.n	80100d2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	4413      	add	r3, r2
 800ff62:	881b      	ldrh	r3, [r3, #0]
 800ff64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ff68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ff6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d01d      	beq.n	800ffb0 <USB_ActivateEndpoint+0x654>
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	4413      	add	r3, r2
 800ff7e:	881b      	ldrh	r3, [r3, #0]
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	441a      	add	r2, r3
 800ff98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ff9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ffa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ffc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ffc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d01d      	beq.n	8010008 <USB_ActivateEndpoint+0x6ac>
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	4413      	add	r3, r2
 800ffd6:	881b      	ldrh	r3, [r3, #0]
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffe2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ffe6:	687a      	ldr	r2, [r7, #4]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	441a      	add	r2, r3
 800fff0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010004:	b29b      	uxth	r3, r3
 8010006:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	78db      	ldrb	r3, [r3, #3]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d024      	beq.n	801005a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	4413      	add	r3, r2
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	b29b      	uxth	r3, r3
 801001e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010026:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801002a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801002e:	f083 0320 	eor.w	r3, r3, #32
 8010032:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	441a      	add	r2, r3
 8010040:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801004c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010054:	b29b      	uxth	r3, r3
 8010056:	8013      	strh	r3, [r2, #0]
 8010058:	e01d      	b.n	8010096 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	4413      	add	r3, r2
 8010064:	881b      	ldrh	r3, [r3, #0]
 8010066:	b29b      	uxth	r3, r3
 8010068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801006c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010070:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	441a      	add	r2, r3
 801007e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801008a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801008e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010092:	b29b      	uxth	r3, r3
 8010094:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	4413      	add	r3, r2
 80100a0:	881b      	ldrh	r3, [r3, #0]
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80100a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	009b      	lsls	r3, r3, #2
 80100b8:	441a      	add	r2, r3
 80100ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80100be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80100d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3774      	adds	r7, #116	; 0x74
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop

080100e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b08d      	sub	sp, #52	; 0x34
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	7b1b      	ldrb	r3, [r3, #12]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f040 808e 	bne.w	8010214 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	785b      	ldrb	r3, [r3, #1]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d044      	beq.n	801018a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	4413      	add	r3, r2
 801010a:	881b      	ldrh	r3, [r3, #0]
 801010c:	81bb      	strh	r3, [r7, #12]
 801010e:	89bb      	ldrh	r3, [r7, #12]
 8010110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010114:	2b00      	cmp	r3, #0
 8010116:	d01b      	beq.n	8010150 <USB_DeactivateEndpoint+0x6c>
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	4413      	add	r3, r2
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	b29b      	uxth	r3, r3
 8010126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801012a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801012e:	817b      	strh	r3, [r7, #10]
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	441a      	add	r2, r3
 801013a:	897b      	ldrh	r3, [r7, #10]
 801013c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801014c:	b29b      	uxth	r3, r3
 801014e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	4413      	add	r3, r2
 801015a:	881b      	ldrh	r3, [r3, #0]
 801015c:	b29b      	uxth	r3, r3
 801015e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010166:	813b      	strh	r3, [r7, #8]
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	441a      	add	r2, r3
 8010172:	893b      	ldrh	r3, [r7, #8]
 8010174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801017c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010184:	b29b      	uxth	r3, r3
 8010186:	8013      	strh	r3, [r2, #0]
 8010188:	e192      	b.n	80104b0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	4413      	add	r3, r2
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	827b      	strh	r3, [r7, #18]
 8010198:	8a7b      	ldrh	r3, [r7, #18]
 801019a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d01b      	beq.n	80101da <USB_DeactivateEndpoint+0xf6>
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	4413      	add	r3, r2
 80101ac:	881b      	ldrh	r3, [r3, #0]
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80101b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101b8:	823b      	strh	r3, [r7, #16]
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	441a      	add	r2, r3
 80101c4:	8a3b      	ldrh	r3, [r7, #16]
 80101c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80101d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80101ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101f0:	81fb      	strh	r3, [r7, #14]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	441a      	add	r2, r3
 80101fc:	89fb      	ldrh	r3, [r7, #14]
 80101fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801020a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801020e:	b29b      	uxth	r3, r3
 8010210:	8013      	strh	r3, [r2, #0]
 8010212:	e14d      	b.n	80104b0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	785b      	ldrb	r3, [r3, #1]
 8010218:	2b00      	cmp	r3, #0
 801021a:	f040 80a5 	bne.w	8010368 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801021e:	687a      	ldr	r2, [r7, #4]
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	4413      	add	r3, r2
 8010228:	881b      	ldrh	r3, [r3, #0]
 801022a:	843b      	strh	r3, [r7, #32]
 801022c:	8c3b      	ldrh	r3, [r7, #32]
 801022e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010232:	2b00      	cmp	r3, #0
 8010234:	d01b      	beq.n	801026e <USB_DeactivateEndpoint+0x18a>
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4413      	add	r3, r2
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	b29b      	uxth	r3, r3
 8010244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801024c:	83fb      	strh	r3, [r7, #30]
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	441a      	add	r2, r3
 8010258:	8bfb      	ldrh	r3, [r7, #30]
 801025a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801025e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801026a:	b29b      	uxth	r3, r3
 801026c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	4413      	add	r3, r2
 8010278:	881b      	ldrh	r3, [r3, #0]
 801027a:	83bb      	strh	r3, [r7, #28]
 801027c:	8bbb      	ldrh	r3, [r7, #28]
 801027e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010282:	2b00      	cmp	r3, #0
 8010284:	d01b      	beq.n	80102be <USB_DeactivateEndpoint+0x1da>
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4413      	add	r3, r2
 8010290:	881b      	ldrh	r3, [r3, #0]
 8010292:	b29b      	uxth	r3, r3
 8010294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801029c:	837b      	strh	r3, [r7, #26]
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	441a      	add	r2, r3
 80102a8:	8b7b      	ldrh	r3, [r7, #26]
 80102aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	4413      	add	r3, r2
 80102c8:	881b      	ldrh	r3, [r3, #0]
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102d4:	833b      	strh	r3, [r7, #24]
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	009b      	lsls	r3, r3, #2
 80102de:	441a      	add	r2, r3
 80102e0:	8b3b      	ldrh	r3, [r7, #24]
 80102e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	4413      	add	r3, r2
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	b29b      	uxth	r3, r3
 8010304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801030c:	82fb      	strh	r3, [r7, #22]
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	441a      	add	r2, r3
 8010318:	8afb      	ldrh	r3, [r7, #22]
 801031a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801031e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801032a:	b29b      	uxth	r3, r3
 801032c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	4413      	add	r3, r2
 8010338:	881b      	ldrh	r3, [r3, #0]
 801033a:	b29b      	uxth	r3, r3
 801033c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010344:	82bb      	strh	r3, [r7, #20]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	441a      	add	r2, r3
 8010350:	8abb      	ldrh	r3, [r7, #20]
 8010352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801035a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801035e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010362:	b29b      	uxth	r3, r3
 8010364:	8013      	strh	r3, [r2, #0]
 8010366:	e0a3      	b.n	80104b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	4413      	add	r3, r2
 8010372:	881b      	ldrh	r3, [r3, #0]
 8010374:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010376:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801037c:	2b00      	cmp	r3, #0
 801037e:	d01b      	beq.n	80103b8 <USB_DeactivateEndpoint+0x2d4>
 8010380:	687a      	ldr	r2, [r7, #4]
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	009b      	lsls	r3, r3, #2
 8010388:	4413      	add	r3, r2
 801038a:	881b      	ldrh	r3, [r3, #0]
 801038c:	b29b      	uxth	r3, r3
 801038e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010396:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	441a      	add	r2, r3
 80103a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80103a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80103b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	4413      	add	r3, r2
 80103c2:	881b      	ldrh	r3, [r3, #0]
 80103c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80103c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80103c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d01b      	beq.n	8010408 <USB_DeactivateEndpoint+0x324>
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	4413      	add	r3, r2
 80103da:	881b      	ldrh	r3, [r3, #0]
 80103dc:	b29b      	uxth	r3, r3
 80103de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	441a      	add	r2, r3
 80103f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80103f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010400:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010404:	b29b      	uxth	r3, r3
 8010406:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	4413      	add	r3, r2
 8010412:	881b      	ldrh	r3, [r3, #0]
 8010414:	b29b      	uxth	r3, r3
 8010416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801041a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801041e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	009b      	lsls	r3, r3, #2
 8010428:	441a      	add	r2, r3
 801042a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801042c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801043c:	b29b      	uxth	r3, r3
 801043e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4413      	add	r3, r2
 801044a:	881b      	ldrh	r3, [r3, #0]
 801044c:	b29b      	uxth	r3, r3
 801044e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010456:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	009b      	lsls	r3, r3, #2
 8010460:	441a      	add	r2, r3
 8010462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801046c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010474:	b29b      	uxth	r3, r3
 8010476:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	009b      	lsls	r3, r3, #2
 8010480:	4413      	add	r3, r2
 8010482:	881b      	ldrh	r3, [r3, #0]
 8010484:	b29b      	uxth	r3, r3
 8010486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801048a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801048e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	441a      	add	r2, r3
 801049a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801049c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3734      	adds	r7, #52	; 0x34
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr

080104be <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b0c2      	sub	sp, #264	; 0x108
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104cc:	6018      	str	r0, [r3, #0]
 80104ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104d6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80104d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	785b      	ldrb	r3, [r3, #1]
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	f040 86b7 	bne.w	8011258 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80104ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	699a      	ldr	r2, [r3, #24]
 80104f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	691b      	ldr	r3, [r3, #16]
 8010502:	429a      	cmp	r2, r3
 8010504:	d908      	bls.n	8010518 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801050a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	691b      	ldr	r3, [r3, #16]
 8010512:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010516:	e007      	b.n	8010528 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801051c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	699b      	ldr	r3, [r3, #24]
 8010524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801052c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	7b1b      	ldrb	r3, [r3, #12]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d13a      	bne.n	80105ae <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801053c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	6959      	ldr	r1, [r3, #20]
 8010544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	88da      	ldrh	r2, [r3, #6]
 8010550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010554:	b29b      	uxth	r3, r3
 8010556:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801055a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801055e:	6800      	ldr	r0, [r0, #0]
 8010560:	f001 fc98 	bl	8011e94 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	613b      	str	r3, [r7, #16]
 8010570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801057e:	b29b      	uxth	r3, r3
 8010580:	461a      	mov	r2, r3
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	4413      	add	r3, r2
 8010586:	613b      	str	r3, [r7, #16]
 8010588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801058c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	00da      	lsls	r2, r3, #3
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	4413      	add	r3, r2
 801059a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801059e:	60fb      	str	r3, [r7, #12]
 80105a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105a4:	b29a      	uxth	r2, r3
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	801a      	strh	r2, [r3, #0]
 80105aa:	f000 be1f 	b.w	80111ec <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80105ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	78db      	ldrb	r3, [r3, #3]
 80105ba:	2b02      	cmp	r3, #2
 80105bc:	f040 8462 	bne.w	8010e84 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80105c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	6a1a      	ldr	r2, [r3, #32]
 80105cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	691b      	ldr	r3, [r3, #16]
 80105d8:	429a      	cmp	r2, r3
 80105da:	f240 83df 	bls.w	8010d9c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80105de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	4413      	add	r3, r2
 80105f8:	881b      	ldrh	r3, [r3, #0]
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010604:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8010608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801060c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	441a      	add	r2, r3
 8010622:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801062a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801062e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010636:	b29b      	uxth	r3, r3
 8010638:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801063a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801063e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	6a1a      	ldr	r2, [r3, #32]
 8010646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801064a:	1ad2      	subs	r2, r2, r3
 801064c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801065c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	4413      	add	r3, r2
 8010672:	881b      	ldrh	r3, [r3, #0]
 8010674:	b29b      	uxth	r3, r3
 8010676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801067a:	2b00      	cmp	r3, #0
 801067c:	f000 81c7 	beq.w	8010a0e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	633b      	str	r3, [r7, #48]	; 0x30
 801068c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	785b      	ldrb	r3, [r3, #1]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d177      	bne.n	801078c <USB_EPStartXfer+0x2ce>
 801069c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80106a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	461a      	mov	r2, r3
 80106ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106bc:	4413      	add	r3, r2
 80106be:	62bb      	str	r3, [r7, #40]	; 0x28
 80106c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	00da      	lsls	r2, r3, #3
 80106ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d0:	4413      	add	r3, r2
 80106d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80106d6:	627b      	str	r3, [r7, #36]	; 0x24
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	881b      	ldrh	r3, [r3, #0]
 80106dc:	b29b      	uxth	r3, r3
 80106de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e6:	801a      	strh	r2, [r3, #0]
 80106e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106ec:	2b3e      	cmp	r3, #62	; 0x3e
 80106ee:	d921      	bls.n	8010734 <USB_EPStartXfer+0x276>
 80106f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106f4:	095b      	lsrs	r3, r3, #5
 80106f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80106fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106fe:	f003 031f 	and.w	r3, r3, #31
 8010702:	2b00      	cmp	r3, #0
 8010704:	d104      	bne.n	8010710 <USB_EPStartXfer+0x252>
 8010706:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801070a:	3b01      	subs	r3, #1
 801070c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010712:	881b      	ldrh	r3, [r3, #0]
 8010714:	b29a      	uxth	r2, r3
 8010716:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801071a:	b29b      	uxth	r3, r3
 801071c:	029b      	lsls	r3, r3, #10
 801071e:	b29b      	uxth	r3, r3
 8010720:	4313      	orrs	r3, r2
 8010722:	b29b      	uxth	r3, r3
 8010724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801072c:	b29a      	uxth	r2, r3
 801072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010730:	801a      	strh	r2, [r3, #0]
 8010732:	e050      	b.n	80107d6 <USB_EPStartXfer+0x318>
 8010734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010738:	2b00      	cmp	r3, #0
 801073a:	d10a      	bne.n	8010752 <USB_EPStartXfer+0x294>
 801073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073e:	881b      	ldrh	r3, [r3, #0]
 8010740:	b29b      	uxth	r3, r3
 8010742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801074a:	b29a      	uxth	r2, r3
 801074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074e:	801a      	strh	r2, [r3, #0]
 8010750:	e041      	b.n	80107d6 <USB_EPStartXfer+0x318>
 8010752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010756:	085b      	lsrs	r3, r3, #1
 8010758:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801075c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010760:	f003 0301 	and.w	r3, r3, #1
 8010764:	2b00      	cmp	r3, #0
 8010766:	d004      	beq.n	8010772 <USB_EPStartXfer+0x2b4>
 8010768:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801076c:	3301      	adds	r3, #1
 801076e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010774:	881b      	ldrh	r3, [r3, #0]
 8010776:	b29a      	uxth	r2, r3
 8010778:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801077c:	b29b      	uxth	r3, r3
 801077e:	029b      	lsls	r3, r3, #10
 8010780:	b29b      	uxth	r3, r3
 8010782:	4313      	orrs	r3, r2
 8010784:	b29a      	uxth	r2, r3
 8010786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010788:	801a      	strh	r2, [r3, #0]
 801078a:	e024      	b.n	80107d6 <USB_EPStartXfer+0x318>
 801078c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	785b      	ldrb	r3, [r3, #1]
 8010798:	2b01      	cmp	r3, #1
 801079a:	d11c      	bne.n	80107d6 <USB_EPStartXfer+0x318>
 801079c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	461a      	mov	r2, r3
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	4413      	add	r3, r2
 80107b2:	633b      	str	r3, [r7, #48]	; 0x30
 80107b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	00da      	lsls	r2, r3, #3
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	4413      	add	r3, r2
 80107c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80107ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80107d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	895b      	ldrh	r3, [r3, #10]
 80107e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80107e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	6959      	ldr	r1, [r3, #20]
 80107f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80107fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010800:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010804:	6800      	ldr	r0, [r0, #0]
 8010806:	f001 fb45 	bl	8011e94 <USB_WritePMA>
            ep->xfer_buff += len;
 801080a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801080e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	695a      	ldr	r2, [r3, #20]
 8010816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801081a:	441a      	add	r2, r3
 801081c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801082c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	6a1a      	ldr	r2, [r3, #32]
 8010834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	691b      	ldr	r3, [r3, #16]
 8010840:	429a      	cmp	r2, r3
 8010842:	d90f      	bls.n	8010864 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8010844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	6a1a      	ldr	r2, [r3, #32]
 8010850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010854:	1ad2      	subs	r2, r2, r3
 8010856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801085a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	621a      	str	r2, [r3, #32]
 8010862:	e00e      	b.n	8010882 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8010864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	6a1b      	ldr	r3, [r3, #32]
 8010870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2200      	movs	r2, #0
 8010880:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	785b      	ldrb	r3, [r3, #1]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d177      	bne.n	8010982 <USB_EPStartXfer+0x4c4>
 8010892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	61bb      	str	r3, [r7, #24]
 801089e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	461a      	mov	r2, r3
 80108b0:	69bb      	ldr	r3, [r7, #24]
 80108b2:	4413      	add	r3, r2
 80108b4:	61bb      	str	r3, [r7, #24]
 80108b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	00da      	lsls	r2, r3, #3
 80108c4:	69bb      	ldr	r3, [r7, #24]
 80108c6:	4413      	add	r3, r2
 80108c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80108cc:	617b      	str	r3, [r7, #20]
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80108d8:	b29a      	uxth	r2, r3
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	801a      	strh	r2, [r3, #0]
 80108de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108e2:	2b3e      	cmp	r3, #62	; 0x3e
 80108e4:	d921      	bls.n	801092a <USB_EPStartXfer+0x46c>
 80108e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ea:	095b      	lsrs	r3, r3, #5
 80108ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80108f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108f4:	f003 031f 	and.w	r3, r3, #31
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d104      	bne.n	8010906 <USB_EPStartXfer+0x448>
 80108fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010900:	3b01      	subs	r3, #1
 8010902:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	b29a      	uxth	r2, r3
 801090c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010910:	b29b      	uxth	r3, r3
 8010912:	029b      	lsls	r3, r3, #10
 8010914:	b29b      	uxth	r3, r3
 8010916:	4313      	orrs	r3, r2
 8010918:	b29b      	uxth	r3, r3
 801091a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801091e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010922:	b29a      	uxth	r2, r3
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	801a      	strh	r2, [r3, #0]
 8010928:	e056      	b.n	80109d8 <USB_EPStartXfer+0x51a>
 801092a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801092e:	2b00      	cmp	r3, #0
 8010930:	d10a      	bne.n	8010948 <USB_EPStartXfer+0x48a>
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	881b      	ldrh	r3, [r3, #0]
 8010936:	b29b      	uxth	r3, r3
 8010938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801093c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010940:	b29a      	uxth	r2, r3
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	801a      	strh	r2, [r3, #0]
 8010946:	e047      	b.n	80109d8 <USB_EPStartXfer+0x51a>
 8010948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801094c:	085b      	lsrs	r3, r3, #1
 801094e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010956:	f003 0301 	and.w	r3, r3, #1
 801095a:	2b00      	cmp	r3, #0
 801095c:	d004      	beq.n	8010968 <USB_EPStartXfer+0x4aa>
 801095e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010962:	3301      	adds	r3, #1
 8010964:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	881b      	ldrh	r3, [r3, #0]
 801096c:	b29a      	uxth	r2, r3
 801096e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010972:	b29b      	uxth	r3, r3
 8010974:	029b      	lsls	r3, r3, #10
 8010976:	b29b      	uxth	r3, r3
 8010978:	4313      	orrs	r3, r2
 801097a:	b29a      	uxth	r2, r3
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	801a      	strh	r2, [r3, #0]
 8010980:	e02a      	b.n	80109d8 <USB_EPStartXfer+0x51a>
 8010982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	785b      	ldrb	r3, [r3, #1]
 801098e:	2b01      	cmp	r3, #1
 8010990:	d122      	bne.n	80109d8 <USB_EPStartXfer+0x51a>
 8010992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	623b      	str	r3, [r7, #32]
 801099e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	461a      	mov	r2, r3
 80109b0:	6a3b      	ldr	r3, [r7, #32]
 80109b2:	4413      	add	r3, r2
 80109b4:	623b      	str	r3, [r7, #32]
 80109b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	00da      	lsls	r2, r3, #3
 80109c4:	6a3b      	ldr	r3, [r7, #32]
 80109c6:	4413      	add	r3, r2
 80109c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80109cc:	61fb      	str	r3, [r7, #28]
 80109ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80109d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	891b      	ldrh	r3, [r3, #8]
 80109e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80109e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	6959      	ldr	r1, [r3, #20]
 80109f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80109fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010a02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010a06:	6800      	ldr	r0, [r0, #0]
 8010a08:	f001 fa44 	bl	8011e94 <USB_WritePMA>
 8010a0c:	e3ee      	b.n	80111ec <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	785b      	ldrb	r3, [r3, #1]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d177      	bne.n	8010b0e <USB_EPStartXfer+0x650>
 8010a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a3e:	4413      	add	r3, r2
 8010a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	00da      	lsls	r2, r3, #3
 8010a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a52:	4413      	add	r3, r2
 8010a54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010a58:	647b      	str	r3, [r7, #68]	; 0x44
 8010a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a68:	801a      	strh	r2, [r3, #0]
 8010a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8010a70:	d921      	bls.n	8010ab6 <USB_EPStartXfer+0x5f8>
 8010a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a76:	095b      	lsrs	r3, r3, #5
 8010a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a80:	f003 031f 	and.w	r3, r3, #31
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d104      	bne.n	8010a92 <USB_EPStartXfer+0x5d4>
 8010a88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a94:	881b      	ldrh	r3, [r3, #0]
 8010a96:	b29a      	uxth	r2, r3
 8010a98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	029b      	lsls	r3, r3, #10
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	4313      	orrs	r3, r2
 8010aa4:	b29b      	uxth	r3, r3
 8010aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ab2:	801a      	strh	r2, [r3, #0]
 8010ab4:	e056      	b.n	8010b64 <USB_EPStartXfer+0x6a6>
 8010ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d10a      	bne.n	8010ad4 <USB_EPStartXfer+0x616>
 8010abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ad0:	801a      	strh	r2, [r3, #0]
 8010ad2:	e047      	b.n	8010b64 <USB_EPStartXfer+0x6a6>
 8010ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ad8:	085b      	lsrs	r3, r3, #1
 8010ada:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ae2:	f003 0301 	and.w	r3, r3, #1
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d004      	beq.n	8010af4 <USB_EPStartXfer+0x636>
 8010aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010aee:	3301      	adds	r3, #1
 8010af0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010af6:	881b      	ldrh	r3, [r3, #0]
 8010af8:	b29a      	uxth	r2, r3
 8010afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	029b      	lsls	r3, r3, #10
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	4313      	orrs	r3, r2
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b0a:	801a      	strh	r2, [r3, #0]
 8010b0c:	e02a      	b.n	8010b64 <USB_EPStartXfer+0x6a6>
 8010b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	785b      	ldrb	r3, [r3, #1]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d122      	bne.n	8010b64 <USB_EPStartXfer+0x6a6>
 8010b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	653b      	str	r3, [r7, #80]	; 0x50
 8010b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b3e:	4413      	add	r3, r2
 8010b40:	653b      	str	r3, [r7, #80]	; 0x50
 8010b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	00da      	lsls	r2, r3, #3
 8010b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b52:	4413      	add	r3, r2
 8010b54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	891b      	ldrh	r3, [r3, #8]
 8010b70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	6959      	ldr	r1, [r3, #20]
 8010b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010b8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010b8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010b92:	6800      	ldr	r0, [r0, #0]
 8010b94:	f001 f97e 	bl	8011e94 <USB_WritePMA>
            ep->xfer_buff += len;
 8010b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	695a      	ldr	r2, [r3, #20]
 8010ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ba8:	441a      	add	r2, r3
 8010baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	6a1a      	ldr	r2, [r3, #32]
 8010bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d90f      	bls.n	8010bf2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	6a1a      	ldr	r2, [r3, #32]
 8010bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010be2:	1ad2      	subs	r2, r2, r3
 8010be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	621a      	str	r2, [r3, #32]
 8010bf0:	e00e      	b.n	8010c10 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	6a1b      	ldr	r3, [r3, #32]
 8010bfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8010c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	785b      	ldrb	r3, [r3, #1]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d177      	bne.n	8010d1c <USB_EPStartXfer+0x85e>
 8010c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c46:	b29b      	uxth	r3, r3
 8010c48:	461a      	mov	r2, r3
 8010c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4c:	4413      	add	r3, r2
 8010c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	00da      	lsls	r2, r3, #3
 8010c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c60:	4413      	add	r3, r2
 8010c62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010c66:	637b      	str	r3, [r7, #52]	; 0x34
 8010c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c6a:	881b      	ldrh	r3, [r3, #0]
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c76:	801a      	strh	r2, [r3, #0]
 8010c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c7c:	2b3e      	cmp	r3, #62	; 0x3e
 8010c7e:	d921      	bls.n	8010cc4 <USB_EPStartXfer+0x806>
 8010c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c84:	095b      	lsrs	r3, r3, #5
 8010c86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c8e:	f003 031f 	and.w	r3, r3, #31
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d104      	bne.n	8010ca0 <USB_EPStartXfer+0x7e2>
 8010c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c9a:	3b01      	subs	r3, #1
 8010c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ca2:	881b      	ldrh	r3, [r3, #0]
 8010ca4:	b29a      	uxth	r2, r3
 8010ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	029b      	lsls	r3, r3, #10
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc0:	801a      	strh	r2, [r3, #0]
 8010cc2:	e050      	b.n	8010d66 <USB_EPStartXfer+0x8a8>
 8010cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d10a      	bne.n	8010ce2 <USB_EPStartXfer+0x824>
 8010ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cce:	881b      	ldrh	r3, [r3, #0]
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cde:	801a      	strh	r2, [r3, #0]
 8010ce0:	e041      	b.n	8010d66 <USB_EPStartXfer+0x8a8>
 8010ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ce6:	085b      	lsrs	r3, r3, #1
 8010ce8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cf0:	f003 0301 	and.w	r3, r3, #1
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d004      	beq.n	8010d02 <USB_EPStartXfer+0x844>
 8010cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cfc:	3301      	adds	r3, #1
 8010cfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d04:	881b      	ldrh	r3, [r3, #0]
 8010d06:	b29a      	uxth	r2, r3
 8010d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	029b      	lsls	r3, r3, #10
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	4313      	orrs	r3, r2
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d18:	801a      	strh	r2, [r3, #0]
 8010d1a:	e024      	b.n	8010d66 <USB_EPStartXfer+0x8a8>
 8010d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	785b      	ldrb	r3, [r3, #1]
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d11c      	bne.n	8010d66 <USB_EPStartXfer+0x8a8>
 8010d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d40:	4413      	add	r3, r2
 8010d42:	643b      	str	r3, [r7, #64]	; 0x40
 8010d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	00da      	lsls	r2, r3, #3
 8010d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d54:	4413      	add	r3, r2
 8010d56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d60:	b29a      	uxth	r2, r3
 8010d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	895b      	ldrh	r3, [r3, #10]
 8010d72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	6959      	ldr	r1, [r3, #20]
 8010d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010d8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010d90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010d94:	6800      	ldr	r0, [r0, #0]
 8010d96:	f001 f87d 	bl	8011e94 <USB_WritePMA>
 8010d9a:	e227      	b.n	80111ec <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	6a1b      	ldr	r3, [r3, #32]
 8010da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	4413      	add	r3, r2
 8010dc6:	881b      	ldrh	r3, [r3, #0]
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dd2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	441a      	add	r2, r3
 8010df0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	461a      	mov	r2, r3
 8010e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e28:	4413      	add	r3, r2
 8010e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	00da      	lsls	r2, r3, #3
 8010e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e3c:	4413      	add	r3, r2
 8010e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010e42:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	891b      	ldrh	r3, [r3, #8]
 8010e5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	6959      	ldr	r1, [r3, #20]
 8010e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010e74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010e78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010e7c:	6800      	ldr	r0, [r0, #0]
 8010e7e:	f001 f809 	bl	8011e94 <USB_WritePMA>
 8010e82:	e1b3      	b.n	80111ec <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	6a1a      	ldr	r2, [r3, #32]
 8010e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e94:	1ad2      	subs	r2, r2, r3
 8010e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	4413      	add	r3, r2
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f000 80c6 	beq.w	8011056 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	673b      	str	r3, [r7, #112]	; 0x70
 8010ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	785b      	ldrb	r3, [r3, #1]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d177      	bne.n	8010fd6 <USB_EPStartXfer+0xb18>
 8010ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	461a      	mov	r2, r3
 8010f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f06:	4413      	add	r3, r2
 8010f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	00da      	lsls	r2, r3, #3
 8010f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f1a:	4413      	add	r3, r2
 8010f1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010f20:	667b      	str	r3, [r7, #100]	; 0x64
 8010f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f24:	881b      	ldrh	r3, [r3, #0]
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f30:	801a      	strh	r2, [r3, #0]
 8010f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f36:	2b3e      	cmp	r3, #62	; 0x3e
 8010f38:	d921      	bls.n	8010f7e <USB_EPStartXfer+0xac0>
 8010f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f3e:	095b      	lsrs	r3, r3, #5
 8010f40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f48:	f003 031f 	and.w	r3, r3, #31
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d104      	bne.n	8010f5a <USB_EPStartXfer+0xa9c>
 8010f50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f54:	3b01      	subs	r3, #1
 8010f56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f5c:	881b      	ldrh	r3, [r3, #0]
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	029b      	lsls	r3, r3, #10
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	4313      	orrs	r3, r2
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f76:	b29a      	uxth	r2, r3
 8010f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f7a:	801a      	strh	r2, [r3, #0]
 8010f7c:	e050      	b.n	8011020 <USB_EPStartXfer+0xb62>
 8010f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d10a      	bne.n	8010f9c <USB_EPStartXfer+0xade>
 8010f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f88:	881b      	ldrh	r3, [r3, #0]
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f94:	b29a      	uxth	r2, r3
 8010f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f98:	801a      	strh	r2, [r3, #0]
 8010f9a:	e041      	b.n	8011020 <USB_EPStartXfer+0xb62>
 8010f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fa0:	085b      	lsrs	r3, r3, #1
 8010fa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010faa:	f003 0301 	and.w	r3, r3, #1
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d004      	beq.n	8010fbc <USB_EPStartXfer+0xafe>
 8010fb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010fbe:	881b      	ldrh	r3, [r3, #0]
 8010fc0:	b29a      	uxth	r2, r3
 8010fc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	029b      	lsls	r3, r3, #10
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	b29a      	uxth	r2, r3
 8010fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010fd2:	801a      	strh	r2, [r3, #0]
 8010fd4:	e024      	b.n	8011020 <USB_EPStartXfer+0xb62>
 8010fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	785b      	ldrb	r3, [r3, #1]
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d11c      	bne.n	8011020 <USB_EPStartXfer+0xb62>
 8010fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ffa:	4413      	add	r3, r2
 8010ffc:	673b      	str	r3, [r7, #112]	; 0x70
 8010ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	00da      	lsls	r2, r3, #3
 801100c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801100e:	4413      	add	r3, r2
 8011010:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011014:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801101a:	b29a      	uxth	r2, r3
 801101c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801101e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	895b      	ldrh	r3, [r3, #10]
 801102c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	6959      	ldr	r1, [r3, #20]
 801103c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011040:	b29b      	uxth	r3, r3
 8011042:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011046:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801104a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801104e:	6800      	ldr	r0, [r0, #0]
 8011050:	f000 ff20 	bl	8011e94 <USB_WritePMA>
 8011054:	e0ca      	b.n	80111ec <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801105a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	785b      	ldrb	r3, [r3, #1]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d177      	bne.n	8011156 <USB_EPStartXfer+0xc98>
 8011066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801106a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011080:	b29b      	uxth	r3, r3
 8011082:	461a      	mov	r2, r3
 8011084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011086:	4413      	add	r3, r2
 8011088:	67fb      	str	r3, [r7, #124]	; 0x7c
 801108a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801108e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	00da      	lsls	r2, r3, #3
 8011098:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801109a:	4413      	add	r3, r2
 801109c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80110a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80110a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110a4:	881b      	ldrh	r3, [r3, #0]
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110b0:	801a      	strh	r2, [r3, #0]
 80110b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110b6:	2b3e      	cmp	r3, #62	; 0x3e
 80110b8:	d921      	bls.n	80110fe <USB_EPStartXfer+0xc40>
 80110ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110be:	095b      	lsrs	r3, r3, #5
 80110c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80110c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110c8:	f003 031f 	and.w	r3, r3, #31
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d104      	bne.n	80110da <USB_EPStartXfer+0xc1c>
 80110d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80110d4:	3b01      	subs	r3, #1
 80110d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80110da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110dc:	881b      	ldrh	r3, [r3, #0]
 80110de:	b29a      	uxth	r2, r3
 80110e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	029b      	lsls	r3, r3, #10
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	4313      	orrs	r3, r2
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110f6:	b29a      	uxth	r2, r3
 80110f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110fa:	801a      	strh	r2, [r3, #0]
 80110fc:	e05c      	b.n	80111b8 <USB_EPStartXfer+0xcfa>
 80110fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011102:	2b00      	cmp	r3, #0
 8011104:	d10a      	bne.n	801111c <USB_EPStartXfer+0xc5e>
 8011106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011108:	881b      	ldrh	r3, [r3, #0]
 801110a:	b29b      	uxth	r3, r3
 801110c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011114:	b29a      	uxth	r2, r3
 8011116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011118:	801a      	strh	r2, [r3, #0]
 801111a:	e04d      	b.n	80111b8 <USB_EPStartXfer+0xcfa>
 801111c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011120:	085b      	lsrs	r3, r3, #1
 8011122:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801112a:	f003 0301 	and.w	r3, r3, #1
 801112e:	2b00      	cmp	r3, #0
 8011130:	d004      	beq.n	801113c <USB_EPStartXfer+0xc7e>
 8011132:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011136:	3301      	adds	r3, #1
 8011138:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801113c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801113e:	881b      	ldrh	r3, [r3, #0]
 8011140:	b29a      	uxth	r2, r3
 8011142:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011146:	b29b      	uxth	r3, r3
 8011148:	029b      	lsls	r3, r3, #10
 801114a:	b29b      	uxth	r3, r3
 801114c:	4313      	orrs	r3, r2
 801114e:	b29a      	uxth	r2, r3
 8011150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011152:	801a      	strh	r2, [r3, #0]
 8011154:	e030      	b.n	80111b8 <USB_EPStartXfer+0xcfa>
 8011156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801115a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	785b      	ldrb	r3, [r3, #1]
 8011162:	2b01      	cmp	r3, #1
 8011164:	d128      	bne.n	80111b8 <USB_EPStartXfer+0xcfa>
 8011166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801116a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011182:	b29b      	uxth	r3, r3
 8011184:	461a      	mov	r2, r3
 8011186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801118a:	4413      	add	r3, r2
 801118c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	00da      	lsls	r2, r3, #3
 801119e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80111a2:	4413      	add	r3, r2
 80111a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80111a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80111ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80111b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80111b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	891b      	ldrh	r3, [r3, #8]
 80111c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80111c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	6959      	ldr	r1, [r3, #20]
 80111d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111d8:	b29b      	uxth	r3, r3
 80111da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80111de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80111e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80111e6:	6800      	ldr	r0, [r0, #0]
 80111e8:	f000 fe54 	bl	8011e94 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80111ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111f4:	681a      	ldr	r2, [r3, #0]
 80111f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	4413      	add	r3, r2
 8011206:	881b      	ldrh	r3, [r3, #0]
 8011208:	b29b      	uxth	r3, r3
 801120a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801120e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011212:	817b      	strh	r3, [r7, #10]
 8011214:	897b      	ldrh	r3, [r7, #10]
 8011216:	f083 0310 	eor.w	r3, r3, #16
 801121a:	817b      	strh	r3, [r7, #10]
 801121c:	897b      	ldrh	r3, [r7, #10]
 801121e:	f083 0320 	eor.w	r3, r3, #32
 8011222:	817b      	strh	r3, [r7, #10]
 8011224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	441a      	add	r2, r3
 801123e:	897b      	ldrh	r3, [r7, #10]
 8011240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011250:	b29b      	uxth	r3, r3
 8011252:	8013      	strh	r3, [r2, #0]
 8011254:	f000 bcde 	b.w	8011c14 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801125c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	7b1b      	ldrb	r3, [r3, #12]
 8011264:	2b00      	cmp	r3, #0
 8011266:	f040 80bb 	bne.w	80113e0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801126a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801126e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	699a      	ldr	r2, [r3, #24]
 8011276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801127a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	691b      	ldr	r3, [r3, #16]
 8011282:	429a      	cmp	r2, r3
 8011284:	d917      	bls.n	80112b6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8011286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801128a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	691b      	ldr	r3, [r3, #16]
 8011292:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8011296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801129a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	699a      	ldr	r2, [r3, #24]
 80112a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112a6:	1ad2      	subs	r2, r2, r3
 80112a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	619a      	str	r2, [r3, #24]
 80112b4:	e00e      	b.n	80112d4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80112b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	699b      	ldr	r3, [r3, #24]
 80112c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80112c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2200      	movs	r2, #0
 80112d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80112d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80112e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	461a      	mov	r2, r3
 80112f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80112f8:	4413      	add	r3, r2
 80112fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80112fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	00da      	lsls	r2, r3, #3
 801130c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011310:	4413      	add	r3, r2
 8011312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801131a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801131e:	881b      	ldrh	r3, [r3, #0]
 8011320:	b29b      	uxth	r3, r3
 8011322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011326:	b29a      	uxth	r2, r3
 8011328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801132c:	801a      	strh	r2, [r3, #0]
 801132e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011332:	2b3e      	cmp	r3, #62	; 0x3e
 8011334:	d924      	bls.n	8011380 <USB_EPStartXfer+0xec2>
 8011336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801133a:	095b      	lsrs	r3, r3, #5
 801133c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011344:	f003 031f 	and.w	r3, r3, #31
 8011348:	2b00      	cmp	r3, #0
 801134a:	d104      	bne.n	8011356 <USB_EPStartXfer+0xe98>
 801134c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011350:	3b01      	subs	r3, #1
 8011352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801135a:	881b      	ldrh	r3, [r3, #0]
 801135c:	b29a      	uxth	r2, r3
 801135e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011362:	b29b      	uxth	r3, r3
 8011364:	029b      	lsls	r3, r3, #10
 8011366:	b29b      	uxth	r3, r3
 8011368:	4313      	orrs	r3, r2
 801136a:	b29b      	uxth	r3, r3
 801136c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011374:	b29a      	uxth	r2, r3
 8011376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801137a:	801a      	strh	r2, [r3, #0]
 801137c:	f000 bc10 	b.w	8011ba0 <USB_EPStartXfer+0x16e2>
 8011380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011384:	2b00      	cmp	r3, #0
 8011386:	d10c      	bne.n	80113a2 <USB_EPStartXfer+0xee4>
 8011388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801138c:	881b      	ldrh	r3, [r3, #0]
 801138e:	b29b      	uxth	r3, r3
 8011390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011398:	b29a      	uxth	r2, r3
 801139a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801139e:	801a      	strh	r2, [r3, #0]
 80113a0:	e3fe      	b.n	8011ba0 <USB_EPStartXfer+0x16e2>
 80113a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113a6:	085b      	lsrs	r3, r3, #1
 80113a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80113ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113b0:	f003 0301 	and.w	r3, r3, #1
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d004      	beq.n	80113c2 <USB_EPStartXfer+0xf04>
 80113b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80113bc:	3301      	adds	r3, #1
 80113be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80113c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80113c6:	881b      	ldrh	r3, [r3, #0]
 80113c8:	b29a      	uxth	r2, r3
 80113ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	029b      	lsls	r3, r3, #10
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	4313      	orrs	r3, r2
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80113dc:	801a      	strh	r2, [r3, #0]
 80113de:	e3df      	b.n	8011ba0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80113e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	78db      	ldrb	r3, [r3, #3]
 80113ec:	2b02      	cmp	r3, #2
 80113ee:	f040 8218 	bne.w	8011822 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80113f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	785b      	ldrb	r3, [r3, #1]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	f040 809d 	bne.w	801153e <USB_EPStartXfer+0x1080>
 8011404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011420:	b29b      	uxth	r3, r3
 8011422:	461a      	mov	r2, r3
 8011424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011428:	4413      	add	r3, r2
 801142a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801142e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	00da      	lsls	r2, r3, #3
 801143c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011440:	4413      	add	r3, r2
 8011442:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801144a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801144e:	881b      	ldrh	r3, [r3, #0]
 8011450:	b29b      	uxth	r3, r3
 8011452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011456:	b29a      	uxth	r2, r3
 8011458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801145c:	801a      	strh	r2, [r3, #0]
 801145e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	691b      	ldr	r3, [r3, #16]
 801146a:	2b3e      	cmp	r3, #62	; 0x3e
 801146c:	d92b      	bls.n	80114c6 <USB_EPStartXfer+0x1008>
 801146e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	691b      	ldr	r3, [r3, #16]
 801147a:	095b      	lsrs	r3, r3, #5
 801147c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	691b      	ldr	r3, [r3, #16]
 801148c:	f003 031f 	and.w	r3, r3, #31
 8011490:	2b00      	cmp	r3, #0
 8011492:	d104      	bne.n	801149e <USB_EPStartXfer+0xfe0>
 8011494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011498:	3b01      	subs	r3, #1
 801149a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801149e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80114a2:	881b      	ldrh	r3, [r3, #0]
 80114a4:	b29a      	uxth	r2, r3
 80114a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	029b      	lsls	r3, r3, #10
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	4313      	orrs	r3, r2
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114bc:	b29a      	uxth	r2, r3
 80114be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80114c2:	801a      	strh	r2, [r3, #0]
 80114c4:	e070      	b.n	80115a8 <USB_EPStartXfer+0x10ea>
 80114c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	691b      	ldr	r3, [r3, #16]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d10c      	bne.n	80114f0 <USB_EPStartXfer+0x1032>
 80114d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	b29b      	uxth	r3, r3
 80114de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80114ec:	801a      	strh	r2, [r3, #0]
 80114ee:	e05b      	b.n	80115a8 <USB_EPStartXfer+0x10ea>
 80114f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	691b      	ldr	r3, [r3, #16]
 80114fc:	085b      	lsrs	r3, r3, #1
 80114fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	691b      	ldr	r3, [r3, #16]
 801150e:	f003 0301 	and.w	r3, r3, #1
 8011512:	2b00      	cmp	r3, #0
 8011514:	d004      	beq.n	8011520 <USB_EPStartXfer+0x1062>
 8011516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801151a:	3301      	adds	r3, #1
 801151c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011524:	881b      	ldrh	r3, [r3, #0]
 8011526:	b29a      	uxth	r2, r3
 8011528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801152c:	b29b      	uxth	r3, r3
 801152e:	029b      	lsls	r3, r3, #10
 8011530:	b29b      	uxth	r3, r3
 8011532:	4313      	orrs	r3, r2
 8011534:	b29a      	uxth	r2, r3
 8011536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801153a:	801a      	strh	r2, [r3, #0]
 801153c:	e034      	b.n	80115a8 <USB_EPStartXfer+0x10ea>
 801153e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	785b      	ldrb	r3, [r3, #1]
 801154a:	2b01      	cmp	r3, #1
 801154c:	d12c      	bne.n	80115a8 <USB_EPStartXfer+0x10ea>
 801154e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801155c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801156a:	b29b      	uxth	r3, r3
 801156c:	461a      	mov	r2, r3
 801156e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011572:	4413      	add	r3, r2
 8011574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801157c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	00da      	lsls	r2, r3, #3
 8011586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801158a:	4413      	add	r3, r2
 801158c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	691b      	ldr	r3, [r3, #16]
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80115a6:	801a      	strh	r2, [r3, #0]
 80115a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80115b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	785b      	ldrb	r3, [r3, #1]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f040 809d 	bne.w	8011702 <USB_EPStartXfer+0x1244>
 80115c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80115d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	461a      	mov	r2, r3
 80115e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80115ec:	4413      	add	r3, r2
 80115ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80115f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	00da      	lsls	r2, r3, #3
 8011600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011604:	4413      	add	r3, r2
 8011606:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801160a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801160e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	b29b      	uxth	r3, r3
 8011616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801161a:	b29a      	uxth	r2, r3
 801161c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011620:	801a      	strh	r2, [r3, #0]
 8011622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	691b      	ldr	r3, [r3, #16]
 801162e:	2b3e      	cmp	r3, #62	; 0x3e
 8011630:	d92b      	bls.n	801168a <USB_EPStartXfer+0x11cc>
 8011632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	691b      	ldr	r3, [r3, #16]
 801163e:	095b      	lsrs	r3, r3, #5
 8011640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	691b      	ldr	r3, [r3, #16]
 8011650:	f003 031f 	and.w	r3, r3, #31
 8011654:	2b00      	cmp	r3, #0
 8011656:	d104      	bne.n	8011662 <USB_EPStartXfer+0x11a4>
 8011658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801165c:	3b01      	subs	r3, #1
 801165e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011662:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011666:	881b      	ldrh	r3, [r3, #0]
 8011668:	b29a      	uxth	r2, r3
 801166a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801166e:	b29b      	uxth	r3, r3
 8011670:	029b      	lsls	r3, r3, #10
 8011672:	b29b      	uxth	r3, r3
 8011674:	4313      	orrs	r3, r2
 8011676:	b29b      	uxth	r3, r3
 8011678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801167c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011680:	b29a      	uxth	r2, r3
 8011682:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011686:	801a      	strh	r2, [r3, #0]
 8011688:	e069      	b.n	801175e <USB_EPStartXfer+0x12a0>
 801168a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	691b      	ldr	r3, [r3, #16]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d10c      	bne.n	80116b4 <USB_EPStartXfer+0x11f6>
 801169a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801169e:	881b      	ldrh	r3, [r3, #0]
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116aa:	b29a      	uxth	r2, r3
 80116ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80116b0:	801a      	strh	r2, [r3, #0]
 80116b2:	e054      	b.n	801175e <USB_EPStartXfer+0x12a0>
 80116b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	691b      	ldr	r3, [r3, #16]
 80116c0:	085b      	lsrs	r3, r3, #1
 80116c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80116c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	691b      	ldr	r3, [r3, #16]
 80116d2:	f003 0301 	and.w	r3, r3, #1
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d004      	beq.n	80116e4 <USB_EPStartXfer+0x1226>
 80116da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116de:	3301      	adds	r3, #1
 80116e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80116e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80116e8:	881b      	ldrh	r3, [r3, #0]
 80116ea:	b29a      	uxth	r2, r3
 80116ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	029b      	lsls	r3, r3, #10
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	4313      	orrs	r3, r2
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80116fe:	801a      	strh	r2, [r3, #0]
 8011700:	e02d      	b.n	801175e <USB_EPStartXfer+0x12a0>
 8011702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	785b      	ldrb	r3, [r3, #1]
 801170e:	2b01      	cmp	r3, #1
 8011710:	d125      	bne.n	801175e <USB_EPStartXfer+0x12a0>
 8011712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011720:	b29b      	uxth	r3, r3
 8011722:	461a      	mov	r2, r3
 8011724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011728:	4413      	add	r3, r2
 801172a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801172e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	00da      	lsls	r2, r3, #3
 801173c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011740:	4413      	add	r3, r2
 8011742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801174a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801174e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	691b      	ldr	r3, [r3, #16]
 8011756:	b29a      	uxth	r2, r3
 8011758:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801175c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801175e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	69db      	ldr	r3, [r3, #28]
 801176a:	2b00      	cmp	r3, #0
 801176c:	f000 8218 	beq.w	8011ba0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011778:	681a      	ldr	r2, [r3, #0]
 801177a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801177e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	781b      	ldrb	r3, [r3, #0]
 8011786:	009b      	lsls	r3, r3, #2
 8011788:	4413      	add	r3, r2
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011790:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011798:	2b00      	cmp	r3, #0
 801179a:	d005      	beq.n	80117a8 <USB_EPStartXfer+0x12ea>
 801179c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80117a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d10d      	bne.n	80117c4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80117a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80117ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	f040 81f5 	bne.w	8011ba0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80117b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80117ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f040 81ee 	bne.w	8011ba0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80117c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	4413      	add	r3, r2
 80117de:	881b      	ldrh	r3, [r3, #0]
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117ea:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80117ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	009b      	lsls	r3, r3, #2
 8011806:	441a      	add	r2, r3
 8011808:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801180c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801181c:	b29b      	uxth	r3, r3
 801181e:	8013      	strh	r3, [r2, #0]
 8011820:	e1be      	b.n	8011ba0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	78db      	ldrb	r3, [r3, #3]
 801182e:	2b01      	cmp	r3, #1
 8011830:	f040 81b4 	bne.w	8011b9c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	699a      	ldr	r2, [r3, #24]
 8011840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	429a      	cmp	r2, r3
 801184e:	d917      	bls.n	8011880 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	691b      	ldr	r3, [r3, #16]
 801185c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	699a      	ldr	r2, [r3, #24]
 801186c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011870:	1ad2      	subs	r2, r2, r3
 8011872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	619a      	str	r2, [r3, #24]
 801187e:	e00e      	b.n	801189e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	699b      	ldr	r3, [r3, #24]
 801188c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2200      	movs	r2, #0
 801189c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801189e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	785b      	ldrb	r3, [r3, #1]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	f040 8085 	bne.w	80119ba <USB_EPStartXfer+0x14fc>
 80118b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80118be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	461a      	mov	r2, r3
 80118d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80118d4:	4413      	add	r3, r2
 80118d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80118da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	00da      	lsls	r2, r3, #3
 80118e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80118ec:	4413      	add	r3, r2
 80118ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80118f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80118f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80118fa:	881b      	ldrh	r3, [r3, #0]
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011902:	b29a      	uxth	r2, r3
 8011904:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011908:	801a      	strh	r2, [r3, #0]
 801190a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801190e:	2b3e      	cmp	r3, #62	; 0x3e
 8011910:	d923      	bls.n	801195a <USB_EPStartXfer+0x149c>
 8011912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011916:	095b      	lsrs	r3, r3, #5
 8011918:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801191c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011920:	f003 031f 	and.w	r3, r3, #31
 8011924:	2b00      	cmp	r3, #0
 8011926:	d104      	bne.n	8011932 <USB_EPStartXfer+0x1474>
 8011928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801192c:	3b01      	subs	r3, #1
 801192e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011936:	881b      	ldrh	r3, [r3, #0]
 8011938:	b29a      	uxth	r2, r3
 801193a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801193e:	b29b      	uxth	r3, r3
 8011940:	029b      	lsls	r3, r3, #10
 8011942:	b29b      	uxth	r3, r3
 8011944:	4313      	orrs	r3, r2
 8011946:	b29b      	uxth	r3, r3
 8011948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801194c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011950:	b29a      	uxth	r2, r3
 8011952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011956:	801a      	strh	r2, [r3, #0]
 8011958:	e060      	b.n	8011a1c <USB_EPStartXfer+0x155e>
 801195a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801195e:	2b00      	cmp	r3, #0
 8011960:	d10c      	bne.n	801197c <USB_EPStartXfer+0x14be>
 8011962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011966:	881b      	ldrh	r3, [r3, #0]
 8011968:	b29b      	uxth	r3, r3
 801196a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801196e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011972:	b29a      	uxth	r2, r3
 8011974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011978:	801a      	strh	r2, [r3, #0]
 801197a:	e04f      	b.n	8011a1c <USB_EPStartXfer+0x155e>
 801197c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011980:	085b      	lsrs	r3, r3, #1
 8011982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801198a:	f003 0301 	and.w	r3, r3, #1
 801198e:	2b00      	cmp	r3, #0
 8011990:	d004      	beq.n	801199c <USB_EPStartXfer+0x14de>
 8011992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011996:	3301      	adds	r3, #1
 8011998:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801199c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80119a0:	881b      	ldrh	r3, [r3, #0]
 80119a2:	b29a      	uxth	r2, r3
 80119a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	029b      	lsls	r3, r3, #10
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	4313      	orrs	r3, r2
 80119b0:	b29a      	uxth	r2, r3
 80119b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80119b6:	801a      	strh	r2, [r3, #0]
 80119b8:	e030      	b.n	8011a1c <USB_EPStartXfer+0x155e>
 80119ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	785b      	ldrb	r3, [r3, #1]
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d128      	bne.n	8011a1c <USB_EPStartXfer+0x155e>
 80119ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80119d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	461a      	mov	r2, r3
 80119ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80119ee:	4413      	add	r3, r2
 80119f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80119f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	00da      	lsls	r2, r3, #3
 8011a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011a06:	4413      	add	r3, r2
 8011a08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a14:	b29a      	uxth	r2, r3
 8011a16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011a1a:	801a      	strh	r2, [r3, #0]
 8011a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	785b      	ldrb	r3, [r3, #1]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	f040 8085 	bne.w	8011b46 <USB_EPStartXfer+0x1688>
 8011a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a60:	4413      	add	r3, r2
 8011a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	00da      	lsls	r2, r3, #3
 8011a74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a78:	4413      	add	r3, r2
 8011a7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011a82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a8e:	b29a      	uxth	r2, r3
 8011a90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a94:	801a      	strh	r2, [r3, #0]
 8011a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8011a9c:	d923      	bls.n	8011ae6 <USB_EPStartXfer+0x1628>
 8011a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aa2:	095b      	lsrs	r3, r3, #5
 8011aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aac:	f003 031f 	and.w	r3, r3, #31
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d104      	bne.n	8011abe <USB_EPStartXfer+0x1600>
 8011ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011ac2:	881b      	ldrh	r3, [r3, #0]
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	029b      	lsls	r3, r3, #10
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011adc:	b29a      	uxth	r2, r3
 8011ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011ae2:	801a      	strh	r2, [r3, #0]
 8011ae4:	e05c      	b.n	8011ba0 <USB_EPStartXfer+0x16e2>
 8011ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d10c      	bne.n	8011b08 <USB_EPStartXfer+0x164a>
 8011aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011af2:	881b      	ldrh	r3, [r3, #0]
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011b04:	801a      	strh	r2, [r3, #0]
 8011b06:	e04b      	b.n	8011ba0 <USB_EPStartXfer+0x16e2>
 8011b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b0c:	085b      	lsrs	r3, r3, #1
 8011b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b16:	f003 0301 	and.w	r3, r3, #1
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d004      	beq.n	8011b28 <USB_EPStartXfer+0x166a>
 8011b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011b22:	3301      	adds	r3, #1
 8011b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011b28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011b2c:	881b      	ldrh	r3, [r3, #0]
 8011b2e:	b29a      	uxth	r2, r3
 8011b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	029b      	lsls	r3, r3, #10
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	4313      	orrs	r3, r2
 8011b3c:	b29a      	uxth	r2, r3
 8011b3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011b42:	801a      	strh	r2, [r3, #0]
 8011b44:	e02c      	b.n	8011ba0 <USB_EPStartXfer+0x16e2>
 8011b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	785b      	ldrb	r3, [r3, #1]
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d124      	bne.n	8011ba0 <USB_EPStartXfer+0x16e2>
 8011b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	461a      	mov	r2, r3
 8011b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011b6c:	4413      	add	r3, r2
 8011b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	00da      	lsls	r2, r3, #3
 8011b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011b84:	4413      	add	r3, r2
 8011b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011b98:	801a      	strh	r2, [r3, #0]
 8011b9a:	e001      	b.n	8011ba0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	e03a      	b.n	8011c16 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ba8:	681a      	ldr	r2, [r3, #0]
 8011baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	009b      	lsls	r3, r3, #2
 8011bb8:	4413      	add	r3, r2
 8011bba:	881b      	ldrh	r3, [r3, #0]
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011bc6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011bca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011bce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011bd2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011bd6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011bde:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	441a      	add	r2, r3
 8011bfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b085      	sub	sp, #20
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	785b      	ldrb	r3, [r3, #1]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d020      	beq.n	8011c74 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	4413      	add	r3, r2
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c48:	81bb      	strh	r3, [r7, #12]
 8011c4a:	89bb      	ldrh	r3, [r7, #12]
 8011c4c:	f083 0310 	eor.w	r3, r3, #16
 8011c50:	81bb      	strh	r3, [r7, #12]
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	009b      	lsls	r3, r3, #2
 8011c5a:	441a      	add	r2, r3
 8011c5c:	89bb      	ldrh	r3, [r7, #12]
 8011c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	8013      	strh	r3, [r2, #0]
 8011c72:	e01f      	b.n	8011cb4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	4413      	add	r3, r2
 8011c7e:	881b      	ldrh	r3, [r3, #0]
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c8a:	81fb      	strh	r3, [r7, #14]
 8011c8c:	89fb      	ldrh	r3, [r7, #14]
 8011c8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011c92:	81fb      	strh	r3, [r7, #14]
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	009b      	lsls	r3, r3, #2
 8011c9c:	441a      	add	r2, r3
 8011c9e:	89fb      	ldrh	r3, [r7, #14]
 8011ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011cb4:	2300      	movs	r3, #0
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3714      	adds	r7, #20
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc0:	4770      	bx	lr

08011cc2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011cc2:	b480      	push	{r7}
 8011cc4:	b087      	sub	sp, #28
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
 8011cca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	7b1b      	ldrb	r3, [r3, #12]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	f040 809d 	bne.w	8011e10 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	785b      	ldrb	r3, [r3, #1]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d04c      	beq.n	8011d78 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011cde:	687a      	ldr	r2, [r7, #4]
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	781b      	ldrb	r3, [r3, #0]
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	4413      	add	r3, r2
 8011ce8:	881b      	ldrh	r3, [r3, #0]
 8011cea:	823b      	strh	r3, [r7, #16]
 8011cec:	8a3b      	ldrh	r3, [r7, #16]
 8011cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d01b      	beq.n	8011d2e <USB_EPClearStall+0x6c>
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	4413      	add	r3, r2
 8011d00:	881b      	ldrh	r3, [r3, #0]
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d0c:	81fb      	strh	r3, [r7, #14]
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	441a      	add	r2, r3
 8011d18:	89fb      	ldrh	r3, [r7, #14]
 8011d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	78db      	ldrb	r3, [r3, #3]
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d06c      	beq.n	8011e10 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011d36:	687a      	ldr	r2, [r7, #4]
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	4413      	add	r3, r2
 8011d40:	881b      	ldrh	r3, [r3, #0]
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d4c:	81bb      	strh	r3, [r7, #12]
 8011d4e:	89bb      	ldrh	r3, [r7, #12]
 8011d50:	f083 0320 	eor.w	r3, r3, #32
 8011d54:	81bb      	strh	r3, [r7, #12]
 8011d56:	687a      	ldr	r2, [r7, #4]
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	781b      	ldrb	r3, [r3, #0]
 8011d5c:	009b      	lsls	r3, r3, #2
 8011d5e:	441a      	add	r2, r3
 8011d60:	89bb      	ldrh	r3, [r7, #12]
 8011d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	8013      	strh	r3, [r2, #0]
 8011d76:	e04b      	b.n	8011e10 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011d78:	687a      	ldr	r2, [r7, #4]
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	4413      	add	r3, r2
 8011d82:	881b      	ldrh	r3, [r3, #0]
 8011d84:	82fb      	strh	r3, [r7, #22]
 8011d86:	8afb      	ldrh	r3, [r7, #22]
 8011d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d01b      	beq.n	8011dc8 <USB_EPClearStall+0x106>
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	009b      	lsls	r3, r3, #2
 8011d98:	4413      	add	r3, r2
 8011d9a:	881b      	ldrh	r3, [r3, #0]
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011da6:	82bb      	strh	r3, [r7, #20]
 8011da8:	687a      	ldr	r2, [r7, #4]
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	009b      	lsls	r3, r3, #2
 8011db0:	441a      	add	r2, r3
 8011db2:	8abb      	ldrh	r3, [r7, #20]
 8011db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	4413      	add	r3, r2
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011dde:	827b      	strh	r3, [r7, #18]
 8011de0:	8a7b      	ldrh	r3, [r7, #18]
 8011de2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011de6:	827b      	strh	r3, [r7, #18]
 8011de8:	8a7b      	ldrh	r3, [r7, #18]
 8011dea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011dee:	827b      	strh	r3, [r7, #18]
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	441a      	add	r2, r3
 8011dfa:	8a7b      	ldrh	r3, [r7, #18]
 8011dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e0c:	b29b      	uxth	r3, r3
 8011e0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011e10:	2300      	movs	r3, #0
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	371c      	adds	r7, #28
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr

08011e1e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011e1e:	b480      	push	{r7}
 8011e20:	b083      	sub	sp, #12
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
 8011e26:	460b      	mov	r3, r1
 8011e28:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011e2a:	78fb      	ldrb	r3, [r7, #3]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d103      	bne.n	8011e38 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2280      	movs	r2, #128	; 0x80
 8011e34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8011e38:	2300      	movs	r3, #0
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	370c      	adds	r7, #12
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr

08011e46 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011e46:	b480      	push	{r7}
 8011e48:	b083      	sub	sp, #12
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011e66:	2300      	movs	r3, #0
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	370c      	adds	r7, #12
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr

08011e74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011e74:	b480      	push	{r7}
 8011e76:	b085      	sub	sp, #20
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011e86:	68fb      	ldr	r3, [r7, #12]
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3714      	adds	r7, #20
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e92:	4770      	bx	lr

08011e94 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b08b      	sub	sp, #44	; 0x2c
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	60f8      	str	r0, [r7, #12]
 8011e9c:	60b9      	str	r1, [r7, #8]
 8011e9e:	4611      	mov	r1, r2
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	460b      	mov	r3, r1
 8011ea4:	80fb      	strh	r3, [r7, #6]
 8011ea6:	4613      	mov	r3, r2
 8011ea8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011eaa:	88bb      	ldrh	r3, [r7, #4]
 8011eac:	3301      	adds	r3, #1
 8011eae:	085b      	lsrs	r3, r3, #1
 8011eb0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011eba:	88fa      	ldrh	r2, [r7, #6]
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ec4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8011eca:	e01b      	b.n	8011f04 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	021b      	lsls	r3, r3, #8
 8011eda:	b21a      	sxth	r2, r3
 8011edc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011ee0:	4313      	orrs	r3, r2
 8011ee2:	b21b      	sxth	r3, r3
 8011ee4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011ee6:	6a3b      	ldr	r3, [r7, #32]
 8011ee8:	8a7a      	ldrh	r2, [r7, #18]
 8011eea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011eec:	6a3b      	ldr	r3, [r7, #32]
 8011eee:	3302      	adds	r3, #2
 8011ef0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	3301      	adds	r3, #1
 8011efc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f00:	3b01      	subs	r3, #1
 8011f02:	627b      	str	r3, [r7, #36]	; 0x24
 8011f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d1e0      	bne.n	8011ecc <USB_WritePMA+0x38>
  }
}
 8011f0a:	bf00      	nop
 8011f0c:	bf00      	nop
 8011f0e:	372c      	adds	r7, #44	; 0x2c
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b08b      	sub	sp, #44	; 0x2c
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	4611      	mov	r1, r2
 8011f24:	461a      	mov	r2, r3
 8011f26:	460b      	mov	r3, r1
 8011f28:	80fb      	strh	r3, [r7, #6]
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011f2e:	88bb      	ldrh	r3, [r7, #4]
 8011f30:	085b      	lsrs	r3, r3, #1
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011f3e:	88fa      	ldrh	r2, [r7, #6]
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	4413      	add	r3, r2
 8011f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011f48:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011f4a:	69bb      	ldr	r3, [r7, #24]
 8011f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8011f4e:	e018      	b.n	8011f82 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8011f50:	6a3b      	ldr	r3, [r7, #32]
 8011f52:	881b      	ldrh	r3, [r3, #0]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011f58:	6a3b      	ldr	r3, [r7, #32]
 8011f5a:	3302      	adds	r3, #2
 8011f5c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	b2da      	uxtb	r2, r3
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011f66:	69fb      	ldr	r3, [r7, #28]
 8011f68:	3301      	adds	r3, #1
 8011f6a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	0a1b      	lsrs	r3, r3, #8
 8011f70:	b2da      	uxtb	r2, r3
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011f76:	69fb      	ldr	r3, [r7, #28]
 8011f78:	3301      	adds	r3, #1
 8011f7a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7e:	3b01      	subs	r3, #1
 8011f80:	627b      	str	r3, [r7, #36]	; 0x24
 8011f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1e3      	bne.n	8011f50 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011f88:	88bb      	ldrh	r3, [r7, #4]
 8011f8a:	f003 0301 	and.w	r3, r3, #1
 8011f8e:	b29b      	uxth	r3, r3
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d007      	beq.n	8011fa4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011f94:	6a3b      	ldr	r3, [r7, #32]
 8011f96:	881b      	ldrh	r3, [r3, #0]
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	b2da      	uxtb	r2, r3
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	701a      	strb	r2, [r3, #0]
  }
}
 8011fa4:	bf00      	nop
 8011fa6:	372c      	adds	r7, #44	; 0x2c
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr

08011fb0 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8011fb0:	b480      	push	{r7}
 8011fb2:	b085      	sub	sp, #20
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	1c5a      	adds	r2, r3, #1
 8011fbc:	607a      	str	r2, [r7, #4]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8011fc2:	89fb      	ldrh	r3, [r7, #14]
 8011fc4:	021b      	lsls	r3, r3, #8
 8011fc6:	b21a      	sxth	r2, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	b21b      	sxth	r3, r3
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	b21b      	sxth	r3, r3
 8011fd2:	b29b      	uxth	r3, r3
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3714      	adds	r7, #20
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b085      	sub	sp, #20
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	683a      	ldr	r2, [r7, #0]
 8011fee:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2204      	movs	r2, #4
 8011ff4:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2204      	movs	r2, #4
 8011ffa:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012004:	b29a      	uxth	r2, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801200c:	b29b      	uxth	r3, r3
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	b29b      	uxth	r3, r3
 8012012:	3b01      	subs	r3, #1
 8012014:	b29b      	uxth	r3, r3
 8012016:	b21a      	sxth	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012024:	b29a      	uxth	r2, r3
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801202c:	b29b      	uxth	r3, r3
 801202e:	1ad3      	subs	r3, r2, r3
 8012030:	b29b      	uxth	r3, r3
 8012032:	3b01      	subs	r3, #1
 8012034:	b29b      	uxth	r3, r3
 8012036:	b21a      	sxth	r2, r3
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2201      	movs	r2, #1
 8012054:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2201      	movs	r2, #1
 801205c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2200      	movs	r2, #0
 8012064:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2200      	movs	r2, #0
 801206a:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2200      	movs	r2, #0
 8012070:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2200      	movs	r2, #0
 8012078:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2200      	movs	r2, #0
 8012080:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2200      	movs	r2, #0
 8012086:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2200      	movs	r2, #0
 801208c:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2200      	movs	r2, #0
 8012092:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2200      	movs	r2, #0
 8012098:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2200      	movs	r2, #0
 801209e:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80120a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2200      	movs	r2, #0
 80120b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2200      	movs	r2, #0
 80120c0:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2200      	movs	r2, #0
 80120c6:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80120ce:	2300      	movs	r3, #0
 80120d0:	73fb      	strb	r3, [r7, #15]
 80120d2:	e010      	b.n	80120f6 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 80120d4:	7bfb      	ldrb	r3, [r7, #15]
 80120d6:	687a      	ldr	r2, [r7, #4]
 80120d8:	330a      	adds	r3, #10
 80120da:	00db      	lsls	r3, r3, #3
 80120dc:	4413      	add	r3, r2
 80120de:	2200      	movs	r2, #0
 80120e0:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80120e2:	7bfb      	ldrb	r3, [r7, #15]
 80120e4:	687a      	ldr	r2, [r7, #4]
 80120e6:	330a      	adds	r3, #10
 80120e8:	00db      	lsls	r3, r3, #3
 80120ea:	4413      	add	r3, r2
 80120ec:	2200      	movs	r2, #0
 80120ee:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80120f0:	7bfb      	ldrb	r3, [r7, #15]
 80120f2:	3301      	adds	r3, #1
 80120f4:	73fb      	strb	r3, [r7, #15]
 80120f6:	7bfb      	ldrb	r3, [r7, #15]
 80120f8:	2b03      	cmp	r3, #3
 80120fa:	d9eb      	bls.n	80120d4 <UG_Init+0xf4>
   }

   gui = g;
 80120fc:	4a04      	ldr	r2, [pc, #16]	; (8012110 <UG_Init+0x130>)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6013      	str	r3, [r2, #0]
   return 1;
 8012102:	2301      	movs	r3, #1
}
 8012104:	4618      	mov	r0, r3
 8012106:	3714      	adds	r7, #20
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr
 8012110:	20002090 	.word	0x20002090

08012114 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
  gui->font = font;
 801211c:	4b04      	ldr	r3, [pc, #16]	; (8012130 <UG_FontSelect+0x1c>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012124:	bf00      	nop
 8012126:	370c      	adds	r7, #12
 8012128:	46bd      	mov	sp, r7
 801212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212e:	4770      	bx	lr
 8012130:	20002090 	.word	0x20002090

08012134 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af02      	add	r7, sp, #8
 801213a:	4603      	mov	r3, r0
 801213c:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 801213e:	4b0e      	ldr	r3, [pc, #56]	; (8012178 <UG_FillScreen+0x44>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012148:	b29b      	uxth	r3, r3
 801214a:	3b01      	subs	r3, #1
 801214c:	b29b      	uxth	r3, r3
 801214e:	b21a      	sxth	r2, r3
 8012150:	4b09      	ldr	r3, [pc, #36]	; (8012178 <UG_FillScreen+0x44>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801215a:	b29b      	uxth	r3, r3
 801215c:	3b01      	subs	r3, #1
 801215e:	b29b      	uxth	r3, r3
 8012160:	b219      	sxth	r1, r3
 8012162:	88fb      	ldrh	r3, [r7, #6]
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	460b      	mov	r3, r1
 8012168:	2100      	movs	r1, #0
 801216a:	2000      	movs	r0, #0
 801216c:	f000 f806 	bl	801217c <UG_FillFrame>
}
 8012170:	bf00      	nop
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	20002090 	.word	0x20002090

0801217c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 801217c:	b5b0      	push	{r4, r5, r7, lr}
 801217e:	b086      	sub	sp, #24
 8012180:	af02      	add	r7, sp, #8
 8012182:	4604      	mov	r4, r0
 8012184:	4608      	mov	r0, r1
 8012186:	4611      	mov	r1, r2
 8012188:	461a      	mov	r2, r3
 801218a:	4623      	mov	r3, r4
 801218c:	80fb      	strh	r3, [r7, #6]
 801218e:	4603      	mov	r3, r0
 8012190:	80bb      	strh	r3, [r7, #4]
 8012192:	460b      	mov	r3, r1
 8012194:	807b      	strh	r3, [r7, #2]
 8012196:	4613      	mov	r3, r2
 8012198:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 801219a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801219e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	da05      	bge.n	80121b2 <UG_FillFrame+0x36>
     swap(x1,x2);
 80121a6:	88fb      	ldrh	r3, [r7, #6]
 80121a8:	817b      	strh	r3, [r7, #10]
 80121aa:	887b      	ldrh	r3, [r7, #2]
 80121ac:	80fb      	strh	r3, [r7, #6]
 80121ae:	897b      	ldrh	r3, [r7, #10]
 80121b0:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 80121b2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80121b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	da05      	bge.n	80121ca <UG_FillFrame+0x4e>
     swap(y1,y2);
 80121be:	88bb      	ldrh	r3, [r7, #4]
 80121c0:	813b      	strh	r3, [r7, #8]
 80121c2:	883b      	ldrh	r3, [r7, #0]
 80121c4:	80bb      	strh	r3, [r7, #4]
 80121c6:	893b      	ldrh	r3, [r7, #8]
 80121c8:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80121ca:	4b24      	ldr	r3, [pc, #144]	; (801225c <UG_FillFrame+0xe0>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80121d2:	f003 0302 	and.w	r3, r3, #2
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d012      	beq.n	8012200 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80121da:	4b20      	ldr	r3, [pc, #128]	; (801225c <UG_FillFrame+0xe0>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121e0:	461d      	mov	r5, r3
 80121e2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80121e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80121ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80121ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80121f2:	8c3b      	ldrh	r3, [r7, #32]
 80121f4:	9300      	str	r3, [sp, #0]
 80121f6:	4623      	mov	r3, r4
 80121f8:	47a8      	blx	r5
 80121fa:	4603      	mov	r3, r0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d028      	beq.n	8012252 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8012200:	88bb      	ldrh	r3, [r7, #4]
 8012202:	81bb      	strh	r3, [r7, #12]
 8012204:	e01e      	b.n	8012244 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 8012206:	88fb      	ldrh	r3, [r7, #6]
 8012208:	81fb      	strh	r3, [r7, #14]
 801220a:	e00f      	b.n	801222c <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 801220c:	4b13      	ldr	r3, [pc, #76]	; (801225c <UG_FillFrame+0xe0>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	8c3a      	ldrh	r2, [r7, #32]
 8012216:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 801221a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801221e:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8012220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012224:	b29b      	uxth	r3, r3
 8012226:	3301      	adds	r3, #1
 8012228:	b29b      	uxth	r3, r3
 801222a:	81fb      	strh	r3, [r7, #14]
 801222c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012230:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012234:	429a      	cmp	r2, r3
 8012236:	dde9      	ble.n	801220c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8012238:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801223c:	b29b      	uxth	r3, r3
 801223e:	3301      	adds	r3, #1
 8012240:	b29b      	uxth	r3, r3
 8012242:	81bb      	strh	r3, [r7, #12]
 8012244:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012248:	f9b7 3000 	ldrsh.w	r3, [r7]
 801224c:	429a      	cmp	r2, r3
 801224e:	ddda      	ble.n	8012206 <UG_FillFrame+0x8a>
 8012250:	e000      	b.n	8012254 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012252:	bf00      	nop
      }
   }
}
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bdb0      	pop	{r4, r5, r7, pc}
 801225a:	bf00      	nop
 801225c:	20002090 	.word	0x20002090

08012260 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012260:	b590      	push	{r4, r7, lr}
 8012262:	b085      	sub	sp, #20
 8012264:	af02      	add	r7, sp, #8
 8012266:	4604      	mov	r4, r0
 8012268:	4608      	mov	r0, r1
 801226a:	4611      	mov	r1, r2
 801226c:	461a      	mov	r2, r3
 801226e:	4623      	mov	r3, r4
 8012270:	80fb      	strh	r3, [r7, #6]
 8012272:	4603      	mov	r3, r0
 8012274:	80bb      	strh	r3, [r7, #4]
 8012276:	460b      	mov	r3, r1
 8012278:	807b      	strh	r3, [r7, #2]
 801227a:	4613      	mov	r3, r2
 801227c:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 801227e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8012282:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012286:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801228a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801228e:	8b3b      	ldrh	r3, [r7, #24]
 8012290:	9300      	str	r3, [sp, #0]
 8012292:	4623      	mov	r3, r4
 8012294:	f000 f912 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8012298:	f9b7 4000 	ldrsh.w	r4, [r7]
 801229c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80122a0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80122a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80122a8:	8b3b      	ldrh	r3, [r7, #24]
 80122aa:	9300      	str	r3, [sp, #0]
 80122ac:	4623      	mov	r3, r4
 80122ae:	f000 f905 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 80122b2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80122b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80122ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80122be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80122c2:	8b3b      	ldrh	r3, [r7, #24]
 80122c4:	9300      	str	r3, [sp, #0]
 80122c6:	4623      	mov	r3, r4
 80122c8:	f000 f8f8 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 80122cc:	f9b7 4000 	ldrsh.w	r4, [r7]
 80122d0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80122d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80122d8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80122dc:	8b3b      	ldrh	r3, [r7, #24]
 80122de:	9300      	str	r3, [sp, #0]
 80122e0:	4623      	mov	r3, r4
 80122e2:	f000 f8eb 	bl	80124bc <UG_DrawLine>
}
 80122e6:	bf00      	nop
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd90      	pop	{r4, r7, pc}
	...

080122f0 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 80122f0:	b590      	push	{r4, r7, lr}
 80122f2:	b087      	sub	sp, #28
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	4604      	mov	r4, r0
 80122f8:	4608      	mov	r0, r1
 80122fa:	4611      	mov	r1, r2
 80122fc:	461a      	mov	r2, r3
 80122fe:	4623      	mov	r3, r4
 8012300:	80fb      	strh	r3, [r7, #6]
 8012302:	4603      	mov	r3, r0
 8012304:	80bb      	strh	r3, [r7, #4]
 8012306:	460b      	mov	r3, r1
 8012308:	807b      	strh	r3, [r7, #2]
 801230a:	4613      	mov	r3, r2
 801230c:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 801230e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012312:	2b00      	cmp	r3, #0
 8012314:	f2c0 80c8 	blt.w	80124a8 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8012318:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801231c:	2b00      	cmp	r3, #0
 801231e:	f2c0 80c5 	blt.w	80124ac <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8012322:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012326:	2b00      	cmp	r3, #0
 8012328:	f340 80c2 	ble.w	80124b0 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 801232c:	887b      	ldrh	r3, [r7, #2]
 801232e:	005b      	lsls	r3, r3, #1
 8012330:	b29b      	uxth	r3, r3
 8012332:	f1c3 0301 	rsb	r3, r3, #1
 8012336:	b29b      	uxth	r3, r3
 8012338:	827b      	strh	r3, [r7, #18]
   yd = 0;
 801233a:	2300      	movs	r3, #0
 801233c:	823b      	strh	r3, [r7, #16]
   e = 0;
 801233e:	2300      	movs	r3, #0
 8012340:	81fb      	strh	r3, [r7, #14]
   x = r;
 8012342:	887b      	ldrh	r3, [r7, #2]
 8012344:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8012346:	2300      	movs	r3, #0
 8012348:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 801234a:	e0a5      	b.n	8012498 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 801234c:	4b5a      	ldr	r3, [pc, #360]	; (80124b8 <UG_DrawCircle+0x1c8>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	88f9      	ldrh	r1, [r7, #6]
 8012356:	8afa      	ldrh	r2, [r7, #22]
 8012358:	1a8a      	subs	r2, r1, r2
 801235a:	b292      	uxth	r2, r2
 801235c:	b210      	sxth	r0, r2
 801235e:	88b9      	ldrh	r1, [r7, #4]
 8012360:	8aba      	ldrh	r2, [r7, #20]
 8012362:	440a      	add	r2, r1
 8012364:	b292      	uxth	r2, r2
 8012366:	b211      	sxth	r1, r2
 8012368:	883a      	ldrh	r2, [r7, #0]
 801236a:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 801236c:	4b52      	ldr	r3, [pc, #328]	; (80124b8 <UG_DrawCircle+0x1c8>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	88f9      	ldrh	r1, [r7, #6]
 8012376:	8afa      	ldrh	r2, [r7, #22]
 8012378:	1a8a      	subs	r2, r1, r2
 801237a:	b292      	uxth	r2, r2
 801237c:	b210      	sxth	r0, r2
 801237e:	88b9      	ldrh	r1, [r7, #4]
 8012380:	8aba      	ldrh	r2, [r7, #20]
 8012382:	1a8a      	subs	r2, r1, r2
 8012384:	b292      	uxth	r2, r2
 8012386:	b211      	sxth	r1, r2
 8012388:	883a      	ldrh	r2, [r7, #0]
 801238a:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 801238c:	4b4a      	ldr	r3, [pc, #296]	; (80124b8 <UG_DrawCircle+0x1c8>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	88f9      	ldrh	r1, [r7, #6]
 8012396:	8afa      	ldrh	r2, [r7, #22]
 8012398:	440a      	add	r2, r1
 801239a:	b292      	uxth	r2, r2
 801239c:	b210      	sxth	r0, r2
 801239e:	88b9      	ldrh	r1, [r7, #4]
 80123a0:	8aba      	ldrh	r2, [r7, #20]
 80123a2:	440a      	add	r2, r1
 80123a4:	b292      	uxth	r2, r2
 80123a6:	b211      	sxth	r1, r2
 80123a8:	883a      	ldrh	r2, [r7, #0]
 80123aa:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 80123ac:	4b42      	ldr	r3, [pc, #264]	; (80124b8 <UG_DrawCircle+0x1c8>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	88f9      	ldrh	r1, [r7, #6]
 80123b6:	8afa      	ldrh	r2, [r7, #22]
 80123b8:	440a      	add	r2, r1
 80123ba:	b292      	uxth	r2, r2
 80123bc:	b210      	sxth	r0, r2
 80123be:	88b9      	ldrh	r1, [r7, #4]
 80123c0:	8aba      	ldrh	r2, [r7, #20]
 80123c2:	1a8a      	subs	r2, r1, r2
 80123c4:	b292      	uxth	r2, r2
 80123c6:	b211      	sxth	r1, r2
 80123c8:	883a      	ldrh	r2, [r7, #0]
 80123ca:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 80123cc:	4b3a      	ldr	r3, [pc, #232]	; (80124b8 <UG_DrawCircle+0x1c8>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	88f9      	ldrh	r1, [r7, #6]
 80123d6:	8aba      	ldrh	r2, [r7, #20]
 80123d8:	1a8a      	subs	r2, r1, r2
 80123da:	b292      	uxth	r2, r2
 80123dc:	b210      	sxth	r0, r2
 80123de:	88b9      	ldrh	r1, [r7, #4]
 80123e0:	8afa      	ldrh	r2, [r7, #22]
 80123e2:	440a      	add	r2, r1
 80123e4:	b292      	uxth	r2, r2
 80123e6:	b211      	sxth	r1, r2
 80123e8:	883a      	ldrh	r2, [r7, #0]
 80123ea:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 80123ec:	4b32      	ldr	r3, [pc, #200]	; (80124b8 <UG_DrawCircle+0x1c8>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	88f9      	ldrh	r1, [r7, #6]
 80123f6:	8aba      	ldrh	r2, [r7, #20]
 80123f8:	1a8a      	subs	r2, r1, r2
 80123fa:	b292      	uxth	r2, r2
 80123fc:	b210      	sxth	r0, r2
 80123fe:	88b9      	ldrh	r1, [r7, #4]
 8012400:	8afa      	ldrh	r2, [r7, #22]
 8012402:	1a8a      	subs	r2, r1, r2
 8012404:	b292      	uxth	r2, r2
 8012406:	b211      	sxth	r1, r2
 8012408:	883a      	ldrh	r2, [r7, #0]
 801240a:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 801240c:	4b2a      	ldr	r3, [pc, #168]	; (80124b8 <UG_DrawCircle+0x1c8>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	88f9      	ldrh	r1, [r7, #6]
 8012416:	8aba      	ldrh	r2, [r7, #20]
 8012418:	440a      	add	r2, r1
 801241a:	b292      	uxth	r2, r2
 801241c:	b210      	sxth	r0, r2
 801241e:	88b9      	ldrh	r1, [r7, #4]
 8012420:	8afa      	ldrh	r2, [r7, #22]
 8012422:	440a      	add	r2, r1
 8012424:	b292      	uxth	r2, r2
 8012426:	b211      	sxth	r1, r2
 8012428:	883a      	ldrh	r2, [r7, #0]
 801242a:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 801242c:	4b22      	ldr	r3, [pc, #136]	; (80124b8 <UG_DrawCircle+0x1c8>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	88f9      	ldrh	r1, [r7, #6]
 8012436:	8aba      	ldrh	r2, [r7, #20]
 8012438:	440a      	add	r2, r1
 801243a:	b292      	uxth	r2, r2
 801243c:	b210      	sxth	r0, r2
 801243e:	88b9      	ldrh	r1, [r7, #4]
 8012440:	8afa      	ldrh	r2, [r7, #22]
 8012442:	1a8a      	subs	r2, r1, r2
 8012444:	b292      	uxth	r2, r2
 8012446:	b211      	sxth	r1, r2
 8012448:	883a      	ldrh	r2, [r7, #0]
 801244a:	4798      	blx	r3

      y++;
 801244c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012450:	b29b      	uxth	r3, r3
 8012452:	3301      	adds	r3, #1
 8012454:	b29b      	uxth	r3, r3
 8012456:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8012458:	89fa      	ldrh	r2, [r7, #14]
 801245a:	8a3b      	ldrh	r3, [r7, #16]
 801245c:	4413      	add	r3, r2
 801245e:	b29b      	uxth	r3, r3
 8012460:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8012462:	8a3b      	ldrh	r3, [r7, #16]
 8012464:	3302      	adds	r3, #2
 8012466:	b29b      	uxth	r3, r3
 8012468:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 801246a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801246e:	005a      	lsls	r2, r3, #1
 8012470:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012474:	4413      	add	r3, r2
 8012476:	2b00      	cmp	r3, #0
 8012478:	dd0e      	ble.n	8012498 <UG_DrawCircle+0x1a8>
      {
         x--;
 801247a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801247e:	b29b      	uxth	r3, r3
 8012480:	3b01      	subs	r3, #1
 8012482:	b29b      	uxth	r3, r3
 8012484:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8012486:	89fa      	ldrh	r2, [r7, #14]
 8012488:	8a7b      	ldrh	r3, [r7, #18]
 801248a:	4413      	add	r3, r2
 801248c:	b29b      	uxth	r3, r3
 801248e:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8012490:	8a7b      	ldrh	r3, [r7, #18]
 8012492:	3302      	adds	r3, #2
 8012494:	b29b      	uxth	r3, r3
 8012496:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8012498:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801249c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	f6bf af53 	bge.w	801234c <UG_DrawCircle+0x5c>
 80124a6:	e004      	b.n	80124b2 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 80124a8:	bf00      	nop
 80124aa:	e002      	b.n	80124b2 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 80124ac:	bf00      	nop
 80124ae:	e000      	b.n	80124b2 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 80124b0:	bf00      	nop
      }
   }
}
 80124b2:	371c      	adds	r7, #28
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd90      	pop	{r4, r7, pc}
 80124b8:	20002090 	.word	0x20002090

080124bc <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80124bc:	b5b0      	push	{r4, r5, r7, lr}
 80124be:	b08a      	sub	sp, #40	; 0x28
 80124c0:	af02      	add	r7, sp, #8
 80124c2:	4604      	mov	r4, r0
 80124c4:	4608      	mov	r0, r1
 80124c6:	4611      	mov	r1, r2
 80124c8:	461a      	mov	r2, r3
 80124ca:	4623      	mov	r3, r4
 80124cc:	80fb      	strh	r3, [r7, #6]
 80124ce:	4603      	mov	r3, r0
 80124d0:	80bb      	strh	r3, [r7, #4]
 80124d2:	460b      	mov	r3, r1
 80124d4:	807b      	strh	r3, [r7, #2]
 80124d6:	4613      	mov	r3, r2
 80124d8:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80124da:	4b67      	ldr	r3, [pc, #412]	; (8012678 <UG_DrawLine+0x1bc>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80124e2:	f003 0302 	and.w	r3, r3, #2
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d013      	beq.n	8012512 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80124ea:	4b63      	ldr	r3, [pc, #396]	; (8012678 <UG_DrawLine+0x1bc>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124f0:	461d      	mov	r5, r3
 80124f2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80124f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80124fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80124fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012502:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012504:	9300      	str	r3, [sp, #0]
 8012506:	4623      	mov	r3, r4
 8012508:	47a8      	blx	r5
 801250a:	4603      	mov	r3, r0
 801250c:	2b00      	cmp	r3, #0
 801250e:	f000 80ae 	beq.w	801266e <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8012512:	887a      	ldrh	r2, [r7, #2]
 8012514:	88fb      	ldrh	r3, [r7, #6]
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	b29b      	uxth	r3, r3
 801251a:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 801251c:	883a      	ldrh	r2, [r7, #0]
 801251e:	88bb      	ldrh	r3, [r7, #4]
 8012520:	1ad3      	subs	r3, r2, r3
 8012522:	b29b      	uxth	r3, r3
 8012524:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8012526:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801252a:	2b00      	cmp	r3, #0
 801252c:	bfb8      	it	lt
 801252e:	425b      	neglt	r3, r3
 8012530:	b29b      	uxth	r3, r3
 8012532:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8012534:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012538:	2b00      	cmp	r3, #0
 801253a:	bfb8      	it	lt
 801253c:	425b      	neglt	r3, r3
 801253e:	b29b      	uxth	r3, r3
 8012540:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8012542:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012546:	2b00      	cmp	r3, #0
 8012548:	dd01      	ble.n	801254e <UG_DrawLine+0x92>
 801254a:	2301      	movs	r3, #1
 801254c:	e001      	b.n	8012552 <UG_DrawLine+0x96>
 801254e:	f04f 33ff 	mov.w	r3, #4294967295
 8012552:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8012554:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012558:	2b00      	cmp	r3, #0
 801255a:	dd01      	ble.n	8012560 <UG_DrawLine+0xa4>
 801255c:	2301      	movs	r3, #1
 801255e:	e001      	b.n	8012564 <UG_DrawLine+0xa8>
 8012560:	f04f 33ff 	mov.w	r3, #4294967295
 8012564:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8012566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801256a:	105b      	asrs	r3, r3, #1
 801256c:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 801256e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012572:	105b      	asrs	r3, r3, #1
 8012574:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8012576:	88fb      	ldrh	r3, [r7, #6]
 8012578:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 801257a:	88bb      	ldrh	r3, [r7, #4]
 801257c:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 801257e:	4b3e      	ldr	r3, [pc, #248]	; (8012678 <UG_DrawLine+0x1bc>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8012588:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801258c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8012590:	4798      	blx	r3

   if( dxabs >= dyabs )
 8012592:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8012596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801259a:	429a      	cmp	r2, r3
 801259c:	db33      	blt.n	8012606 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 801259e:	2300      	movs	r3, #0
 80125a0:	83fb      	strh	r3, [r7, #30]
 80125a2:	e029      	b.n	80125f8 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80125a4:	8b7a      	ldrh	r2, [r7, #26]
 80125a6:	89fb      	ldrh	r3, [r7, #14]
 80125a8:	4413      	add	r3, r2
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80125ae:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80125b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	db09      	blt.n	80125ce <UG_DrawLine+0x112>
         {
            y -= dxabs;
 80125ba:	8b7a      	ldrh	r2, [r7, #26]
 80125bc:	8a3b      	ldrh	r3, [r7, #16]
 80125be:	1ad3      	subs	r3, r2, r3
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 80125c4:	8afa      	ldrh	r2, [r7, #22]
 80125c6:	897b      	ldrh	r3, [r7, #10]
 80125c8:	4413      	add	r3, r2
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80125ce:	8b3a      	ldrh	r2, [r7, #24]
 80125d0:	89bb      	ldrh	r3, [r7, #12]
 80125d2:	4413      	add	r3, r2
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80125d8:	4b27      	ldr	r3, [pc, #156]	; (8012678 <UG_DrawLine+0x1bc>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80125e2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80125e6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80125ea:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 80125ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	3301      	adds	r3, #1
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	83fb      	strh	r3, [r7, #30]
 80125f8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80125fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012600:	429a      	cmp	r2, r3
 8012602:	dbcf      	blt.n	80125a4 <UG_DrawLine+0xe8>
 8012604:	e034      	b.n	8012670 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8012606:	2300      	movs	r3, #0
 8012608:	83fb      	strh	r3, [r7, #30]
 801260a:	e029      	b.n	8012660 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 801260c:	8bba      	ldrh	r2, [r7, #28]
 801260e:	8a3b      	ldrh	r3, [r7, #16]
 8012610:	4413      	add	r3, r2
 8012612:	b29b      	uxth	r3, r3
 8012614:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8012616:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 801261a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801261e:	429a      	cmp	r2, r3
 8012620:	db09      	blt.n	8012636 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8012622:	8bba      	ldrh	r2, [r7, #28]
 8012624:	89fb      	ldrh	r3, [r7, #14]
 8012626:	1ad3      	subs	r3, r2, r3
 8012628:	b29b      	uxth	r3, r3
 801262a:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 801262c:	8b3a      	ldrh	r2, [r7, #24]
 801262e:	89bb      	ldrh	r3, [r7, #12]
 8012630:	4413      	add	r3, r2
 8012632:	b29b      	uxth	r3, r3
 8012634:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8012636:	8afa      	ldrh	r2, [r7, #22]
 8012638:	897b      	ldrh	r3, [r7, #10]
 801263a:	4413      	add	r3, r2
 801263c:	b29b      	uxth	r3, r3
 801263e:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8012640:	4b0d      	ldr	r3, [pc, #52]	; (8012678 <UG_DrawLine+0x1bc>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	685b      	ldr	r3, [r3, #4]
 8012648:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801264a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801264e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8012652:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8012654:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012658:	b29b      	uxth	r3, r3
 801265a:	3301      	adds	r3, #1
 801265c:	b29b      	uxth	r3, r3
 801265e:	83fb      	strh	r3, [r7, #30]
 8012660:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012664:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012668:	429a      	cmp	r2, r3
 801266a:	dbcf      	blt.n	801260c <UG_DrawLine+0x150>
 801266c:	e000      	b.n	8012670 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 801266e:	bf00      	nop
      }
   }  
}
 8012670:	3720      	adds	r7, #32
 8012672:	46bd      	mov	sp, r7
 8012674:	bdb0      	pop	{r4, r5, r7, pc}
 8012676:	bf00      	nop
 8012678:	20002090 	.word	0x20002090

0801267c <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 801267c:	b590      	push	{r4, r7, lr}
 801267e:	b087      	sub	sp, #28
 8012680:	af02      	add	r7, sp, #8
 8012682:	4603      	mov	r3, r0
 8012684:	603a      	str	r2, [r7, #0]
 8012686:	80fb      	strh	r3, [r7, #6]
 8012688:	460b      	mov	r3, r1
 801268a:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 801268c:	88fb      	ldrh	r3, [r7, #6]
 801268e:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8012690:	88bb      	ldrh	r3, [r7, #4]
 8012692:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8012694:	4b44      	ldr	r3, [pc, #272]	; (80127a8 <UG_PutString+0x12c>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801269a:	4618      	mov	r0, r3
 801269c:	f000 fa96 	bl	8012bcc <_UG_FontSelect>
   while ( *str != 0 )
 80126a0:	e064      	b.n	801276c <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80126a2:	4b41      	ldr	r3, [pc, #260]	; (80127a8 <UG_PutString+0x12c>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d106      	bne.n	80126bc <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 80126ae:	463b      	mov	r3, r7
 80126b0:	4618      	mov	r0, r3
 80126b2:	f000 f8c7 	bl	8012844 <_UG_DecodeUTF8>
 80126b6:	4603      	mov	r3, r0
 80126b8:	817b      	strh	r3, [r7, #10]
 80126ba:	e004      	b.n	80126c6 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	1c5a      	adds	r2, r3, #1
 80126c0:	603a      	str	r2, [r7, #0]
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80126c6:	897b      	ldrh	r3, [r7, #10]
 80126c8:	2b0a      	cmp	r3, #10
 80126ca:	d105      	bne.n	80126d8 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80126cc:	4b36      	ldr	r3, [pc, #216]	; (80127a8 <UG_PutString+0x12c>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	881b      	ldrh	r3, [r3, #0]
 80126d4:	81fb      	strh	r3, [r7, #14]
         continue;
 80126d6:	e049      	b.n	801276c <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80126d8:	897b      	ldrh	r3, [r7, #10]
 80126da:	2100      	movs	r1, #0
 80126dc:	4618      	mov	r0, r3
 80126de:	f000 f929 	bl	8012934 <_UG_GetCharData>
 80126e2:	4603      	mov	r3, r0
 80126e4:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80126e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80126ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ee:	d100      	bne.n	80126f2 <UG_PutString+0x76>
 80126f0:	e03c      	b.n	801276c <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 80126f2:	4b2d      	ldr	r3, [pc, #180]	; (80127a8 <UG_PutString+0x12c>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126fc:	4619      	mov	r1, r3
 80126fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012702:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012706:	4413      	add	r3, r2
 8012708:	4299      	cmp	r1, r3
 801270a:	dc12      	bgt.n	8012732 <UG_PutString+0xb6>
      {
         xp = x;
 801270c:	88fb      	ldrh	r3, [r7, #6]
 801270e:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8012710:	4b25      	ldr	r3, [pc, #148]	; (80127a8 <UG_PutString+0x12c>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012718:	b21a      	sxth	r2, r3
 801271a:	4b23      	ldr	r3, [pc, #140]	; (80127a8 <UG_PutString+0x12c>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 8012722:	b21b      	sxth	r3, r3
 8012724:	4413      	add	r3, r2
 8012726:	b21b      	sxth	r3, r3
 8012728:	b29a      	uxth	r2, r3
 801272a:	89bb      	ldrh	r3, [r7, #12]
 801272c:	4413      	add	r3, r2
 801272e:	b29b      	uxth	r3, r3
 8012730:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8012732:	4b1d      	ldr	r3, [pc, #116]	; (80127a8 <UG_PutString+0x12c>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 801273a:	4b1b      	ldr	r3, [pc, #108]	; (80127a8 <UG_PutString+0x12c>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012742:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012746:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801274a:	8978      	ldrh	r0, [r7, #10]
 801274c:	9300      	str	r3, [sp, #0]
 801274e:	4623      	mov	r3, r4
 8012750:	f000 fabe 	bl	8012cd0 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8012754:	4b14      	ldr	r3, [pc, #80]	; (80127a8 <UG_PutString+0x12c>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 801275c:	b29a      	uxth	r2, r3
 801275e:	893b      	ldrh	r3, [r7, #8]
 8012760:	4413      	add	r3, r2
 8012762:	b29a      	uxth	r2, r3
 8012764:	89fb      	ldrh	r3, [r7, #14]
 8012766:	4413      	add	r3, r2
 8012768:	b29b      	uxth	r3, r3
 801276a:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d196      	bne.n	80126a2 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8012774:	4b0c      	ldr	r3, [pc, #48]	; (80127a8 <UG_PutString+0x12c>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801277c:	f003 0302 	and.w	r3, r3, #2
 8012780:	2b00      	cmp	r3, #0
 8012782:	d00c      	beq.n	801279e <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8012784:	4b08      	ldr	r3, [pc, #32]	; (80127a8 <UG_PutString+0x12c>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801278a:	461c      	mov	r4, r3
 801278c:	f04f 33ff 	mov.w	r3, #4294967295
 8012790:	f04f 32ff 	mov.w	r2, #4294967295
 8012794:	f04f 31ff 	mov.w	r1, #4294967295
 8012798:	f04f 30ff 	mov.w	r0, #4294967295
 801279c:	47a0      	blx	r4
}
 801279e:	bf00      	nop
 80127a0:	3714      	adds	r7, #20
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd90      	pop	{r4, r7, pc}
 80127a6:	bf00      	nop
 80127a8:	20002090 	.word	0x20002090

080127ac <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 80127ac:	b480      	push	{r7}
 80127ae:	b083      	sub	sp, #12
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	4603      	mov	r3, r0
 80127b4:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80127b6:	4b05      	ldr	r3, [pc, #20]	; (80127cc <UG_SetForecolor+0x20>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	88fa      	ldrh	r2, [r7, #6]
 80127bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 80127c0:	bf00      	nop
 80127c2:	370c      	adds	r7, #12
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr
 80127cc:	20002090 	.word	0x20002090

080127d0 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	4603      	mov	r3, r0
 80127d8:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80127da:	4b05      	ldr	r3, [pc, #20]	; (80127f0 <UG_SetBackcolor+0x20>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	88fa      	ldrh	r2, [r7, #6]
 80127e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80127e4:	bf00      	nop
 80127e6:	370c      	adds	r7, #12
 80127e8:	46bd      	mov	sp, r7
 80127ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ee:	4770      	bx	lr
 80127f0:	20002090 	.word	0x20002090

080127f4 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	4603      	mov	r3, r0
 80127fc:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80127fe:	4b06      	ldr	r3, [pc, #24]	; (8012818 <UG_FontSetHSpace+0x24>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	88fa      	ldrh	r2, [r7, #6]
 8012804:	b252      	sxtb	r2, r2
 8012806:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 801280a:	bf00      	nop
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	20002090 	.word	0x20002090

0801281c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
 8012822:	4603      	mov	r3, r0
 8012824:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8012826:	4b06      	ldr	r3, [pc, #24]	; (8012840 <UG_FontSetVSpace+0x24>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	88fa      	ldrh	r2, [r7, #6]
 801282c:	b252      	sxtb	r2, r2
 801282e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8012832:	bf00      	nop
 8012834:	370c      	adds	r7, #12
 8012836:	46bd      	mov	sp, r7
 8012838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283c:	4770      	bx	lr
 801283e:	bf00      	nop
 8012840:	20002090 	.word	0x20002090

08012844 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8012844:	b480      	push	{r7}
 8012846:	b085      	sub	sp, #20
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]

  char c=**str;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8012854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012858:	2b00      	cmp	r3, #0
 801285a:	db07      	blt.n	801286c <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	1c5a      	adds	r2, r3, #1
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	601a      	str	r2, [r3, #0]
    return c;
 8012866:	7bfb      	ldrb	r3, [r7, #15]
 8012868:	b29b      	uxth	r3, r3
 801286a:	e05c      	b.n	8012926 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 801286c:	2300      	movs	r3, #0
 801286e:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8012870:	2300      	movs	r3, #0
 8012872:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8012874:	e04f      	b.n	8012916 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	1c5a      	adds	r2, r3, #1
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8012888:	7bbb      	ldrb	r3, [r7, #14]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d130      	bne.n	80128f0 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 801288e:	7bfb      	ldrb	r3, [r7, #15]
 8012890:	2bdf      	cmp	r3, #223	; 0xdf
 8012892:	d806      	bhi.n	80128a2 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8012894:	2301      	movs	r3, #1
 8012896:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8012898:	7bfb      	ldrb	r3, [r7, #15]
 801289a:	f003 031f 	and.w	r3, r3, #31
 801289e:	73fb      	strb	r3, [r7, #15]
 80128a0:	e023      	b.n	80128ea <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 80128a2:	7bfb      	ldrb	r3, [r7, #15]
 80128a4:	2bef      	cmp	r3, #239	; 0xef
 80128a6:	d806      	bhi.n	80128b6 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 80128a8:	2302      	movs	r3, #2
 80128aa:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 80128ac:	7bfb      	ldrb	r3, [r7, #15]
 80128ae:	f003 030f 	and.w	r3, r3, #15
 80128b2:	73fb      	strb	r3, [r7, #15]
 80128b4:	e019      	b.n	80128ea <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 80128b6:	7bfb      	ldrb	r3, [r7, #15]
 80128b8:	2bf7      	cmp	r3, #247	; 0xf7
 80128ba:	d806      	bhi.n	80128ca <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 80128bc:	2303      	movs	r3, #3
 80128be:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 80128c0:	7bfb      	ldrb	r3, [r7, #15]
 80128c2:	f003 0307 	and.w	r3, r3, #7
 80128c6:	73fb      	strb	r3, [r7, #15]
 80128c8:	e00f      	b.n	80128ea <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80128ca:	7bfb      	ldrb	r3, [r7, #15]
 80128cc:	2bfb      	cmp	r3, #251	; 0xfb
 80128ce:	d806      	bhi.n	80128de <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 80128d0:	2304      	movs	r3, #4
 80128d2:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 80128d4:	7bfb      	ldrb	r3, [r7, #15]
 80128d6:	f003 0303 	and.w	r3, r3, #3
 80128da:	73fb      	strb	r3, [r7, #15]
 80128dc:	e005      	b.n	80128ea <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80128de:	2305      	movs	r3, #5
 80128e0:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80128e2:	7bfb      	ldrb	r3, [r7, #15]
 80128e4:	f003 0301 	and.w	r3, r3, #1
 80128e8:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 80128ea:	7bfb      	ldrb	r3, [r7, #15]
 80128ec:	81bb      	strh	r3, [r7, #12]
 80128ee:	e012      	b.n	8012916 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 80128f0:	89bb      	ldrh	r3, [r7, #12]
 80128f2:	019b      	lsls	r3, r3, #6
 80128f4:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 80128f6:	7bfb      	ldrb	r3, [r7, #15]
 80128f8:	b21b      	sxth	r3, r3
 80128fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128fe:	b21a      	sxth	r2, r3
 8012900:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012904:	4313      	orrs	r3, r2
 8012906:	b21b      	sxth	r3, r3
 8012908:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 801290a:	7bbb      	ldrb	r3, [r7, #14]
 801290c:	3b01      	subs	r3, #1
 801290e:	73bb      	strb	r3, [r7, #14]
 8012910:	7bbb      	ldrb	r3, [r7, #14]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d005      	beq.n	8012922 <_UG_DecodeUTF8+0xde>
  while(**str)
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d1aa      	bne.n	8012876 <_UG_DecodeUTF8+0x32>
 8012920:	e000      	b.n	8012924 <_UG_DecodeUTF8+0xe0>
        break;
 8012922:	bf00      	nop
    }
  }
  return encoding;
 8012924:	89bb      	ldrh	r3, [r7, #12]
}
 8012926:	4618      	mov	r0, r3
 8012928:	3714      	adds	r7, #20
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr
	...

08012934 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8012934:	b580      	push	{r7, lr}
 8012936:	b086      	sub	sp, #24
 8012938:	af00      	add	r7, sp, #0
 801293a:	4603      	mov	r3, r0
 801293c:	6039      	str	r1, [r7, #0]
 801293e:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8012940:	2300      	movs	r3, #0
 8012942:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8012944:	2300      	movs	r3, #0
 8012946:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8012948:	2300      	movs	r3, #0
 801294a:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 801294c:	2300      	movs	r3, #0
 801294e:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8012950:	2300      	movs	r3, #0
 8012952:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8012954:	4b98      	ldr	r3, [pc, #608]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801295a:	4b98      	ldr	r3, [pc, #608]	; (8012bbc <_UG_GetCharData+0x288>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	429a      	cmp	r2, r3
 8012960:	d10f      	bne.n	8012982 <_UG_GetCharData+0x4e>
 8012962:	4b97      	ldr	r3, [pc, #604]	; (8012bc0 <_UG_GetCharData+0x28c>)
 8012964:	881b      	ldrh	r3, [r3, #0]
 8012966:	88fa      	ldrh	r2, [r7, #6]
 8012968:	429a      	cmp	r2, r3
 801296a:	d10a      	bne.n	8012982 <_UG_GetCharData+0x4e>
    if(p){
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d003      	beq.n	801297a <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8012972:	4b94      	ldr	r3, [pc, #592]	; (8012bc4 <_UG_GetCharData+0x290>)
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 801297a:	4b93      	ldr	r3, [pc, #588]	; (8012bc8 <_UG_GetCharData+0x294>)
 801297c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012980:	e116      	b.n	8012bb0 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8012982:	4b8d      	ldr	r3, [pc, #564]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801298a:	2b00      	cmp	r3, #0
 801298c:	f000 80cc 	beq.w	8012b28 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8012990:	88fb      	ldrh	r3, [r7, #6]
 8012992:	2bfc      	cmp	r3, #252	; 0xfc
 8012994:	f300 80c8 	bgt.w	8012b28 <_UG_GetCharData+0x1f4>
 8012998:	2bd6      	cmp	r3, #214	; 0xd6
 801299a:	da09      	bge.n	80129b0 <_UG_GetCharData+0x7c>
 801299c:	2bc4      	cmp	r3, #196	; 0xc4
 801299e:	d06c      	beq.n	8012a7a <_UG_GetCharData+0x146>
 80129a0:	2bc4      	cmp	r3, #196	; 0xc4
 80129a2:	f300 80c1 	bgt.w	8012b28 <_UG_GetCharData+0x1f4>
 80129a6:	2bb0      	cmp	r3, #176	; 0xb0
 80129a8:	d06d      	beq.n	8012a86 <_UG_GetCharData+0x152>
 80129aa:	2bb5      	cmp	r3, #181	; 0xb5
 80129ac:	d068      	beq.n	8012a80 <_UG_GetCharData+0x14c>
 80129ae:	e06e      	b.n	8012a8e <_UG_GetCharData+0x15a>
 80129b0:	3bd6      	subs	r3, #214	; 0xd6
 80129b2:	2b26      	cmp	r3, #38	; 0x26
 80129b4:	f200 80b8 	bhi.w	8012b28 <_UG_GetCharData+0x1f4>
 80129b8:	a201      	add	r2, pc, #4	; (adr r2, 80129c0 <_UG_GetCharData+0x8c>)
 80129ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129be:	bf00      	nop
 80129c0:	08012a63 	.word	0x08012a63
 80129c4:	08012b29 	.word	0x08012b29
 80129c8:	08012b29 	.word	0x08012b29
 80129cc:	08012b29 	.word	0x08012b29
 80129d0:	08012b29 	.word	0x08012b29
 80129d4:	08012b29 	.word	0x08012b29
 80129d8:	08012a6f 	.word	0x08012a6f
 80129dc:	08012b29 	.word	0x08012b29
 80129e0:	08012b29 	.word	0x08012b29
 80129e4:	08012b29 	.word	0x08012b29
 80129e8:	08012b29 	.word	0x08012b29
 80129ec:	08012b29 	.word	0x08012b29
 80129f0:	08012b29 	.word	0x08012b29
 80129f4:	08012b29 	.word	0x08012b29
 80129f8:	08012a75 	.word	0x08012a75
 80129fc:	08012b29 	.word	0x08012b29
 8012a00:	08012b29 	.word	0x08012b29
 8012a04:	08012b29 	.word	0x08012b29
 8012a08:	08012b29 	.word	0x08012b29
 8012a0c:	08012b29 	.word	0x08012b29
 8012a10:	08012b29 	.word	0x08012b29
 8012a14:	08012b29 	.word	0x08012b29
 8012a18:	08012b29 	.word	0x08012b29
 8012a1c:	08012b29 	.word	0x08012b29
 8012a20:	08012b29 	.word	0x08012b29
 8012a24:	08012b29 	.word	0x08012b29
 8012a28:	08012b29 	.word	0x08012b29
 8012a2c:	08012b29 	.word	0x08012b29
 8012a30:	08012b29 	.word	0x08012b29
 8012a34:	08012b29 	.word	0x08012b29
 8012a38:	08012b29 	.word	0x08012b29
 8012a3c:	08012b29 	.word	0x08012b29
 8012a40:	08012a5d 	.word	0x08012a5d
 8012a44:	08012b29 	.word	0x08012b29
 8012a48:	08012b29 	.word	0x08012b29
 8012a4c:	08012b29 	.word	0x08012b29
 8012a50:	08012b29 	.word	0x08012b29
 8012a54:	08012b29 	.word	0x08012b29
 8012a58:	08012a69 	.word	0x08012a69
    {
       case 0xF6: encoding = 0x94; break; // ö
 8012a5c:	2394      	movs	r3, #148	; 0x94
 8012a5e:	80fb      	strh	r3, [r7, #6]
 8012a60:	e015      	b.n	8012a8e <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8012a62:	2399      	movs	r3, #153	; 0x99
 8012a64:	80fb      	strh	r3, [r7, #6]
 8012a66:	e012      	b.n	8012a8e <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8012a68:	2381      	movs	r3, #129	; 0x81
 8012a6a:	80fb      	strh	r3, [r7, #6]
 8012a6c:	e00f      	b.n	8012a8e <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8012a6e:	239a      	movs	r3, #154	; 0x9a
 8012a70:	80fb      	strh	r3, [r7, #6]
 8012a72:	e00c      	b.n	8012a8e <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8012a74:	2384      	movs	r3, #132	; 0x84
 8012a76:	80fb      	strh	r3, [r7, #6]
 8012a78:	e009      	b.n	8012a8e <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8012a7a:	238e      	movs	r3, #142	; 0x8e
 8012a7c:	80fb      	strh	r3, [r7, #6]
 8012a7e:	e006      	b.n	8012a8e <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8012a80:	23e6      	movs	r3, #230	; 0xe6
 8012a82:	80fb      	strh	r3, [r7, #6]
 8012a84:	e003      	b.n	8012a8e <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8012a86:	23f8      	movs	r3, #248	; 0xf8
 8012a88:	80fb      	strh	r3, [r7, #6]
 8012a8a:	bf00      	nop
 8012a8c:	e04c      	b.n	8012b28 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012a8e:	e04b      	b.n	8012b28 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8012a90:	4b49      	ldr	r3, [pc, #292]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a96:	8a7a      	ldrh	r2, [r7, #18]
 8012a98:	0052      	lsls	r2, r2, #1
 8012a9a:	4413      	add	r3, r2
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7ff fa87 	bl	8011fb0 <ptr_8to16>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8012aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	da06      	bge.n	8012abc <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8012aae:	89fb      	ldrh	r3, [r7, #14]
 8012ab0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012ab4:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	747b      	strb	r3, [r7, #17]
 8012aba:	e032      	b.n	8012b22 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8012abc:	7c7b      	ldrb	r3, [r7, #17]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d021      	beq.n	8012b06 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8012ac2:	88fa      	ldrh	r2, [r7, #6]
 8012ac4:	8afb      	ldrh	r3, [r7, #22]
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d30d      	bcc.n	8012ae6 <_UG_GetCharData+0x1b2>
 8012aca:	88fa      	ldrh	r2, [r7, #6]
 8012acc:	89fb      	ldrh	r3, [r7, #14]
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d809      	bhi.n	8012ae6 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8012ad2:	88fa      	ldrh	r2, [r7, #6]
 8012ad4:	8afb      	ldrh	r3, [r7, #22]
 8012ad6:	1ad3      	subs	r3, r2, r3
 8012ad8:	b29a      	uxth	r2, r3
 8012ada:	8abb      	ldrh	r3, [r7, #20]
 8012adc:	4413      	add	r3, r2
 8012ade:	82bb      	strh	r3, [r7, #20]
        found=1;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	743b      	strb	r3, [r7, #16]
        break;
 8012ae4:	e02a      	b.n	8012b3c <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8012ae6:	88fa      	ldrh	r2, [r7, #6]
 8012ae8:	8afb      	ldrh	r3, [r7, #22]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d323      	bcc.n	8012b36 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8012aee:	89fa      	ldrh	r2, [r7, #14]
 8012af0:	8afb      	ldrh	r3, [r7, #22]
 8012af2:	1ad3      	subs	r3, r2, r3
 8012af4:	b29a      	uxth	r2, r3
 8012af6:	8abb      	ldrh	r3, [r7, #20]
 8012af8:	4413      	add	r3, r2
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	3301      	adds	r3, #1
 8012afe:	82bb      	strh	r3, [r7, #20]
      range=0;
 8012b00:	2300      	movs	r3, #0
 8012b02:	747b      	strb	r3, [r7, #17]
 8012b04:	e00d      	b.n	8012b22 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8012b06:	88fa      	ldrh	r2, [r7, #6]
 8012b08:	89fb      	ldrh	r3, [r7, #14]
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d102      	bne.n	8012b14 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8012b0e:	2301      	movs	r3, #1
 8012b10:	743b      	strb	r3, [r7, #16]
        break;
 8012b12:	e013      	b.n	8012b3c <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8012b14:	88fa      	ldrh	r2, [r7, #6]
 8012b16:	89fb      	ldrh	r3, [r7, #14]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d30e      	bcc.n	8012b3a <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8012b1c:	8abb      	ldrh	r3, [r7, #20]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012b22:	8a7b      	ldrh	r3, [r7, #18]
 8012b24:	3301      	adds	r3, #1
 8012b26:	827b      	strh	r3, [r7, #18]
 8012b28:	4b23      	ldr	r3, [pc, #140]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012b2e:	8a7a      	ldrh	r2, [r7, #18]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d3ad      	bcc.n	8012a90 <_UG_GetCharData+0x15c>
 8012b34:	e002      	b.n	8012b3c <_UG_GetCharData+0x208>
        break;
 8012b36:	bf00      	nop
 8012b38:	e000      	b.n	8012b3c <_UG_GetCharData+0x208>
        break;
 8012b3a:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8012b3c:	7c3b      	ldrb	r3, [r7, #16]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d034      	beq.n	8012bac <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8012b42:	4b1d      	ldr	r3, [pc, #116]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b48:	4a1c      	ldr	r2, [pc, #112]	; (8012bbc <_UG_GetCharData+0x288>)
 8012b4a:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8012b4c:	4a1c      	ldr	r2, [pc, #112]	; (8012bc0 <_UG_GetCharData+0x28c>)
 8012b4e:	88fb      	ldrh	r3, [r7, #6]
 8012b50:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8012b52:	4b19      	ldr	r3, [pc, #100]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b58:	8aba      	ldrh	r2, [r7, #20]
 8012b5a:	4917      	ldr	r1, [pc, #92]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012b5c:	6809      	ldr	r1, [r1, #0]
 8012b5e:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8012b60:	fb01 f202 	mul.w	r2, r1, r2
 8012b64:	4413      	add	r3, r2
 8012b66:	4a17      	ldr	r2, [pc, #92]	; (8012bc4 <_UG_GetCharData+0x290>)
 8012b68:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8012b6a:	4b13      	ldr	r3, [pc, #76]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d009      	beq.n	8012b88 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8012b74:	4b10      	ldr	r3, [pc, #64]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b7a:	8abb      	ldrh	r3, [r7, #20]
 8012b7c:	4413      	add	r3, r2
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	b21a      	sxth	r2, r3
 8012b82:	4b11      	ldr	r3, [pc, #68]	; (8012bc8 <_UG_GetCharData+0x294>)
 8012b84:	801a      	strh	r2, [r3, #0]
 8012b86:	e006      	b.n	8012b96 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8012b88:	4b0b      	ldr	r3, [pc, #44]	; (8012bb8 <_UG_GetCharData+0x284>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012b90:	b21a      	sxth	r2, r3
 8012b92:	4b0d      	ldr	r3, [pc, #52]	; (8012bc8 <_UG_GetCharData+0x294>)
 8012b94:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d003      	beq.n	8012ba4 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8012b9c:	4b09      	ldr	r3, [pc, #36]	; (8012bc4 <_UG_GetCharData+0x290>)
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8012ba4:	4b08      	ldr	r3, [pc, #32]	; (8012bc8 <_UG_GetCharData+0x294>)
 8012ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012baa:	e001      	b.n	8012bb0 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8012bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3718      	adds	r7, #24
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	20002090 	.word	0x20002090
 8012bbc:	20002094 	.word	0x20002094
 8012bc0:	20002098 	.word	0x20002098
 8012bc4:	2000209c 	.word	0x2000209c
 8012bc8:	200020a0 	.word	0x200020a0

08012bcc <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8012bcc:	b590      	push	{r4, r7, lr}
 8012bce:	b083      	sub	sp, #12
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8012bd4:	4b3d      	ldr	r3, [pc, #244]	; (8012ccc <_UG_FontSelect+0x100>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d070      	beq.n	8012cc2 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8012be0:	4b3a      	ldr	r3, [pc, #232]	; (8012ccc <_UG_FontSelect+0x100>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	687a      	ldr	r2, [r7, #4]
 8012be6:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	781a      	ldrb	r2, [r3, #0]
 8012bec:	4b37      	ldr	r3, [pc, #220]	; (8012ccc <_UG_FontSelect+0x100>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012bf4:	b2d2      	uxtb	r2, r2
 8012bf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	1c5a      	adds	r2, r3, #1
 8012bfe:	607a      	str	r2, [r7, #4]
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	b25b      	sxtb	r3, r3
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	da01      	bge.n	8012c0c <_UG_FontSelect+0x40>
 8012c08:	2201      	movs	r2, #1
 8012c0a:	e000      	b.n	8012c0e <_UG_FontSelect+0x42>
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	4b2f      	ldr	r3, [pc, #188]	; (8012ccc <_UG_FontSelect+0x100>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	b2d2      	uxtb	r2, r2
 8012c14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	1c5a      	adds	r2, r3, #1
 8012c1c:	607a      	str	r2, [r7, #4]
 8012c1e:	4a2b      	ldr	r2, [pc, #172]	; (8012ccc <_UG_FontSelect+0x100>)
 8012c20:	6812      	ldr	r2, [r2, #0]
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	1c5a      	adds	r2, r3, #1
 8012c2c:	607a      	str	r2, [r7, #4]
 8012c2e:	4a27      	ldr	r2, [pc, #156]	; (8012ccc <_UG_FontSelect+0x100>)
 8012c30:	6812      	ldr	r2, [r2, #0]
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8012c38:	4b24      	ldr	r3, [pc, #144]	; (8012ccc <_UG_FontSelect+0x100>)
 8012c3a:	681c      	ldr	r4, [r3, #0]
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7ff f9b7 	bl	8011fb0 <ptr_8to16>
 8012c42:	4603      	mov	r3, r0
 8012c44:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	3302      	adds	r3, #2
 8012c4a:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8012c4c:	4b1f      	ldr	r3, [pc, #124]	; (8012ccc <_UG_FontSelect+0x100>)
 8012c4e:	681c      	ldr	r4, [r3, #0]
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f7ff f9ad 	bl	8011fb0 <ptr_8to16>
 8012c56:	4603      	mov	r3, r0
 8012c58:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	3302      	adds	r3, #2
 8012c5e:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8012c60:	4b1a      	ldr	r3, [pc, #104]	; (8012ccc <_UG_FontSelect+0x100>)
 8012c62:	681c      	ldr	r4, [r3, #0]
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7ff f9a3 	bl	8011fb0 <ptr_8to16>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	3302      	adds	r3, #2
 8012c72:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	1c5a      	adds	r2, r3, #1
 8012c78:	607a      	str	r2, [r7, #4]
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d00b      	beq.n	8012c98 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8012c80:	4b12      	ldr	r3, [pc, #72]	; (8012ccc <_UG_FontSelect+0x100>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8012c88:	4b10      	ldr	r3, [pc, #64]	; (8012ccc <_UG_FontSelect+0x100>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c8e:	461a      	mov	r2, r3
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	4413      	add	r3, r2
 8012c94:	607b      	str	r3, [r7, #4]
 8012c96:	e003      	b.n	8012ca0 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8012c98:	4b0c      	ldr	r3, [pc, #48]	; (8012ccc <_UG_FontSelect+0x100>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8012ca0:	4b0a      	ldr	r3, [pc, #40]	; (8012ccc <_UG_FontSelect+0x100>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	687a      	ldr	r2, [r7, #4]
 8012ca6:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8012ca8:	4b08      	ldr	r3, [pc, #32]	; (8012ccc <_UG_FontSelect+0x100>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012cae:	005b      	lsls	r3, r3, #1
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8012cb8:	4b04      	ldr	r3, [pc, #16]	; (8012ccc <_UG_FontSelect+0x100>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	687a      	ldr	r2, [r7, #4]
 8012cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8012cc0:	e000      	b.n	8012cc4 <_UG_FontSelect+0xf8>
    return;
 8012cc2:	bf00      	nop
}
 8012cc4:	370c      	adds	r7, #12
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd90      	pop	{r4, r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	20002090 	.word	0x20002090

08012cd0 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8012cd0:	b5b0      	push	{r4, r5, r7, lr}
 8012cd2:	b08c      	sub	sp, #48	; 0x30
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	4608      	mov	r0, r1
 8012cda:	4611      	mov	r1, r2
 8012cdc:	461a      	mov	r2, r3
 8012cde:	4623      	mov	r3, r4
 8012ce0:	80fb      	strh	r3, [r7, #6]
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	80bb      	strh	r3, [r7, #4]
 8012ce6:	460b      	mov	r3, r1
 8012ce8:	807b      	strh	r3, [r7, #2]
 8012cea:	4613      	mov	r3, r2
 8012cec:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	847b      	strh	r3, [r7, #34]	; 0x22
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8012cfe:	4b8c      	ldr	r3, [pc, #560]	; (8012f30 <_UG_PutChar+0x260>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d06:	75fb      	strb	r3, [r7, #23]
 8012d08:	4b89      	ldr	r3, [pc, #548]	; (8012f30 <_UG_PutChar+0x260>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012d10:	f003 0302 	and.w	r3, r3, #2
 8012d14:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8012d16:	2300      	movs	r3, #0
 8012d18:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8012d1a:	f107 0208 	add.w	r2, r7, #8
 8012d1e:	88fb      	ldrh	r3, [r7, #6]
 8012d20:	4611      	mov	r1, r2
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ff fe06 	bl	8012934 <_UG_GetCharData>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8012d2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d34:	d102      	bne.n	8012d3c <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8012d36:	f04f 33ff 	mov.w	r3, #4294967295
 8012d3a:	e226      	b.n	801318a <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8012d3c:	4b7c      	ldr	r3, [pc, #496]	; (8012f30 <_UG_PutChar+0x260>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012d44:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8012d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d101      	bne.n	8012d50 <_UG_PutChar+0x80>
     return 0;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	e21c      	b.n	801318a <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8012d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d52:	08db      	lsrs	r3, r3, #3
 8012d54:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8012d56:	4b76      	ldr	r3, [pc, #472]	; (8012f30 <_UG_PutChar+0x260>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012d5e:	f003 0307 	and.w	r3, r3, #7
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <_UG_PutChar+0x9e>
 8012d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d6a:	3301      	adds	r3, #1
 8012d6c:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8012d6e:	7dbb      	ldrb	r3, [r7, #22]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d01d      	beq.n	8012db0 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8012d74:	4b6e      	ldr	r3, [pc, #440]	; (8012f30 <_UG_PutChar+0x260>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d7a:	461d      	mov	r5, r3
 8012d7c:	88ba      	ldrh	r2, [r7, #4]
 8012d7e:	8abb      	ldrh	r3, [r7, #20]
 8012d80:	4413      	add	r3, r2
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	3b01      	subs	r3, #1
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	b21c      	sxth	r4, r3
 8012d8a:	4b69      	ldr	r3, [pc, #420]	; (8012f30 <_UG_PutChar+0x260>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d92:	b29a      	uxth	r2, r3
 8012d94:	887b      	ldrh	r3, [r7, #2]
 8012d96:	4413      	add	r3, r2
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	3b01      	subs	r3, #1
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	b21b      	sxth	r3, r3
 8012da0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012da4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8012da8:	4622      	mov	r2, r4
 8012daa:	47a8      	blx	r5
 8012dac:	4603      	mov	r3, r0
 8012dae:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8012db0:	4b5f      	ldr	r3, [pc, #380]	; (8012f30 <_UG_PutChar+0x260>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	f040 8172 	bne.w	80130a2 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	853b      	strh	r3, [r7, #40]	; 0x28
 8012dc2:	e0ec      	b.n	8012f9e <_UG_PutChar+0x2ce>
     {
       c=0;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8012dc8:	2300      	movs	r3, #0
 8012dca:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012dcc:	e0df      	b.n	8012f8e <_UG_PutChar+0x2be>
       {
         b = *data++;
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	1c5a      	adds	r2, r3, #1
 8012dd2:	60ba      	str	r2, [r7, #8]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012dd8:	2300      	movs	r3, #0
 8012dda:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012ddc:	e0ca      	b.n	8012f74 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8012dde:	7f7b      	ldrb	r3, [r7, #29]
 8012de0:	f003 0301 	and.w	r3, r3, #1
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d033      	beq.n	8012e50 <_UG_PutChar+0x180>
           {
             if(driver)
 8012de8:	7dbb      	ldrb	r3, [r7, #22]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d01f      	beq.n	8012e2e <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8012dee:	8c3b      	ldrh	r3, [r7, #32]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d00a      	beq.n	8012e0a <_UG_PutChar+0x13a>
 8012df4:	7dfb      	ldrb	r3, [r7, #23]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d107      	bne.n	8012e0a <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8012dfa:	8c3a      	ldrh	r2, [r7, #32]
 8012dfc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012e00:	69bb      	ldr	r3, [r7, #24]
 8012e02:	4610      	mov	r0, r2
 8012e04:	4798      	blx	r3
                 bpixels=0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8012e0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d10a      	bne.n	8012e26 <_UG_PutChar+0x156>
 8012e10:	7dfb      	ldrb	r3, [r7, #23]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d007      	beq.n	8012e26 <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8012e16:	88ba      	ldrh	r2, [r7, #4]
 8012e18:	8bfb      	ldrh	r3, [r7, #30]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8012e1e:	887a      	ldrh	r2, [r7, #2]
 8012e20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012e22:	4413      	add	r3, r2
 8012e24:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8012e26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e28:	3301      	adds	r3, #1
 8012e2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8012e2c:	e096      	b.n	8012f5c <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8012e2e:	4b40      	ldr	r3, [pc, #256]	; (8012f30 <_UG_PutChar+0x260>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	685b      	ldr	r3, [r3, #4]
 8012e36:	88b9      	ldrh	r1, [r7, #4]
 8012e38:	8bfa      	ldrh	r2, [r7, #30]
 8012e3a:	440a      	add	r2, r1
 8012e3c:	b292      	uxth	r2, r2
 8012e3e:	b210      	sxth	r0, r2
 8012e40:	8879      	ldrh	r1, [r7, #2]
 8012e42:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012e44:	440a      	add	r2, r1
 8012e46:	b292      	uxth	r2, r2
 8012e48:	b211      	sxth	r1, r2
 8012e4a:	883a      	ldrh	r2, [r7, #0]
 8012e4c:	4798      	blx	r3
 8012e4e:	e085      	b.n	8012f5c <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8012e50:	7dbb      	ldrb	r3, [r7, #22]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d06e      	beq.n	8012f34 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8012e56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d064      	beq.n	8012f26 <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8012e5c:	7dfb      	ldrb	r3, [r7, #23]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d15e      	bne.n	8012f20 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8012e62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e64:	8839      	ldrh	r1, [r7, #0]
 8012e66:	69bb      	ldr	r3, [r7, #24]
 8012e68:	4610      	mov	r0, r2
 8012e6a:	4798      	blx	r3
                   fpixels=0;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012e70:	e059      	b.n	8012f26 <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8012e72:	88ba      	ldrh	r2, [r7, #4]
 8012e74:	8abb      	ldrh	r3, [r7, #20]
 8012e76:	4413      	add	r3, r2
 8012e78:	b29a      	uxth	r2, r3
 8012e7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8012e80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d003      	beq.n	8012e92 <_UG_PutChar+0x1c2>
 8012e8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e8c:	89fb      	ldrh	r3, [r7, #14]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d224      	bcs.n	8012edc <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8012e92:	4b27      	ldr	r3, [pc, #156]	; (8012f30 <_UG_PutChar+0x260>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e98:	461d      	mov	r5, r3
 8012e9a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012e9e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012ea2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012ea4:	89fb      	ldrh	r3, [r7, #14]
 8012ea6:	4413      	add	r3, r2
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	b21c      	sxth	r4, r3
 8012eb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012eb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012eb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012ebe:	4413      	add	r3, r2
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	b21b      	sxth	r3, r3
 8012ec4:	4622      	mov	r2, r4
 8012ec6:	47a8      	blx	r5
 8012ec8:	4603      	mov	r3, r0
 8012eca:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012ecc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ece:	8839      	ldrh	r1, [r7, #0]
 8012ed0:	69bb      	ldr	r3, [r7, #24]
 8012ed2:	4610      	mov	r0, r2
 8012ed4:	4798      	blx	r3
                       fpixels=0;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	847b      	strh	r3, [r7, #34]	; 0x22
 8012eda:	e021      	b.n	8012f20 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8012edc:	4b14      	ldr	r3, [pc, #80]	; (8012f30 <_UG_PutChar+0x260>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ee2:	461c      	mov	r4, r3
 8012ee4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012ee8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012eec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012eee:	89fb      	ldrh	r3, [r7, #14]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	3b01      	subs	r3, #1
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	b21a      	sxth	r2, r3
 8012efa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8012efe:	47a0      	blx	r4
 8012f00:	4603      	mov	r3, r0
 8012f02:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012f04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f06:	8839      	ldrh	r1, [r7, #0]
 8012f08:	69bb      	ldr	r3, [r7, #24]
 8012f0a:	4610      	mov	r0, r2
 8012f0c:	4798      	blx	r3
                       fpixels -= width;
 8012f0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f10:	89fb      	ldrh	r3, [r7, #14]
 8012f12:	1ad3      	subs	r3, r2, r3
 8012f14:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8012f16:	88bb      	ldrh	r3, [r7, #4]
 8012f18:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8012f1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f1c:	3301      	adds	r3, #1
 8012f1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8012f20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1a5      	bne.n	8012e72 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8012f26:	8c3b      	ldrh	r3, [r7, #32]
 8012f28:	3301      	adds	r3, #1
 8012f2a:	843b      	strh	r3, [r7, #32]
 8012f2c:	e016      	b.n	8012f5c <_UG_PutChar+0x28c>
 8012f2e:	bf00      	nop
 8012f30:	20002090 	.word	0x20002090
             }
             else if(!trans)                           // Not accelerated output
 8012f34:	7dfb      	ldrb	r3, [r7, #23]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d110      	bne.n	8012f5c <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8012f3a:	4b96      	ldr	r3, [pc, #600]	; (8013194 <_UG_PutChar+0x4c4>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	88b9      	ldrh	r1, [r7, #4]
 8012f44:	8bfa      	ldrh	r2, [r7, #30]
 8012f46:	440a      	add	r2, r1
 8012f48:	b292      	uxth	r2, r2
 8012f4a:	b210      	sxth	r0, r2
 8012f4c:	8879      	ldrh	r1, [r7, #2]
 8012f4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012f50:	440a      	add	r2, r1
 8012f52:	b292      	uxth	r2, r2
 8012f54:	b211      	sxth	r1, r2
 8012f56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f5a:	4798      	blx	r3
             }
           }
           b >>= 1;
 8012f5c:	7f7b      	ldrb	r3, [r7, #29]
 8012f5e:	085b      	lsrs	r3, r3, #1
 8012f60:	777b      	strb	r3, [r7, #29]
           c++;
 8012f62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	3301      	adds	r3, #1
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012f70:	3301      	adds	r3, #1
 8012f72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012f74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012f76:	2b07      	cmp	r3, #7
 8012f78:	d806      	bhi.n	8012f88 <_UG_PutChar+0x2b8>
 8012f7a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012f7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	f6ff af2b 	blt.w	8012dde <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8012f88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012f8e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8012f90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f92:	429a      	cmp	r2, r3
 8012f94:	f4ff af1b 	bcc.w	8012dce <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012f98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	853b      	strh	r3, [r7, #40]	; 0x28
 8012f9e:	4b7d      	ldr	r3, [pc, #500]	; (8013194 <_UG_PutChar+0x4c4>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012faa:	429a      	cmp	r2, r3
 8012fac:	f4ff af0a 	bcc.w	8012dc4 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8012fb0:	7dbb      	ldrb	r3, [r7, #22]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	f000 80e7 	beq.w	8013186 <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8012fb8:	8c3b      	ldrh	r3, [r7, #32]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d009      	beq.n	8012fd2 <_UG_PutChar+0x302>
 8012fbe:	7dfb      	ldrb	r3, [r7, #23]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d106      	bne.n	8012fd2 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8012fc4:	8c3a      	ldrh	r2, [r7, #32]
 8012fc6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	4610      	mov	r0, r2
 8012fce:	4798      	blx	r3
 8012fd0:	e0d9      	b.n	8013186 <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8012fd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f000 80d6 	beq.w	8013186 <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8012fda:	7dfb      	ldrb	r3, [r7, #23]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d15c      	bne.n	801309a <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8012fe0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fe2:	8839      	ldrh	r1, [r7, #0]
 8012fe4:	69bb      	ldr	r3, [r7, #24]
 8012fe6:	4610      	mov	r0, r2
 8012fe8:	4798      	blx	r3
 8012fea:	e0cc      	b.n	8013186 <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8012fec:	88ba      	ldrh	r2, [r7, #4]
 8012fee:	8abb      	ldrh	r3, [r7, #20]
 8012ff0:	4413      	add	r3, r2
 8012ff2:	b29a      	uxth	r2, r3
 8012ff4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012ff6:	1ad3      	subs	r3, r2, r3
 8012ff8:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8012ffa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012ffc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013000:	429a      	cmp	r2, r3
 8013002:	d003      	beq.n	801300c <_UG_PutChar+0x33c>
 8013004:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013006:	8a3b      	ldrh	r3, [r7, #16]
 8013008:	429a      	cmp	r2, r3
 801300a:	d224      	bcs.n	8013056 <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 801300c:	4b61      	ldr	r3, [pc, #388]	; (8013194 <_UG_PutChar+0x4c4>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013012:	461d      	mov	r5, r3
 8013014:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013018:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801301c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801301e:	8a3b      	ldrh	r3, [r7, #16]
 8013020:	4413      	add	r3, r2
 8013022:	b29b      	uxth	r3, r3
 8013024:	3b01      	subs	r3, #1
 8013026:	b29b      	uxth	r3, r3
 8013028:	b21c      	sxth	r4, r3
 801302a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801302c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013030:	fb92 f3f3 	sdiv	r3, r2, r3
 8013034:	b29a      	uxth	r2, r3
 8013036:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013038:	4413      	add	r3, r2
 801303a:	b29b      	uxth	r3, r3
 801303c:	b21b      	sxth	r3, r3
 801303e:	4622      	mov	r2, r4
 8013040:	47a8      	blx	r5
 8013042:	4603      	mov	r3, r0
 8013044:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8013046:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013048:	8839      	ldrh	r1, [r7, #0]
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	4610      	mov	r0, r2
 801304e:	4798      	blx	r3
               fpixels=0;
 8013050:	2300      	movs	r3, #0
 8013052:	847b      	strh	r3, [r7, #34]	; 0x22
 8013054:	e021      	b.n	801309a <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8013056:	4b4f      	ldr	r3, [pc, #316]	; (8013194 <_UG_PutChar+0x4c4>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801305c:	461c      	mov	r4, r3
 801305e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013062:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013066:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013068:	8a3b      	ldrh	r3, [r7, #16]
 801306a:	4413      	add	r3, r2
 801306c:	b29b      	uxth	r3, r3
 801306e:	3b01      	subs	r3, #1
 8013070:	b29b      	uxth	r3, r3
 8013072:	b21a      	sxth	r2, r3
 8013074:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013078:	47a0      	blx	r4
 801307a:	4603      	mov	r3, r0
 801307c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 801307e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013080:	8839      	ldrh	r1, [r7, #0]
 8013082:	69bb      	ldr	r3, [r7, #24]
 8013084:	4610      	mov	r0, r2
 8013086:	4798      	blx	r3
               fpixels -= width;
 8013088:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801308a:	8a3b      	ldrh	r3, [r7, #16]
 801308c:	1ad3      	subs	r3, r2, r3
 801308e:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8013090:	88bb      	ldrh	r3, [r7, #4]
 8013092:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8013094:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013096:	3301      	adds	r3, #1
 8013098:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 801309a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801309c:	2b00      	cmp	r3, #0
 801309e:	d1a5      	bne.n	8012fec <_UG_PutChar+0x31c>
 80130a0:	e071      	b.n	8013186 <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 80130a2:	4b3c      	ldr	r3, [pc, #240]	; (8013194 <_UG_PutChar+0x4c4>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d16b      	bne.n	8013186 <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80130ae:	2300      	movs	r3, #0
 80130b0:	853b      	strh	r3, [r7, #40]	; 0x28
 80130b2:	e060      	b.n	8013176 <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 80130b4:	2300      	movs	r3, #0
 80130b6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80130b8:	e04a      	b.n	8013150 <_UG_PutChar+0x480>
       {
         b = *data++;
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	1c5a      	adds	r2, r3, #1
 80130be:	60ba      	str	r2, [r7, #8]
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80130c4:	883b      	ldrh	r3, [r7, #0]
 80130c6:	b2db      	uxtb	r3, r3
 80130c8:	7f7a      	ldrb	r2, [r7, #29]
 80130ca:	fb03 f202 	mul.w	r2, r3, r2
 80130ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	7f79      	ldrb	r1, [r7, #29]
 80130d6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80130da:	fb01 f303 	mul.w	r3, r1, r3
 80130de:	4413      	add	r3, r2
 80130e0:	121b      	asrs	r3, r3, #8
 80130e2:	b21b      	sxth	r3, r3
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80130e8:	883b      	ldrh	r3, [r7, #0]
 80130ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80130ee:	7f79      	ldrb	r1, [r7, #29]
 80130f0:	fb03 f101 	mul.w	r1, r3, r1
 80130f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80130f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80130fc:	7f78      	ldrb	r0, [r7, #29]
 80130fe:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013102:	fb00 f303 	mul.w	r3, r0, r3
 8013106:	440b      	add	r3, r1
 8013108:	121b      	asrs	r3, r3, #8
 801310a:	b21b      	sxth	r3, r3
 801310c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013110:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8013112:	4313      	orrs	r3, r2
 8013114:	b21b      	sxth	r3, r3
 8013116:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8013118:	7dbb      	ldrb	r3, [r7, #22]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d005      	beq.n	801312a <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 801311e:	8a7a      	ldrh	r2, [r7, #18]
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	4611      	mov	r1, r2
 8013124:	2001      	movs	r0, #1
 8013126:	4798      	blx	r3
 8013128:	e00f      	b.n	801314a <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 801312a:	4b1a      	ldr	r3, [pc, #104]	; (8013194 <_UG_PutChar+0x4c4>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	88b9      	ldrh	r1, [r7, #4]
 8013134:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013136:	440a      	add	r2, r1
 8013138:	b292      	uxth	r2, r2
 801313a:	b210      	sxth	r0, r2
 801313c:	8879      	ldrh	r1, [r7, #2]
 801313e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013140:	440a      	add	r2, r1
 8013142:	b292      	uxth	r2, r2
 8013144:	b211      	sxth	r1, r2
 8013146:	8a7a      	ldrh	r2, [r7, #18]
 8013148:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 801314a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801314c:	3301      	adds	r3, #1
 801314e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013150:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013152:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013156:	429a      	cmp	r2, r3
 8013158:	dbaf      	blt.n	80130ba <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	4a0d      	ldr	r2, [pc, #52]	; (8013194 <_UG_PutChar+0x4c4>)
 801315e:	6812      	ldr	r2, [r2, #0]
 8013160:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8013164:	4611      	mov	r1, r2
 8013166:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801316a:	1a8a      	subs	r2, r1, r2
 801316c:	4413      	add	r3, r2
 801316e:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013170:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013172:	3301      	adds	r3, #1
 8013174:	853b      	strh	r3, [r7, #40]	; 0x28
 8013176:	4b07      	ldr	r3, [pc, #28]	; (8013194 <_UG_PutChar+0x4c4>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801317e:	b29b      	uxth	r3, r3
 8013180:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013182:	429a      	cmp	r2, r3
 8013184:	d396      	bcc.n	80130b4 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8013186:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801318a:	4618      	mov	r0, r3
 801318c:	3730      	adds	r7, #48	; 0x30
 801318e:	46bd      	mov	sp, r7
 8013190:	bdb0      	pop	{r4, r5, r7, pc}
 8013192:	bf00      	nop
 8013194:	20002090 	.word	0x20002090

08013198 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8013198:	b480      	push	{r7}
 801319a:	b089      	sub	sp, #36	; 0x24
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80131a0:	4b57      	ldr	r3, [pc, #348]	; (8013300 <_UG_ProcessTouchData+0x168>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	88db      	ldrh	r3, [r3, #6]
 80131a6:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 80131a8:	4b55      	ldr	r3, [pc, #340]	; (8013300 <_UG_ProcessTouchData+0x168>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	891b      	ldrh	r3, [r3, #8]
 80131ae:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 80131b0:	4b53      	ldr	r3, [pc, #332]	; (8013300 <_UG_ProcessTouchData+0x168>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	791b      	ldrb	r3, [r3, #4]
 80131b6:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80131be:	2300      	movs	r3, #0
 80131c0:	83fb      	strh	r3, [r7, #30]
 80131c2:	e090      	b.n	80132e6 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	685a      	ldr	r2, [r3, #4]
 80131c8:	8bfb      	ldrh	r3, [r7, #30]
 80131ca:	015b      	lsls	r3, r3, #5
 80131cc:	4413      	add	r3, r2
 80131ce:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	785b      	ldrb	r3, [r3, #1]
 80131da:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80131dc:	7bfb      	ldrb	r3, [r7, #15]
 80131de:	f003 0301 	and.w	r3, r3, #1
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d179      	bne.n	80132da <_UG_ProcessTouchData+0x142>
 80131e6:	7bfb      	ldrb	r3, [r7, #15]
 80131e8:	f003 0302 	and.w	r3, r3, #2
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d074      	beq.n	80132da <_UG_ProcessTouchData+0x142>
 80131f0:	7bfb      	ldrb	r3, [r7, #15]
 80131f2:	f003 0308 	and.w	r3, r3, #8
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d06f      	beq.n	80132da <_UG_ProcessTouchData+0x142>
 80131fa:	7bfb      	ldrb	r3, [r7, #15]
 80131fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013200:	2b00      	cmp	r3, #0
 8013202:	d16a      	bne.n	80132da <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8013204:	7dfb      	ldrb	r3, [r7, #23]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d047      	beq.n	801329a <_UG_ProcessTouchData+0x102>
 801320a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013212:	d042      	beq.n	801329a <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8013214:	7f7b      	ldrb	r3, [r7, #29]
 8013216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801321a:	2b00      	cmp	r3, #0
 801321c:	d107      	bne.n	801322e <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 801321e:	7f7b      	ldrb	r3, [r7, #29]
 8013220:	f043 0305 	orr.w	r3, r3, #5
 8013224:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8013226:	7f7b      	ldrb	r3, [r7, #29]
 8013228:	f023 0318 	bic.w	r3, r3, #24
 801322c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 801322e:	7f7b      	ldrb	r3, [r7, #29]
 8013230:	f023 0320 	bic.w	r3, r3, #32
 8013234:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801323c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013240:	429a      	cmp	r2, r3
 8013242:	db25      	blt.n	8013290 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801324a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801324e:	429a      	cmp	r2, r3
 8013250:	dc1e      	bgt.n	8013290 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013258:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801325c:	429a      	cmp	r2, r3
 801325e:	db17      	blt.n	8013290 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013266:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801326a:	429a      	cmp	r2, r3
 801326c:	dc10      	bgt.n	8013290 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 801326e:	7f7b      	ldrb	r3, [r7, #29]
 8013270:	f043 0320 	orr.w	r3, r3, #32
 8013274:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8013276:	7f7b      	ldrb	r3, [r7, #29]
 8013278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801327c:	2b00      	cmp	r3, #0
 801327e:	d107      	bne.n	8013290 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8013280:	7f7b      	ldrb	r3, [r7, #29]
 8013282:	f023 0304 	bic.w	r3, r3, #4
 8013286:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8013288:	7f7b      	ldrb	r3, [r7, #29]
 801328a:	f043 0302 	orr.w	r3, r3, #2
 801328e:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8013290:	7f7b      	ldrb	r3, [r7, #29]
 8013292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013296:	777b      	strb	r3, [r7, #29]
 8013298:	e01f      	b.n	80132da <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 801329a:	7f7b      	ldrb	r3, [r7, #29]
 801329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d01a      	beq.n	80132da <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80132a4:	7f7b      	ldrb	r3, [r7, #29]
 80132a6:	f003 0320 	and.w	r3, r3, #32
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d004      	beq.n	80132b8 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80132ae:	7f7b      	ldrb	r3, [r7, #29]
 80132b0:	f043 0308 	orr.w	r3, r3, #8
 80132b4:	777b      	strb	r3, [r7, #29]
 80132b6:	e003      	b.n	80132c0 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 80132b8:	7f7b      	ldrb	r3, [r7, #29]
 80132ba:	f043 0310 	orr.w	r3, r3, #16
 80132be:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80132c0:	7f7b      	ldrb	r3, [r7, #29]
 80132c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d003      	beq.n	80132d2 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80132ca:	7f7b      	ldrb	r3, [r7, #29]
 80132cc:	f043 0301 	orr.w	r3, r3, #1
 80132d0:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80132d2:	7f7b      	ldrb	r3, [r7, #29]
 80132d4:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 80132d8:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	7f7a      	ldrb	r2, [r7, #29]
 80132de:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80132e0:	8bfb      	ldrh	r3, [r7, #30]
 80132e2:	3301      	adds	r3, #1
 80132e4:	83fb      	strh	r3, [r7, #30]
 80132e6:	8bfa      	ldrh	r2, [r7, #30]
 80132e8:	8abb      	ldrh	r3, [r7, #20]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	f4ff af6a 	bcc.w	80131c4 <_UG_ProcessTouchData+0x2c>
   }
}
 80132f0:	bf00      	nop
 80132f2:	bf00      	nop
 80132f4:	3724      	adds	r7, #36	; 0x24
 80132f6:	46bd      	mov	sp, r7
 80132f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fc:	4770      	bx	lr
 80132fe:	bf00      	nop
 8013300:	20002090 	.word	0x20002090

08013304 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b086      	sub	sp, #24
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013312:	2300      	movs	r3, #0
 8013314:	82fb      	strh	r3, [r7, #22]
 8013316:	e035      	b.n	8013384 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	685a      	ldr	r2, [r3, #4]
 801331c:	8afb      	ldrh	r3, [r7, #22]
 801331e:	015b      	lsls	r3, r3, #5
 8013320:	4413      	add	r3, r2
 8013322:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	785b      	ldrb	r3, [r3, #1]
 801332e:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8013330:	7bfb      	ldrb	r3, [r7, #15]
 8013332:	f003 0301 	and.w	r3, r3, #1
 8013336:	2b00      	cmp	r3, #0
 8013338:	d121      	bne.n	801337e <_UG_UpdateObjects+0x7a>
 801333a:	7bfb      	ldrb	r3, [r7, #15]
 801333c:	f003 0302 	and.w	r3, r3, #2
 8013340:	2b00      	cmp	r3, #0
 8013342:	d01c      	beq.n	801337e <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8013344:	7bfb      	ldrb	r3, [r7, #15]
 8013346:	f003 0320 	and.w	r3, r3, #32
 801334a:	2b00      	cmp	r3, #0
 801334c:	d004      	beq.n	8013358 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	6939      	ldr	r1, [r7, #16]
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8013358:	7bfb      	ldrb	r3, [r7, #15]
 801335a:	f003 0308 	and.w	r3, r3, #8
 801335e:	2b00      	cmp	r3, #0
 8013360:	d00d      	beq.n	801337e <_UG_UpdateObjects+0x7a>
 8013362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013366:	2b00      	cmp	r3, #0
 8013368:	da09      	bge.n	801337e <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 801336a:	7bbb      	ldrb	r3, [r7, #14]
 801336c:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8013370:	2b00      	cmp	r3, #0
 8013372:	d004      	beq.n	801337e <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	685b      	ldr	r3, [r3, #4]
 8013378:	6939      	ldr	r1, [r7, #16]
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 801337e:	8afb      	ldrh	r3, [r7, #22]
 8013380:	3301      	adds	r3, #1
 8013382:	82fb      	strh	r3, [r7, #22]
 8013384:	8afa      	ldrh	r2, [r7, #22]
 8013386:	8abb      	ldrh	r3, [r7, #20]
 8013388:	429a      	cmp	r2, r3
 801338a:	d3c5      	bcc.n	8013318 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 801338c:	bf00      	nop
 801338e:	bf00      	nop
 8013390:	3718      	adds	r7, #24
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
	...

08013398 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b086      	sub	sp, #24
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80133a0:	4b22      	ldr	r3, [pc, #136]	; (801342c <_UG_HandleEvents+0x94>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80133a6:	4b21      	ldr	r3, [pc, #132]	; (801342c <_UG_HandleEvents+0x94>)
 80133a8:	2202      	movs	r2, #2
 80133aa:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80133b2:	2300      	movs	r3, #0
 80133b4:	82fb      	strh	r3, [r7, #22]
 80133b6:	e02f      	b.n	8013418 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	685a      	ldr	r2, [r3, #4]
 80133bc:	8afb      	ldrh	r3, [r7, #22]
 80133be:	015b      	lsls	r3, r3, #5
 80133c0:	4413      	add	r3, r2
 80133c2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80133ca:	7bfb      	ldrb	r3, [r7, #15]
 80133cc:	f003 0301 	and.w	r3, r3, #1
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d11e      	bne.n	8013412 <_UG_HandleEvents+0x7a>
 80133d4:	7bfb      	ldrb	r3, [r7, #15]
 80133d6:	f003 0302 	and.w	r3, r3, #2
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d019      	beq.n	8013412 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	7e9b      	ldrb	r3, [r3, #26]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d015      	beq.n	8013412 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80133e6:	4a11      	ldr	r2, [pc, #68]	; (801342c <_UG_HandleEvents+0x94>)
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	7e1a      	ldrb	r2, [r3, #24]
 80133f0:	4b0e      	ldr	r3, [pc, #56]	; (801342c <_UG_HandleEvents+0x94>)
 80133f2:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	7e5a      	ldrb	r2, [r3, #25]
 80133f8:	4b0c      	ldr	r3, [pc, #48]	; (801342c <_UG_HandleEvents+0x94>)
 80133fa:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	7e9a      	ldrb	r2, [r3, #26]
 8013400:	4b0a      	ldr	r3, [pc, #40]	; (801342c <_UG_HandleEvents+0x94>)
 8013402:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013408:	4808      	ldr	r0, [pc, #32]	; (801342c <_UG_HandleEvents+0x94>)
 801340a:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	2200      	movs	r2, #0
 8013410:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8013412:	8afb      	ldrh	r3, [r7, #22]
 8013414:	3301      	adds	r3, #1
 8013416:	82fb      	strh	r3, [r7, #22]
 8013418:	8afa      	ldrh	r2, [r7, #22]
 801341a:	8abb      	ldrh	r3, [r7, #20]
 801341c:	429a      	cmp	r2, r3
 801341e:	d3cb      	bcc.n	80133b8 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8013420:	bf00      	nop
 8013422:	bf00      	nop
 8013424:	3718      	adds	r7, #24
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
 801342a:	bf00      	nop
 801342c:	200020a4 	.word	0x200020a4

08013430 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8013430:	b590      	push	{r4, r7, lr}
 8013432:	b08f      	sub	sp, #60	; 0x3c
 8013434:	af02      	add	r7, sp, #8
 8013436:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	2b00      	cmp	r3, #0
 801343e:	f000 812c 	beq.w	801369a <_UG_PutText+0x26a>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	2b00      	cmp	r3, #0
 8013448:	f000 8127 	beq.w	801369a <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	89db      	ldrh	r3, [r3, #14]
 8013450:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	895b      	ldrh	r3, [r3, #10]
 8013456:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	685b      	ldr	r3, [r3, #4]
 801345c:	3302      	adds	r3, #2
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8013462:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8013466:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801346a:	1ad2      	subs	r2, r2, r3
 801346c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013470:	429a      	cmp	r2, r3
 8013472:	f2c0 8114 	blt.w	801369e <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	891b      	ldrh	r3, [r3, #8]
 801347a:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	899b      	ldrh	r3, [r3, #12]
 8013480:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	7d1b      	ldrb	r3, [r3, #20]
 8013486:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	8adb      	ldrh	r3, [r3, #22]
 801348c:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	8b1b      	ldrh	r3, [r3, #24]
 8013492:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	60fb      	str	r3, [r7, #12]
   char* c = str;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7ff fb92 	bl	8012bcc <_UG_FontSelect>

   rc=1;
 80134a8:	2301      	movs	r3, #1
 80134aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80134b0:	4b80      	ldr	r3, [pc, #512]	; (80136b4 <_UG_PutText+0x284>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d107      	bne.n	80134cc <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 80134bc:	f107 0308 	add.w	r3, r7, #8
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7ff f9bf 	bl	8012844 <_UG_DecodeUTF8>
 80134c6:	4603      	mov	r3, r0
 80134c8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80134ca:	e004      	b.n	80134d6 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	1c5a      	adds	r2, r3, #1
 80134d0:	60ba      	str	r2, [r7, #8]
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80134d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d006      	beq.n	80134ea <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 80134dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134de:	2b0a      	cmp	r3, #10
 80134e0:	d1e6      	bne.n	80134b0 <_UG_PutText+0x80>
 80134e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80134e4:	3301      	adds	r3, #1
 80134e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80134e8:	e7e2      	b.n	80134b0 <_UG_PutText+0x80>
     if(!chr) break;
 80134ea:	bf00      	nop
   }

   yp = 0;
 80134ec:	2300      	movs	r3, #0
 80134ee:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 80134f0:	7e7b      	ldrb	r3, [r7, #25]
 80134f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d01f      	beq.n	801353a <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 80134fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80134fc:	8c3b      	ldrh	r3, [r7, #32]
 80134fe:	1ad3      	subs	r3, r2, r3
 8013500:	b29b      	uxth	r3, r3
 8013502:	3301      	adds	r3, #1
 8013504:	b29b      	uxth	r3, r3
 8013506:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8013508:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801350a:	8bfb      	ldrh	r3, [r7, #30]
 801350c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 801350e:	fb11 f303 	smulbb	r3, r1, r3
 8013512:	b29b      	uxth	r3, r3
 8013514:	1ad3      	subs	r3, r2, r3
 8013516:	b29b      	uxth	r3, r3
 8013518:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 801351a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801351c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801351e:	3b01      	subs	r3, #1
 8013520:	b299      	uxth	r1, r3
 8013522:	8abb      	ldrh	r3, [r7, #20]
 8013524:	fb11 f303 	smulbb	r3, r1, r3
 8013528:	b29b      	uxth	r3, r3
 801352a:	1ad3      	subs	r3, r2, r3
 801352c:	b29b      	uxth	r3, r3
 801352e:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8013530:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013534:	2b00      	cmp	r3, #0
 8013536:	f2c0 80b4 	blt.w	80136a2 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 801353a:	7e7b      	ldrb	r3, [r7, #25]
 801353c:	f003 0310 	and.w	r3, r3, #16
 8013540:	2b00      	cmp	r3, #0
 8013542:	d003      	beq.n	801354c <_UG_PutText+0x11c>
 8013544:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013548:	105b      	asrs	r3, r3, #1
 801354a:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 801354c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801354e:	8c3b      	ldrh	r3, [r7, #32]
 8013550:	4413      	add	r3, r2
 8013552:	b29b      	uxth	r3, r3
 8013554:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8013556:	2300      	movs	r3, #0
 8013558:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	60bb      	str	r3, [r7, #8]
      wl = 0;
 801355e:	2300      	movs	r3, #0
 8013560:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013562:	4b54      	ldr	r3, [pc, #336]	; (80136b4 <_UG_PutText+0x284>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801356a:	2b00      	cmp	r3, #0
 801356c:	d107      	bne.n	801357e <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 801356e:	f107 0308 	add.w	r3, r7, #8
 8013572:	4618      	mov	r0, r3
 8013574:	f7ff f966 	bl	8012844 <_UG_DecodeUTF8>
 8013578:	4603      	mov	r3, r0
 801357a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801357c:	e004      	b.n	8013588 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	1c5a      	adds	r2, r3, #1
 8013582:	60ba      	str	r2, [r7, #8]
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8013588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801358a:	2b00      	cmp	r3, #0
 801358c:	d01b      	beq.n	80135c6 <_UG_PutText+0x196>
 801358e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013590:	2b0a      	cmp	r3, #10
 8013592:	d018      	beq.n	80135c6 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8013594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013596:	2100      	movs	r1, #0
 8013598:	4618      	mov	r0, r3
 801359a:	f7ff f9cb 	bl	8012934 <_UG_GetCharData>
 801359e:	4603      	mov	r3, r0
 80135a0:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 80135a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80135a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135aa:	d00a      	beq.n	80135c2 <_UG_PutText+0x192>
         sl++;
 80135ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80135ae:	3301      	adds	r3, #1
 80135b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 80135b2:	8a7a      	ldrh	r2, [r7, #18]
 80135b4:	8afb      	ldrh	r3, [r7, #22]
 80135b6:	4413      	add	r3, r2
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135bc:	4413      	add	r3, r2
 80135be:	857b      	strh	r3, [r7, #42]	; 0x2a
 80135c0:	e7cf      	b.n	8013562 <_UG_PutText+0x132>
         if (w == -1){continue;}
 80135c2:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80135c4:	e7cd      	b.n	8013562 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 80135c6:	8afb      	ldrh	r3, [r7, #22]
 80135c8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80135ca:	1ad3      	subs	r3, r2, r3
 80135cc:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 80135ce:	8b7a      	ldrh	r2, [r7, #26]
 80135d0:	8bbb      	ldrh	r3, [r7, #28]
 80135d2:	1ad3      	subs	r3, r2, r3
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	3301      	adds	r3, #1
 80135d8:	b29b      	uxth	r3, r3
 80135da:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 80135dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80135de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135e0:	1ad3      	subs	r3, r2, r3
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 80135e6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	db5b      	blt.n	80136a6 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80135ee:	7e7b      	ldrb	r3, [r7, #25]
 80135f0:	f003 0301 	and.w	r3, r3, #1
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d002      	beq.n	80135fe <_UG_PutText+0x1ce>
 80135f8:	2300      	movs	r3, #0
 80135fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80135fc:	e008      	b.n	8013610 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 80135fe:	7e7b      	ldrb	r3, [r7, #25]
 8013600:	f003 0302 	and.w	r3, r3, #2
 8013604:	2b00      	cmp	r3, #0
 8013606:	d003      	beq.n	8013610 <_UG_PutText+0x1e0>
 8013608:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801360c:	105b      	asrs	r3, r3, #1
 801360e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8013610:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013612:	8bbb      	ldrh	r3, [r7, #28]
 8013614:	4413      	add	r3, r2
 8013616:	b29b      	uxth	r3, r3
 8013618:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801361a:	4b26      	ldr	r3, [pc, #152]	; (80136b4 <_UG_PutText+0x284>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013622:	2b00      	cmp	r3, #0
 8013624:	d107      	bne.n	8013636 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8013626:	f107 030c 	add.w	r3, r7, #12
 801362a:	4618      	mov	r0, r3
 801362c:	f7ff f90a 	bl	8012844 <_UG_DecodeUTF8>
 8013630:	4603      	mov	r3, r0
 8013632:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013634:	e004      	b.n	8013640 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	1c5a      	adds	r2, r3, #1
 801363a:	60fa      	str	r2, [r7, #12]
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8013640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013642:	2b00      	cmp	r3, #0
 8013644:	d031      	beq.n	80136aa <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8013646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013648:	2b0a      	cmp	r3, #10
 801364a:	d01c      	beq.n	8013686 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	8a1c      	ldrh	r4, [r3, #16]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	8a5b      	ldrh	r3, [r3, #18]
 8013654:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8013658:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 801365c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 801365e:	9300      	str	r3, [sp, #0]
 8013660:	4623      	mov	r3, r4
 8013662:	f7ff fb35 	bl	8012cd0 <_UG_PutChar>
 8013666:	4603      	mov	r3, r0
 8013668:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 801366a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013672:	d0d2      	beq.n	801361a <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8013674:	8a7a      	ldrh	r2, [r7, #18]
 8013676:	8afb      	ldrh	r3, [r7, #22]
 8013678:	4413      	add	r3, r2
 801367a:	b29a      	uxth	r2, r3
 801367c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801367e:	4413      	add	r3, r2
 8013680:	b29b      	uxth	r3, r3
 8013682:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013684:	e7c9      	b.n	801361a <_UG_PutText+0x1ea>
           break;
 8013686:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8013688:	8bfa      	ldrh	r2, [r7, #30]
 801368a:	8abb      	ldrh	r3, [r7, #20]
 801368c:	4413      	add	r3, r2
 801368e:	b29a      	uxth	r2, r3
 8013690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013692:	4413      	add	r3, r2
 8013694:	b29b      	uxth	r3, r3
 8013696:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8013698:	e75d      	b.n	8013556 <_UG_PutText+0x126>
     return;
 801369a:	bf00      	nop
 801369c:	e006      	b.n	80136ac <_UG_PutText+0x27c>
     return;
 801369e:	bf00      	nop
 80136a0:	e004      	b.n	80136ac <_UG_PutText+0x27c>
        return;
 80136a2:	bf00      	nop
 80136a4:	e002      	b.n	80136ac <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 80136a6:	bf00      	nop
 80136a8:	e000      	b.n	80136ac <_UG_PutText+0x27c>
           return;
 80136aa:	bf00      	nop
   }
}
 80136ac:	3734      	adds	r7, #52	; 0x34
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd90      	pop	{r4, r7, pc}
 80136b2:	bf00      	nop
 80136b4:	20002090 	.word	0x20002090

080136b8 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80136b8:	b5b0      	push	{r4, r5, r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af02      	add	r7, sp, #8
 80136be:	4604      	mov	r4, r0
 80136c0:	4608      	mov	r0, r1
 80136c2:	4611      	mov	r1, r2
 80136c4:	461a      	mov	r2, r3
 80136c6:	4623      	mov	r3, r4
 80136c8:	80fb      	strh	r3, [r7, #6]
 80136ca:	4603      	mov	r3, r0
 80136cc:	80bb      	strh	r3, [r7, #4]
 80136ce:	460b      	mov	r3, r1
 80136d0:	807b      	strh	r3, [r7, #2]
 80136d2:	4613      	mov	r3, r2
 80136d4:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80136d6:	887b      	ldrh	r3, [r7, #2]
 80136d8:	3b01      	subs	r3, #1
 80136da:	b29b      	uxth	r3, r3
 80136dc:	b21c      	sxth	r4, r3
 80136de:	69bb      	ldr	r3, [r7, #24]
 80136e0:	1c9a      	adds	r2, r3, #2
 80136e2:	61ba      	str	r2, [r7, #24]
 80136e4:	881b      	ldrh	r3, [r3, #0]
 80136e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80136ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80136ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	4613      	mov	r3, r2
 80136f6:	4622      	mov	r2, r4
 80136f8:	f7fe fee0 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80136fc:	88bb      	ldrh	r3, [r7, #4]
 80136fe:	3301      	adds	r3, #1
 8013700:	b29b      	uxth	r3, r3
 8013702:	b219      	sxth	r1, r3
 8013704:	883b      	ldrh	r3, [r7, #0]
 8013706:	3b01      	subs	r3, #1
 8013708:	b29b      	uxth	r3, r3
 801370a:	b21c      	sxth	r4, r3
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	1c9a      	adds	r2, r3, #2
 8013710:	61ba      	str	r2, [r7, #24]
 8013712:	881b      	ldrh	r3, [r3, #0]
 8013714:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013718:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801371c:	9300      	str	r3, [sp, #0]
 801371e:	4623      	mov	r3, r4
 8013720:	f7fe fecc 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	1c9a      	adds	r2, r3, #2
 8013728:	61ba      	str	r2, [r7, #24]
 801372a:	881b      	ldrh	r3, [r3, #0]
 801372c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8013730:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013734:	f9b7 1000 	ldrsh.w	r1, [r7]
 8013738:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801373c:	9300      	str	r3, [sp, #0]
 801373e:	4623      	mov	r3, r4
 8013740:	f7fe febc 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8013744:	883b      	ldrh	r3, [r7, #0]
 8013746:	3b01      	subs	r3, #1
 8013748:	b29b      	uxth	r3, r3
 801374a:	b21c      	sxth	r4, r3
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	1c9a      	adds	r2, r3, #2
 8013750:	61ba      	str	r2, [r7, #24]
 8013752:	881b      	ldrh	r3, [r3, #0]
 8013754:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013758:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801375c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8013760:	9300      	str	r3, [sp, #0]
 8013762:	4623      	mov	r3, r4
 8013764:	f7fe feaa 	bl	80124bc <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8013768:	88fb      	ldrh	r3, [r7, #6]
 801376a:	3301      	adds	r3, #1
 801376c:	b29b      	uxth	r3, r3
 801376e:	b218      	sxth	r0, r3
 8013770:	88bb      	ldrh	r3, [r7, #4]
 8013772:	3301      	adds	r3, #1
 8013774:	b29b      	uxth	r3, r3
 8013776:	b219      	sxth	r1, r3
 8013778:	887b      	ldrh	r3, [r7, #2]
 801377a:	3b02      	subs	r3, #2
 801377c:	b29b      	uxth	r3, r3
 801377e:	b21c      	sxth	r4, r3
 8013780:	88bb      	ldrh	r3, [r7, #4]
 8013782:	3301      	adds	r3, #1
 8013784:	b29b      	uxth	r3, r3
 8013786:	b21d      	sxth	r5, r3
 8013788:	69bb      	ldr	r3, [r7, #24]
 801378a:	1c9a      	adds	r2, r3, #2
 801378c:	61ba      	str	r2, [r7, #24]
 801378e:	881b      	ldrh	r3, [r3, #0]
 8013790:	9300      	str	r3, [sp, #0]
 8013792:	462b      	mov	r3, r5
 8013794:	4622      	mov	r2, r4
 8013796:	f7fe fe91 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 801379a:	88fb      	ldrh	r3, [r7, #6]
 801379c:	3301      	adds	r3, #1
 801379e:	b29b      	uxth	r3, r3
 80137a0:	b218      	sxth	r0, r3
 80137a2:	88bb      	ldrh	r3, [r7, #4]
 80137a4:	3302      	adds	r3, #2
 80137a6:	b29b      	uxth	r3, r3
 80137a8:	b219      	sxth	r1, r3
 80137aa:	88fb      	ldrh	r3, [r7, #6]
 80137ac:	3301      	adds	r3, #1
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	b21c      	sxth	r4, r3
 80137b2:	883b      	ldrh	r3, [r7, #0]
 80137b4:	3b02      	subs	r3, #2
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	b21d      	sxth	r5, r3
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	1c9a      	adds	r2, r3, #2
 80137be:	61ba      	str	r2, [r7, #24]
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	9300      	str	r3, [sp, #0]
 80137c4:	462b      	mov	r3, r5
 80137c6:	4622      	mov	r2, r4
 80137c8:	f7fe fe78 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80137cc:	88fb      	ldrh	r3, [r7, #6]
 80137ce:	3301      	adds	r3, #1
 80137d0:	b29b      	uxth	r3, r3
 80137d2:	b218      	sxth	r0, r3
 80137d4:	883b      	ldrh	r3, [r7, #0]
 80137d6:	3b01      	subs	r3, #1
 80137d8:	b29b      	uxth	r3, r3
 80137da:	b219      	sxth	r1, r3
 80137dc:	887b      	ldrh	r3, [r7, #2]
 80137de:	3b01      	subs	r3, #1
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	b21c      	sxth	r4, r3
 80137e4:	883b      	ldrh	r3, [r7, #0]
 80137e6:	3b01      	subs	r3, #1
 80137e8:	b29b      	uxth	r3, r3
 80137ea:	b21d      	sxth	r5, r3
 80137ec:	69bb      	ldr	r3, [r7, #24]
 80137ee:	1c9a      	adds	r2, r3, #2
 80137f0:	61ba      	str	r2, [r7, #24]
 80137f2:	881b      	ldrh	r3, [r3, #0]
 80137f4:	9300      	str	r3, [sp, #0]
 80137f6:	462b      	mov	r3, r5
 80137f8:	4622      	mov	r2, r4
 80137fa:	f7fe fe5f 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80137fe:	887b      	ldrh	r3, [r7, #2]
 8013800:	3b01      	subs	r3, #1
 8013802:	b29b      	uxth	r3, r3
 8013804:	b218      	sxth	r0, r3
 8013806:	88bb      	ldrh	r3, [r7, #4]
 8013808:	3301      	adds	r3, #1
 801380a:	b29b      	uxth	r3, r3
 801380c:	b219      	sxth	r1, r3
 801380e:	887b      	ldrh	r3, [r7, #2]
 8013810:	3b01      	subs	r3, #1
 8013812:	b29b      	uxth	r3, r3
 8013814:	b21c      	sxth	r4, r3
 8013816:	883b      	ldrh	r3, [r7, #0]
 8013818:	3b02      	subs	r3, #2
 801381a:	b29b      	uxth	r3, r3
 801381c:	b21d      	sxth	r5, r3
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	1c9a      	adds	r2, r3, #2
 8013822:	61ba      	str	r2, [r7, #24]
 8013824:	881b      	ldrh	r3, [r3, #0]
 8013826:	9300      	str	r3, [sp, #0]
 8013828:	462b      	mov	r3, r5
 801382a:	4622      	mov	r2, r4
 801382c:	f7fe fe46 	bl	80124bc <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8013830:	88fb      	ldrh	r3, [r7, #6]
 8013832:	3302      	adds	r3, #2
 8013834:	b29b      	uxth	r3, r3
 8013836:	b218      	sxth	r0, r3
 8013838:	88bb      	ldrh	r3, [r7, #4]
 801383a:	3302      	adds	r3, #2
 801383c:	b29b      	uxth	r3, r3
 801383e:	b219      	sxth	r1, r3
 8013840:	887b      	ldrh	r3, [r7, #2]
 8013842:	3b03      	subs	r3, #3
 8013844:	b29b      	uxth	r3, r3
 8013846:	b21c      	sxth	r4, r3
 8013848:	88bb      	ldrh	r3, [r7, #4]
 801384a:	3302      	adds	r3, #2
 801384c:	b29b      	uxth	r3, r3
 801384e:	b21d      	sxth	r5, r3
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	1c9a      	adds	r2, r3, #2
 8013854:	61ba      	str	r2, [r7, #24]
 8013856:	881b      	ldrh	r3, [r3, #0]
 8013858:	9300      	str	r3, [sp, #0]
 801385a:	462b      	mov	r3, r5
 801385c:	4622      	mov	r2, r4
 801385e:	f7fe fe2d 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8013862:	88fb      	ldrh	r3, [r7, #6]
 8013864:	3302      	adds	r3, #2
 8013866:	b29b      	uxth	r3, r3
 8013868:	b218      	sxth	r0, r3
 801386a:	88bb      	ldrh	r3, [r7, #4]
 801386c:	3303      	adds	r3, #3
 801386e:	b29b      	uxth	r3, r3
 8013870:	b219      	sxth	r1, r3
 8013872:	88fb      	ldrh	r3, [r7, #6]
 8013874:	3302      	adds	r3, #2
 8013876:	b29b      	uxth	r3, r3
 8013878:	b21c      	sxth	r4, r3
 801387a:	883b      	ldrh	r3, [r7, #0]
 801387c:	3b03      	subs	r3, #3
 801387e:	b29b      	uxth	r3, r3
 8013880:	b21d      	sxth	r5, r3
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	1c9a      	adds	r2, r3, #2
 8013886:	61ba      	str	r2, [r7, #24]
 8013888:	881b      	ldrh	r3, [r3, #0]
 801388a:	9300      	str	r3, [sp, #0]
 801388c:	462b      	mov	r3, r5
 801388e:	4622      	mov	r2, r4
 8013890:	f7fe fe14 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8013894:	88fb      	ldrh	r3, [r7, #6]
 8013896:	3302      	adds	r3, #2
 8013898:	b29b      	uxth	r3, r3
 801389a:	b218      	sxth	r0, r3
 801389c:	883b      	ldrh	r3, [r7, #0]
 801389e:	3b02      	subs	r3, #2
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	b219      	sxth	r1, r3
 80138a4:	887b      	ldrh	r3, [r7, #2]
 80138a6:	3b02      	subs	r3, #2
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	b21c      	sxth	r4, r3
 80138ac:	883b      	ldrh	r3, [r7, #0]
 80138ae:	3b02      	subs	r3, #2
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	b21d      	sxth	r5, r3
 80138b4:	69bb      	ldr	r3, [r7, #24]
 80138b6:	1c9a      	adds	r2, r3, #2
 80138b8:	61ba      	str	r2, [r7, #24]
 80138ba:	881b      	ldrh	r3, [r3, #0]
 80138bc:	9300      	str	r3, [sp, #0]
 80138be:	462b      	mov	r3, r5
 80138c0:	4622      	mov	r2, r4
 80138c2:	f7fe fdfb 	bl	80124bc <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80138c6:	887b      	ldrh	r3, [r7, #2]
 80138c8:	3b02      	subs	r3, #2
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	b218      	sxth	r0, r3
 80138ce:	88bb      	ldrh	r3, [r7, #4]
 80138d0:	3302      	adds	r3, #2
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	b219      	sxth	r1, r3
 80138d6:	887b      	ldrh	r3, [r7, #2]
 80138d8:	3b02      	subs	r3, #2
 80138da:	b29b      	uxth	r3, r3
 80138dc:	b21a      	sxth	r2, r3
 80138de:	883b      	ldrh	r3, [r7, #0]
 80138e0:	3b03      	subs	r3, #3
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	b21c      	sxth	r4, r3
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	881b      	ldrh	r3, [r3, #0]
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	4623      	mov	r3, r4
 80138ee:	f7fe fde5 	bl	80124bc <UG_DrawLine>
}
 80138f2:	bf00      	nop
 80138f4:	3708      	adds	r7, #8
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080138fc <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80138fc:	b480      	push	{r7}
 80138fe:	b083      	sub	sp, #12
 8013900:	af00      	add	r7, sp, #0
 8013902:	4603      	mov	r3, r0
 8013904:	6039      	str	r1, [r7, #0]
 8013906:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013908:	79fb      	ldrb	r3, [r7, #7]
 801390a:	2b03      	cmp	r3, #3
 801390c:	d810      	bhi.n	8013930 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 801390e:	4b0b      	ldr	r3, [pc, #44]	; (801393c <UG_DriverRegister+0x40>)
 8013910:	681a      	ldr	r2, [r3, #0]
 8013912:	79fb      	ldrb	r3, [r7, #7]
 8013914:	330a      	adds	r3, #10
 8013916:	00db      	lsls	r3, r3, #3
 8013918:	4413      	add	r3, r2
 801391a:	683a      	ldr	r2, [r7, #0]
 801391c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 801391e:	4b07      	ldr	r3, [pc, #28]	; (801393c <UG_DriverRegister+0x40>)
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	79fb      	ldrb	r3, [r7, #7]
 8013924:	330a      	adds	r3, #10
 8013926:	00db      	lsls	r3, r3, #3
 8013928:	4413      	add	r3, r2
 801392a:	2203      	movs	r2, #3
 801392c:	721a      	strb	r2, [r3, #8]
 801392e:	e000      	b.n	8013932 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013930:	bf00      	nop
}
 8013932:	370c      	adds	r7, #12
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr
 801393c:	20002090 	.word	0x20002090

08013940 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8013946:	4b5e      	ldr	r3, [pc, #376]	; (8013ac0 <UG_Update+0x180>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801394e:	f003 0301 	and.w	r3, r3, #1
 8013952:	2b00      	cmp	r3, #0
 8013954:	d00a      	beq.n	801396c <UG_Update+0x2c>
 8013956:	4b5a      	ldr	r3, [pc, #360]	; (8013ac0 <UG_Update+0x180>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 801395e:	4b58      	ldr	r3, [pc, #352]	; (8013ac0 <UG_Update+0x180>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	f022 0201 	bic.w	r2, r2, #1
 8013966:	b2d2      	uxtb	r2, r2
 8013968:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 801396c:	4b54      	ldr	r3, [pc, #336]	; (8013ac0 <UG_Update+0x180>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	68da      	ldr	r2, [r3, #12]
 8013972:	4b53      	ldr	r3, [pc, #332]	; (8013ac0 <UG_Update+0x180>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	691b      	ldr	r3, [r3, #16]
 8013978:	429a      	cmp	r2, r3
 801397a:	d071      	beq.n	8013a60 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 801397c:	4b50      	ldr	r3, [pc, #320]	; (8013ac0 <UG_Update+0x180>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d06c      	beq.n	8013a60 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8013986:	4b4e      	ldr	r3, [pc, #312]	; (8013ac0 <UG_Update+0x180>)
 8013988:	681a      	ldr	r2, [r3, #0]
 801398a:	4b4d      	ldr	r3, [pc, #308]	; (8013ac0 <UG_Update+0x180>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	6912      	ldr	r2, [r2, #16]
 8013990:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8013992:	4b4b      	ldr	r3, [pc, #300]	; (8013ac0 <UG_Update+0x180>)
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	4b4a      	ldr	r3, [pc, #296]	; (8013ac0 <UG_Update+0x180>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	68d2      	ldr	r2, [r2, #12]
 801399c:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 801399e:	4b48      	ldr	r3, [pc, #288]	; (8013ac0 <UG_Update+0x180>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	695b      	ldr	r3, [r3, #20]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d045      	beq.n	8013a34 <UG_Update+0xf4>
 80139a8:	4b45      	ldr	r3, [pc, #276]	; (8013ac0 <UG_Update+0x180>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	695b      	ldr	r3, [r3, #20]
 80139ae:	7d9b      	ldrb	r3, [r3, #22]
 80139b0:	f003 0302 	and.w	r3, r3, #2
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d03d      	beq.n	8013a34 <UG_Update+0xf4>
 80139b8:	4b41      	ldr	r3, [pc, #260]	; (8013ac0 <UG_Update+0x180>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	695b      	ldr	r3, [r3, #20]
 80139be:	7a1b      	ldrb	r3, [r3, #8]
 80139c0:	f003 0308 	and.w	r3, r3, #8
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d035      	beq.n	8013a34 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80139c8:	4b3d      	ldr	r3, [pc, #244]	; (8013ac0 <UG_Update+0x180>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	695b      	ldr	r3, [r3, #20]
 80139ce:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80139d2:	4b3b      	ldr	r3, [pc, #236]	; (8013ac0 <UG_Update+0x180>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	691b      	ldr	r3, [r3, #16]
 80139d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80139dc:	429a      	cmp	r2, r3
 80139de:	d123      	bne.n	8013a28 <UG_Update+0xe8>
 80139e0:	4b37      	ldr	r3, [pc, #220]	; (8013ac0 <UG_Update+0x180>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	695b      	ldr	r3, [r3, #20]
 80139e6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80139ea:	4b35      	ldr	r3, [pc, #212]	; (8013ac0 <UG_Update+0x180>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	691b      	ldr	r3, [r3, #16]
 80139f0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d117      	bne.n	8013a28 <UG_Update+0xe8>
 80139f8:	4b31      	ldr	r3, [pc, #196]	; (8013ac0 <UG_Update+0x180>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	695b      	ldr	r3, [r3, #20]
 80139fe:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8013a02:	4b2f      	ldr	r3, [pc, #188]	; (8013ac0 <UG_Update+0x180>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	691b      	ldr	r3, [r3, #16]
 8013a08:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d10b      	bne.n	8013a28 <UG_Update+0xe8>
 8013a10:	4b2b      	ldr	r3, [pc, #172]	; (8013ac0 <UG_Update+0x180>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	695b      	ldr	r3, [r3, #20]
 8013a16:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8013a1a:	4b29      	ldr	r3, [pc, #164]	; (8013ac0 <UG_Update+0x180>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	691b      	ldr	r3, [r3, #16]
 8013a20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d005      	beq.n	8013a34 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8013a28:	4b25      	ldr	r3, [pc, #148]	; (8013ac0 <UG_Update+0x180>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	695b      	ldr	r3, [r3, #20]
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f000 f848 	bl	8013ac4 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8013a34:	4b22      	ldr	r3, [pc, #136]	; (8013ac0 <UG_Update+0x180>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	691b      	ldr	r3, [r3, #16]
 8013a3a:	7a1a      	ldrb	r2, [r3, #8]
 8013a3c:	4b20      	ldr	r3, [pc, #128]	; (8013ac0 <UG_Update+0x180>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	691b      	ldr	r3, [r3, #16]
 8013a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013a46:	b2d2      	uxtb	r2, r2
 8013a48:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8013a4a:	4b1d      	ldr	r3, [pc, #116]	; (8013ac0 <UG_Update+0x180>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	691b      	ldr	r3, [r3, #16]
 8013a50:	7a1a      	ldrb	r2, [r3, #8]
 8013a52:	4b1b      	ldr	r3, [pc, #108]	; (8013ac0 <UG_Update+0x180>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	691b      	ldr	r3, [r3, #16]
 8013a58:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8013a5c:	b2d2      	uxtb	r2, r2
 8013a5e:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8013a60:	4b17      	ldr	r3, [pc, #92]	; (8013ac0 <UG_Update+0x180>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	691b      	ldr	r3, [r3, #16]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d01b      	beq.n	8013aa2 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8013a6a:	4b15      	ldr	r3, [pc, #84]	; (8013ac0 <UG_Update+0x180>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	691b      	ldr	r3, [r3, #16]
 8013a70:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	7a1b      	ldrb	r3, [r3, #8]
 8013a76:	f003 0320 	and.w	r3, r3, #32
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d002      	beq.n	8013a84 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f000 f8ca 	bl	8013c18 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	7a1b      	ldrb	r3, [r3, #8]
 8013a88:	f003 0308 	and.w	r3, r3, #8
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d008      	beq.n	8013aa2 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f7ff fb81 	bl	8013198 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f7ff fc34 	bl	8013304 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f7ff fc7b 	bl	8013398 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8013aa2:	4b07      	ldr	r3, [pc, #28]	; (8013ac0 <UG_Update+0x180>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	689b      	ldr	r3, [r3, #8]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d004      	beq.n	8013ab8 <UG_Update+0x178>
     gui->device->flush();
 8013aae:	4b04      	ldr	r3, [pc, #16]	; (8013ac0 <UG_Update+0x180>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	689b      	ldr	r3, [r3, #8]
 8013ab6:	4798      	blx	r3
   }
}
 8013ab8:	bf00      	nop
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	20002090 	.word	0x20002090

08013ac4 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8013ac4:	b590      	push	{r4, r7, lr}
 8013ac6:	b08f      	sub	sp, #60	; 0x3c
 8013ac8:	af02      	add	r7, sp, #8
 8013aca:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	f000 809a 	beq.w	8013c08 <_UG_WindowDrawTitle+0x144>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	7a1b      	ldrb	r3, [r3, #8]
 8013ad8:	f003 0302 	and.w	r3, r3, #2
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	f000 8093 	beq.w	8013c08 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	89db      	ldrh	r3, [r3, #14]
 8013ae6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	8a1b      	ldrh	r3, [r3, #16]
 8013aec:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	8a5b      	ldrh	r3, [r3, #18]
 8013af2:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	8a9b      	ldrh	r3, [r3, #20]
 8013af8:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	7d9b      	ldrb	r3, [r3, #22]
 8013afe:	f003 0301 	and.w	r3, r3, #1
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d00f      	beq.n	8013b26 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8013b06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013b08:	3303      	adds	r3, #3
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8013b0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b10:	3303      	adds	r3, #3
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8013b16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b18:	3b03      	subs	r3, #3
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8013b1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013b20:	3b03      	subs	r3, #3
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8013b26:	4b3b      	ldr	r3, [pc, #236]	; (8013c14 <_UG_WindowDrawTitle+0x150>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	691b      	ldr	r3, [r3, #16]
 8013b2c:	687a      	ldr	r2, [r7, #4]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d106      	bne.n	8013b40 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013b36:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013b3c:	83bb      	strh	r3, [r7, #28]
 8013b3e:	e005      	b.n	8013b4c <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b44:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b4a:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b52:	b29a      	uxth	r2, r3
 8013b54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b56:	4413      	add	r3, r2
 8013b58:	b29b      	uxth	r3, r3
 8013b5a:	3b01      	subs	r3, #1
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	b21c      	sxth	r4, r3
 8013b60:	8bfb      	ldrh	r3, [r7, #30]
 8013b62:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013b66:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013b6a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013b6e:	9300      	str	r3, [sp, #0]
 8013b70:	4623      	mov	r3, r4
 8013b72:	f7fe fb03 	bl	801217c <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	699b      	ldr	r3, [r3, #24]
 8013b7a:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	69db      	ldr	r3, [r3, #28]
 8013b80:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8013b82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013b84:	3303      	adds	r3, #3
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	b21b      	sxth	r3, r3
 8013b8a:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8013b8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b8e:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8013b90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b92:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b9a:	b29a      	uxth	r2, r3
 8013b9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b9e:	4413      	add	r3, r2
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	3b01      	subs	r3, #1
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	b21b      	sxth	r3, r3
 8013ba8:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013bb0:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8013bba:	b21b      	sxth	r3, r3
 8013bbc:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8013bc4:	b21b      	sxth	r3, r3
 8013bc6:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8013bc8:	f107 030c 	add.w	r3, r7, #12
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7ff fc2f 	bl	8013430 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013bd8:	b29a      	uxth	r2, r3
 8013bda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013bdc:	4413      	add	r3, r2
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	b219      	sxth	r1, r3
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013be8:	b29a      	uxth	r2, r3
 8013bea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013bec:	4413      	add	r3, r2
 8013bee:	b29b      	uxth	r3, r3
 8013bf0:	b21b      	sxth	r3, r3
 8013bf2:	f649 5413 	movw	r4, #40211	; 0x9d13
 8013bf6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013bfa:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013bfe:	9400      	str	r4, [sp, #0]
 8013c00:	f7fe fc5c 	bl	80124bc <UG_DrawLine>
      return UG_RESULT_OK;
 8013c04:	2300      	movs	r3, #0
 8013c06:	e001      	b.n	8013c0c <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8013c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3734      	adds	r7, #52	; 0x34
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd90      	pop	{r4, r7, pc}
 8013c14:	20002090 	.word	0x20002090

08013c18 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8013c18:	b590      	push	{r4, r7, lr}
 8013c1a:	b089      	sub	sp, #36	; 0x24
 8013c1c:	af02      	add	r7, sp, #8
 8013c1e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	89db      	ldrh	r3, [r3, #14]
 8013c24:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	8a1b      	ldrh	r3, [r3, #16]
 8013c2a:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	8a5b      	ldrh	r3, [r3, #18]
 8013c30:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	8a9b      	ldrh	r3, [r3, #20]
 8013c36:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	7a1b      	ldrb	r3, [r3, #8]
 8013c3c:	f023 0320 	bic.w	r3, r3, #32
 8013c40:	b2da      	uxtb	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	7a1b      	ldrb	r3, [r3, #8]
 8013c4a:	f003 0308 	and.w	r3, r3, #8
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	f000 8084 	beq.w	8013d5c <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	7d9b      	ldrb	r3, [r3, #22]
 8013c58:	f003 0301 	and.w	r3, r3, #1
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d021      	beq.n	8013ca4 <_UG_WindowUpdate+0x8c>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	7a1b      	ldrb	r3, [r3, #8]
 8013c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d11b      	bne.n	8013ca4 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8013c6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013c70:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013c74:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013c78:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013c7c:	4c43      	ldr	r4, [pc, #268]	; (8013d8c <_UG_WindowUpdate+0x174>)
 8013c7e:	9400      	str	r4, [sp, #0]
 8013c80:	f7ff fd1a 	bl	80136b8 <_UG_DrawObjectFrame>
         xs+=3;
 8013c84:	8abb      	ldrh	r3, [r7, #20]
 8013c86:	3303      	adds	r3, #3
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8013c8c:	8a7b      	ldrh	r3, [r7, #18]
 8013c8e:	3303      	adds	r3, #3
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8013c94:	8a3b      	ldrh	r3, [r7, #16]
 8013c96:	3b03      	subs	r3, #3
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8013c9c:	89fb      	ldrh	r3, [r7, #14]
 8013c9e:	3b03      	subs	r3, #3
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	7d9b      	ldrb	r3, [r3, #22]
 8013ca8:	f003 0302 	and.w	r3, r3, #2
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d01a      	beq.n	8013ce6 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f7ff ff07 	bl	8013ac4 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	8a7b      	ldrh	r3, [r7, #18]
 8013cc0:	4413      	add	r3, r2
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	7a1b      	ldrb	r3, [r3, #8]
 8013cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d007      	beq.n	8013ce6 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	7a1b      	ldrb	r3, [r3, #8]
 8013cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013cde:	b2da      	uxtb	r2, r3
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	721a      	strb	r2, [r3, #8]
            return;
 8013ce4:	e04e      	b.n	8013d84 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	899b      	ldrh	r3, [r3, #12]
 8013cea:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8013cee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013cf2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013cf6:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013cfa:	9300      	str	r3, [sp, #0]
 8013cfc:	4623      	mov	r3, r4
 8013cfe:	f7fe fa3d 	bl	801217c <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8013d08:	2300      	movs	r3, #0
 8013d0a:	82fb      	strh	r3, [r7, #22]
 8013d0c:	e021      	b.n	8013d52 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	685a      	ldr	r2, [r3, #4]
 8013d12:	8afb      	ldrh	r3, [r7, #22]
 8013d14:	015b      	lsls	r3, r3, #5
 8013d16:	4413      	add	r3, r2
 8013d18:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	f003 0301 	and.w	r3, r3, #1
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d112      	bne.n	8013d4c <_UG_WindowUpdate+0x134>
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	781b      	ldrb	r3, [r3, #0]
 8013d2a:	f003 0302 	and.w	r3, r3, #2
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d00c      	beq.n	8013d4c <_UG_WindowUpdate+0x134>
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	f003 0308 	and.w	r3, r3, #8
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d006      	beq.n	8013d4c <_UG_WindowUpdate+0x134>
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013d46:	b2da      	uxtb	r2, r3
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8013d4c:	8afb      	ldrh	r3, [r7, #22]
 8013d4e:	3301      	adds	r3, #1
 8013d50:	82fb      	strh	r3, [r7, #22]
 8013d52:	8afa      	ldrh	r2, [r7, #22]
 8013d54:	89bb      	ldrh	r3, [r7, #12]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d3d9      	bcc.n	8013d0e <_UG_WindowUpdate+0xf6>
 8013d5a:	e013      	b.n	8013d84 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8013d74:	4b06      	ldr	r3, [pc, #24]	; (8013d90 <_UG_WindowUpdate+0x178>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013d7c:	9300      	str	r3, [sp, #0]
 8013d7e:	4623      	mov	r3, r4
 8013d80:	f7fe f9fc 	bl	801217c <UG_FillFrame>
   }
}
 8013d84:	371c      	adds	r7, #28
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd90      	pop	{r4, r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	0801d448 	.word	0x0801d448
 8013d90:	20002090 	.word	0x20002090

08013d94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b084      	sub	sp, #16
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013da0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013da4:	f002 f8fc 	bl	8015fa0 <USBD_static_malloc>
 8013da8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d105      	bne.n	8013dbc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2200      	movs	r2, #0
 8013db4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013db8:	2302      	movs	r3, #2
 8013dba:	e066      	b.n	8013e8a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	68fa      	ldr	r2, [r7, #12]
 8013dc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	7c1b      	ldrb	r3, [r3, #16]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d119      	bne.n	8013e00 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013dd0:	2202      	movs	r2, #2
 8013dd2:	2181      	movs	r1, #129	; 0x81
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f001 ff8a 	bl	8015cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2201      	movs	r2, #1
 8013dde:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013de4:	2202      	movs	r2, #2
 8013de6:	2101      	movs	r1, #1
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f001 ff80 	bl	8015cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2201      	movs	r2, #1
 8013df2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2210      	movs	r2, #16
 8013dfa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013dfe:	e016      	b.n	8013e2e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013e00:	2340      	movs	r3, #64	; 0x40
 8013e02:	2202      	movs	r2, #2
 8013e04:	2181      	movs	r1, #129	; 0x81
 8013e06:	6878      	ldr	r0, [r7, #4]
 8013e08:	f001 ff71 	bl	8015cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2201      	movs	r2, #1
 8013e10:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013e12:	2340      	movs	r3, #64	; 0x40
 8013e14:	2202      	movs	r2, #2
 8013e16:	2101      	movs	r1, #1
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f001 ff68 	bl	8015cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2201      	movs	r2, #1
 8013e22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2210      	movs	r2, #16
 8013e2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013e2e:	2308      	movs	r3, #8
 8013e30:	2203      	movs	r2, #3
 8013e32:	2182      	movs	r1, #130	; 0x82
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f001 ff5a 	bl	8015cee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	2200      	movs	r2, #0
 8013e58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	7c1b      	ldrb	r3, [r3, #16]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d109      	bne.n	8013e78 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e6e:	2101      	movs	r1, #1
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f002 f82b 	bl	8015ecc <USBD_LL_PrepareReceive>
 8013e76:	e007      	b.n	8013e88 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013e7e:	2340      	movs	r3, #64	; 0x40
 8013e80:	2101      	movs	r1, #1
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f002 f822 	bl	8015ecc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3710      	adds	r7, #16
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b082      	sub	sp, #8
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013e9e:	2181      	movs	r1, #129	; 0x81
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f001 ff4a 	bl	8015d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013eac:	2101      	movs	r1, #1
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f001 ff43 	bl	8015d3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013ebc:	2182      	movs	r1, #130	; 0x82
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f001 ff3b 	bl	8015d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d00e      	beq.n	8013efc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f002 f864 	bl	8015fbc <USBD_static_free>
    pdev->pClassData = NULL;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013efc:	2300      	movs	r3, #0
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3708      	adds	r7, #8
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
	...

08013f08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b086      	sub	sp, #24
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f22:	2300      	movs	r3, #0
 8013f24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013f26:	693b      	ldr	r3, [r7, #16]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d101      	bne.n	8013f30 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013f2c:	2303      	movs	r3, #3
 8013f2e:	e0af      	b.n	8014090 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d03f      	beq.n	8013fbc <USBD_CDC_Setup+0xb4>
 8013f3c:	2b20      	cmp	r3, #32
 8013f3e:	f040 809f 	bne.w	8014080 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	88db      	ldrh	r3, [r3, #6]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d02e      	beq.n	8013fa8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	781b      	ldrb	r3, [r3, #0]
 8013f4e:	b25b      	sxtb	r3, r3
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	da16      	bge.n	8013f82 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8013f60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013f62:	683a      	ldr	r2, [r7, #0]
 8013f64:	88d2      	ldrh	r2, [r2, #6]
 8013f66:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	88db      	ldrh	r3, [r3, #6]
 8013f6c:	2b07      	cmp	r3, #7
 8013f6e:	bf28      	it	cs
 8013f70:	2307      	movcs	r3, #7
 8013f72:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	89fa      	ldrh	r2, [r7, #14]
 8013f78:	4619      	mov	r1, r3
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f001 facf 	bl	801551e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013f80:	e085      	b.n	801408e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	785a      	ldrb	r2, [r3, #1]
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	88db      	ldrh	r3, [r3, #6]
 8013f90:	b2da      	uxtb	r2, r3
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013f98:	6939      	ldr	r1, [r7, #16]
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	88db      	ldrh	r3, [r3, #6]
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f001 fae8 	bl	8015576 <USBD_CtlPrepareRx>
      break;
 8013fa6:	e072      	b.n	801408e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013fae:	689b      	ldr	r3, [r3, #8]
 8013fb0:	683a      	ldr	r2, [r7, #0]
 8013fb2:	7850      	ldrb	r0, [r2, #1]
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	6839      	ldr	r1, [r7, #0]
 8013fb8:	4798      	blx	r3
      break;
 8013fba:	e068      	b.n	801408e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	785b      	ldrb	r3, [r3, #1]
 8013fc0:	2b0b      	cmp	r3, #11
 8013fc2:	d852      	bhi.n	801406a <USBD_CDC_Setup+0x162>
 8013fc4:	a201      	add	r2, pc, #4	; (adr r2, 8013fcc <USBD_CDC_Setup+0xc4>)
 8013fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fca:	bf00      	nop
 8013fcc:	08013ffd 	.word	0x08013ffd
 8013fd0:	08014079 	.word	0x08014079
 8013fd4:	0801406b 	.word	0x0801406b
 8013fd8:	0801406b 	.word	0x0801406b
 8013fdc:	0801406b 	.word	0x0801406b
 8013fe0:	0801406b 	.word	0x0801406b
 8013fe4:	0801406b 	.word	0x0801406b
 8013fe8:	0801406b 	.word	0x0801406b
 8013fec:	0801406b 	.word	0x0801406b
 8013ff0:	0801406b 	.word	0x0801406b
 8013ff4:	08014027 	.word	0x08014027
 8013ff8:	08014051 	.word	0x08014051
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014002:	b2db      	uxtb	r3, r3
 8014004:	2b03      	cmp	r3, #3
 8014006:	d107      	bne.n	8014018 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014008:	f107 030a 	add.w	r3, r7, #10
 801400c:	2202      	movs	r2, #2
 801400e:	4619      	mov	r1, r3
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f001 fa84 	bl	801551e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014016:	e032      	b.n	801407e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014018:	6839      	ldr	r1, [r7, #0]
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f001 fa0e 	bl	801543c <USBD_CtlError>
            ret = USBD_FAIL;
 8014020:	2303      	movs	r3, #3
 8014022:	75fb      	strb	r3, [r7, #23]
          break;
 8014024:	e02b      	b.n	801407e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801402c:	b2db      	uxtb	r3, r3
 801402e:	2b03      	cmp	r3, #3
 8014030:	d107      	bne.n	8014042 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014032:	f107 030d 	add.w	r3, r7, #13
 8014036:	2201      	movs	r2, #1
 8014038:	4619      	mov	r1, r3
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f001 fa6f 	bl	801551e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014040:	e01d      	b.n	801407e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014042:	6839      	ldr	r1, [r7, #0]
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f001 f9f9 	bl	801543c <USBD_CtlError>
            ret = USBD_FAIL;
 801404a:	2303      	movs	r3, #3
 801404c:	75fb      	strb	r3, [r7, #23]
          break;
 801404e:	e016      	b.n	801407e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014056:	b2db      	uxtb	r3, r3
 8014058:	2b03      	cmp	r3, #3
 801405a:	d00f      	beq.n	801407c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801405c:	6839      	ldr	r1, [r7, #0]
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f001 f9ec 	bl	801543c <USBD_CtlError>
            ret = USBD_FAIL;
 8014064:	2303      	movs	r3, #3
 8014066:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014068:	e008      	b.n	801407c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801406a:	6839      	ldr	r1, [r7, #0]
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f001 f9e5 	bl	801543c <USBD_CtlError>
          ret = USBD_FAIL;
 8014072:	2303      	movs	r3, #3
 8014074:	75fb      	strb	r3, [r7, #23]
          break;
 8014076:	e002      	b.n	801407e <USBD_CDC_Setup+0x176>
          break;
 8014078:	bf00      	nop
 801407a:	e008      	b.n	801408e <USBD_CDC_Setup+0x186>
          break;
 801407c:	bf00      	nop
      }
      break;
 801407e:	e006      	b.n	801408e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014080:	6839      	ldr	r1, [r7, #0]
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f001 f9da 	bl	801543c <USBD_CtlError>
      ret = USBD_FAIL;
 8014088:	2303      	movs	r3, #3
 801408a:	75fb      	strb	r3, [r7, #23]
      break;
 801408c:	bf00      	nop
  }

  return (uint8_t)ret;
 801408e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014090:	4618      	mov	r0, r3
 8014092:	3718      	adds	r7, #24
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b084      	sub	sp, #16
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
 80140a0:	460b      	mov	r3, r1
 80140a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80140aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d101      	bne.n	80140ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80140b6:	2303      	movs	r3, #3
 80140b8:	e04f      	b.n	801415a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80140c2:	78fa      	ldrb	r2, [r7, #3]
 80140c4:	6879      	ldr	r1, [r7, #4]
 80140c6:	4613      	mov	r3, r2
 80140c8:	009b      	lsls	r3, r3, #2
 80140ca:	4413      	add	r3, r2
 80140cc:	009b      	lsls	r3, r3, #2
 80140ce:	440b      	add	r3, r1
 80140d0:	3318      	adds	r3, #24
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d029      	beq.n	801412c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80140d8:	78fa      	ldrb	r2, [r7, #3]
 80140da:	6879      	ldr	r1, [r7, #4]
 80140dc:	4613      	mov	r3, r2
 80140de:	009b      	lsls	r3, r3, #2
 80140e0:	4413      	add	r3, r2
 80140e2:	009b      	lsls	r3, r3, #2
 80140e4:	440b      	add	r3, r1
 80140e6:	3318      	adds	r3, #24
 80140e8:	681a      	ldr	r2, [r3, #0]
 80140ea:	78f9      	ldrb	r1, [r7, #3]
 80140ec:	68f8      	ldr	r0, [r7, #12]
 80140ee:	460b      	mov	r3, r1
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	440b      	add	r3, r1
 80140f4:	00db      	lsls	r3, r3, #3
 80140f6:	4403      	add	r3, r0
 80140f8:	3320      	adds	r3, #32
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8014100:	fb01 f303 	mul.w	r3, r1, r3
 8014104:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014106:	2b00      	cmp	r3, #0
 8014108:	d110      	bne.n	801412c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801410a:	78fa      	ldrb	r2, [r7, #3]
 801410c:	6879      	ldr	r1, [r7, #4]
 801410e:	4613      	mov	r3, r2
 8014110:	009b      	lsls	r3, r3, #2
 8014112:	4413      	add	r3, r2
 8014114:	009b      	lsls	r3, r3, #2
 8014116:	440b      	add	r3, r1
 8014118:	3318      	adds	r3, #24
 801411a:	2200      	movs	r2, #0
 801411c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801411e:	78f9      	ldrb	r1, [r7, #3]
 8014120:	2300      	movs	r3, #0
 8014122:	2200      	movs	r2, #0
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f001 feb0 	bl	8015e8a <USBD_LL_Transmit>
 801412a:	e015      	b.n	8014158 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	2200      	movs	r2, #0
 8014130:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801413a:	691b      	ldr	r3, [r3, #16]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d00b      	beq.n	8014158 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014146:	691b      	ldr	r3, [r3, #16]
 8014148:	68ba      	ldr	r2, [r7, #8]
 801414a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801414e:	68ba      	ldr	r2, [r7, #8]
 8014150:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014154:	78fa      	ldrb	r2, [r7, #3]
 8014156:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014158:	2300      	movs	r3, #0
}
 801415a:	4618      	mov	r0, r3
 801415c:	3710      	adds	r7, #16
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}

08014162 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014162:	b580      	push	{r7, lr}
 8014164:	b084      	sub	sp, #16
 8014166:	af00      	add	r7, sp, #0
 8014168:	6078      	str	r0, [r7, #4]
 801416a:	460b      	mov	r3, r1
 801416c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014174:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801417c:	2b00      	cmp	r3, #0
 801417e:	d101      	bne.n	8014184 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014180:	2303      	movs	r3, #3
 8014182:	e015      	b.n	80141b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014184:	78fb      	ldrb	r3, [r7, #3]
 8014186:	4619      	mov	r1, r3
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f001 fec0 	bl	8015f0e <USBD_LL_GetRxDataSize>
 801418e:	4602      	mov	r2, r0
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801419c:	68db      	ldr	r3, [r3, #12]
 801419e:	68fa      	ldr	r2, [r7, #12]
 80141a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80141a4:	68fa      	ldr	r2, [r7, #12]
 80141a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80141aa:	4611      	mov	r1, r2
 80141ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80141ae:	2300      	movs	r3, #0
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3710      	adds	r7, #16
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}

080141b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b084      	sub	sp, #16
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d101      	bne.n	80141d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80141ce:	2303      	movs	r3, #3
 80141d0:	e01b      	b.n	801420a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d015      	beq.n	8014208 <USBD_CDC_EP0_RxReady+0x50>
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80141e2:	2bff      	cmp	r3, #255	; 0xff
 80141e4:	d010      	beq.n	8014208 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80141ec:	689b      	ldr	r3, [r3, #8]
 80141ee:	68fa      	ldr	r2, [r7, #12]
 80141f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80141f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80141f6:	68fa      	ldr	r2, [r7, #12]
 80141f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80141fc:	b292      	uxth	r2, r2
 80141fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	22ff      	movs	r2, #255	; 0xff
 8014204:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014208:	2300      	movs	r3, #0
}
 801420a:	4618      	mov	r0, r3
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
	...

08014214 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014214:	b480      	push	{r7}
 8014216:	b083      	sub	sp, #12
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2243      	movs	r2, #67	; 0x43
 8014220:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8014222:	4b03      	ldr	r3, [pc, #12]	; (8014230 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8014224:	4618      	mov	r0, r3
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr
 8014230:	20000288 	.word	0x20000288

08014234 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014234:	b480      	push	{r7}
 8014236:	b083      	sub	sp, #12
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2243      	movs	r2, #67	; 0x43
 8014240:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8014242:	4b03      	ldr	r3, [pc, #12]	; (8014250 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8014244:	4618      	mov	r0, r3
 8014246:	370c      	adds	r7, #12
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr
 8014250:	20000244 	.word	0x20000244

08014254 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014254:	b480      	push	{r7}
 8014256:	b083      	sub	sp, #12
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2243      	movs	r2, #67	; 0x43
 8014260:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8014262:	4b03      	ldr	r3, [pc, #12]	; (8014270 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8014264:	4618      	mov	r0, r3
 8014266:	370c      	adds	r7, #12
 8014268:	46bd      	mov	sp, r7
 801426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426e:	4770      	bx	lr
 8014270:	200002cc 	.word	0x200002cc

08014274 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014274:	b480      	push	{r7}
 8014276:	b083      	sub	sp, #12
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	220a      	movs	r2, #10
 8014280:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014282:	4b03      	ldr	r3, [pc, #12]	; (8014290 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014284:	4618      	mov	r0, r3
 8014286:	370c      	adds	r7, #12
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	4770      	bx	lr
 8014290:	20000200 	.word	0x20000200

08014294 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014294:	b480      	push	{r7}
 8014296:	b083      	sub	sp, #12
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d101      	bne.n	80142a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80142a4:	2303      	movs	r3, #3
 80142a6:	e004      	b.n	80142b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	683a      	ldr	r2, [r7, #0]
 80142ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80142b0:	2300      	movs	r3, #0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	370c      	adds	r7, #12
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr

080142be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80142be:	b480      	push	{r7}
 80142c0:	b087      	sub	sp, #28
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	60f8      	str	r0, [r7, #12]
 80142c6:	60b9      	str	r1, [r7, #8]
 80142c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d101      	bne.n	80142dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80142d8:	2303      	movs	r3, #3
 80142da:	e008      	b.n	80142ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	68ba      	ldr	r2, [r7, #8]
 80142e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80142ec:	2300      	movs	r3, #0
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	371c      	adds	r7, #28
 80142f2:	46bd      	mov	sp, r7
 80142f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f8:	4770      	bx	lr

080142fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80142fa:	b480      	push	{r7}
 80142fc:	b085      	sub	sp, #20
 80142fe:	af00      	add	r7, sp, #0
 8014300:	6078      	str	r0, [r7, #4]
 8014302:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801430a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d101      	bne.n	8014316 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8014312:	2303      	movs	r3, #3
 8014314:	e004      	b.n	8014320 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	683a      	ldr	r2, [r7, #0]
 801431a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801431e:	2300      	movs	r3, #0
}
 8014320:	4618      	mov	r0, r3
 8014322:	3714      	adds	r7, #20
 8014324:	46bd      	mov	sp, r7
 8014326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432a:	4770      	bx	lr

0801432c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b084      	sub	sp, #16
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801433a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801433c:	2301      	movs	r3, #1
 801433e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014346:	2b00      	cmp	r3, #0
 8014348:	d101      	bne.n	801434e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801434a:	2303      	movs	r3, #3
 801434c:	e01a      	b.n	8014384 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014354:	2b00      	cmp	r3, #0
 8014356:	d114      	bne.n	8014382 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	2201      	movs	r2, #1
 801435c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014376:	2181      	movs	r1, #129	; 0x81
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	f001 fd86 	bl	8015e8a <USBD_LL_Transmit>

    ret = USBD_OK;
 801437e:	2300      	movs	r3, #0
 8014380:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014382:	7bfb      	ldrb	r3, [r7, #15]
}
 8014384:	4618      	mov	r0, r3
 8014386:	3710      	adds	r7, #16
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}

0801438c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b084      	sub	sp, #16
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801439a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d101      	bne.n	80143aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80143a6:	2303      	movs	r3, #3
 80143a8:	e016      	b.n	80143d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	7c1b      	ldrb	r3, [r3, #16]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d109      	bne.n	80143c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80143b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143bc:	2101      	movs	r1, #1
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f001 fd84 	bl	8015ecc <USBD_LL_PrepareReceive>
 80143c4:	e007      	b.n	80143d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80143cc:	2340      	movs	r3, #64	; 0x40
 80143ce:	2101      	movs	r1, #1
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f001 fd7b 	bl	8015ecc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80143d6:	2300      	movs	r3, #0
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3710      	adds	r7, #16
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}

080143e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b086      	sub	sp, #24
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	60b9      	str	r1, [r7, #8]
 80143ea:	4613      	mov	r3, r2
 80143ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d101      	bne.n	80143f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80143f4:	2303      	movs	r3, #3
 80143f6:	e01f      	b.n	8014438 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2200      	movs	r2, #0
 80143fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	2200      	movs	r2, #0
 8014404:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2200      	movs	r2, #0
 801440c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d003      	beq.n	801441e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	68ba      	ldr	r2, [r7, #8]
 801441a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2201      	movs	r2, #1
 8014422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	79fa      	ldrb	r2, [r7, #7]
 801442a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801442c:	68f8      	ldr	r0, [r7, #12]
 801442e:	f001 fbe3 	bl	8015bf8 <USBD_LL_Init>
 8014432:	4603      	mov	r3, r0
 8014434:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014436:	7dfb      	ldrb	r3, [r7, #23]
}
 8014438:	4618      	mov	r0, r3
 801443a:	3718      	adds	r7, #24
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b084      	sub	sp, #16
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801444a:	2300      	movs	r3, #0
 801444c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d101      	bne.n	8014458 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8014454:	2303      	movs	r3, #3
 8014456:	e016      	b.n	8014486 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	683a      	ldr	r2, [r7, #0]
 801445c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014468:	2b00      	cmp	r3, #0
 801446a:	d00b      	beq.n	8014484 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014474:	f107 020e 	add.w	r2, r7, #14
 8014478:	4610      	mov	r0, r2
 801447a:	4798      	blx	r3
 801447c:	4602      	mov	r2, r0
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8014484:	2300      	movs	r3, #0
}
 8014486:	4618      	mov	r0, r3
 8014488:	3710      	adds	r7, #16
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801448e:	b580      	push	{r7, lr}
 8014490:	b082      	sub	sp, #8
 8014492:	af00      	add	r7, sp, #0
 8014494:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014496:	6878      	ldr	r0, [r7, #4]
 8014498:	f001 fc0e 	bl	8015cb8 <USBD_LL_Start>
 801449c:	4603      	mov	r3, r0
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3708      	adds	r7, #8
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}

080144a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80144a6:	b480      	push	{r7}
 80144a8:	b083      	sub	sp, #12
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80144ae:	2300      	movs	r3, #0
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	370c      	adds	r7, #12
 80144b4:	46bd      	mov	sp, r7
 80144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ba:	4770      	bx	lr

080144bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b084      	sub	sp, #16
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
 80144c4:	460b      	mov	r3, r1
 80144c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80144c8:	2303      	movs	r3, #3
 80144ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d009      	beq.n	80144ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	78fa      	ldrb	r2, [r7, #3]
 80144e0:	4611      	mov	r1, r2
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	4798      	blx	r3
 80144e6:	4603      	mov	r3, r0
 80144e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80144ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	3710      	adds	r7, #16
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}

080144f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b082      	sub	sp, #8
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
 80144fc:	460b      	mov	r3, r1
 80144fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014506:	2b00      	cmp	r3, #0
 8014508:	d007      	beq.n	801451a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	78fa      	ldrb	r2, [r7, #3]
 8014514:	4611      	mov	r1, r2
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	4798      	blx	r3
  }

  return USBD_OK;
 801451a:	2300      	movs	r3, #0
}
 801451c:	4618      	mov	r0, r3
 801451e:	3708      	adds	r7, #8
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}

08014524 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b084      	sub	sp, #16
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	4618      	mov	r0, r3
 8014538:	f000 ff46 	bl	80153c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2201      	movs	r2, #1
 8014540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801454a:	461a      	mov	r2, r3
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014558:	f003 031f 	and.w	r3, r3, #31
 801455c:	2b02      	cmp	r3, #2
 801455e:	d01a      	beq.n	8014596 <USBD_LL_SetupStage+0x72>
 8014560:	2b02      	cmp	r3, #2
 8014562:	d822      	bhi.n	80145aa <USBD_LL_SetupStage+0x86>
 8014564:	2b00      	cmp	r3, #0
 8014566:	d002      	beq.n	801456e <USBD_LL_SetupStage+0x4a>
 8014568:	2b01      	cmp	r3, #1
 801456a:	d00a      	beq.n	8014582 <USBD_LL_SetupStage+0x5e>
 801456c:	e01d      	b.n	80145aa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014574:	4619      	mov	r1, r3
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f000 f9ee 	bl	8014958 <USBD_StdDevReq>
 801457c:	4603      	mov	r3, r0
 801457e:	73fb      	strb	r3, [r7, #15]
      break;
 8014580:	e020      	b.n	80145c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014588:	4619      	mov	r1, r3
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f000 fa52 	bl	8014a34 <USBD_StdItfReq>
 8014590:	4603      	mov	r3, r0
 8014592:	73fb      	strb	r3, [r7, #15]
      break;
 8014594:	e016      	b.n	80145c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801459c:	4619      	mov	r1, r3
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 fa91 	bl	8014ac6 <USBD_StdEPReq>
 80145a4:	4603      	mov	r3, r0
 80145a6:	73fb      	strb	r3, [r7, #15]
      break;
 80145a8:	e00c      	b.n	80145c4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80145b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80145b4:	b2db      	uxtb	r3, r3
 80145b6:	4619      	mov	r1, r3
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f001 fbdd 	bl	8015d78 <USBD_LL_StallEP>
 80145be:	4603      	mov	r3, r0
 80145c0:	73fb      	strb	r3, [r7, #15]
      break;
 80145c2:	bf00      	nop
  }

  return ret;
 80145c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3710      	adds	r7, #16
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}

080145ce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80145ce:	b580      	push	{r7, lr}
 80145d0:	b086      	sub	sp, #24
 80145d2:	af00      	add	r7, sp, #0
 80145d4:	60f8      	str	r0, [r7, #12]
 80145d6:	460b      	mov	r3, r1
 80145d8:	607a      	str	r2, [r7, #4]
 80145da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80145dc:	7afb      	ldrb	r3, [r7, #11]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d138      	bne.n	8014654 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80145e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80145f0:	2b03      	cmp	r3, #3
 80145f2:	d14a      	bne.n	801468a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	689a      	ldr	r2, [r3, #8]
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	68db      	ldr	r3, [r3, #12]
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d913      	bls.n	8014628 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	689a      	ldr	r2, [r3, #8]
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	68db      	ldr	r3, [r3, #12]
 8014608:	1ad2      	subs	r2, r2, r3
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	68da      	ldr	r2, [r3, #12]
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	689b      	ldr	r3, [r3, #8]
 8014616:	4293      	cmp	r3, r2
 8014618:	bf28      	it	cs
 801461a:	4613      	movcs	r3, r2
 801461c:	461a      	mov	r2, r3
 801461e:	6879      	ldr	r1, [r7, #4]
 8014620:	68f8      	ldr	r0, [r7, #12]
 8014622:	f000 ffc5 	bl	80155b0 <USBD_CtlContinueRx>
 8014626:	e030      	b.n	801468a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801462e:	b2db      	uxtb	r3, r3
 8014630:	2b03      	cmp	r3, #3
 8014632:	d10b      	bne.n	801464c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801463a:	691b      	ldr	r3, [r3, #16]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d005      	beq.n	801464c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014646:	691b      	ldr	r3, [r3, #16]
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801464c:	68f8      	ldr	r0, [r7, #12]
 801464e:	f000 ffc0 	bl	80155d2 <USBD_CtlSendStatus>
 8014652:	e01a      	b.n	801468a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801465a:	b2db      	uxtb	r3, r3
 801465c:	2b03      	cmp	r3, #3
 801465e:	d114      	bne.n	801468a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014666:	699b      	ldr	r3, [r3, #24]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d00e      	beq.n	801468a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014672:	699b      	ldr	r3, [r3, #24]
 8014674:	7afa      	ldrb	r2, [r7, #11]
 8014676:	4611      	mov	r1, r2
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	4798      	blx	r3
 801467c:	4603      	mov	r3, r0
 801467e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014680:	7dfb      	ldrb	r3, [r7, #23]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d001      	beq.n	801468a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8014686:	7dfb      	ldrb	r3, [r7, #23]
 8014688:	e000      	b.n	801468c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801468a:	2300      	movs	r3, #0
}
 801468c:	4618      	mov	r0, r3
 801468e:	3718      	adds	r7, #24
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}

08014694 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b086      	sub	sp, #24
 8014698:	af00      	add	r7, sp, #0
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	460b      	mov	r3, r1
 801469e:	607a      	str	r2, [r7, #4]
 80146a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80146a2:	7afb      	ldrb	r3, [r7, #11]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d16b      	bne.n	8014780 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	3314      	adds	r3, #20
 80146ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80146b4:	2b02      	cmp	r3, #2
 80146b6:	d156      	bne.n	8014766 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	689a      	ldr	r2, [r3, #8]
 80146bc:	693b      	ldr	r3, [r7, #16]
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d914      	bls.n	80146ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	689a      	ldr	r2, [r3, #8]
 80146c8:	693b      	ldr	r3, [r7, #16]
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	1ad2      	subs	r2, r2, r3
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80146d2:	693b      	ldr	r3, [r7, #16]
 80146d4:	689b      	ldr	r3, [r3, #8]
 80146d6:	461a      	mov	r2, r3
 80146d8:	6879      	ldr	r1, [r7, #4]
 80146da:	68f8      	ldr	r0, [r7, #12]
 80146dc:	f000 ff3a 	bl	8015554 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80146e0:	2300      	movs	r3, #0
 80146e2:	2200      	movs	r2, #0
 80146e4:	2100      	movs	r1, #0
 80146e6:	68f8      	ldr	r0, [r7, #12]
 80146e8:	f001 fbf0 	bl	8015ecc <USBD_LL_PrepareReceive>
 80146ec:	e03b      	b.n	8014766 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	68da      	ldr	r2, [r3, #12]
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	689b      	ldr	r3, [r3, #8]
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d11c      	bne.n	8014734 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	685a      	ldr	r2, [r3, #4]
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014702:	429a      	cmp	r2, r3
 8014704:	d316      	bcc.n	8014734 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	685a      	ldr	r2, [r3, #4]
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014710:	429a      	cmp	r2, r3
 8014712:	d20f      	bcs.n	8014734 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014714:	2200      	movs	r2, #0
 8014716:	2100      	movs	r1, #0
 8014718:	68f8      	ldr	r0, [r7, #12]
 801471a:	f000 ff1b 	bl	8015554 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2200      	movs	r2, #0
 8014722:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014726:	2300      	movs	r3, #0
 8014728:	2200      	movs	r2, #0
 801472a:	2100      	movs	r1, #0
 801472c:	68f8      	ldr	r0, [r7, #12]
 801472e:	f001 fbcd 	bl	8015ecc <USBD_LL_PrepareReceive>
 8014732:	e018      	b.n	8014766 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801473a:	b2db      	uxtb	r3, r3
 801473c:	2b03      	cmp	r3, #3
 801473e:	d10b      	bne.n	8014758 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d005      	beq.n	8014758 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014752:	68db      	ldr	r3, [r3, #12]
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014758:	2180      	movs	r1, #128	; 0x80
 801475a:	68f8      	ldr	r0, [r7, #12]
 801475c:	f001 fb0c 	bl	8015d78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014760:	68f8      	ldr	r0, [r7, #12]
 8014762:	f000 ff49 	bl	80155f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801476c:	2b01      	cmp	r3, #1
 801476e:	d122      	bne.n	80147b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014770:	68f8      	ldr	r0, [r7, #12]
 8014772:	f7ff fe98 	bl	80144a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	2200      	movs	r2, #0
 801477a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801477e:	e01a      	b.n	80147b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014786:	b2db      	uxtb	r3, r3
 8014788:	2b03      	cmp	r3, #3
 801478a:	d114      	bne.n	80147b6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014792:	695b      	ldr	r3, [r3, #20]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d00e      	beq.n	80147b6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801479e:	695b      	ldr	r3, [r3, #20]
 80147a0:	7afa      	ldrb	r2, [r7, #11]
 80147a2:	4611      	mov	r1, r2
 80147a4:	68f8      	ldr	r0, [r7, #12]
 80147a6:	4798      	blx	r3
 80147a8:	4603      	mov	r3, r0
 80147aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80147ac:	7dfb      	ldrb	r3, [r7, #23]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d001      	beq.n	80147b6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80147b2:	7dfb      	ldrb	r3, [r7, #23]
 80147b4:	e000      	b.n	80147b8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80147b6:	2300      	movs	r3, #0
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	3718      	adds	r7, #24
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd80      	pop	{r7, pc}

080147c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b082      	sub	sp, #8
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2201      	movs	r2, #1
 80147cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2200      	movs	r2, #0
 80147d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2200      	movs	r2, #0
 80147dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2200      	movs	r2, #0
 80147e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d101      	bne.n	80147f4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80147f0:	2303      	movs	r3, #3
 80147f2:	e02f      	b.n	8014854 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d00f      	beq.n	801481e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014804:	685b      	ldr	r3, [r3, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d009      	beq.n	801481e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	687a      	ldr	r2, [r7, #4]
 8014814:	6852      	ldr	r2, [r2, #4]
 8014816:	b2d2      	uxtb	r2, r2
 8014818:	4611      	mov	r1, r2
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801481e:	2340      	movs	r3, #64	; 0x40
 8014820:	2200      	movs	r2, #0
 8014822:	2100      	movs	r1, #0
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f001 fa62 	bl	8015cee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	2201      	movs	r2, #1
 801482e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2240      	movs	r2, #64	; 0x40
 8014836:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801483a:	2340      	movs	r3, #64	; 0x40
 801483c:	2200      	movs	r2, #0
 801483e:	2180      	movs	r1, #128	; 0x80
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f001 fa54 	bl	8015cee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	2201      	movs	r2, #1
 801484a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	2240      	movs	r2, #64	; 0x40
 8014850:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014852:	2300      	movs	r3, #0
}
 8014854:	4618      	mov	r0, r3
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801485c:	b480      	push	{r7}
 801485e:	b083      	sub	sp, #12
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	460b      	mov	r3, r1
 8014866:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	78fa      	ldrb	r2, [r7, #3]
 801486c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801486e:	2300      	movs	r3, #0
}
 8014870:	4618      	mov	r0, r3
 8014872:	370c      	adds	r7, #12
 8014874:	46bd      	mov	sp, r7
 8014876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487a:	4770      	bx	lr

0801487c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801488a:	b2da      	uxtb	r2, r3
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	2204      	movs	r2, #4
 8014896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801489a:	2300      	movs	r3, #0
}
 801489c:	4618      	mov	r0, r3
 801489e:	370c      	adds	r7, #12
 80148a0:	46bd      	mov	sp, r7
 80148a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a6:	4770      	bx	lr

080148a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80148a8:	b480      	push	{r7}
 80148aa:	b083      	sub	sp, #12
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	2b04      	cmp	r3, #4
 80148ba:	d106      	bne.n	80148ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80148c2:	b2da      	uxtb	r2, r3
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80148ca:	2300      	movs	r3, #0
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	370c      	adds	r7, #12
 80148d0:	46bd      	mov	sp, r7
 80148d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d6:	4770      	bx	lr

080148d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d101      	bne.n	80148ee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80148ea:	2303      	movs	r3, #3
 80148ec:	e012      	b.n	8014914 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148f4:	b2db      	uxtb	r3, r3
 80148f6:	2b03      	cmp	r3, #3
 80148f8:	d10b      	bne.n	8014912 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014900:	69db      	ldr	r3, [r3, #28]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d005      	beq.n	8014912 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801490c:	69db      	ldr	r3, [r3, #28]
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014912:	2300      	movs	r3, #0
}
 8014914:	4618      	mov	r0, r3
 8014916:	3708      	adds	r7, #8
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801491c:	b480      	push	{r7}
 801491e:	b087      	sub	sp, #28
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014928:	697b      	ldr	r3, [r7, #20]
 801492a:	781b      	ldrb	r3, [r3, #0]
 801492c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	3301      	adds	r3, #1
 8014932:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801493a:	8a3b      	ldrh	r3, [r7, #16]
 801493c:	021b      	lsls	r3, r3, #8
 801493e:	b21a      	sxth	r2, r3
 8014940:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014944:	4313      	orrs	r3, r2
 8014946:	b21b      	sxth	r3, r3
 8014948:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801494a:	89fb      	ldrh	r3, [r7, #14]
}
 801494c:	4618      	mov	r0, r3
 801494e:	371c      	adds	r7, #28
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr

08014958 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014962:	2300      	movs	r3, #0
 8014964:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	781b      	ldrb	r3, [r3, #0]
 801496a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801496e:	2b40      	cmp	r3, #64	; 0x40
 8014970:	d005      	beq.n	801497e <USBD_StdDevReq+0x26>
 8014972:	2b40      	cmp	r3, #64	; 0x40
 8014974:	d853      	bhi.n	8014a1e <USBD_StdDevReq+0xc6>
 8014976:	2b00      	cmp	r3, #0
 8014978:	d00b      	beq.n	8014992 <USBD_StdDevReq+0x3a>
 801497a:	2b20      	cmp	r3, #32
 801497c:	d14f      	bne.n	8014a1e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014984:	689b      	ldr	r3, [r3, #8]
 8014986:	6839      	ldr	r1, [r7, #0]
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	4798      	blx	r3
 801498c:	4603      	mov	r3, r0
 801498e:	73fb      	strb	r3, [r7, #15]
      break;
 8014990:	e04a      	b.n	8014a28 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	785b      	ldrb	r3, [r3, #1]
 8014996:	2b09      	cmp	r3, #9
 8014998:	d83b      	bhi.n	8014a12 <USBD_StdDevReq+0xba>
 801499a:	a201      	add	r2, pc, #4	; (adr r2, 80149a0 <USBD_StdDevReq+0x48>)
 801499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149a0:	080149f5 	.word	0x080149f5
 80149a4:	08014a09 	.word	0x08014a09
 80149a8:	08014a13 	.word	0x08014a13
 80149ac:	080149ff 	.word	0x080149ff
 80149b0:	08014a13 	.word	0x08014a13
 80149b4:	080149d3 	.word	0x080149d3
 80149b8:	080149c9 	.word	0x080149c9
 80149bc:	08014a13 	.word	0x08014a13
 80149c0:	080149eb 	.word	0x080149eb
 80149c4:	080149dd 	.word	0x080149dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80149c8:	6839      	ldr	r1, [r7, #0]
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f000 f9de 	bl	8014d8c <USBD_GetDescriptor>
          break;
 80149d0:	e024      	b.n	8014a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80149d2:	6839      	ldr	r1, [r7, #0]
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f000 fb6d 	bl	80150b4 <USBD_SetAddress>
          break;
 80149da:	e01f      	b.n	8014a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80149dc:	6839      	ldr	r1, [r7, #0]
 80149de:	6878      	ldr	r0, [r7, #4]
 80149e0:	f000 fbac 	bl	801513c <USBD_SetConfig>
 80149e4:	4603      	mov	r3, r0
 80149e6:	73fb      	strb	r3, [r7, #15]
          break;
 80149e8:	e018      	b.n	8014a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80149ea:	6839      	ldr	r1, [r7, #0]
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 fc4b 	bl	8015288 <USBD_GetConfig>
          break;
 80149f2:	e013      	b.n	8014a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80149f4:	6839      	ldr	r1, [r7, #0]
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f000 fc7c 	bl	80152f4 <USBD_GetStatus>
          break;
 80149fc:	e00e      	b.n	8014a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80149fe:	6839      	ldr	r1, [r7, #0]
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f000 fcab 	bl	801535c <USBD_SetFeature>
          break;
 8014a06:	e009      	b.n	8014a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014a08:	6839      	ldr	r1, [r7, #0]
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f000 fcba 	bl	8015384 <USBD_ClrFeature>
          break;
 8014a10:	e004      	b.n	8014a1c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8014a12:	6839      	ldr	r1, [r7, #0]
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f000 fd11 	bl	801543c <USBD_CtlError>
          break;
 8014a1a:	bf00      	nop
      }
      break;
 8014a1c:	e004      	b.n	8014a28 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014a1e:	6839      	ldr	r1, [r7, #0]
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f000 fd0b 	bl	801543c <USBD_CtlError>
      break;
 8014a26:	bf00      	nop
  }

  return ret;
 8014a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3710      	adds	r7, #16
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}
 8014a32:	bf00      	nop

08014a34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b084      	sub	sp, #16
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a4a:	2b40      	cmp	r3, #64	; 0x40
 8014a4c:	d005      	beq.n	8014a5a <USBD_StdItfReq+0x26>
 8014a4e:	2b40      	cmp	r3, #64	; 0x40
 8014a50:	d82f      	bhi.n	8014ab2 <USBD_StdItfReq+0x7e>
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d001      	beq.n	8014a5a <USBD_StdItfReq+0x26>
 8014a56:	2b20      	cmp	r3, #32
 8014a58:	d12b      	bne.n	8014ab2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	3b01      	subs	r3, #1
 8014a64:	2b02      	cmp	r3, #2
 8014a66:	d81d      	bhi.n	8014aa4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	889b      	ldrh	r3, [r3, #4]
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	2b01      	cmp	r3, #1
 8014a70:	d813      	bhi.n	8014a9a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a78:	689b      	ldr	r3, [r3, #8]
 8014a7a:	6839      	ldr	r1, [r7, #0]
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	4798      	blx	r3
 8014a80:	4603      	mov	r3, r0
 8014a82:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	88db      	ldrh	r3, [r3, #6]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d110      	bne.n	8014aae <USBD_StdItfReq+0x7a>
 8014a8c:	7bfb      	ldrb	r3, [r7, #15]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d10d      	bne.n	8014aae <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 fd9d 	bl	80155d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014a98:	e009      	b.n	8014aae <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014a9a:	6839      	ldr	r1, [r7, #0]
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f000 fccd 	bl	801543c <USBD_CtlError>
          break;
 8014aa2:	e004      	b.n	8014aae <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014aa4:	6839      	ldr	r1, [r7, #0]
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f000 fcc8 	bl	801543c <USBD_CtlError>
          break;
 8014aac:	e000      	b.n	8014ab0 <USBD_StdItfReq+0x7c>
          break;
 8014aae:	bf00      	nop
      }
      break;
 8014ab0:	e004      	b.n	8014abc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8014ab2:	6839      	ldr	r1, [r7, #0]
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	f000 fcc1 	bl	801543c <USBD_CtlError>
      break;
 8014aba:	bf00      	nop
  }

  return ret;
 8014abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3710      	adds	r7, #16
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}

08014ac6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ac6:	b580      	push	{r7, lr}
 8014ac8:	b084      	sub	sp, #16
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	6078      	str	r0, [r7, #4]
 8014ace:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	889b      	ldrh	r3, [r3, #4]
 8014ad8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014ae2:	2b40      	cmp	r3, #64	; 0x40
 8014ae4:	d007      	beq.n	8014af6 <USBD_StdEPReq+0x30>
 8014ae6:	2b40      	cmp	r3, #64	; 0x40
 8014ae8:	f200 8145 	bhi.w	8014d76 <USBD_StdEPReq+0x2b0>
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d00c      	beq.n	8014b0a <USBD_StdEPReq+0x44>
 8014af0:	2b20      	cmp	r3, #32
 8014af2:	f040 8140 	bne.w	8014d76 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014afc:	689b      	ldr	r3, [r3, #8]
 8014afe:	6839      	ldr	r1, [r7, #0]
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	4798      	blx	r3
 8014b04:	4603      	mov	r3, r0
 8014b06:	73fb      	strb	r3, [r7, #15]
      break;
 8014b08:	e13a      	b.n	8014d80 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014b0a:	683b      	ldr	r3, [r7, #0]
 8014b0c:	785b      	ldrb	r3, [r3, #1]
 8014b0e:	2b03      	cmp	r3, #3
 8014b10:	d007      	beq.n	8014b22 <USBD_StdEPReq+0x5c>
 8014b12:	2b03      	cmp	r3, #3
 8014b14:	f300 8129 	bgt.w	8014d6a <USBD_StdEPReq+0x2a4>
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d07f      	beq.n	8014c1c <USBD_StdEPReq+0x156>
 8014b1c:	2b01      	cmp	r3, #1
 8014b1e:	d03c      	beq.n	8014b9a <USBD_StdEPReq+0xd4>
 8014b20:	e123      	b.n	8014d6a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	d002      	beq.n	8014b34 <USBD_StdEPReq+0x6e>
 8014b2e:	2b03      	cmp	r3, #3
 8014b30:	d016      	beq.n	8014b60 <USBD_StdEPReq+0x9a>
 8014b32:	e02c      	b.n	8014b8e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b34:	7bbb      	ldrb	r3, [r7, #14]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d00d      	beq.n	8014b56 <USBD_StdEPReq+0x90>
 8014b3a:	7bbb      	ldrb	r3, [r7, #14]
 8014b3c:	2b80      	cmp	r3, #128	; 0x80
 8014b3e:	d00a      	beq.n	8014b56 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b40:	7bbb      	ldrb	r3, [r7, #14]
 8014b42:	4619      	mov	r1, r3
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f001 f917 	bl	8015d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b4a:	2180      	movs	r1, #128	; 0x80
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f001 f913 	bl	8015d78 <USBD_LL_StallEP>
 8014b52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014b54:	e020      	b.n	8014b98 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014b56:	6839      	ldr	r1, [r7, #0]
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f000 fc6f 	bl	801543c <USBD_CtlError>
              break;
 8014b5e:	e01b      	b.n	8014b98 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	885b      	ldrh	r3, [r3, #2]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10e      	bne.n	8014b86 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014b68:	7bbb      	ldrb	r3, [r7, #14]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d00b      	beq.n	8014b86 <USBD_StdEPReq+0xc0>
 8014b6e:	7bbb      	ldrb	r3, [r7, #14]
 8014b70:	2b80      	cmp	r3, #128	; 0x80
 8014b72:	d008      	beq.n	8014b86 <USBD_StdEPReq+0xc0>
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	88db      	ldrh	r3, [r3, #6]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d104      	bne.n	8014b86 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b7c:	7bbb      	ldrb	r3, [r7, #14]
 8014b7e:	4619      	mov	r1, r3
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f001 f8f9 	bl	8015d78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f000 fd23 	bl	80155d2 <USBD_CtlSendStatus>

              break;
 8014b8c:	e004      	b.n	8014b98 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014b8e:	6839      	ldr	r1, [r7, #0]
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f000 fc53 	bl	801543c <USBD_CtlError>
              break;
 8014b96:	bf00      	nop
          }
          break;
 8014b98:	e0ec      	b.n	8014d74 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ba0:	b2db      	uxtb	r3, r3
 8014ba2:	2b02      	cmp	r3, #2
 8014ba4:	d002      	beq.n	8014bac <USBD_StdEPReq+0xe6>
 8014ba6:	2b03      	cmp	r3, #3
 8014ba8:	d016      	beq.n	8014bd8 <USBD_StdEPReq+0x112>
 8014baa:	e030      	b.n	8014c0e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014bac:	7bbb      	ldrb	r3, [r7, #14]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d00d      	beq.n	8014bce <USBD_StdEPReq+0x108>
 8014bb2:	7bbb      	ldrb	r3, [r7, #14]
 8014bb4:	2b80      	cmp	r3, #128	; 0x80
 8014bb6:	d00a      	beq.n	8014bce <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014bb8:	7bbb      	ldrb	r3, [r7, #14]
 8014bba:	4619      	mov	r1, r3
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f001 f8db 	bl	8015d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014bc2:	2180      	movs	r1, #128	; 0x80
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f001 f8d7 	bl	8015d78 <USBD_LL_StallEP>
 8014bca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014bcc:	e025      	b.n	8014c1a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014bce:	6839      	ldr	r1, [r7, #0]
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f000 fc33 	bl	801543c <USBD_CtlError>
              break;
 8014bd6:	e020      	b.n	8014c1a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	885b      	ldrh	r3, [r3, #2]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d11b      	bne.n	8014c18 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014be0:	7bbb      	ldrb	r3, [r7, #14]
 8014be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d004      	beq.n	8014bf4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014bea:	7bbb      	ldrb	r3, [r7, #14]
 8014bec:	4619      	mov	r1, r3
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f001 f8e1 	bl	8015db6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f000 fcec 	bl	80155d2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c00:	689b      	ldr	r3, [r3, #8]
 8014c02:	6839      	ldr	r1, [r7, #0]
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	4798      	blx	r3
 8014c08:	4603      	mov	r3, r0
 8014c0a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014c0c:	e004      	b.n	8014c18 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014c0e:	6839      	ldr	r1, [r7, #0]
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f000 fc13 	bl	801543c <USBD_CtlError>
              break;
 8014c16:	e000      	b.n	8014c1a <USBD_StdEPReq+0x154>
              break;
 8014c18:	bf00      	nop
          }
          break;
 8014c1a:	e0ab      	b.n	8014d74 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c22:	b2db      	uxtb	r3, r3
 8014c24:	2b02      	cmp	r3, #2
 8014c26:	d002      	beq.n	8014c2e <USBD_StdEPReq+0x168>
 8014c28:	2b03      	cmp	r3, #3
 8014c2a:	d032      	beq.n	8014c92 <USBD_StdEPReq+0x1cc>
 8014c2c:	e097      	b.n	8014d5e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c2e:	7bbb      	ldrb	r3, [r7, #14]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d007      	beq.n	8014c44 <USBD_StdEPReq+0x17e>
 8014c34:	7bbb      	ldrb	r3, [r7, #14]
 8014c36:	2b80      	cmp	r3, #128	; 0x80
 8014c38:	d004      	beq.n	8014c44 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014c3a:	6839      	ldr	r1, [r7, #0]
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f000 fbfd 	bl	801543c <USBD_CtlError>
                break;
 8014c42:	e091      	b.n	8014d68 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	da0b      	bge.n	8014c64 <USBD_StdEPReq+0x19e>
 8014c4c:	7bbb      	ldrb	r3, [r7, #14]
 8014c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014c52:	4613      	mov	r3, r2
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	4413      	add	r3, r2
 8014c58:	009b      	lsls	r3, r3, #2
 8014c5a:	3310      	adds	r3, #16
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	4413      	add	r3, r2
 8014c60:	3304      	adds	r3, #4
 8014c62:	e00b      	b.n	8014c7c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014c64:	7bbb      	ldrb	r3, [r7, #14]
 8014c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c6a:	4613      	mov	r3, r2
 8014c6c:	009b      	lsls	r3, r3, #2
 8014c6e:	4413      	add	r3, r2
 8014c70:	009b      	lsls	r3, r3, #2
 8014c72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	4413      	add	r3, r2
 8014c7a:	3304      	adds	r3, #4
 8014c7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	2200      	movs	r2, #0
 8014c82:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	2202      	movs	r2, #2
 8014c88:	4619      	mov	r1, r3
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f000 fc47 	bl	801551e <USBD_CtlSendData>
              break;
 8014c90:	e06a      	b.n	8014d68 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014c92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	da11      	bge.n	8014cbe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014c9a:	7bbb      	ldrb	r3, [r7, #14]
 8014c9c:	f003 020f 	and.w	r2, r3, #15
 8014ca0:	6879      	ldr	r1, [r7, #4]
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	4413      	add	r3, r2
 8014ca8:	009b      	lsls	r3, r3, #2
 8014caa:	440b      	add	r3, r1
 8014cac:	3324      	adds	r3, #36	; 0x24
 8014cae:	881b      	ldrh	r3, [r3, #0]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d117      	bne.n	8014ce4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014cb4:	6839      	ldr	r1, [r7, #0]
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f000 fbc0 	bl	801543c <USBD_CtlError>
                  break;
 8014cbc:	e054      	b.n	8014d68 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014cbe:	7bbb      	ldrb	r3, [r7, #14]
 8014cc0:	f003 020f 	and.w	r2, r3, #15
 8014cc4:	6879      	ldr	r1, [r7, #4]
 8014cc6:	4613      	mov	r3, r2
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	4413      	add	r3, r2
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	440b      	add	r3, r1
 8014cd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014cd4:	881b      	ldrh	r3, [r3, #0]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d104      	bne.n	8014ce4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014cda:	6839      	ldr	r1, [r7, #0]
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	f000 fbad 	bl	801543c <USBD_CtlError>
                  break;
 8014ce2:	e041      	b.n	8014d68 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	da0b      	bge.n	8014d04 <USBD_StdEPReq+0x23e>
 8014cec:	7bbb      	ldrb	r3, [r7, #14]
 8014cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cf2:	4613      	mov	r3, r2
 8014cf4:	009b      	lsls	r3, r3, #2
 8014cf6:	4413      	add	r3, r2
 8014cf8:	009b      	lsls	r3, r3, #2
 8014cfa:	3310      	adds	r3, #16
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	4413      	add	r3, r2
 8014d00:	3304      	adds	r3, #4
 8014d02:	e00b      	b.n	8014d1c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014d04:	7bbb      	ldrb	r3, [r7, #14]
 8014d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d0a:	4613      	mov	r3, r2
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	4413      	add	r3, r2
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	4413      	add	r3, r2
 8014d1a:	3304      	adds	r3, #4
 8014d1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014d1e:	7bbb      	ldrb	r3, [r7, #14]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d002      	beq.n	8014d2a <USBD_StdEPReq+0x264>
 8014d24:	7bbb      	ldrb	r3, [r7, #14]
 8014d26:	2b80      	cmp	r3, #128	; 0x80
 8014d28:	d103      	bne.n	8014d32 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	601a      	str	r2, [r3, #0]
 8014d30:	e00e      	b.n	8014d50 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014d32:	7bbb      	ldrb	r3, [r7, #14]
 8014d34:	4619      	mov	r1, r3
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f001 f85c 	bl	8015df4 <USBD_LL_IsStallEP>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d003      	beq.n	8014d4a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	2201      	movs	r2, #1
 8014d46:	601a      	str	r2, [r3, #0]
 8014d48:	e002      	b.n	8014d50 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	2202      	movs	r2, #2
 8014d54:	4619      	mov	r1, r3
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f000 fbe1 	bl	801551e <USBD_CtlSendData>
              break;
 8014d5c:	e004      	b.n	8014d68 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014d5e:	6839      	ldr	r1, [r7, #0]
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f000 fb6b 	bl	801543c <USBD_CtlError>
              break;
 8014d66:	bf00      	nop
          }
          break;
 8014d68:	e004      	b.n	8014d74 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014d6a:	6839      	ldr	r1, [r7, #0]
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f000 fb65 	bl	801543c <USBD_CtlError>
          break;
 8014d72:	bf00      	nop
      }
      break;
 8014d74:	e004      	b.n	8014d80 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014d76:	6839      	ldr	r1, [r7, #0]
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f000 fb5f 	bl	801543c <USBD_CtlError>
      break;
 8014d7e:	bf00      	nop
  }

  return ret;
 8014d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3710      	adds	r7, #16
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
	...

08014d8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014d96:	2300      	movs	r3, #0
 8014d98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014d9e:	2300      	movs	r3, #0
 8014da0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	885b      	ldrh	r3, [r3, #2]
 8014da6:	0a1b      	lsrs	r3, r3, #8
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	3b01      	subs	r3, #1
 8014dac:	2b0e      	cmp	r3, #14
 8014dae:	f200 8152 	bhi.w	8015056 <USBD_GetDescriptor+0x2ca>
 8014db2:	a201      	add	r2, pc, #4	; (adr r2, 8014db8 <USBD_GetDescriptor+0x2c>)
 8014db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014db8:	08014e29 	.word	0x08014e29
 8014dbc:	08014e41 	.word	0x08014e41
 8014dc0:	08014e81 	.word	0x08014e81
 8014dc4:	08015057 	.word	0x08015057
 8014dc8:	08015057 	.word	0x08015057
 8014dcc:	08014ff7 	.word	0x08014ff7
 8014dd0:	08015023 	.word	0x08015023
 8014dd4:	08015057 	.word	0x08015057
 8014dd8:	08015057 	.word	0x08015057
 8014ddc:	08015057 	.word	0x08015057
 8014de0:	08015057 	.word	0x08015057
 8014de4:	08015057 	.word	0x08015057
 8014de8:	08015057 	.word	0x08015057
 8014dec:	08015057 	.word	0x08015057
 8014df0:	08014df5 	.word	0x08014df5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dfa:	69db      	ldr	r3, [r3, #28]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d00b      	beq.n	8014e18 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e06:	69db      	ldr	r3, [r3, #28]
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	7c12      	ldrb	r2, [r2, #16]
 8014e0c:	f107 0108 	add.w	r1, r7, #8
 8014e10:	4610      	mov	r0, r2
 8014e12:	4798      	blx	r3
 8014e14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e16:	e126      	b.n	8015066 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014e18:	6839      	ldr	r1, [r7, #0]
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f000 fb0e 	bl	801543c <USBD_CtlError>
        err++;
 8014e20:	7afb      	ldrb	r3, [r7, #11]
 8014e22:	3301      	adds	r3, #1
 8014e24:	72fb      	strb	r3, [r7, #11]
      break;
 8014e26:	e11e      	b.n	8015066 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	7c12      	ldrb	r2, [r2, #16]
 8014e34:	f107 0108 	add.w	r1, r7, #8
 8014e38:	4610      	mov	r0, r2
 8014e3a:	4798      	blx	r3
 8014e3c:	60f8      	str	r0, [r7, #12]
      break;
 8014e3e:	e112      	b.n	8015066 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	7c1b      	ldrb	r3, [r3, #16]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d10d      	bne.n	8014e64 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e50:	f107 0208 	add.w	r2, r7, #8
 8014e54:	4610      	mov	r0, r2
 8014e56:	4798      	blx	r3
 8014e58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	2202      	movs	r2, #2
 8014e60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014e62:	e100      	b.n	8015066 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e6c:	f107 0208 	add.w	r2, r7, #8
 8014e70:	4610      	mov	r0, r2
 8014e72:	4798      	blx	r3
 8014e74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	2202      	movs	r2, #2
 8014e7c:	701a      	strb	r2, [r3, #0]
      break;
 8014e7e:	e0f2      	b.n	8015066 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	885b      	ldrh	r3, [r3, #2]
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	2b05      	cmp	r3, #5
 8014e88:	f200 80ac 	bhi.w	8014fe4 <USBD_GetDescriptor+0x258>
 8014e8c:	a201      	add	r2, pc, #4	; (adr r2, 8014e94 <USBD_GetDescriptor+0x108>)
 8014e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e92:	bf00      	nop
 8014e94:	08014ead 	.word	0x08014ead
 8014e98:	08014ee1 	.word	0x08014ee1
 8014e9c:	08014f15 	.word	0x08014f15
 8014ea0:	08014f49 	.word	0x08014f49
 8014ea4:	08014f7d 	.word	0x08014f7d
 8014ea8:	08014fb1 	.word	0x08014fb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d00b      	beq.n	8014ed0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ebe:	685b      	ldr	r3, [r3, #4]
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	7c12      	ldrb	r2, [r2, #16]
 8014ec4:	f107 0108 	add.w	r1, r7, #8
 8014ec8:	4610      	mov	r0, r2
 8014eca:	4798      	blx	r3
 8014ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ece:	e091      	b.n	8014ff4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014ed0:	6839      	ldr	r1, [r7, #0]
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f000 fab2 	bl	801543c <USBD_CtlError>
            err++;
 8014ed8:	7afb      	ldrb	r3, [r7, #11]
 8014eda:	3301      	adds	r3, #1
 8014edc:	72fb      	strb	r3, [r7, #11]
          break;
 8014ede:	e089      	b.n	8014ff4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ee6:	689b      	ldr	r3, [r3, #8]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d00b      	beq.n	8014f04 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ef2:	689b      	ldr	r3, [r3, #8]
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	7c12      	ldrb	r2, [r2, #16]
 8014ef8:	f107 0108 	add.w	r1, r7, #8
 8014efc:	4610      	mov	r0, r2
 8014efe:	4798      	blx	r3
 8014f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f02:	e077      	b.n	8014ff4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014f04:	6839      	ldr	r1, [r7, #0]
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f000 fa98 	bl	801543c <USBD_CtlError>
            err++;
 8014f0c:	7afb      	ldrb	r3, [r7, #11]
 8014f0e:	3301      	adds	r3, #1
 8014f10:	72fb      	strb	r3, [r7, #11]
          break;
 8014f12:	e06f      	b.n	8014ff4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f1a:	68db      	ldr	r3, [r3, #12]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d00b      	beq.n	8014f38 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f26:	68db      	ldr	r3, [r3, #12]
 8014f28:	687a      	ldr	r2, [r7, #4]
 8014f2a:	7c12      	ldrb	r2, [r2, #16]
 8014f2c:	f107 0108 	add.w	r1, r7, #8
 8014f30:	4610      	mov	r0, r2
 8014f32:	4798      	blx	r3
 8014f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f36:	e05d      	b.n	8014ff4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014f38:	6839      	ldr	r1, [r7, #0]
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f000 fa7e 	bl	801543c <USBD_CtlError>
            err++;
 8014f40:	7afb      	ldrb	r3, [r7, #11]
 8014f42:	3301      	adds	r3, #1
 8014f44:	72fb      	strb	r3, [r7, #11]
          break;
 8014f46:	e055      	b.n	8014ff4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f4e:	691b      	ldr	r3, [r3, #16]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d00b      	beq.n	8014f6c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f5a:	691b      	ldr	r3, [r3, #16]
 8014f5c:	687a      	ldr	r2, [r7, #4]
 8014f5e:	7c12      	ldrb	r2, [r2, #16]
 8014f60:	f107 0108 	add.w	r1, r7, #8
 8014f64:	4610      	mov	r0, r2
 8014f66:	4798      	blx	r3
 8014f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f6a:	e043      	b.n	8014ff4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014f6c:	6839      	ldr	r1, [r7, #0]
 8014f6e:	6878      	ldr	r0, [r7, #4]
 8014f70:	f000 fa64 	bl	801543c <USBD_CtlError>
            err++;
 8014f74:	7afb      	ldrb	r3, [r7, #11]
 8014f76:	3301      	adds	r3, #1
 8014f78:	72fb      	strb	r3, [r7, #11]
          break;
 8014f7a:	e03b      	b.n	8014ff4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f82:	695b      	ldr	r3, [r3, #20]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d00b      	beq.n	8014fa0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f8e:	695b      	ldr	r3, [r3, #20]
 8014f90:	687a      	ldr	r2, [r7, #4]
 8014f92:	7c12      	ldrb	r2, [r2, #16]
 8014f94:	f107 0108 	add.w	r1, r7, #8
 8014f98:	4610      	mov	r0, r2
 8014f9a:	4798      	blx	r3
 8014f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f9e:	e029      	b.n	8014ff4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014fa0:	6839      	ldr	r1, [r7, #0]
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f000 fa4a 	bl	801543c <USBD_CtlError>
            err++;
 8014fa8:	7afb      	ldrb	r3, [r7, #11]
 8014faa:	3301      	adds	r3, #1
 8014fac:	72fb      	strb	r3, [r7, #11]
          break;
 8014fae:	e021      	b.n	8014ff4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fb6:	699b      	ldr	r3, [r3, #24]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d00b      	beq.n	8014fd4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fc2:	699b      	ldr	r3, [r3, #24]
 8014fc4:	687a      	ldr	r2, [r7, #4]
 8014fc6:	7c12      	ldrb	r2, [r2, #16]
 8014fc8:	f107 0108 	add.w	r1, r7, #8
 8014fcc:	4610      	mov	r0, r2
 8014fce:	4798      	blx	r3
 8014fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fd2:	e00f      	b.n	8014ff4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014fd4:	6839      	ldr	r1, [r7, #0]
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f000 fa30 	bl	801543c <USBD_CtlError>
            err++;
 8014fdc:	7afb      	ldrb	r3, [r7, #11]
 8014fde:	3301      	adds	r3, #1
 8014fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8014fe2:	e007      	b.n	8014ff4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014fe4:	6839      	ldr	r1, [r7, #0]
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f000 fa28 	bl	801543c <USBD_CtlError>
          err++;
 8014fec:	7afb      	ldrb	r3, [r7, #11]
 8014fee:	3301      	adds	r3, #1
 8014ff0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014ff2:	bf00      	nop
      }
      break;
 8014ff4:	e037      	b.n	8015066 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	7c1b      	ldrb	r3, [r3, #16]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d109      	bne.n	8015012 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015006:	f107 0208 	add.w	r2, r7, #8
 801500a:	4610      	mov	r0, r2
 801500c:	4798      	blx	r3
 801500e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015010:	e029      	b.n	8015066 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015012:	6839      	ldr	r1, [r7, #0]
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	f000 fa11 	bl	801543c <USBD_CtlError>
        err++;
 801501a:	7afb      	ldrb	r3, [r7, #11]
 801501c:	3301      	adds	r3, #1
 801501e:	72fb      	strb	r3, [r7, #11]
      break;
 8015020:	e021      	b.n	8015066 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	7c1b      	ldrb	r3, [r3, #16]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d10d      	bne.n	8015046 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015032:	f107 0208 	add.w	r2, r7, #8
 8015036:	4610      	mov	r0, r2
 8015038:	4798      	blx	r3
 801503a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	3301      	adds	r3, #1
 8015040:	2207      	movs	r2, #7
 8015042:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015044:	e00f      	b.n	8015066 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015046:	6839      	ldr	r1, [r7, #0]
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f000 f9f7 	bl	801543c <USBD_CtlError>
        err++;
 801504e:	7afb      	ldrb	r3, [r7, #11]
 8015050:	3301      	adds	r3, #1
 8015052:	72fb      	strb	r3, [r7, #11]
      break;
 8015054:	e007      	b.n	8015066 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015056:	6839      	ldr	r1, [r7, #0]
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f000 f9ef 	bl	801543c <USBD_CtlError>
      err++;
 801505e:	7afb      	ldrb	r3, [r7, #11]
 8015060:	3301      	adds	r3, #1
 8015062:	72fb      	strb	r3, [r7, #11]
      break;
 8015064:	bf00      	nop
  }

  if (err != 0U)
 8015066:	7afb      	ldrb	r3, [r7, #11]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d11e      	bne.n	80150aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	88db      	ldrh	r3, [r3, #6]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d016      	beq.n	80150a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015074:	893b      	ldrh	r3, [r7, #8]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d00e      	beq.n	8015098 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	88da      	ldrh	r2, [r3, #6]
 801507e:	893b      	ldrh	r3, [r7, #8]
 8015080:	4293      	cmp	r3, r2
 8015082:	bf28      	it	cs
 8015084:	4613      	movcs	r3, r2
 8015086:	b29b      	uxth	r3, r3
 8015088:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801508a:	893b      	ldrh	r3, [r7, #8]
 801508c:	461a      	mov	r2, r3
 801508e:	68f9      	ldr	r1, [r7, #12]
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f000 fa44 	bl	801551e <USBD_CtlSendData>
 8015096:	e009      	b.n	80150ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015098:	6839      	ldr	r1, [r7, #0]
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f000 f9ce 	bl	801543c <USBD_CtlError>
 80150a0:	e004      	b.n	80150ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80150a2:	6878      	ldr	r0, [r7, #4]
 80150a4:	f000 fa95 	bl	80155d2 <USBD_CtlSendStatus>
 80150a8:	e000      	b.n	80150ac <USBD_GetDescriptor+0x320>
    return;
 80150aa:	bf00      	nop
  }
}
 80150ac:	3710      	adds	r7, #16
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}
 80150b2:	bf00      	nop

080150b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b084      	sub	sp, #16
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	889b      	ldrh	r3, [r3, #4]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d131      	bne.n	801512a <USBD_SetAddress+0x76>
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	88db      	ldrh	r3, [r3, #6]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d12d      	bne.n	801512a <USBD_SetAddress+0x76>
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	885b      	ldrh	r3, [r3, #2]
 80150d2:	2b7f      	cmp	r3, #127	; 0x7f
 80150d4:	d829      	bhi.n	801512a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	885b      	ldrh	r3, [r3, #2]
 80150da:	b2db      	uxtb	r3, r3
 80150dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150e8:	b2db      	uxtb	r3, r3
 80150ea:	2b03      	cmp	r3, #3
 80150ec:	d104      	bne.n	80150f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80150ee:	6839      	ldr	r1, [r7, #0]
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f000 f9a3 	bl	801543c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150f6:	e01d      	b.n	8015134 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	7bfa      	ldrb	r2, [r7, #15]
 80150fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015100:	7bfb      	ldrb	r3, [r7, #15]
 8015102:	4619      	mov	r1, r3
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f000 fea1 	bl	8015e4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f000 fa61 	bl	80155d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015110:	7bfb      	ldrb	r3, [r7, #15]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d004      	beq.n	8015120 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2202      	movs	r2, #2
 801511a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801511e:	e009      	b.n	8015134 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2201      	movs	r2, #1
 8015124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015128:	e004      	b.n	8015134 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801512a:	6839      	ldr	r1, [r7, #0]
 801512c:	6878      	ldr	r0, [r7, #4]
 801512e:	f000 f985 	bl	801543c <USBD_CtlError>
  }
}
 8015132:	bf00      	nop
 8015134:	bf00      	nop
 8015136:	3710      	adds	r7, #16
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}

0801513c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b084      	sub	sp, #16
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015146:	2300      	movs	r3, #0
 8015148:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	885b      	ldrh	r3, [r3, #2]
 801514e:	b2da      	uxtb	r2, r3
 8015150:	4b4c      	ldr	r3, [pc, #304]	; (8015284 <USBD_SetConfig+0x148>)
 8015152:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015154:	4b4b      	ldr	r3, [pc, #300]	; (8015284 <USBD_SetConfig+0x148>)
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	2b01      	cmp	r3, #1
 801515a:	d905      	bls.n	8015168 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801515c:	6839      	ldr	r1, [r7, #0]
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f000 f96c 	bl	801543c <USBD_CtlError>
    return USBD_FAIL;
 8015164:	2303      	movs	r3, #3
 8015166:	e088      	b.n	801527a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801516e:	b2db      	uxtb	r3, r3
 8015170:	2b02      	cmp	r3, #2
 8015172:	d002      	beq.n	801517a <USBD_SetConfig+0x3e>
 8015174:	2b03      	cmp	r3, #3
 8015176:	d025      	beq.n	80151c4 <USBD_SetConfig+0x88>
 8015178:	e071      	b.n	801525e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801517a:	4b42      	ldr	r3, [pc, #264]	; (8015284 <USBD_SetConfig+0x148>)
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d01c      	beq.n	80151bc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015182:	4b40      	ldr	r3, [pc, #256]	; (8015284 <USBD_SetConfig+0x148>)
 8015184:	781b      	ldrb	r3, [r3, #0]
 8015186:	461a      	mov	r2, r3
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801518c:	4b3d      	ldr	r3, [pc, #244]	; (8015284 <USBD_SetConfig+0x148>)
 801518e:	781b      	ldrb	r3, [r3, #0]
 8015190:	4619      	mov	r1, r3
 8015192:	6878      	ldr	r0, [r7, #4]
 8015194:	f7ff f992 	bl	80144bc <USBD_SetClassConfig>
 8015198:	4603      	mov	r3, r0
 801519a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801519c:	7bfb      	ldrb	r3, [r7, #15]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d004      	beq.n	80151ac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80151a2:	6839      	ldr	r1, [r7, #0]
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f000 f949 	bl	801543c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80151aa:	e065      	b.n	8015278 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f000 fa10 	bl	80155d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	2203      	movs	r2, #3
 80151b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80151ba:	e05d      	b.n	8015278 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f000 fa08 	bl	80155d2 <USBD_CtlSendStatus>
      break;
 80151c2:	e059      	b.n	8015278 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80151c4:	4b2f      	ldr	r3, [pc, #188]	; (8015284 <USBD_SetConfig+0x148>)
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d112      	bne.n	80151f2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2202      	movs	r2, #2
 80151d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80151d4:	4b2b      	ldr	r3, [pc, #172]	; (8015284 <USBD_SetConfig+0x148>)
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	461a      	mov	r2, r3
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80151de:	4b29      	ldr	r3, [pc, #164]	; (8015284 <USBD_SetConfig+0x148>)
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	4619      	mov	r1, r3
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f7ff f985 	bl	80144f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80151ea:	6878      	ldr	r0, [r7, #4]
 80151ec:	f000 f9f1 	bl	80155d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80151f0:	e042      	b.n	8015278 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80151f2:	4b24      	ldr	r3, [pc, #144]	; (8015284 <USBD_SetConfig+0x148>)
 80151f4:	781b      	ldrb	r3, [r3, #0]
 80151f6:	461a      	mov	r2, r3
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d02a      	beq.n	8015256 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	b2db      	uxtb	r3, r3
 8015206:	4619      	mov	r1, r3
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	f7ff f973 	bl	80144f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801520e:	4b1d      	ldr	r3, [pc, #116]	; (8015284 <USBD_SetConfig+0x148>)
 8015210:	781b      	ldrb	r3, [r3, #0]
 8015212:	461a      	mov	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015218:	4b1a      	ldr	r3, [pc, #104]	; (8015284 <USBD_SetConfig+0x148>)
 801521a:	781b      	ldrb	r3, [r3, #0]
 801521c:	4619      	mov	r1, r3
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f7ff f94c 	bl	80144bc <USBD_SetClassConfig>
 8015224:	4603      	mov	r3, r0
 8015226:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015228:	7bfb      	ldrb	r3, [r7, #15]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d00f      	beq.n	801524e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801522e:	6839      	ldr	r1, [r7, #0]
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f000 f903 	bl	801543c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	685b      	ldr	r3, [r3, #4]
 801523a:	b2db      	uxtb	r3, r3
 801523c:	4619      	mov	r1, r3
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	f7ff f958 	bl	80144f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	2202      	movs	r2, #2
 8015248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801524c:	e014      	b.n	8015278 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f000 f9bf 	bl	80155d2 <USBD_CtlSendStatus>
      break;
 8015254:	e010      	b.n	8015278 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015256:	6878      	ldr	r0, [r7, #4]
 8015258:	f000 f9bb 	bl	80155d2 <USBD_CtlSendStatus>
      break;
 801525c:	e00c      	b.n	8015278 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801525e:	6839      	ldr	r1, [r7, #0]
 8015260:	6878      	ldr	r0, [r7, #4]
 8015262:	f000 f8eb 	bl	801543c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015266:	4b07      	ldr	r3, [pc, #28]	; (8015284 <USBD_SetConfig+0x148>)
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	4619      	mov	r1, r3
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f7ff f941 	bl	80144f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015272:	2303      	movs	r3, #3
 8015274:	73fb      	strb	r3, [r7, #15]
      break;
 8015276:	bf00      	nop
  }

  return ret;
 8015278:	7bfb      	ldrb	r3, [r7, #15]
}
 801527a:	4618      	mov	r0, r3
 801527c:	3710      	adds	r7, #16
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	200020ac 	.word	0x200020ac

08015288 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	88db      	ldrh	r3, [r3, #6]
 8015296:	2b01      	cmp	r3, #1
 8015298:	d004      	beq.n	80152a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801529a:	6839      	ldr	r1, [r7, #0]
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f000 f8cd 	bl	801543c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80152a2:	e023      	b.n	80152ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152aa:	b2db      	uxtb	r3, r3
 80152ac:	2b02      	cmp	r3, #2
 80152ae:	dc02      	bgt.n	80152b6 <USBD_GetConfig+0x2e>
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	dc03      	bgt.n	80152bc <USBD_GetConfig+0x34>
 80152b4:	e015      	b.n	80152e2 <USBD_GetConfig+0x5a>
 80152b6:	2b03      	cmp	r3, #3
 80152b8:	d00b      	beq.n	80152d2 <USBD_GetConfig+0x4a>
 80152ba:	e012      	b.n	80152e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	3308      	adds	r3, #8
 80152c6:	2201      	movs	r2, #1
 80152c8:	4619      	mov	r1, r3
 80152ca:	6878      	ldr	r0, [r7, #4]
 80152cc:	f000 f927 	bl	801551e <USBD_CtlSendData>
        break;
 80152d0:	e00c      	b.n	80152ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	3304      	adds	r3, #4
 80152d6:	2201      	movs	r2, #1
 80152d8:	4619      	mov	r1, r3
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f000 f91f 	bl	801551e <USBD_CtlSendData>
        break;
 80152e0:	e004      	b.n	80152ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80152e2:	6839      	ldr	r1, [r7, #0]
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f000 f8a9 	bl	801543c <USBD_CtlError>
        break;
 80152ea:	bf00      	nop
}
 80152ec:	bf00      	nop
 80152ee:	3708      	adds	r7, #8
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015304:	b2db      	uxtb	r3, r3
 8015306:	3b01      	subs	r3, #1
 8015308:	2b02      	cmp	r3, #2
 801530a:	d81e      	bhi.n	801534a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	88db      	ldrh	r3, [r3, #6]
 8015310:	2b02      	cmp	r3, #2
 8015312:	d004      	beq.n	801531e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015314:	6839      	ldr	r1, [r7, #0]
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f000 f890 	bl	801543c <USBD_CtlError>
        break;
 801531c:	e01a      	b.n	8015354 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2201      	movs	r2, #1
 8015322:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801532a:	2b00      	cmp	r3, #0
 801532c:	d005      	beq.n	801533a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	68db      	ldr	r3, [r3, #12]
 8015332:	f043 0202 	orr.w	r2, r3, #2
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	330c      	adds	r3, #12
 801533e:	2202      	movs	r2, #2
 8015340:	4619      	mov	r1, r3
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f000 f8eb 	bl	801551e <USBD_CtlSendData>
      break;
 8015348:	e004      	b.n	8015354 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801534a:	6839      	ldr	r1, [r7, #0]
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f000 f875 	bl	801543c <USBD_CtlError>
      break;
 8015352:	bf00      	nop
  }
}
 8015354:	bf00      	nop
 8015356:	3708      	adds	r7, #8
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}

0801535c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
 8015364:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	885b      	ldrh	r3, [r3, #2]
 801536a:	2b01      	cmp	r3, #1
 801536c:	d106      	bne.n	801537c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	2201      	movs	r2, #1
 8015372:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f000 f92b 	bl	80155d2 <USBD_CtlSendStatus>
  }
}
 801537c:	bf00      	nop
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b082      	sub	sp, #8
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015394:	b2db      	uxtb	r3, r3
 8015396:	3b01      	subs	r3, #1
 8015398:	2b02      	cmp	r3, #2
 801539a:	d80b      	bhi.n	80153b4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	885b      	ldrh	r3, [r3, #2]
 80153a0:	2b01      	cmp	r3, #1
 80153a2:	d10c      	bne.n	80153be <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2200      	movs	r2, #0
 80153a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f000 f910 	bl	80155d2 <USBD_CtlSendStatus>
      }
      break;
 80153b2:	e004      	b.n	80153be <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80153b4:	6839      	ldr	r1, [r7, #0]
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f000 f840 	bl	801543c <USBD_CtlError>
      break;
 80153bc:	e000      	b.n	80153c0 <USBD_ClrFeature+0x3c>
      break;
 80153be:	bf00      	nop
  }
}
 80153c0:	bf00      	nop
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}

080153c8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b084      	sub	sp, #16
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
 80153d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	781a      	ldrb	r2, [r3, #0]
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	3301      	adds	r3, #1
 80153e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	781a      	ldrb	r2, [r3, #0]
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	3301      	adds	r3, #1
 80153f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80153f2:	68f8      	ldr	r0, [r7, #12]
 80153f4:	f7ff fa92 	bl	801491c <SWAPBYTE>
 80153f8:	4603      	mov	r3, r0
 80153fa:	461a      	mov	r2, r3
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	3301      	adds	r3, #1
 8015404:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	3301      	adds	r3, #1
 801540a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801540c:	68f8      	ldr	r0, [r7, #12]
 801540e:	f7ff fa85 	bl	801491c <SWAPBYTE>
 8015412:	4603      	mov	r3, r0
 8015414:	461a      	mov	r2, r3
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	3301      	adds	r3, #1
 801541e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	3301      	adds	r3, #1
 8015424:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015426:	68f8      	ldr	r0, [r7, #12]
 8015428:	f7ff fa78 	bl	801491c <SWAPBYTE>
 801542c:	4603      	mov	r3, r0
 801542e:	461a      	mov	r2, r3
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	80da      	strh	r2, [r3, #6]
}
 8015434:	bf00      	nop
 8015436:	3710      	adds	r7, #16
 8015438:	46bd      	mov	sp, r7
 801543a:	bd80      	pop	{r7, pc}

0801543c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015446:	2180      	movs	r1, #128	; 0x80
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f000 fc95 	bl	8015d78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801544e:	2100      	movs	r1, #0
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f000 fc91 	bl	8015d78 <USBD_LL_StallEP>
}
 8015456:	bf00      	nop
 8015458:	3708      	adds	r7, #8
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801545e:	b580      	push	{r7, lr}
 8015460:	b086      	sub	sp, #24
 8015462:	af00      	add	r7, sp, #0
 8015464:	60f8      	str	r0, [r7, #12]
 8015466:	60b9      	str	r1, [r7, #8]
 8015468:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801546a:	2300      	movs	r3, #0
 801546c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d036      	beq.n	80154e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015478:	6938      	ldr	r0, [r7, #16]
 801547a:	f000 f836 	bl	80154ea <USBD_GetLen>
 801547e:	4603      	mov	r3, r0
 8015480:	3301      	adds	r3, #1
 8015482:	b29b      	uxth	r3, r3
 8015484:	005b      	lsls	r3, r3, #1
 8015486:	b29a      	uxth	r2, r3
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801548c:	7dfb      	ldrb	r3, [r7, #23]
 801548e:	68ba      	ldr	r2, [r7, #8]
 8015490:	4413      	add	r3, r2
 8015492:	687a      	ldr	r2, [r7, #4]
 8015494:	7812      	ldrb	r2, [r2, #0]
 8015496:	701a      	strb	r2, [r3, #0]
  idx++;
 8015498:	7dfb      	ldrb	r3, [r7, #23]
 801549a:	3301      	adds	r3, #1
 801549c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801549e:	7dfb      	ldrb	r3, [r7, #23]
 80154a0:	68ba      	ldr	r2, [r7, #8]
 80154a2:	4413      	add	r3, r2
 80154a4:	2203      	movs	r2, #3
 80154a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80154a8:	7dfb      	ldrb	r3, [r7, #23]
 80154aa:	3301      	adds	r3, #1
 80154ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80154ae:	e013      	b.n	80154d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80154b0:	7dfb      	ldrb	r3, [r7, #23]
 80154b2:	68ba      	ldr	r2, [r7, #8]
 80154b4:	4413      	add	r3, r2
 80154b6:	693a      	ldr	r2, [r7, #16]
 80154b8:	7812      	ldrb	r2, [r2, #0]
 80154ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	3301      	adds	r3, #1
 80154c0:	613b      	str	r3, [r7, #16]
    idx++;
 80154c2:	7dfb      	ldrb	r3, [r7, #23]
 80154c4:	3301      	adds	r3, #1
 80154c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80154c8:	7dfb      	ldrb	r3, [r7, #23]
 80154ca:	68ba      	ldr	r2, [r7, #8]
 80154cc:	4413      	add	r3, r2
 80154ce:	2200      	movs	r2, #0
 80154d0:	701a      	strb	r2, [r3, #0]
    idx++;
 80154d2:	7dfb      	ldrb	r3, [r7, #23]
 80154d4:	3301      	adds	r3, #1
 80154d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	781b      	ldrb	r3, [r3, #0]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d1e7      	bne.n	80154b0 <USBD_GetString+0x52>
 80154e0:	e000      	b.n	80154e4 <USBD_GetString+0x86>
    return;
 80154e2:	bf00      	nop
  }
}
 80154e4:	3718      	adds	r7, #24
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80154ea:	b480      	push	{r7}
 80154ec:	b085      	sub	sp, #20
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80154f2:	2300      	movs	r3, #0
 80154f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80154fa:	e005      	b.n	8015508 <USBD_GetLen+0x1e>
  {
    len++;
 80154fc:	7bfb      	ldrb	r3, [r7, #15]
 80154fe:	3301      	adds	r3, #1
 8015500:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	3301      	adds	r3, #1
 8015506:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d1f5      	bne.n	80154fc <USBD_GetLen+0x12>
  }

  return len;
 8015510:	7bfb      	ldrb	r3, [r7, #15]
}
 8015512:	4618      	mov	r0, r3
 8015514:	3714      	adds	r7, #20
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr

0801551e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801551e:	b580      	push	{r7, lr}
 8015520:	b084      	sub	sp, #16
 8015522:	af00      	add	r7, sp, #0
 8015524:	60f8      	str	r0, [r7, #12]
 8015526:	60b9      	str	r1, [r7, #8]
 8015528:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2202      	movs	r2, #2
 801552e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	687a      	ldr	r2, [r7, #4]
 8015536:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	68ba      	ldr	r2, [r7, #8]
 8015542:	2100      	movs	r1, #0
 8015544:	68f8      	ldr	r0, [r7, #12]
 8015546:	f000 fca0 	bl	8015e8a <USBD_LL_Transmit>

  return USBD_OK;
 801554a:	2300      	movs	r3, #0
}
 801554c:	4618      	mov	r0, r3
 801554e:	3710      	adds	r7, #16
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}

08015554 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b084      	sub	sp, #16
 8015558:	af00      	add	r7, sp, #0
 801555a:	60f8      	str	r0, [r7, #12]
 801555c:	60b9      	str	r1, [r7, #8]
 801555e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	68ba      	ldr	r2, [r7, #8]
 8015564:	2100      	movs	r1, #0
 8015566:	68f8      	ldr	r0, [r7, #12]
 8015568:	f000 fc8f 	bl	8015e8a <USBD_LL_Transmit>

  return USBD_OK;
 801556c:	2300      	movs	r3, #0
}
 801556e:	4618      	mov	r0, r3
 8015570:	3710      	adds	r7, #16
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b084      	sub	sp, #16
 801557a:	af00      	add	r7, sp, #0
 801557c:	60f8      	str	r0, [r7, #12]
 801557e:	60b9      	str	r1, [r7, #8]
 8015580:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2203      	movs	r2, #3
 8015586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	687a      	ldr	r2, [r7, #4]
 801558e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	687a      	ldr	r2, [r7, #4]
 8015596:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	68ba      	ldr	r2, [r7, #8]
 801559e:	2100      	movs	r1, #0
 80155a0:	68f8      	ldr	r0, [r7, #12]
 80155a2:	f000 fc93 	bl	8015ecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80155a6:	2300      	movs	r3, #0
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3710      	adds	r7, #16
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}

080155b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b084      	sub	sp, #16
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	68ba      	ldr	r2, [r7, #8]
 80155c0:	2100      	movs	r1, #0
 80155c2:	68f8      	ldr	r0, [r7, #12]
 80155c4:	f000 fc82 	bl	8015ecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80155c8:	2300      	movs	r3, #0
}
 80155ca:	4618      	mov	r0, r3
 80155cc:	3710      	adds	r7, #16
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}

080155d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80155d2:	b580      	push	{r7, lr}
 80155d4:	b082      	sub	sp, #8
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2204      	movs	r2, #4
 80155de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80155e2:	2300      	movs	r3, #0
 80155e4:	2200      	movs	r2, #0
 80155e6:	2100      	movs	r1, #0
 80155e8:	6878      	ldr	r0, [r7, #4]
 80155ea:	f000 fc4e 	bl	8015e8a <USBD_LL_Transmit>

  return USBD_OK;
 80155ee:	2300      	movs	r3, #0
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3708      	adds	r7, #8
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2205      	movs	r2, #5
 8015604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015608:	2300      	movs	r3, #0
 801560a:	2200      	movs	r2, #0
 801560c:	2100      	movs	r1, #0
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f000 fc5c 	bl	8015ecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015614:	2300      	movs	r3, #0
}
 8015616:	4618      	mov	r0, r3
 8015618:	3708      	adds	r7, #8
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}
	...

08015620 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8015624:	2200      	movs	r2, #0
 8015626:	4912      	ldr	r1, [pc, #72]	; (8015670 <MX_USB_Device_Init+0x50>)
 8015628:	4812      	ldr	r0, [pc, #72]	; (8015674 <MX_USB_Device_Init+0x54>)
 801562a:	f7fe fed9 	bl	80143e0 <USBD_Init>
 801562e:	4603      	mov	r3, r0
 8015630:	2b00      	cmp	r3, #0
 8015632:	d001      	beq.n	8015638 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8015634:	f7ee fda8 	bl	8004188 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015638:	490f      	ldr	r1, [pc, #60]	; (8015678 <MX_USB_Device_Init+0x58>)
 801563a:	480e      	ldr	r0, [pc, #56]	; (8015674 <MX_USB_Device_Init+0x54>)
 801563c:	f7fe ff00 	bl	8014440 <USBD_RegisterClass>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d001      	beq.n	801564a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8015646:	f7ee fd9f 	bl	8004188 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801564a:	490c      	ldr	r1, [pc, #48]	; (801567c <MX_USB_Device_Init+0x5c>)
 801564c:	4809      	ldr	r0, [pc, #36]	; (8015674 <MX_USB_Device_Init+0x54>)
 801564e:	f7fe fe21 	bl	8014294 <USBD_CDC_RegisterInterface>
 8015652:	4603      	mov	r3, r0
 8015654:	2b00      	cmp	r3, #0
 8015656:	d001      	beq.n	801565c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015658:	f7ee fd96 	bl	8004188 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801565c:	4805      	ldr	r0, [pc, #20]	; (8015674 <MX_USB_Device_Init+0x54>)
 801565e:	f7fe ff16 	bl	801448e <USBD_Start>
 8015662:	4603      	mov	r3, r0
 8015664:	2b00      	cmp	r3, #0
 8015666:	d001      	beq.n	801566c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015668:	f7ee fd8e 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801566c:	bf00      	nop
 801566e:	bd80      	pop	{r7, pc}
 8015670:	20000324 	.word	0x20000324
 8015674:	200020b0 	.word	0x200020b0
 8015678:	2000020c 	.word	0x2000020c
 801567c:	20000310 	.word	0x20000310

08015680 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015684:	2200      	movs	r2, #0
 8015686:	4905      	ldr	r1, [pc, #20]	; (801569c <CDC_Init_FS+0x1c>)
 8015688:	4805      	ldr	r0, [pc, #20]	; (80156a0 <CDC_Init_FS+0x20>)
 801568a:	f7fe fe18 	bl	80142be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801568e:	4905      	ldr	r1, [pc, #20]	; (80156a4 <CDC_Init_FS+0x24>)
 8015690:	4803      	ldr	r0, [pc, #12]	; (80156a0 <CDC_Init_FS+0x20>)
 8015692:	f7fe fe32 	bl	80142fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015696:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015698:	4618      	mov	r0, r3
 801569a:	bd80      	pop	{r7, pc}
 801569c:	20002780 	.word	0x20002780
 80156a0:	200020b0 	.word	0x200020b0
 80156a4:	20002380 	.word	0x20002380

080156a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80156a8:	b480      	push	{r7}
 80156aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80156ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80156ae:	4618      	mov	r0, r3
 80156b0:	46bd      	mov	sp, r7
 80156b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b6:	4770      	bx	lr

080156b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80156b8:	b480      	push	{r7}
 80156ba:	b083      	sub	sp, #12
 80156bc:	af00      	add	r7, sp, #0
 80156be:	4603      	mov	r3, r0
 80156c0:	6039      	str	r1, [r7, #0]
 80156c2:	71fb      	strb	r3, [r7, #7]
 80156c4:	4613      	mov	r3, r2
 80156c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80156c8:	79fb      	ldrb	r3, [r7, #7]
 80156ca:	2b23      	cmp	r3, #35	; 0x23
 80156cc:	d84a      	bhi.n	8015764 <CDC_Control_FS+0xac>
 80156ce:	a201      	add	r2, pc, #4	; (adr r2, 80156d4 <CDC_Control_FS+0x1c>)
 80156d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156d4:	08015765 	.word	0x08015765
 80156d8:	08015765 	.word	0x08015765
 80156dc:	08015765 	.word	0x08015765
 80156e0:	08015765 	.word	0x08015765
 80156e4:	08015765 	.word	0x08015765
 80156e8:	08015765 	.word	0x08015765
 80156ec:	08015765 	.word	0x08015765
 80156f0:	08015765 	.word	0x08015765
 80156f4:	08015765 	.word	0x08015765
 80156f8:	08015765 	.word	0x08015765
 80156fc:	08015765 	.word	0x08015765
 8015700:	08015765 	.word	0x08015765
 8015704:	08015765 	.word	0x08015765
 8015708:	08015765 	.word	0x08015765
 801570c:	08015765 	.word	0x08015765
 8015710:	08015765 	.word	0x08015765
 8015714:	08015765 	.word	0x08015765
 8015718:	08015765 	.word	0x08015765
 801571c:	08015765 	.word	0x08015765
 8015720:	08015765 	.word	0x08015765
 8015724:	08015765 	.word	0x08015765
 8015728:	08015765 	.word	0x08015765
 801572c:	08015765 	.word	0x08015765
 8015730:	08015765 	.word	0x08015765
 8015734:	08015765 	.word	0x08015765
 8015738:	08015765 	.word	0x08015765
 801573c:	08015765 	.word	0x08015765
 8015740:	08015765 	.word	0x08015765
 8015744:	08015765 	.word	0x08015765
 8015748:	08015765 	.word	0x08015765
 801574c:	08015765 	.word	0x08015765
 8015750:	08015765 	.word	0x08015765
 8015754:	08015765 	.word	0x08015765
 8015758:	08015765 	.word	0x08015765
 801575c:	08015765 	.word	0x08015765
 8015760:	08015765 	.word	0x08015765
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015764:	bf00      	nop
  }

  return (USBD_OK);
 8015766:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015768:	4618      	mov	r0, r3
 801576a:	370c      	adds	r7, #12
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr

08015774 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801577e:	6879      	ldr	r1, [r7, #4]
 8015780:	4805      	ldr	r0, [pc, #20]	; (8015798 <CDC_Receive_FS+0x24>)
 8015782:	f7fe fdba 	bl	80142fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015786:	4804      	ldr	r0, [pc, #16]	; (8015798 <CDC_Receive_FS+0x24>)
 8015788:	f7fe fe00 	bl	801438c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801578c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801578e:	4618      	mov	r0, r3
 8015790:	3708      	adds	r7, #8
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}
 8015796:	bf00      	nop
 8015798:	200020b0 	.word	0x200020b0

0801579c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b084      	sub	sp, #16
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
 80157a4:	460b      	mov	r3, r1
 80157a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80157a8:	2300      	movs	r3, #0
 80157aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80157ac:	4b0d      	ldr	r3, [pc, #52]	; (80157e4 <CDC_Transmit_FS+0x48>)
 80157ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80157b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d001      	beq.n	80157c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80157be:	2301      	movs	r3, #1
 80157c0:	e00b      	b.n	80157da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80157c2:	887b      	ldrh	r3, [r7, #2]
 80157c4:	461a      	mov	r2, r3
 80157c6:	6879      	ldr	r1, [r7, #4]
 80157c8:	4806      	ldr	r0, [pc, #24]	; (80157e4 <CDC_Transmit_FS+0x48>)
 80157ca:	f7fe fd78 	bl	80142be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80157ce:	4805      	ldr	r0, [pc, #20]	; (80157e4 <CDC_Transmit_FS+0x48>)
 80157d0:	f7fe fdac 	bl	801432c <USBD_CDC_TransmitPacket>
 80157d4:	4603      	mov	r3, r0
 80157d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80157d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80157da:	4618      	mov	r0, r3
 80157dc:	3710      	adds	r7, #16
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
 80157e2:	bf00      	nop
 80157e4:	200020b0 	.word	0x200020b0

080157e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80157e8:	b480      	push	{r7}
 80157ea:	b087      	sub	sp, #28
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	4613      	mov	r3, r2
 80157f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80157f6:	2300      	movs	r3, #0
 80157f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80157fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80157fe:	4618      	mov	r0, r3
 8015800:	371c      	adds	r7, #28
 8015802:	46bd      	mov	sp, r7
 8015804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015808:	4770      	bx	lr
	...

0801580c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801580c:	b480      	push	{r7}
 801580e:	b083      	sub	sp, #12
 8015810:	af00      	add	r7, sp, #0
 8015812:	4603      	mov	r3, r0
 8015814:	6039      	str	r1, [r7, #0]
 8015816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	2212      	movs	r2, #18
 801581c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801581e:	4b03      	ldr	r3, [pc, #12]	; (801582c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015820:	4618      	mov	r0, r3
 8015822:	370c      	adds	r7, #12
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr
 801582c:	20000344 	.word	0x20000344

08015830 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
 8015836:	4603      	mov	r3, r0
 8015838:	6039      	str	r1, [r7, #0]
 801583a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	2204      	movs	r2, #4
 8015840:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015842:	4b03      	ldr	r3, [pc, #12]	; (8015850 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8015844:	4618      	mov	r0, r3
 8015846:	370c      	adds	r7, #12
 8015848:	46bd      	mov	sp, r7
 801584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584e:	4770      	bx	lr
 8015850:	20000358 	.word	0x20000358

08015854 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b082      	sub	sp, #8
 8015858:	af00      	add	r7, sp, #0
 801585a:	4603      	mov	r3, r0
 801585c:	6039      	str	r1, [r7, #0]
 801585e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015860:	79fb      	ldrb	r3, [r7, #7]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d105      	bne.n	8015872 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015866:	683a      	ldr	r2, [r7, #0]
 8015868:	4907      	ldr	r1, [pc, #28]	; (8015888 <USBD_CDC_ProductStrDescriptor+0x34>)
 801586a:	4808      	ldr	r0, [pc, #32]	; (801588c <USBD_CDC_ProductStrDescriptor+0x38>)
 801586c:	f7ff fdf7 	bl	801545e <USBD_GetString>
 8015870:	e004      	b.n	801587c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015872:	683a      	ldr	r2, [r7, #0]
 8015874:	4904      	ldr	r1, [pc, #16]	; (8015888 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015876:	4805      	ldr	r0, [pc, #20]	; (801588c <USBD_CDC_ProductStrDescriptor+0x38>)
 8015878:	f7ff fdf1 	bl	801545e <USBD_GetString>
  }
  return USBD_StrDesc;
 801587c:	4b02      	ldr	r3, [pc, #8]	; (8015888 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801587e:	4618      	mov	r0, r3
 8015880:	3708      	adds	r7, #8
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop
 8015888:	20002b80 	.word	0x20002b80
 801588c:	0801ac5c 	.word	0x0801ac5c

08015890 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b082      	sub	sp, #8
 8015894:	af00      	add	r7, sp, #0
 8015896:	4603      	mov	r3, r0
 8015898:	6039      	str	r1, [r7, #0]
 801589a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801589c:	683a      	ldr	r2, [r7, #0]
 801589e:	4904      	ldr	r1, [pc, #16]	; (80158b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80158a0:	4804      	ldr	r0, [pc, #16]	; (80158b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80158a2:	f7ff fddc 	bl	801545e <USBD_GetString>
  return USBD_StrDesc;
 80158a6:	4b02      	ldr	r3, [pc, #8]	; (80158b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3708      	adds	r7, #8
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	20002b80 	.word	0x20002b80
 80158b4:	0801ac74 	.word	0x0801ac74

080158b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	4603      	mov	r3, r0
 80158c0:	6039      	str	r1, [r7, #0]
 80158c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	221a      	movs	r2, #26
 80158c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80158ca:	f000 f843 	bl	8015954 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80158ce:	4b02      	ldr	r3, [pc, #8]	; (80158d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3708      	adds	r7, #8
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	2000035c 	.word	0x2000035c

080158dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b082      	sub	sp, #8
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	4603      	mov	r3, r0
 80158e4:	6039      	str	r1, [r7, #0]
 80158e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80158e8:	79fb      	ldrb	r3, [r7, #7]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d105      	bne.n	80158fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80158ee:	683a      	ldr	r2, [r7, #0]
 80158f0:	4907      	ldr	r1, [pc, #28]	; (8015910 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80158f2:	4808      	ldr	r0, [pc, #32]	; (8015914 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80158f4:	f7ff fdb3 	bl	801545e <USBD_GetString>
 80158f8:	e004      	b.n	8015904 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80158fa:	683a      	ldr	r2, [r7, #0]
 80158fc:	4904      	ldr	r1, [pc, #16]	; (8015910 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80158fe:	4805      	ldr	r0, [pc, #20]	; (8015914 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015900:	f7ff fdad 	bl	801545e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015904:	4b02      	ldr	r3, [pc, #8]	; (8015910 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015906:	4618      	mov	r0, r3
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	20002b80 	.word	0x20002b80
 8015914:	0801ac88 	.word	0x0801ac88

08015918 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	4603      	mov	r3, r0
 8015920:	6039      	str	r1, [r7, #0]
 8015922:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015924:	79fb      	ldrb	r3, [r7, #7]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d105      	bne.n	8015936 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801592a:	683a      	ldr	r2, [r7, #0]
 801592c:	4907      	ldr	r1, [pc, #28]	; (801594c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801592e:	4808      	ldr	r0, [pc, #32]	; (8015950 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015930:	f7ff fd95 	bl	801545e <USBD_GetString>
 8015934:	e004      	b.n	8015940 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015936:	683a      	ldr	r2, [r7, #0]
 8015938:	4904      	ldr	r1, [pc, #16]	; (801594c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801593a:	4805      	ldr	r0, [pc, #20]	; (8015950 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801593c:	f7ff fd8f 	bl	801545e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015940:	4b02      	ldr	r3, [pc, #8]	; (801594c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8015942:	4618      	mov	r0, r3
 8015944:	3708      	adds	r7, #8
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
 801594a:	bf00      	nop
 801594c:	20002b80 	.word	0x20002b80
 8015950:	0801ac94 	.word	0x0801ac94

08015954 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b084      	sub	sp, #16
 8015958:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801595a:	4b0f      	ldr	r3, [pc, #60]	; (8015998 <Get_SerialNum+0x44>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015960:	4b0e      	ldr	r3, [pc, #56]	; (801599c <Get_SerialNum+0x48>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015966:	4b0e      	ldr	r3, [pc, #56]	; (80159a0 <Get_SerialNum+0x4c>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801596c:	68fa      	ldr	r2, [r7, #12]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	4413      	add	r3, r2
 8015972:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d009      	beq.n	801598e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801597a:	2208      	movs	r2, #8
 801597c:	4909      	ldr	r1, [pc, #36]	; (80159a4 <Get_SerialNum+0x50>)
 801597e:	68f8      	ldr	r0, [r7, #12]
 8015980:	f000 f814 	bl	80159ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015984:	2204      	movs	r2, #4
 8015986:	4908      	ldr	r1, [pc, #32]	; (80159a8 <Get_SerialNum+0x54>)
 8015988:	68b8      	ldr	r0, [r7, #8]
 801598a:	f000 f80f 	bl	80159ac <IntToUnicode>
  }
}
 801598e:	bf00      	nop
 8015990:	3710      	adds	r7, #16
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}
 8015996:	bf00      	nop
 8015998:	1fff7590 	.word	0x1fff7590
 801599c:	1fff7594 	.word	0x1fff7594
 80159a0:	1fff7598 	.word	0x1fff7598
 80159a4:	2000035e 	.word	0x2000035e
 80159a8:	2000036e 	.word	0x2000036e

080159ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80159ac:	b480      	push	{r7}
 80159ae:	b087      	sub	sp, #28
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	60f8      	str	r0, [r7, #12]
 80159b4:	60b9      	str	r1, [r7, #8]
 80159b6:	4613      	mov	r3, r2
 80159b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80159ba:	2300      	movs	r3, #0
 80159bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80159be:	2300      	movs	r3, #0
 80159c0:	75fb      	strb	r3, [r7, #23]
 80159c2:	e027      	b.n	8015a14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	0f1b      	lsrs	r3, r3, #28
 80159c8:	2b09      	cmp	r3, #9
 80159ca:	d80b      	bhi.n	80159e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	0f1b      	lsrs	r3, r3, #28
 80159d0:	b2da      	uxtb	r2, r3
 80159d2:	7dfb      	ldrb	r3, [r7, #23]
 80159d4:	005b      	lsls	r3, r3, #1
 80159d6:	4619      	mov	r1, r3
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	440b      	add	r3, r1
 80159dc:	3230      	adds	r2, #48	; 0x30
 80159de:	b2d2      	uxtb	r2, r2
 80159e0:	701a      	strb	r2, [r3, #0]
 80159e2:	e00a      	b.n	80159fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	0f1b      	lsrs	r3, r3, #28
 80159e8:	b2da      	uxtb	r2, r3
 80159ea:	7dfb      	ldrb	r3, [r7, #23]
 80159ec:	005b      	lsls	r3, r3, #1
 80159ee:	4619      	mov	r1, r3
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	440b      	add	r3, r1
 80159f4:	3237      	adds	r2, #55	; 0x37
 80159f6:	b2d2      	uxtb	r2, r2
 80159f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	011b      	lsls	r3, r3, #4
 80159fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015a00:	7dfb      	ldrb	r3, [r7, #23]
 8015a02:	005b      	lsls	r3, r3, #1
 8015a04:	3301      	adds	r3, #1
 8015a06:	68ba      	ldr	r2, [r7, #8]
 8015a08:	4413      	add	r3, r2
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015a0e:	7dfb      	ldrb	r3, [r7, #23]
 8015a10:	3301      	adds	r3, #1
 8015a12:	75fb      	strb	r3, [r7, #23]
 8015a14:	7dfa      	ldrb	r2, [r7, #23]
 8015a16:	79fb      	ldrb	r3, [r7, #7]
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d3d3      	bcc.n	80159c4 <IntToUnicode+0x18>
  }
}
 8015a1c:	bf00      	nop
 8015a1e:	bf00      	nop
 8015a20:	371c      	adds	r7, #28
 8015a22:	46bd      	mov	sp, r7
 8015a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a28:	4770      	bx	lr
	...

08015a2c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b094      	sub	sp, #80	; 0x50
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015a34:	f107 030c 	add.w	r3, r7, #12
 8015a38:	2244      	movs	r2, #68	; 0x44
 8015a3a:	2100      	movs	r1, #0
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f001 fa94 	bl	8016f6a <memset>
  if(pcdHandle->Instance==USB)
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	4a15      	ldr	r2, [pc, #84]	; (8015a9c <HAL_PCD_MspInit+0x70>)
 8015a48:	4293      	cmp	r3, r2
 8015a4a:	d122      	bne.n	8015a92 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015a50:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015a52:	2300      	movs	r3, #0
 8015a54:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015a56:	f107 030c 	add.w	r3, r7, #12
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7f6 fc1e 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 8015a60:	4603      	mov	r3, r0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d001      	beq.n	8015a6a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8015a66:	f7ee fb8f 	bl	8004188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015a6a:	4b0d      	ldr	r3, [pc, #52]	; (8015aa0 <HAL_PCD_MspInit+0x74>)
 8015a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a6e:	4a0c      	ldr	r2, [pc, #48]	; (8015aa0 <HAL_PCD_MspInit+0x74>)
 8015a70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015a74:	6593      	str	r3, [r2, #88]	; 0x58
 8015a76:	4b0a      	ldr	r3, [pc, #40]	; (8015aa0 <HAL_PCD_MspInit+0x74>)
 8015a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a7e:	60bb      	str	r3, [r7, #8]
 8015a80:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8015a82:	2200      	movs	r2, #0
 8015a84:	2100      	movs	r1, #0
 8015a86:	2014      	movs	r0, #20
 8015a88:	f7f2 fe65 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015a8c:	2014      	movs	r0, #20
 8015a8e:	f7f2 fe7c 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015a92:	bf00      	nop
 8015a94:	3750      	adds	r7, #80	; 0x50
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}
 8015a9a:	bf00      	nop
 8015a9c:	40005c00 	.word	0x40005c00
 8015aa0:	40021000 	.word	0x40021000

08015aa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b082      	sub	sp, #8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015ab8:	4619      	mov	r1, r3
 8015aba:	4610      	mov	r0, r2
 8015abc:	f7fe fd32 	bl	8014524 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015ac0:	bf00      	nop
 8015ac2:	3708      	adds	r7, #8
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}

08015ac8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	460b      	mov	r3, r1
 8015ad2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015ada:	78fa      	ldrb	r2, [r7, #3]
 8015adc:	6879      	ldr	r1, [r7, #4]
 8015ade:	4613      	mov	r3, r2
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	4413      	add	r3, r2
 8015ae4:	00db      	lsls	r3, r3, #3
 8015ae6:	440b      	add	r3, r1
 8015ae8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015aec:	681a      	ldr	r2, [r3, #0]
 8015aee:	78fb      	ldrb	r3, [r7, #3]
 8015af0:	4619      	mov	r1, r3
 8015af2:	f7fe fd6c 	bl	80145ce <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015af6:	bf00      	nop
 8015af8:	3708      	adds	r7, #8
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}

08015afe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015afe:	b580      	push	{r7, lr}
 8015b00:	b082      	sub	sp, #8
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	6078      	str	r0, [r7, #4]
 8015b06:	460b      	mov	r3, r1
 8015b08:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015b10:	78fa      	ldrb	r2, [r7, #3]
 8015b12:	6879      	ldr	r1, [r7, #4]
 8015b14:	4613      	mov	r3, r2
 8015b16:	009b      	lsls	r3, r3, #2
 8015b18:	4413      	add	r3, r2
 8015b1a:	00db      	lsls	r3, r3, #3
 8015b1c:	440b      	add	r3, r1
 8015b1e:	3324      	adds	r3, #36	; 0x24
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	78fb      	ldrb	r3, [r7, #3]
 8015b24:	4619      	mov	r1, r3
 8015b26:	f7fe fdb5 	bl	8014694 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8015b2a:	bf00      	nop
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}

08015b32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b32:	b580      	push	{r7, lr}
 8015b34:	b082      	sub	sp, #8
 8015b36:	af00      	add	r7, sp, #0
 8015b38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015b40:	4618      	mov	r0, r3
 8015b42:	f7fe fec9 	bl	80148d8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015b46:	bf00      	nop
 8015b48:	3708      	adds	r7, #8
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}

08015b4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b4e:	b580      	push	{r7, lr}
 8015b50:	b084      	sub	sp, #16
 8015b52:	af00      	add	r7, sp, #0
 8015b54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015b56:	2301      	movs	r3, #1
 8015b58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	795b      	ldrb	r3, [r3, #5]
 8015b5e:	2b02      	cmp	r3, #2
 8015b60:	d001      	beq.n	8015b66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015b62:	f7ee fb11 	bl	8004188 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015b6c:	7bfa      	ldrb	r2, [r7, #15]
 8015b6e:	4611      	mov	r1, r2
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7fe fe73 	bl	801485c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f7fe fe1f 	bl	80147c0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015b82:	bf00      	nop
 8015b84:	3710      	adds	r7, #16
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}
	...

08015b8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7fe fe6e 	bl	801487c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	7a5b      	ldrb	r3, [r3, #9]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d005      	beq.n	8015bb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ba8:	4b04      	ldr	r3, [pc, #16]	; (8015bbc <HAL_PCD_SuspendCallback+0x30>)
 8015baa:	691b      	ldr	r3, [r3, #16]
 8015bac:	4a03      	ldr	r2, [pc, #12]	; (8015bbc <HAL_PCD_SuspendCallback+0x30>)
 8015bae:	f043 0306 	orr.w	r3, r3, #6
 8015bb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015bb4:	bf00      	nop
 8015bb6:	3708      	adds	r7, #8
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd80      	pop	{r7, pc}
 8015bbc:	e000ed00 	.word	0xe000ed00

08015bc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b082      	sub	sp, #8
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	7a5b      	ldrb	r3, [r3, #9]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d007      	beq.n	8015be0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015bd0:	4b08      	ldr	r3, [pc, #32]	; (8015bf4 <HAL_PCD_ResumeCallback+0x34>)
 8015bd2:	691b      	ldr	r3, [r3, #16]
 8015bd4:	4a07      	ldr	r2, [pc, #28]	; (8015bf4 <HAL_PCD_ResumeCallback+0x34>)
 8015bd6:	f023 0306 	bic.w	r3, r3, #6
 8015bda:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015bdc:	f000 f9f8 	bl	8015fd0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7fe fe5e 	bl	80148a8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8015bec:	bf00      	nop
 8015bee:	3708      	adds	r7, #8
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}
 8015bf4:	e000ed00 	.word	0xe000ed00

08015bf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b082      	sub	sp, #8
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8015c00:	4a2b      	ldr	r2, [pc, #172]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	4a29      	ldr	r2, [pc, #164]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8015c10:	4b27      	ldr	r3, [pc, #156]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c12:	4a28      	ldr	r2, [pc, #160]	; (8015cb4 <USBD_LL_Init+0xbc>)
 8015c14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015c16:	4b26      	ldr	r3, [pc, #152]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c18:	2208      	movs	r2, #8
 8015c1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015c1c:	4b24      	ldr	r3, [pc, #144]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c1e:	2202      	movs	r2, #2
 8015c20:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015c22:	4b23      	ldr	r3, [pc, #140]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c24:	2202      	movs	r2, #2
 8015c26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015c28:	4b21      	ldr	r3, [pc, #132]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015c2e:	4b20      	ldr	r3, [pc, #128]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c30:	2200      	movs	r2, #0
 8015c32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015c34:	4b1e      	ldr	r3, [pc, #120]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c36:	2200      	movs	r2, #0
 8015c38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015c3a:	4b1d      	ldr	r3, [pc, #116]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015c40:	481b      	ldr	r0, [pc, #108]	; (8015cb0 <USBD_LL_Init+0xb8>)
 8015c42:	f7f4 f815 	bl	8009c70 <HAL_PCD_Init>
 8015c46:	4603      	mov	r3, r0
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d001      	beq.n	8015c50 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8015c4c:	f7ee fa9c 	bl	8004188 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c56:	2318      	movs	r3, #24
 8015c58:	2200      	movs	r2, #0
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	f7f5 fccf 	bl	800b5fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c66:	2358      	movs	r3, #88	; 0x58
 8015c68:	2200      	movs	r2, #0
 8015c6a:	2180      	movs	r1, #128	; 0x80
 8015c6c:	f7f5 fcc7 	bl	800b5fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c76:	23c0      	movs	r3, #192	; 0xc0
 8015c78:	2200      	movs	r2, #0
 8015c7a:	2181      	movs	r1, #129	; 0x81
 8015c7c:	f7f5 fcbf 	bl	800b5fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	2101      	movs	r1, #1
 8015c8e:	f7f5 fcb6 	bl	800b5fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	2182      	movs	r1, #130	; 0x82
 8015ca0:	f7f5 fcad 	bl	800b5fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015ca4:	2300      	movs	r3, #0
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3708      	adds	r7, #8
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}
 8015cae:	bf00      	nop
 8015cb0:	20002d80 	.word	0x20002d80
 8015cb4:	40005c00 	.word	0x40005c00

08015cb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b084      	sub	sp, #16
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7f4 f89c 	bl	8009e0c <HAL_PCD_Start>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cd8:	7bfb      	ldrb	r3, [r7, #15]
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f000 f97e 	bl	8015fdc <USBD_Get_USB_Status>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	3710      	adds	r7, #16
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bd80      	pop	{r7, pc}

08015cee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015cee:	b580      	push	{r7, lr}
 8015cf0:	b084      	sub	sp, #16
 8015cf2:	af00      	add	r7, sp, #0
 8015cf4:	6078      	str	r0, [r7, #4]
 8015cf6:	4608      	mov	r0, r1
 8015cf8:	4611      	mov	r1, r2
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	70fb      	strb	r3, [r7, #3]
 8015d00:	460b      	mov	r3, r1
 8015d02:	70bb      	strb	r3, [r7, #2]
 8015d04:	4613      	mov	r3, r2
 8015d06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d16:	78bb      	ldrb	r3, [r7, #2]
 8015d18:	883a      	ldrh	r2, [r7, #0]
 8015d1a:	78f9      	ldrb	r1, [r7, #3]
 8015d1c:	f7f4 f9e3 	bl	800a0e6 <HAL_PCD_EP_Open>
 8015d20:	4603      	mov	r3, r0
 8015d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d24:	7bfb      	ldrb	r3, [r7, #15]
 8015d26:	4618      	mov	r0, r3
 8015d28:	f000 f958 	bl	8015fdc <USBD_Get_USB_Status>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3710      	adds	r7, #16
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}

08015d3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d3a:	b580      	push	{r7, lr}
 8015d3c:	b084      	sub	sp, #16
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	6078      	str	r0, [r7, #4]
 8015d42:	460b      	mov	r3, r1
 8015d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d46:	2300      	movs	r3, #0
 8015d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d54:	78fa      	ldrb	r2, [r7, #3]
 8015d56:	4611      	mov	r1, r2
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7f4 fa21 	bl	800a1a0 <HAL_PCD_EP_Close>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d62:	7bfb      	ldrb	r3, [r7, #15]
 8015d64:	4618      	mov	r0, r3
 8015d66:	f000 f939 	bl	8015fdc <USBD_Get_USB_Status>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3710      	adds	r7, #16
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}

08015d78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b084      	sub	sp, #16
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	460b      	mov	r3, r1
 8015d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d84:	2300      	movs	r3, #0
 8015d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d92:	78fa      	ldrb	r2, [r7, #3]
 8015d94:	4611      	mov	r1, r2
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7f4 faca 	bl	800a330 <HAL_PCD_EP_SetStall>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015da0:	7bfb      	ldrb	r3, [r7, #15]
 8015da2:	4618      	mov	r0, r3
 8015da4:	f000 f91a 	bl	8015fdc <USBD_Get_USB_Status>
 8015da8:	4603      	mov	r3, r0
 8015daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dae:	4618      	mov	r0, r3
 8015db0:	3710      	adds	r7, #16
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}

08015db6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b084      	sub	sp, #16
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	6078      	str	r0, [r7, #4]
 8015dbe:	460b      	mov	r3, r1
 8015dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015dd0:	78fa      	ldrb	r2, [r7, #3]
 8015dd2:	4611      	mov	r1, r2
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7f4 fafd 	bl	800a3d4 <HAL_PCD_EP_ClrStall>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dde:	7bfb      	ldrb	r3, [r7, #15]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f000 f8fb 	bl	8015fdc <USBD_Get_USB_Status>
 8015de6:	4603      	mov	r3, r0
 8015de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dec:	4618      	mov	r0, r3
 8015dee:	3710      	adds	r7, #16
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}

08015df4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015df4:	b480      	push	{r7}
 8015df6:	b085      	sub	sp, #20
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
 8015dfc:	460b      	mov	r3, r1
 8015dfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	da0b      	bge.n	8015e28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015e10:	78fb      	ldrb	r3, [r7, #3]
 8015e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e16:	68f9      	ldr	r1, [r7, #12]
 8015e18:	4613      	mov	r3, r2
 8015e1a:	009b      	lsls	r3, r3, #2
 8015e1c:	4413      	add	r3, r2
 8015e1e:	00db      	lsls	r3, r3, #3
 8015e20:	440b      	add	r3, r1
 8015e22:	3312      	adds	r3, #18
 8015e24:	781b      	ldrb	r3, [r3, #0]
 8015e26:	e00b      	b.n	8015e40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015e28:	78fb      	ldrb	r3, [r7, #3]
 8015e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e2e:	68f9      	ldr	r1, [r7, #12]
 8015e30:	4613      	mov	r3, r2
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	4413      	add	r3, r2
 8015e36:	00db      	lsls	r3, r3, #3
 8015e38:	440b      	add	r3, r1
 8015e3a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8015e3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3714      	adds	r7, #20
 8015e44:	46bd      	mov	sp, r7
 8015e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4a:	4770      	bx	lr

08015e4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b084      	sub	sp, #16
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	460b      	mov	r3, r1
 8015e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e66:	78fa      	ldrb	r2, [r7, #3]
 8015e68:	4611      	mov	r1, r2
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7f4 f917 	bl	800a09e <HAL_PCD_SetAddress>
 8015e70:	4603      	mov	r3, r0
 8015e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e74:	7bfb      	ldrb	r3, [r7, #15]
 8015e76:	4618      	mov	r0, r3
 8015e78:	f000 f8b0 	bl	8015fdc <USBD_Get_USB_Status>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	3710      	adds	r7, #16
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}

08015e8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015e8a:	b580      	push	{r7, lr}
 8015e8c:	b086      	sub	sp, #24
 8015e8e:	af00      	add	r7, sp, #0
 8015e90:	60f8      	str	r0, [r7, #12]
 8015e92:	607a      	str	r2, [r7, #4]
 8015e94:	603b      	str	r3, [r7, #0]
 8015e96:	460b      	mov	r3, r1
 8015e98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ea8:	7af9      	ldrb	r1, [r7, #11]
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	f7f4 fa08 	bl	800a2c2 <HAL_PCD_EP_Transmit>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015eb6:	7dfb      	ldrb	r3, [r7, #23]
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f000 f88f 	bl	8015fdc <USBD_Get_USB_Status>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015ec2:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3718      	adds	r7, #24
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b086      	sub	sp, #24
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	60f8      	str	r0, [r7, #12]
 8015ed4:	607a      	str	r2, [r7, #4]
 8015ed6:	603b      	str	r3, [r7, #0]
 8015ed8:	460b      	mov	r3, r1
 8015eda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015edc:	2300      	movs	r3, #0
 8015ede:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015eea:	7af9      	ldrb	r1, [r7, #11]
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	687a      	ldr	r2, [r7, #4]
 8015ef0:	f7f4 f99e 	bl	800a230 <HAL_PCD_EP_Receive>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ef8:	7dfb      	ldrb	r3, [r7, #23]
 8015efa:	4618      	mov	r0, r3
 8015efc:	f000 f86e 	bl	8015fdc <USBD_Get_USB_Status>
 8015f00:	4603      	mov	r3, r0
 8015f02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015f04:	7dbb      	ldrb	r3, [r7, #22]
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	3718      	adds	r7, #24
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}

08015f0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f0e:	b580      	push	{r7, lr}
 8015f10:	b082      	sub	sp, #8
 8015f12:	af00      	add	r7, sp, #0
 8015f14:	6078      	str	r0, [r7, #4]
 8015f16:	460b      	mov	r3, r1
 8015f18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f20:	78fa      	ldrb	r2, [r7, #3]
 8015f22:	4611      	mov	r1, r2
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7f4 f9b4 	bl	800a292 <HAL_PCD_EP_GetRxCount>
 8015f2a:	4603      	mov	r3, r0
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3708      	adds	r7, #8
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd80      	pop	{r7, pc}

08015f34 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b082      	sub	sp, #8
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
 8015f3c:	460b      	mov	r3, r1
 8015f3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015f40:	78fb      	ldrb	r3, [r7, #3]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d002      	beq.n	8015f4c <HAL_PCDEx_LPM_Callback+0x18>
 8015f46:	2b01      	cmp	r3, #1
 8015f48:	d013      	beq.n	8015f72 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015f4a:	e023      	b.n	8015f94 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	7a5b      	ldrb	r3, [r3, #9]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d007      	beq.n	8015f64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015f54:	f000 f83c 	bl	8015fd0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015f58:	4b10      	ldr	r3, [pc, #64]	; (8015f9c <HAL_PCDEx_LPM_Callback+0x68>)
 8015f5a:	691b      	ldr	r3, [r3, #16]
 8015f5c:	4a0f      	ldr	r2, [pc, #60]	; (8015f9c <HAL_PCDEx_LPM_Callback+0x68>)
 8015f5e:	f023 0306 	bic.w	r3, r3, #6
 8015f62:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f7fe fc9c 	bl	80148a8 <USBD_LL_Resume>
    break;
 8015f70:	e010      	b.n	8015f94 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7fe fc7f 	bl	801487c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	7a5b      	ldrb	r3, [r3, #9]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d005      	beq.n	8015f92 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015f86:	4b05      	ldr	r3, [pc, #20]	; (8015f9c <HAL_PCDEx_LPM_Callback+0x68>)
 8015f88:	691b      	ldr	r3, [r3, #16]
 8015f8a:	4a04      	ldr	r2, [pc, #16]	; (8015f9c <HAL_PCDEx_LPM_Callback+0x68>)
 8015f8c:	f043 0306 	orr.w	r3, r3, #6
 8015f90:	6113      	str	r3, [r2, #16]
    break;
 8015f92:	bf00      	nop
}
 8015f94:	bf00      	nop
 8015f96:	3708      	adds	r7, #8
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}
 8015f9c:	e000ed00 	.word	0xe000ed00

08015fa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015fa0:	b480      	push	{r7}
 8015fa2:	b083      	sub	sp, #12
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015fa8:	4b03      	ldr	r3, [pc, #12]	; (8015fb8 <USBD_static_malloc+0x18>)
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	370c      	adds	r7, #12
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb4:	4770      	bx	lr
 8015fb6:	bf00      	nop
 8015fb8:	2000305c 	.word	0x2000305c

08015fbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]

}
 8015fc4:	bf00      	nop
 8015fc6:	370c      	adds	r7, #12
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fce:	4770      	bx	lr

08015fd0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015fd4:	f7ed fb2a 	bl	800362c <SystemClock_Config>
}
 8015fd8:	bf00      	nop
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015fdc:	b480      	push	{r7}
 8015fde:	b085      	sub	sp, #20
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015fea:	79fb      	ldrb	r3, [r7, #7]
 8015fec:	2b03      	cmp	r3, #3
 8015fee:	d817      	bhi.n	8016020 <USBD_Get_USB_Status+0x44>
 8015ff0:	a201      	add	r2, pc, #4	; (adr r2, 8015ff8 <USBD_Get_USB_Status+0x1c>)
 8015ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ff6:	bf00      	nop
 8015ff8:	08016009 	.word	0x08016009
 8015ffc:	0801600f 	.word	0x0801600f
 8016000:	08016015 	.word	0x08016015
 8016004:	0801601b 	.word	0x0801601b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016008:	2300      	movs	r3, #0
 801600a:	73fb      	strb	r3, [r7, #15]
    break;
 801600c:	e00b      	b.n	8016026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801600e:	2303      	movs	r3, #3
 8016010:	73fb      	strb	r3, [r7, #15]
    break;
 8016012:	e008      	b.n	8016026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016014:	2301      	movs	r3, #1
 8016016:	73fb      	strb	r3, [r7, #15]
    break;
 8016018:	e005      	b.n	8016026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801601a:	2303      	movs	r3, #3
 801601c:	73fb      	strb	r3, [r7, #15]
    break;
 801601e:	e002      	b.n	8016026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016020:	2303      	movs	r3, #3
 8016022:	73fb      	strb	r3, [r7, #15]
    break;
 8016024:	bf00      	nop
  }
  return usb_status;
 8016026:	7bfb      	ldrb	r3, [r7, #15]
}
 8016028:	4618      	mov	r0, r3
 801602a:	3714      	adds	r7, #20
 801602c:	46bd      	mov	sp, r7
 801602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016032:	4770      	bx	lr

08016034 <__cvt>:
 8016034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016038:	ec55 4b10 	vmov	r4, r5, d0
 801603c:	2d00      	cmp	r5, #0
 801603e:	460e      	mov	r6, r1
 8016040:	4619      	mov	r1, r3
 8016042:	462b      	mov	r3, r5
 8016044:	bfbb      	ittet	lt
 8016046:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801604a:	461d      	movlt	r5, r3
 801604c:	2300      	movge	r3, #0
 801604e:	232d      	movlt	r3, #45	; 0x2d
 8016050:	700b      	strb	r3, [r1, #0]
 8016052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016054:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016058:	4691      	mov	r9, r2
 801605a:	f023 0820 	bic.w	r8, r3, #32
 801605e:	bfbc      	itt	lt
 8016060:	4622      	movlt	r2, r4
 8016062:	4614      	movlt	r4, r2
 8016064:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016068:	d005      	beq.n	8016076 <__cvt+0x42>
 801606a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801606e:	d100      	bne.n	8016072 <__cvt+0x3e>
 8016070:	3601      	adds	r6, #1
 8016072:	2102      	movs	r1, #2
 8016074:	e000      	b.n	8016078 <__cvt+0x44>
 8016076:	2103      	movs	r1, #3
 8016078:	ab03      	add	r3, sp, #12
 801607a:	9301      	str	r3, [sp, #4]
 801607c:	ab02      	add	r3, sp, #8
 801607e:	9300      	str	r3, [sp, #0]
 8016080:	ec45 4b10 	vmov	d0, r4, r5
 8016084:	4653      	mov	r3, sl
 8016086:	4632      	mov	r2, r6
 8016088:	f001 f88e 	bl	80171a8 <_dtoa_r>
 801608c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016090:	4607      	mov	r7, r0
 8016092:	d102      	bne.n	801609a <__cvt+0x66>
 8016094:	f019 0f01 	tst.w	r9, #1
 8016098:	d022      	beq.n	80160e0 <__cvt+0xac>
 801609a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801609e:	eb07 0906 	add.w	r9, r7, r6
 80160a2:	d110      	bne.n	80160c6 <__cvt+0x92>
 80160a4:	783b      	ldrb	r3, [r7, #0]
 80160a6:	2b30      	cmp	r3, #48	; 0x30
 80160a8:	d10a      	bne.n	80160c0 <__cvt+0x8c>
 80160aa:	2200      	movs	r2, #0
 80160ac:	2300      	movs	r3, #0
 80160ae:	4620      	mov	r0, r4
 80160b0:	4629      	mov	r1, r5
 80160b2:	f7ea fd31 	bl	8000b18 <__aeabi_dcmpeq>
 80160b6:	b918      	cbnz	r0, 80160c0 <__cvt+0x8c>
 80160b8:	f1c6 0601 	rsb	r6, r6, #1
 80160bc:	f8ca 6000 	str.w	r6, [sl]
 80160c0:	f8da 3000 	ldr.w	r3, [sl]
 80160c4:	4499      	add	r9, r3
 80160c6:	2200      	movs	r2, #0
 80160c8:	2300      	movs	r3, #0
 80160ca:	4620      	mov	r0, r4
 80160cc:	4629      	mov	r1, r5
 80160ce:	f7ea fd23 	bl	8000b18 <__aeabi_dcmpeq>
 80160d2:	b108      	cbz	r0, 80160d8 <__cvt+0xa4>
 80160d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80160d8:	2230      	movs	r2, #48	; 0x30
 80160da:	9b03      	ldr	r3, [sp, #12]
 80160dc:	454b      	cmp	r3, r9
 80160de:	d307      	bcc.n	80160f0 <__cvt+0xbc>
 80160e0:	9b03      	ldr	r3, [sp, #12]
 80160e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160e4:	1bdb      	subs	r3, r3, r7
 80160e6:	4638      	mov	r0, r7
 80160e8:	6013      	str	r3, [r2, #0]
 80160ea:	b004      	add	sp, #16
 80160ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160f0:	1c59      	adds	r1, r3, #1
 80160f2:	9103      	str	r1, [sp, #12]
 80160f4:	701a      	strb	r2, [r3, #0]
 80160f6:	e7f0      	b.n	80160da <__cvt+0xa6>

080160f8 <__exponent>:
 80160f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80160fa:	4603      	mov	r3, r0
 80160fc:	2900      	cmp	r1, #0
 80160fe:	bfb8      	it	lt
 8016100:	4249      	neglt	r1, r1
 8016102:	f803 2b02 	strb.w	r2, [r3], #2
 8016106:	bfb4      	ite	lt
 8016108:	222d      	movlt	r2, #45	; 0x2d
 801610a:	222b      	movge	r2, #43	; 0x2b
 801610c:	2909      	cmp	r1, #9
 801610e:	7042      	strb	r2, [r0, #1]
 8016110:	dd2a      	ble.n	8016168 <__exponent+0x70>
 8016112:	f10d 0207 	add.w	r2, sp, #7
 8016116:	4617      	mov	r7, r2
 8016118:	260a      	movs	r6, #10
 801611a:	4694      	mov	ip, r2
 801611c:	fb91 f5f6 	sdiv	r5, r1, r6
 8016120:	fb06 1415 	mls	r4, r6, r5, r1
 8016124:	3430      	adds	r4, #48	; 0x30
 8016126:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801612a:	460c      	mov	r4, r1
 801612c:	2c63      	cmp	r4, #99	; 0x63
 801612e:	f102 32ff 	add.w	r2, r2, #4294967295
 8016132:	4629      	mov	r1, r5
 8016134:	dcf1      	bgt.n	801611a <__exponent+0x22>
 8016136:	3130      	adds	r1, #48	; 0x30
 8016138:	f1ac 0402 	sub.w	r4, ip, #2
 801613c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016140:	1c41      	adds	r1, r0, #1
 8016142:	4622      	mov	r2, r4
 8016144:	42ba      	cmp	r2, r7
 8016146:	d30a      	bcc.n	801615e <__exponent+0x66>
 8016148:	f10d 0209 	add.w	r2, sp, #9
 801614c:	eba2 020c 	sub.w	r2, r2, ip
 8016150:	42bc      	cmp	r4, r7
 8016152:	bf88      	it	hi
 8016154:	2200      	movhi	r2, #0
 8016156:	4413      	add	r3, r2
 8016158:	1a18      	subs	r0, r3, r0
 801615a:	b003      	add	sp, #12
 801615c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801615e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016162:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016166:	e7ed      	b.n	8016144 <__exponent+0x4c>
 8016168:	2330      	movs	r3, #48	; 0x30
 801616a:	3130      	adds	r1, #48	; 0x30
 801616c:	7083      	strb	r3, [r0, #2]
 801616e:	70c1      	strb	r1, [r0, #3]
 8016170:	1d03      	adds	r3, r0, #4
 8016172:	e7f1      	b.n	8016158 <__exponent+0x60>

08016174 <_printf_float>:
 8016174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016178:	ed2d 8b02 	vpush	{d8}
 801617c:	b08d      	sub	sp, #52	; 0x34
 801617e:	460c      	mov	r4, r1
 8016180:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016184:	4616      	mov	r6, r2
 8016186:	461f      	mov	r7, r3
 8016188:	4605      	mov	r5, r0
 801618a:	f000 fef7 	bl	8016f7c <_localeconv_r>
 801618e:	f8d0 a000 	ldr.w	sl, [r0]
 8016192:	4650      	mov	r0, sl
 8016194:	f7ea f894 	bl	80002c0 <strlen>
 8016198:	2300      	movs	r3, #0
 801619a:	930a      	str	r3, [sp, #40]	; 0x28
 801619c:	6823      	ldr	r3, [r4, #0]
 801619e:	9305      	str	r3, [sp, #20]
 80161a0:	f8d8 3000 	ldr.w	r3, [r8]
 80161a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80161a8:	3307      	adds	r3, #7
 80161aa:	f023 0307 	bic.w	r3, r3, #7
 80161ae:	f103 0208 	add.w	r2, r3, #8
 80161b2:	f8c8 2000 	str.w	r2, [r8]
 80161b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80161ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80161be:	9307      	str	r3, [sp, #28]
 80161c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80161c4:	ee08 0a10 	vmov	s16, r0
 80161c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80161cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161d0:	4b9e      	ldr	r3, [pc, #632]	; (801644c <_printf_float+0x2d8>)
 80161d2:	f04f 32ff 	mov.w	r2, #4294967295
 80161d6:	f7ea fcd1 	bl	8000b7c <__aeabi_dcmpun>
 80161da:	bb88      	cbnz	r0, 8016240 <_printf_float+0xcc>
 80161dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161e0:	4b9a      	ldr	r3, [pc, #616]	; (801644c <_printf_float+0x2d8>)
 80161e2:	f04f 32ff 	mov.w	r2, #4294967295
 80161e6:	f7ea fcab 	bl	8000b40 <__aeabi_dcmple>
 80161ea:	bb48      	cbnz	r0, 8016240 <_printf_float+0xcc>
 80161ec:	2200      	movs	r2, #0
 80161ee:	2300      	movs	r3, #0
 80161f0:	4640      	mov	r0, r8
 80161f2:	4649      	mov	r1, r9
 80161f4:	f7ea fc9a 	bl	8000b2c <__aeabi_dcmplt>
 80161f8:	b110      	cbz	r0, 8016200 <_printf_float+0x8c>
 80161fa:	232d      	movs	r3, #45	; 0x2d
 80161fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016200:	4a93      	ldr	r2, [pc, #588]	; (8016450 <_printf_float+0x2dc>)
 8016202:	4b94      	ldr	r3, [pc, #592]	; (8016454 <_printf_float+0x2e0>)
 8016204:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016208:	bf94      	ite	ls
 801620a:	4690      	movls	r8, r2
 801620c:	4698      	movhi	r8, r3
 801620e:	2303      	movs	r3, #3
 8016210:	6123      	str	r3, [r4, #16]
 8016212:	9b05      	ldr	r3, [sp, #20]
 8016214:	f023 0304 	bic.w	r3, r3, #4
 8016218:	6023      	str	r3, [r4, #0]
 801621a:	f04f 0900 	mov.w	r9, #0
 801621e:	9700      	str	r7, [sp, #0]
 8016220:	4633      	mov	r3, r6
 8016222:	aa0b      	add	r2, sp, #44	; 0x2c
 8016224:	4621      	mov	r1, r4
 8016226:	4628      	mov	r0, r5
 8016228:	f000 f9da 	bl	80165e0 <_printf_common>
 801622c:	3001      	adds	r0, #1
 801622e:	f040 8090 	bne.w	8016352 <_printf_float+0x1de>
 8016232:	f04f 30ff 	mov.w	r0, #4294967295
 8016236:	b00d      	add	sp, #52	; 0x34
 8016238:	ecbd 8b02 	vpop	{d8}
 801623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016240:	4642      	mov	r2, r8
 8016242:	464b      	mov	r3, r9
 8016244:	4640      	mov	r0, r8
 8016246:	4649      	mov	r1, r9
 8016248:	f7ea fc98 	bl	8000b7c <__aeabi_dcmpun>
 801624c:	b140      	cbz	r0, 8016260 <_printf_float+0xec>
 801624e:	464b      	mov	r3, r9
 8016250:	2b00      	cmp	r3, #0
 8016252:	bfbc      	itt	lt
 8016254:	232d      	movlt	r3, #45	; 0x2d
 8016256:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801625a:	4a7f      	ldr	r2, [pc, #508]	; (8016458 <_printf_float+0x2e4>)
 801625c:	4b7f      	ldr	r3, [pc, #508]	; (801645c <_printf_float+0x2e8>)
 801625e:	e7d1      	b.n	8016204 <_printf_float+0x90>
 8016260:	6863      	ldr	r3, [r4, #4]
 8016262:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016266:	9206      	str	r2, [sp, #24]
 8016268:	1c5a      	adds	r2, r3, #1
 801626a:	d13f      	bne.n	80162ec <_printf_float+0x178>
 801626c:	2306      	movs	r3, #6
 801626e:	6063      	str	r3, [r4, #4]
 8016270:	9b05      	ldr	r3, [sp, #20]
 8016272:	6861      	ldr	r1, [r4, #4]
 8016274:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016278:	2300      	movs	r3, #0
 801627a:	9303      	str	r3, [sp, #12]
 801627c:	ab0a      	add	r3, sp, #40	; 0x28
 801627e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016282:	ab09      	add	r3, sp, #36	; 0x24
 8016284:	ec49 8b10 	vmov	d0, r8, r9
 8016288:	9300      	str	r3, [sp, #0]
 801628a:	6022      	str	r2, [r4, #0]
 801628c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016290:	4628      	mov	r0, r5
 8016292:	f7ff fecf 	bl	8016034 <__cvt>
 8016296:	9b06      	ldr	r3, [sp, #24]
 8016298:	9909      	ldr	r1, [sp, #36]	; 0x24
 801629a:	2b47      	cmp	r3, #71	; 0x47
 801629c:	4680      	mov	r8, r0
 801629e:	d108      	bne.n	80162b2 <_printf_float+0x13e>
 80162a0:	1cc8      	adds	r0, r1, #3
 80162a2:	db02      	blt.n	80162aa <_printf_float+0x136>
 80162a4:	6863      	ldr	r3, [r4, #4]
 80162a6:	4299      	cmp	r1, r3
 80162a8:	dd41      	ble.n	801632e <_printf_float+0x1ba>
 80162aa:	f1ab 0302 	sub.w	r3, fp, #2
 80162ae:	fa5f fb83 	uxtb.w	fp, r3
 80162b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80162b6:	d820      	bhi.n	80162fa <_printf_float+0x186>
 80162b8:	3901      	subs	r1, #1
 80162ba:	465a      	mov	r2, fp
 80162bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80162c0:	9109      	str	r1, [sp, #36]	; 0x24
 80162c2:	f7ff ff19 	bl	80160f8 <__exponent>
 80162c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162c8:	1813      	adds	r3, r2, r0
 80162ca:	2a01      	cmp	r2, #1
 80162cc:	4681      	mov	r9, r0
 80162ce:	6123      	str	r3, [r4, #16]
 80162d0:	dc02      	bgt.n	80162d8 <_printf_float+0x164>
 80162d2:	6822      	ldr	r2, [r4, #0]
 80162d4:	07d2      	lsls	r2, r2, #31
 80162d6:	d501      	bpl.n	80162dc <_printf_float+0x168>
 80162d8:	3301      	adds	r3, #1
 80162da:	6123      	str	r3, [r4, #16]
 80162dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d09c      	beq.n	801621e <_printf_float+0xaa>
 80162e4:	232d      	movs	r3, #45	; 0x2d
 80162e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162ea:	e798      	b.n	801621e <_printf_float+0xaa>
 80162ec:	9a06      	ldr	r2, [sp, #24]
 80162ee:	2a47      	cmp	r2, #71	; 0x47
 80162f0:	d1be      	bne.n	8016270 <_printf_float+0xfc>
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d1bc      	bne.n	8016270 <_printf_float+0xfc>
 80162f6:	2301      	movs	r3, #1
 80162f8:	e7b9      	b.n	801626e <_printf_float+0xfa>
 80162fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80162fe:	d118      	bne.n	8016332 <_printf_float+0x1be>
 8016300:	2900      	cmp	r1, #0
 8016302:	6863      	ldr	r3, [r4, #4]
 8016304:	dd0b      	ble.n	801631e <_printf_float+0x1aa>
 8016306:	6121      	str	r1, [r4, #16]
 8016308:	b913      	cbnz	r3, 8016310 <_printf_float+0x19c>
 801630a:	6822      	ldr	r2, [r4, #0]
 801630c:	07d0      	lsls	r0, r2, #31
 801630e:	d502      	bpl.n	8016316 <_printf_float+0x1a2>
 8016310:	3301      	adds	r3, #1
 8016312:	440b      	add	r3, r1
 8016314:	6123      	str	r3, [r4, #16]
 8016316:	65a1      	str	r1, [r4, #88]	; 0x58
 8016318:	f04f 0900 	mov.w	r9, #0
 801631c:	e7de      	b.n	80162dc <_printf_float+0x168>
 801631e:	b913      	cbnz	r3, 8016326 <_printf_float+0x1b2>
 8016320:	6822      	ldr	r2, [r4, #0]
 8016322:	07d2      	lsls	r2, r2, #31
 8016324:	d501      	bpl.n	801632a <_printf_float+0x1b6>
 8016326:	3302      	adds	r3, #2
 8016328:	e7f4      	b.n	8016314 <_printf_float+0x1a0>
 801632a:	2301      	movs	r3, #1
 801632c:	e7f2      	b.n	8016314 <_printf_float+0x1a0>
 801632e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016334:	4299      	cmp	r1, r3
 8016336:	db05      	blt.n	8016344 <_printf_float+0x1d0>
 8016338:	6823      	ldr	r3, [r4, #0]
 801633a:	6121      	str	r1, [r4, #16]
 801633c:	07d8      	lsls	r0, r3, #31
 801633e:	d5ea      	bpl.n	8016316 <_printf_float+0x1a2>
 8016340:	1c4b      	adds	r3, r1, #1
 8016342:	e7e7      	b.n	8016314 <_printf_float+0x1a0>
 8016344:	2900      	cmp	r1, #0
 8016346:	bfd4      	ite	le
 8016348:	f1c1 0202 	rsble	r2, r1, #2
 801634c:	2201      	movgt	r2, #1
 801634e:	4413      	add	r3, r2
 8016350:	e7e0      	b.n	8016314 <_printf_float+0x1a0>
 8016352:	6823      	ldr	r3, [r4, #0]
 8016354:	055a      	lsls	r2, r3, #21
 8016356:	d407      	bmi.n	8016368 <_printf_float+0x1f4>
 8016358:	6923      	ldr	r3, [r4, #16]
 801635a:	4642      	mov	r2, r8
 801635c:	4631      	mov	r1, r6
 801635e:	4628      	mov	r0, r5
 8016360:	47b8      	blx	r7
 8016362:	3001      	adds	r0, #1
 8016364:	d12c      	bne.n	80163c0 <_printf_float+0x24c>
 8016366:	e764      	b.n	8016232 <_printf_float+0xbe>
 8016368:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801636c:	f240 80e0 	bls.w	8016530 <_printf_float+0x3bc>
 8016370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016374:	2200      	movs	r2, #0
 8016376:	2300      	movs	r3, #0
 8016378:	f7ea fbce 	bl	8000b18 <__aeabi_dcmpeq>
 801637c:	2800      	cmp	r0, #0
 801637e:	d034      	beq.n	80163ea <_printf_float+0x276>
 8016380:	4a37      	ldr	r2, [pc, #220]	; (8016460 <_printf_float+0x2ec>)
 8016382:	2301      	movs	r3, #1
 8016384:	4631      	mov	r1, r6
 8016386:	4628      	mov	r0, r5
 8016388:	47b8      	blx	r7
 801638a:	3001      	adds	r0, #1
 801638c:	f43f af51 	beq.w	8016232 <_printf_float+0xbe>
 8016390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016394:	429a      	cmp	r2, r3
 8016396:	db02      	blt.n	801639e <_printf_float+0x22a>
 8016398:	6823      	ldr	r3, [r4, #0]
 801639a:	07d8      	lsls	r0, r3, #31
 801639c:	d510      	bpl.n	80163c0 <_printf_float+0x24c>
 801639e:	ee18 3a10 	vmov	r3, s16
 80163a2:	4652      	mov	r2, sl
 80163a4:	4631      	mov	r1, r6
 80163a6:	4628      	mov	r0, r5
 80163a8:	47b8      	blx	r7
 80163aa:	3001      	adds	r0, #1
 80163ac:	f43f af41 	beq.w	8016232 <_printf_float+0xbe>
 80163b0:	f04f 0800 	mov.w	r8, #0
 80163b4:	f104 091a 	add.w	r9, r4, #26
 80163b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163ba:	3b01      	subs	r3, #1
 80163bc:	4543      	cmp	r3, r8
 80163be:	dc09      	bgt.n	80163d4 <_printf_float+0x260>
 80163c0:	6823      	ldr	r3, [r4, #0]
 80163c2:	079b      	lsls	r3, r3, #30
 80163c4:	f100 8107 	bmi.w	80165d6 <_printf_float+0x462>
 80163c8:	68e0      	ldr	r0, [r4, #12]
 80163ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163cc:	4298      	cmp	r0, r3
 80163ce:	bfb8      	it	lt
 80163d0:	4618      	movlt	r0, r3
 80163d2:	e730      	b.n	8016236 <_printf_float+0xc2>
 80163d4:	2301      	movs	r3, #1
 80163d6:	464a      	mov	r2, r9
 80163d8:	4631      	mov	r1, r6
 80163da:	4628      	mov	r0, r5
 80163dc:	47b8      	blx	r7
 80163de:	3001      	adds	r0, #1
 80163e0:	f43f af27 	beq.w	8016232 <_printf_float+0xbe>
 80163e4:	f108 0801 	add.w	r8, r8, #1
 80163e8:	e7e6      	b.n	80163b8 <_printf_float+0x244>
 80163ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	dc39      	bgt.n	8016464 <_printf_float+0x2f0>
 80163f0:	4a1b      	ldr	r2, [pc, #108]	; (8016460 <_printf_float+0x2ec>)
 80163f2:	2301      	movs	r3, #1
 80163f4:	4631      	mov	r1, r6
 80163f6:	4628      	mov	r0, r5
 80163f8:	47b8      	blx	r7
 80163fa:	3001      	adds	r0, #1
 80163fc:	f43f af19 	beq.w	8016232 <_printf_float+0xbe>
 8016400:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016404:	4313      	orrs	r3, r2
 8016406:	d102      	bne.n	801640e <_printf_float+0x29a>
 8016408:	6823      	ldr	r3, [r4, #0]
 801640a:	07d9      	lsls	r1, r3, #31
 801640c:	d5d8      	bpl.n	80163c0 <_printf_float+0x24c>
 801640e:	ee18 3a10 	vmov	r3, s16
 8016412:	4652      	mov	r2, sl
 8016414:	4631      	mov	r1, r6
 8016416:	4628      	mov	r0, r5
 8016418:	47b8      	blx	r7
 801641a:	3001      	adds	r0, #1
 801641c:	f43f af09 	beq.w	8016232 <_printf_float+0xbe>
 8016420:	f04f 0900 	mov.w	r9, #0
 8016424:	f104 0a1a 	add.w	sl, r4, #26
 8016428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801642a:	425b      	negs	r3, r3
 801642c:	454b      	cmp	r3, r9
 801642e:	dc01      	bgt.n	8016434 <_printf_float+0x2c0>
 8016430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016432:	e792      	b.n	801635a <_printf_float+0x1e6>
 8016434:	2301      	movs	r3, #1
 8016436:	4652      	mov	r2, sl
 8016438:	4631      	mov	r1, r6
 801643a:	4628      	mov	r0, r5
 801643c:	47b8      	blx	r7
 801643e:	3001      	adds	r0, #1
 8016440:	f43f aef7 	beq.w	8016232 <_printf_float+0xbe>
 8016444:	f109 0901 	add.w	r9, r9, #1
 8016448:	e7ee      	b.n	8016428 <_printf_float+0x2b4>
 801644a:	bf00      	nop
 801644c:	7fefffff 	.word	0x7fefffff
 8016450:	0801d460 	.word	0x0801d460
 8016454:	0801d464 	.word	0x0801d464
 8016458:	0801d468 	.word	0x0801d468
 801645c:	0801d46c 	.word	0x0801d46c
 8016460:	0801d470 	.word	0x0801d470
 8016464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016468:	429a      	cmp	r2, r3
 801646a:	bfa8      	it	ge
 801646c:	461a      	movge	r2, r3
 801646e:	2a00      	cmp	r2, #0
 8016470:	4691      	mov	r9, r2
 8016472:	dc37      	bgt.n	80164e4 <_printf_float+0x370>
 8016474:	f04f 0b00 	mov.w	fp, #0
 8016478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801647c:	f104 021a 	add.w	r2, r4, #26
 8016480:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016482:	9305      	str	r3, [sp, #20]
 8016484:	eba3 0309 	sub.w	r3, r3, r9
 8016488:	455b      	cmp	r3, fp
 801648a:	dc33      	bgt.n	80164f4 <_printf_float+0x380>
 801648c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016490:	429a      	cmp	r2, r3
 8016492:	db3b      	blt.n	801650c <_printf_float+0x398>
 8016494:	6823      	ldr	r3, [r4, #0]
 8016496:	07da      	lsls	r2, r3, #31
 8016498:	d438      	bmi.n	801650c <_printf_float+0x398>
 801649a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801649e:	eba2 0903 	sub.w	r9, r2, r3
 80164a2:	9b05      	ldr	r3, [sp, #20]
 80164a4:	1ad2      	subs	r2, r2, r3
 80164a6:	4591      	cmp	r9, r2
 80164a8:	bfa8      	it	ge
 80164aa:	4691      	movge	r9, r2
 80164ac:	f1b9 0f00 	cmp.w	r9, #0
 80164b0:	dc35      	bgt.n	801651e <_printf_float+0x3aa>
 80164b2:	f04f 0800 	mov.w	r8, #0
 80164b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80164ba:	f104 0a1a 	add.w	sl, r4, #26
 80164be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164c2:	1a9b      	subs	r3, r3, r2
 80164c4:	eba3 0309 	sub.w	r3, r3, r9
 80164c8:	4543      	cmp	r3, r8
 80164ca:	f77f af79 	ble.w	80163c0 <_printf_float+0x24c>
 80164ce:	2301      	movs	r3, #1
 80164d0:	4652      	mov	r2, sl
 80164d2:	4631      	mov	r1, r6
 80164d4:	4628      	mov	r0, r5
 80164d6:	47b8      	blx	r7
 80164d8:	3001      	adds	r0, #1
 80164da:	f43f aeaa 	beq.w	8016232 <_printf_float+0xbe>
 80164de:	f108 0801 	add.w	r8, r8, #1
 80164e2:	e7ec      	b.n	80164be <_printf_float+0x34a>
 80164e4:	4613      	mov	r3, r2
 80164e6:	4631      	mov	r1, r6
 80164e8:	4642      	mov	r2, r8
 80164ea:	4628      	mov	r0, r5
 80164ec:	47b8      	blx	r7
 80164ee:	3001      	adds	r0, #1
 80164f0:	d1c0      	bne.n	8016474 <_printf_float+0x300>
 80164f2:	e69e      	b.n	8016232 <_printf_float+0xbe>
 80164f4:	2301      	movs	r3, #1
 80164f6:	4631      	mov	r1, r6
 80164f8:	4628      	mov	r0, r5
 80164fa:	9205      	str	r2, [sp, #20]
 80164fc:	47b8      	blx	r7
 80164fe:	3001      	adds	r0, #1
 8016500:	f43f ae97 	beq.w	8016232 <_printf_float+0xbe>
 8016504:	9a05      	ldr	r2, [sp, #20]
 8016506:	f10b 0b01 	add.w	fp, fp, #1
 801650a:	e7b9      	b.n	8016480 <_printf_float+0x30c>
 801650c:	ee18 3a10 	vmov	r3, s16
 8016510:	4652      	mov	r2, sl
 8016512:	4631      	mov	r1, r6
 8016514:	4628      	mov	r0, r5
 8016516:	47b8      	blx	r7
 8016518:	3001      	adds	r0, #1
 801651a:	d1be      	bne.n	801649a <_printf_float+0x326>
 801651c:	e689      	b.n	8016232 <_printf_float+0xbe>
 801651e:	9a05      	ldr	r2, [sp, #20]
 8016520:	464b      	mov	r3, r9
 8016522:	4442      	add	r2, r8
 8016524:	4631      	mov	r1, r6
 8016526:	4628      	mov	r0, r5
 8016528:	47b8      	blx	r7
 801652a:	3001      	adds	r0, #1
 801652c:	d1c1      	bne.n	80164b2 <_printf_float+0x33e>
 801652e:	e680      	b.n	8016232 <_printf_float+0xbe>
 8016530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016532:	2a01      	cmp	r2, #1
 8016534:	dc01      	bgt.n	801653a <_printf_float+0x3c6>
 8016536:	07db      	lsls	r3, r3, #31
 8016538:	d53a      	bpl.n	80165b0 <_printf_float+0x43c>
 801653a:	2301      	movs	r3, #1
 801653c:	4642      	mov	r2, r8
 801653e:	4631      	mov	r1, r6
 8016540:	4628      	mov	r0, r5
 8016542:	47b8      	blx	r7
 8016544:	3001      	adds	r0, #1
 8016546:	f43f ae74 	beq.w	8016232 <_printf_float+0xbe>
 801654a:	ee18 3a10 	vmov	r3, s16
 801654e:	4652      	mov	r2, sl
 8016550:	4631      	mov	r1, r6
 8016552:	4628      	mov	r0, r5
 8016554:	47b8      	blx	r7
 8016556:	3001      	adds	r0, #1
 8016558:	f43f ae6b 	beq.w	8016232 <_printf_float+0xbe>
 801655c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016560:	2200      	movs	r2, #0
 8016562:	2300      	movs	r3, #0
 8016564:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016568:	f7ea fad6 	bl	8000b18 <__aeabi_dcmpeq>
 801656c:	b9d8      	cbnz	r0, 80165a6 <_printf_float+0x432>
 801656e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016572:	f108 0201 	add.w	r2, r8, #1
 8016576:	4631      	mov	r1, r6
 8016578:	4628      	mov	r0, r5
 801657a:	47b8      	blx	r7
 801657c:	3001      	adds	r0, #1
 801657e:	d10e      	bne.n	801659e <_printf_float+0x42a>
 8016580:	e657      	b.n	8016232 <_printf_float+0xbe>
 8016582:	2301      	movs	r3, #1
 8016584:	4652      	mov	r2, sl
 8016586:	4631      	mov	r1, r6
 8016588:	4628      	mov	r0, r5
 801658a:	47b8      	blx	r7
 801658c:	3001      	adds	r0, #1
 801658e:	f43f ae50 	beq.w	8016232 <_printf_float+0xbe>
 8016592:	f108 0801 	add.w	r8, r8, #1
 8016596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016598:	3b01      	subs	r3, #1
 801659a:	4543      	cmp	r3, r8
 801659c:	dcf1      	bgt.n	8016582 <_printf_float+0x40e>
 801659e:	464b      	mov	r3, r9
 80165a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80165a4:	e6da      	b.n	801635c <_printf_float+0x1e8>
 80165a6:	f04f 0800 	mov.w	r8, #0
 80165aa:	f104 0a1a 	add.w	sl, r4, #26
 80165ae:	e7f2      	b.n	8016596 <_printf_float+0x422>
 80165b0:	2301      	movs	r3, #1
 80165b2:	4642      	mov	r2, r8
 80165b4:	e7df      	b.n	8016576 <_printf_float+0x402>
 80165b6:	2301      	movs	r3, #1
 80165b8:	464a      	mov	r2, r9
 80165ba:	4631      	mov	r1, r6
 80165bc:	4628      	mov	r0, r5
 80165be:	47b8      	blx	r7
 80165c0:	3001      	adds	r0, #1
 80165c2:	f43f ae36 	beq.w	8016232 <_printf_float+0xbe>
 80165c6:	f108 0801 	add.w	r8, r8, #1
 80165ca:	68e3      	ldr	r3, [r4, #12]
 80165cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165ce:	1a5b      	subs	r3, r3, r1
 80165d0:	4543      	cmp	r3, r8
 80165d2:	dcf0      	bgt.n	80165b6 <_printf_float+0x442>
 80165d4:	e6f8      	b.n	80163c8 <_printf_float+0x254>
 80165d6:	f04f 0800 	mov.w	r8, #0
 80165da:	f104 0919 	add.w	r9, r4, #25
 80165de:	e7f4      	b.n	80165ca <_printf_float+0x456>

080165e0 <_printf_common>:
 80165e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165e4:	4616      	mov	r6, r2
 80165e6:	4699      	mov	r9, r3
 80165e8:	688a      	ldr	r2, [r1, #8]
 80165ea:	690b      	ldr	r3, [r1, #16]
 80165ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165f0:	4293      	cmp	r3, r2
 80165f2:	bfb8      	it	lt
 80165f4:	4613      	movlt	r3, r2
 80165f6:	6033      	str	r3, [r6, #0]
 80165f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80165fc:	4607      	mov	r7, r0
 80165fe:	460c      	mov	r4, r1
 8016600:	b10a      	cbz	r2, 8016606 <_printf_common+0x26>
 8016602:	3301      	adds	r3, #1
 8016604:	6033      	str	r3, [r6, #0]
 8016606:	6823      	ldr	r3, [r4, #0]
 8016608:	0699      	lsls	r1, r3, #26
 801660a:	bf42      	ittt	mi
 801660c:	6833      	ldrmi	r3, [r6, #0]
 801660e:	3302      	addmi	r3, #2
 8016610:	6033      	strmi	r3, [r6, #0]
 8016612:	6825      	ldr	r5, [r4, #0]
 8016614:	f015 0506 	ands.w	r5, r5, #6
 8016618:	d106      	bne.n	8016628 <_printf_common+0x48>
 801661a:	f104 0a19 	add.w	sl, r4, #25
 801661e:	68e3      	ldr	r3, [r4, #12]
 8016620:	6832      	ldr	r2, [r6, #0]
 8016622:	1a9b      	subs	r3, r3, r2
 8016624:	42ab      	cmp	r3, r5
 8016626:	dc26      	bgt.n	8016676 <_printf_common+0x96>
 8016628:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801662c:	1e13      	subs	r3, r2, #0
 801662e:	6822      	ldr	r2, [r4, #0]
 8016630:	bf18      	it	ne
 8016632:	2301      	movne	r3, #1
 8016634:	0692      	lsls	r2, r2, #26
 8016636:	d42b      	bmi.n	8016690 <_printf_common+0xb0>
 8016638:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801663c:	4649      	mov	r1, r9
 801663e:	4638      	mov	r0, r7
 8016640:	47c0      	blx	r8
 8016642:	3001      	adds	r0, #1
 8016644:	d01e      	beq.n	8016684 <_printf_common+0xa4>
 8016646:	6823      	ldr	r3, [r4, #0]
 8016648:	6922      	ldr	r2, [r4, #16]
 801664a:	f003 0306 	and.w	r3, r3, #6
 801664e:	2b04      	cmp	r3, #4
 8016650:	bf02      	ittt	eq
 8016652:	68e5      	ldreq	r5, [r4, #12]
 8016654:	6833      	ldreq	r3, [r6, #0]
 8016656:	1aed      	subeq	r5, r5, r3
 8016658:	68a3      	ldr	r3, [r4, #8]
 801665a:	bf0c      	ite	eq
 801665c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016660:	2500      	movne	r5, #0
 8016662:	4293      	cmp	r3, r2
 8016664:	bfc4      	itt	gt
 8016666:	1a9b      	subgt	r3, r3, r2
 8016668:	18ed      	addgt	r5, r5, r3
 801666a:	2600      	movs	r6, #0
 801666c:	341a      	adds	r4, #26
 801666e:	42b5      	cmp	r5, r6
 8016670:	d11a      	bne.n	80166a8 <_printf_common+0xc8>
 8016672:	2000      	movs	r0, #0
 8016674:	e008      	b.n	8016688 <_printf_common+0xa8>
 8016676:	2301      	movs	r3, #1
 8016678:	4652      	mov	r2, sl
 801667a:	4649      	mov	r1, r9
 801667c:	4638      	mov	r0, r7
 801667e:	47c0      	blx	r8
 8016680:	3001      	adds	r0, #1
 8016682:	d103      	bne.n	801668c <_printf_common+0xac>
 8016684:	f04f 30ff 	mov.w	r0, #4294967295
 8016688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801668c:	3501      	adds	r5, #1
 801668e:	e7c6      	b.n	801661e <_printf_common+0x3e>
 8016690:	18e1      	adds	r1, r4, r3
 8016692:	1c5a      	adds	r2, r3, #1
 8016694:	2030      	movs	r0, #48	; 0x30
 8016696:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801669a:	4422      	add	r2, r4
 801669c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80166a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80166a4:	3302      	adds	r3, #2
 80166a6:	e7c7      	b.n	8016638 <_printf_common+0x58>
 80166a8:	2301      	movs	r3, #1
 80166aa:	4622      	mov	r2, r4
 80166ac:	4649      	mov	r1, r9
 80166ae:	4638      	mov	r0, r7
 80166b0:	47c0      	blx	r8
 80166b2:	3001      	adds	r0, #1
 80166b4:	d0e6      	beq.n	8016684 <_printf_common+0xa4>
 80166b6:	3601      	adds	r6, #1
 80166b8:	e7d9      	b.n	801666e <_printf_common+0x8e>
	...

080166bc <_printf_i>:
 80166bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80166c0:	7e0f      	ldrb	r7, [r1, #24]
 80166c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80166c4:	2f78      	cmp	r7, #120	; 0x78
 80166c6:	4691      	mov	r9, r2
 80166c8:	4680      	mov	r8, r0
 80166ca:	460c      	mov	r4, r1
 80166cc:	469a      	mov	sl, r3
 80166ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80166d2:	d807      	bhi.n	80166e4 <_printf_i+0x28>
 80166d4:	2f62      	cmp	r7, #98	; 0x62
 80166d6:	d80a      	bhi.n	80166ee <_printf_i+0x32>
 80166d8:	2f00      	cmp	r7, #0
 80166da:	f000 80d4 	beq.w	8016886 <_printf_i+0x1ca>
 80166de:	2f58      	cmp	r7, #88	; 0x58
 80166e0:	f000 80c0 	beq.w	8016864 <_printf_i+0x1a8>
 80166e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80166ec:	e03a      	b.n	8016764 <_printf_i+0xa8>
 80166ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80166f2:	2b15      	cmp	r3, #21
 80166f4:	d8f6      	bhi.n	80166e4 <_printf_i+0x28>
 80166f6:	a101      	add	r1, pc, #4	; (adr r1, 80166fc <_printf_i+0x40>)
 80166f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80166fc:	08016755 	.word	0x08016755
 8016700:	08016769 	.word	0x08016769
 8016704:	080166e5 	.word	0x080166e5
 8016708:	080166e5 	.word	0x080166e5
 801670c:	080166e5 	.word	0x080166e5
 8016710:	080166e5 	.word	0x080166e5
 8016714:	08016769 	.word	0x08016769
 8016718:	080166e5 	.word	0x080166e5
 801671c:	080166e5 	.word	0x080166e5
 8016720:	080166e5 	.word	0x080166e5
 8016724:	080166e5 	.word	0x080166e5
 8016728:	0801686d 	.word	0x0801686d
 801672c:	08016795 	.word	0x08016795
 8016730:	08016827 	.word	0x08016827
 8016734:	080166e5 	.word	0x080166e5
 8016738:	080166e5 	.word	0x080166e5
 801673c:	0801688f 	.word	0x0801688f
 8016740:	080166e5 	.word	0x080166e5
 8016744:	08016795 	.word	0x08016795
 8016748:	080166e5 	.word	0x080166e5
 801674c:	080166e5 	.word	0x080166e5
 8016750:	0801682f 	.word	0x0801682f
 8016754:	682b      	ldr	r3, [r5, #0]
 8016756:	1d1a      	adds	r2, r3, #4
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	602a      	str	r2, [r5, #0]
 801675c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016764:	2301      	movs	r3, #1
 8016766:	e09f      	b.n	80168a8 <_printf_i+0x1ec>
 8016768:	6820      	ldr	r0, [r4, #0]
 801676a:	682b      	ldr	r3, [r5, #0]
 801676c:	0607      	lsls	r7, r0, #24
 801676e:	f103 0104 	add.w	r1, r3, #4
 8016772:	6029      	str	r1, [r5, #0]
 8016774:	d501      	bpl.n	801677a <_printf_i+0xbe>
 8016776:	681e      	ldr	r6, [r3, #0]
 8016778:	e003      	b.n	8016782 <_printf_i+0xc6>
 801677a:	0646      	lsls	r6, r0, #25
 801677c:	d5fb      	bpl.n	8016776 <_printf_i+0xba>
 801677e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016782:	2e00      	cmp	r6, #0
 8016784:	da03      	bge.n	801678e <_printf_i+0xd2>
 8016786:	232d      	movs	r3, #45	; 0x2d
 8016788:	4276      	negs	r6, r6
 801678a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801678e:	485a      	ldr	r0, [pc, #360]	; (80168f8 <_printf_i+0x23c>)
 8016790:	230a      	movs	r3, #10
 8016792:	e012      	b.n	80167ba <_printf_i+0xfe>
 8016794:	682b      	ldr	r3, [r5, #0]
 8016796:	6820      	ldr	r0, [r4, #0]
 8016798:	1d19      	adds	r1, r3, #4
 801679a:	6029      	str	r1, [r5, #0]
 801679c:	0605      	lsls	r5, r0, #24
 801679e:	d501      	bpl.n	80167a4 <_printf_i+0xe8>
 80167a0:	681e      	ldr	r6, [r3, #0]
 80167a2:	e002      	b.n	80167aa <_printf_i+0xee>
 80167a4:	0641      	lsls	r1, r0, #25
 80167a6:	d5fb      	bpl.n	80167a0 <_printf_i+0xe4>
 80167a8:	881e      	ldrh	r6, [r3, #0]
 80167aa:	4853      	ldr	r0, [pc, #332]	; (80168f8 <_printf_i+0x23c>)
 80167ac:	2f6f      	cmp	r7, #111	; 0x6f
 80167ae:	bf0c      	ite	eq
 80167b0:	2308      	moveq	r3, #8
 80167b2:	230a      	movne	r3, #10
 80167b4:	2100      	movs	r1, #0
 80167b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167ba:	6865      	ldr	r5, [r4, #4]
 80167bc:	60a5      	str	r5, [r4, #8]
 80167be:	2d00      	cmp	r5, #0
 80167c0:	bfa2      	ittt	ge
 80167c2:	6821      	ldrge	r1, [r4, #0]
 80167c4:	f021 0104 	bicge.w	r1, r1, #4
 80167c8:	6021      	strge	r1, [r4, #0]
 80167ca:	b90e      	cbnz	r6, 80167d0 <_printf_i+0x114>
 80167cc:	2d00      	cmp	r5, #0
 80167ce:	d04b      	beq.n	8016868 <_printf_i+0x1ac>
 80167d0:	4615      	mov	r5, r2
 80167d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80167d6:	fb03 6711 	mls	r7, r3, r1, r6
 80167da:	5dc7      	ldrb	r7, [r0, r7]
 80167dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80167e0:	4637      	mov	r7, r6
 80167e2:	42bb      	cmp	r3, r7
 80167e4:	460e      	mov	r6, r1
 80167e6:	d9f4      	bls.n	80167d2 <_printf_i+0x116>
 80167e8:	2b08      	cmp	r3, #8
 80167ea:	d10b      	bne.n	8016804 <_printf_i+0x148>
 80167ec:	6823      	ldr	r3, [r4, #0]
 80167ee:	07de      	lsls	r6, r3, #31
 80167f0:	d508      	bpl.n	8016804 <_printf_i+0x148>
 80167f2:	6923      	ldr	r3, [r4, #16]
 80167f4:	6861      	ldr	r1, [r4, #4]
 80167f6:	4299      	cmp	r1, r3
 80167f8:	bfde      	ittt	le
 80167fa:	2330      	movle	r3, #48	; 0x30
 80167fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016800:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016804:	1b52      	subs	r2, r2, r5
 8016806:	6122      	str	r2, [r4, #16]
 8016808:	f8cd a000 	str.w	sl, [sp]
 801680c:	464b      	mov	r3, r9
 801680e:	aa03      	add	r2, sp, #12
 8016810:	4621      	mov	r1, r4
 8016812:	4640      	mov	r0, r8
 8016814:	f7ff fee4 	bl	80165e0 <_printf_common>
 8016818:	3001      	adds	r0, #1
 801681a:	d14a      	bne.n	80168b2 <_printf_i+0x1f6>
 801681c:	f04f 30ff 	mov.w	r0, #4294967295
 8016820:	b004      	add	sp, #16
 8016822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016826:	6823      	ldr	r3, [r4, #0]
 8016828:	f043 0320 	orr.w	r3, r3, #32
 801682c:	6023      	str	r3, [r4, #0]
 801682e:	4833      	ldr	r0, [pc, #204]	; (80168fc <_printf_i+0x240>)
 8016830:	2778      	movs	r7, #120	; 0x78
 8016832:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016836:	6823      	ldr	r3, [r4, #0]
 8016838:	6829      	ldr	r1, [r5, #0]
 801683a:	061f      	lsls	r7, r3, #24
 801683c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016840:	d402      	bmi.n	8016848 <_printf_i+0x18c>
 8016842:	065f      	lsls	r7, r3, #25
 8016844:	bf48      	it	mi
 8016846:	b2b6      	uxthmi	r6, r6
 8016848:	07df      	lsls	r7, r3, #31
 801684a:	bf48      	it	mi
 801684c:	f043 0320 	orrmi.w	r3, r3, #32
 8016850:	6029      	str	r1, [r5, #0]
 8016852:	bf48      	it	mi
 8016854:	6023      	strmi	r3, [r4, #0]
 8016856:	b91e      	cbnz	r6, 8016860 <_printf_i+0x1a4>
 8016858:	6823      	ldr	r3, [r4, #0]
 801685a:	f023 0320 	bic.w	r3, r3, #32
 801685e:	6023      	str	r3, [r4, #0]
 8016860:	2310      	movs	r3, #16
 8016862:	e7a7      	b.n	80167b4 <_printf_i+0xf8>
 8016864:	4824      	ldr	r0, [pc, #144]	; (80168f8 <_printf_i+0x23c>)
 8016866:	e7e4      	b.n	8016832 <_printf_i+0x176>
 8016868:	4615      	mov	r5, r2
 801686a:	e7bd      	b.n	80167e8 <_printf_i+0x12c>
 801686c:	682b      	ldr	r3, [r5, #0]
 801686e:	6826      	ldr	r6, [r4, #0]
 8016870:	6961      	ldr	r1, [r4, #20]
 8016872:	1d18      	adds	r0, r3, #4
 8016874:	6028      	str	r0, [r5, #0]
 8016876:	0635      	lsls	r5, r6, #24
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	d501      	bpl.n	8016880 <_printf_i+0x1c4>
 801687c:	6019      	str	r1, [r3, #0]
 801687e:	e002      	b.n	8016886 <_printf_i+0x1ca>
 8016880:	0670      	lsls	r0, r6, #25
 8016882:	d5fb      	bpl.n	801687c <_printf_i+0x1c0>
 8016884:	8019      	strh	r1, [r3, #0]
 8016886:	2300      	movs	r3, #0
 8016888:	6123      	str	r3, [r4, #16]
 801688a:	4615      	mov	r5, r2
 801688c:	e7bc      	b.n	8016808 <_printf_i+0x14c>
 801688e:	682b      	ldr	r3, [r5, #0]
 8016890:	1d1a      	adds	r2, r3, #4
 8016892:	602a      	str	r2, [r5, #0]
 8016894:	681d      	ldr	r5, [r3, #0]
 8016896:	6862      	ldr	r2, [r4, #4]
 8016898:	2100      	movs	r1, #0
 801689a:	4628      	mov	r0, r5
 801689c:	f7e9 fcc0 	bl	8000220 <memchr>
 80168a0:	b108      	cbz	r0, 80168a6 <_printf_i+0x1ea>
 80168a2:	1b40      	subs	r0, r0, r5
 80168a4:	6060      	str	r0, [r4, #4]
 80168a6:	6863      	ldr	r3, [r4, #4]
 80168a8:	6123      	str	r3, [r4, #16]
 80168aa:	2300      	movs	r3, #0
 80168ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168b0:	e7aa      	b.n	8016808 <_printf_i+0x14c>
 80168b2:	6923      	ldr	r3, [r4, #16]
 80168b4:	462a      	mov	r2, r5
 80168b6:	4649      	mov	r1, r9
 80168b8:	4640      	mov	r0, r8
 80168ba:	47d0      	blx	sl
 80168bc:	3001      	adds	r0, #1
 80168be:	d0ad      	beq.n	801681c <_printf_i+0x160>
 80168c0:	6823      	ldr	r3, [r4, #0]
 80168c2:	079b      	lsls	r3, r3, #30
 80168c4:	d413      	bmi.n	80168ee <_printf_i+0x232>
 80168c6:	68e0      	ldr	r0, [r4, #12]
 80168c8:	9b03      	ldr	r3, [sp, #12]
 80168ca:	4298      	cmp	r0, r3
 80168cc:	bfb8      	it	lt
 80168ce:	4618      	movlt	r0, r3
 80168d0:	e7a6      	b.n	8016820 <_printf_i+0x164>
 80168d2:	2301      	movs	r3, #1
 80168d4:	4632      	mov	r2, r6
 80168d6:	4649      	mov	r1, r9
 80168d8:	4640      	mov	r0, r8
 80168da:	47d0      	blx	sl
 80168dc:	3001      	adds	r0, #1
 80168de:	d09d      	beq.n	801681c <_printf_i+0x160>
 80168e0:	3501      	adds	r5, #1
 80168e2:	68e3      	ldr	r3, [r4, #12]
 80168e4:	9903      	ldr	r1, [sp, #12]
 80168e6:	1a5b      	subs	r3, r3, r1
 80168e8:	42ab      	cmp	r3, r5
 80168ea:	dcf2      	bgt.n	80168d2 <_printf_i+0x216>
 80168ec:	e7eb      	b.n	80168c6 <_printf_i+0x20a>
 80168ee:	2500      	movs	r5, #0
 80168f0:	f104 0619 	add.w	r6, r4, #25
 80168f4:	e7f5      	b.n	80168e2 <_printf_i+0x226>
 80168f6:	bf00      	nop
 80168f8:	0801d472 	.word	0x0801d472
 80168fc:	0801d483 	.word	0x0801d483

08016900 <_scanf_float>:
 8016900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016904:	b087      	sub	sp, #28
 8016906:	4617      	mov	r7, r2
 8016908:	9303      	str	r3, [sp, #12]
 801690a:	688b      	ldr	r3, [r1, #8]
 801690c:	1e5a      	subs	r2, r3, #1
 801690e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016912:	bf83      	ittte	hi
 8016914:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016918:	195b      	addhi	r3, r3, r5
 801691a:	9302      	strhi	r3, [sp, #8]
 801691c:	2300      	movls	r3, #0
 801691e:	bf86      	itte	hi
 8016920:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016924:	608b      	strhi	r3, [r1, #8]
 8016926:	9302      	strls	r3, [sp, #8]
 8016928:	680b      	ldr	r3, [r1, #0]
 801692a:	468b      	mov	fp, r1
 801692c:	2500      	movs	r5, #0
 801692e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016932:	f84b 3b1c 	str.w	r3, [fp], #28
 8016936:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801693a:	4680      	mov	r8, r0
 801693c:	460c      	mov	r4, r1
 801693e:	465e      	mov	r6, fp
 8016940:	46aa      	mov	sl, r5
 8016942:	46a9      	mov	r9, r5
 8016944:	9501      	str	r5, [sp, #4]
 8016946:	68a2      	ldr	r2, [r4, #8]
 8016948:	b152      	cbz	r2, 8016960 <_scanf_float+0x60>
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	781b      	ldrb	r3, [r3, #0]
 801694e:	2b4e      	cmp	r3, #78	; 0x4e
 8016950:	d864      	bhi.n	8016a1c <_scanf_float+0x11c>
 8016952:	2b40      	cmp	r3, #64	; 0x40
 8016954:	d83c      	bhi.n	80169d0 <_scanf_float+0xd0>
 8016956:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801695a:	b2c8      	uxtb	r0, r1
 801695c:	280e      	cmp	r0, #14
 801695e:	d93a      	bls.n	80169d6 <_scanf_float+0xd6>
 8016960:	f1b9 0f00 	cmp.w	r9, #0
 8016964:	d003      	beq.n	801696e <_scanf_float+0x6e>
 8016966:	6823      	ldr	r3, [r4, #0]
 8016968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801696c:	6023      	str	r3, [r4, #0]
 801696e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016972:	f1ba 0f01 	cmp.w	sl, #1
 8016976:	f200 8113 	bhi.w	8016ba0 <_scanf_float+0x2a0>
 801697a:	455e      	cmp	r6, fp
 801697c:	f200 8105 	bhi.w	8016b8a <_scanf_float+0x28a>
 8016980:	2501      	movs	r5, #1
 8016982:	4628      	mov	r0, r5
 8016984:	b007      	add	sp, #28
 8016986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801698a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801698e:	2a0d      	cmp	r2, #13
 8016990:	d8e6      	bhi.n	8016960 <_scanf_float+0x60>
 8016992:	a101      	add	r1, pc, #4	; (adr r1, 8016998 <_scanf_float+0x98>)
 8016994:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016998:	08016ad7 	.word	0x08016ad7
 801699c:	08016961 	.word	0x08016961
 80169a0:	08016961 	.word	0x08016961
 80169a4:	08016961 	.word	0x08016961
 80169a8:	08016b37 	.word	0x08016b37
 80169ac:	08016b0f 	.word	0x08016b0f
 80169b0:	08016961 	.word	0x08016961
 80169b4:	08016961 	.word	0x08016961
 80169b8:	08016ae5 	.word	0x08016ae5
 80169bc:	08016961 	.word	0x08016961
 80169c0:	08016961 	.word	0x08016961
 80169c4:	08016961 	.word	0x08016961
 80169c8:	08016961 	.word	0x08016961
 80169cc:	08016a9d 	.word	0x08016a9d
 80169d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80169d4:	e7db      	b.n	801698e <_scanf_float+0x8e>
 80169d6:	290e      	cmp	r1, #14
 80169d8:	d8c2      	bhi.n	8016960 <_scanf_float+0x60>
 80169da:	a001      	add	r0, pc, #4	; (adr r0, 80169e0 <_scanf_float+0xe0>)
 80169dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80169e0:	08016a8f 	.word	0x08016a8f
 80169e4:	08016961 	.word	0x08016961
 80169e8:	08016a8f 	.word	0x08016a8f
 80169ec:	08016b23 	.word	0x08016b23
 80169f0:	08016961 	.word	0x08016961
 80169f4:	08016a3d 	.word	0x08016a3d
 80169f8:	08016a79 	.word	0x08016a79
 80169fc:	08016a79 	.word	0x08016a79
 8016a00:	08016a79 	.word	0x08016a79
 8016a04:	08016a79 	.word	0x08016a79
 8016a08:	08016a79 	.word	0x08016a79
 8016a0c:	08016a79 	.word	0x08016a79
 8016a10:	08016a79 	.word	0x08016a79
 8016a14:	08016a79 	.word	0x08016a79
 8016a18:	08016a79 	.word	0x08016a79
 8016a1c:	2b6e      	cmp	r3, #110	; 0x6e
 8016a1e:	d809      	bhi.n	8016a34 <_scanf_float+0x134>
 8016a20:	2b60      	cmp	r3, #96	; 0x60
 8016a22:	d8b2      	bhi.n	801698a <_scanf_float+0x8a>
 8016a24:	2b54      	cmp	r3, #84	; 0x54
 8016a26:	d077      	beq.n	8016b18 <_scanf_float+0x218>
 8016a28:	2b59      	cmp	r3, #89	; 0x59
 8016a2a:	d199      	bne.n	8016960 <_scanf_float+0x60>
 8016a2c:	2d07      	cmp	r5, #7
 8016a2e:	d197      	bne.n	8016960 <_scanf_float+0x60>
 8016a30:	2508      	movs	r5, #8
 8016a32:	e029      	b.n	8016a88 <_scanf_float+0x188>
 8016a34:	2b74      	cmp	r3, #116	; 0x74
 8016a36:	d06f      	beq.n	8016b18 <_scanf_float+0x218>
 8016a38:	2b79      	cmp	r3, #121	; 0x79
 8016a3a:	e7f6      	b.n	8016a2a <_scanf_float+0x12a>
 8016a3c:	6821      	ldr	r1, [r4, #0]
 8016a3e:	05c8      	lsls	r0, r1, #23
 8016a40:	d51a      	bpl.n	8016a78 <_scanf_float+0x178>
 8016a42:	9b02      	ldr	r3, [sp, #8]
 8016a44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016a48:	6021      	str	r1, [r4, #0]
 8016a4a:	f109 0901 	add.w	r9, r9, #1
 8016a4e:	b11b      	cbz	r3, 8016a58 <_scanf_float+0x158>
 8016a50:	3b01      	subs	r3, #1
 8016a52:	3201      	adds	r2, #1
 8016a54:	9302      	str	r3, [sp, #8]
 8016a56:	60a2      	str	r2, [r4, #8]
 8016a58:	68a3      	ldr	r3, [r4, #8]
 8016a5a:	3b01      	subs	r3, #1
 8016a5c:	60a3      	str	r3, [r4, #8]
 8016a5e:	6923      	ldr	r3, [r4, #16]
 8016a60:	3301      	adds	r3, #1
 8016a62:	6123      	str	r3, [r4, #16]
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	3b01      	subs	r3, #1
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	607b      	str	r3, [r7, #4]
 8016a6c:	f340 8084 	ble.w	8016b78 <_scanf_float+0x278>
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	3301      	adds	r3, #1
 8016a74:	603b      	str	r3, [r7, #0]
 8016a76:	e766      	b.n	8016946 <_scanf_float+0x46>
 8016a78:	eb1a 0f05 	cmn.w	sl, r5
 8016a7c:	f47f af70 	bne.w	8016960 <_scanf_float+0x60>
 8016a80:	6822      	ldr	r2, [r4, #0]
 8016a82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016a86:	6022      	str	r2, [r4, #0]
 8016a88:	f806 3b01 	strb.w	r3, [r6], #1
 8016a8c:	e7e4      	b.n	8016a58 <_scanf_float+0x158>
 8016a8e:	6822      	ldr	r2, [r4, #0]
 8016a90:	0610      	lsls	r0, r2, #24
 8016a92:	f57f af65 	bpl.w	8016960 <_scanf_float+0x60>
 8016a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016a9a:	e7f4      	b.n	8016a86 <_scanf_float+0x186>
 8016a9c:	f1ba 0f00 	cmp.w	sl, #0
 8016aa0:	d10e      	bne.n	8016ac0 <_scanf_float+0x1c0>
 8016aa2:	f1b9 0f00 	cmp.w	r9, #0
 8016aa6:	d10e      	bne.n	8016ac6 <_scanf_float+0x1c6>
 8016aa8:	6822      	ldr	r2, [r4, #0]
 8016aaa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016aae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016ab2:	d108      	bne.n	8016ac6 <_scanf_float+0x1c6>
 8016ab4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016ab8:	6022      	str	r2, [r4, #0]
 8016aba:	f04f 0a01 	mov.w	sl, #1
 8016abe:	e7e3      	b.n	8016a88 <_scanf_float+0x188>
 8016ac0:	f1ba 0f02 	cmp.w	sl, #2
 8016ac4:	d055      	beq.n	8016b72 <_scanf_float+0x272>
 8016ac6:	2d01      	cmp	r5, #1
 8016ac8:	d002      	beq.n	8016ad0 <_scanf_float+0x1d0>
 8016aca:	2d04      	cmp	r5, #4
 8016acc:	f47f af48 	bne.w	8016960 <_scanf_float+0x60>
 8016ad0:	3501      	adds	r5, #1
 8016ad2:	b2ed      	uxtb	r5, r5
 8016ad4:	e7d8      	b.n	8016a88 <_scanf_float+0x188>
 8016ad6:	f1ba 0f01 	cmp.w	sl, #1
 8016ada:	f47f af41 	bne.w	8016960 <_scanf_float+0x60>
 8016ade:	f04f 0a02 	mov.w	sl, #2
 8016ae2:	e7d1      	b.n	8016a88 <_scanf_float+0x188>
 8016ae4:	b97d      	cbnz	r5, 8016b06 <_scanf_float+0x206>
 8016ae6:	f1b9 0f00 	cmp.w	r9, #0
 8016aea:	f47f af3c 	bne.w	8016966 <_scanf_float+0x66>
 8016aee:	6822      	ldr	r2, [r4, #0]
 8016af0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016af4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016af8:	f47f af39 	bne.w	801696e <_scanf_float+0x6e>
 8016afc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016b00:	6022      	str	r2, [r4, #0]
 8016b02:	2501      	movs	r5, #1
 8016b04:	e7c0      	b.n	8016a88 <_scanf_float+0x188>
 8016b06:	2d03      	cmp	r5, #3
 8016b08:	d0e2      	beq.n	8016ad0 <_scanf_float+0x1d0>
 8016b0a:	2d05      	cmp	r5, #5
 8016b0c:	e7de      	b.n	8016acc <_scanf_float+0x1cc>
 8016b0e:	2d02      	cmp	r5, #2
 8016b10:	f47f af26 	bne.w	8016960 <_scanf_float+0x60>
 8016b14:	2503      	movs	r5, #3
 8016b16:	e7b7      	b.n	8016a88 <_scanf_float+0x188>
 8016b18:	2d06      	cmp	r5, #6
 8016b1a:	f47f af21 	bne.w	8016960 <_scanf_float+0x60>
 8016b1e:	2507      	movs	r5, #7
 8016b20:	e7b2      	b.n	8016a88 <_scanf_float+0x188>
 8016b22:	6822      	ldr	r2, [r4, #0]
 8016b24:	0591      	lsls	r1, r2, #22
 8016b26:	f57f af1b 	bpl.w	8016960 <_scanf_float+0x60>
 8016b2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016b2e:	6022      	str	r2, [r4, #0]
 8016b30:	f8cd 9004 	str.w	r9, [sp, #4]
 8016b34:	e7a8      	b.n	8016a88 <_scanf_float+0x188>
 8016b36:	6822      	ldr	r2, [r4, #0]
 8016b38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016b3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016b40:	d006      	beq.n	8016b50 <_scanf_float+0x250>
 8016b42:	0550      	lsls	r0, r2, #21
 8016b44:	f57f af0c 	bpl.w	8016960 <_scanf_float+0x60>
 8016b48:	f1b9 0f00 	cmp.w	r9, #0
 8016b4c:	f43f af0f 	beq.w	801696e <_scanf_float+0x6e>
 8016b50:	0591      	lsls	r1, r2, #22
 8016b52:	bf58      	it	pl
 8016b54:	9901      	ldrpl	r1, [sp, #4]
 8016b56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016b5a:	bf58      	it	pl
 8016b5c:	eba9 0101 	subpl.w	r1, r9, r1
 8016b60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016b64:	bf58      	it	pl
 8016b66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016b6a:	6022      	str	r2, [r4, #0]
 8016b6c:	f04f 0900 	mov.w	r9, #0
 8016b70:	e78a      	b.n	8016a88 <_scanf_float+0x188>
 8016b72:	f04f 0a03 	mov.w	sl, #3
 8016b76:	e787      	b.n	8016a88 <_scanf_float+0x188>
 8016b78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016b7c:	4639      	mov	r1, r7
 8016b7e:	4640      	mov	r0, r8
 8016b80:	4798      	blx	r3
 8016b82:	2800      	cmp	r0, #0
 8016b84:	f43f aedf 	beq.w	8016946 <_scanf_float+0x46>
 8016b88:	e6ea      	b.n	8016960 <_scanf_float+0x60>
 8016b8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016b92:	463a      	mov	r2, r7
 8016b94:	4640      	mov	r0, r8
 8016b96:	4798      	blx	r3
 8016b98:	6923      	ldr	r3, [r4, #16]
 8016b9a:	3b01      	subs	r3, #1
 8016b9c:	6123      	str	r3, [r4, #16]
 8016b9e:	e6ec      	b.n	801697a <_scanf_float+0x7a>
 8016ba0:	1e6b      	subs	r3, r5, #1
 8016ba2:	2b06      	cmp	r3, #6
 8016ba4:	d825      	bhi.n	8016bf2 <_scanf_float+0x2f2>
 8016ba6:	2d02      	cmp	r5, #2
 8016ba8:	d836      	bhi.n	8016c18 <_scanf_float+0x318>
 8016baa:	455e      	cmp	r6, fp
 8016bac:	f67f aee8 	bls.w	8016980 <_scanf_float+0x80>
 8016bb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016bb8:	463a      	mov	r2, r7
 8016bba:	4640      	mov	r0, r8
 8016bbc:	4798      	blx	r3
 8016bbe:	6923      	ldr	r3, [r4, #16]
 8016bc0:	3b01      	subs	r3, #1
 8016bc2:	6123      	str	r3, [r4, #16]
 8016bc4:	e7f1      	b.n	8016baa <_scanf_float+0x2aa>
 8016bc6:	9802      	ldr	r0, [sp, #8]
 8016bc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bcc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016bd0:	9002      	str	r0, [sp, #8]
 8016bd2:	463a      	mov	r2, r7
 8016bd4:	4640      	mov	r0, r8
 8016bd6:	4798      	blx	r3
 8016bd8:	6923      	ldr	r3, [r4, #16]
 8016bda:	3b01      	subs	r3, #1
 8016bdc:	6123      	str	r3, [r4, #16]
 8016bde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016be2:	fa5f fa8a 	uxtb.w	sl, sl
 8016be6:	f1ba 0f02 	cmp.w	sl, #2
 8016bea:	d1ec      	bne.n	8016bc6 <_scanf_float+0x2c6>
 8016bec:	3d03      	subs	r5, #3
 8016bee:	b2ed      	uxtb	r5, r5
 8016bf0:	1b76      	subs	r6, r6, r5
 8016bf2:	6823      	ldr	r3, [r4, #0]
 8016bf4:	05da      	lsls	r2, r3, #23
 8016bf6:	d52f      	bpl.n	8016c58 <_scanf_float+0x358>
 8016bf8:	055b      	lsls	r3, r3, #21
 8016bfa:	d510      	bpl.n	8016c1e <_scanf_float+0x31e>
 8016bfc:	455e      	cmp	r6, fp
 8016bfe:	f67f aebf 	bls.w	8016980 <_scanf_float+0x80>
 8016c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016c0a:	463a      	mov	r2, r7
 8016c0c:	4640      	mov	r0, r8
 8016c0e:	4798      	blx	r3
 8016c10:	6923      	ldr	r3, [r4, #16]
 8016c12:	3b01      	subs	r3, #1
 8016c14:	6123      	str	r3, [r4, #16]
 8016c16:	e7f1      	b.n	8016bfc <_scanf_float+0x2fc>
 8016c18:	46aa      	mov	sl, r5
 8016c1a:	9602      	str	r6, [sp, #8]
 8016c1c:	e7df      	b.n	8016bde <_scanf_float+0x2de>
 8016c1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016c22:	6923      	ldr	r3, [r4, #16]
 8016c24:	2965      	cmp	r1, #101	; 0x65
 8016c26:	f103 33ff 	add.w	r3, r3, #4294967295
 8016c2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8016c2e:	6123      	str	r3, [r4, #16]
 8016c30:	d00c      	beq.n	8016c4c <_scanf_float+0x34c>
 8016c32:	2945      	cmp	r1, #69	; 0x45
 8016c34:	d00a      	beq.n	8016c4c <_scanf_float+0x34c>
 8016c36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c3a:	463a      	mov	r2, r7
 8016c3c:	4640      	mov	r0, r8
 8016c3e:	4798      	blx	r3
 8016c40:	6923      	ldr	r3, [r4, #16]
 8016c42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016c46:	3b01      	subs	r3, #1
 8016c48:	1eb5      	subs	r5, r6, #2
 8016c4a:	6123      	str	r3, [r4, #16]
 8016c4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c50:	463a      	mov	r2, r7
 8016c52:	4640      	mov	r0, r8
 8016c54:	4798      	blx	r3
 8016c56:	462e      	mov	r6, r5
 8016c58:	6825      	ldr	r5, [r4, #0]
 8016c5a:	f015 0510 	ands.w	r5, r5, #16
 8016c5e:	d158      	bne.n	8016d12 <_scanf_float+0x412>
 8016c60:	7035      	strb	r5, [r6, #0]
 8016c62:	6823      	ldr	r3, [r4, #0]
 8016c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c6c:	d11c      	bne.n	8016ca8 <_scanf_float+0x3a8>
 8016c6e:	9b01      	ldr	r3, [sp, #4]
 8016c70:	454b      	cmp	r3, r9
 8016c72:	eba3 0209 	sub.w	r2, r3, r9
 8016c76:	d124      	bne.n	8016cc2 <_scanf_float+0x3c2>
 8016c78:	2200      	movs	r2, #0
 8016c7a:	4659      	mov	r1, fp
 8016c7c:	4640      	mov	r0, r8
 8016c7e:	f002 fc3f 	bl	8019500 <_strtod_r>
 8016c82:	9b03      	ldr	r3, [sp, #12]
 8016c84:	6821      	ldr	r1, [r4, #0]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	f011 0f02 	tst.w	r1, #2
 8016c8c:	ec57 6b10 	vmov	r6, r7, d0
 8016c90:	f103 0204 	add.w	r2, r3, #4
 8016c94:	d020      	beq.n	8016cd8 <_scanf_float+0x3d8>
 8016c96:	9903      	ldr	r1, [sp, #12]
 8016c98:	600a      	str	r2, [r1, #0]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	e9c3 6700 	strd	r6, r7, [r3]
 8016ca0:	68e3      	ldr	r3, [r4, #12]
 8016ca2:	3301      	adds	r3, #1
 8016ca4:	60e3      	str	r3, [r4, #12]
 8016ca6:	e66c      	b.n	8016982 <_scanf_float+0x82>
 8016ca8:	9b04      	ldr	r3, [sp, #16]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d0e4      	beq.n	8016c78 <_scanf_float+0x378>
 8016cae:	9905      	ldr	r1, [sp, #20]
 8016cb0:	230a      	movs	r3, #10
 8016cb2:	462a      	mov	r2, r5
 8016cb4:	3101      	adds	r1, #1
 8016cb6:	4640      	mov	r0, r8
 8016cb8:	f002 fcaa 	bl	8019610 <_strtol_r>
 8016cbc:	9b04      	ldr	r3, [sp, #16]
 8016cbe:	9e05      	ldr	r6, [sp, #20]
 8016cc0:	1ac2      	subs	r2, r0, r3
 8016cc2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016cc6:	429e      	cmp	r6, r3
 8016cc8:	bf28      	it	cs
 8016cca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016cce:	4912      	ldr	r1, [pc, #72]	; (8016d18 <_scanf_float+0x418>)
 8016cd0:	4630      	mov	r0, r6
 8016cd2:	f000 f8e7 	bl	8016ea4 <siprintf>
 8016cd6:	e7cf      	b.n	8016c78 <_scanf_float+0x378>
 8016cd8:	f011 0f04 	tst.w	r1, #4
 8016cdc:	9903      	ldr	r1, [sp, #12]
 8016cde:	600a      	str	r2, [r1, #0]
 8016ce0:	d1db      	bne.n	8016c9a <_scanf_float+0x39a>
 8016ce2:	f8d3 8000 	ldr.w	r8, [r3]
 8016ce6:	ee10 2a10 	vmov	r2, s0
 8016cea:	ee10 0a10 	vmov	r0, s0
 8016cee:	463b      	mov	r3, r7
 8016cf0:	4639      	mov	r1, r7
 8016cf2:	f7e9 ff43 	bl	8000b7c <__aeabi_dcmpun>
 8016cf6:	b128      	cbz	r0, 8016d04 <_scanf_float+0x404>
 8016cf8:	4808      	ldr	r0, [pc, #32]	; (8016d1c <_scanf_float+0x41c>)
 8016cfa:	f000 f9c5 	bl	8017088 <nanf>
 8016cfe:	ed88 0a00 	vstr	s0, [r8]
 8016d02:	e7cd      	b.n	8016ca0 <_scanf_float+0x3a0>
 8016d04:	4630      	mov	r0, r6
 8016d06:	4639      	mov	r1, r7
 8016d08:	f7e9 ff96 	bl	8000c38 <__aeabi_d2f>
 8016d0c:	f8c8 0000 	str.w	r0, [r8]
 8016d10:	e7c6      	b.n	8016ca0 <_scanf_float+0x3a0>
 8016d12:	2500      	movs	r5, #0
 8016d14:	e635      	b.n	8016982 <_scanf_float+0x82>
 8016d16:	bf00      	nop
 8016d18:	0801d494 	.word	0x0801d494
 8016d1c:	0801d825 	.word	0x0801d825

08016d20 <std>:
 8016d20:	2300      	movs	r3, #0
 8016d22:	b510      	push	{r4, lr}
 8016d24:	4604      	mov	r4, r0
 8016d26:	e9c0 3300 	strd	r3, r3, [r0]
 8016d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d2e:	6083      	str	r3, [r0, #8]
 8016d30:	8181      	strh	r1, [r0, #12]
 8016d32:	6643      	str	r3, [r0, #100]	; 0x64
 8016d34:	81c2      	strh	r2, [r0, #14]
 8016d36:	6183      	str	r3, [r0, #24]
 8016d38:	4619      	mov	r1, r3
 8016d3a:	2208      	movs	r2, #8
 8016d3c:	305c      	adds	r0, #92	; 0x5c
 8016d3e:	f000 f914 	bl	8016f6a <memset>
 8016d42:	4b0d      	ldr	r3, [pc, #52]	; (8016d78 <std+0x58>)
 8016d44:	6263      	str	r3, [r4, #36]	; 0x24
 8016d46:	4b0d      	ldr	r3, [pc, #52]	; (8016d7c <std+0x5c>)
 8016d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d4a:	4b0d      	ldr	r3, [pc, #52]	; (8016d80 <std+0x60>)
 8016d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d4e:	4b0d      	ldr	r3, [pc, #52]	; (8016d84 <std+0x64>)
 8016d50:	6323      	str	r3, [r4, #48]	; 0x30
 8016d52:	4b0d      	ldr	r3, [pc, #52]	; (8016d88 <std+0x68>)
 8016d54:	6224      	str	r4, [r4, #32]
 8016d56:	429c      	cmp	r4, r3
 8016d58:	d006      	beq.n	8016d68 <std+0x48>
 8016d5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016d5e:	4294      	cmp	r4, r2
 8016d60:	d002      	beq.n	8016d68 <std+0x48>
 8016d62:	33d0      	adds	r3, #208	; 0xd0
 8016d64:	429c      	cmp	r4, r3
 8016d66:	d105      	bne.n	8016d74 <std+0x54>
 8016d68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d70:	f000 b978 	b.w	8017064 <__retarget_lock_init_recursive>
 8016d74:	bd10      	pop	{r4, pc}
 8016d76:	bf00      	nop
 8016d78:	08016ee5 	.word	0x08016ee5
 8016d7c:	08016f07 	.word	0x08016f07
 8016d80:	08016f3f 	.word	0x08016f3f
 8016d84:	08016f63 	.word	0x08016f63
 8016d88:	2000327c 	.word	0x2000327c

08016d8c <stdio_exit_handler>:
 8016d8c:	4a02      	ldr	r2, [pc, #8]	; (8016d98 <stdio_exit_handler+0xc>)
 8016d8e:	4903      	ldr	r1, [pc, #12]	; (8016d9c <stdio_exit_handler+0x10>)
 8016d90:	4803      	ldr	r0, [pc, #12]	; (8016da0 <stdio_exit_handler+0x14>)
 8016d92:	f000 b869 	b.w	8016e68 <_fwalk_sglue>
 8016d96:	bf00      	nop
 8016d98:	20000378 	.word	0x20000378
 8016d9c:	080199d1 	.word	0x080199d1
 8016da0:	20000384 	.word	0x20000384

08016da4 <cleanup_stdio>:
 8016da4:	6841      	ldr	r1, [r0, #4]
 8016da6:	4b0c      	ldr	r3, [pc, #48]	; (8016dd8 <cleanup_stdio+0x34>)
 8016da8:	4299      	cmp	r1, r3
 8016daa:	b510      	push	{r4, lr}
 8016dac:	4604      	mov	r4, r0
 8016dae:	d001      	beq.n	8016db4 <cleanup_stdio+0x10>
 8016db0:	f002 fe0e 	bl	80199d0 <_fflush_r>
 8016db4:	68a1      	ldr	r1, [r4, #8]
 8016db6:	4b09      	ldr	r3, [pc, #36]	; (8016ddc <cleanup_stdio+0x38>)
 8016db8:	4299      	cmp	r1, r3
 8016dba:	d002      	beq.n	8016dc2 <cleanup_stdio+0x1e>
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	f002 fe07 	bl	80199d0 <_fflush_r>
 8016dc2:	68e1      	ldr	r1, [r4, #12]
 8016dc4:	4b06      	ldr	r3, [pc, #24]	; (8016de0 <cleanup_stdio+0x3c>)
 8016dc6:	4299      	cmp	r1, r3
 8016dc8:	d004      	beq.n	8016dd4 <cleanup_stdio+0x30>
 8016dca:	4620      	mov	r0, r4
 8016dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dd0:	f002 bdfe 	b.w	80199d0 <_fflush_r>
 8016dd4:	bd10      	pop	{r4, pc}
 8016dd6:	bf00      	nop
 8016dd8:	2000327c 	.word	0x2000327c
 8016ddc:	200032e4 	.word	0x200032e4
 8016de0:	2000334c 	.word	0x2000334c

08016de4 <global_stdio_init.part.0>:
 8016de4:	b510      	push	{r4, lr}
 8016de6:	4b0b      	ldr	r3, [pc, #44]	; (8016e14 <global_stdio_init.part.0+0x30>)
 8016de8:	4c0b      	ldr	r4, [pc, #44]	; (8016e18 <global_stdio_init.part.0+0x34>)
 8016dea:	4a0c      	ldr	r2, [pc, #48]	; (8016e1c <global_stdio_init.part.0+0x38>)
 8016dec:	601a      	str	r2, [r3, #0]
 8016dee:	4620      	mov	r0, r4
 8016df0:	2200      	movs	r2, #0
 8016df2:	2104      	movs	r1, #4
 8016df4:	f7ff ff94 	bl	8016d20 <std>
 8016df8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016dfc:	2201      	movs	r2, #1
 8016dfe:	2109      	movs	r1, #9
 8016e00:	f7ff ff8e 	bl	8016d20 <std>
 8016e04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016e08:	2202      	movs	r2, #2
 8016e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e0e:	2112      	movs	r1, #18
 8016e10:	f7ff bf86 	b.w	8016d20 <std>
 8016e14:	200033b4 	.word	0x200033b4
 8016e18:	2000327c 	.word	0x2000327c
 8016e1c:	08016d8d 	.word	0x08016d8d

08016e20 <__sfp_lock_acquire>:
 8016e20:	4801      	ldr	r0, [pc, #4]	; (8016e28 <__sfp_lock_acquire+0x8>)
 8016e22:	f000 b920 	b.w	8017066 <__retarget_lock_acquire_recursive>
 8016e26:	bf00      	nop
 8016e28:	200033bd 	.word	0x200033bd

08016e2c <__sfp_lock_release>:
 8016e2c:	4801      	ldr	r0, [pc, #4]	; (8016e34 <__sfp_lock_release+0x8>)
 8016e2e:	f000 b91b 	b.w	8017068 <__retarget_lock_release_recursive>
 8016e32:	bf00      	nop
 8016e34:	200033bd 	.word	0x200033bd

08016e38 <__sinit>:
 8016e38:	b510      	push	{r4, lr}
 8016e3a:	4604      	mov	r4, r0
 8016e3c:	f7ff fff0 	bl	8016e20 <__sfp_lock_acquire>
 8016e40:	6a23      	ldr	r3, [r4, #32]
 8016e42:	b11b      	cbz	r3, 8016e4c <__sinit+0x14>
 8016e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e48:	f7ff bff0 	b.w	8016e2c <__sfp_lock_release>
 8016e4c:	4b04      	ldr	r3, [pc, #16]	; (8016e60 <__sinit+0x28>)
 8016e4e:	6223      	str	r3, [r4, #32]
 8016e50:	4b04      	ldr	r3, [pc, #16]	; (8016e64 <__sinit+0x2c>)
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d1f5      	bne.n	8016e44 <__sinit+0xc>
 8016e58:	f7ff ffc4 	bl	8016de4 <global_stdio_init.part.0>
 8016e5c:	e7f2      	b.n	8016e44 <__sinit+0xc>
 8016e5e:	bf00      	nop
 8016e60:	08016da5 	.word	0x08016da5
 8016e64:	200033b4 	.word	0x200033b4

08016e68 <_fwalk_sglue>:
 8016e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e6c:	4607      	mov	r7, r0
 8016e6e:	4688      	mov	r8, r1
 8016e70:	4614      	mov	r4, r2
 8016e72:	2600      	movs	r6, #0
 8016e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e78:	f1b9 0901 	subs.w	r9, r9, #1
 8016e7c:	d505      	bpl.n	8016e8a <_fwalk_sglue+0x22>
 8016e7e:	6824      	ldr	r4, [r4, #0]
 8016e80:	2c00      	cmp	r4, #0
 8016e82:	d1f7      	bne.n	8016e74 <_fwalk_sglue+0xc>
 8016e84:	4630      	mov	r0, r6
 8016e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e8a:	89ab      	ldrh	r3, [r5, #12]
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	d907      	bls.n	8016ea0 <_fwalk_sglue+0x38>
 8016e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e94:	3301      	adds	r3, #1
 8016e96:	d003      	beq.n	8016ea0 <_fwalk_sglue+0x38>
 8016e98:	4629      	mov	r1, r5
 8016e9a:	4638      	mov	r0, r7
 8016e9c:	47c0      	blx	r8
 8016e9e:	4306      	orrs	r6, r0
 8016ea0:	3568      	adds	r5, #104	; 0x68
 8016ea2:	e7e9      	b.n	8016e78 <_fwalk_sglue+0x10>

08016ea4 <siprintf>:
 8016ea4:	b40e      	push	{r1, r2, r3}
 8016ea6:	b500      	push	{lr}
 8016ea8:	b09c      	sub	sp, #112	; 0x70
 8016eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8016eac:	9002      	str	r0, [sp, #8]
 8016eae:	9006      	str	r0, [sp, #24]
 8016eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016eb4:	4809      	ldr	r0, [pc, #36]	; (8016edc <siprintf+0x38>)
 8016eb6:	9107      	str	r1, [sp, #28]
 8016eb8:	9104      	str	r1, [sp, #16]
 8016eba:	4909      	ldr	r1, [pc, #36]	; (8016ee0 <siprintf+0x3c>)
 8016ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ec0:	9105      	str	r1, [sp, #20]
 8016ec2:	6800      	ldr	r0, [r0, #0]
 8016ec4:	9301      	str	r3, [sp, #4]
 8016ec6:	a902      	add	r1, sp, #8
 8016ec8:	f002 fbfe 	bl	80196c8 <_svfiprintf_r>
 8016ecc:	9b02      	ldr	r3, [sp, #8]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	701a      	strb	r2, [r3, #0]
 8016ed2:	b01c      	add	sp, #112	; 0x70
 8016ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ed8:	b003      	add	sp, #12
 8016eda:	4770      	bx	lr
 8016edc:	200003d0 	.word	0x200003d0
 8016ee0:	ffff0208 	.word	0xffff0208

08016ee4 <__sread>:
 8016ee4:	b510      	push	{r4, lr}
 8016ee6:	460c      	mov	r4, r1
 8016ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eec:	f000 f86c 	bl	8016fc8 <_read_r>
 8016ef0:	2800      	cmp	r0, #0
 8016ef2:	bfab      	itete	ge
 8016ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8016ef8:	181b      	addge	r3, r3, r0
 8016efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016efe:	bfac      	ite	ge
 8016f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8016f02:	81a3      	strhlt	r3, [r4, #12]
 8016f04:	bd10      	pop	{r4, pc}

08016f06 <__swrite>:
 8016f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f0a:	461f      	mov	r7, r3
 8016f0c:	898b      	ldrh	r3, [r1, #12]
 8016f0e:	05db      	lsls	r3, r3, #23
 8016f10:	4605      	mov	r5, r0
 8016f12:	460c      	mov	r4, r1
 8016f14:	4616      	mov	r6, r2
 8016f16:	d505      	bpl.n	8016f24 <__swrite+0x1e>
 8016f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f1c:	2302      	movs	r3, #2
 8016f1e:	2200      	movs	r2, #0
 8016f20:	f000 f840 	bl	8016fa4 <_lseek_r>
 8016f24:	89a3      	ldrh	r3, [r4, #12]
 8016f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f2e:	81a3      	strh	r3, [r4, #12]
 8016f30:	4632      	mov	r2, r6
 8016f32:	463b      	mov	r3, r7
 8016f34:	4628      	mov	r0, r5
 8016f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f3a:	f000 b857 	b.w	8016fec <_write_r>

08016f3e <__sseek>:
 8016f3e:	b510      	push	{r4, lr}
 8016f40:	460c      	mov	r4, r1
 8016f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f46:	f000 f82d 	bl	8016fa4 <_lseek_r>
 8016f4a:	1c43      	adds	r3, r0, #1
 8016f4c:	89a3      	ldrh	r3, [r4, #12]
 8016f4e:	bf15      	itete	ne
 8016f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f5a:	81a3      	strheq	r3, [r4, #12]
 8016f5c:	bf18      	it	ne
 8016f5e:	81a3      	strhne	r3, [r4, #12]
 8016f60:	bd10      	pop	{r4, pc}

08016f62 <__sclose>:
 8016f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f66:	f000 b80d 	b.w	8016f84 <_close_r>

08016f6a <memset>:
 8016f6a:	4402      	add	r2, r0
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	4293      	cmp	r3, r2
 8016f70:	d100      	bne.n	8016f74 <memset+0xa>
 8016f72:	4770      	bx	lr
 8016f74:	f803 1b01 	strb.w	r1, [r3], #1
 8016f78:	e7f9      	b.n	8016f6e <memset+0x4>
	...

08016f7c <_localeconv_r>:
 8016f7c:	4800      	ldr	r0, [pc, #0]	; (8016f80 <_localeconv_r+0x4>)
 8016f7e:	4770      	bx	lr
 8016f80:	200004c4 	.word	0x200004c4

08016f84 <_close_r>:
 8016f84:	b538      	push	{r3, r4, r5, lr}
 8016f86:	4d06      	ldr	r5, [pc, #24]	; (8016fa0 <_close_r+0x1c>)
 8016f88:	2300      	movs	r3, #0
 8016f8a:	4604      	mov	r4, r0
 8016f8c:	4608      	mov	r0, r1
 8016f8e:	602b      	str	r3, [r5, #0]
 8016f90:	f7ee fab5 	bl	80054fe <_close>
 8016f94:	1c43      	adds	r3, r0, #1
 8016f96:	d102      	bne.n	8016f9e <_close_r+0x1a>
 8016f98:	682b      	ldr	r3, [r5, #0]
 8016f9a:	b103      	cbz	r3, 8016f9e <_close_r+0x1a>
 8016f9c:	6023      	str	r3, [r4, #0]
 8016f9e:	bd38      	pop	{r3, r4, r5, pc}
 8016fa0:	200033b8 	.word	0x200033b8

08016fa4 <_lseek_r>:
 8016fa4:	b538      	push	{r3, r4, r5, lr}
 8016fa6:	4d07      	ldr	r5, [pc, #28]	; (8016fc4 <_lseek_r+0x20>)
 8016fa8:	4604      	mov	r4, r0
 8016faa:	4608      	mov	r0, r1
 8016fac:	4611      	mov	r1, r2
 8016fae:	2200      	movs	r2, #0
 8016fb0:	602a      	str	r2, [r5, #0]
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	f7ee faca 	bl	800554c <_lseek>
 8016fb8:	1c43      	adds	r3, r0, #1
 8016fba:	d102      	bne.n	8016fc2 <_lseek_r+0x1e>
 8016fbc:	682b      	ldr	r3, [r5, #0]
 8016fbe:	b103      	cbz	r3, 8016fc2 <_lseek_r+0x1e>
 8016fc0:	6023      	str	r3, [r4, #0]
 8016fc2:	bd38      	pop	{r3, r4, r5, pc}
 8016fc4:	200033b8 	.word	0x200033b8

08016fc8 <_read_r>:
 8016fc8:	b538      	push	{r3, r4, r5, lr}
 8016fca:	4d07      	ldr	r5, [pc, #28]	; (8016fe8 <_read_r+0x20>)
 8016fcc:	4604      	mov	r4, r0
 8016fce:	4608      	mov	r0, r1
 8016fd0:	4611      	mov	r1, r2
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	602a      	str	r2, [r5, #0]
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	f7ee fa58 	bl	800548c <_read>
 8016fdc:	1c43      	adds	r3, r0, #1
 8016fde:	d102      	bne.n	8016fe6 <_read_r+0x1e>
 8016fe0:	682b      	ldr	r3, [r5, #0]
 8016fe2:	b103      	cbz	r3, 8016fe6 <_read_r+0x1e>
 8016fe4:	6023      	str	r3, [r4, #0]
 8016fe6:	bd38      	pop	{r3, r4, r5, pc}
 8016fe8:	200033b8 	.word	0x200033b8

08016fec <_write_r>:
 8016fec:	b538      	push	{r3, r4, r5, lr}
 8016fee:	4d07      	ldr	r5, [pc, #28]	; (801700c <_write_r+0x20>)
 8016ff0:	4604      	mov	r4, r0
 8016ff2:	4608      	mov	r0, r1
 8016ff4:	4611      	mov	r1, r2
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	602a      	str	r2, [r5, #0]
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	f7ee fa63 	bl	80054c6 <_write>
 8017000:	1c43      	adds	r3, r0, #1
 8017002:	d102      	bne.n	801700a <_write_r+0x1e>
 8017004:	682b      	ldr	r3, [r5, #0]
 8017006:	b103      	cbz	r3, 801700a <_write_r+0x1e>
 8017008:	6023      	str	r3, [r4, #0]
 801700a:	bd38      	pop	{r3, r4, r5, pc}
 801700c:	200033b8 	.word	0x200033b8

08017010 <__errno>:
 8017010:	4b01      	ldr	r3, [pc, #4]	; (8017018 <__errno+0x8>)
 8017012:	6818      	ldr	r0, [r3, #0]
 8017014:	4770      	bx	lr
 8017016:	bf00      	nop
 8017018:	200003d0 	.word	0x200003d0

0801701c <__libc_init_array>:
 801701c:	b570      	push	{r4, r5, r6, lr}
 801701e:	4d0d      	ldr	r5, [pc, #52]	; (8017054 <__libc_init_array+0x38>)
 8017020:	4c0d      	ldr	r4, [pc, #52]	; (8017058 <__libc_init_array+0x3c>)
 8017022:	1b64      	subs	r4, r4, r5
 8017024:	10a4      	asrs	r4, r4, #2
 8017026:	2600      	movs	r6, #0
 8017028:	42a6      	cmp	r6, r4
 801702a:	d109      	bne.n	8017040 <__libc_init_array+0x24>
 801702c:	4d0b      	ldr	r5, [pc, #44]	; (801705c <__libc_init_array+0x40>)
 801702e:	4c0c      	ldr	r4, [pc, #48]	; (8017060 <__libc_init_array+0x44>)
 8017030:	f003 fd5a 	bl	801aae8 <_init>
 8017034:	1b64      	subs	r4, r4, r5
 8017036:	10a4      	asrs	r4, r4, #2
 8017038:	2600      	movs	r6, #0
 801703a:	42a6      	cmp	r6, r4
 801703c:	d105      	bne.n	801704a <__libc_init_array+0x2e>
 801703e:	bd70      	pop	{r4, r5, r6, pc}
 8017040:	f855 3b04 	ldr.w	r3, [r5], #4
 8017044:	4798      	blx	r3
 8017046:	3601      	adds	r6, #1
 8017048:	e7ee      	b.n	8017028 <__libc_init_array+0xc>
 801704a:	f855 3b04 	ldr.w	r3, [r5], #4
 801704e:	4798      	blx	r3
 8017050:	3601      	adds	r6, #1
 8017052:	e7f2      	b.n	801703a <__libc_init_array+0x1e>
 8017054:	0801d8a0 	.word	0x0801d8a0
 8017058:	0801d8a0 	.word	0x0801d8a0
 801705c:	0801d8a0 	.word	0x0801d8a0
 8017060:	0801d8a4 	.word	0x0801d8a4

08017064 <__retarget_lock_init_recursive>:
 8017064:	4770      	bx	lr

08017066 <__retarget_lock_acquire_recursive>:
 8017066:	4770      	bx	lr

08017068 <__retarget_lock_release_recursive>:
 8017068:	4770      	bx	lr

0801706a <memcpy>:
 801706a:	440a      	add	r2, r1
 801706c:	4291      	cmp	r1, r2
 801706e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017072:	d100      	bne.n	8017076 <memcpy+0xc>
 8017074:	4770      	bx	lr
 8017076:	b510      	push	{r4, lr}
 8017078:	f811 4b01 	ldrb.w	r4, [r1], #1
 801707c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017080:	4291      	cmp	r1, r2
 8017082:	d1f9      	bne.n	8017078 <memcpy+0xe>
 8017084:	bd10      	pop	{r4, pc}
	...

08017088 <nanf>:
 8017088:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017090 <nanf+0x8>
 801708c:	4770      	bx	lr
 801708e:	bf00      	nop
 8017090:	7fc00000 	.word	0x7fc00000

08017094 <quorem>:
 8017094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017098:	6903      	ldr	r3, [r0, #16]
 801709a:	690c      	ldr	r4, [r1, #16]
 801709c:	42a3      	cmp	r3, r4
 801709e:	4607      	mov	r7, r0
 80170a0:	db7e      	blt.n	80171a0 <quorem+0x10c>
 80170a2:	3c01      	subs	r4, #1
 80170a4:	f101 0814 	add.w	r8, r1, #20
 80170a8:	f100 0514 	add.w	r5, r0, #20
 80170ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80170b0:	9301      	str	r3, [sp, #4]
 80170b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80170b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80170ba:	3301      	adds	r3, #1
 80170bc:	429a      	cmp	r2, r3
 80170be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80170c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80170c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80170ca:	d331      	bcc.n	8017130 <quorem+0x9c>
 80170cc:	f04f 0e00 	mov.w	lr, #0
 80170d0:	4640      	mov	r0, r8
 80170d2:	46ac      	mov	ip, r5
 80170d4:	46f2      	mov	sl, lr
 80170d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80170da:	b293      	uxth	r3, r2
 80170dc:	fb06 e303 	mla	r3, r6, r3, lr
 80170e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80170e4:	0c1a      	lsrs	r2, r3, #16
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	ebaa 0303 	sub.w	r3, sl, r3
 80170ec:	f8dc a000 	ldr.w	sl, [ip]
 80170f0:	fa13 f38a 	uxtah	r3, r3, sl
 80170f4:	fb06 220e 	mla	r2, r6, lr, r2
 80170f8:	9300      	str	r3, [sp, #0]
 80170fa:	9b00      	ldr	r3, [sp, #0]
 80170fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017100:	b292      	uxth	r2, r2
 8017102:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017106:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801710a:	f8bd 3000 	ldrh.w	r3, [sp]
 801710e:	4581      	cmp	r9, r0
 8017110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017114:	f84c 3b04 	str.w	r3, [ip], #4
 8017118:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801711c:	d2db      	bcs.n	80170d6 <quorem+0x42>
 801711e:	f855 300b 	ldr.w	r3, [r5, fp]
 8017122:	b92b      	cbnz	r3, 8017130 <quorem+0x9c>
 8017124:	9b01      	ldr	r3, [sp, #4]
 8017126:	3b04      	subs	r3, #4
 8017128:	429d      	cmp	r5, r3
 801712a:	461a      	mov	r2, r3
 801712c:	d32c      	bcc.n	8017188 <quorem+0xf4>
 801712e:	613c      	str	r4, [r7, #16]
 8017130:	4638      	mov	r0, r7
 8017132:	f001 f9f1 	bl	8018518 <__mcmp>
 8017136:	2800      	cmp	r0, #0
 8017138:	db22      	blt.n	8017180 <quorem+0xec>
 801713a:	3601      	adds	r6, #1
 801713c:	4629      	mov	r1, r5
 801713e:	2000      	movs	r0, #0
 8017140:	f858 2b04 	ldr.w	r2, [r8], #4
 8017144:	f8d1 c000 	ldr.w	ip, [r1]
 8017148:	b293      	uxth	r3, r2
 801714a:	1ac3      	subs	r3, r0, r3
 801714c:	0c12      	lsrs	r2, r2, #16
 801714e:	fa13 f38c 	uxtah	r3, r3, ip
 8017152:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017156:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801715a:	b29b      	uxth	r3, r3
 801715c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017160:	45c1      	cmp	r9, r8
 8017162:	f841 3b04 	str.w	r3, [r1], #4
 8017166:	ea4f 4022 	mov.w	r0, r2, asr #16
 801716a:	d2e9      	bcs.n	8017140 <quorem+0xac>
 801716c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017174:	b922      	cbnz	r2, 8017180 <quorem+0xec>
 8017176:	3b04      	subs	r3, #4
 8017178:	429d      	cmp	r5, r3
 801717a:	461a      	mov	r2, r3
 801717c:	d30a      	bcc.n	8017194 <quorem+0x100>
 801717e:	613c      	str	r4, [r7, #16]
 8017180:	4630      	mov	r0, r6
 8017182:	b003      	add	sp, #12
 8017184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017188:	6812      	ldr	r2, [r2, #0]
 801718a:	3b04      	subs	r3, #4
 801718c:	2a00      	cmp	r2, #0
 801718e:	d1ce      	bne.n	801712e <quorem+0x9a>
 8017190:	3c01      	subs	r4, #1
 8017192:	e7c9      	b.n	8017128 <quorem+0x94>
 8017194:	6812      	ldr	r2, [r2, #0]
 8017196:	3b04      	subs	r3, #4
 8017198:	2a00      	cmp	r2, #0
 801719a:	d1f0      	bne.n	801717e <quorem+0xea>
 801719c:	3c01      	subs	r4, #1
 801719e:	e7eb      	b.n	8017178 <quorem+0xe4>
 80171a0:	2000      	movs	r0, #0
 80171a2:	e7ee      	b.n	8017182 <quorem+0xee>
 80171a4:	0000      	movs	r0, r0
	...

080171a8 <_dtoa_r>:
 80171a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ac:	ed2d 8b04 	vpush	{d8-d9}
 80171b0:	69c5      	ldr	r5, [r0, #28]
 80171b2:	b093      	sub	sp, #76	; 0x4c
 80171b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80171b8:	ec57 6b10 	vmov	r6, r7, d0
 80171bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80171c0:	9107      	str	r1, [sp, #28]
 80171c2:	4604      	mov	r4, r0
 80171c4:	920a      	str	r2, [sp, #40]	; 0x28
 80171c6:	930d      	str	r3, [sp, #52]	; 0x34
 80171c8:	b975      	cbnz	r5, 80171e8 <_dtoa_r+0x40>
 80171ca:	2010      	movs	r0, #16
 80171cc:	f000 fe2a 	bl	8017e24 <malloc>
 80171d0:	4602      	mov	r2, r0
 80171d2:	61e0      	str	r0, [r4, #28]
 80171d4:	b920      	cbnz	r0, 80171e0 <_dtoa_r+0x38>
 80171d6:	4bae      	ldr	r3, [pc, #696]	; (8017490 <_dtoa_r+0x2e8>)
 80171d8:	21ef      	movs	r1, #239	; 0xef
 80171da:	48ae      	ldr	r0, [pc, #696]	; (8017494 <_dtoa_r+0x2ec>)
 80171dc:	f002 fc64 	bl	8019aa8 <__assert_func>
 80171e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80171e4:	6005      	str	r5, [r0, #0]
 80171e6:	60c5      	str	r5, [r0, #12]
 80171e8:	69e3      	ldr	r3, [r4, #28]
 80171ea:	6819      	ldr	r1, [r3, #0]
 80171ec:	b151      	cbz	r1, 8017204 <_dtoa_r+0x5c>
 80171ee:	685a      	ldr	r2, [r3, #4]
 80171f0:	604a      	str	r2, [r1, #4]
 80171f2:	2301      	movs	r3, #1
 80171f4:	4093      	lsls	r3, r2
 80171f6:	608b      	str	r3, [r1, #8]
 80171f8:	4620      	mov	r0, r4
 80171fa:	f000 ff07 	bl	801800c <_Bfree>
 80171fe:	69e3      	ldr	r3, [r4, #28]
 8017200:	2200      	movs	r2, #0
 8017202:	601a      	str	r2, [r3, #0]
 8017204:	1e3b      	subs	r3, r7, #0
 8017206:	bfbb      	ittet	lt
 8017208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801720c:	9303      	strlt	r3, [sp, #12]
 801720e:	2300      	movge	r3, #0
 8017210:	2201      	movlt	r2, #1
 8017212:	bfac      	ite	ge
 8017214:	f8c8 3000 	strge.w	r3, [r8]
 8017218:	f8c8 2000 	strlt.w	r2, [r8]
 801721c:	4b9e      	ldr	r3, [pc, #632]	; (8017498 <_dtoa_r+0x2f0>)
 801721e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017222:	ea33 0308 	bics.w	r3, r3, r8
 8017226:	d11b      	bne.n	8017260 <_dtoa_r+0xb8>
 8017228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801722a:	f242 730f 	movw	r3, #9999	; 0x270f
 801722e:	6013      	str	r3, [r2, #0]
 8017230:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017234:	4333      	orrs	r3, r6
 8017236:	f000 8593 	beq.w	8017d60 <_dtoa_r+0xbb8>
 801723a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801723c:	b963      	cbnz	r3, 8017258 <_dtoa_r+0xb0>
 801723e:	4b97      	ldr	r3, [pc, #604]	; (801749c <_dtoa_r+0x2f4>)
 8017240:	e027      	b.n	8017292 <_dtoa_r+0xea>
 8017242:	4b97      	ldr	r3, [pc, #604]	; (80174a0 <_dtoa_r+0x2f8>)
 8017244:	9300      	str	r3, [sp, #0]
 8017246:	3308      	adds	r3, #8
 8017248:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801724a:	6013      	str	r3, [r2, #0]
 801724c:	9800      	ldr	r0, [sp, #0]
 801724e:	b013      	add	sp, #76	; 0x4c
 8017250:	ecbd 8b04 	vpop	{d8-d9}
 8017254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017258:	4b90      	ldr	r3, [pc, #576]	; (801749c <_dtoa_r+0x2f4>)
 801725a:	9300      	str	r3, [sp, #0]
 801725c:	3303      	adds	r3, #3
 801725e:	e7f3      	b.n	8017248 <_dtoa_r+0xa0>
 8017260:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017264:	2200      	movs	r2, #0
 8017266:	ec51 0b17 	vmov	r0, r1, d7
 801726a:	eeb0 8a47 	vmov.f32	s16, s14
 801726e:	eef0 8a67 	vmov.f32	s17, s15
 8017272:	2300      	movs	r3, #0
 8017274:	f7e9 fc50 	bl	8000b18 <__aeabi_dcmpeq>
 8017278:	4681      	mov	r9, r0
 801727a:	b160      	cbz	r0, 8017296 <_dtoa_r+0xee>
 801727c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801727e:	2301      	movs	r3, #1
 8017280:	6013      	str	r3, [r2, #0]
 8017282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017284:	2b00      	cmp	r3, #0
 8017286:	f000 8568 	beq.w	8017d5a <_dtoa_r+0xbb2>
 801728a:	4b86      	ldr	r3, [pc, #536]	; (80174a4 <_dtoa_r+0x2fc>)
 801728c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801728e:	6013      	str	r3, [r2, #0]
 8017290:	3b01      	subs	r3, #1
 8017292:	9300      	str	r3, [sp, #0]
 8017294:	e7da      	b.n	801724c <_dtoa_r+0xa4>
 8017296:	aa10      	add	r2, sp, #64	; 0x40
 8017298:	a911      	add	r1, sp, #68	; 0x44
 801729a:	4620      	mov	r0, r4
 801729c:	eeb0 0a48 	vmov.f32	s0, s16
 80172a0:	eef0 0a68 	vmov.f32	s1, s17
 80172a4:	f001 fa4e 	bl	8018744 <__d2b>
 80172a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80172ac:	4682      	mov	sl, r0
 80172ae:	2d00      	cmp	r5, #0
 80172b0:	d07f      	beq.n	80173b2 <_dtoa_r+0x20a>
 80172b2:	ee18 3a90 	vmov	r3, s17
 80172b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80172ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80172be:	ec51 0b18 	vmov	r0, r1, d8
 80172c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80172c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80172ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80172ce:	4619      	mov	r1, r3
 80172d0:	2200      	movs	r2, #0
 80172d2:	4b75      	ldr	r3, [pc, #468]	; (80174a8 <_dtoa_r+0x300>)
 80172d4:	f7e9 f800 	bl	80002d8 <__aeabi_dsub>
 80172d8:	a367      	add	r3, pc, #412	; (adr r3, 8017478 <_dtoa_r+0x2d0>)
 80172da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172de:	f7e9 f9b3 	bl	8000648 <__aeabi_dmul>
 80172e2:	a367      	add	r3, pc, #412	; (adr r3, 8017480 <_dtoa_r+0x2d8>)
 80172e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172e8:	f7e8 fff8 	bl	80002dc <__adddf3>
 80172ec:	4606      	mov	r6, r0
 80172ee:	4628      	mov	r0, r5
 80172f0:	460f      	mov	r7, r1
 80172f2:	f7e9 f93f 	bl	8000574 <__aeabi_i2d>
 80172f6:	a364      	add	r3, pc, #400	; (adr r3, 8017488 <_dtoa_r+0x2e0>)
 80172f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172fc:	f7e9 f9a4 	bl	8000648 <__aeabi_dmul>
 8017300:	4602      	mov	r2, r0
 8017302:	460b      	mov	r3, r1
 8017304:	4630      	mov	r0, r6
 8017306:	4639      	mov	r1, r7
 8017308:	f7e8 ffe8 	bl	80002dc <__adddf3>
 801730c:	4606      	mov	r6, r0
 801730e:	460f      	mov	r7, r1
 8017310:	f7e9 fc4a 	bl	8000ba8 <__aeabi_d2iz>
 8017314:	2200      	movs	r2, #0
 8017316:	4683      	mov	fp, r0
 8017318:	2300      	movs	r3, #0
 801731a:	4630      	mov	r0, r6
 801731c:	4639      	mov	r1, r7
 801731e:	f7e9 fc05 	bl	8000b2c <__aeabi_dcmplt>
 8017322:	b148      	cbz	r0, 8017338 <_dtoa_r+0x190>
 8017324:	4658      	mov	r0, fp
 8017326:	f7e9 f925 	bl	8000574 <__aeabi_i2d>
 801732a:	4632      	mov	r2, r6
 801732c:	463b      	mov	r3, r7
 801732e:	f7e9 fbf3 	bl	8000b18 <__aeabi_dcmpeq>
 8017332:	b908      	cbnz	r0, 8017338 <_dtoa_r+0x190>
 8017334:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017338:	f1bb 0f16 	cmp.w	fp, #22
 801733c:	d857      	bhi.n	80173ee <_dtoa_r+0x246>
 801733e:	4b5b      	ldr	r3, [pc, #364]	; (80174ac <_dtoa_r+0x304>)
 8017340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017348:	ec51 0b18 	vmov	r0, r1, d8
 801734c:	f7e9 fbee 	bl	8000b2c <__aeabi_dcmplt>
 8017350:	2800      	cmp	r0, #0
 8017352:	d04e      	beq.n	80173f2 <_dtoa_r+0x24a>
 8017354:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017358:	2300      	movs	r3, #0
 801735a:	930c      	str	r3, [sp, #48]	; 0x30
 801735c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801735e:	1b5b      	subs	r3, r3, r5
 8017360:	1e5a      	subs	r2, r3, #1
 8017362:	bf45      	ittet	mi
 8017364:	f1c3 0301 	rsbmi	r3, r3, #1
 8017368:	9305      	strmi	r3, [sp, #20]
 801736a:	2300      	movpl	r3, #0
 801736c:	2300      	movmi	r3, #0
 801736e:	9206      	str	r2, [sp, #24]
 8017370:	bf54      	ite	pl
 8017372:	9305      	strpl	r3, [sp, #20]
 8017374:	9306      	strmi	r3, [sp, #24]
 8017376:	f1bb 0f00 	cmp.w	fp, #0
 801737a:	db3c      	blt.n	80173f6 <_dtoa_r+0x24e>
 801737c:	9b06      	ldr	r3, [sp, #24]
 801737e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017382:	445b      	add	r3, fp
 8017384:	9306      	str	r3, [sp, #24]
 8017386:	2300      	movs	r3, #0
 8017388:	9308      	str	r3, [sp, #32]
 801738a:	9b07      	ldr	r3, [sp, #28]
 801738c:	2b09      	cmp	r3, #9
 801738e:	d868      	bhi.n	8017462 <_dtoa_r+0x2ba>
 8017390:	2b05      	cmp	r3, #5
 8017392:	bfc4      	itt	gt
 8017394:	3b04      	subgt	r3, #4
 8017396:	9307      	strgt	r3, [sp, #28]
 8017398:	9b07      	ldr	r3, [sp, #28]
 801739a:	f1a3 0302 	sub.w	r3, r3, #2
 801739e:	bfcc      	ite	gt
 80173a0:	2500      	movgt	r5, #0
 80173a2:	2501      	movle	r5, #1
 80173a4:	2b03      	cmp	r3, #3
 80173a6:	f200 8085 	bhi.w	80174b4 <_dtoa_r+0x30c>
 80173aa:	e8df f003 	tbb	[pc, r3]
 80173ae:	3b2e      	.short	0x3b2e
 80173b0:	5839      	.short	0x5839
 80173b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80173b6:	441d      	add	r5, r3
 80173b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80173bc:	2b20      	cmp	r3, #32
 80173be:	bfc1      	itttt	gt
 80173c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80173c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80173c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80173cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80173d0:	bfd6      	itet	le
 80173d2:	f1c3 0320 	rsble	r3, r3, #32
 80173d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80173da:	fa06 f003 	lslle.w	r0, r6, r3
 80173de:	f7e9 f8b9 	bl	8000554 <__aeabi_ui2d>
 80173e2:	2201      	movs	r2, #1
 80173e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80173e8:	3d01      	subs	r5, #1
 80173ea:	920e      	str	r2, [sp, #56]	; 0x38
 80173ec:	e76f      	b.n	80172ce <_dtoa_r+0x126>
 80173ee:	2301      	movs	r3, #1
 80173f0:	e7b3      	b.n	801735a <_dtoa_r+0x1b2>
 80173f2:	900c      	str	r0, [sp, #48]	; 0x30
 80173f4:	e7b2      	b.n	801735c <_dtoa_r+0x1b4>
 80173f6:	9b05      	ldr	r3, [sp, #20]
 80173f8:	eba3 030b 	sub.w	r3, r3, fp
 80173fc:	9305      	str	r3, [sp, #20]
 80173fe:	f1cb 0300 	rsb	r3, fp, #0
 8017402:	9308      	str	r3, [sp, #32]
 8017404:	2300      	movs	r3, #0
 8017406:	930b      	str	r3, [sp, #44]	; 0x2c
 8017408:	e7bf      	b.n	801738a <_dtoa_r+0x1e2>
 801740a:	2300      	movs	r3, #0
 801740c:	9309      	str	r3, [sp, #36]	; 0x24
 801740e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017410:	2b00      	cmp	r3, #0
 8017412:	dc52      	bgt.n	80174ba <_dtoa_r+0x312>
 8017414:	2301      	movs	r3, #1
 8017416:	9301      	str	r3, [sp, #4]
 8017418:	9304      	str	r3, [sp, #16]
 801741a:	461a      	mov	r2, r3
 801741c:	920a      	str	r2, [sp, #40]	; 0x28
 801741e:	e00b      	b.n	8017438 <_dtoa_r+0x290>
 8017420:	2301      	movs	r3, #1
 8017422:	e7f3      	b.n	801740c <_dtoa_r+0x264>
 8017424:	2300      	movs	r3, #0
 8017426:	9309      	str	r3, [sp, #36]	; 0x24
 8017428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801742a:	445b      	add	r3, fp
 801742c:	9301      	str	r3, [sp, #4]
 801742e:	3301      	adds	r3, #1
 8017430:	2b01      	cmp	r3, #1
 8017432:	9304      	str	r3, [sp, #16]
 8017434:	bfb8      	it	lt
 8017436:	2301      	movlt	r3, #1
 8017438:	69e0      	ldr	r0, [r4, #28]
 801743a:	2100      	movs	r1, #0
 801743c:	2204      	movs	r2, #4
 801743e:	f102 0614 	add.w	r6, r2, #20
 8017442:	429e      	cmp	r6, r3
 8017444:	d93d      	bls.n	80174c2 <_dtoa_r+0x31a>
 8017446:	6041      	str	r1, [r0, #4]
 8017448:	4620      	mov	r0, r4
 801744a:	f000 fd9f 	bl	8017f8c <_Balloc>
 801744e:	9000      	str	r0, [sp, #0]
 8017450:	2800      	cmp	r0, #0
 8017452:	d139      	bne.n	80174c8 <_dtoa_r+0x320>
 8017454:	4b16      	ldr	r3, [pc, #88]	; (80174b0 <_dtoa_r+0x308>)
 8017456:	4602      	mov	r2, r0
 8017458:	f240 11af 	movw	r1, #431	; 0x1af
 801745c:	e6bd      	b.n	80171da <_dtoa_r+0x32>
 801745e:	2301      	movs	r3, #1
 8017460:	e7e1      	b.n	8017426 <_dtoa_r+0x27e>
 8017462:	2501      	movs	r5, #1
 8017464:	2300      	movs	r3, #0
 8017466:	9307      	str	r3, [sp, #28]
 8017468:	9509      	str	r5, [sp, #36]	; 0x24
 801746a:	f04f 33ff 	mov.w	r3, #4294967295
 801746e:	9301      	str	r3, [sp, #4]
 8017470:	9304      	str	r3, [sp, #16]
 8017472:	2200      	movs	r2, #0
 8017474:	2312      	movs	r3, #18
 8017476:	e7d1      	b.n	801741c <_dtoa_r+0x274>
 8017478:	636f4361 	.word	0x636f4361
 801747c:	3fd287a7 	.word	0x3fd287a7
 8017480:	8b60c8b3 	.word	0x8b60c8b3
 8017484:	3fc68a28 	.word	0x3fc68a28
 8017488:	509f79fb 	.word	0x509f79fb
 801748c:	3fd34413 	.word	0x3fd34413
 8017490:	0801d4a6 	.word	0x0801d4a6
 8017494:	0801d4bd 	.word	0x0801d4bd
 8017498:	7ff00000 	.word	0x7ff00000
 801749c:	0801d4a2 	.word	0x0801d4a2
 80174a0:	0801d499 	.word	0x0801d499
 80174a4:	0801d471 	.word	0x0801d471
 80174a8:	3ff80000 	.word	0x3ff80000
 80174ac:	0801d5a8 	.word	0x0801d5a8
 80174b0:	0801d515 	.word	0x0801d515
 80174b4:	2301      	movs	r3, #1
 80174b6:	9309      	str	r3, [sp, #36]	; 0x24
 80174b8:	e7d7      	b.n	801746a <_dtoa_r+0x2c2>
 80174ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174bc:	9301      	str	r3, [sp, #4]
 80174be:	9304      	str	r3, [sp, #16]
 80174c0:	e7ba      	b.n	8017438 <_dtoa_r+0x290>
 80174c2:	3101      	adds	r1, #1
 80174c4:	0052      	lsls	r2, r2, #1
 80174c6:	e7ba      	b.n	801743e <_dtoa_r+0x296>
 80174c8:	69e3      	ldr	r3, [r4, #28]
 80174ca:	9a00      	ldr	r2, [sp, #0]
 80174cc:	601a      	str	r2, [r3, #0]
 80174ce:	9b04      	ldr	r3, [sp, #16]
 80174d0:	2b0e      	cmp	r3, #14
 80174d2:	f200 80a8 	bhi.w	8017626 <_dtoa_r+0x47e>
 80174d6:	2d00      	cmp	r5, #0
 80174d8:	f000 80a5 	beq.w	8017626 <_dtoa_r+0x47e>
 80174dc:	f1bb 0f00 	cmp.w	fp, #0
 80174e0:	dd38      	ble.n	8017554 <_dtoa_r+0x3ac>
 80174e2:	4bc0      	ldr	r3, [pc, #768]	; (80177e4 <_dtoa_r+0x63c>)
 80174e4:	f00b 020f 	and.w	r2, fp, #15
 80174e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80174ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80174f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80174f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80174f8:	d019      	beq.n	801752e <_dtoa_r+0x386>
 80174fa:	4bbb      	ldr	r3, [pc, #748]	; (80177e8 <_dtoa_r+0x640>)
 80174fc:	ec51 0b18 	vmov	r0, r1, d8
 8017500:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017504:	f7e9 f9ca 	bl	800089c <__aeabi_ddiv>
 8017508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801750c:	f008 080f 	and.w	r8, r8, #15
 8017510:	2503      	movs	r5, #3
 8017512:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80177e8 <_dtoa_r+0x640>
 8017516:	f1b8 0f00 	cmp.w	r8, #0
 801751a:	d10a      	bne.n	8017532 <_dtoa_r+0x38a>
 801751c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017520:	4632      	mov	r2, r6
 8017522:	463b      	mov	r3, r7
 8017524:	f7e9 f9ba 	bl	800089c <__aeabi_ddiv>
 8017528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801752c:	e02b      	b.n	8017586 <_dtoa_r+0x3de>
 801752e:	2502      	movs	r5, #2
 8017530:	e7ef      	b.n	8017512 <_dtoa_r+0x36a>
 8017532:	f018 0f01 	tst.w	r8, #1
 8017536:	d008      	beq.n	801754a <_dtoa_r+0x3a2>
 8017538:	4630      	mov	r0, r6
 801753a:	4639      	mov	r1, r7
 801753c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017540:	f7e9 f882 	bl	8000648 <__aeabi_dmul>
 8017544:	3501      	adds	r5, #1
 8017546:	4606      	mov	r6, r0
 8017548:	460f      	mov	r7, r1
 801754a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801754e:	f109 0908 	add.w	r9, r9, #8
 8017552:	e7e0      	b.n	8017516 <_dtoa_r+0x36e>
 8017554:	f000 809f 	beq.w	8017696 <_dtoa_r+0x4ee>
 8017558:	f1cb 0600 	rsb	r6, fp, #0
 801755c:	4ba1      	ldr	r3, [pc, #644]	; (80177e4 <_dtoa_r+0x63c>)
 801755e:	4fa2      	ldr	r7, [pc, #648]	; (80177e8 <_dtoa_r+0x640>)
 8017560:	f006 020f 	and.w	r2, r6, #15
 8017564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801756c:	ec51 0b18 	vmov	r0, r1, d8
 8017570:	f7e9 f86a 	bl	8000648 <__aeabi_dmul>
 8017574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017578:	1136      	asrs	r6, r6, #4
 801757a:	2300      	movs	r3, #0
 801757c:	2502      	movs	r5, #2
 801757e:	2e00      	cmp	r6, #0
 8017580:	d17e      	bne.n	8017680 <_dtoa_r+0x4d8>
 8017582:	2b00      	cmp	r3, #0
 8017584:	d1d0      	bne.n	8017528 <_dtoa_r+0x380>
 8017586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017588:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801758c:	2b00      	cmp	r3, #0
 801758e:	f000 8084 	beq.w	801769a <_dtoa_r+0x4f2>
 8017592:	4b96      	ldr	r3, [pc, #600]	; (80177ec <_dtoa_r+0x644>)
 8017594:	2200      	movs	r2, #0
 8017596:	4640      	mov	r0, r8
 8017598:	4649      	mov	r1, r9
 801759a:	f7e9 fac7 	bl	8000b2c <__aeabi_dcmplt>
 801759e:	2800      	cmp	r0, #0
 80175a0:	d07b      	beq.n	801769a <_dtoa_r+0x4f2>
 80175a2:	9b04      	ldr	r3, [sp, #16]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d078      	beq.n	801769a <_dtoa_r+0x4f2>
 80175a8:	9b01      	ldr	r3, [sp, #4]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	dd39      	ble.n	8017622 <_dtoa_r+0x47a>
 80175ae:	4b90      	ldr	r3, [pc, #576]	; (80177f0 <_dtoa_r+0x648>)
 80175b0:	2200      	movs	r2, #0
 80175b2:	4640      	mov	r0, r8
 80175b4:	4649      	mov	r1, r9
 80175b6:	f7e9 f847 	bl	8000648 <__aeabi_dmul>
 80175ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175be:	9e01      	ldr	r6, [sp, #4]
 80175c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80175c4:	3501      	adds	r5, #1
 80175c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80175ca:	4628      	mov	r0, r5
 80175cc:	f7e8 ffd2 	bl	8000574 <__aeabi_i2d>
 80175d0:	4642      	mov	r2, r8
 80175d2:	464b      	mov	r3, r9
 80175d4:	f7e9 f838 	bl	8000648 <__aeabi_dmul>
 80175d8:	4b86      	ldr	r3, [pc, #536]	; (80177f4 <_dtoa_r+0x64c>)
 80175da:	2200      	movs	r2, #0
 80175dc:	f7e8 fe7e 	bl	80002dc <__adddf3>
 80175e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80175e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175e8:	9303      	str	r3, [sp, #12]
 80175ea:	2e00      	cmp	r6, #0
 80175ec:	d158      	bne.n	80176a0 <_dtoa_r+0x4f8>
 80175ee:	4b82      	ldr	r3, [pc, #520]	; (80177f8 <_dtoa_r+0x650>)
 80175f0:	2200      	movs	r2, #0
 80175f2:	4640      	mov	r0, r8
 80175f4:	4649      	mov	r1, r9
 80175f6:	f7e8 fe6f 	bl	80002d8 <__aeabi_dsub>
 80175fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80175fe:	4680      	mov	r8, r0
 8017600:	4689      	mov	r9, r1
 8017602:	f7e9 fab1 	bl	8000b68 <__aeabi_dcmpgt>
 8017606:	2800      	cmp	r0, #0
 8017608:	f040 8296 	bne.w	8017b38 <_dtoa_r+0x990>
 801760c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017610:	4640      	mov	r0, r8
 8017612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017616:	4649      	mov	r1, r9
 8017618:	f7e9 fa88 	bl	8000b2c <__aeabi_dcmplt>
 801761c:	2800      	cmp	r0, #0
 801761e:	f040 8289 	bne.w	8017b34 <_dtoa_r+0x98c>
 8017622:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017628:	2b00      	cmp	r3, #0
 801762a:	f2c0 814e 	blt.w	80178ca <_dtoa_r+0x722>
 801762e:	f1bb 0f0e 	cmp.w	fp, #14
 8017632:	f300 814a 	bgt.w	80178ca <_dtoa_r+0x722>
 8017636:	4b6b      	ldr	r3, [pc, #428]	; (80177e4 <_dtoa_r+0x63c>)
 8017638:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801763c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017642:	2b00      	cmp	r3, #0
 8017644:	f280 80dc 	bge.w	8017800 <_dtoa_r+0x658>
 8017648:	9b04      	ldr	r3, [sp, #16]
 801764a:	2b00      	cmp	r3, #0
 801764c:	f300 80d8 	bgt.w	8017800 <_dtoa_r+0x658>
 8017650:	f040 826f 	bne.w	8017b32 <_dtoa_r+0x98a>
 8017654:	4b68      	ldr	r3, [pc, #416]	; (80177f8 <_dtoa_r+0x650>)
 8017656:	2200      	movs	r2, #0
 8017658:	4640      	mov	r0, r8
 801765a:	4649      	mov	r1, r9
 801765c:	f7e8 fff4 	bl	8000648 <__aeabi_dmul>
 8017660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017664:	f7e9 fa76 	bl	8000b54 <__aeabi_dcmpge>
 8017668:	9e04      	ldr	r6, [sp, #16]
 801766a:	4637      	mov	r7, r6
 801766c:	2800      	cmp	r0, #0
 801766e:	f040 8245 	bne.w	8017afc <_dtoa_r+0x954>
 8017672:	9d00      	ldr	r5, [sp, #0]
 8017674:	2331      	movs	r3, #49	; 0x31
 8017676:	f805 3b01 	strb.w	r3, [r5], #1
 801767a:	f10b 0b01 	add.w	fp, fp, #1
 801767e:	e241      	b.n	8017b04 <_dtoa_r+0x95c>
 8017680:	07f2      	lsls	r2, r6, #31
 8017682:	d505      	bpl.n	8017690 <_dtoa_r+0x4e8>
 8017684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017688:	f7e8 ffde 	bl	8000648 <__aeabi_dmul>
 801768c:	3501      	adds	r5, #1
 801768e:	2301      	movs	r3, #1
 8017690:	1076      	asrs	r6, r6, #1
 8017692:	3708      	adds	r7, #8
 8017694:	e773      	b.n	801757e <_dtoa_r+0x3d6>
 8017696:	2502      	movs	r5, #2
 8017698:	e775      	b.n	8017586 <_dtoa_r+0x3de>
 801769a:	9e04      	ldr	r6, [sp, #16]
 801769c:	465f      	mov	r7, fp
 801769e:	e792      	b.n	80175c6 <_dtoa_r+0x41e>
 80176a0:	9900      	ldr	r1, [sp, #0]
 80176a2:	4b50      	ldr	r3, [pc, #320]	; (80177e4 <_dtoa_r+0x63c>)
 80176a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80176a8:	4431      	add	r1, r6
 80176aa:	9102      	str	r1, [sp, #8]
 80176ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80176ae:	eeb0 9a47 	vmov.f32	s18, s14
 80176b2:	eef0 9a67 	vmov.f32	s19, s15
 80176b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80176ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80176be:	2900      	cmp	r1, #0
 80176c0:	d044      	beq.n	801774c <_dtoa_r+0x5a4>
 80176c2:	494e      	ldr	r1, [pc, #312]	; (80177fc <_dtoa_r+0x654>)
 80176c4:	2000      	movs	r0, #0
 80176c6:	f7e9 f8e9 	bl	800089c <__aeabi_ddiv>
 80176ca:	ec53 2b19 	vmov	r2, r3, d9
 80176ce:	f7e8 fe03 	bl	80002d8 <__aeabi_dsub>
 80176d2:	9d00      	ldr	r5, [sp, #0]
 80176d4:	ec41 0b19 	vmov	d9, r0, r1
 80176d8:	4649      	mov	r1, r9
 80176da:	4640      	mov	r0, r8
 80176dc:	f7e9 fa64 	bl	8000ba8 <__aeabi_d2iz>
 80176e0:	4606      	mov	r6, r0
 80176e2:	f7e8 ff47 	bl	8000574 <__aeabi_i2d>
 80176e6:	4602      	mov	r2, r0
 80176e8:	460b      	mov	r3, r1
 80176ea:	4640      	mov	r0, r8
 80176ec:	4649      	mov	r1, r9
 80176ee:	f7e8 fdf3 	bl	80002d8 <__aeabi_dsub>
 80176f2:	3630      	adds	r6, #48	; 0x30
 80176f4:	f805 6b01 	strb.w	r6, [r5], #1
 80176f8:	ec53 2b19 	vmov	r2, r3, d9
 80176fc:	4680      	mov	r8, r0
 80176fe:	4689      	mov	r9, r1
 8017700:	f7e9 fa14 	bl	8000b2c <__aeabi_dcmplt>
 8017704:	2800      	cmp	r0, #0
 8017706:	d164      	bne.n	80177d2 <_dtoa_r+0x62a>
 8017708:	4642      	mov	r2, r8
 801770a:	464b      	mov	r3, r9
 801770c:	4937      	ldr	r1, [pc, #220]	; (80177ec <_dtoa_r+0x644>)
 801770e:	2000      	movs	r0, #0
 8017710:	f7e8 fde2 	bl	80002d8 <__aeabi_dsub>
 8017714:	ec53 2b19 	vmov	r2, r3, d9
 8017718:	f7e9 fa08 	bl	8000b2c <__aeabi_dcmplt>
 801771c:	2800      	cmp	r0, #0
 801771e:	f040 80b6 	bne.w	801788e <_dtoa_r+0x6e6>
 8017722:	9b02      	ldr	r3, [sp, #8]
 8017724:	429d      	cmp	r5, r3
 8017726:	f43f af7c 	beq.w	8017622 <_dtoa_r+0x47a>
 801772a:	4b31      	ldr	r3, [pc, #196]	; (80177f0 <_dtoa_r+0x648>)
 801772c:	ec51 0b19 	vmov	r0, r1, d9
 8017730:	2200      	movs	r2, #0
 8017732:	f7e8 ff89 	bl	8000648 <__aeabi_dmul>
 8017736:	4b2e      	ldr	r3, [pc, #184]	; (80177f0 <_dtoa_r+0x648>)
 8017738:	ec41 0b19 	vmov	d9, r0, r1
 801773c:	2200      	movs	r2, #0
 801773e:	4640      	mov	r0, r8
 8017740:	4649      	mov	r1, r9
 8017742:	f7e8 ff81 	bl	8000648 <__aeabi_dmul>
 8017746:	4680      	mov	r8, r0
 8017748:	4689      	mov	r9, r1
 801774a:	e7c5      	b.n	80176d8 <_dtoa_r+0x530>
 801774c:	ec51 0b17 	vmov	r0, r1, d7
 8017750:	f7e8 ff7a 	bl	8000648 <__aeabi_dmul>
 8017754:	9b02      	ldr	r3, [sp, #8]
 8017756:	9d00      	ldr	r5, [sp, #0]
 8017758:	930f      	str	r3, [sp, #60]	; 0x3c
 801775a:	ec41 0b19 	vmov	d9, r0, r1
 801775e:	4649      	mov	r1, r9
 8017760:	4640      	mov	r0, r8
 8017762:	f7e9 fa21 	bl	8000ba8 <__aeabi_d2iz>
 8017766:	4606      	mov	r6, r0
 8017768:	f7e8 ff04 	bl	8000574 <__aeabi_i2d>
 801776c:	3630      	adds	r6, #48	; 0x30
 801776e:	4602      	mov	r2, r0
 8017770:	460b      	mov	r3, r1
 8017772:	4640      	mov	r0, r8
 8017774:	4649      	mov	r1, r9
 8017776:	f7e8 fdaf 	bl	80002d8 <__aeabi_dsub>
 801777a:	f805 6b01 	strb.w	r6, [r5], #1
 801777e:	9b02      	ldr	r3, [sp, #8]
 8017780:	429d      	cmp	r5, r3
 8017782:	4680      	mov	r8, r0
 8017784:	4689      	mov	r9, r1
 8017786:	f04f 0200 	mov.w	r2, #0
 801778a:	d124      	bne.n	80177d6 <_dtoa_r+0x62e>
 801778c:	4b1b      	ldr	r3, [pc, #108]	; (80177fc <_dtoa_r+0x654>)
 801778e:	ec51 0b19 	vmov	r0, r1, d9
 8017792:	f7e8 fda3 	bl	80002dc <__adddf3>
 8017796:	4602      	mov	r2, r0
 8017798:	460b      	mov	r3, r1
 801779a:	4640      	mov	r0, r8
 801779c:	4649      	mov	r1, r9
 801779e:	f7e9 f9e3 	bl	8000b68 <__aeabi_dcmpgt>
 80177a2:	2800      	cmp	r0, #0
 80177a4:	d173      	bne.n	801788e <_dtoa_r+0x6e6>
 80177a6:	ec53 2b19 	vmov	r2, r3, d9
 80177aa:	4914      	ldr	r1, [pc, #80]	; (80177fc <_dtoa_r+0x654>)
 80177ac:	2000      	movs	r0, #0
 80177ae:	f7e8 fd93 	bl	80002d8 <__aeabi_dsub>
 80177b2:	4602      	mov	r2, r0
 80177b4:	460b      	mov	r3, r1
 80177b6:	4640      	mov	r0, r8
 80177b8:	4649      	mov	r1, r9
 80177ba:	f7e9 f9b7 	bl	8000b2c <__aeabi_dcmplt>
 80177be:	2800      	cmp	r0, #0
 80177c0:	f43f af2f 	beq.w	8017622 <_dtoa_r+0x47a>
 80177c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80177c6:	1e6b      	subs	r3, r5, #1
 80177c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80177ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80177ce:	2b30      	cmp	r3, #48	; 0x30
 80177d0:	d0f8      	beq.n	80177c4 <_dtoa_r+0x61c>
 80177d2:	46bb      	mov	fp, r7
 80177d4:	e04a      	b.n	801786c <_dtoa_r+0x6c4>
 80177d6:	4b06      	ldr	r3, [pc, #24]	; (80177f0 <_dtoa_r+0x648>)
 80177d8:	f7e8 ff36 	bl	8000648 <__aeabi_dmul>
 80177dc:	4680      	mov	r8, r0
 80177de:	4689      	mov	r9, r1
 80177e0:	e7bd      	b.n	801775e <_dtoa_r+0x5b6>
 80177e2:	bf00      	nop
 80177e4:	0801d5a8 	.word	0x0801d5a8
 80177e8:	0801d580 	.word	0x0801d580
 80177ec:	3ff00000 	.word	0x3ff00000
 80177f0:	40240000 	.word	0x40240000
 80177f4:	401c0000 	.word	0x401c0000
 80177f8:	40140000 	.word	0x40140000
 80177fc:	3fe00000 	.word	0x3fe00000
 8017800:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017804:	9d00      	ldr	r5, [sp, #0]
 8017806:	4642      	mov	r2, r8
 8017808:	464b      	mov	r3, r9
 801780a:	4630      	mov	r0, r6
 801780c:	4639      	mov	r1, r7
 801780e:	f7e9 f845 	bl	800089c <__aeabi_ddiv>
 8017812:	f7e9 f9c9 	bl	8000ba8 <__aeabi_d2iz>
 8017816:	9001      	str	r0, [sp, #4]
 8017818:	f7e8 feac 	bl	8000574 <__aeabi_i2d>
 801781c:	4642      	mov	r2, r8
 801781e:	464b      	mov	r3, r9
 8017820:	f7e8 ff12 	bl	8000648 <__aeabi_dmul>
 8017824:	4602      	mov	r2, r0
 8017826:	460b      	mov	r3, r1
 8017828:	4630      	mov	r0, r6
 801782a:	4639      	mov	r1, r7
 801782c:	f7e8 fd54 	bl	80002d8 <__aeabi_dsub>
 8017830:	9e01      	ldr	r6, [sp, #4]
 8017832:	9f04      	ldr	r7, [sp, #16]
 8017834:	3630      	adds	r6, #48	; 0x30
 8017836:	f805 6b01 	strb.w	r6, [r5], #1
 801783a:	9e00      	ldr	r6, [sp, #0]
 801783c:	1bae      	subs	r6, r5, r6
 801783e:	42b7      	cmp	r7, r6
 8017840:	4602      	mov	r2, r0
 8017842:	460b      	mov	r3, r1
 8017844:	d134      	bne.n	80178b0 <_dtoa_r+0x708>
 8017846:	f7e8 fd49 	bl	80002dc <__adddf3>
 801784a:	4642      	mov	r2, r8
 801784c:	464b      	mov	r3, r9
 801784e:	4606      	mov	r6, r0
 8017850:	460f      	mov	r7, r1
 8017852:	f7e9 f989 	bl	8000b68 <__aeabi_dcmpgt>
 8017856:	b9c8      	cbnz	r0, 801788c <_dtoa_r+0x6e4>
 8017858:	4642      	mov	r2, r8
 801785a:	464b      	mov	r3, r9
 801785c:	4630      	mov	r0, r6
 801785e:	4639      	mov	r1, r7
 8017860:	f7e9 f95a 	bl	8000b18 <__aeabi_dcmpeq>
 8017864:	b110      	cbz	r0, 801786c <_dtoa_r+0x6c4>
 8017866:	9b01      	ldr	r3, [sp, #4]
 8017868:	07db      	lsls	r3, r3, #31
 801786a:	d40f      	bmi.n	801788c <_dtoa_r+0x6e4>
 801786c:	4651      	mov	r1, sl
 801786e:	4620      	mov	r0, r4
 8017870:	f000 fbcc 	bl	801800c <_Bfree>
 8017874:	2300      	movs	r3, #0
 8017876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017878:	702b      	strb	r3, [r5, #0]
 801787a:	f10b 0301 	add.w	r3, fp, #1
 801787e:	6013      	str	r3, [r2, #0]
 8017880:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017882:	2b00      	cmp	r3, #0
 8017884:	f43f ace2 	beq.w	801724c <_dtoa_r+0xa4>
 8017888:	601d      	str	r5, [r3, #0]
 801788a:	e4df      	b.n	801724c <_dtoa_r+0xa4>
 801788c:	465f      	mov	r7, fp
 801788e:	462b      	mov	r3, r5
 8017890:	461d      	mov	r5, r3
 8017892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017896:	2a39      	cmp	r2, #57	; 0x39
 8017898:	d106      	bne.n	80178a8 <_dtoa_r+0x700>
 801789a:	9a00      	ldr	r2, [sp, #0]
 801789c:	429a      	cmp	r2, r3
 801789e:	d1f7      	bne.n	8017890 <_dtoa_r+0x6e8>
 80178a0:	9900      	ldr	r1, [sp, #0]
 80178a2:	2230      	movs	r2, #48	; 0x30
 80178a4:	3701      	adds	r7, #1
 80178a6:	700a      	strb	r2, [r1, #0]
 80178a8:	781a      	ldrb	r2, [r3, #0]
 80178aa:	3201      	adds	r2, #1
 80178ac:	701a      	strb	r2, [r3, #0]
 80178ae:	e790      	b.n	80177d2 <_dtoa_r+0x62a>
 80178b0:	4ba3      	ldr	r3, [pc, #652]	; (8017b40 <_dtoa_r+0x998>)
 80178b2:	2200      	movs	r2, #0
 80178b4:	f7e8 fec8 	bl	8000648 <__aeabi_dmul>
 80178b8:	2200      	movs	r2, #0
 80178ba:	2300      	movs	r3, #0
 80178bc:	4606      	mov	r6, r0
 80178be:	460f      	mov	r7, r1
 80178c0:	f7e9 f92a 	bl	8000b18 <__aeabi_dcmpeq>
 80178c4:	2800      	cmp	r0, #0
 80178c6:	d09e      	beq.n	8017806 <_dtoa_r+0x65e>
 80178c8:	e7d0      	b.n	801786c <_dtoa_r+0x6c4>
 80178ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178cc:	2a00      	cmp	r2, #0
 80178ce:	f000 80ca 	beq.w	8017a66 <_dtoa_r+0x8be>
 80178d2:	9a07      	ldr	r2, [sp, #28]
 80178d4:	2a01      	cmp	r2, #1
 80178d6:	f300 80ad 	bgt.w	8017a34 <_dtoa_r+0x88c>
 80178da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80178dc:	2a00      	cmp	r2, #0
 80178de:	f000 80a5 	beq.w	8017a2c <_dtoa_r+0x884>
 80178e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80178e6:	9e08      	ldr	r6, [sp, #32]
 80178e8:	9d05      	ldr	r5, [sp, #20]
 80178ea:	9a05      	ldr	r2, [sp, #20]
 80178ec:	441a      	add	r2, r3
 80178ee:	9205      	str	r2, [sp, #20]
 80178f0:	9a06      	ldr	r2, [sp, #24]
 80178f2:	2101      	movs	r1, #1
 80178f4:	441a      	add	r2, r3
 80178f6:	4620      	mov	r0, r4
 80178f8:	9206      	str	r2, [sp, #24]
 80178fa:	f000 fc87 	bl	801820c <__i2b>
 80178fe:	4607      	mov	r7, r0
 8017900:	b165      	cbz	r5, 801791c <_dtoa_r+0x774>
 8017902:	9b06      	ldr	r3, [sp, #24]
 8017904:	2b00      	cmp	r3, #0
 8017906:	dd09      	ble.n	801791c <_dtoa_r+0x774>
 8017908:	42ab      	cmp	r3, r5
 801790a:	9a05      	ldr	r2, [sp, #20]
 801790c:	bfa8      	it	ge
 801790e:	462b      	movge	r3, r5
 8017910:	1ad2      	subs	r2, r2, r3
 8017912:	9205      	str	r2, [sp, #20]
 8017914:	9a06      	ldr	r2, [sp, #24]
 8017916:	1aed      	subs	r5, r5, r3
 8017918:	1ad3      	subs	r3, r2, r3
 801791a:	9306      	str	r3, [sp, #24]
 801791c:	9b08      	ldr	r3, [sp, #32]
 801791e:	b1f3      	cbz	r3, 801795e <_dtoa_r+0x7b6>
 8017920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017922:	2b00      	cmp	r3, #0
 8017924:	f000 80a3 	beq.w	8017a6e <_dtoa_r+0x8c6>
 8017928:	2e00      	cmp	r6, #0
 801792a:	dd10      	ble.n	801794e <_dtoa_r+0x7a6>
 801792c:	4639      	mov	r1, r7
 801792e:	4632      	mov	r2, r6
 8017930:	4620      	mov	r0, r4
 8017932:	f000 fd2b 	bl	801838c <__pow5mult>
 8017936:	4652      	mov	r2, sl
 8017938:	4601      	mov	r1, r0
 801793a:	4607      	mov	r7, r0
 801793c:	4620      	mov	r0, r4
 801793e:	f000 fc7b 	bl	8018238 <__multiply>
 8017942:	4651      	mov	r1, sl
 8017944:	4680      	mov	r8, r0
 8017946:	4620      	mov	r0, r4
 8017948:	f000 fb60 	bl	801800c <_Bfree>
 801794c:	46c2      	mov	sl, r8
 801794e:	9b08      	ldr	r3, [sp, #32]
 8017950:	1b9a      	subs	r2, r3, r6
 8017952:	d004      	beq.n	801795e <_dtoa_r+0x7b6>
 8017954:	4651      	mov	r1, sl
 8017956:	4620      	mov	r0, r4
 8017958:	f000 fd18 	bl	801838c <__pow5mult>
 801795c:	4682      	mov	sl, r0
 801795e:	2101      	movs	r1, #1
 8017960:	4620      	mov	r0, r4
 8017962:	f000 fc53 	bl	801820c <__i2b>
 8017966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017968:	2b00      	cmp	r3, #0
 801796a:	4606      	mov	r6, r0
 801796c:	f340 8081 	ble.w	8017a72 <_dtoa_r+0x8ca>
 8017970:	461a      	mov	r2, r3
 8017972:	4601      	mov	r1, r0
 8017974:	4620      	mov	r0, r4
 8017976:	f000 fd09 	bl	801838c <__pow5mult>
 801797a:	9b07      	ldr	r3, [sp, #28]
 801797c:	2b01      	cmp	r3, #1
 801797e:	4606      	mov	r6, r0
 8017980:	dd7a      	ble.n	8017a78 <_dtoa_r+0x8d0>
 8017982:	f04f 0800 	mov.w	r8, #0
 8017986:	6933      	ldr	r3, [r6, #16]
 8017988:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801798c:	6918      	ldr	r0, [r3, #16]
 801798e:	f000 fbef 	bl	8018170 <__hi0bits>
 8017992:	f1c0 0020 	rsb	r0, r0, #32
 8017996:	9b06      	ldr	r3, [sp, #24]
 8017998:	4418      	add	r0, r3
 801799a:	f010 001f 	ands.w	r0, r0, #31
 801799e:	f000 8094 	beq.w	8017aca <_dtoa_r+0x922>
 80179a2:	f1c0 0320 	rsb	r3, r0, #32
 80179a6:	2b04      	cmp	r3, #4
 80179a8:	f340 8085 	ble.w	8017ab6 <_dtoa_r+0x90e>
 80179ac:	9b05      	ldr	r3, [sp, #20]
 80179ae:	f1c0 001c 	rsb	r0, r0, #28
 80179b2:	4403      	add	r3, r0
 80179b4:	9305      	str	r3, [sp, #20]
 80179b6:	9b06      	ldr	r3, [sp, #24]
 80179b8:	4403      	add	r3, r0
 80179ba:	4405      	add	r5, r0
 80179bc:	9306      	str	r3, [sp, #24]
 80179be:	9b05      	ldr	r3, [sp, #20]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	dd05      	ble.n	80179d0 <_dtoa_r+0x828>
 80179c4:	4651      	mov	r1, sl
 80179c6:	461a      	mov	r2, r3
 80179c8:	4620      	mov	r0, r4
 80179ca:	f000 fd39 	bl	8018440 <__lshift>
 80179ce:	4682      	mov	sl, r0
 80179d0:	9b06      	ldr	r3, [sp, #24]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	dd05      	ble.n	80179e2 <_dtoa_r+0x83a>
 80179d6:	4631      	mov	r1, r6
 80179d8:	461a      	mov	r2, r3
 80179da:	4620      	mov	r0, r4
 80179dc:	f000 fd30 	bl	8018440 <__lshift>
 80179e0:	4606      	mov	r6, r0
 80179e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d072      	beq.n	8017ace <_dtoa_r+0x926>
 80179e8:	4631      	mov	r1, r6
 80179ea:	4650      	mov	r0, sl
 80179ec:	f000 fd94 	bl	8018518 <__mcmp>
 80179f0:	2800      	cmp	r0, #0
 80179f2:	da6c      	bge.n	8017ace <_dtoa_r+0x926>
 80179f4:	2300      	movs	r3, #0
 80179f6:	4651      	mov	r1, sl
 80179f8:	220a      	movs	r2, #10
 80179fa:	4620      	mov	r0, r4
 80179fc:	f000 fb28 	bl	8018050 <__multadd>
 8017a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017a06:	4682      	mov	sl, r0
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	f000 81b0 	beq.w	8017d6e <_dtoa_r+0xbc6>
 8017a0e:	2300      	movs	r3, #0
 8017a10:	4639      	mov	r1, r7
 8017a12:	220a      	movs	r2, #10
 8017a14:	4620      	mov	r0, r4
 8017a16:	f000 fb1b 	bl	8018050 <__multadd>
 8017a1a:	9b01      	ldr	r3, [sp, #4]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	4607      	mov	r7, r0
 8017a20:	f300 8096 	bgt.w	8017b50 <_dtoa_r+0x9a8>
 8017a24:	9b07      	ldr	r3, [sp, #28]
 8017a26:	2b02      	cmp	r3, #2
 8017a28:	dc59      	bgt.n	8017ade <_dtoa_r+0x936>
 8017a2a:	e091      	b.n	8017b50 <_dtoa_r+0x9a8>
 8017a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017a32:	e758      	b.n	80178e6 <_dtoa_r+0x73e>
 8017a34:	9b04      	ldr	r3, [sp, #16]
 8017a36:	1e5e      	subs	r6, r3, #1
 8017a38:	9b08      	ldr	r3, [sp, #32]
 8017a3a:	42b3      	cmp	r3, r6
 8017a3c:	bfbf      	itttt	lt
 8017a3e:	9b08      	ldrlt	r3, [sp, #32]
 8017a40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017a42:	9608      	strlt	r6, [sp, #32]
 8017a44:	1af3      	sublt	r3, r6, r3
 8017a46:	bfb4      	ite	lt
 8017a48:	18d2      	addlt	r2, r2, r3
 8017a4a:	1b9e      	subge	r6, r3, r6
 8017a4c:	9b04      	ldr	r3, [sp, #16]
 8017a4e:	bfbc      	itt	lt
 8017a50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017a52:	2600      	movlt	r6, #0
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	bfb7      	itett	lt
 8017a58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8017a5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017a60:	1a9d      	sublt	r5, r3, r2
 8017a62:	2300      	movlt	r3, #0
 8017a64:	e741      	b.n	80178ea <_dtoa_r+0x742>
 8017a66:	9e08      	ldr	r6, [sp, #32]
 8017a68:	9d05      	ldr	r5, [sp, #20]
 8017a6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017a6c:	e748      	b.n	8017900 <_dtoa_r+0x758>
 8017a6e:	9a08      	ldr	r2, [sp, #32]
 8017a70:	e770      	b.n	8017954 <_dtoa_r+0x7ac>
 8017a72:	9b07      	ldr	r3, [sp, #28]
 8017a74:	2b01      	cmp	r3, #1
 8017a76:	dc19      	bgt.n	8017aac <_dtoa_r+0x904>
 8017a78:	9b02      	ldr	r3, [sp, #8]
 8017a7a:	b9bb      	cbnz	r3, 8017aac <_dtoa_r+0x904>
 8017a7c:	9b03      	ldr	r3, [sp, #12]
 8017a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a82:	b99b      	cbnz	r3, 8017aac <_dtoa_r+0x904>
 8017a84:	9b03      	ldr	r3, [sp, #12]
 8017a86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a8a:	0d1b      	lsrs	r3, r3, #20
 8017a8c:	051b      	lsls	r3, r3, #20
 8017a8e:	b183      	cbz	r3, 8017ab2 <_dtoa_r+0x90a>
 8017a90:	9b05      	ldr	r3, [sp, #20]
 8017a92:	3301      	adds	r3, #1
 8017a94:	9305      	str	r3, [sp, #20]
 8017a96:	9b06      	ldr	r3, [sp, #24]
 8017a98:	3301      	adds	r3, #1
 8017a9a:	9306      	str	r3, [sp, #24]
 8017a9c:	f04f 0801 	mov.w	r8, #1
 8017aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	f47f af6f 	bne.w	8017986 <_dtoa_r+0x7de>
 8017aa8:	2001      	movs	r0, #1
 8017aaa:	e774      	b.n	8017996 <_dtoa_r+0x7ee>
 8017aac:	f04f 0800 	mov.w	r8, #0
 8017ab0:	e7f6      	b.n	8017aa0 <_dtoa_r+0x8f8>
 8017ab2:	4698      	mov	r8, r3
 8017ab4:	e7f4      	b.n	8017aa0 <_dtoa_r+0x8f8>
 8017ab6:	d082      	beq.n	80179be <_dtoa_r+0x816>
 8017ab8:	9a05      	ldr	r2, [sp, #20]
 8017aba:	331c      	adds	r3, #28
 8017abc:	441a      	add	r2, r3
 8017abe:	9205      	str	r2, [sp, #20]
 8017ac0:	9a06      	ldr	r2, [sp, #24]
 8017ac2:	441a      	add	r2, r3
 8017ac4:	441d      	add	r5, r3
 8017ac6:	9206      	str	r2, [sp, #24]
 8017ac8:	e779      	b.n	80179be <_dtoa_r+0x816>
 8017aca:	4603      	mov	r3, r0
 8017acc:	e7f4      	b.n	8017ab8 <_dtoa_r+0x910>
 8017ace:	9b04      	ldr	r3, [sp, #16]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	dc37      	bgt.n	8017b44 <_dtoa_r+0x99c>
 8017ad4:	9b07      	ldr	r3, [sp, #28]
 8017ad6:	2b02      	cmp	r3, #2
 8017ad8:	dd34      	ble.n	8017b44 <_dtoa_r+0x99c>
 8017ada:	9b04      	ldr	r3, [sp, #16]
 8017adc:	9301      	str	r3, [sp, #4]
 8017ade:	9b01      	ldr	r3, [sp, #4]
 8017ae0:	b963      	cbnz	r3, 8017afc <_dtoa_r+0x954>
 8017ae2:	4631      	mov	r1, r6
 8017ae4:	2205      	movs	r2, #5
 8017ae6:	4620      	mov	r0, r4
 8017ae8:	f000 fab2 	bl	8018050 <__multadd>
 8017aec:	4601      	mov	r1, r0
 8017aee:	4606      	mov	r6, r0
 8017af0:	4650      	mov	r0, sl
 8017af2:	f000 fd11 	bl	8018518 <__mcmp>
 8017af6:	2800      	cmp	r0, #0
 8017af8:	f73f adbb 	bgt.w	8017672 <_dtoa_r+0x4ca>
 8017afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017afe:	9d00      	ldr	r5, [sp, #0]
 8017b00:	ea6f 0b03 	mvn.w	fp, r3
 8017b04:	f04f 0800 	mov.w	r8, #0
 8017b08:	4631      	mov	r1, r6
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	f000 fa7e 	bl	801800c <_Bfree>
 8017b10:	2f00      	cmp	r7, #0
 8017b12:	f43f aeab 	beq.w	801786c <_dtoa_r+0x6c4>
 8017b16:	f1b8 0f00 	cmp.w	r8, #0
 8017b1a:	d005      	beq.n	8017b28 <_dtoa_r+0x980>
 8017b1c:	45b8      	cmp	r8, r7
 8017b1e:	d003      	beq.n	8017b28 <_dtoa_r+0x980>
 8017b20:	4641      	mov	r1, r8
 8017b22:	4620      	mov	r0, r4
 8017b24:	f000 fa72 	bl	801800c <_Bfree>
 8017b28:	4639      	mov	r1, r7
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f000 fa6e 	bl	801800c <_Bfree>
 8017b30:	e69c      	b.n	801786c <_dtoa_r+0x6c4>
 8017b32:	2600      	movs	r6, #0
 8017b34:	4637      	mov	r7, r6
 8017b36:	e7e1      	b.n	8017afc <_dtoa_r+0x954>
 8017b38:	46bb      	mov	fp, r7
 8017b3a:	4637      	mov	r7, r6
 8017b3c:	e599      	b.n	8017672 <_dtoa_r+0x4ca>
 8017b3e:	bf00      	nop
 8017b40:	40240000 	.word	0x40240000
 8017b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	f000 80c8 	beq.w	8017cdc <_dtoa_r+0xb34>
 8017b4c:	9b04      	ldr	r3, [sp, #16]
 8017b4e:	9301      	str	r3, [sp, #4]
 8017b50:	2d00      	cmp	r5, #0
 8017b52:	dd05      	ble.n	8017b60 <_dtoa_r+0x9b8>
 8017b54:	4639      	mov	r1, r7
 8017b56:	462a      	mov	r2, r5
 8017b58:	4620      	mov	r0, r4
 8017b5a:	f000 fc71 	bl	8018440 <__lshift>
 8017b5e:	4607      	mov	r7, r0
 8017b60:	f1b8 0f00 	cmp.w	r8, #0
 8017b64:	d05b      	beq.n	8017c1e <_dtoa_r+0xa76>
 8017b66:	6879      	ldr	r1, [r7, #4]
 8017b68:	4620      	mov	r0, r4
 8017b6a:	f000 fa0f 	bl	8017f8c <_Balloc>
 8017b6e:	4605      	mov	r5, r0
 8017b70:	b928      	cbnz	r0, 8017b7e <_dtoa_r+0x9d6>
 8017b72:	4b83      	ldr	r3, [pc, #524]	; (8017d80 <_dtoa_r+0xbd8>)
 8017b74:	4602      	mov	r2, r0
 8017b76:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017b7a:	f7ff bb2e 	b.w	80171da <_dtoa_r+0x32>
 8017b7e:	693a      	ldr	r2, [r7, #16]
 8017b80:	3202      	adds	r2, #2
 8017b82:	0092      	lsls	r2, r2, #2
 8017b84:	f107 010c 	add.w	r1, r7, #12
 8017b88:	300c      	adds	r0, #12
 8017b8a:	f7ff fa6e 	bl	801706a <memcpy>
 8017b8e:	2201      	movs	r2, #1
 8017b90:	4629      	mov	r1, r5
 8017b92:	4620      	mov	r0, r4
 8017b94:	f000 fc54 	bl	8018440 <__lshift>
 8017b98:	9b00      	ldr	r3, [sp, #0]
 8017b9a:	3301      	adds	r3, #1
 8017b9c:	9304      	str	r3, [sp, #16]
 8017b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ba2:	4413      	add	r3, r2
 8017ba4:	9308      	str	r3, [sp, #32]
 8017ba6:	9b02      	ldr	r3, [sp, #8]
 8017ba8:	f003 0301 	and.w	r3, r3, #1
 8017bac:	46b8      	mov	r8, r7
 8017bae:	9306      	str	r3, [sp, #24]
 8017bb0:	4607      	mov	r7, r0
 8017bb2:	9b04      	ldr	r3, [sp, #16]
 8017bb4:	4631      	mov	r1, r6
 8017bb6:	3b01      	subs	r3, #1
 8017bb8:	4650      	mov	r0, sl
 8017bba:	9301      	str	r3, [sp, #4]
 8017bbc:	f7ff fa6a 	bl	8017094 <quorem>
 8017bc0:	4641      	mov	r1, r8
 8017bc2:	9002      	str	r0, [sp, #8]
 8017bc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017bc8:	4650      	mov	r0, sl
 8017bca:	f000 fca5 	bl	8018518 <__mcmp>
 8017bce:	463a      	mov	r2, r7
 8017bd0:	9005      	str	r0, [sp, #20]
 8017bd2:	4631      	mov	r1, r6
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	f000 fcbb 	bl	8018550 <__mdiff>
 8017bda:	68c2      	ldr	r2, [r0, #12]
 8017bdc:	4605      	mov	r5, r0
 8017bde:	bb02      	cbnz	r2, 8017c22 <_dtoa_r+0xa7a>
 8017be0:	4601      	mov	r1, r0
 8017be2:	4650      	mov	r0, sl
 8017be4:	f000 fc98 	bl	8018518 <__mcmp>
 8017be8:	4602      	mov	r2, r0
 8017bea:	4629      	mov	r1, r5
 8017bec:	4620      	mov	r0, r4
 8017bee:	9209      	str	r2, [sp, #36]	; 0x24
 8017bf0:	f000 fa0c 	bl	801800c <_Bfree>
 8017bf4:	9b07      	ldr	r3, [sp, #28]
 8017bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bf8:	9d04      	ldr	r5, [sp, #16]
 8017bfa:	ea43 0102 	orr.w	r1, r3, r2
 8017bfe:	9b06      	ldr	r3, [sp, #24]
 8017c00:	4319      	orrs	r1, r3
 8017c02:	d110      	bne.n	8017c26 <_dtoa_r+0xa7e>
 8017c04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017c08:	d029      	beq.n	8017c5e <_dtoa_r+0xab6>
 8017c0a:	9b05      	ldr	r3, [sp, #20]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	dd02      	ble.n	8017c16 <_dtoa_r+0xa6e>
 8017c10:	9b02      	ldr	r3, [sp, #8]
 8017c12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017c16:	9b01      	ldr	r3, [sp, #4]
 8017c18:	f883 9000 	strb.w	r9, [r3]
 8017c1c:	e774      	b.n	8017b08 <_dtoa_r+0x960>
 8017c1e:	4638      	mov	r0, r7
 8017c20:	e7ba      	b.n	8017b98 <_dtoa_r+0x9f0>
 8017c22:	2201      	movs	r2, #1
 8017c24:	e7e1      	b.n	8017bea <_dtoa_r+0xa42>
 8017c26:	9b05      	ldr	r3, [sp, #20]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	db04      	blt.n	8017c36 <_dtoa_r+0xa8e>
 8017c2c:	9907      	ldr	r1, [sp, #28]
 8017c2e:	430b      	orrs	r3, r1
 8017c30:	9906      	ldr	r1, [sp, #24]
 8017c32:	430b      	orrs	r3, r1
 8017c34:	d120      	bne.n	8017c78 <_dtoa_r+0xad0>
 8017c36:	2a00      	cmp	r2, #0
 8017c38:	dded      	ble.n	8017c16 <_dtoa_r+0xa6e>
 8017c3a:	4651      	mov	r1, sl
 8017c3c:	2201      	movs	r2, #1
 8017c3e:	4620      	mov	r0, r4
 8017c40:	f000 fbfe 	bl	8018440 <__lshift>
 8017c44:	4631      	mov	r1, r6
 8017c46:	4682      	mov	sl, r0
 8017c48:	f000 fc66 	bl	8018518 <__mcmp>
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	dc03      	bgt.n	8017c58 <_dtoa_r+0xab0>
 8017c50:	d1e1      	bne.n	8017c16 <_dtoa_r+0xa6e>
 8017c52:	f019 0f01 	tst.w	r9, #1
 8017c56:	d0de      	beq.n	8017c16 <_dtoa_r+0xa6e>
 8017c58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017c5c:	d1d8      	bne.n	8017c10 <_dtoa_r+0xa68>
 8017c5e:	9a01      	ldr	r2, [sp, #4]
 8017c60:	2339      	movs	r3, #57	; 0x39
 8017c62:	7013      	strb	r3, [r2, #0]
 8017c64:	462b      	mov	r3, r5
 8017c66:	461d      	mov	r5, r3
 8017c68:	3b01      	subs	r3, #1
 8017c6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017c6e:	2a39      	cmp	r2, #57	; 0x39
 8017c70:	d06c      	beq.n	8017d4c <_dtoa_r+0xba4>
 8017c72:	3201      	adds	r2, #1
 8017c74:	701a      	strb	r2, [r3, #0]
 8017c76:	e747      	b.n	8017b08 <_dtoa_r+0x960>
 8017c78:	2a00      	cmp	r2, #0
 8017c7a:	dd07      	ble.n	8017c8c <_dtoa_r+0xae4>
 8017c7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017c80:	d0ed      	beq.n	8017c5e <_dtoa_r+0xab6>
 8017c82:	9a01      	ldr	r2, [sp, #4]
 8017c84:	f109 0301 	add.w	r3, r9, #1
 8017c88:	7013      	strb	r3, [r2, #0]
 8017c8a:	e73d      	b.n	8017b08 <_dtoa_r+0x960>
 8017c8c:	9b04      	ldr	r3, [sp, #16]
 8017c8e:	9a08      	ldr	r2, [sp, #32]
 8017c90:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017c94:	4293      	cmp	r3, r2
 8017c96:	d043      	beq.n	8017d20 <_dtoa_r+0xb78>
 8017c98:	4651      	mov	r1, sl
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	220a      	movs	r2, #10
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	f000 f9d6 	bl	8018050 <__multadd>
 8017ca4:	45b8      	cmp	r8, r7
 8017ca6:	4682      	mov	sl, r0
 8017ca8:	f04f 0300 	mov.w	r3, #0
 8017cac:	f04f 020a 	mov.w	r2, #10
 8017cb0:	4641      	mov	r1, r8
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	d107      	bne.n	8017cc6 <_dtoa_r+0xb1e>
 8017cb6:	f000 f9cb 	bl	8018050 <__multadd>
 8017cba:	4680      	mov	r8, r0
 8017cbc:	4607      	mov	r7, r0
 8017cbe:	9b04      	ldr	r3, [sp, #16]
 8017cc0:	3301      	adds	r3, #1
 8017cc2:	9304      	str	r3, [sp, #16]
 8017cc4:	e775      	b.n	8017bb2 <_dtoa_r+0xa0a>
 8017cc6:	f000 f9c3 	bl	8018050 <__multadd>
 8017cca:	4639      	mov	r1, r7
 8017ccc:	4680      	mov	r8, r0
 8017cce:	2300      	movs	r3, #0
 8017cd0:	220a      	movs	r2, #10
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	f000 f9bc 	bl	8018050 <__multadd>
 8017cd8:	4607      	mov	r7, r0
 8017cda:	e7f0      	b.n	8017cbe <_dtoa_r+0xb16>
 8017cdc:	9b04      	ldr	r3, [sp, #16]
 8017cde:	9301      	str	r3, [sp, #4]
 8017ce0:	9d00      	ldr	r5, [sp, #0]
 8017ce2:	4631      	mov	r1, r6
 8017ce4:	4650      	mov	r0, sl
 8017ce6:	f7ff f9d5 	bl	8017094 <quorem>
 8017cea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017cee:	9b00      	ldr	r3, [sp, #0]
 8017cf0:	f805 9b01 	strb.w	r9, [r5], #1
 8017cf4:	1aea      	subs	r2, r5, r3
 8017cf6:	9b01      	ldr	r3, [sp, #4]
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	dd07      	ble.n	8017d0c <_dtoa_r+0xb64>
 8017cfc:	4651      	mov	r1, sl
 8017cfe:	2300      	movs	r3, #0
 8017d00:	220a      	movs	r2, #10
 8017d02:	4620      	mov	r0, r4
 8017d04:	f000 f9a4 	bl	8018050 <__multadd>
 8017d08:	4682      	mov	sl, r0
 8017d0a:	e7ea      	b.n	8017ce2 <_dtoa_r+0xb3a>
 8017d0c:	9b01      	ldr	r3, [sp, #4]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	bfc8      	it	gt
 8017d12:	461d      	movgt	r5, r3
 8017d14:	9b00      	ldr	r3, [sp, #0]
 8017d16:	bfd8      	it	le
 8017d18:	2501      	movle	r5, #1
 8017d1a:	441d      	add	r5, r3
 8017d1c:	f04f 0800 	mov.w	r8, #0
 8017d20:	4651      	mov	r1, sl
 8017d22:	2201      	movs	r2, #1
 8017d24:	4620      	mov	r0, r4
 8017d26:	f000 fb8b 	bl	8018440 <__lshift>
 8017d2a:	4631      	mov	r1, r6
 8017d2c:	4682      	mov	sl, r0
 8017d2e:	f000 fbf3 	bl	8018518 <__mcmp>
 8017d32:	2800      	cmp	r0, #0
 8017d34:	dc96      	bgt.n	8017c64 <_dtoa_r+0xabc>
 8017d36:	d102      	bne.n	8017d3e <_dtoa_r+0xb96>
 8017d38:	f019 0f01 	tst.w	r9, #1
 8017d3c:	d192      	bne.n	8017c64 <_dtoa_r+0xabc>
 8017d3e:	462b      	mov	r3, r5
 8017d40:	461d      	mov	r5, r3
 8017d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017d46:	2a30      	cmp	r2, #48	; 0x30
 8017d48:	d0fa      	beq.n	8017d40 <_dtoa_r+0xb98>
 8017d4a:	e6dd      	b.n	8017b08 <_dtoa_r+0x960>
 8017d4c:	9a00      	ldr	r2, [sp, #0]
 8017d4e:	429a      	cmp	r2, r3
 8017d50:	d189      	bne.n	8017c66 <_dtoa_r+0xabe>
 8017d52:	f10b 0b01 	add.w	fp, fp, #1
 8017d56:	2331      	movs	r3, #49	; 0x31
 8017d58:	e796      	b.n	8017c88 <_dtoa_r+0xae0>
 8017d5a:	4b0a      	ldr	r3, [pc, #40]	; (8017d84 <_dtoa_r+0xbdc>)
 8017d5c:	f7ff ba99 	b.w	8017292 <_dtoa_r+0xea>
 8017d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	f47f aa6d 	bne.w	8017242 <_dtoa_r+0x9a>
 8017d68:	4b07      	ldr	r3, [pc, #28]	; (8017d88 <_dtoa_r+0xbe0>)
 8017d6a:	f7ff ba92 	b.w	8017292 <_dtoa_r+0xea>
 8017d6e:	9b01      	ldr	r3, [sp, #4]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	dcb5      	bgt.n	8017ce0 <_dtoa_r+0xb38>
 8017d74:	9b07      	ldr	r3, [sp, #28]
 8017d76:	2b02      	cmp	r3, #2
 8017d78:	f73f aeb1 	bgt.w	8017ade <_dtoa_r+0x936>
 8017d7c:	e7b0      	b.n	8017ce0 <_dtoa_r+0xb38>
 8017d7e:	bf00      	nop
 8017d80:	0801d515 	.word	0x0801d515
 8017d84:	0801d470 	.word	0x0801d470
 8017d88:	0801d499 	.word	0x0801d499

08017d8c <_free_r>:
 8017d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d8e:	2900      	cmp	r1, #0
 8017d90:	d044      	beq.n	8017e1c <_free_r+0x90>
 8017d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d96:	9001      	str	r0, [sp, #4]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8017d9e:	bfb8      	it	lt
 8017da0:	18e4      	addlt	r4, r4, r3
 8017da2:	f000 f8e7 	bl	8017f74 <__malloc_lock>
 8017da6:	4a1e      	ldr	r2, [pc, #120]	; (8017e20 <_free_r+0x94>)
 8017da8:	9801      	ldr	r0, [sp, #4]
 8017daa:	6813      	ldr	r3, [r2, #0]
 8017dac:	b933      	cbnz	r3, 8017dbc <_free_r+0x30>
 8017dae:	6063      	str	r3, [r4, #4]
 8017db0:	6014      	str	r4, [r2, #0]
 8017db2:	b003      	add	sp, #12
 8017db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017db8:	f000 b8e2 	b.w	8017f80 <__malloc_unlock>
 8017dbc:	42a3      	cmp	r3, r4
 8017dbe:	d908      	bls.n	8017dd2 <_free_r+0x46>
 8017dc0:	6825      	ldr	r5, [r4, #0]
 8017dc2:	1961      	adds	r1, r4, r5
 8017dc4:	428b      	cmp	r3, r1
 8017dc6:	bf01      	itttt	eq
 8017dc8:	6819      	ldreq	r1, [r3, #0]
 8017dca:	685b      	ldreq	r3, [r3, #4]
 8017dcc:	1949      	addeq	r1, r1, r5
 8017dce:	6021      	streq	r1, [r4, #0]
 8017dd0:	e7ed      	b.n	8017dae <_free_r+0x22>
 8017dd2:	461a      	mov	r2, r3
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	b10b      	cbz	r3, 8017ddc <_free_r+0x50>
 8017dd8:	42a3      	cmp	r3, r4
 8017dda:	d9fa      	bls.n	8017dd2 <_free_r+0x46>
 8017ddc:	6811      	ldr	r1, [r2, #0]
 8017dde:	1855      	adds	r5, r2, r1
 8017de0:	42a5      	cmp	r5, r4
 8017de2:	d10b      	bne.n	8017dfc <_free_r+0x70>
 8017de4:	6824      	ldr	r4, [r4, #0]
 8017de6:	4421      	add	r1, r4
 8017de8:	1854      	adds	r4, r2, r1
 8017dea:	42a3      	cmp	r3, r4
 8017dec:	6011      	str	r1, [r2, #0]
 8017dee:	d1e0      	bne.n	8017db2 <_free_r+0x26>
 8017df0:	681c      	ldr	r4, [r3, #0]
 8017df2:	685b      	ldr	r3, [r3, #4]
 8017df4:	6053      	str	r3, [r2, #4]
 8017df6:	440c      	add	r4, r1
 8017df8:	6014      	str	r4, [r2, #0]
 8017dfa:	e7da      	b.n	8017db2 <_free_r+0x26>
 8017dfc:	d902      	bls.n	8017e04 <_free_r+0x78>
 8017dfe:	230c      	movs	r3, #12
 8017e00:	6003      	str	r3, [r0, #0]
 8017e02:	e7d6      	b.n	8017db2 <_free_r+0x26>
 8017e04:	6825      	ldr	r5, [r4, #0]
 8017e06:	1961      	adds	r1, r4, r5
 8017e08:	428b      	cmp	r3, r1
 8017e0a:	bf04      	itt	eq
 8017e0c:	6819      	ldreq	r1, [r3, #0]
 8017e0e:	685b      	ldreq	r3, [r3, #4]
 8017e10:	6063      	str	r3, [r4, #4]
 8017e12:	bf04      	itt	eq
 8017e14:	1949      	addeq	r1, r1, r5
 8017e16:	6021      	streq	r1, [r4, #0]
 8017e18:	6054      	str	r4, [r2, #4]
 8017e1a:	e7ca      	b.n	8017db2 <_free_r+0x26>
 8017e1c:	b003      	add	sp, #12
 8017e1e:	bd30      	pop	{r4, r5, pc}
 8017e20:	200033c0 	.word	0x200033c0

08017e24 <malloc>:
 8017e24:	4b02      	ldr	r3, [pc, #8]	; (8017e30 <malloc+0xc>)
 8017e26:	4601      	mov	r1, r0
 8017e28:	6818      	ldr	r0, [r3, #0]
 8017e2a:	f000 b823 	b.w	8017e74 <_malloc_r>
 8017e2e:	bf00      	nop
 8017e30:	200003d0 	.word	0x200003d0

08017e34 <sbrk_aligned>:
 8017e34:	b570      	push	{r4, r5, r6, lr}
 8017e36:	4e0e      	ldr	r6, [pc, #56]	; (8017e70 <sbrk_aligned+0x3c>)
 8017e38:	460c      	mov	r4, r1
 8017e3a:	6831      	ldr	r1, [r6, #0]
 8017e3c:	4605      	mov	r5, r0
 8017e3e:	b911      	cbnz	r1, 8017e46 <sbrk_aligned+0x12>
 8017e40:	f001 fe1a 	bl	8019a78 <_sbrk_r>
 8017e44:	6030      	str	r0, [r6, #0]
 8017e46:	4621      	mov	r1, r4
 8017e48:	4628      	mov	r0, r5
 8017e4a:	f001 fe15 	bl	8019a78 <_sbrk_r>
 8017e4e:	1c43      	adds	r3, r0, #1
 8017e50:	d00a      	beq.n	8017e68 <sbrk_aligned+0x34>
 8017e52:	1cc4      	adds	r4, r0, #3
 8017e54:	f024 0403 	bic.w	r4, r4, #3
 8017e58:	42a0      	cmp	r0, r4
 8017e5a:	d007      	beq.n	8017e6c <sbrk_aligned+0x38>
 8017e5c:	1a21      	subs	r1, r4, r0
 8017e5e:	4628      	mov	r0, r5
 8017e60:	f001 fe0a 	bl	8019a78 <_sbrk_r>
 8017e64:	3001      	adds	r0, #1
 8017e66:	d101      	bne.n	8017e6c <sbrk_aligned+0x38>
 8017e68:	f04f 34ff 	mov.w	r4, #4294967295
 8017e6c:	4620      	mov	r0, r4
 8017e6e:	bd70      	pop	{r4, r5, r6, pc}
 8017e70:	200033c4 	.word	0x200033c4

08017e74 <_malloc_r>:
 8017e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e78:	1ccd      	adds	r5, r1, #3
 8017e7a:	f025 0503 	bic.w	r5, r5, #3
 8017e7e:	3508      	adds	r5, #8
 8017e80:	2d0c      	cmp	r5, #12
 8017e82:	bf38      	it	cc
 8017e84:	250c      	movcc	r5, #12
 8017e86:	2d00      	cmp	r5, #0
 8017e88:	4607      	mov	r7, r0
 8017e8a:	db01      	blt.n	8017e90 <_malloc_r+0x1c>
 8017e8c:	42a9      	cmp	r1, r5
 8017e8e:	d905      	bls.n	8017e9c <_malloc_r+0x28>
 8017e90:	230c      	movs	r3, #12
 8017e92:	603b      	str	r3, [r7, #0]
 8017e94:	2600      	movs	r6, #0
 8017e96:	4630      	mov	r0, r6
 8017e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017f70 <_malloc_r+0xfc>
 8017ea0:	f000 f868 	bl	8017f74 <__malloc_lock>
 8017ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8017ea8:	461c      	mov	r4, r3
 8017eaa:	bb5c      	cbnz	r4, 8017f04 <_malloc_r+0x90>
 8017eac:	4629      	mov	r1, r5
 8017eae:	4638      	mov	r0, r7
 8017eb0:	f7ff ffc0 	bl	8017e34 <sbrk_aligned>
 8017eb4:	1c43      	adds	r3, r0, #1
 8017eb6:	4604      	mov	r4, r0
 8017eb8:	d155      	bne.n	8017f66 <_malloc_r+0xf2>
 8017eba:	f8d8 4000 	ldr.w	r4, [r8]
 8017ebe:	4626      	mov	r6, r4
 8017ec0:	2e00      	cmp	r6, #0
 8017ec2:	d145      	bne.n	8017f50 <_malloc_r+0xdc>
 8017ec4:	2c00      	cmp	r4, #0
 8017ec6:	d048      	beq.n	8017f5a <_malloc_r+0xe6>
 8017ec8:	6823      	ldr	r3, [r4, #0]
 8017eca:	4631      	mov	r1, r6
 8017ecc:	4638      	mov	r0, r7
 8017ece:	eb04 0903 	add.w	r9, r4, r3
 8017ed2:	f001 fdd1 	bl	8019a78 <_sbrk_r>
 8017ed6:	4581      	cmp	r9, r0
 8017ed8:	d13f      	bne.n	8017f5a <_malloc_r+0xe6>
 8017eda:	6821      	ldr	r1, [r4, #0]
 8017edc:	1a6d      	subs	r5, r5, r1
 8017ede:	4629      	mov	r1, r5
 8017ee0:	4638      	mov	r0, r7
 8017ee2:	f7ff ffa7 	bl	8017e34 <sbrk_aligned>
 8017ee6:	3001      	adds	r0, #1
 8017ee8:	d037      	beq.n	8017f5a <_malloc_r+0xe6>
 8017eea:	6823      	ldr	r3, [r4, #0]
 8017eec:	442b      	add	r3, r5
 8017eee:	6023      	str	r3, [r4, #0]
 8017ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d038      	beq.n	8017f6a <_malloc_r+0xf6>
 8017ef8:	685a      	ldr	r2, [r3, #4]
 8017efa:	42a2      	cmp	r2, r4
 8017efc:	d12b      	bne.n	8017f56 <_malloc_r+0xe2>
 8017efe:	2200      	movs	r2, #0
 8017f00:	605a      	str	r2, [r3, #4]
 8017f02:	e00f      	b.n	8017f24 <_malloc_r+0xb0>
 8017f04:	6822      	ldr	r2, [r4, #0]
 8017f06:	1b52      	subs	r2, r2, r5
 8017f08:	d41f      	bmi.n	8017f4a <_malloc_r+0xd6>
 8017f0a:	2a0b      	cmp	r2, #11
 8017f0c:	d917      	bls.n	8017f3e <_malloc_r+0xca>
 8017f0e:	1961      	adds	r1, r4, r5
 8017f10:	42a3      	cmp	r3, r4
 8017f12:	6025      	str	r5, [r4, #0]
 8017f14:	bf18      	it	ne
 8017f16:	6059      	strne	r1, [r3, #4]
 8017f18:	6863      	ldr	r3, [r4, #4]
 8017f1a:	bf08      	it	eq
 8017f1c:	f8c8 1000 	streq.w	r1, [r8]
 8017f20:	5162      	str	r2, [r4, r5]
 8017f22:	604b      	str	r3, [r1, #4]
 8017f24:	4638      	mov	r0, r7
 8017f26:	f104 060b 	add.w	r6, r4, #11
 8017f2a:	f000 f829 	bl	8017f80 <__malloc_unlock>
 8017f2e:	f026 0607 	bic.w	r6, r6, #7
 8017f32:	1d23      	adds	r3, r4, #4
 8017f34:	1af2      	subs	r2, r6, r3
 8017f36:	d0ae      	beq.n	8017e96 <_malloc_r+0x22>
 8017f38:	1b9b      	subs	r3, r3, r6
 8017f3a:	50a3      	str	r3, [r4, r2]
 8017f3c:	e7ab      	b.n	8017e96 <_malloc_r+0x22>
 8017f3e:	42a3      	cmp	r3, r4
 8017f40:	6862      	ldr	r2, [r4, #4]
 8017f42:	d1dd      	bne.n	8017f00 <_malloc_r+0x8c>
 8017f44:	f8c8 2000 	str.w	r2, [r8]
 8017f48:	e7ec      	b.n	8017f24 <_malloc_r+0xb0>
 8017f4a:	4623      	mov	r3, r4
 8017f4c:	6864      	ldr	r4, [r4, #4]
 8017f4e:	e7ac      	b.n	8017eaa <_malloc_r+0x36>
 8017f50:	4634      	mov	r4, r6
 8017f52:	6876      	ldr	r6, [r6, #4]
 8017f54:	e7b4      	b.n	8017ec0 <_malloc_r+0x4c>
 8017f56:	4613      	mov	r3, r2
 8017f58:	e7cc      	b.n	8017ef4 <_malloc_r+0x80>
 8017f5a:	230c      	movs	r3, #12
 8017f5c:	603b      	str	r3, [r7, #0]
 8017f5e:	4638      	mov	r0, r7
 8017f60:	f000 f80e 	bl	8017f80 <__malloc_unlock>
 8017f64:	e797      	b.n	8017e96 <_malloc_r+0x22>
 8017f66:	6025      	str	r5, [r4, #0]
 8017f68:	e7dc      	b.n	8017f24 <_malloc_r+0xb0>
 8017f6a:	605b      	str	r3, [r3, #4]
 8017f6c:	deff      	udf	#255	; 0xff
 8017f6e:	bf00      	nop
 8017f70:	200033c0 	.word	0x200033c0

08017f74 <__malloc_lock>:
 8017f74:	4801      	ldr	r0, [pc, #4]	; (8017f7c <__malloc_lock+0x8>)
 8017f76:	f7ff b876 	b.w	8017066 <__retarget_lock_acquire_recursive>
 8017f7a:	bf00      	nop
 8017f7c:	200033bc 	.word	0x200033bc

08017f80 <__malloc_unlock>:
 8017f80:	4801      	ldr	r0, [pc, #4]	; (8017f88 <__malloc_unlock+0x8>)
 8017f82:	f7ff b871 	b.w	8017068 <__retarget_lock_release_recursive>
 8017f86:	bf00      	nop
 8017f88:	200033bc 	.word	0x200033bc

08017f8c <_Balloc>:
 8017f8c:	b570      	push	{r4, r5, r6, lr}
 8017f8e:	69c6      	ldr	r6, [r0, #28]
 8017f90:	4604      	mov	r4, r0
 8017f92:	460d      	mov	r5, r1
 8017f94:	b976      	cbnz	r6, 8017fb4 <_Balloc+0x28>
 8017f96:	2010      	movs	r0, #16
 8017f98:	f7ff ff44 	bl	8017e24 <malloc>
 8017f9c:	4602      	mov	r2, r0
 8017f9e:	61e0      	str	r0, [r4, #28]
 8017fa0:	b920      	cbnz	r0, 8017fac <_Balloc+0x20>
 8017fa2:	4b18      	ldr	r3, [pc, #96]	; (8018004 <_Balloc+0x78>)
 8017fa4:	4818      	ldr	r0, [pc, #96]	; (8018008 <_Balloc+0x7c>)
 8017fa6:	216b      	movs	r1, #107	; 0x6b
 8017fa8:	f001 fd7e 	bl	8019aa8 <__assert_func>
 8017fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017fb0:	6006      	str	r6, [r0, #0]
 8017fb2:	60c6      	str	r6, [r0, #12]
 8017fb4:	69e6      	ldr	r6, [r4, #28]
 8017fb6:	68f3      	ldr	r3, [r6, #12]
 8017fb8:	b183      	cbz	r3, 8017fdc <_Balloc+0x50>
 8017fba:	69e3      	ldr	r3, [r4, #28]
 8017fbc:	68db      	ldr	r3, [r3, #12]
 8017fbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017fc2:	b9b8      	cbnz	r0, 8017ff4 <_Balloc+0x68>
 8017fc4:	2101      	movs	r1, #1
 8017fc6:	fa01 f605 	lsl.w	r6, r1, r5
 8017fca:	1d72      	adds	r2, r6, #5
 8017fcc:	0092      	lsls	r2, r2, #2
 8017fce:	4620      	mov	r0, r4
 8017fd0:	f001 fd88 	bl	8019ae4 <_calloc_r>
 8017fd4:	b160      	cbz	r0, 8017ff0 <_Balloc+0x64>
 8017fd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017fda:	e00e      	b.n	8017ffa <_Balloc+0x6e>
 8017fdc:	2221      	movs	r2, #33	; 0x21
 8017fde:	2104      	movs	r1, #4
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	f001 fd7f 	bl	8019ae4 <_calloc_r>
 8017fe6:	69e3      	ldr	r3, [r4, #28]
 8017fe8:	60f0      	str	r0, [r6, #12]
 8017fea:	68db      	ldr	r3, [r3, #12]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d1e4      	bne.n	8017fba <_Balloc+0x2e>
 8017ff0:	2000      	movs	r0, #0
 8017ff2:	bd70      	pop	{r4, r5, r6, pc}
 8017ff4:	6802      	ldr	r2, [r0, #0]
 8017ff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018000:	e7f7      	b.n	8017ff2 <_Balloc+0x66>
 8018002:	bf00      	nop
 8018004:	0801d4a6 	.word	0x0801d4a6
 8018008:	0801d526 	.word	0x0801d526

0801800c <_Bfree>:
 801800c:	b570      	push	{r4, r5, r6, lr}
 801800e:	69c6      	ldr	r6, [r0, #28]
 8018010:	4605      	mov	r5, r0
 8018012:	460c      	mov	r4, r1
 8018014:	b976      	cbnz	r6, 8018034 <_Bfree+0x28>
 8018016:	2010      	movs	r0, #16
 8018018:	f7ff ff04 	bl	8017e24 <malloc>
 801801c:	4602      	mov	r2, r0
 801801e:	61e8      	str	r0, [r5, #28]
 8018020:	b920      	cbnz	r0, 801802c <_Bfree+0x20>
 8018022:	4b09      	ldr	r3, [pc, #36]	; (8018048 <_Bfree+0x3c>)
 8018024:	4809      	ldr	r0, [pc, #36]	; (801804c <_Bfree+0x40>)
 8018026:	218f      	movs	r1, #143	; 0x8f
 8018028:	f001 fd3e 	bl	8019aa8 <__assert_func>
 801802c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018030:	6006      	str	r6, [r0, #0]
 8018032:	60c6      	str	r6, [r0, #12]
 8018034:	b13c      	cbz	r4, 8018046 <_Bfree+0x3a>
 8018036:	69eb      	ldr	r3, [r5, #28]
 8018038:	6862      	ldr	r2, [r4, #4]
 801803a:	68db      	ldr	r3, [r3, #12]
 801803c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018040:	6021      	str	r1, [r4, #0]
 8018042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018046:	bd70      	pop	{r4, r5, r6, pc}
 8018048:	0801d4a6 	.word	0x0801d4a6
 801804c:	0801d526 	.word	0x0801d526

08018050 <__multadd>:
 8018050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018054:	690d      	ldr	r5, [r1, #16]
 8018056:	4607      	mov	r7, r0
 8018058:	460c      	mov	r4, r1
 801805a:	461e      	mov	r6, r3
 801805c:	f101 0c14 	add.w	ip, r1, #20
 8018060:	2000      	movs	r0, #0
 8018062:	f8dc 3000 	ldr.w	r3, [ip]
 8018066:	b299      	uxth	r1, r3
 8018068:	fb02 6101 	mla	r1, r2, r1, r6
 801806c:	0c1e      	lsrs	r6, r3, #16
 801806e:	0c0b      	lsrs	r3, r1, #16
 8018070:	fb02 3306 	mla	r3, r2, r6, r3
 8018074:	b289      	uxth	r1, r1
 8018076:	3001      	adds	r0, #1
 8018078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801807c:	4285      	cmp	r5, r0
 801807e:	f84c 1b04 	str.w	r1, [ip], #4
 8018082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018086:	dcec      	bgt.n	8018062 <__multadd+0x12>
 8018088:	b30e      	cbz	r6, 80180ce <__multadd+0x7e>
 801808a:	68a3      	ldr	r3, [r4, #8]
 801808c:	42ab      	cmp	r3, r5
 801808e:	dc19      	bgt.n	80180c4 <__multadd+0x74>
 8018090:	6861      	ldr	r1, [r4, #4]
 8018092:	4638      	mov	r0, r7
 8018094:	3101      	adds	r1, #1
 8018096:	f7ff ff79 	bl	8017f8c <_Balloc>
 801809a:	4680      	mov	r8, r0
 801809c:	b928      	cbnz	r0, 80180aa <__multadd+0x5a>
 801809e:	4602      	mov	r2, r0
 80180a0:	4b0c      	ldr	r3, [pc, #48]	; (80180d4 <__multadd+0x84>)
 80180a2:	480d      	ldr	r0, [pc, #52]	; (80180d8 <__multadd+0x88>)
 80180a4:	21ba      	movs	r1, #186	; 0xba
 80180a6:	f001 fcff 	bl	8019aa8 <__assert_func>
 80180aa:	6922      	ldr	r2, [r4, #16]
 80180ac:	3202      	adds	r2, #2
 80180ae:	f104 010c 	add.w	r1, r4, #12
 80180b2:	0092      	lsls	r2, r2, #2
 80180b4:	300c      	adds	r0, #12
 80180b6:	f7fe ffd8 	bl	801706a <memcpy>
 80180ba:	4621      	mov	r1, r4
 80180bc:	4638      	mov	r0, r7
 80180be:	f7ff ffa5 	bl	801800c <_Bfree>
 80180c2:	4644      	mov	r4, r8
 80180c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80180c8:	3501      	adds	r5, #1
 80180ca:	615e      	str	r6, [r3, #20]
 80180cc:	6125      	str	r5, [r4, #16]
 80180ce:	4620      	mov	r0, r4
 80180d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d4:	0801d515 	.word	0x0801d515
 80180d8:	0801d526 	.word	0x0801d526

080180dc <__s2b>:
 80180dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180e0:	460c      	mov	r4, r1
 80180e2:	4615      	mov	r5, r2
 80180e4:	461f      	mov	r7, r3
 80180e6:	2209      	movs	r2, #9
 80180e8:	3308      	adds	r3, #8
 80180ea:	4606      	mov	r6, r0
 80180ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80180f0:	2100      	movs	r1, #0
 80180f2:	2201      	movs	r2, #1
 80180f4:	429a      	cmp	r2, r3
 80180f6:	db09      	blt.n	801810c <__s2b+0x30>
 80180f8:	4630      	mov	r0, r6
 80180fa:	f7ff ff47 	bl	8017f8c <_Balloc>
 80180fe:	b940      	cbnz	r0, 8018112 <__s2b+0x36>
 8018100:	4602      	mov	r2, r0
 8018102:	4b19      	ldr	r3, [pc, #100]	; (8018168 <__s2b+0x8c>)
 8018104:	4819      	ldr	r0, [pc, #100]	; (801816c <__s2b+0x90>)
 8018106:	21d3      	movs	r1, #211	; 0xd3
 8018108:	f001 fcce 	bl	8019aa8 <__assert_func>
 801810c:	0052      	lsls	r2, r2, #1
 801810e:	3101      	adds	r1, #1
 8018110:	e7f0      	b.n	80180f4 <__s2b+0x18>
 8018112:	9b08      	ldr	r3, [sp, #32]
 8018114:	6143      	str	r3, [r0, #20]
 8018116:	2d09      	cmp	r5, #9
 8018118:	f04f 0301 	mov.w	r3, #1
 801811c:	6103      	str	r3, [r0, #16]
 801811e:	dd16      	ble.n	801814e <__s2b+0x72>
 8018120:	f104 0909 	add.w	r9, r4, #9
 8018124:	46c8      	mov	r8, r9
 8018126:	442c      	add	r4, r5
 8018128:	f818 3b01 	ldrb.w	r3, [r8], #1
 801812c:	4601      	mov	r1, r0
 801812e:	3b30      	subs	r3, #48	; 0x30
 8018130:	220a      	movs	r2, #10
 8018132:	4630      	mov	r0, r6
 8018134:	f7ff ff8c 	bl	8018050 <__multadd>
 8018138:	45a0      	cmp	r8, r4
 801813a:	d1f5      	bne.n	8018128 <__s2b+0x4c>
 801813c:	f1a5 0408 	sub.w	r4, r5, #8
 8018140:	444c      	add	r4, r9
 8018142:	1b2d      	subs	r5, r5, r4
 8018144:	1963      	adds	r3, r4, r5
 8018146:	42bb      	cmp	r3, r7
 8018148:	db04      	blt.n	8018154 <__s2b+0x78>
 801814a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801814e:	340a      	adds	r4, #10
 8018150:	2509      	movs	r5, #9
 8018152:	e7f6      	b.n	8018142 <__s2b+0x66>
 8018154:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018158:	4601      	mov	r1, r0
 801815a:	3b30      	subs	r3, #48	; 0x30
 801815c:	220a      	movs	r2, #10
 801815e:	4630      	mov	r0, r6
 8018160:	f7ff ff76 	bl	8018050 <__multadd>
 8018164:	e7ee      	b.n	8018144 <__s2b+0x68>
 8018166:	bf00      	nop
 8018168:	0801d515 	.word	0x0801d515
 801816c:	0801d526 	.word	0x0801d526

08018170 <__hi0bits>:
 8018170:	0c03      	lsrs	r3, r0, #16
 8018172:	041b      	lsls	r3, r3, #16
 8018174:	b9d3      	cbnz	r3, 80181ac <__hi0bits+0x3c>
 8018176:	0400      	lsls	r0, r0, #16
 8018178:	2310      	movs	r3, #16
 801817a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801817e:	bf04      	itt	eq
 8018180:	0200      	lsleq	r0, r0, #8
 8018182:	3308      	addeq	r3, #8
 8018184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018188:	bf04      	itt	eq
 801818a:	0100      	lsleq	r0, r0, #4
 801818c:	3304      	addeq	r3, #4
 801818e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018192:	bf04      	itt	eq
 8018194:	0080      	lsleq	r0, r0, #2
 8018196:	3302      	addeq	r3, #2
 8018198:	2800      	cmp	r0, #0
 801819a:	db05      	blt.n	80181a8 <__hi0bits+0x38>
 801819c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80181a0:	f103 0301 	add.w	r3, r3, #1
 80181a4:	bf08      	it	eq
 80181a6:	2320      	moveq	r3, #32
 80181a8:	4618      	mov	r0, r3
 80181aa:	4770      	bx	lr
 80181ac:	2300      	movs	r3, #0
 80181ae:	e7e4      	b.n	801817a <__hi0bits+0xa>

080181b0 <__lo0bits>:
 80181b0:	6803      	ldr	r3, [r0, #0]
 80181b2:	f013 0207 	ands.w	r2, r3, #7
 80181b6:	d00c      	beq.n	80181d2 <__lo0bits+0x22>
 80181b8:	07d9      	lsls	r1, r3, #31
 80181ba:	d422      	bmi.n	8018202 <__lo0bits+0x52>
 80181bc:	079a      	lsls	r2, r3, #30
 80181be:	bf49      	itett	mi
 80181c0:	085b      	lsrmi	r3, r3, #1
 80181c2:	089b      	lsrpl	r3, r3, #2
 80181c4:	6003      	strmi	r3, [r0, #0]
 80181c6:	2201      	movmi	r2, #1
 80181c8:	bf5c      	itt	pl
 80181ca:	6003      	strpl	r3, [r0, #0]
 80181cc:	2202      	movpl	r2, #2
 80181ce:	4610      	mov	r0, r2
 80181d0:	4770      	bx	lr
 80181d2:	b299      	uxth	r1, r3
 80181d4:	b909      	cbnz	r1, 80181da <__lo0bits+0x2a>
 80181d6:	0c1b      	lsrs	r3, r3, #16
 80181d8:	2210      	movs	r2, #16
 80181da:	b2d9      	uxtb	r1, r3
 80181dc:	b909      	cbnz	r1, 80181e2 <__lo0bits+0x32>
 80181de:	3208      	adds	r2, #8
 80181e0:	0a1b      	lsrs	r3, r3, #8
 80181e2:	0719      	lsls	r1, r3, #28
 80181e4:	bf04      	itt	eq
 80181e6:	091b      	lsreq	r3, r3, #4
 80181e8:	3204      	addeq	r2, #4
 80181ea:	0799      	lsls	r1, r3, #30
 80181ec:	bf04      	itt	eq
 80181ee:	089b      	lsreq	r3, r3, #2
 80181f0:	3202      	addeq	r2, #2
 80181f2:	07d9      	lsls	r1, r3, #31
 80181f4:	d403      	bmi.n	80181fe <__lo0bits+0x4e>
 80181f6:	085b      	lsrs	r3, r3, #1
 80181f8:	f102 0201 	add.w	r2, r2, #1
 80181fc:	d003      	beq.n	8018206 <__lo0bits+0x56>
 80181fe:	6003      	str	r3, [r0, #0]
 8018200:	e7e5      	b.n	80181ce <__lo0bits+0x1e>
 8018202:	2200      	movs	r2, #0
 8018204:	e7e3      	b.n	80181ce <__lo0bits+0x1e>
 8018206:	2220      	movs	r2, #32
 8018208:	e7e1      	b.n	80181ce <__lo0bits+0x1e>
	...

0801820c <__i2b>:
 801820c:	b510      	push	{r4, lr}
 801820e:	460c      	mov	r4, r1
 8018210:	2101      	movs	r1, #1
 8018212:	f7ff febb 	bl	8017f8c <_Balloc>
 8018216:	4602      	mov	r2, r0
 8018218:	b928      	cbnz	r0, 8018226 <__i2b+0x1a>
 801821a:	4b05      	ldr	r3, [pc, #20]	; (8018230 <__i2b+0x24>)
 801821c:	4805      	ldr	r0, [pc, #20]	; (8018234 <__i2b+0x28>)
 801821e:	f240 1145 	movw	r1, #325	; 0x145
 8018222:	f001 fc41 	bl	8019aa8 <__assert_func>
 8018226:	2301      	movs	r3, #1
 8018228:	6144      	str	r4, [r0, #20]
 801822a:	6103      	str	r3, [r0, #16]
 801822c:	bd10      	pop	{r4, pc}
 801822e:	bf00      	nop
 8018230:	0801d515 	.word	0x0801d515
 8018234:	0801d526 	.word	0x0801d526

08018238 <__multiply>:
 8018238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801823c:	4691      	mov	r9, r2
 801823e:	690a      	ldr	r2, [r1, #16]
 8018240:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018244:	429a      	cmp	r2, r3
 8018246:	bfb8      	it	lt
 8018248:	460b      	movlt	r3, r1
 801824a:	460c      	mov	r4, r1
 801824c:	bfbc      	itt	lt
 801824e:	464c      	movlt	r4, r9
 8018250:	4699      	movlt	r9, r3
 8018252:	6927      	ldr	r7, [r4, #16]
 8018254:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018258:	68a3      	ldr	r3, [r4, #8]
 801825a:	6861      	ldr	r1, [r4, #4]
 801825c:	eb07 060a 	add.w	r6, r7, sl
 8018260:	42b3      	cmp	r3, r6
 8018262:	b085      	sub	sp, #20
 8018264:	bfb8      	it	lt
 8018266:	3101      	addlt	r1, #1
 8018268:	f7ff fe90 	bl	8017f8c <_Balloc>
 801826c:	b930      	cbnz	r0, 801827c <__multiply+0x44>
 801826e:	4602      	mov	r2, r0
 8018270:	4b44      	ldr	r3, [pc, #272]	; (8018384 <__multiply+0x14c>)
 8018272:	4845      	ldr	r0, [pc, #276]	; (8018388 <__multiply+0x150>)
 8018274:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018278:	f001 fc16 	bl	8019aa8 <__assert_func>
 801827c:	f100 0514 	add.w	r5, r0, #20
 8018280:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018284:	462b      	mov	r3, r5
 8018286:	2200      	movs	r2, #0
 8018288:	4543      	cmp	r3, r8
 801828a:	d321      	bcc.n	80182d0 <__multiply+0x98>
 801828c:	f104 0314 	add.w	r3, r4, #20
 8018290:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018294:	f109 0314 	add.w	r3, r9, #20
 8018298:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801829c:	9202      	str	r2, [sp, #8]
 801829e:	1b3a      	subs	r2, r7, r4
 80182a0:	3a15      	subs	r2, #21
 80182a2:	f022 0203 	bic.w	r2, r2, #3
 80182a6:	3204      	adds	r2, #4
 80182a8:	f104 0115 	add.w	r1, r4, #21
 80182ac:	428f      	cmp	r7, r1
 80182ae:	bf38      	it	cc
 80182b0:	2204      	movcc	r2, #4
 80182b2:	9201      	str	r2, [sp, #4]
 80182b4:	9a02      	ldr	r2, [sp, #8]
 80182b6:	9303      	str	r3, [sp, #12]
 80182b8:	429a      	cmp	r2, r3
 80182ba:	d80c      	bhi.n	80182d6 <__multiply+0x9e>
 80182bc:	2e00      	cmp	r6, #0
 80182be:	dd03      	ble.n	80182c8 <__multiply+0x90>
 80182c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d05b      	beq.n	8018380 <__multiply+0x148>
 80182c8:	6106      	str	r6, [r0, #16]
 80182ca:	b005      	add	sp, #20
 80182cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182d0:	f843 2b04 	str.w	r2, [r3], #4
 80182d4:	e7d8      	b.n	8018288 <__multiply+0x50>
 80182d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80182da:	f1ba 0f00 	cmp.w	sl, #0
 80182de:	d024      	beq.n	801832a <__multiply+0xf2>
 80182e0:	f104 0e14 	add.w	lr, r4, #20
 80182e4:	46a9      	mov	r9, r5
 80182e6:	f04f 0c00 	mov.w	ip, #0
 80182ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80182ee:	f8d9 1000 	ldr.w	r1, [r9]
 80182f2:	fa1f fb82 	uxth.w	fp, r2
 80182f6:	b289      	uxth	r1, r1
 80182f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80182fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018300:	f8d9 2000 	ldr.w	r2, [r9]
 8018304:	4461      	add	r1, ip
 8018306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801830a:	fb0a c20b 	mla	r2, sl, fp, ip
 801830e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018312:	b289      	uxth	r1, r1
 8018314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018318:	4577      	cmp	r7, lr
 801831a:	f849 1b04 	str.w	r1, [r9], #4
 801831e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018322:	d8e2      	bhi.n	80182ea <__multiply+0xb2>
 8018324:	9a01      	ldr	r2, [sp, #4]
 8018326:	f845 c002 	str.w	ip, [r5, r2]
 801832a:	9a03      	ldr	r2, [sp, #12]
 801832c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018330:	3304      	adds	r3, #4
 8018332:	f1b9 0f00 	cmp.w	r9, #0
 8018336:	d021      	beq.n	801837c <__multiply+0x144>
 8018338:	6829      	ldr	r1, [r5, #0]
 801833a:	f104 0c14 	add.w	ip, r4, #20
 801833e:	46ae      	mov	lr, r5
 8018340:	f04f 0a00 	mov.w	sl, #0
 8018344:	f8bc b000 	ldrh.w	fp, [ip]
 8018348:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801834c:	fb09 220b 	mla	r2, r9, fp, r2
 8018350:	4452      	add	r2, sl
 8018352:	b289      	uxth	r1, r1
 8018354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018358:	f84e 1b04 	str.w	r1, [lr], #4
 801835c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018360:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018364:	f8be 1000 	ldrh.w	r1, [lr]
 8018368:	fb09 110a 	mla	r1, r9, sl, r1
 801836c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018370:	4567      	cmp	r7, ip
 8018372:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018376:	d8e5      	bhi.n	8018344 <__multiply+0x10c>
 8018378:	9a01      	ldr	r2, [sp, #4]
 801837a:	50a9      	str	r1, [r5, r2]
 801837c:	3504      	adds	r5, #4
 801837e:	e799      	b.n	80182b4 <__multiply+0x7c>
 8018380:	3e01      	subs	r6, #1
 8018382:	e79b      	b.n	80182bc <__multiply+0x84>
 8018384:	0801d515 	.word	0x0801d515
 8018388:	0801d526 	.word	0x0801d526

0801838c <__pow5mult>:
 801838c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018390:	4615      	mov	r5, r2
 8018392:	f012 0203 	ands.w	r2, r2, #3
 8018396:	4606      	mov	r6, r0
 8018398:	460f      	mov	r7, r1
 801839a:	d007      	beq.n	80183ac <__pow5mult+0x20>
 801839c:	4c25      	ldr	r4, [pc, #148]	; (8018434 <__pow5mult+0xa8>)
 801839e:	3a01      	subs	r2, #1
 80183a0:	2300      	movs	r3, #0
 80183a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80183a6:	f7ff fe53 	bl	8018050 <__multadd>
 80183aa:	4607      	mov	r7, r0
 80183ac:	10ad      	asrs	r5, r5, #2
 80183ae:	d03d      	beq.n	801842c <__pow5mult+0xa0>
 80183b0:	69f4      	ldr	r4, [r6, #28]
 80183b2:	b97c      	cbnz	r4, 80183d4 <__pow5mult+0x48>
 80183b4:	2010      	movs	r0, #16
 80183b6:	f7ff fd35 	bl	8017e24 <malloc>
 80183ba:	4602      	mov	r2, r0
 80183bc:	61f0      	str	r0, [r6, #28]
 80183be:	b928      	cbnz	r0, 80183cc <__pow5mult+0x40>
 80183c0:	4b1d      	ldr	r3, [pc, #116]	; (8018438 <__pow5mult+0xac>)
 80183c2:	481e      	ldr	r0, [pc, #120]	; (801843c <__pow5mult+0xb0>)
 80183c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80183c8:	f001 fb6e 	bl	8019aa8 <__assert_func>
 80183cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80183d0:	6004      	str	r4, [r0, #0]
 80183d2:	60c4      	str	r4, [r0, #12]
 80183d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80183d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80183dc:	b94c      	cbnz	r4, 80183f2 <__pow5mult+0x66>
 80183de:	f240 2171 	movw	r1, #625	; 0x271
 80183e2:	4630      	mov	r0, r6
 80183e4:	f7ff ff12 	bl	801820c <__i2b>
 80183e8:	2300      	movs	r3, #0
 80183ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80183ee:	4604      	mov	r4, r0
 80183f0:	6003      	str	r3, [r0, #0]
 80183f2:	f04f 0900 	mov.w	r9, #0
 80183f6:	07eb      	lsls	r3, r5, #31
 80183f8:	d50a      	bpl.n	8018410 <__pow5mult+0x84>
 80183fa:	4639      	mov	r1, r7
 80183fc:	4622      	mov	r2, r4
 80183fe:	4630      	mov	r0, r6
 8018400:	f7ff ff1a 	bl	8018238 <__multiply>
 8018404:	4639      	mov	r1, r7
 8018406:	4680      	mov	r8, r0
 8018408:	4630      	mov	r0, r6
 801840a:	f7ff fdff 	bl	801800c <_Bfree>
 801840e:	4647      	mov	r7, r8
 8018410:	106d      	asrs	r5, r5, #1
 8018412:	d00b      	beq.n	801842c <__pow5mult+0xa0>
 8018414:	6820      	ldr	r0, [r4, #0]
 8018416:	b938      	cbnz	r0, 8018428 <__pow5mult+0x9c>
 8018418:	4622      	mov	r2, r4
 801841a:	4621      	mov	r1, r4
 801841c:	4630      	mov	r0, r6
 801841e:	f7ff ff0b 	bl	8018238 <__multiply>
 8018422:	6020      	str	r0, [r4, #0]
 8018424:	f8c0 9000 	str.w	r9, [r0]
 8018428:	4604      	mov	r4, r0
 801842a:	e7e4      	b.n	80183f6 <__pow5mult+0x6a>
 801842c:	4638      	mov	r0, r7
 801842e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018432:	bf00      	nop
 8018434:	0801d670 	.word	0x0801d670
 8018438:	0801d4a6 	.word	0x0801d4a6
 801843c:	0801d526 	.word	0x0801d526

08018440 <__lshift>:
 8018440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018444:	460c      	mov	r4, r1
 8018446:	6849      	ldr	r1, [r1, #4]
 8018448:	6923      	ldr	r3, [r4, #16]
 801844a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801844e:	68a3      	ldr	r3, [r4, #8]
 8018450:	4607      	mov	r7, r0
 8018452:	4691      	mov	r9, r2
 8018454:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018458:	f108 0601 	add.w	r6, r8, #1
 801845c:	42b3      	cmp	r3, r6
 801845e:	db0b      	blt.n	8018478 <__lshift+0x38>
 8018460:	4638      	mov	r0, r7
 8018462:	f7ff fd93 	bl	8017f8c <_Balloc>
 8018466:	4605      	mov	r5, r0
 8018468:	b948      	cbnz	r0, 801847e <__lshift+0x3e>
 801846a:	4602      	mov	r2, r0
 801846c:	4b28      	ldr	r3, [pc, #160]	; (8018510 <__lshift+0xd0>)
 801846e:	4829      	ldr	r0, [pc, #164]	; (8018514 <__lshift+0xd4>)
 8018470:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018474:	f001 fb18 	bl	8019aa8 <__assert_func>
 8018478:	3101      	adds	r1, #1
 801847a:	005b      	lsls	r3, r3, #1
 801847c:	e7ee      	b.n	801845c <__lshift+0x1c>
 801847e:	2300      	movs	r3, #0
 8018480:	f100 0114 	add.w	r1, r0, #20
 8018484:	f100 0210 	add.w	r2, r0, #16
 8018488:	4618      	mov	r0, r3
 801848a:	4553      	cmp	r3, sl
 801848c:	db33      	blt.n	80184f6 <__lshift+0xb6>
 801848e:	6920      	ldr	r0, [r4, #16]
 8018490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018494:	f104 0314 	add.w	r3, r4, #20
 8018498:	f019 091f 	ands.w	r9, r9, #31
 801849c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80184a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80184a4:	d02b      	beq.n	80184fe <__lshift+0xbe>
 80184a6:	f1c9 0e20 	rsb	lr, r9, #32
 80184aa:	468a      	mov	sl, r1
 80184ac:	2200      	movs	r2, #0
 80184ae:	6818      	ldr	r0, [r3, #0]
 80184b0:	fa00 f009 	lsl.w	r0, r0, r9
 80184b4:	4310      	orrs	r0, r2
 80184b6:	f84a 0b04 	str.w	r0, [sl], #4
 80184ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80184be:	459c      	cmp	ip, r3
 80184c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80184c4:	d8f3      	bhi.n	80184ae <__lshift+0x6e>
 80184c6:	ebac 0304 	sub.w	r3, ip, r4
 80184ca:	3b15      	subs	r3, #21
 80184cc:	f023 0303 	bic.w	r3, r3, #3
 80184d0:	3304      	adds	r3, #4
 80184d2:	f104 0015 	add.w	r0, r4, #21
 80184d6:	4584      	cmp	ip, r0
 80184d8:	bf38      	it	cc
 80184da:	2304      	movcc	r3, #4
 80184dc:	50ca      	str	r2, [r1, r3]
 80184de:	b10a      	cbz	r2, 80184e4 <__lshift+0xa4>
 80184e0:	f108 0602 	add.w	r6, r8, #2
 80184e4:	3e01      	subs	r6, #1
 80184e6:	4638      	mov	r0, r7
 80184e8:	612e      	str	r6, [r5, #16]
 80184ea:	4621      	mov	r1, r4
 80184ec:	f7ff fd8e 	bl	801800c <_Bfree>
 80184f0:	4628      	mov	r0, r5
 80184f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80184fa:	3301      	adds	r3, #1
 80184fc:	e7c5      	b.n	801848a <__lshift+0x4a>
 80184fe:	3904      	subs	r1, #4
 8018500:	f853 2b04 	ldr.w	r2, [r3], #4
 8018504:	f841 2f04 	str.w	r2, [r1, #4]!
 8018508:	459c      	cmp	ip, r3
 801850a:	d8f9      	bhi.n	8018500 <__lshift+0xc0>
 801850c:	e7ea      	b.n	80184e4 <__lshift+0xa4>
 801850e:	bf00      	nop
 8018510:	0801d515 	.word	0x0801d515
 8018514:	0801d526 	.word	0x0801d526

08018518 <__mcmp>:
 8018518:	b530      	push	{r4, r5, lr}
 801851a:	6902      	ldr	r2, [r0, #16]
 801851c:	690c      	ldr	r4, [r1, #16]
 801851e:	1b12      	subs	r2, r2, r4
 8018520:	d10e      	bne.n	8018540 <__mcmp+0x28>
 8018522:	f100 0314 	add.w	r3, r0, #20
 8018526:	3114      	adds	r1, #20
 8018528:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801852c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018530:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018534:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018538:	42a5      	cmp	r5, r4
 801853a:	d003      	beq.n	8018544 <__mcmp+0x2c>
 801853c:	d305      	bcc.n	801854a <__mcmp+0x32>
 801853e:	2201      	movs	r2, #1
 8018540:	4610      	mov	r0, r2
 8018542:	bd30      	pop	{r4, r5, pc}
 8018544:	4283      	cmp	r3, r0
 8018546:	d3f3      	bcc.n	8018530 <__mcmp+0x18>
 8018548:	e7fa      	b.n	8018540 <__mcmp+0x28>
 801854a:	f04f 32ff 	mov.w	r2, #4294967295
 801854e:	e7f7      	b.n	8018540 <__mcmp+0x28>

08018550 <__mdiff>:
 8018550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018554:	460c      	mov	r4, r1
 8018556:	4606      	mov	r6, r0
 8018558:	4611      	mov	r1, r2
 801855a:	4620      	mov	r0, r4
 801855c:	4690      	mov	r8, r2
 801855e:	f7ff ffdb 	bl	8018518 <__mcmp>
 8018562:	1e05      	subs	r5, r0, #0
 8018564:	d110      	bne.n	8018588 <__mdiff+0x38>
 8018566:	4629      	mov	r1, r5
 8018568:	4630      	mov	r0, r6
 801856a:	f7ff fd0f 	bl	8017f8c <_Balloc>
 801856e:	b930      	cbnz	r0, 801857e <__mdiff+0x2e>
 8018570:	4b3a      	ldr	r3, [pc, #232]	; (801865c <__mdiff+0x10c>)
 8018572:	4602      	mov	r2, r0
 8018574:	f240 2137 	movw	r1, #567	; 0x237
 8018578:	4839      	ldr	r0, [pc, #228]	; (8018660 <__mdiff+0x110>)
 801857a:	f001 fa95 	bl	8019aa8 <__assert_func>
 801857e:	2301      	movs	r3, #1
 8018580:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018588:	bfa4      	itt	ge
 801858a:	4643      	movge	r3, r8
 801858c:	46a0      	movge	r8, r4
 801858e:	4630      	mov	r0, r6
 8018590:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018594:	bfa6      	itte	ge
 8018596:	461c      	movge	r4, r3
 8018598:	2500      	movge	r5, #0
 801859a:	2501      	movlt	r5, #1
 801859c:	f7ff fcf6 	bl	8017f8c <_Balloc>
 80185a0:	b920      	cbnz	r0, 80185ac <__mdiff+0x5c>
 80185a2:	4b2e      	ldr	r3, [pc, #184]	; (801865c <__mdiff+0x10c>)
 80185a4:	4602      	mov	r2, r0
 80185a6:	f240 2145 	movw	r1, #581	; 0x245
 80185aa:	e7e5      	b.n	8018578 <__mdiff+0x28>
 80185ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80185b0:	6926      	ldr	r6, [r4, #16]
 80185b2:	60c5      	str	r5, [r0, #12]
 80185b4:	f104 0914 	add.w	r9, r4, #20
 80185b8:	f108 0514 	add.w	r5, r8, #20
 80185bc:	f100 0e14 	add.w	lr, r0, #20
 80185c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80185c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80185c8:	f108 0210 	add.w	r2, r8, #16
 80185cc:	46f2      	mov	sl, lr
 80185ce:	2100      	movs	r1, #0
 80185d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80185d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80185d8:	fa11 f88b 	uxtah	r8, r1, fp
 80185dc:	b299      	uxth	r1, r3
 80185de:	0c1b      	lsrs	r3, r3, #16
 80185e0:	eba8 0801 	sub.w	r8, r8, r1
 80185e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80185e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80185ec:	fa1f f888 	uxth.w	r8, r8
 80185f0:	1419      	asrs	r1, r3, #16
 80185f2:	454e      	cmp	r6, r9
 80185f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80185f8:	f84a 3b04 	str.w	r3, [sl], #4
 80185fc:	d8e8      	bhi.n	80185d0 <__mdiff+0x80>
 80185fe:	1b33      	subs	r3, r6, r4
 8018600:	3b15      	subs	r3, #21
 8018602:	f023 0303 	bic.w	r3, r3, #3
 8018606:	3304      	adds	r3, #4
 8018608:	3415      	adds	r4, #21
 801860a:	42a6      	cmp	r6, r4
 801860c:	bf38      	it	cc
 801860e:	2304      	movcc	r3, #4
 8018610:	441d      	add	r5, r3
 8018612:	4473      	add	r3, lr
 8018614:	469e      	mov	lr, r3
 8018616:	462e      	mov	r6, r5
 8018618:	4566      	cmp	r6, ip
 801861a:	d30e      	bcc.n	801863a <__mdiff+0xea>
 801861c:	f10c 0203 	add.w	r2, ip, #3
 8018620:	1b52      	subs	r2, r2, r5
 8018622:	f022 0203 	bic.w	r2, r2, #3
 8018626:	3d03      	subs	r5, #3
 8018628:	45ac      	cmp	ip, r5
 801862a:	bf38      	it	cc
 801862c:	2200      	movcc	r2, #0
 801862e:	4413      	add	r3, r2
 8018630:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018634:	b17a      	cbz	r2, 8018656 <__mdiff+0x106>
 8018636:	6107      	str	r7, [r0, #16]
 8018638:	e7a4      	b.n	8018584 <__mdiff+0x34>
 801863a:	f856 8b04 	ldr.w	r8, [r6], #4
 801863e:	fa11 f288 	uxtah	r2, r1, r8
 8018642:	1414      	asrs	r4, r2, #16
 8018644:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018648:	b292      	uxth	r2, r2
 801864a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801864e:	f84e 2b04 	str.w	r2, [lr], #4
 8018652:	1421      	asrs	r1, r4, #16
 8018654:	e7e0      	b.n	8018618 <__mdiff+0xc8>
 8018656:	3f01      	subs	r7, #1
 8018658:	e7ea      	b.n	8018630 <__mdiff+0xe0>
 801865a:	bf00      	nop
 801865c:	0801d515 	.word	0x0801d515
 8018660:	0801d526 	.word	0x0801d526

08018664 <__ulp>:
 8018664:	b082      	sub	sp, #8
 8018666:	ed8d 0b00 	vstr	d0, [sp]
 801866a:	9a01      	ldr	r2, [sp, #4]
 801866c:	4b0f      	ldr	r3, [pc, #60]	; (80186ac <__ulp+0x48>)
 801866e:	4013      	ands	r3, r2
 8018670:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018674:	2b00      	cmp	r3, #0
 8018676:	dc08      	bgt.n	801868a <__ulp+0x26>
 8018678:	425b      	negs	r3, r3
 801867a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801867e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018682:	da04      	bge.n	801868e <__ulp+0x2a>
 8018684:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018688:	4113      	asrs	r3, r2
 801868a:	2200      	movs	r2, #0
 801868c:	e008      	b.n	80186a0 <__ulp+0x3c>
 801868e:	f1a2 0314 	sub.w	r3, r2, #20
 8018692:	2b1e      	cmp	r3, #30
 8018694:	bfda      	itte	le
 8018696:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801869a:	40da      	lsrle	r2, r3
 801869c:	2201      	movgt	r2, #1
 801869e:	2300      	movs	r3, #0
 80186a0:	4619      	mov	r1, r3
 80186a2:	4610      	mov	r0, r2
 80186a4:	ec41 0b10 	vmov	d0, r0, r1
 80186a8:	b002      	add	sp, #8
 80186aa:	4770      	bx	lr
 80186ac:	7ff00000 	.word	0x7ff00000

080186b0 <__b2d>:
 80186b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186b4:	6906      	ldr	r6, [r0, #16]
 80186b6:	f100 0814 	add.w	r8, r0, #20
 80186ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80186be:	1f37      	subs	r7, r6, #4
 80186c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80186c4:	4610      	mov	r0, r2
 80186c6:	f7ff fd53 	bl	8018170 <__hi0bits>
 80186ca:	f1c0 0320 	rsb	r3, r0, #32
 80186ce:	280a      	cmp	r0, #10
 80186d0:	600b      	str	r3, [r1, #0]
 80186d2:	491b      	ldr	r1, [pc, #108]	; (8018740 <__b2d+0x90>)
 80186d4:	dc15      	bgt.n	8018702 <__b2d+0x52>
 80186d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80186da:	fa22 f30c 	lsr.w	r3, r2, ip
 80186de:	45b8      	cmp	r8, r7
 80186e0:	ea43 0501 	orr.w	r5, r3, r1
 80186e4:	bf34      	ite	cc
 80186e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80186ea:	2300      	movcs	r3, #0
 80186ec:	3015      	adds	r0, #21
 80186ee:	fa02 f000 	lsl.w	r0, r2, r0
 80186f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80186f6:	4303      	orrs	r3, r0
 80186f8:	461c      	mov	r4, r3
 80186fa:	ec45 4b10 	vmov	d0, r4, r5
 80186fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018702:	45b8      	cmp	r8, r7
 8018704:	bf3a      	itte	cc
 8018706:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801870a:	f1a6 0708 	subcc.w	r7, r6, #8
 801870e:	2300      	movcs	r3, #0
 8018710:	380b      	subs	r0, #11
 8018712:	d012      	beq.n	801873a <__b2d+0x8a>
 8018714:	f1c0 0120 	rsb	r1, r0, #32
 8018718:	fa23 f401 	lsr.w	r4, r3, r1
 801871c:	4082      	lsls	r2, r0
 801871e:	4322      	orrs	r2, r4
 8018720:	4547      	cmp	r7, r8
 8018722:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8018726:	bf8c      	ite	hi
 8018728:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801872c:	2200      	movls	r2, #0
 801872e:	4083      	lsls	r3, r0
 8018730:	40ca      	lsrs	r2, r1
 8018732:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018736:	4313      	orrs	r3, r2
 8018738:	e7de      	b.n	80186f8 <__b2d+0x48>
 801873a:	ea42 0501 	orr.w	r5, r2, r1
 801873e:	e7db      	b.n	80186f8 <__b2d+0x48>
 8018740:	3ff00000 	.word	0x3ff00000

08018744 <__d2b>:
 8018744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018748:	460f      	mov	r7, r1
 801874a:	2101      	movs	r1, #1
 801874c:	ec59 8b10 	vmov	r8, r9, d0
 8018750:	4616      	mov	r6, r2
 8018752:	f7ff fc1b 	bl	8017f8c <_Balloc>
 8018756:	4604      	mov	r4, r0
 8018758:	b930      	cbnz	r0, 8018768 <__d2b+0x24>
 801875a:	4602      	mov	r2, r0
 801875c:	4b24      	ldr	r3, [pc, #144]	; (80187f0 <__d2b+0xac>)
 801875e:	4825      	ldr	r0, [pc, #148]	; (80187f4 <__d2b+0xb0>)
 8018760:	f240 310f 	movw	r1, #783	; 0x30f
 8018764:	f001 f9a0 	bl	8019aa8 <__assert_func>
 8018768:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801876c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018770:	bb2d      	cbnz	r5, 80187be <__d2b+0x7a>
 8018772:	9301      	str	r3, [sp, #4]
 8018774:	f1b8 0300 	subs.w	r3, r8, #0
 8018778:	d026      	beq.n	80187c8 <__d2b+0x84>
 801877a:	4668      	mov	r0, sp
 801877c:	9300      	str	r3, [sp, #0]
 801877e:	f7ff fd17 	bl	80181b0 <__lo0bits>
 8018782:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018786:	b1e8      	cbz	r0, 80187c4 <__d2b+0x80>
 8018788:	f1c0 0320 	rsb	r3, r0, #32
 801878c:	fa02 f303 	lsl.w	r3, r2, r3
 8018790:	430b      	orrs	r3, r1
 8018792:	40c2      	lsrs	r2, r0
 8018794:	6163      	str	r3, [r4, #20]
 8018796:	9201      	str	r2, [sp, #4]
 8018798:	9b01      	ldr	r3, [sp, #4]
 801879a:	61a3      	str	r3, [r4, #24]
 801879c:	2b00      	cmp	r3, #0
 801879e:	bf14      	ite	ne
 80187a0:	2202      	movne	r2, #2
 80187a2:	2201      	moveq	r2, #1
 80187a4:	6122      	str	r2, [r4, #16]
 80187a6:	b1bd      	cbz	r5, 80187d8 <__d2b+0x94>
 80187a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80187ac:	4405      	add	r5, r0
 80187ae:	603d      	str	r5, [r7, #0]
 80187b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80187b4:	6030      	str	r0, [r6, #0]
 80187b6:	4620      	mov	r0, r4
 80187b8:	b003      	add	sp, #12
 80187ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80187c2:	e7d6      	b.n	8018772 <__d2b+0x2e>
 80187c4:	6161      	str	r1, [r4, #20]
 80187c6:	e7e7      	b.n	8018798 <__d2b+0x54>
 80187c8:	a801      	add	r0, sp, #4
 80187ca:	f7ff fcf1 	bl	80181b0 <__lo0bits>
 80187ce:	9b01      	ldr	r3, [sp, #4]
 80187d0:	6163      	str	r3, [r4, #20]
 80187d2:	3020      	adds	r0, #32
 80187d4:	2201      	movs	r2, #1
 80187d6:	e7e5      	b.n	80187a4 <__d2b+0x60>
 80187d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80187dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80187e0:	6038      	str	r0, [r7, #0]
 80187e2:	6918      	ldr	r0, [r3, #16]
 80187e4:	f7ff fcc4 	bl	8018170 <__hi0bits>
 80187e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80187ec:	e7e2      	b.n	80187b4 <__d2b+0x70>
 80187ee:	bf00      	nop
 80187f0:	0801d515 	.word	0x0801d515
 80187f4:	0801d526 	.word	0x0801d526

080187f8 <__ratio>:
 80187f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187fc:	4688      	mov	r8, r1
 80187fe:	4669      	mov	r1, sp
 8018800:	4681      	mov	r9, r0
 8018802:	f7ff ff55 	bl	80186b0 <__b2d>
 8018806:	a901      	add	r1, sp, #4
 8018808:	4640      	mov	r0, r8
 801880a:	ec55 4b10 	vmov	r4, r5, d0
 801880e:	f7ff ff4f 	bl	80186b0 <__b2d>
 8018812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018816:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801881a:	eba3 0c02 	sub.w	ip, r3, r2
 801881e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018822:	1a9b      	subs	r3, r3, r2
 8018824:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018828:	ec51 0b10 	vmov	r0, r1, d0
 801882c:	2b00      	cmp	r3, #0
 801882e:	bfd6      	itet	le
 8018830:	460a      	movle	r2, r1
 8018832:	462a      	movgt	r2, r5
 8018834:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018838:	468b      	mov	fp, r1
 801883a:	462f      	mov	r7, r5
 801883c:	bfd4      	ite	le
 801883e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018842:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018846:	4620      	mov	r0, r4
 8018848:	ee10 2a10 	vmov	r2, s0
 801884c:	465b      	mov	r3, fp
 801884e:	4639      	mov	r1, r7
 8018850:	f7e8 f824 	bl	800089c <__aeabi_ddiv>
 8018854:	ec41 0b10 	vmov	d0, r0, r1
 8018858:	b003      	add	sp, #12
 801885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801885e <__copybits>:
 801885e:	3901      	subs	r1, #1
 8018860:	b570      	push	{r4, r5, r6, lr}
 8018862:	1149      	asrs	r1, r1, #5
 8018864:	6914      	ldr	r4, [r2, #16]
 8018866:	3101      	adds	r1, #1
 8018868:	f102 0314 	add.w	r3, r2, #20
 801886c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018870:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018874:	1f05      	subs	r5, r0, #4
 8018876:	42a3      	cmp	r3, r4
 8018878:	d30c      	bcc.n	8018894 <__copybits+0x36>
 801887a:	1aa3      	subs	r3, r4, r2
 801887c:	3b11      	subs	r3, #17
 801887e:	f023 0303 	bic.w	r3, r3, #3
 8018882:	3211      	adds	r2, #17
 8018884:	42a2      	cmp	r2, r4
 8018886:	bf88      	it	hi
 8018888:	2300      	movhi	r3, #0
 801888a:	4418      	add	r0, r3
 801888c:	2300      	movs	r3, #0
 801888e:	4288      	cmp	r0, r1
 8018890:	d305      	bcc.n	801889e <__copybits+0x40>
 8018892:	bd70      	pop	{r4, r5, r6, pc}
 8018894:	f853 6b04 	ldr.w	r6, [r3], #4
 8018898:	f845 6f04 	str.w	r6, [r5, #4]!
 801889c:	e7eb      	b.n	8018876 <__copybits+0x18>
 801889e:	f840 3b04 	str.w	r3, [r0], #4
 80188a2:	e7f4      	b.n	801888e <__copybits+0x30>

080188a4 <__any_on>:
 80188a4:	f100 0214 	add.w	r2, r0, #20
 80188a8:	6900      	ldr	r0, [r0, #16]
 80188aa:	114b      	asrs	r3, r1, #5
 80188ac:	4298      	cmp	r0, r3
 80188ae:	b510      	push	{r4, lr}
 80188b0:	db11      	blt.n	80188d6 <__any_on+0x32>
 80188b2:	dd0a      	ble.n	80188ca <__any_on+0x26>
 80188b4:	f011 011f 	ands.w	r1, r1, #31
 80188b8:	d007      	beq.n	80188ca <__any_on+0x26>
 80188ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80188be:	fa24 f001 	lsr.w	r0, r4, r1
 80188c2:	fa00 f101 	lsl.w	r1, r0, r1
 80188c6:	428c      	cmp	r4, r1
 80188c8:	d10b      	bne.n	80188e2 <__any_on+0x3e>
 80188ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80188ce:	4293      	cmp	r3, r2
 80188d0:	d803      	bhi.n	80188da <__any_on+0x36>
 80188d2:	2000      	movs	r0, #0
 80188d4:	bd10      	pop	{r4, pc}
 80188d6:	4603      	mov	r3, r0
 80188d8:	e7f7      	b.n	80188ca <__any_on+0x26>
 80188da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80188de:	2900      	cmp	r1, #0
 80188e0:	d0f5      	beq.n	80188ce <__any_on+0x2a>
 80188e2:	2001      	movs	r0, #1
 80188e4:	e7f6      	b.n	80188d4 <__any_on+0x30>

080188e6 <sulp>:
 80188e6:	b570      	push	{r4, r5, r6, lr}
 80188e8:	4604      	mov	r4, r0
 80188ea:	460d      	mov	r5, r1
 80188ec:	ec45 4b10 	vmov	d0, r4, r5
 80188f0:	4616      	mov	r6, r2
 80188f2:	f7ff feb7 	bl	8018664 <__ulp>
 80188f6:	ec51 0b10 	vmov	r0, r1, d0
 80188fa:	b17e      	cbz	r6, 801891c <sulp+0x36>
 80188fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018900:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018904:	2b00      	cmp	r3, #0
 8018906:	dd09      	ble.n	801891c <sulp+0x36>
 8018908:	051b      	lsls	r3, r3, #20
 801890a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801890e:	2400      	movs	r4, #0
 8018910:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018914:	4622      	mov	r2, r4
 8018916:	462b      	mov	r3, r5
 8018918:	f7e7 fe96 	bl	8000648 <__aeabi_dmul>
 801891c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018920 <_strtod_l>:
 8018920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018924:	ed2d 8b02 	vpush	{d8}
 8018928:	b09b      	sub	sp, #108	; 0x6c
 801892a:	4604      	mov	r4, r0
 801892c:	9213      	str	r2, [sp, #76]	; 0x4c
 801892e:	2200      	movs	r2, #0
 8018930:	9216      	str	r2, [sp, #88]	; 0x58
 8018932:	460d      	mov	r5, r1
 8018934:	f04f 0800 	mov.w	r8, #0
 8018938:	f04f 0900 	mov.w	r9, #0
 801893c:	460a      	mov	r2, r1
 801893e:	9215      	str	r2, [sp, #84]	; 0x54
 8018940:	7811      	ldrb	r1, [r2, #0]
 8018942:	292b      	cmp	r1, #43	; 0x2b
 8018944:	d04c      	beq.n	80189e0 <_strtod_l+0xc0>
 8018946:	d83a      	bhi.n	80189be <_strtod_l+0x9e>
 8018948:	290d      	cmp	r1, #13
 801894a:	d834      	bhi.n	80189b6 <_strtod_l+0x96>
 801894c:	2908      	cmp	r1, #8
 801894e:	d834      	bhi.n	80189ba <_strtod_l+0x9a>
 8018950:	2900      	cmp	r1, #0
 8018952:	d03d      	beq.n	80189d0 <_strtod_l+0xb0>
 8018954:	2200      	movs	r2, #0
 8018956:	920a      	str	r2, [sp, #40]	; 0x28
 8018958:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801895a:	7832      	ldrb	r2, [r6, #0]
 801895c:	2a30      	cmp	r2, #48	; 0x30
 801895e:	f040 80b4 	bne.w	8018aca <_strtod_l+0x1aa>
 8018962:	7872      	ldrb	r2, [r6, #1]
 8018964:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8018968:	2a58      	cmp	r2, #88	; 0x58
 801896a:	d170      	bne.n	8018a4e <_strtod_l+0x12e>
 801896c:	9302      	str	r3, [sp, #8]
 801896e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018970:	9301      	str	r3, [sp, #4]
 8018972:	ab16      	add	r3, sp, #88	; 0x58
 8018974:	9300      	str	r3, [sp, #0]
 8018976:	4a8e      	ldr	r2, [pc, #568]	; (8018bb0 <_strtod_l+0x290>)
 8018978:	ab17      	add	r3, sp, #92	; 0x5c
 801897a:	a915      	add	r1, sp, #84	; 0x54
 801897c:	4620      	mov	r0, r4
 801897e:	f001 f92f 	bl	8019be0 <__gethex>
 8018982:	f010 070f 	ands.w	r7, r0, #15
 8018986:	4605      	mov	r5, r0
 8018988:	d005      	beq.n	8018996 <_strtod_l+0x76>
 801898a:	2f06      	cmp	r7, #6
 801898c:	d12a      	bne.n	80189e4 <_strtod_l+0xc4>
 801898e:	3601      	adds	r6, #1
 8018990:	2300      	movs	r3, #0
 8018992:	9615      	str	r6, [sp, #84]	; 0x54
 8018994:	930a      	str	r3, [sp, #40]	; 0x28
 8018996:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018998:	2b00      	cmp	r3, #0
 801899a:	f040 857f 	bne.w	801949c <_strtod_l+0xb7c>
 801899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189a0:	b1db      	cbz	r3, 80189da <_strtod_l+0xba>
 80189a2:	4642      	mov	r2, r8
 80189a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80189a8:	ec43 2b10 	vmov	d0, r2, r3
 80189ac:	b01b      	add	sp, #108	; 0x6c
 80189ae:	ecbd 8b02 	vpop	{d8}
 80189b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b6:	2920      	cmp	r1, #32
 80189b8:	d1cc      	bne.n	8018954 <_strtod_l+0x34>
 80189ba:	3201      	adds	r2, #1
 80189bc:	e7bf      	b.n	801893e <_strtod_l+0x1e>
 80189be:	292d      	cmp	r1, #45	; 0x2d
 80189c0:	d1c8      	bne.n	8018954 <_strtod_l+0x34>
 80189c2:	2101      	movs	r1, #1
 80189c4:	910a      	str	r1, [sp, #40]	; 0x28
 80189c6:	1c51      	adds	r1, r2, #1
 80189c8:	9115      	str	r1, [sp, #84]	; 0x54
 80189ca:	7852      	ldrb	r2, [r2, #1]
 80189cc:	2a00      	cmp	r2, #0
 80189ce:	d1c3      	bne.n	8018958 <_strtod_l+0x38>
 80189d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80189d2:	9515      	str	r5, [sp, #84]	; 0x54
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	f040 855f 	bne.w	8019498 <_strtod_l+0xb78>
 80189da:	4642      	mov	r2, r8
 80189dc:	464b      	mov	r3, r9
 80189de:	e7e3      	b.n	80189a8 <_strtod_l+0x88>
 80189e0:	2100      	movs	r1, #0
 80189e2:	e7ef      	b.n	80189c4 <_strtod_l+0xa4>
 80189e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80189e6:	b13a      	cbz	r2, 80189f8 <_strtod_l+0xd8>
 80189e8:	2135      	movs	r1, #53	; 0x35
 80189ea:	a818      	add	r0, sp, #96	; 0x60
 80189ec:	f7ff ff37 	bl	801885e <__copybits>
 80189f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80189f2:	4620      	mov	r0, r4
 80189f4:	f7ff fb0a 	bl	801800c <_Bfree>
 80189f8:	3f01      	subs	r7, #1
 80189fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80189fc:	2f04      	cmp	r7, #4
 80189fe:	d806      	bhi.n	8018a0e <_strtod_l+0xee>
 8018a00:	e8df f007 	tbb	[pc, r7]
 8018a04:	201d0314 	.word	0x201d0314
 8018a08:	14          	.byte	0x14
 8018a09:	00          	.byte	0x00
 8018a0a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8018a0e:	05e9      	lsls	r1, r5, #23
 8018a10:	bf48      	it	mi
 8018a12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8018a16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018a1a:	0d1b      	lsrs	r3, r3, #20
 8018a1c:	051b      	lsls	r3, r3, #20
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d1b9      	bne.n	8018996 <_strtod_l+0x76>
 8018a22:	f7fe faf5 	bl	8017010 <__errno>
 8018a26:	2322      	movs	r3, #34	; 0x22
 8018a28:	6003      	str	r3, [r0, #0]
 8018a2a:	e7b4      	b.n	8018996 <_strtod_l+0x76>
 8018a2c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8018a30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018a34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018a38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8018a3c:	e7e7      	b.n	8018a0e <_strtod_l+0xee>
 8018a3e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018bb8 <_strtod_l+0x298>
 8018a42:	e7e4      	b.n	8018a0e <_strtod_l+0xee>
 8018a44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018a48:	f04f 38ff 	mov.w	r8, #4294967295
 8018a4c:	e7df      	b.n	8018a0e <_strtod_l+0xee>
 8018a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a50:	1c5a      	adds	r2, r3, #1
 8018a52:	9215      	str	r2, [sp, #84]	; 0x54
 8018a54:	785b      	ldrb	r3, [r3, #1]
 8018a56:	2b30      	cmp	r3, #48	; 0x30
 8018a58:	d0f9      	beq.n	8018a4e <_strtod_l+0x12e>
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d09b      	beq.n	8018996 <_strtod_l+0x76>
 8018a5e:	2301      	movs	r3, #1
 8018a60:	f04f 0a00 	mov.w	sl, #0
 8018a64:	9304      	str	r3, [sp, #16]
 8018a66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a6a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018a6e:	46d3      	mov	fp, sl
 8018a70:	220a      	movs	r2, #10
 8018a72:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018a74:	7806      	ldrb	r6, [r0, #0]
 8018a76:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8018a7a:	b2d9      	uxtb	r1, r3
 8018a7c:	2909      	cmp	r1, #9
 8018a7e:	d926      	bls.n	8018ace <_strtod_l+0x1ae>
 8018a80:	494c      	ldr	r1, [pc, #304]	; (8018bb4 <_strtod_l+0x294>)
 8018a82:	2201      	movs	r2, #1
 8018a84:	f000 ffe6 	bl	8019a54 <strncmp>
 8018a88:	2800      	cmp	r0, #0
 8018a8a:	d030      	beq.n	8018aee <_strtod_l+0x1ce>
 8018a8c:	2000      	movs	r0, #0
 8018a8e:	4632      	mov	r2, r6
 8018a90:	9005      	str	r0, [sp, #20]
 8018a92:	465e      	mov	r6, fp
 8018a94:	4603      	mov	r3, r0
 8018a96:	2a65      	cmp	r2, #101	; 0x65
 8018a98:	d001      	beq.n	8018a9e <_strtod_l+0x17e>
 8018a9a:	2a45      	cmp	r2, #69	; 0x45
 8018a9c:	d113      	bne.n	8018ac6 <_strtod_l+0x1a6>
 8018a9e:	b91e      	cbnz	r6, 8018aa8 <_strtod_l+0x188>
 8018aa0:	9a04      	ldr	r2, [sp, #16]
 8018aa2:	4302      	orrs	r2, r0
 8018aa4:	d094      	beq.n	80189d0 <_strtod_l+0xb0>
 8018aa6:	2600      	movs	r6, #0
 8018aa8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018aaa:	1c6a      	adds	r2, r5, #1
 8018aac:	9215      	str	r2, [sp, #84]	; 0x54
 8018aae:	786a      	ldrb	r2, [r5, #1]
 8018ab0:	2a2b      	cmp	r2, #43	; 0x2b
 8018ab2:	d074      	beq.n	8018b9e <_strtod_l+0x27e>
 8018ab4:	2a2d      	cmp	r2, #45	; 0x2d
 8018ab6:	d078      	beq.n	8018baa <_strtod_l+0x28a>
 8018ab8:	f04f 0c00 	mov.w	ip, #0
 8018abc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018ac0:	2909      	cmp	r1, #9
 8018ac2:	d97f      	bls.n	8018bc4 <_strtod_l+0x2a4>
 8018ac4:	9515      	str	r5, [sp, #84]	; 0x54
 8018ac6:	2700      	movs	r7, #0
 8018ac8:	e09e      	b.n	8018c08 <_strtod_l+0x2e8>
 8018aca:	2300      	movs	r3, #0
 8018acc:	e7c8      	b.n	8018a60 <_strtod_l+0x140>
 8018ace:	f1bb 0f08 	cmp.w	fp, #8
 8018ad2:	bfd8      	it	le
 8018ad4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8018ad6:	f100 0001 	add.w	r0, r0, #1
 8018ada:	bfda      	itte	le
 8018adc:	fb02 3301 	mlale	r3, r2, r1, r3
 8018ae0:	9309      	strle	r3, [sp, #36]	; 0x24
 8018ae2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8018ae6:	f10b 0b01 	add.w	fp, fp, #1
 8018aea:	9015      	str	r0, [sp, #84]	; 0x54
 8018aec:	e7c1      	b.n	8018a72 <_strtod_l+0x152>
 8018aee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018af0:	1c5a      	adds	r2, r3, #1
 8018af2:	9215      	str	r2, [sp, #84]	; 0x54
 8018af4:	785a      	ldrb	r2, [r3, #1]
 8018af6:	f1bb 0f00 	cmp.w	fp, #0
 8018afa:	d037      	beq.n	8018b6c <_strtod_l+0x24c>
 8018afc:	9005      	str	r0, [sp, #20]
 8018afe:	465e      	mov	r6, fp
 8018b00:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8018b04:	2b09      	cmp	r3, #9
 8018b06:	d912      	bls.n	8018b2e <_strtod_l+0x20e>
 8018b08:	2301      	movs	r3, #1
 8018b0a:	e7c4      	b.n	8018a96 <_strtod_l+0x176>
 8018b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b0e:	1c5a      	adds	r2, r3, #1
 8018b10:	9215      	str	r2, [sp, #84]	; 0x54
 8018b12:	785a      	ldrb	r2, [r3, #1]
 8018b14:	3001      	adds	r0, #1
 8018b16:	2a30      	cmp	r2, #48	; 0x30
 8018b18:	d0f8      	beq.n	8018b0c <_strtod_l+0x1ec>
 8018b1a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018b1e:	2b08      	cmp	r3, #8
 8018b20:	f200 84c1 	bhi.w	80194a6 <_strtod_l+0xb86>
 8018b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b26:	9005      	str	r0, [sp, #20]
 8018b28:	2000      	movs	r0, #0
 8018b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b2c:	4606      	mov	r6, r0
 8018b2e:	3a30      	subs	r2, #48	; 0x30
 8018b30:	f100 0301 	add.w	r3, r0, #1
 8018b34:	d014      	beq.n	8018b60 <_strtod_l+0x240>
 8018b36:	9905      	ldr	r1, [sp, #20]
 8018b38:	4419      	add	r1, r3
 8018b3a:	9105      	str	r1, [sp, #20]
 8018b3c:	4633      	mov	r3, r6
 8018b3e:	eb00 0c06 	add.w	ip, r0, r6
 8018b42:	210a      	movs	r1, #10
 8018b44:	4563      	cmp	r3, ip
 8018b46:	d113      	bne.n	8018b70 <_strtod_l+0x250>
 8018b48:	1833      	adds	r3, r6, r0
 8018b4a:	2b08      	cmp	r3, #8
 8018b4c:	f106 0601 	add.w	r6, r6, #1
 8018b50:	4406      	add	r6, r0
 8018b52:	dc1a      	bgt.n	8018b8a <_strtod_l+0x26a>
 8018b54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018b56:	230a      	movs	r3, #10
 8018b58:	fb03 2301 	mla	r3, r3, r1, r2
 8018b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8018b5e:	2300      	movs	r3, #0
 8018b60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018b62:	1c51      	adds	r1, r2, #1
 8018b64:	9115      	str	r1, [sp, #84]	; 0x54
 8018b66:	7852      	ldrb	r2, [r2, #1]
 8018b68:	4618      	mov	r0, r3
 8018b6a:	e7c9      	b.n	8018b00 <_strtod_l+0x1e0>
 8018b6c:	4658      	mov	r0, fp
 8018b6e:	e7d2      	b.n	8018b16 <_strtod_l+0x1f6>
 8018b70:	2b08      	cmp	r3, #8
 8018b72:	f103 0301 	add.w	r3, r3, #1
 8018b76:	dc03      	bgt.n	8018b80 <_strtod_l+0x260>
 8018b78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018b7a:	434f      	muls	r7, r1
 8018b7c:	9709      	str	r7, [sp, #36]	; 0x24
 8018b7e:	e7e1      	b.n	8018b44 <_strtod_l+0x224>
 8018b80:	2b10      	cmp	r3, #16
 8018b82:	bfd8      	it	le
 8018b84:	fb01 fa0a 	mulle.w	sl, r1, sl
 8018b88:	e7dc      	b.n	8018b44 <_strtod_l+0x224>
 8018b8a:	2e10      	cmp	r6, #16
 8018b8c:	bfdc      	itt	le
 8018b8e:	230a      	movle	r3, #10
 8018b90:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8018b94:	e7e3      	b.n	8018b5e <_strtod_l+0x23e>
 8018b96:	2300      	movs	r3, #0
 8018b98:	9305      	str	r3, [sp, #20]
 8018b9a:	2301      	movs	r3, #1
 8018b9c:	e780      	b.n	8018aa0 <_strtod_l+0x180>
 8018b9e:	f04f 0c00 	mov.w	ip, #0
 8018ba2:	1caa      	adds	r2, r5, #2
 8018ba4:	9215      	str	r2, [sp, #84]	; 0x54
 8018ba6:	78aa      	ldrb	r2, [r5, #2]
 8018ba8:	e788      	b.n	8018abc <_strtod_l+0x19c>
 8018baa:	f04f 0c01 	mov.w	ip, #1
 8018bae:	e7f8      	b.n	8018ba2 <_strtod_l+0x282>
 8018bb0:	0801d680 	.word	0x0801d680
 8018bb4:	0801d67c 	.word	0x0801d67c
 8018bb8:	7ff00000 	.word	0x7ff00000
 8018bbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018bbe:	1c51      	adds	r1, r2, #1
 8018bc0:	9115      	str	r1, [sp, #84]	; 0x54
 8018bc2:	7852      	ldrb	r2, [r2, #1]
 8018bc4:	2a30      	cmp	r2, #48	; 0x30
 8018bc6:	d0f9      	beq.n	8018bbc <_strtod_l+0x29c>
 8018bc8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8018bcc:	2908      	cmp	r1, #8
 8018bce:	f63f af7a 	bhi.w	8018ac6 <_strtod_l+0x1a6>
 8018bd2:	3a30      	subs	r2, #48	; 0x30
 8018bd4:	9208      	str	r2, [sp, #32]
 8018bd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018bd8:	920c      	str	r2, [sp, #48]	; 0x30
 8018bda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018bdc:	1c57      	adds	r7, r2, #1
 8018bde:	9715      	str	r7, [sp, #84]	; 0x54
 8018be0:	7852      	ldrb	r2, [r2, #1]
 8018be2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8018be6:	f1be 0f09 	cmp.w	lr, #9
 8018bea:	d938      	bls.n	8018c5e <_strtod_l+0x33e>
 8018bec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018bee:	1a7f      	subs	r7, r7, r1
 8018bf0:	2f08      	cmp	r7, #8
 8018bf2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8018bf6:	dc03      	bgt.n	8018c00 <_strtod_l+0x2e0>
 8018bf8:	9908      	ldr	r1, [sp, #32]
 8018bfa:	428f      	cmp	r7, r1
 8018bfc:	bfa8      	it	ge
 8018bfe:	460f      	movge	r7, r1
 8018c00:	f1bc 0f00 	cmp.w	ip, #0
 8018c04:	d000      	beq.n	8018c08 <_strtod_l+0x2e8>
 8018c06:	427f      	negs	r7, r7
 8018c08:	2e00      	cmp	r6, #0
 8018c0a:	d14f      	bne.n	8018cac <_strtod_l+0x38c>
 8018c0c:	9904      	ldr	r1, [sp, #16]
 8018c0e:	4301      	orrs	r1, r0
 8018c10:	f47f aec1 	bne.w	8018996 <_strtod_l+0x76>
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	f47f aedb 	bne.w	80189d0 <_strtod_l+0xb0>
 8018c1a:	2a69      	cmp	r2, #105	; 0x69
 8018c1c:	d029      	beq.n	8018c72 <_strtod_l+0x352>
 8018c1e:	dc26      	bgt.n	8018c6e <_strtod_l+0x34e>
 8018c20:	2a49      	cmp	r2, #73	; 0x49
 8018c22:	d026      	beq.n	8018c72 <_strtod_l+0x352>
 8018c24:	2a4e      	cmp	r2, #78	; 0x4e
 8018c26:	f47f aed3 	bne.w	80189d0 <_strtod_l+0xb0>
 8018c2a:	499b      	ldr	r1, [pc, #620]	; (8018e98 <_strtod_l+0x578>)
 8018c2c:	a815      	add	r0, sp, #84	; 0x54
 8018c2e:	f001 fa17 	bl	801a060 <__match>
 8018c32:	2800      	cmp	r0, #0
 8018c34:	f43f aecc 	beq.w	80189d0 <_strtod_l+0xb0>
 8018c38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c3a:	781b      	ldrb	r3, [r3, #0]
 8018c3c:	2b28      	cmp	r3, #40	; 0x28
 8018c3e:	d12f      	bne.n	8018ca0 <_strtod_l+0x380>
 8018c40:	4996      	ldr	r1, [pc, #600]	; (8018e9c <_strtod_l+0x57c>)
 8018c42:	aa18      	add	r2, sp, #96	; 0x60
 8018c44:	a815      	add	r0, sp, #84	; 0x54
 8018c46:	f001 fa1f 	bl	801a088 <__hexnan>
 8018c4a:	2805      	cmp	r0, #5
 8018c4c:	d128      	bne.n	8018ca0 <_strtod_l+0x380>
 8018c4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018c50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018c54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8018c58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8018c5c:	e69b      	b.n	8018996 <_strtod_l+0x76>
 8018c5e:	9f08      	ldr	r7, [sp, #32]
 8018c60:	210a      	movs	r1, #10
 8018c62:	fb01 2107 	mla	r1, r1, r7, r2
 8018c66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018c6a:	9208      	str	r2, [sp, #32]
 8018c6c:	e7b5      	b.n	8018bda <_strtod_l+0x2ba>
 8018c6e:	2a6e      	cmp	r2, #110	; 0x6e
 8018c70:	e7d9      	b.n	8018c26 <_strtod_l+0x306>
 8018c72:	498b      	ldr	r1, [pc, #556]	; (8018ea0 <_strtod_l+0x580>)
 8018c74:	a815      	add	r0, sp, #84	; 0x54
 8018c76:	f001 f9f3 	bl	801a060 <__match>
 8018c7a:	2800      	cmp	r0, #0
 8018c7c:	f43f aea8 	beq.w	80189d0 <_strtod_l+0xb0>
 8018c80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c82:	4988      	ldr	r1, [pc, #544]	; (8018ea4 <_strtod_l+0x584>)
 8018c84:	3b01      	subs	r3, #1
 8018c86:	a815      	add	r0, sp, #84	; 0x54
 8018c88:	9315      	str	r3, [sp, #84]	; 0x54
 8018c8a:	f001 f9e9 	bl	801a060 <__match>
 8018c8e:	b910      	cbnz	r0, 8018c96 <_strtod_l+0x376>
 8018c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c92:	3301      	adds	r3, #1
 8018c94:	9315      	str	r3, [sp, #84]	; 0x54
 8018c96:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8018eb4 <_strtod_l+0x594>
 8018c9a:	f04f 0800 	mov.w	r8, #0
 8018c9e:	e67a      	b.n	8018996 <_strtod_l+0x76>
 8018ca0:	4881      	ldr	r0, [pc, #516]	; (8018ea8 <_strtod_l+0x588>)
 8018ca2:	f000 fef9 	bl	8019a98 <nan>
 8018ca6:	ec59 8b10 	vmov	r8, r9, d0
 8018caa:	e674      	b.n	8018996 <_strtod_l+0x76>
 8018cac:	9b05      	ldr	r3, [sp, #20]
 8018cae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018cb0:	1afb      	subs	r3, r7, r3
 8018cb2:	f1bb 0f00 	cmp.w	fp, #0
 8018cb6:	bf08      	it	eq
 8018cb8:	46b3      	moveq	fp, r6
 8018cba:	2e10      	cmp	r6, #16
 8018cbc:	9308      	str	r3, [sp, #32]
 8018cbe:	4635      	mov	r5, r6
 8018cc0:	bfa8      	it	ge
 8018cc2:	2510      	movge	r5, #16
 8018cc4:	f7e7 fc46 	bl	8000554 <__aeabi_ui2d>
 8018cc8:	2e09      	cmp	r6, #9
 8018cca:	4680      	mov	r8, r0
 8018ccc:	4689      	mov	r9, r1
 8018cce:	dd13      	ble.n	8018cf8 <_strtod_l+0x3d8>
 8018cd0:	4b76      	ldr	r3, [pc, #472]	; (8018eac <_strtod_l+0x58c>)
 8018cd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018cd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018cda:	f7e7 fcb5 	bl	8000648 <__aeabi_dmul>
 8018cde:	4680      	mov	r8, r0
 8018ce0:	4650      	mov	r0, sl
 8018ce2:	4689      	mov	r9, r1
 8018ce4:	f7e7 fc36 	bl	8000554 <__aeabi_ui2d>
 8018ce8:	4602      	mov	r2, r0
 8018cea:	460b      	mov	r3, r1
 8018cec:	4640      	mov	r0, r8
 8018cee:	4649      	mov	r1, r9
 8018cf0:	f7e7 faf4 	bl	80002dc <__adddf3>
 8018cf4:	4680      	mov	r8, r0
 8018cf6:	4689      	mov	r9, r1
 8018cf8:	2e0f      	cmp	r6, #15
 8018cfa:	dc38      	bgt.n	8018d6e <_strtod_l+0x44e>
 8018cfc:	9b08      	ldr	r3, [sp, #32]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	f43f ae49 	beq.w	8018996 <_strtod_l+0x76>
 8018d04:	dd24      	ble.n	8018d50 <_strtod_l+0x430>
 8018d06:	2b16      	cmp	r3, #22
 8018d08:	dc0b      	bgt.n	8018d22 <_strtod_l+0x402>
 8018d0a:	4968      	ldr	r1, [pc, #416]	; (8018eac <_strtod_l+0x58c>)
 8018d0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d14:	4642      	mov	r2, r8
 8018d16:	464b      	mov	r3, r9
 8018d18:	f7e7 fc96 	bl	8000648 <__aeabi_dmul>
 8018d1c:	4680      	mov	r8, r0
 8018d1e:	4689      	mov	r9, r1
 8018d20:	e639      	b.n	8018996 <_strtod_l+0x76>
 8018d22:	9a08      	ldr	r2, [sp, #32]
 8018d24:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8018d28:	4293      	cmp	r3, r2
 8018d2a:	db20      	blt.n	8018d6e <_strtod_l+0x44e>
 8018d2c:	4c5f      	ldr	r4, [pc, #380]	; (8018eac <_strtod_l+0x58c>)
 8018d2e:	f1c6 060f 	rsb	r6, r6, #15
 8018d32:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8018d36:	4642      	mov	r2, r8
 8018d38:	464b      	mov	r3, r9
 8018d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d3e:	f7e7 fc83 	bl	8000648 <__aeabi_dmul>
 8018d42:	9b08      	ldr	r3, [sp, #32]
 8018d44:	1b9e      	subs	r6, r3, r6
 8018d46:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8018d4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018d4e:	e7e3      	b.n	8018d18 <_strtod_l+0x3f8>
 8018d50:	9b08      	ldr	r3, [sp, #32]
 8018d52:	3316      	adds	r3, #22
 8018d54:	db0b      	blt.n	8018d6e <_strtod_l+0x44e>
 8018d56:	9b05      	ldr	r3, [sp, #20]
 8018d58:	1bdf      	subs	r7, r3, r7
 8018d5a:	4b54      	ldr	r3, [pc, #336]	; (8018eac <_strtod_l+0x58c>)
 8018d5c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8018d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018d64:	4640      	mov	r0, r8
 8018d66:	4649      	mov	r1, r9
 8018d68:	f7e7 fd98 	bl	800089c <__aeabi_ddiv>
 8018d6c:	e7d6      	b.n	8018d1c <_strtod_l+0x3fc>
 8018d6e:	9b08      	ldr	r3, [sp, #32]
 8018d70:	1b75      	subs	r5, r6, r5
 8018d72:	441d      	add	r5, r3
 8018d74:	2d00      	cmp	r5, #0
 8018d76:	dd70      	ble.n	8018e5a <_strtod_l+0x53a>
 8018d78:	f015 030f 	ands.w	r3, r5, #15
 8018d7c:	d00a      	beq.n	8018d94 <_strtod_l+0x474>
 8018d7e:	494b      	ldr	r1, [pc, #300]	; (8018eac <_strtod_l+0x58c>)
 8018d80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018d84:	4642      	mov	r2, r8
 8018d86:	464b      	mov	r3, r9
 8018d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d8c:	f7e7 fc5c 	bl	8000648 <__aeabi_dmul>
 8018d90:	4680      	mov	r8, r0
 8018d92:	4689      	mov	r9, r1
 8018d94:	f035 050f 	bics.w	r5, r5, #15
 8018d98:	d04d      	beq.n	8018e36 <_strtod_l+0x516>
 8018d9a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8018d9e:	dd22      	ble.n	8018de6 <_strtod_l+0x4c6>
 8018da0:	2500      	movs	r5, #0
 8018da2:	46ab      	mov	fp, r5
 8018da4:	9509      	str	r5, [sp, #36]	; 0x24
 8018da6:	9505      	str	r5, [sp, #20]
 8018da8:	2322      	movs	r3, #34	; 0x22
 8018daa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8018eb4 <_strtod_l+0x594>
 8018dae:	6023      	str	r3, [r4, #0]
 8018db0:	f04f 0800 	mov.w	r8, #0
 8018db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	f43f aded 	beq.w	8018996 <_strtod_l+0x76>
 8018dbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018dbe:	4620      	mov	r0, r4
 8018dc0:	f7ff f924 	bl	801800c <_Bfree>
 8018dc4:	9905      	ldr	r1, [sp, #20]
 8018dc6:	4620      	mov	r0, r4
 8018dc8:	f7ff f920 	bl	801800c <_Bfree>
 8018dcc:	4659      	mov	r1, fp
 8018dce:	4620      	mov	r0, r4
 8018dd0:	f7ff f91c 	bl	801800c <_Bfree>
 8018dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	f7ff f918 	bl	801800c <_Bfree>
 8018ddc:	4629      	mov	r1, r5
 8018dde:	4620      	mov	r0, r4
 8018de0:	f7ff f914 	bl	801800c <_Bfree>
 8018de4:	e5d7      	b.n	8018996 <_strtod_l+0x76>
 8018de6:	4b32      	ldr	r3, [pc, #200]	; (8018eb0 <_strtod_l+0x590>)
 8018de8:	9304      	str	r3, [sp, #16]
 8018dea:	2300      	movs	r3, #0
 8018dec:	112d      	asrs	r5, r5, #4
 8018dee:	4640      	mov	r0, r8
 8018df0:	4649      	mov	r1, r9
 8018df2:	469a      	mov	sl, r3
 8018df4:	2d01      	cmp	r5, #1
 8018df6:	dc21      	bgt.n	8018e3c <_strtod_l+0x51c>
 8018df8:	b10b      	cbz	r3, 8018dfe <_strtod_l+0x4de>
 8018dfa:	4680      	mov	r8, r0
 8018dfc:	4689      	mov	r9, r1
 8018dfe:	492c      	ldr	r1, [pc, #176]	; (8018eb0 <_strtod_l+0x590>)
 8018e00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8018e04:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018e08:	4642      	mov	r2, r8
 8018e0a:	464b      	mov	r3, r9
 8018e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e10:	f7e7 fc1a 	bl	8000648 <__aeabi_dmul>
 8018e14:	4b27      	ldr	r3, [pc, #156]	; (8018eb4 <_strtod_l+0x594>)
 8018e16:	460a      	mov	r2, r1
 8018e18:	400b      	ands	r3, r1
 8018e1a:	4927      	ldr	r1, [pc, #156]	; (8018eb8 <_strtod_l+0x598>)
 8018e1c:	428b      	cmp	r3, r1
 8018e1e:	4680      	mov	r8, r0
 8018e20:	d8be      	bhi.n	8018da0 <_strtod_l+0x480>
 8018e22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018e26:	428b      	cmp	r3, r1
 8018e28:	bf86      	itte	hi
 8018e2a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8018ebc <_strtod_l+0x59c>
 8018e2e:	f04f 38ff 	movhi.w	r8, #4294967295
 8018e32:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8018e36:	2300      	movs	r3, #0
 8018e38:	9304      	str	r3, [sp, #16]
 8018e3a:	e07b      	b.n	8018f34 <_strtod_l+0x614>
 8018e3c:	07ea      	lsls	r2, r5, #31
 8018e3e:	d505      	bpl.n	8018e4c <_strtod_l+0x52c>
 8018e40:	9b04      	ldr	r3, [sp, #16]
 8018e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e46:	f7e7 fbff 	bl	8000648 <__aeabi_dmul>
 8018e4a:	2301      	movs	r3, #1
 8018e4c:	9a04      	ldr	r2, [sp, #16]
 8018e4e:	3208      	adds	r2, #8
 8018e50:	f10a 0a01 	add.w	sl, sl, #1
 8018e54:	106d      	asrs	r5, r5, #1
 8018e56:	9204      	str	r2, [sp, #16]
 8018e58:	e7cc      	b.n	8018df4 <_strtod_l+0x4d4>
 8018e5a:	d0ec      	beq.n	8018e36 <_strtod_l+0x516>
 8018e5c:	426d      	negs	r5, r5
 8018e5e:	f015 020f 	ands.w	r2, r5, #15
 8018e62:	d00a      	beq.n	8018e7a <_strtod_l+0x55a>
 8018e64:	4b11      	ldr	r3, [pc, #68]	; (8018eac <_strtod_l+0x58c>)
 8018e66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018e6a:	4640      	mov	r0, r8
 8018e6c:	4649      	mov	r1, r9
 8018e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e72:	f7e7 fd13 	bl	800089c <__aeabi_ddiv>
 8018e76:	4680      	mov	r8, r0
 8018e78:	4689      	mov	r9, r1
 8018e7a:	112d      	asrs	r5, r5, #4
 8018e7c:	d0db      	beq.n	8018e36 <_strtod_l+0x516>
 8018e7e:	2d1f      	cmp	r5, #31
 8018e80:	dd1e      	ble.n	8018ec0 <_strtod_l+0x5a0>
 8018e82:	2500      	movs	r5, #0
 8018e84:	46ab      	mov	fp, r5
 8018e86:	9509      	str	r5, [sp, #36]	; 0x24
 8018e88:	9505      	str	r5, [sp, #20]
 8018e8a:	2322      	movs	r3, #34	; 0x22
 8018e8c:	f04f 0800 	mov.w	r8, #0
 8018e90:	f04f 0900 	mov.w	r9, #0
 8018e94:	6023      	str	r3, [r4, #0]
 8018e96:	e78d      	b.n	8018db4 <_strtod_l+0x494>
 8018e98:	0801d46d 	.word	0x0801d46d
 8018e9c:	0801d694 	.word	0x0801d694
 8018ea0:	0801d465 	.word	0x0801d465
 8018ea4:	0801d49c 	.word	0x0801d49c
 8018ea8:	0801d825 	.word	0x0801d825
 8018eac:	0801d5a8 	.word	0x0801d5a8
 8018eb0:	0801d580 	.word	0x0801d580
 8018eb4:	7ff00000 	.word	0x7ff00000
 8018eb8:	7ca00000 	.word	0x7ca00000
 8018ebc:	7fefffff 	.word	0x7fefffff
 8018ec0:	f015 0310 	ands.w	r3, r5, #16
 8018ec4:	bf18      	it	ne
 8018ec6:	236a      	movne	r3, #106	; 0x6a
 8018ec8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801926c <_strtod_l+0x94c>
 8018ecc:	9304      	str	r3, [sp, #16]
 8018ece:	4640      	mov	r0, r8
 8018ed0:	4649      	mov	r1, r9
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	07ea      	lsls	r2, r5, #31
 8018ed6:	d504      	bpl.n	8018ee2 <_strtod_l+0x5c2>
 8018ed8:	e9da 2300 	ldrd	r2, r3, [sl]
 8018edc:	f7e7 fbb4 	bl	8000648 <__aeabi_dmul>
 8018ee0:	2301      	movs	r3, #1
 8018ee2:	106d      	asrs	r5, r5, #1
 8018ee4:	f10a 0a08 	add.w	sl, sl, #8
 8018ee8:	d1f4      	bne.n	8018ed4 <_strtod_l+0x5b4>
 8018eea:	b10b      	cbz	r3, 8018ef0 <_strtod_l+0x5d0>
 8018eec:	4680      	mov	r8, r0
 8018eee:	4689      	mov	r9, r1
 8018ef0:	9b04      	ldr	r3, [sp, #16]
 8018ef2:	b1bb      	cbz	r3, 8018f24 <_strtod_l+0x604>
 8018ef4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8018ef8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	4649      	mov	r1, r9
 8018f00:	dd10      	ble.n	8018f24 <_strtod_l+0x604>
 8018f02:	2b1f      	cmp	r3, #31
 8018f04:	f340 811e 	ble.w	8019144 <_strtod_l+0x824>
 8018f08:	2b34      	cmp	r3, #52	; 0x34
 8018f0a:	bfde      	ittt	le
 8018f0c:	f04f 33ff 	movle.w	r3, #4294967295
 8018f10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8018f14:	4093      	lslle	r3, r2
 8018f16:	f04f 0800 	mov.w	r8, #0
 8018f1a:	bfcc      	ite	gt
 8018f1c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018f20:	ea03 0901 	andle.w	r9, r3, r1
 8018f24:	2200      	movs	r2, #0
 8018f26:	2300      	movs	r3, #0
 8018f28:	4640      	mov	r0, r8
 8018f2a:	4649      	mov	r1, r9
 8018f2c:	f7e7 fdf4 	bl	8000b18 <__aeabi_dcmpeq>
 8018f30:	2800      	cmp	r0, #0
 8018f32:	d1a6      	bne.n	8018e82 <_strtod_l+0x562>
 8018f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f36:	9300      	str	r3, [sp, #0]
 8018f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018f3a:	4633      	mov	r3, r6
 8018f3c:	465a      	mov	r2, fp
 8018f3e:	4620      	mov	r0, r4
 8018f40:	f7ff f8cc 	bl	80180dc <__s2b>
 8018f44:	9009      	str	r0, [sp, #36]	; 0x24
 8018f46:	2800      	cmp	r0, #0
 8018f48:	f43f af2a 	beq.w	8018da0 <_strtod_l+0x480>
 8018f4c:	9a08      	ldr	r2, [sp, #32]
 8018f4e:	9b05      	ldr	r3, [sp, #20]
 8018f50:	2a00      	cmp	r2, #0
 8018f52:	eba3 0307 	sub.w	r3, r3, r7
 8018f56:	bfa8      	it	ge
 8018f58:	2300      	movge	r3, #0
 8018f5a:	930c      	str	r3, [sp, #48]	; 0x30
 8018f5c:	2500      	movs	r5, #0
 8018f5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018f62:	9312      	str	r3, [sp, #72]	; 0x48
 8018f64:	46ab      	mov	fp, r5
 8018f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f68:	4620      	mov	r0, r4
 8018f6a:	6859      	ldr	r1, [r3, #4]
 8018f6c:	f7ff f80e 	bl	8017f8c <_Balloc>
 8018f70:	9005      	str	r0, [sp, #20]
 8018f72:	2800      	cmp	r0, #0
 8018f74:	f43f af18 	beq.w	8018da8 <_strtod_l+0x488>
 8018f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f7a:	691a      	ldr	r2, [r3, #16]
 8018f7c:	3202      	adds	r2, #2
 8018f7e:	f103 010c 	add.w	r1, r3, #12
 8018f82:	0092      	lsls	r2, r2, #2
 8018f84:	300c      	adds	r0, #12
 8018f86:	f7fe f870 	bl	801706a <memcpy>
 8018f8a:	ec49 8b10 	vmov	d0, r8, r9
 8018f8e:	aa18      	add	r2, sp, #96	; 0x60
 8018f90:	a917      	add	r1, sp, #92	; 0x5c
 8018f92:	4620      	mov	r0, r4
 8018f94:	f7ff fbd6 	bl	8018744 <__d2b>
 8018f98:	ec49 8b18 	vmov	d8, r8, r9
 8018f9c:	9016      	str	r0, [sp, #88]	; 0x58
 8018f9e:	2800      	cmp	r0, #0
 8018fa0:	f43f af02 	beq.w	8018da8 <_strtod_l+0x488>
 8018fa4:	2101      	movs	r1, #1
 8018fa6:	4620      	mov	r0, r4
 8018fa8:	f7ff f930 	bl	801820c <__i2b>
 8018fac:	4683      	mov	fp, r0
 8018fae:	2800      	cmp	r0, #0
 8018fb0:	f43f aefa 	beq.w	8018da8 <_strtod_l+0x488>
 8018fb4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8018fb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018fb8:	2e00      	cmp	r6, #0
 8018fba:	bfab      	itete	ge
 8018fbc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8018fbe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8018fc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8018fc2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8018fc6:	bfac      	ite	ge
 8018fc8:	eb06 0a03 	addge.w	sl, r6, r3
 8018fcc:	1b9f      	sublt	r7, r3, r6
 8018fce:	9b04      	ldr	r3, [sp, #16]
 8018fd0:	1af6      	subs	r6, r6, r3
 8018fd2:	4416      	add	r6, r2
 8018fd4:	4ba0      	ldr	r3, [pc, #640]	; (8019258 <_strtod_l+0x938>)
 8018fd6:	3e01      	subs	r6, #1
 8018fd8:	429e      	cmp	r6, r3
 8018fda:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018fde:	f280 80c4 	bge.w	801916a <_strtod_l+0x84a>
 8018fe2:	1b9b      	subs	r3, r3, r6
 8018fe4:	2b1f      	cmp	r3, #31
 8018fe6:	eba2 0203 	sub.w	r2, r2, r3
 8018fea:	f04f 0101 	mov.w	r1, #1
 8018fee:	f300 80b0 	bgt.w	8019152 <_strtod_l+0x832>
 8018ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8018ff6:	930e      	str	r3, [sp, #56]	; 0x38
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8018ffc:	eb0a 0602 	add.w	r6, sl, r2
 8019000:	9b04      	ldr	r3, [sp, #16]
 8019002:	45b2      	cmp	sl, r6
 8019004:	4417      	add	r7, r2
 8019006:	441f      	add	r7, r3
 8019008:	4653      	mov	r3, sl
 801900a:	bfa8      	it	ge
 801900c:	4633      	movge	r3, r6
 801900e:	42bb      	cmp	r3, r7
 8019010:	bfa8      	it	ge
 8019012:	463b      	movge	r3, r7
 8019014:	2b00      	cmp	r3, #0
 8019016:	bfc2      	ittt	gt
 8019018:	1af6      	subgt	r6, r6, r3
 801901a:	1aff      	subgt	r7, r7, r3
 801901c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8019020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019022:	2b00      	cmp	r3, #0
 8019024:	dd17      	ble.n	8019056 <_strtod_l+0x736>
 8019026:	4659      	mov	r1, fp
 8019028:	461a      	mov	r2, r3
 801902a:	4620      	mov	r0, r4
 801902c:	f7ff f9ae 	bl	801838c <__pow5mult>
 8019030:	4683      	mov	fp, r0
 8019032:	2800      	cmp	r0, #0
 8019034:	f43f aeb8 	beq.w	8018da8 <_strtod_l+0x488>
 8019038:	4601      	mov	r1, r0
 801903a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801903c:	4620      	mov	r0, r4
 801903e:	f7ff f8fb 	bl	8018238 <__multiply>
 8019042:	900b      	str	r0, [sp, #44]	; 0x2c
 8019044:	2800      	cmp	r0, #0
 8019046:	f43f aeaf 	beq.w	8018da8 <_strtod_l+0x488>
 801904a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801904c:	4620      	mov	r0, r4
 801904e:	f7fe ffdd 	bl	801800c <_Bfree>
 8019052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019054:	9316      	str	r3, [sp, #88]	; 0x58
 8019056:	2e00      	cmp	r6, #0
 8019058:	f300 808c 	bgt.w	8019174 <_strtod_l+0x854>
 801905c:	9b08      	ldr	r3, [sp, #32]
 801905e:	2b00      	cmp	r3, #0
 8019060:	dd08      	ble.n	8019074 <_strtod_l+0x754>
 8019062:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019064:	9905      	ldr	r1, [sp, #20]
 8019066:	4620      	mov	r0, r4
 8019068:	f7ff f990 	bl	801838c <__pow5mult>
 801906c:	9005      	str	r0, [sp, #20]
 801906e:	2800      	cmp	r0, #0
 8019070:	f43f ae9a 	beq.w	8018da8 <_strtod_l+0x488>
 8019074:	2f00      	cmp	r7, #0
 8019076:	dd08      	ble.n	801908a <_strtod_l+0x76a>
 8019078:	9905      	ldr	r1, [sp, #20]
 801907a:	463a      	mov	r2, r7
 801907c:	4620      	mov	r0, r4
 801907e:	f7ff f9df 	bl	8018440 <__lshift>
 8019082:	9005      	str	r0, [sp, #20]
 8019084:	2800      	cmp	r0, #0
 8019086:	f43f ae8f 	beq.w	8018da8 <_strtod_l+0x488>
 801908a:	f1ba 0f00 	cmp.w	sl, #0
 801908e:	dd08      	ble.n	80190a2 <_strtod_l+0x782>
 8019090:	4659      	mov	r1, fp
 8019092:	4652      	mov	r2, sl
 8019094:	4620      	mov	r0, r4
 8019096:	f7ff f9d3 	bl	8018440 <__lshift>
 801909a:	4683      	mov	fp, r0
 801909c:	2800      	cmp	r0, #0
 801909e:	f43f ae83 	beq.w	8018da8 <_strtod_l+0x488>
 80190a2:	9a05      	ldr	r2, [sp, #20]
 80190a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80190a6:	4620      	mov	r0, r4
 80190a8:	f7ff fa52 	bl	8018550 <__mdiff>
 80190ac:	4605      	mov	r5, r0
 80190ae:	2800      	cmp	r0, #0
 80190b0:	f43f ae7a 	beq.w	8018da8 <_strtod_l+0x488>
 80190b4:	68c3      	ldr	r3, [r0, #12]
 80190b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80190b8:	2300      	movs	r3, #0
 80190ba:	60c3      	str	r3, [r0, #12]
 80190bc:	4659      	mov	r1, fp
 80190be:	f7ff fa2b 	bl	8018518 <__mcmp>
 80190c2:	2800      	cmp	r0, #0
 80190c4:	da60      	bge.n	8019188 <_strtod_l+0x868>
 80190c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80190c8:	ea53 0308 	orrs.w	r3, r3, r8
 80190cc:	f040 8084 	bne.w	80191d8 <_strtod_l+0x8b8>
 80190d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d17f      	bne.n	80191d8 <_strtod_l+0x8b8>
 80190d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80190dc:	0d1b      	lsrs	r3, r3, #20
 80190de:	051b      	lsls	r3, r3, #20
 80190e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80190e4:	d978      	bls.n	80191d8 <_strtod_l+0x8b8>
 80190e6:	696b      	ldr	r3, [r5, #20]
 80190e8:	b913      	cbnz	r3, 80190f0 <_strtod_l+0x7d0>
 80190ea:	692b      	ldr	r3, [r5, #16]
 80190ec:	2b01      	cmp	r3, #1
 80190ee:	dd73      	ble.n	80191d8 <_strtod_l+0x8b8>
 80190f0:	4629      	mov	r1, r5
 80190f2:	2201      	movs	r2, #1
 80190f4:	4620      	mov	r0, r4
 80190f6:	f7ff f9a3 	bl	8018440 <__lshift>
 80190fa:	4659      	mov	r1, fp
 80190fc:	4605      	mov	r5, r0
 80190fe:	f7ff fa0b 	bl	8018518 <__mcmp>
 8019102:	2800      	cmp	r0, #0
 8019104:	dd68      	ble.n	80191d8 <_strtod_l+0x8b8>
 8019106:	9904      	ldr	r1, [sp, #16]
 8019108:	4a54      	ldr	r2, [pc, #336]	; (801925c <_strtod_l+0x93c>)
 801910a:	464b      	mov	r3, r9
 801910c:	2900      	cmp	r1, #0
 801910e:	f000 8084 	beq.w	801921a <_strtod_l+0x8fa>
 8019112:	ea02 0109 	and.w	r1, r2, r9
 8019116:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801911a:	dc7e      	bgt.n	801921a <_strtod_l+0x8fa>
 801911c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019120:	f77f aeb3 	ble.w	8018e8a <_strtod_l+0x56a>
 8019124:	4b4e      	ldr	r3, [pc, #312]	; (8019260 <_strtod_l+0x940>)
 8019126:	4640      	mov	r0, r8
 8019128:	4649      	mov	r1, r9
 801912a:	2200      	movs	r2, #0
 801912c:	f7e7 fa8c 	bl	8000648 <__aeabi_dmul>
 8019130:	4b4a      	ldr	r3, [pc, #296]	; (801925c <_strtod_l+0x93c>)
 8019132:	400b      	ands	r3, r1
 8019134:	4680      	mov	r8, r0
 8019136:	4689      	mov	r9, r1
 8019138:	2b00      	cmp	r3, #0
 801913a:	f47f ae3f 	bne.w	8018dbc <_strtod_l+0x49c>
 801913e:	2322      	movs	r3, #34	; 0x22
 8019140:	6023      	str	r3, [r4, #0]
 8019142:	e63b      	b.n	8018dbc <_strtod_l+0x49c>
 8019144:	f04f 32ff 	mov.w	r2, #4294967295
 8019148:	fa02 f303 	lsl.w	r3, r2, r3
 801914c:	ea03 0808 	and.w	r8, r3, r8
 8019150:	e6e8      	b.n	8018f24 <_strtod_l+0x604>
 8019152:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8019156:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801915a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801915e:	36e2      	adds	r6, #226	; 0xe2
 8019160:	fa01 f306 	lsl.w	r3, r1, r6
 8019164:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019168:	e748      	b.n	8018ffc <_strtod_l+0x6dc>
 801916a:	2100      	movs	r1, #0
 801916c:	2301      	movs	r3, #1
 801916e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8019172:	e743      	b.n	8018ffc <_strtod_l+0x6dc>
 8019174:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019176:	4632      	mov	r2, r6
 8019178:	4620      	mov	r0, r4
 801917a:	f7ff f961 	bl	8018440 <__lshift>
 801917e:	9016      	str	r0, [sp, #88]	; 0x58
 8019180:	2800      	cmp	r0, #0
 8019182:	f47f af6b 	bne.w	801905c <_strtod_l+0x73c>
 8019186:	e60f      	b.n	8018da8 <_strtod_l+0x488>
 8019188:	46ca      	mov	sl, r9
 801918a:	d171      	bne.n	8019270 <_strtod_l+0x950>
 801918c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801918e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019192:	b352      	cbz	r2, 80191ea <_strtod_l+0x8ca>
 8019194:	4a33      	ldr	r2, [pc, #204]	; (8019264 <_strtod_l+0x944>)
 8019196:	4293      	cmp	r3, r2
 8019198:	d12a      	bne.n	80191f0 <_strtod_l+0x8d0>
 801919a:	9b04      	ldr	r3, [sp, #16]
 801919c:	4641      	mov	r1, r8
 801919e:	b1fb      	cbz	r3, 80191e0 <_strtod_l+0x8c0>
 80191a0:	4b2e      	ldr	r3, [pc, #184]	; (801925c <_strtod_l+0x93c>)
 80191a2:	ea09 0303 	and.w	r3, r9, r3
 80191a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80191aa:	f04f 32ff 	mov.w	r2, #4294967295
 80191ae:	d81a      	bhi.n	80191e6 <_strtod_l+0x8c6>
 80191b0:	0d1b      	lsrs	r3, r3, #20
 80191b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80191b6:	fa02 f303 	lsl.w	r3, r2, r3
 80191ba:	4299      	cmp	r1, r3
 80191bc:	d118      	bne.n	80191f0 <_strtod_l+0x8d0>
 80191be:	4b2a      	ldr	r3, [pc, #168]	; (8019268 <_strtod_l+0x948>)
 80191c0:	459a      	cmp	sl, r3
 80191c2:	d102      	bne.n	80191ca <_strtod_l+0x8aa>
 80191c4:	3101      	adds	r1, #1
 80191c6:	f43f adef 	beq.w	8018da8 <_strtod_l+0x488>
 80191ca:	4b24      	ldr	r3, [pc, #144]	; (801925c <_strtod_l+0x93c>)
 80191cc:	ea0a 0303 	and.w	r3, sl, r3
 80191d0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80191d4:	f04f 0800 	mov.w	r8, #0
 80191d8:	9b04      	ldr	r3, [sp, #16]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d1a2      	bne.n	8019124 <_strtod_l+0x804>
 80191de:	e5ed      	b.n	8018dbc <_strtod_l+0x49c>
 80191e0:	f04f 33ff 	mov.w	r3, #4294967295
 80191e4:	e7e9      	b.n	80191ba <_strtod_l+0x89a>
 80191e6:	4613      	mov	r3, r2
 80191e8:	e7e7      	b.n	80191ba <_strtod_l+0x89a>
 80191ea:	ea53 0308 	orrs.w	r3, r3, r8
 80191ee:	d08a      	beq.n	8019106 <_strtod_l+0x7e6>
 80191f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191f2:	b1e3      	cbz	r3, 801922e <_strtod_l+0x90e>
 80191f4:	ea13 0f0a 	tst.w	r3, sl
 80191f8:	d0ee      	beq.n	80191d8 <_strtod_l+0x8b8>
 80191fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80191fc:	9a04      	ldr	r2, [sp, #16]
 80191fe:	4640      	mov	r0, r8
 8019200:	4649      	mov	r1, r9
 8019202:	b1c3      	cbz	r3, 8019236 <_strtod_l+0x916>
 8019204:	f7ff fb6f 	bl	80188e6 <sulp>
 8019208:	4602      	mov	r2, r0
 801920a:	460b      	mov	r3, r1
 801920c:	ec51 0b18 	vmov	r0, r1, d8
 8019210:	f7e7 f864 	bl	80002dc <__adddf3>
 8019214:	4680      	mov	r8, r0
 8019216:	4689      	mov	r9, r1
 8019218:	e7de      	b.n	80191d8 <_strtod_l+0x8b8>
 801921a:	4013      	ands	r3, r2
 801921c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019220:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8019224:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019228:	f04f 38ff 	mov.w	r8, #4294967295
 801922c:	e7d4      	b.n	80191d8 <_strtod_l+0x8b8>
 801922e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019230:	ea13 0f08 	tst.w	r3, r8
 8019234:	e7e0      	b.n	80191f8 <_strtod_l+0x8d8>
 8019236:	f7ff fb56 	bl	80188e6 <sulp>
 801923a:	4602      	mov	r2, r0
 801923c:	460b      	mov	r3, r1
 801923e:	ec51 0b18 	vmov	r0, r1, d8
 8019242:	f7e7 f849 	bl	80002d8 <__aeabi_dsub>
 8019246:	2200      	movs	r2, #0
 8019248:	2300      	movs	r3, #0
 801924a:	4680      	mov	r8, r0
 801924c:	4689      	mov	r9, r1
 801924e:	f7e7 fc63 	bl	8000b18 <__aeabi_dcmpeq>
 8019252:	2800      	cmp	r0, #0
 8019254:	d0c0      	beq.n	80191d8 <_strtod_l+0x8b8>
 8019256:	e618      	b.n	8018e8a <_strtod_l+0x56a>
 8019258:	fffffc02 	.word	0xfffffc02
 801925c:	7ff00000 	.word	0x7ff00000
 8019260:	39500000 	.word	0x39500000
 8019264:	000fffff 	.word	0x000fffff
 8019268:	7fefffff 	.word	0x7fefffff
 801926c:	0801d6a8 	.word	0x0801d6a8
 8019270:	4659      	mov	r1, fp
 8019272:	4628      	mov	r0, r5
 8019274:	f7ff fac0 	bl	80187f8 <__ratio>
 8019278:	ec57 6b10 	vmov	r6, r7, d0
 801927c:	ee10 0a10 	vmov	r0, s0
 8019280:	2200      	movs	r2, #0
 8019282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019286:	4639      	mov	r1, r7
 8019288:	f7e7 fc5a 	bl	8000b40 <__aeabi_dcmple>
 801928c:	2800      	cmp	r0, #0
 801928e:	d071      	beq.n	8019374 <_strtod_l+0xa54>
 8019290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019292:	2b00      	cmp	r3, #0
 8019294:	d17c      	bne.n	8019390 <_strtod_l+0xa70>
 8019296:	f1b8 0f00 	cmp.w	r8, #0
 801929a:	d15a      	bne.n	8019352 <_strtod_l+0xa32>
 801929c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d15d      	bne.n	8019360 <_strtod_l+0xa40>
 80192a4:	4b90      	ldr	r3, [pc, #576]	; (80194e8 <_strtod_l+0xbc8>)
 80192a6:	2200      	movs	r2, #0
 80192a8:	4630      	mov	r0, r6
 80192aa:	4639      	mov	r1, r7
 80192ac:	f7e7 fc3e 	bl	8000b2c <__aeabi_dcmplt>
 80192b0:	2800      	cmp	r0, #0
 80192b2:	d15c      	bne.n	801936e <_strtod_l+0xa4e>
 80192b4:	4630      	mov	r0, r6
 80192b6:	4639      	mov	r1, r7
 80192b8:	4b8c      	ldr	r3, [pc, #560]	; (80194ec <_strtod_l+0xbcc>)
 80192ba:	2200      	movs	r2, #0
 80192bc:	f7e7 f9c4 	bl	8000648 <__aeabi_dmul>
 80192c0:	4606      	mov	r6, r0
 80192c2:	460f      	mov	r7, r1
 80192c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80192c8:	9606      	str	r6, [sp, #24]
 80192ca:	9307      	str	r3, [sp, #28]
 80192cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80192d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80192d4:	4b86      	ldr	r3, [pc, #536]	; (80194f0 <_strtod_l+0xbd0>)
 80192d6:	ea0a 0303 	and.w	r3, sl, r3
 80192da:	930d      	str	r3, [sp, #52]	; 0x34
 80192dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80192de:	4b85      	ldr	r3, [pc, #532]	; (80194f4 <_strtod_l+0xbd4>)
 80192e0:	429a      	cmp	r2, r3
 80192e2:	f040 8090 	bne.w	8019406 <_strtod_l+0xae6>
 80192e6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80192ea:	ec49 8b10 	vmov	d0, r8, r9
 80192ee:	f7ff f9b9 	bl	8018664 <__ulp>
 80192f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80192f6:	ec51 0b10 	vmov	r0, r1, d0
 80192fa:	f7e7 f9a5 	bl	8000648 <__aeabi_dmul>
 80192fe:	4642      	mov	r2, r8
 8019300:	464b      	mov	r3, r9
 8019302:	f7e6 ffeb 	bl	80002dc <__adddf3>
 8019306:	460b      	mov	r3, r1
 8019308:	4979      	ldr	r1, [pc, #484]	; (80194f0 <_strtod_l+0xbd0>)
 801930a:	4a7b      	ldr	r2, [pc, #492]	; (80194f8 <_strtod_l+0xbd8>)
 801930c:	4019      	ands	r1, r3
 801930e:	4291      	cmp	r1, r2
 8019310:	4680      	mov	r8, r0
 8019312:	d944      	bls.n	801939e <_strtod_l+0xa7e>
 8019314:	ee18 2a90 	vmov	r2, s17
 8019318:	4b78      	ldr	r3, [pc, #480]	; (80194fc <_strtod_l+0xbdc>)
 801931a:	429a      	cmp	r2, r3
 801931c:	d104      	bne.n	8019328 <_strtod_l+0xa08>
 801931e:	ee18 3a10 	vmov	r3, s16
 8019322:	3301      	adds	r3, #1
 8019324:	f43f ad40 	beq.w	8018da8 <_strtod_l+0x488>
 8019328:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80194fc <_strtod_l+0xbdc>
 801932c:	f04f 38ff 	mov.w	r8, #4294967295
 8019330:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019332:	4620      	mov	r0, r4
 8019334:	f7fe fe6a 	bl	801800c <_Bfree>
 8019338:	9905      	ldr	r1, [sp, #20]
 801933a:	4620      	mov	r0, r4
 801933c:	f7fe fe66 	bl	801800c <_Bfree>
 8019340:	4659      	mov	r1, fp
 8019342:	4620      	mov	r0, r4
 8019344:	f7fe fe62 	bl	801800c <_Bfree>
 8019348:	4629      	mov	r1, r5
 801934a:	4620      	mov	r0, r4
 801934c:	f7fe fe5e 	bl	801800c <_Bfree>
 8019350:	e609      	b.n	8018f66 <_strtod_l+0x646>
 8019352:	f1b8 0f01 	cmp.w	r8, #1
 8019356:	d103      	bne.n	8019360 <_strtod_l+0xa40>
 8019358:	f1b9 0f00 	cmp.w	r9, #0
 801935c:	f43f ad95 	beq.w	8018e8a <_strtod_l+0x56a>
 8019360:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80194b8 <_strtod_l+0xb98>
 8019364:	4f60      	ldr	r7, [pc, #384]	; (80194e8 <_strtod_l+0xbc8>)
 8019366:	ed8d 7b06 	vstr	d7, [sp, #24]
 801936a:	2600      	movs	r6, #0
 801936c:	e7ae      	b.n	80192cc <_strtod_l+0x9ac>
 801936e:	4f5f      	ldr	r7, [pc, #380]	; (80194ec <_strtod_l+0xbcc>)
 8019370:	2600      	movs	r6, #0
 8019372:	e7a7      	b.n	80192c4 <_strtod_l+0x9a4>
 8019374:	4b5d      	ldr	r3, [pc, #372]	; (80194ec <_strtod_l+0xbcc>)
 8019376:	4630      	mov	r0, r6
 8019378:	4639      	mov	r1, r7
 801937a:	2200      	movs	r2, #0
 801937c:	f7e7 f964 	bl	8000648 <__aeabi_dmul>
 8019380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019382:	4606      	mov	r6, r0
 8019384:	460f      	mov	r7, r1
 8019386:	2b00      	cmp	r3, #0
 8019388:	d09c      	beq.n	80192c4 <_strtod_l+0x9a4>
 801938a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801938e:	e79d      	b.n	80192cc <_strtod_l+0x9ac>
 8019390:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80194c0 <_strtod_l+0xba0>
 8019394:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019398:	ec57 6b17 	vmov	r6, r7, d7
 801939c:	e796      	b.n	80192cc <_strtod_l+0x9ac>
 801939e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80193a2:	9b04      	ldr	r3, [sp, #16]
 80193a4:	46ca      	mov	sl, r9
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d1c2      	bne.n	8019330 <_strtod_l+0xa10>
 80193aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80193ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80193b0:	0d1b      	lsrs	r3, r3, #20
 80193b2:	051b      	lsls	r3, r3, #20
 80193b4:	429a      	cmp	r2, r3
 80193b6:	d1bb      	bne.n	8019330 <_strtod_l+0xa10>
 80193b8:	4630      	mov	r0, r6
 80193ba:	4639      	mov	r1, r7
 80193bc:	f7e7 fca4 	bl	8000d08 <__aeabi_d2lz>
 80193c0:	f7e7 f914 	bl	80005ec <__aeabi_l2d>
 80193c4:	4602      	mov	r2, r0
 80193c6:	460b      	mov	r3, r1
 80193c8:	4630      	mov	r0, r6
 80193ca:	4639      	mov	r1, r7
 80193cc:	f7e6 ff84 	bl	80002d8 <__aeabi_dsub>
 80193d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80193d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80193d6:	ea43 0308 	orr.w	r3, r3, r8
 80193da:	4313      	orrs	r3, r2
 80193dc:	4606      	mov	r6, r0
 80193de:	460f      	mov	r7, r1
 80193e0:	d054      	beq.n	801948c <_strtod_l+0xb6c>
 80193e2:	a339      	add	r3, pc, #228	; (adr r3, 80194c8 <_strtod_l+0xba8>)
 80193e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193e8:	f7e7 fba0 	bl	8000b2c <__aeabi_dcmplt>
 80193ec:	2800      	cmp	r0, #0
 80193ee:	f47f ace5 	bne.w	8018dbc <_strtod_l+0x49c>
 80193f2:	a337      	add	r3, pc, #220	; (adr r3, 80194d0 <_strtod_l+0xbb0>)
 80193f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f8:	4630      	mov	r0, r6
 80193fa:	4639      	mov	r1, r7
 80193fc:	f7e7 fbb4 	bl	8000b68 <__aeabi_dcmpgt>
 8019400:	2800      	cmp	r0, #0
 8019402:	d095      	beq.n	8019330 <_strtod_l+0xa10>
 8019404:	e4da      	b.n	8018dbc <_strtod_l+0x49c>
 8019406:	9b04      	ldr	r3, [sp, #16]
 8019408:	b333      	cbz	r3, 8019458 <_strtod_l+0xb38>
 801940a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801940c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019410:	d822      	bhi.n	8019458 <_strtod_l+0xb38>
 8019412:	a331      	add	r3, pc, #196	; (adr r3, 80194d8 <_strtod_l+0xbb8>)
 8019414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019418:	4630      	mov	r0, r6
 801941a:	4639      	mov	r1, r7
 801941c:	f7e7 fb90 	bl	8000b40 <__aeabi_dcmple>
 8019420:	b1a0      	cbz	r0, 801944c <_strtod_l+0xb2c>
 8019422:	4639      	mov	r1, r7
 8019424:	4630      	mov	r0, r6
 8019426:	f7e7 fbe7 	bl	8000bf8 <__aeabi_d2uiz>
 801942a:	2801      	cmp	r0, #1
 801942c:	bf38      	it	cc
 801942e:	2001      	movcc	r0, #1
 8019430:	f7e7 f890 	bl	8000554 <__aeabi_ui2d>
 8019434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019436:	4606      	mov	r6, r0
 8019438:	460f      	mov	r7, r1
 801943a:	bb23      	cbnz	r3, 8019486 <_strtod_l+0xb66>
 801943c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019440:	9010      	str	r0, [sp, #64]	; 0x40
 8019442:	9311      	str	r3, [sp, #68]	; 0x44
 8019444:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019448:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801944c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801944e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019450:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019454:	1a9b      	subs	r3, r3, r2
 8019456:	930f      	str	r3, [sp, #60]	; 0x3c
 8019458:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801945c:	eeb0 0a48 	vmov.f32	s0, s16
 8019460:	eef0 0a68 	vmov.f32	s1, s17
 8019464:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019468:	f7ff f8fc 	bl	8018664 <__ulp>
 801946c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019470:	ec53 2b10 	vmov	r2, r3, d0
 8019474:	f7e7 f8e8 	bl	8000648 <__aeabi_dmul>
 8019478:	ec53 2b18 	vmov	r2, r3, d8
 801947c:	f7e6 ff2e 	bl	80002dc <__adddf3>
 8019480:	4680      	mov	r8, r0
 8019482:	4689      	mov	r9, r1
 8019484:	e78d      	b.n	80193a2 <_strtod_l+0xa82>
 8019486:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801948a:	e7db      	b.n	8019444 <_strtod_l+0xb24>
 801948c:	a314      	add	r3, pc, #80	; (adr r3, 80194e0 <_strtod_l+0xbc0>)
 801948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019492:	f7e7 fb4b 	bl	8000b2c <__aeabi_dcmplt>
 8019496:	e7b3      	b.n	8019400 <_strtod_l+0xae0>
 8019498:	2300      	movs	r3, #0
 801949a:	930a      	str	r3, [sp, #40]	; 0x28
 801949c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801949e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80194a0:	6013      	str	r3, [r2, #0]
 80194a2:	f7ff ba7c 	b.w	801899e <_strtod_l+0x7e>
 80194a6:	2a65      	cmp	r2, #101	; 0x65
 80194a8:	f43f ab75 	beq.w	8018b96 <_strtod_l+0x276>
 80194ac:	2a45      	cmp	r2, #69	; 0x45
 80194ae:	f43f ab72 	beq.w	8018b96 <_strtod_l+0x276>
 80194b2:	2301      	movs	r3, #1
 80194b4:	f7ff bbaa 	b.w	8018c0c <_strtod_l+0x2ec>
 80194b8:	00000000 	.word	0x00000000
 80194bc:	bff00000 	.word	0xbff00000
 80194c0:	00000000 	.word	0x00000000
 80194c4:	3ff00000 	.word	0x3ff00000
 80194c8:	94a03595 	.word	0x94a03595
 80194cc:	3fdfffff 	.word	0x3fdfffff
 80194d0:	35afe535 	.word	0x35afe535
 80194d4:	3fe00000 	.word	0x3fe00000
 80194d8:	ffc00000 	.word	0xffc00000
 80194dc:	41dfffff 	.word	0x41dfffff
 80194e0:	94a03595 	.word	0x94a03595
 80194e4:	3fcfffff 	.word	0x3fcfffff
 80194e8:	3ff00000 	.word	0x3ff00000
 80194ec:	3fe00000 	.word	0x3fe00000
 80194f0:	7ff00000 	.word	0x7ff00000
 80194f4:	7fe00000 	.word	0x7fe00000
 80194f8:	7c9fffff 	.word	0x7c9fffff
 80194fc:	7fefffff 	.word	0x7fefffff

08019500 <_strtod_r>:
 8019500:	4b01      	ldr	r3, [pc, #4]	; (8019508 <_strtod_r+0x8>)
 8019502:	f7ff ba0d 	b.w	8018920 <_strtod_l>
 8019506:	bf00      	nop
 8019508:	200003d4 	.word	0x200003d4

0801950c <_strtol_l.constprop.0>:
 801950c:	2b01      	cmp	r3, #1
 801950e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019512:	d001      	beq.n	8019518 <_strtol_l.constprop.0+0xc>
 8019514:	2b24      	cmp	r3, #36	; 0x24
 8019516:	d906      	bls.n	8019526 <_strtol_l.constprop.0+0x1a>
 8019518:	f7fd fd7a 	bl	8017010 <__errno>
 801951c:	2316      	movs	r3, #22
 801951e:	6003      	str	r3, [r0, #0]
 8019520:	2000      	movs	r0, #0
 8019522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019526:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801960c <_strtol_l.constprop.0+0x100>
 801952a:	460d      	mov	r5, r1
 801952c:	462e      	mov	r6, r5
 801952e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019532:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019536:	f017 0708 	ands.w	r7, r7, #8
 801953a:	d1f7      	bne.n	801952c <_strtol_l.constprop.0+0x20>
 801953c:	2c2d      	cmp	r4, #45	; 0x2d
 801953e:	d132      	bne.n	80195a6 <_strtol_l.constprop.0+0x9a>
 8019540:	782c      	ldrb	r4, [r5, #0]
 8019542:	2701      	movs	r7, #1
 8019544:	1cb5      	adds	r5, r6, #2
 8019546:	2b00      	cmp	r3, #0
 8019548:	d05b      	beq.n	8019602 <_strtol_l.constprop.0+0xf6>
 801954a:	2b10      	cmp	r3, #16
 801954c:	d109      	bne.n	8019562 <_strtol_l.constprop.0+0x56>
 801954e:	2c30      	cmp	r4, #48	; 0x30
 8019550:	d107      	bne.n	8019562 <_strtol_l.constprop.0+0x56>
 8019552:	782c      	ldrb	r4, [r5, #0]
 8019554:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019558:	2c58      	cmp	r4, #88	; 0x58
 801955a:	d14d      	bne.n	80195f8 <_strtol_l.constprop.0+0xec>
 801955c:	786c      	ldrb	r4, [r5, #1]
 801955e:	2310      	movs	r3, #16
 8019560:	3502      	adds	r5, #2
 8019562:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019566:	f108 38ff 	add.w	r8, r8, #4294967295
 801956a:	f04f 0e00 	mov.w	lr, #0
 801956e:	fbb8 f9f3 	udiv	r9, r8, r3
 8019572:	4676      	mov	r6, lr
 8019574:	fb03 8a19 	mls	sl, r3, r9, r8
 8019578:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801957c:	f1bc 0f09 	cmp.w	ip, #9
 8019580:	d816      	bhi.n	80195b0 <_strtol_l.constprop.0+0xa4>
 8019582:	4664      	mov	r4, ip
 8019584:	42a3      	cmp	r3, r4
 8019586:	dd24      	ble.n	80195d2 <_strtol_l.constprop.0+0xc6>
 8019588:	f1be 3fff 	cmp.w	lr, #4294967295
 801958c:	d008      	beq.n	80195a0 <_strtol_l.constprop.0+0x94>
 801958e:	45b1      	cmp	r9, r6
 8019590:	d31c      	bcc.n	80195cc <_strtol_l.constprop.0+0xc0>
 8019592:	d101      	bne.n	8019598 <_strtol_l.constprop.0+0x8c>
 8019594:	45a2      	cmp	sl, r4
 8019596:	db19      	blt.n	80195cc <_strtol_l.constprop.0+0xc0>
 8019598:	fb06 4603 	mla	r6, r6, r3, r4
 801959c:	f04f 0e01 	mov.w	lr, #1
 80195a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80195a4:	e7e8      	b.n	8019578 <_strtol_l.constprop.0+0x6c>
 80195a6:	2c2b      	cmp	r4, #43	; 0x2b
 80195a8:	bf04      	itt	eq
 80195aa:	782c      	ldrbeq	r4, [r5, #0]
 80195ac:	1cb5      	addeq	r5, r6, #2
 80195ae:	e7ca      	b.n	8019546 <_strtol_l.constprop.0+0x3a>
 80195b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80195b4:	f1bc 0f19 	cmp.w	ip, #25
 80195b8:	d801      	bhi.n	80195be <_strtol_l.constprop.0+0xb2>
 80195ba:	3c37      	subs	r4, #55	; 0x37
 80195bc:	e7e2      	b.n	8019584 <_strtol_l.constprop.0+0x78>
 80195be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80195c2:	f1bc 0f19 	cmp.w	ip, #25
 80195c6:	d804      	bhi.n	80195d2 <_strtol_l.constprop.0+0xc6>
 80195c8:	3c57      	subs	r4, #87	; 0x57
 80195ca:	e7db      	b.n	8019584 <_strtol_l.constprop.0+0x78>
 80195cc:	f04f 3eff 	mov.w	lr, #4294967295
 80195d0:	e7e6      	b.n	80195a0 <_strtol_l.constprop.0+0x94>
 80195d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80195d6:	d105      	bne.n	80195e4 <_strtol_l.constprop.0+0xd8>
 80195d8:	2322      	movs	r3, #34	; 0x22
 80195da:	6003      	str	r3, [r0, #0]
 80195dc:	4646      	mov	r6, r8
 80195de:	b942      	cbnz	r2, 80195f2 <_strtol_l.constprop.0+0xe6>
 80195e0:	4630      	mov	r0, r6
 80195e2:	e79e      	b.n	8019522 <_strtol_l.constprop.0+0x16>
 80195e4:	b107      	cbz	r7, 80195e8 <_strtol_l.constprop.0+0xdc>
 80195e6:	4276      	negs	r6, r6
 80195e8:	2a00      	cmp	r2, #0
 80195ea:	d0f9      	beq.n	80195e0 <_strtol_l.constprop.0+0xd4>
 80195ec:	f1be 0f00 	cmp.w	lr, #0
 80195f0:	d000      	beq.n	80195f4 <_strtol_l.constprop.0+0xe8>
 80195f2:	1e69      	subs	r1, r5, #1
 80195f4:	6011      	str	r1, [r2, #0]
 80195f6:	e7f3      	b.n	80195e0 <_strtol_l.constprop.0+0xd4>
 80195f8:	2430      	movs	r4, #48	; 0x30
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d1b1      	bne.n	8019562 <_strtol_l.constprop.0+0x56>
 80195fe:	2308      	movs	r3, #8
 8019600:	e7af      	b.n	8019562 <_strtol_l.constprop.0+0x56>
 8019602:	2c30      	cmp	r4, #48	; 0x30
 8019604:	d0a5      	beq.n	8019552 <_strtol_l.constprop.0+0x46>
 8019606:	230a      	movs	r3, #10
 8019608:	e7ab      	b.n	8019562 <_strtol_l.constprop.0+0x56>
 801960a:	bf00      	nop
 801960c:	0801d6d1 	.word	0x0801d6d1

08019610 <_strtol_r>:
 8019610:	f7ff bf7c 	b.w	801950c <_strtol_l.constprop.0>

08019614 <__ssputs_r>:
 8019614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019618:	688e      	ldr	r6, [r1, #8]
 801961a:	461f      	mov	r7, r3
 801961c:	42be      	cmp	r6, r7
 801961e:	680b      	ldr	r3, [r1, #0]
 8019620:	4682      	mov	sl, r0
 8019622:	460c      	mov	r4, r1
 8019624:	4690      	mov	r8, r2
 8019626:	d82c      	bhi.n	8019682 <__ssputs_r+0x6e>
 8019628:	898a      	ldrh	r2, [r1, #12]
 801962a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801962e:	d026      	beq.n	801967e <__ssputs_r+0x6a>
 8019630:	6965      	ldr	r5, [r4, #20]
 8019632:	6909      	ldr	r1, [r1, #16]
 8019634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019638:	eba3 0901 	sub.w	r9, r3, r1
 801963c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019640:	1c7b      	adds	r3, r7, #1
 8019642:	444b      	add	r3, r9
 8019644:	106d      	asrs	r5, r5, #1
 8019646:	429d      	cmp	r5, r3
 8019648:	bf38      	it	cc
 801964a:	461d      	movcc	r5, r3
 801964c:	0553      	lsls	r3, r2, #21
 801964e:	d527      	bpl.n	80196a0 <__ssputs_r+0x8c>
 8019650:	4629      	mov	r1, r5
 8019652:	f7fe fc0f 	bl	8017e74 <_malloc_r>
 8019656:	4606      	mov	r6, r0
 8019658:	b360      	cbz	r0, 80196b4 <__ssputs_r+0xa0>
 801965a:	6921      	ldr	r1, [r4, #16]
 801965c:	464a      	mov	r2, r9
 801965e:	f7fd fd04 	bl	801706a <memcpy>
 8019662:	89a3      	ldrh	r3, [r4, #12]
 8019664:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801966c:	81a3      	strh	r3, [r4, #12]
 801966e:	6126      	str	r6, [r4, #16]
 8019670:	6165      	str	r5, [r4, #20]
 8019672:	444e      	add	r6, r9
 8019674:	eba5 0509 	sub.w	r5, r5, r9
 8019678:	6026      	str	r6, [r4, #0]
 801967a:	60a5      	str	r5, [r4, #8]
 801967c:	463e      	mov	r6, r7
 801967e:	42be      	cmp	r6, r7
 8019680:	d900      	bls.n	8019684 <__ssputs_r+0x70>
 8019682:	463e      	mov	r6, r7
 8019684:	6820      	ldr	r0, [r4, #0]
 8019686:	4632      	mov	r2, r6
 8019688:	4641      	mov	r1, r8
 801968a:	f000 f9c9 	bl	8019a20 <memmove>
 801968e:	68a3      	ldr	r3, [r4, #8]
 8019690:	1b9b      	subs	r3, r3, r6
 8019692:	60a3      	str	r3, [r4, #8]
 8019694:	6823      	ldr	r3, [r4, #0]
 8019696:	4433      	add	r3, r6
 8019698:	6023      	str	r3, [r4, #0]
 801969a:	2000      	movs	r0, #0
 801969c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196a0:	462a      	mov	r2, r5
 80196a2:	f000 fd9e 	bl	801a1e2 <_realloc_r>
 80196a6:	4606      	mov	r6, r0
 80196a8:	2800      	cmp	r0, #0
 80196aa:	d1e0      	bne.n	801966e <__ssputs_r+0x5a>
 80196ac:	6921      	ldr	r1, [r4, #16]
 80196ae:	4650      	mov	r0, sl
 80196b0:	f7fe fb6c 	bl	8017d8c <_free_r>
 80196b4:	230c      	movs	r3, #12
 80196b6:	f8ca 3000 	str.w	r3, [sl]
 80196ba:	89a3      	ldrh	r3, [r4, #12]
 80196bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196c0:	81a3      	strh	r3, [r4, #12]
 80196c2:	f04f 30ff 	mov.w	r0, #4294967295
 80196c6:	e7e9      	b.n	801969c <__ssputs_r+0x88>

080196c8 <_svfiprintf_r>:
 80196c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196cc:	4698      	mov	r8, r3
 80196ce:	898b      	ldrh	r3, [r1, #12]
 80196d0:	061b      	lsls	r3, r3, #24
 80196d2:	b09d      	sub	sp, #116	; 0x74
 80196d4:	4607      	mov	r7, r0
 80196d6:	460d      	mov	r5, r1
 80196d8:	4614      	mov	r4, r2
 80196da:	d50e      	bpl.n	80196fa <_svfiprintf_r+0x32>
 80196dc:	690b      	ldr	r3, [r1, #16]
 80196de:	b963      	cbnz	r3, 80196fa <_svfiprintf_r+0x32>
 80196e0:	2140      	movs	r1, #64	; 0x40
 80196e2:	f7fe fbc7 	bl	8017e74 <_malloc_r>
 80196e6:	6028      	str	r0, [r5, #0]
 80196e8:	6128      	str	r0, [r5, #16]
 80196ea:	b920      	cbnz	r0, 80196f6 <_svfiprintf_r+0x2e>
 80196ec:	230c      	movs	r3, #12
 80196ee:	603b      	str	r3, [r7, #0]
 80196f0:	f04f 30ff 	mov.w	r0, #4294967295
 80196f4:	e0d0      	b.n	8019898 <_svfiprintf_r+0x1d0>
 80196f6:	2340      	movs	r3, #64	; 0x40
 80196f8:	616b      	str	r3, [r5, #20]
 80196fa:	2300      	movs	r3, #0
 80196fc:	9309      	str	r3, [sp, #36]	; 0x24
 80196fe:	2320      	movs	r3, #32
 8019700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019704:	f8cd 800c 	str.w	r8, [sp, #12]
 8019708:	2330      	movs	r3, #48	; 0x30
 801970a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80198b0 <_svfiprintf_r+0x1e8>
 801970e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019712:	f04f 0901 	mov.w	r9, #1
 8019716:	4623      	mov	r3, r4
 8019718:	469a      	mov	sl, r3
 801971a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801971e:	b10a      	cbz	r2, 8019724 <_svfiprintf_r+0x5c>
 8019720:	2a25      	cmp	r2, #37	; 0x25
 8019722:	d1f9      	bne.n	8019718 <_svfiprintf_r+0x50>
 8019724:	ebba 0b04 	subs.w	fp, sl, r4
 8019728:	d00b      	beq.n	8019742 <_svfiprintf_r+0x7a>
 801972a:	465b      	mov	r3, fp
 801972c:	4622      	mov	r2, r4
 801972e:	4629      	mov	r1, r5
 8019730:	4638      	mov	r0, r7
 8019732:	f7ff ff6f 	bl	8019614 <__ssputs_r>
 8019736:	3001      	adds	r0, #1
 8019738:	f000 80a9 	beq.w	801988e <_svfiprintf_r+0x1c6>
 801973c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801973e:	445a      	add	r2, fp
 8019740:	9209      	str	r2, [sp, #36]	; 0x24
 8019742:	f89a 3000 	ldrb.w	r3, [sl]
 8019746:	2b00      	cmp	r3, #0
 8019748:	f000 80a1 	beq.w	801988e <_svfiprintf_r+0x1c6>
 801974c:	2300      	movs	r3, #0
 801974e:	f04f 32ff 	mov.w	r2, #4294967295
 8019752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019756:	f10a 0a01 	add.w	sl, sl, #1
 801975a:	9304      	str	r3, [sp, #16]
 801975c:	9307      	str	r3, [sp, #28]
 801975e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019762:	931a      	str	r3, [sp, #104]	; 0x68
 8019764:	4654      	mov	r4, sl
 8019766:	2205      	movs	r2, #5
 8019768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801976c:	4850      	ldr	r0, [pc, #320]	; (80198b0 <_svfiprintf_r+0x1e8>)
 801976e:	f7e6 fd57 	bl	8000220 <memchr>
 8019772:	9a04      	ldr	r2, [sp, #16]
 8019774:	b9d8      	cbnz	r0, 80197ae <_svfiprintf_r+0xe6>
 8019776:	06d0      	lsls	r0, r2, #27
 8019778:	bf44      	itt	mi
 801977a:	2320      	movmi	r3, #32
 801977c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019780:	0711      	lsls	r1, r2, #28
 8019782:	bf44      	itt	mi
 8019784:	232b      	movmi	r3, #43	; 0x2b
 8019786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801978a:	f89a 3000 	ldrb.w	r3, [sl]
 801978e:	2b2a      	cmp	r3, #42	; 0x2a
 8019790:	d015      	beq.n	80197be <_svfiprintf_r+0xf6>
 8019792:	9a07      	ldr	r2, [sp, #28]
 8019794:	4654      	mov	r4, sl
 8019796:	2000      	movs	r0, #0
 8019798:	f04f 0c0a 	mov.w	ip, #10
 801979c:	4621      	mov	r1, r4
 801979e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80197a2:	3b30      	subs	r3, #48	; 0x30
 80197a4:	2b09      	cmp	r3, #9
 80197a6:	d94d      	bls.n	8019844 <_svfiprintf_r+0x17c>
 80197a8:	b1b0      	cbz	r0, 80197d8 <_svfiprintf_r+0x110>
 80197aa:	9207      	str	r2, [sp, #28]
 80197ac:	e014      	b.n	80197d8 <_svfiprintf_r+0x110>
 80197ae:	eba0 0308 	sub.w	r3, r0, r8
 80197b2:	fa09 f303 	lsl.w	r3, r9, r3
 80197b6:	4313      	orrs	r3, r2
 80197b8:	9304      	str	r3, [sp, #16]
 80197ba:	46a2      	mov	sl, r4
 80197bc:	e7d2      	b.n	8019764 <_svfiprintf_r+0x9c>
 80197be:	9b03      	ldr	r3, [sp, #12]
 80197c0:	1d19      	adds	r1, r3, #4
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	9103      	str	r1, [sp, #12]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	bfbb      	ittet	lt
 80197ca:	425b      	neglt	r3, r3
 80197cc:	f042 0202 	orrlt.w	r2, r2, #2
 80197d0:	9307      	strge	r3, [sp, #28]
 80197d2:	9307      	strlt	r3, [sp, #28]
 80197d4:	bfb8      	it	lt
 80197d6:	9204      	strlt	r2, [sp, #16]
 80197d8:	7823      	ldrb	r3, [r4, #0]
 80197da:	2b2e      	cmp	r3, #46	; 0x2e
 80197dc:	d10c      	bne.n	80197f8 <_svfiprintf_r+0x130>
 80197de:	7863      	ldrb	r3, [r4, #1]
 80197e0:	2b2a      	cmp	r3, #42	; 0x2a
 80197e2:	d134      	bne.n	801984e <_svfiprintf_r+0x186>
 80197e4:	9b03      	ldr	r3, [sp, #12]
 80197e6:	1d1a      	adds	r2, r3, #4
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	9203      	str	r2, [sp, #12]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	bfb8      	it	lt
 80197f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80197f4:	3402      	adds	r4, #2
 80197f6:	9305      	str	r3, [sp, #20]
 80197f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80198c0 <_svfiprintf_r+0x1f8>
 80197fc:	7821      	ldrb	r1, [r4, #0]
 80197fe:	2203      	movs	r2, #3
 8019800:	4650      	mov	r0, sl
 8019802:	f7e6 fd0d 	bl	8000220 <memchr>
 8019806:	b138      	cbz	r0, 8019818 <_svfiprintf_r+0x150>
 8019808:	9b04      	ldr	r3, [sp, #16]
 801980a:	eba0 000a 	sub.w	r0, r0, sl
 801980e:	2240      	movs	r2, #64	; 0x40
 8019810:	4082      	lsls	r2, r0
 8019812:	4313      	orrs	r3, r2
 8019814:	3401      	adds	r4, #1
 8019816:	9304      	str	r3, [sp, #16]
 8019818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801981c:	4825      	ldr	r0, [pc, #148]	; (80198b4 <_svfiprintf_r+0x1ec>)
 801981e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019822:	2206      	movs	r2, #6
 8019824:	f7e6 fcfc 	bl	8000220 <memchr>
 8019828:	2800      	cmp	r0, #0
 801982a:	d038      	beq.n	801989e <_svfiprintf_r+0x1d6>
 801982c:	4b22      	ldr	r3, [pc, #136]	; (80198b8 <_svfiprintf_r+0x1f0>)
 801982e:	bb1b      	cbnz	r3, 8019878 <_svfiprintf_r+0x1b0>
 8019830:	9b03      	ldr	r3, [sp, #12]
 8019832:	3307      	adds	r3, #7
 8019834:	f023 0307 	bic.w	r3, r3, #7
 8019838:	3308      	adds	r3, #8
 801983a:	9303      	str	r3, [sp, #12]
 801983c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801983e:	4433      	add	r3, r6
 8019840:	9309      	str	r3, [sp, #36]	; 0x24
 8019842:	e768      	b.n	8019716 <_svfiprintf_r+0x4e>
 8019844:	fb0c 3202 	mla	r2, ip, r2, r3
 8019848:	460c      	mov	r4, r1
 801984a:	2001      	movs	r0, #1
 801984c:	e7a6      	b.n	801979c <_svfiprintf_r+0xd4>
 801984e:	2300      	movs	r3, #0
 8019850:	3401      	adds	r4, #1
 8019852:	9305      	str	r3, [sp, #20]
 8019854:	4619      	mov	r1, r3
 8019856:	f04f 0c0a 	mov.w	ip, #10
 801985a:	4620      	mov	r0, r4
 801985c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019860:	3a30      	subs	r2, #48	; 0x30
 8019862:	2a09      	cmp	r2, #9
 8019864:	d903      	bls.n	801986e <_svfiprintf_r+0x1a6>
 8019866:	2b00      	cmp	r3, #0
 8019868:	d0c6      	beq.n	80197f8 <_svfiprintf_r+0x130>
 801986a:	9105      	str	r1, [sp, #20]
 801986c:	e7c4      	b.n	80197f8 <_svfiprintf_r+0x130>
 801986e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019872:	4604      	mov	r4, r0
 8019874:	2301      	movs	r3, #1
 8019876:	e7f0      	b.n	801985a <_svfiprintf_r+0x192>
 8019878:	ab03      	add	r3, sp, #12
 801987a:	9300      	str	r3, [sp, #0]
 801987c:	462a      	mov	r2, r5
 801987e:	4b0f      	ldr	r3, [pc, #60]	; (80198bc <_svfiprintf_r+0x1f4>)
 8019880:	a904      	add	r1, sp, #16
 8019882:	4638      	mov	r0, r7
 8019884:	f7fc fc76 	bl	8016174 <_printf_float>
 8019888:	1c42      	adds	r2, r0, #1
 801988a:	4606      	mov	r6, r0
 801988c:	d1d6      	bne.n	801983c <_svfiprintf_r+0x174>
 801988e:	89ab      	ldrh	r3, [r5, #12]
 8019890:	065b      	lsls	r3, r3, #25
 8019892:	f53f af2d 	bmi.w	80196f0 <_svfiprintf_r+0x28>
 8019896:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019898:	b01d      	add	sp, #116	; 0x74
 801989a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801989e:	ab03      	add	r3, sp, #12
 80198a0:	9300      	str	r3, [sp, #0]
 80198a2:	462a      	mov	r2, r5
 80198a4:	4b05      	ldr	r3, [pc, #20]	; (80198bc <_svfiprintf_r+0x1f4>)
 80198a6:	a904      	add	r1, sp, #16
 80198a8:	4638      	mov	r0, r7
 80198aa:	f7fc ff07 	bl	80166bc <_printf_i>
 80198ae:	e7eb      	b.n	8019888 <_svfiprintf_r+0x1c0>
 80198b0:	0801d7d1 	.word	0x0801d7d1
 80198b4:	0801d7db 	.word	0x0801d7db
 80198b8:	08016175 	.word	0x08016175
 80198bc:	08019615 	.word	0x08019615
 80198c0:	0801d7d7 	.word	0x0801d7d7

080198c4 <__sflush_r>:
 80198c4:	898a      	ldrh	r2, [r1, #12]
 80198c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198ca:	4605      	mov	r5, r0
 80198cc:	0710      	lsls	r0, r2, #28
 80198ce:	460c      	mov	r4, r1
 80198d0:	d458      	bmi.n	8019984 <__sflush_r+0xc0>
 80198d2:	684b      	ldr	r3, [r1, #4]
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	dc05      	bgt.n	80198e4 <__sflush_r+0x20>
 80198d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80198da:	2b00      	cmp	r3, #0
 80198dc:	dc02      	bgt.n	80198e4 <__sflush_r+0x20>
 80198de:	2000      	movs	r0, #0
 80198e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80198e6:	2e00      	cmp	r6, #0
 80198e8:	d0f9      	beq.n	80198de <__sflush_r+0x1a>
 80198ea:	2300      	movs	r3, #0
 80198ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80198f0:	682f      	ldr	r7, [r5, #0]
 80198f2:	6a21      	ldr	r1, [r4, #32]
 80198f4:	602b      	str	r3, [r5, #0]
 80198f6:	d032      	beq.n	801995e <__sflush_r+0x9a>
 80198f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80198fa:	89a3      	ldrh	r3, [r4, #12]
 80198fc:	075a      	lsls	r2, r3, #29
 80198fe:	d505      	bpl.n	801990c <__sflush_r+0x48>
 8019900:	6863      	ldr	r3, [r4, #4]
 8019902:	1ac0      	subs	r0, r0, r3
 8019904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019906:	b10b      	cbz	r3, 801990c <__sflush_r+0x48>
 8019908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801990a:	1ac0      	subs	r0, r0, r3
 801990c:	2300      	movs	r3, #0
 801990e:	4602      	mov	r2, r0
 8019910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019912:	6a21      	ldr	r1, [r4, #32]
 8019914:	4628      	mov	r0, r5
 8019916:	47b0      	blx	r6
 8019918:	1c43      	adds	r3, r0, #1
 801991a:	89a3      	ldrh	r3, [r4, #12]
 801991c:	d106      	bne.n	801992c <__sflush_r+0x68>
 801991e:	6829      	ldr	r1, [r5, #0]
 8019920:	291d      	cmp	r1, #29
 8019922:	d82b      	bhi.n	801997c <__sflush_r+0xb8>
 8019924:	4a29      	ldr	r2, [pc, #164]	; (80199cc <__sflush_r+0x108>)
 8019926:	410a      	asrs	r2, r1
 8019928:	07d6      	lsls	r6, r2, #31
 801992a:	d427      	bmi.n	801997c <__sflush_r+0xb8>
 801992c:	2200      	movs	r2, #0
 801992e:	6062      	str	r2, [r4, #4]
 8019930:	04d9      	lsls	r1, r3, #19
 8019932:	6922      	ldr	r2, [r4, #16]
 8019934:	6022      	str	r2, [r4, #0]
 8019936:	d504      	bpl.n	8019942 <__sflush_r+0x7e>
 8019938:	1c42      	adds	r2, r0, #1
 801993a:	d101      	bne.n	8019940 <__sflush_r+0x7c>
 801993c:	682b      	ldr	r3, [r5, #0]
 801993e:	b903      	cbnz	r3, 8019942 <__sflush_r+0x7e>
 8019940:	6560      	str	r0, [r4, #84]	; 0x54
 8019942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019944:	602f      	str	r7, [r5, #0]
 8019946:	2900      	cmp	r1, #0
 8019948:	d0c9      	beq.n	80198de <__sflush_r+0x1a>
 801994a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801994e:	4299      	cmp	r1, r3
 8019950:	d002      	beq.n	8019958 <__sflush_r+0x94>
 8019952:	4628      	mov	r0, r5
 8019954:	f7fe fa1a 	bl	8017d8c <_free_r>
 8019958:	2000      	movs	r0, #0
 801995a:	6360      	str	r0, [r4, #52]	; 0x34
 801995c:	e7c0      	b.n	80198e0 <__sflush_r+0x1c>
 801995e:	2301      	movs	r3, #1
 8019960:	4628      	mov	r0, r5
 8019962:	47b0      	blx	r6
 8019964:	1c41      	adds	r1, r0, #1
 8019966:	d1c8      	bne.n	80198fa <__sflush_r+0x36>
 8019968:	682b      	ldr	r3, [r5, #0]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d0c5      	beq.n	80198fa <__sflush_r+0x36>
 801996e:	2b1d      	cmp	r3, #29
 8019970:	d001      	beq.n	8019976 <__sflush_r+0xb2>
 8019972:	2b16      	cmp	r3, #22
 8019974:	d101      	bne.n	801997a <__sflush_r+0xb6>
 8019976:	602f      	str	r7, [r5, #0]
 8019978:	e7b1      	b.n	80198de <__sflush_r+0x1a>
 801997a:	89a3      	ldrh	r3, [r4, #12]
 801997c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019980:	81a3      	strh	r3, [r4, #12]
 8019982:	e7ad      	b.n	80198e0 <__sflush_r+0x1c>
 8019984:	690f      	ldr	r7, [r1, #16]
 8019986:	2f00      	cmp	r7, #0
 8019988:	d0a9      	beq.n	80198de <__sflush_r+0x1a>
 801998a:	0793      	lsls	r3, r2, #30
 801998c:	680e      	ldr	r6, [r1, #0]
 801998e:	bf08      	it	eq
 8019990:	694b      	ldreq	r3, [r1, #20]
 8019992:	600f      	str	r7, [r1, #0]
 8019994:	bf18      	it	ne
 8019996:	2300      	movne	r3, #0
 8019998:	eba6 0807 	sub.w	r8, r6, r7
 801999c:	608b      	str	r3, [r1, #8]
 801999e:	f1b8 0f00 	cmp.w	r8, #0
 80199a2:	dd9c      	ble.n	80198de <__sflush_r+0x1a>
 80199a4:	6a21      	ldr	r1, [r4, #32]
 80199a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80199a8:	4643      	mov	r3, r8
 80199aa:	463a      	mov	r2, r7
 80199ac:	4628      	mov	r0, r5
 80199ae:	47b0      	blx	r6
 80199b0:	2800      	cmp	r0, #0
 80199b2:	dc06      	bgt.n	80199c2 <__sflush_r+0xfe>
 80199b4:	89a3      	ldrh	r3, [r4, #12]
 80199b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199ba:	81a3      	strh	r3, [r4, #12]
 80199bc:	f04f 30ff 	mov.w	r0, #4294967295
 80199c0:	e78e      	b.n	80198e0 <__sflush_r+0x1c>
 80199c2:	4407      	add	r7, r0
 80199c4:	eba8 0800 	sub.w	r8, r8, r0
 80199c8:	e7e9      	b.n	801999e <__sflush_r+0xda>
 80199ca:	bf00      	nop
 80199cc:	dfbffffe 	.word	0xdfbffffe

080199d0 <_fflush_r>:
 80199d0:	b538      	push	{r3, r4, r5, lr}
 80199d2:	690b      	ldr	r3, [r1, #16]
 80199d4:	4605      	mov	r5, r0
 80199d6:	460c      	mov	r4, r1
 80199d8:	b913      	cbnz	r3, 80199e0 <_fflush_r+0x10>
 80199da:	2500      	movs	r5, #0
 80199dc:	4628      	mov	r0, r5
 80199de:	bd38      	pop	{r3, r4, r5, pc}
 80199e0:	b118      	cbz	r0, 80199ea <_fflush_r+0x1a>
 80199e2:	6a03      	ldr	r3, [r0, #32]
 80199e4:	b90b      	cbnz	r3, 80199ea <_fflush_r+0x1a>
 80199e6:	f7fd fa27 	bl	8016e38 <__sinit>
 80199ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d0f3      	beq.n	80199da <_fflush_r+0xa>
 80199f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80199f4:	07d0      	lsls	r0, r2, #31
 80199f6:	d404      	bmi.n	8019a02 <_fflush_r+0x32>
 80199f8:	0599      	lsls	r1, r3, #22
 80199fa:	d402      	bmi.n	8019a02 <_fflush_r+0x32>
 80199fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199fe:	f7fd fb32 	bl	8017066 <__retarget_lock_acquire_recursive>
 8019a02:	4628      	mov	r0, r5
 8019a04:	4621      	mov	r1, r4
 8019a06:	f7ff ff5d 	bl	80198c4 <__sflush_r>
 8019a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a0c:	07da      	lsls	r2, r3, #31
 8019a0e:	4605      	mov	r5, r0
 8019a10:	d4e4      	bmi.n	80199dc <_fflush_r+0xc>
 8019a12:	89a3      	ldrh	r3, [r4, #12]
 8019a14:	059b      	lsls	r3, r3, #22
 8019a16:	d4e1      	bmi.n	80199dc <_fflush_r+0xc>
 8019a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a1a:	f7fd fb25 	bl	8017068 <__retarget_lock_release_recursive>
 8019a1e:	e7dd      	b.n	80199dc <_fflush_r+0xc>

08019a20 <memmove>:
 8019a20:	4288      	cmp	r0, r1
 8019a22:	b510      	push	{r4, lr}
 8019a24:	eb01 0402 	add.w	r4, r1, r2
 8019a28:	d902      	bls.n	8019a30 <memmove+0x10>
 8019a2a:	4284      	cmp	r4, r0
 8019a2c:	4623      	mov	r3, r4
 8019a2e:	d807      	bhi.n	8019a40 <memmove+0x20>
 8019a30:	1e43      	subs	r3, r0, #1
 8019a32:	42a1      	cmp	r1, r4
 8019a34:	d008      	beq.n	8019a48 <memmove+0x28>
 8019a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019a3e:	e7f8      	b.n	8019a32 <memmove+0x12>
 8019a40:	4402      	add	r2, r0
 8019a42:	4601      	mov	r1, r0
 8019a44:	428a      	cmp	r2, r1
 8019a46:	d100      	bne.n	8019a4a <memmove+0x2a>
 8019a48:	bd10      	pop	{r4, pc}
 8019a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019a52:	e7f7      	b.n	8019a44 <memmove+0x24>

08019a54 <strncmp>:
 8019a54:	b510      	push	{r4, lr}
 8019a56:	b16a      	cbz	r2, 8019a74 <strncmp+0x20>
 8019a58:	3901      	subs	r1, #1
 8019a5a:	1884      	adds	r4, r0, r2
 8019a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019a64:	429a      	cmp	r2, r3
 8019a66:	d103      	bne.n	8019a70 <strncmp+0x1c>
 8019a68:	42a0      	cmp	r0, r4
 8019a6a:	d001      	beq.n	8019a70 <strncmp+0x1c>
 8019a6c:	2a00      	cmp	r2, #0
 8019a6e:	d1f5      	bne.n	8019a5c <strncmp+0x8>
 8019a70:	1ad0      	subs	r0, r2, r3
 8019a72:	bd10      	pop	{r4, pc}
 8019a74:	4610      	mov	r0, r2
 8019a76:	e7fc      	b.n	8019a72 <strncmp+0x1e>

08019a78 <_sbrk_r>:
 8019a78:	b538      	push	{r3, r4, r5, lr}
 8019a7a:	4d06      	ldr	r5, [pc, #24]	; (8019a94 <_sbrk_r+0x1c>)
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	4604      	mov	r4, r0
 8019a80:	4608      	mov	r0, r1
 8019a82:	602b      	str	r3, [r5, #0]
 8019a84:	f7eb fd70 	bl	8005568 <_sbrk>
 8019a88:	1c43      	adds	r3, r0, #1
 8019a8a:	d102      	bne.n	8019a92 <_sbrk_r+0x1a>
 8019a8c:	682b      	ldr	r3, [r5, #0]
 8019a8e:	b103      	cbz	r3, 8019a92 <_sbrk_r+0x1a>
 8019a90:	6023      	str	r3, [r4, #0]
 8019a92:	bd38      	pop	{r3, r4, r5, pc}
 8019a94:	200033b8 	.word	0x200033b8

08019a98 <nan>:
 8019a98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019aa0 <nan+0x8>
 8019a9c:	4770      	bx	lr
 8019a9e:	bf00      	nop
 8019aa0:	00000000 	.word	0x00000000
 8019aa4:	7ff80000 	.word	0x7ff80000

08019aa8 <__assert_func>:
 8019aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019aaa:	4614      	mov	r4, r2
 8019aac:	461a      	mov	r2, r3
 8019aae:	4b09      	ldr	r3, [pc, #36]	; (8019ad4 <__assert_func+0x2c>)
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	4605      	mov	r5, r0
 8019ab4:	68d8      	ldr	r0, [r3, #12]
 8019ab6:	b14c      	cbz	r4, 8019acc <__assert_func+0x24>
 8019ab8:	4b07      	ldr	r3, [pc, #28]	; (8019ad8 <__assert_func+0x30>)
 8019aba:	9100      	str	r1, [sp, #0]
 8019abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019ac0:	4906      	ldr	r1, [pc, #24]	; (8019adc <__assert_func+0x34>)
 8019ac2:	462b      	mov	r3, r5
 8019ac4:	f000 fbca 	bl	801a25c <fiprintf>
 8019ac8:	f000 fbda 	bl	801a280 <abort>
 8019acc:	4b04      	ldr	r3, [pc, #16]	; (8019ae0 <__assert_func+0x38>)
 8019ace:	461c      	mov	r4, r3
 8019ad0:	e7f3      	b.n	8019aba <__assert_func+0x12>
 8019ad2:	bf00      	nop
 8019ad4:	200003d0 	.word	0x200003d0
 8019ad8:	0801d7ea 	.word	0x0801d7ea
 8019adc:	0801d7f7 	.word	0x0801d7f7
 8019ae0:	0801d825 	.word	0x0801d825

08019ae4 <_calloc_r>:
 8019ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ae6:	fba1 2402 	umull	r2, r4, r1, r2
 8019aea:	b94c      	cbnz	r4, 8019b00 <_calloc_r+0x1c>
 8019aec:	4611      	mov	r1, r2
 8019aee:	9201      	str	r2, [sp, #4]
 8019af0:	f7fe f9c0 	bl	8017e74 <_malloc_r>
 8019af4:	9a01      	ldr	r2, [sp, #4]
 8019af6:	4605      	mov	r5, r0
 8019af8:	b930      	cbnz	r0, 8019b08 <_calloc_r+0x24>
 8019afa:	4628      	mov	r0, r5
 8019afc:	b003      	add	sp, #12
 8019afe:	bd30      	pop	{r4, r5, pc}
 8019b00:	220c      	movs	r2, #12
 8019b02:	6002      	str	r2, [r0, #0]
 8019b04:	2500      	movs	r5, #0
 8019b06:	e7f8      	b.n	8019afa <_calloc_r+0x16>
 8019b08:	4621      	mov	r1, r4
 8019b0a:	f7fd fa2e 	bl	8016f6a <memset>
 8019b0e:	e7f4      	b.n	8019afa <_calloc_r+0x16>

08019b10 <rshift>:
 8019b10:	6903      	ldr	r3, [r0, #16]
 8019b12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019b16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019b1e:	f100 0414 	add.w	r4, r0, #20
 8019b22:	dd45      	ble.n	8019bb0 <rshift+0xa0>
 8019b24:	f011 011f 	ands.w	r1, r1, #31
 8019b28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019b2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019b30:	d10c      	bne.n	8019b4c <rshift+0x3c>
 8019b32:	f100 0710 	add.w	r7, r0, #16
 8019b36:	4629      	mov	r1, r5
 8019b38:	42b1      	cmp	r1, r6
 8019b3a:	d334      	bcc.n	8019ba6 <rshift+0x96>
 8019b3c:	1a9b      	subs	r3, r3, r2
 8019b3e:	009b      	lsls	r3, r3, #2
 8019b40:	1eea      	subs	r2, r5, #3
 8019b42:	4296      	cmp	r6, r2
 8019b44:	bf38      	it	cc
 8019b46:	2300      	movcc	r3, #0
 8019b48:	4423      	add	r3, r4
 8019b4a:	e015      	b.n	8019b78 <rshift+0x68>
 8019b4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019b50:	f1c1 0820 	rsb	r8, r1, #32
 8019b54:	40cf      	lsrs	r7, r1
 8019b56:	f105 0e04 	add.w	lr, r5, #4
 8019b5a:	46a1      	mov	r9, r4
 8019b5c:	4576      	cmp	r6, lr
 8019b5e:	46f4      	mov	ip, lr
 8019b60:	d815      	bhi.n	8019b8e <rshift+0x7e>
 8019b62:	1a9a      	subs	r2, r3, r2
 8019b64:	0092      	lsls	r2, r2, #2
 8019b66:	3a04      	subs	r2, #4
 8019b68:	3501      	adds	r5, #1
 8019b6a:	42ae      	cmp	r6, r5
 8019b6c:	bf38      	it	cc
 8019b6e:	2200      	movcc	r2, #0
 8019b70:	18a3      	adds	r3, r4, r2
 8019b72:	50a7      	str	r7, [r4, r2]
 8019b74:	b107      	cbz	r7, 8019b78 <rshift+0x68>
 8019b76:	3304      	adds	r3, #4
 8019b78:	1b1a      	subs	r2, r3, r4
 8019b7a:	42a3      	cmp	r3, r4
 8019b7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019b80:	bf08      	it	eq
 8019b82:	2300      	moveq	r3, #0
 8019b84:	6102      	str	r2, [r0, #16]
 8019b86:	bf08      	it	eq
 8019b88:	6143      	streq	r3, [r0, #20]
 8019b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b8e:	f8dc c000 	ldr.w	ip, [ip]
 8019b92:	fa0c fc08 	lsl.w	ip, ip, r8
 8019b96:	ea4c 0707 	orr.w	r7, ip, r7
 8019b9a:	f849 7b04 	str.w	r7, [r9], #4
 8019b9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019ba2:	40cf      	lsrs	r7, r1
 8019ba4:	e7da      	b.n	8019b5c <rshift+0x4c>
 8019ba6:	f851 cb04 	ldr.w	ip, [r1], #4
 8019baa:	f847 cf04 	str.w	ip, [r7, #4]!
 8019bae:	e7c3      	b.n	8019b38 <rshift+0x28>
 8019bb0:	4623      	mov	r3, r4
 8019bb2:	e7e1      	b.n	8019b78 <rshift+0x68>

08019bb4 <__hexdig_fun>:
 8019bb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019bb8:	2b09      	cmp	r3, #9
 8019bba:	d802      	bhi.n	8019bc2 <__hexdig_fun+0xe>
 8019bbc:	3820      	subs	r0, #32
 8019bbe:	b2c0      	uxtb	r0, r0
 8019bc0:	4770      	bx	lr
 8019bc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019bc6:	2b05      	cmp	r3, #5
 8019bc8:	d801      	bhi.n	8019bce <__hexdig_fun+0x1a>
 8019bca:	3847      	subs	r0, #71	; 0x47
 8019bcc:	e7f7      	b.n	8019bbe <__hexdig_fun+0xa>
 8019bce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019bd2:	2b05      	cmp	r3, #5
 8019bd4:	d801      	bhi.n	8019bda <__hexdig_fun+0x26>
 8019bd6:	3827      	subs	r0, #39	; 0x27
 8019bd8:	e7f1      	b.n	8019bbe <__hexdig_fun+0xa>
 8019bda:	2000      	movs	r0, #0
 8019bdc:	4770      	bx	lr
	...

08019be0 <__gethex>:
 8019be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019be4:	4617      	mov	r7, r2
 8019be6:	680a      	ldr	r2, [r1, #0]
 8019be8:	b085      	sub	sp, #20
 8019bea:	f102 0b02 	add.w	fp, r2, #2
 8019bee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019bf2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019bf6:	4681      	mov	r9, r0
 8019bf8:	468a      	mov	sl, r1
 8019bfa:	9302      	str	r3, [sp, #8]
 8019bfc:	32fe      	adds	r2, #254	; 0xfe
 8019bfe:	eb02 030b 	add.w	r3, r2, fp
 8019c02:	46d8      	mov	r8, fp
 8019c04:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8019c08:	9301      	str	r3, [sp, #4]
 8019c0a:	2830      	cmp	r0, #48	; 0x30
 8019c0c:	d0f7      	beq.n	8019bfe <__gethex+0x1e>
 8019c0e:	f7ff ffd1 	bl	8019bb4 <__hexdig_fun>
 8019c12:	4604      	mov	r4, r0
 8019c14:	2800      	cmp	r0, #0
 8019c16:	d138      	bne.n	8019c8a <__gethex+0xaa>
 8019c18:	49a7      	ldr	r1, [pc, #668]	; (8019eb8 <__gethex+0x2d8>)
 8019c1a:	2201      	movs	r2, #1
 8019c1c:	4640      	mov	r0, r8
 8019c1e:	f7ff ff19 	bl	8019a54 <strncmp>
 8019c22:	4606      	mov	r6, r0
 8019c24:	2800      	cmp	r0, #0
 8019c26:	d169      	bne.n	8019cfc <__gethex+0x11c>
 8019c28:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019c2c:	465d      	mov	r5, fp
 8019c2e:	f7ff ffc1 	bl	8019bb4 <__hexdig_fun>
 8019c32:	2800      	cmp	r0, #0
 8019c34:	d064      	beq.n	8019d00 <__gethex+0x120>
 8019c36:	465a      	mov	r2, fp
 8019c38:	7810      	ldrb	r0, [r2, #0]
 8019c3a:	2830      	cmp	r0, #48	; 0x30
 8019c3c:	4690      	mov	r8, r2
 8019c3e:	f102 0201 	add.w	r2, r2, #1
 8019c42:	d0f9      	beq.n	8019c38 <__gethex+0x58>
 8019c44:	f7ff ffb6 	bl	8019bb4 <__hexdig_fun>
 8019c48:	2301      	movs	r3, #1
 8019c4a:	fab0 f480 	clz	r4, r0
 8019c4e:	0964      	lsrs	r4, r4, #5
 8019c50:	465e      	mov	r6, fp
 8019c52:	9301      	str	r3, [sp, #4]
 8019c54:	4642      	mov	r2, r8
 8019c56:	4615      	mov	r5, r2
 8019c58:	3201      	adds	r2, #1
 8019c5a:	7828      	ldrb	r0, [r5, #0]
 8019c5c:	f7ff ffaa 	bl	8019bb4 <__hexdig_fun>
 8019c60:	2800      	cmp	r0, #0
 8019c62:	d1f8      	bne.n	8019c56 <__gethex+0x76>
 8019c64:	4994      	ldr	r1, [pc, #592]	; (8019eb8 <__gethex+0x2d8>)
 8019c66:	2201      	movs	r2, #1
 8019c68:	4628      	mov	r0, r5
 8019c6a:	f7ff fef3 	bl	8019a54 <strncmp>
 8019c6e:	b978      	cbnz	r0, 8019c90 <__gethex+0xb0>
 8019c70:	b946      	cbnz	r6, 8019c84 <__gethex+0xa4>
 8019c72:	1c6e      	adds	r6, r5, #1
 8019c74:	4632      	mov	r2, r6
 8019c76:	4615      	mov	r5, r2
 8019c78:	3201      	adds	r2, #1
 8019c7a:	7828      	ldrb	r0, [r5, #0]
 8019c7c:	f7ff ff9a 	bl	8019bb4 <__hexdig_fun>
 8019c80:	2800      	cmp	r0, #0
 8019c82:	d1f8      	bne.n	8019c76 <__gethex+0x96>
 8019c84:	1b73      	subs	r3, r6, r5
 8019c86:	009e      	lsls	r6, r3, #2
 8019c88:	e004      	b.n	8019c94 <__gethex+0xb4>
 8019c8a:	2400      	movs	r4, #0
 8019c8c:	4626      	mov	r6, r4
 8019c8e:	e7e1      	b.n	8019c54 <__gethex+0x74>
 8019c90:	2e00      	cmp	r6, #0
 8019c92:	d1f7      	bne.n	8019c84 <__gethex+0xa4>
 8019c94:	782b      	ldrb	r3, [r5, #0]
 8019c96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019c9a:	2b50      	cmp	r3, #80	; 0x50
 8019c9c:	d13d      	bne.n	8019d1a <__gethex+0x13a>
 8019c9e:	786b      	ldrb	r3, [r5, #1]
 8019ca0:	2b2b      	cmp	r3, #43	; 0x2b
 8019ca2:	d02f      	beq.n	8019d04 <__gethex+0x124>
 8019ca4:	2b2d      	cmp	r3, #45	; 0x2d
 8019ca6:	d031      	beq.n	8019d0c <__gethex+0x12c>
 8019ca8:	1c69      	adds	r1, r5, #1
 8019caa:	f04f 0b00 	mov.w	fp, #0
 8019cae:	7808      	ldrb	r0, [r1, #0]
 8019cb0:	f7ff ff80 	bl	8019bb4 <__hexdig_fun>
 8019cb4:	1e42      	subs	r2, r0, #1
 8019cb6:	b2d2      	uxtb	r2, r2
 8019cb8:	2a18      	cmp	r2, #24
 8019cba:	d82e      	bhi.n	8019d1a <__gethex+0x13a>
 8019cbc:	f1a0 0210 	sub.w	r2, r0, #16
 8019cc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019cc4:	f7ff ff76 	bl	8019bb4 <__hexdig_fun>
 8019cc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8019ccc:	fa5f fc8c 	uxtb.w	ip, ip
 8019cd0:	f1bc 0f18 	cmp.w	ip, #24
 8019cd4:	d91d      	bls.n	8019d12 <__gethex+0x132>
 8019cd6:	f1bb 0f00 	cmp.w	fp, #0
 8019cda:	d000      	beq.n	8019cde <__gethex+0xfe>
 8019cdc:	4252      	negs	r2, r2
 8019cde:	4416      	add	r6, r2
 8019ce0:	f8ca 1000 	str.w	r1, [sl]
 8019ce4:	b1dc      	cbz	r4, 8019d1e <__gethex+0x13e>
 8019ce6:	9b01      	ldr	r3, [sp, #4]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	bf14      	ite	ne
 8019cec:	f04f 0800 	movne.w	r8, #0
 8019cf0:	f04f 0806 	moveq.w	r8, #6
 8019cf4:	4640      	mov	r0, r8
 8019cf6:	b005      	add	sp, #20
 8019cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cfc:	4645      	mov	r5, r8
 8019cfe:	4626      	mov	r6, r4
 8019d00:	2401      	movs	r4, #1
 8019d02:	e7c7      	b.n	8019c94 <__gethex+0xb4>
 8019d04:	f04f 0b00 	mov.w	fp, #0
 8019d08:	1ca9      	adds	r1, r5, #2
 8019d0a:	e7d0      	b.n	8019cae <__gethex+0xce>
 8019d0c:	f04f 0b01 	mov.w	fp, #1
 8019d10:	e7fa      	b.n	8019d08 <__gethex+0x128>
 8019d12:	230a      	movs	r3, #10
 8019d14:	fb03 0002 	mla	r0, r3, r2, r0
 8019d18:	e7d0      	b.n	8019cbc <__gethex+0xdc>
 8019d1a:	4629      	mov	r1, r5
 8019d1c:	e7e0      	b.n	8019ce0 <__gethex+0x100>
 8019d1e:	eba5 0308 	sub.w	r3, r5, r8
 8019d22:	3b01      	subs	r3, #1
 8019d24:	4621      	mov	r1, r4
 8019d26:	2b07      	cmp	r3, #7
 8019d28:	dc0a      	bgt.n	8019d40 <__gethex+0x160>
 8019d2a:	4648      	mov	r0, r9
 8019d2c:	f7fe f92e 	bl	8017f8c <_Balloc>
 8019d30:	4604      	mov	r4, r0
 8019d32:	b940      	cbnz	r0, 8019d46 <__gethex+0x166>
 8019d34:	4b61      	ldr	r3, [pc, #388]	; (8019ebc <__gethex+0x2dc>)
 8019d36:	4602      	mov	r2, r0
 8019d38:	21e4      	movs	r1, #228	; 0xe4
 8019d3a:	4861      	ldr	r0, [pc, #388]	; (8019ec0 <__gethex+0x2e0>)
 8019d3c:	f7ff feb4 	bl	8019aa8 <__assert_func>
 8019d40:	3101      	adds	r1, #1
 8019d42:	105b      	asrs	r3, r3, #1
 8019d44:	e7ef      	b.n	8019d26 <__gethex+0x146>
 8019d46:	f100 0a14 	add.w	sl, r0, #20
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	495a      	ldr	r1, [pc, #360]	; (8019eb8 <__gethex+0x2d8>)
 8019d4e:	f8cd a004 	str.w	sl, [sp, #4]
 8019d52:	469b      	mov	fp, r3
 8019d54:	45a8      	cmp	r8, r5
 8019d56:	d342      	bcc.n	8019dde <__gethex+0x1fe>
 8019d58:	9801      	ldr	r0, [sp, #4]
 8019d5a:	f840 bb04 	str.w	fp, [r0], #4
 8019d5e:	eba0 000a 	sub.w	r0, r0, sl
 8019d62:	1080      	asrs	r0, r0, #2
 8019d64:	6120      	str	r0, [r4, #16]
 8019d66:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8019d6a:	4658      	mov	r0, fp
 8019d6c:	f7fe fa00 	bl	8018170 <__hi0bits>
 8019d70:	683d      	ldr	r5, [r7, #0]
 8019d72:	eba8 0000 	sub.w	r0, r8, r0
 8019d76:	42a8      	cmp	r0, r5
 8019d78:	dd59      	ble.n	8019e2e <__gethex+0x24e>
 8019d7a:	eba0 0805 	sub.w	r8, r0, r5
 8019d7e:	4641      	mov	r1, r8
 8019d80:	4620      	mov	r0, r4
 8019d82:	f7fe fd8f 	bl	80188a4 <__any_on>
 8019d86:	4683      	mov	fp, r0
 8019d88:	b1b8      	cbz	r0, 8019dba <__gethex+0x1da>
 8019d8a:	f108 33ff 	add.w	r3, r8, #4294967295
 8019d8e:	1159      	asrs	r1, r3, #5
 8019d90:	f003 021f 	and.w	r2, r3, #31
 8019d94:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019d98:	f04f 0b01 	mov.w	fp, #1
 8019d9c:	fa0b f202 	lsl.w	r2, fp, r2
 8019da0:	420a      	tst	r2, r1
 8019da2:	d00a      	beq.n	8019dba <__gethex+0x1da>
 8019da4:	455b      	cmp	r3, fp
 8019da6:	dd06      	ble.n	8019db6 <__gethex+0x1d6>
 8019da8:	f1a8 0102 	sub.w	r1, r8, #2
 8019dac:	4620      	mov	r0, r4
 8019dae:	f7fe fd79 	bl	80188a4 <__any_on>
 8019db2:	2800      	cmp	r0, #0
 8019db4:	d138      	bne.n	8019e28 <__gethex+0x248>
 8019db6:	f04f 0b02 	mov.w	fp, #2
 8019dba:	4641      	mov	r1, r8
 8019dbc:	4620      	mov	r0, r4
 8019dbe:	f7ff fea7 	bl	8019b10 <rshift>
 8019dc2:	4446      	add	r6, r8
 8019dc4:	68bb      	ldr	r3, [r7, #8]
 8019dc6:	42b3      	cmp	r3, r6
 8019dc8:	da41      	bge.n	8019e4e <__gethex+0x26e>
 8019dca:	4621      	mov	r1, r4
 8019dcc:	4648      	mov	r0, r9
 8019dce:	f7fe f91d 	bl	801800c <_Bfree>
 8019dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	6013      	str	r3, [r2, #0]
 8019dd8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8019ddc:	e78a      	b.n	8019cf4 <__gethex+0x114>
 8019dde:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8019de2:	2a2e      	cmp	r2, #46	; 0x2e
 8019de4:	d014      	beq.n	8019e10 <__gethex+0x230>
 8019de6:	2b20      	cmp	r3, #32
 8019de8:	d106      	bne.n	8019df8 <__gethex+0x218>
 8019dea:	9b01      	ldr	r3, [sp, #4]
 8019dec:	f843 bb04 	str.w	fp, [r3], #4
 8019df0:	f04f 0b00 	mov.w	fp, #0
 8019df4:	9301      	str	r3, [sp, #4]
 8019df6:	465b      	mov	r3, fp
 8019df8:	7828      	ldrb	r0, [r5, #0]
 8019dfa:	9303      	str	r3, [sp, #12]
 8019dfc:	f7ff feda 	bl	8019bb4 <__hexdig_fun>
 8019e00:	9b03      	ldr	r3, [sp, #12]
 8019e02:	f000 000f 	and.w	r0, r0, #15
 8019e06:	4098      	lsls	r0, r3
 8019e08:	ea4b 0b00 	orr.w	fp, fp, r0
 8019e0c:	3304      	adds	r3, #4
 8019e0e:	e7a1      	b.n	8019d54 <__gethex+0x174>
 8019e10:	45a8      	cmp	r8, r5
 8019e12:	d8e8      	bhi.n	8019de6 <__gethex+0x206>
 8019e14:	2201      	movs	r2, #1
 8019e16:	4628      	mov	r0, r5
 8019e18:	9303      	str	r3, [sp, #12]
 8019e1a:	f7ff fe1b 	bl	8019a54 <strncmp>
 8019e1e:	4926      	ldr	r1, [pc, #152]	; (8019eb8 <__gethex+0x2d8>)
 8019e20:	9b03      	ldr	r3, [sp, #12]
 8019e22:	2800      	cmp	r0, #0
 8019e24:	d1df      	bne.n	8019de6 <__gethex+0x206>
 8019e26:	e795      	b.n	8019d54 <__gethex+0x174>
 8019e28:	f04f 0b03 	mov.w	fp, #3
 8019e2c:	e7c5      	b.n	8019dba <__gethex+0x1da>
 8019e2e:	da0b      	bge.n	8019e48 <__gethex+0x268>
 8019e30:	eba5 0800 	sub.w	r8, r5, r0
 8019e34:	4621      	mov	r1, r4
 8019e36:	4642      	mov	r2, r8
 8019e38:	4648      	mov	r0, r9
 8019e3a:	f7fe fb01 	bl	8018440 <__lshift>
 8019e3e:	eba6 0608 	sub.w	r6, r6, r8
 8019e42:	4604      	mov	r4, r0
 8019e44:	f100 0a14 	add.w	sl, r0, #20
 8019e48:	f04f 0b00 	mov.w	fp, #0
 8019e4c:	e7ba      	b.n	8019dc4 <__gethex+0x1e4>
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	42b3      	cmp	r3, r6
 8019e52:	dd73      	ble.n	8019f3c <__gethex+0x35c>
 8019e54:	1b9e      	subs	r6, r3, r6
 8019e56:	42b5      	cmp	r5, r6
 8019e58:	dc34      	bgt.n	8019ec4 <__gethex+0x2e4>
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	2b02      	cmp	r3, #2
 8019e5e:	d023      	beq.n	8019ea8 <__gethex+0x2c8>
 8019e60:	2b03      	cmp	r3, #3
 8019e62:	d025      	beq.n	8019eb0 <__gethex+0x2d0>
 8019e64:	2b01      	cmp	r3, #1
 8019e66:	d115      	bne.n	8019e94 <__gethex+0x2b4>
 8019e68:	42b5      	cmp	r5, r6
 8019e6a:	d113      	bne.n	8019e94 <__gethex+0x2b4>
 8019e6c:	2d01      	cmp	r5, #1
 8019e6e:	d10b      	bne.n	8019e88 <__gethex+0x2a8>
 8019e70:	9a02      	ldr	r2, [sp, #8]
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	6013      	str	r3, [r2, #0]
 8019e76:	2301      	movs	r3, #1
 8019e78:	6123      	str	r3, [r4, #16]
 8019e7a:	f8ca 3000 	str.w	r3, [sl]
 8019e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e80:	f04f 0862 	mov.w	r8, #98	; 0x62
 8019e84:	601c      	str	r4, [r3, #0]
 8019e86:	e735      	b.n	8019cf4 <__gethex+0x114>
 8019e88:	1e69      	subs	r1, r5, #1
 8019e8a:	4620      	mov	r0, r4
 8019e8c:	f7fe fd0a 	bl	80188a4 <__any_on>
 8019e90:	2800      	cmp	r0, #0
 8019e92:	d1ed      	bne.n	8019e70 <__gethex+0x290>
 8019e94:	4621      	mov	r1, r4
 8019e96:	4648      	mov	r0, r9
 8019e98:	f7fe f8b8 	bl	801800c <_Bfree>
 8019e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	6013      	str	r3, [r2, #0]
 8019ea2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8019ea6:	e725      	b.n	8019cf4 <__gethex+0x114>
 8019ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d1f2      	bne.n	8019e94 <__gethex+0x2b4>
 8019eae:	e7df      	b.n	8019e70 <__gethex+0x290>
 8019eb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d1dc      	bne.n	8019e70 <__gethex+0x290>
 8019eb6:	e7ed      	b.n	8019e94 <__gethex+0x2b4>
 8019eb8:	0801d67c 	.word	0x0801d67c
 8019ebc:	0801d515 	.word	0x0801d515
 8019ec0:	0801d826 	.word	0x0801d826
 8019ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8019ec8:	f1bb 0f00 	cmp.w	fp, #0
 8019ecc:	d133      	bne.n	8019f36 <__gethex+0x356>
 8019ece:	f1b8 0f00 	cmp.w	r8, #0
 8019ed2:	d004      	beq.n	8019ede <__gethex+0x2fe>
 8019ed4:	4641      	mov	r1, r8
 8019ed6:	4620      	mov	r0, r4
 8019ed8:	f7fe fce4 	bl	80188a4 <__any_on>
 8019edc:	4683      	mov	fp, r0
 8019ede:	ea4f 1268 	mov.w	r2, r8, asr #5
 8019ee2:	2301      	movs	r3, #1
 8019ee4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019ee8:	f008 081f 	and.w	r8, r8, #31
 8019eec:	fa03 f308 	lsl.w	r3, r3, r8
 8019ef0:	4213      	tst	r3, r2
 8019ef2:	4631      	mov	r1, r6
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	bf18      	it	ne
 8019ef8:	f04b 0b02 	orrne.w	fp, fp, #2
 8019efc:	1bad      	subs	r5, r5, r6
 8019efe:	f7ff fe07 	bl	8019b10 <rshift>
 8019f02:	687e      	ldr	r6, [r7, #4]
 8019f04:	f04f 0802 	mov.w	r8, #2
 8019f08:	f1bb 0f00 	cmp.w	fp, #0
 8019f0c:	d04a      	beq.n	8019fa4 <__gethex+0x3c4>
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	2b02      	cmp	r3, #2
 8019f12:	d016      	beq.n	8019f42 <__gethex+0x362>
 8019f14:	2b03      	cmp	r3, #3
 8019f16:	d018      	beq.n	8019f4a <__gethex+0x36a>
 8019f18:	2b01      	cmp	r3, #1
 8019f1a:	d109      	bne.n	8019f30 <__gethex+0x350>
 8019f1c:	f01b 0f02 	tst.w	fp, #2
 8019f20:	d006      	beq.n	8019f30 <__gethex+0x350>
 8019f22:	f8da 3000 	ldr.w	r3, [sl]
 8019f26:	ea4b 0b03 	orr.w	fp, fp, r3
 8019f2a:	f01b 0f01 	tst.w	fp, #1
 8019f2e:	d10f      	bne.n	8019f50 <__gethex+0x370>
 8019f30:	f048 0810 	orr.w	r8, r8, #16
 8019f34:	e036      	b.n	8019fa4 <__gethex+0x3c4>
 8019f36:	f04f 0b01 	mov.w	fp, #1
 8019f3a:	e7d0      	b.n	8019ede <__gethex+0x2fe>
 8019f3c:	f04f 0801 	mov.w	r8, #1
 8019f40:	e7e2      	b.n	8019f08 <__gethex+0x328>
 8019f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f44:	f1c3 0301 	rsb	r3, r3, #1
 8019f48:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d0ef      	beq.n	8019f30 <__gethex+0x350>
 8019f50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019f54:	f104 0214 	add.w	r2, r4, #20
 8019f58:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8019f5c:	9301      	str	r3, [sp, #4]
 8019f5e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8019f62:	2300      	movs	r3, #0
 8019f64:	4694      	mov	ip, r2
 8019f66:	f852 1b04 	ldr.w	r1, [r2], #4
 8019f6a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8019f6e:	d01e      	beq.n	8019fae <__gethex+0x3ce>
 8019f70:	3101      	adds	r1, #1
 8019f72:	f8cc 1000 	str.w	r1, [ip]
 8019f76:	f1b8 0f02 	cmp.w	r8, #2
 8019f7a:	f104 0214 	add.w	r2, r4, #20
 8019f7e:	d13d      	bne.n	8019ffc <__gethex+0x41c>
 8019f80:	683b      	ldr	r3, [r7, #0]
 8019f82:	3b01      	subs	r3, #1
 8019f84:	42ab      	cmp	r3, r5
 8019f86:	d10b      	bne.n	8019fa0 <__gethex+0x3c0>
 8019f88:	1169      	asrs	r1, r5, #5
 8019f8a:	2301      	movs	r3, #1
 8019f8c:	f005 051f 	and.w	r5, r5, #31
 8019f90:	fa03 f505 	lsl.w	r5, r3, r5
 8019f94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019f98:	421d      	tst	r5, r3
 8019f9a:	bf18      	it	ne
 8019f9c:	f04f 0801 	movne.w	r8, #1
 8019fa0:	f048 0820 	orr.w	r8, r8, #32
 8019fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fa6:	601c      	str	r4, [r3, #0]
 8019fa8:	9b02      	ldr	r3, [sp, #8]
 8019faa:	601e      	str	r6, [r3, #0]
 8019fac:	e6a2      	b.n	8019cf4 <__gethex+0x114>
 8019fae:	4290      	cmp	r0, r2
 8019fb0:	f842 3c04 	str.w	r3, [r2, #-4]
 8019fb4:	d8d6      	bhi.n	8019f64 <__gethex+0x384>
 8019fb6:	68a2      	ldr	r2, [r4, #8]
 8019fb8:	4593      	cmp	fp, r2
 8019fba:	db17      	blt.n	8019fec <__gethex+0x40c>
 8019fbc:	6861      	ldr	r1, [r4, #4]
 8019fbe:	4648      	mov	r0, r9
 8019fc0:	3101      	adds	r1, #1
 8019fc2:	f7fd ffe3 	bl	8017f8c <_Balloc>
 8019fc6:	4682      	mov	sl, r0
 8019fc8:	b918      	cbnz	r0, 8019fd2 <__gethex+0x3f2>
 8019fca:	4b1b      	ldr	r3, [pc, #108]	; (801a038 <__gethex+0x458>)
 8019fcc:	4602      	mov	r2, r0
 8019fce:	2184      	movs	r1, #132	; 0x84
 8019fd0:	e6b3      	b.n	8019d3a <__gethex+0x15a>
 8019fd2:	6922      	ldr	r2, [r4, #16]
 8019fd4:	3202      	adds	r2, #2
 8019fd6:	f104 010c 	add.w	r1, r4, #12
 8019fda:	0092      	lsls	r2, r2, #2
 8019fdc:	300c      	adds	r0, #12
 8019fde:	f7fd f844 	bl	801706a <memcpy>
 8019fe2:	4621      	mov	r1, r4
 8019fe4:	4648      	mov	r0, r9
 8019fe6:	f7fe f811 	bl	801800c <_Bfree>
 8019fea:	4654      	mov	r4, sl
 8019fec:	6922      	ldr	r2, [r4, #16]
 8019fee:	1c51      	adds	r1, r2, #1
 8019ff0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019ff4:	6121      	str	r1, [r4, #16]
 8019ff6:	2101      	movs	r1, #1
 8019ff8:	6151      	str	r1, [r2, #20]
 8019ffa:	e7bc      	b.n	8019f76 <__gethex+0x396>
 8019ffc:	6921      	ldr	r1, [r4, #16]
 8019ffe:	4559      	cmp	r1, fp
 801a000:	dd0b      	ble.n	801a01a <__gethex+0x43a>
 801a002:	2101      	movs	r1, #1
 801a004:	4620      	mov	r0, r4
 801a006:	f7ff fd83 	bl	8019b10 <rshift>
 801a00a:	68bb      	ldr	r3, [r7, #8]
 801a00c:	3601      	adds	r6, #1
 801a00e:	42b3      	cmp	r3, r6
 801a010:	f6ff aedb 	blt.w	8019dca <__gethex+0x1ea>
 801a014:	f04f 0801 	mov.w	r8, #1
 801a018:	e7c2      	b.n	8019fa0 <__gethex+0x3c0>
 801a01a:	f015 051f 	ands.w	r5, r5, #31
 801a01e:	d0f9      	beq.n	801a014 <__gethex+0x434>
 801a020:	9b01      	ldr	r3, [sp, #4]
 801a022:	441a      	add	r2, r3
 801a024:	f1c5 0520 	rsb	r5, r5, #32
 801a028:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801a02c:	f7fe f8a0 	bl	8018170 <__hi0bits>
 801a030:	42a8      	cmp	r0, r5
 801a032:	dbe6      	blt.n	801a002 <__gethex+0x422>
 801a034:	e7ee      	b.n	801a014 <__gethex+0x434>
 801a036:	bf00      	nop
 801a038:	0801d515 	.word	0x0801d515

0801a03c <L_shift>:
 801a03c:	f1c2 0208 	rsb	r2, r2, #8
 801a040:	0092      	lsls	r2, r2, #2
 801a042:	b570      	push	{r4, r5, r6, lr}
 801a044:	f1c2 0620 	rsb	r6, r2, #32
 801a048:	6843      	ldr	r3, [r0, #4]
 801a04a:	6804      	ldr	r4, [r0, #0]
 801a04c:	fa03 f506 	lsl.w	r5, r3, r6
 801a050:	432c      	orrs	r4, r5
 801a052:	40d3      	lsrs	r3, r2
 801a054:	6004      	str	r4, [r0, #0]
 801a056:	f840 3f04 	str.w	r3, [r0, #4]!
 801a05a:	4288      	cmp	r0, r1
 801a05c:	d3f4      	bcc.n	801a048 <L_shift+0xc>
 801a05e:	bd70      	pop	{r4, r5, r6, pc}

0801a060 <__match>:
 801a060:	b530      	push	{r4, r5, lr}
 801a062:	6803      	ldr	r3, [r0, #0]
 801a064:	3301      	adds	r3, #1
 801a066:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a06a:	b914      	cbnz	r4, 801a072 <__match+0x12>
 801a06c:	6003      	str	r3, [r0, #0]
 801a06e:	2001      	movs	r0, #1
 801a070:	bd30      	pop	{r4, r5, pc}
 801a072:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a076:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a07a:	2d19      	cmp	r5, #25
 801a07c:	bf98      	it	ls
 801a07e:	3220      	addls	r2, #32
 801a080:	42a2      	cmp	r2, r4
 801a082:	d0f0      	beq.n	801a066 <__match+0x6>
 801a084:	2000      	movs	r0, #0
 801a086:	e7f3      	b.n	801a070 <__match+0x10>

0801a088 <__hexnan>:
 801a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a08c:	680b      	ldr	r3, [r1, #0]
 801a08e:	6801      	ldr	r1, [r0, #0]
 801a090:	115e      	asrs	r6, r3, #5
 801a092:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a096:	f013 031f 	ands.w	r3, r3, #31
 801a09a:	b087      	sub	sp, #28
 801a09c:	bf18      	it	ne
 801a09e:	3604      	addne	r6, #4
 801a0a0:	2500      	movs	r5, #0
 801a0a2:	1f37      	subs	r7, r6, #4
 801a0a4:	4682      	mov	sl, r0
 801a0a6:	4690      	mov	r8, r2
 801a0a8:	9301      	str	r3, [sp, #4]
 801a0aa:	f846 5c04 	str.w	r5, [r6, #-4]
 801a0ae:	46b9      	mov	r9, r7
 801a0b0:	463c      	mov	r4, r7
 801a0b2:	9502      	str	r5, [sp, #8]
 801a0b4:	46ab      	mov	fp, r5
 801a0b6:	784a      	ldrb	r2, [r1, #1]
 801a0b8:	1c4b      	adds	r3, r1, #1
 801a0ba:	9303      	str	r3, [sp, #12]
 801a0bc:	b342      	cbz	r2, 801a110 <__hexnan+0x88>
 801a0be:	4610      	mov	r0, r2
 801a0c0:	9105      	str	r1, [sp, #20]
 801a0c2:	9204      	str	r2, [sp, #16]
 801a0c4:	f7ff fd76 	bl	8019bb4 <__hexdig_fun>
 801a0c8:	2800      	cmp	r0, #0
 801a0ca:	d14f      	bne.n	801a16c <__hexnan+0xe4>
 801a0cc:	9a04      	ldr	r2, [sp, #16]
 801a0ce:	9905      	ldr	r1, [sp, #20]
 801a0d0:	2a20      	cmp	r2, #32
 801a0d2:	d818      	bhi.n	801a106 <__hexnan+0x7e>
 801a0d4:	9b02      	ldr	r3, [sp, #8]
 801a0d6:	459b      	cmp	fp, r3
 801a0d8:	dd13      	ble.n	801a102 <__hexnan+0x7a>
 801a0da:	454c      	cmp	r4, r9
 801a0dc:	d206      	bcs.n	801a0ec <__hexnan+0x64>
 801a0de:	2d07      	cmp	r5, #7
 801a0e0:	dc04      	bgt.n	801a0ec <__hexnan+0x64>
 801a0e2:	462a      	mov	r2, r5
 801a0e4:	4649      	mov	r1, r9
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	f7ff ffa8 	bl	801a03c <L_shift>
 801a0ec:	4544      	cmp	r4, r8
 801a0ee:	d950      	bls.n	801a192 <__hexnan+0x10a>
 801a0f0:	2300      	movs	r3, #0
 801a0f2:	f1a4 0904 	sub.w	r9, r4, #4
 801a0f6:	f844 3c04 	str.w	r3, [r4, #-4]
 801a0fa:	f8cd b008 	str.w	fp, [sp, #8]
 801a0fe:	464c      	mov	r4, r9
 801a100:	461d      	mov	r5, r3
 801a102:	9903      	ldr	r1, [sp, #12]
 801a104:	e7d7      	b.n	801a0b6 <__hexnan+0x2e>
 801a106:	2a29      	cmp	r2, #41	; 0x29
 801a108:	d155      	bne.n	801a1b6 <__hexnan+0x12e>
 801a10a:	3102      	adds	r1, #2
 801a10c:	f8ca 1000 	str.w	r1, [sl]
 801a110:	f1bb 0f00 	cmp.w	fp, #0
 801a114:	d04f      	beq.n	801a1b6 <__hexnan+0x12e>
 801a116:	454c      	cmp	r4, r9
 801a118:	d206      	bcs.n	801a128 <__hexnan+0xa0>
 801a11a:	2d07      	cmp	r5, #7
 801a11c:	dc04      	bgt.n	801a128 <__hexnan+0xa0>
 801a11e:	462a      	mov	r2, r5
 801a120:	4649      	mov	r1, r9
 801a122:	4620      	mov	r0, r4
 801a124:	f7ff ff8a 	bl	801a03c <L_shift>
 801a128:	4544      	cmp	r4, r8
 801a12a:	d934      	bls.n	801a196 <__hexnan+0x10e>
 801a12c:	f1a8 0204 	sub.w	r2, r8, #4
 801a130:	4623      	mov	r3, r4
 801a132:	f853 1b04 	ldr.w	r1, [r3], #4
 801a136:	f842 1f04 	str.w	r1, [r2, #4]!
 801a13a:	429f      	cmp	r7, r3
 801a13c:	d2f9      	bcs.n	801a132 <__hexnan+0xaa>
 801a13e:	1b3b      	subs	r3, r7, r4
 801a140:	f023 0303 	bic.w	r3, r3, #3
 801a144:	3304      	adds	r3, #4
 801a146:	3e03      	subs	r6, #3
 801a148:	3401      	adds	r4, #1
 801a14a:	42a6      	cmp	r6, r4
 801a14c:	bf38      	it	cc
 801a14e:	2304      	movcc	r3, #4
 801a150:	4443      	add	r3, r8
 801a152:	2200      	movs	r2, #0
 801a154:	f843 2b04 	str.w	r2, [r3], #4
 801a158:	429f      	cmp	r7, r3
 801a15a:	d2fb      	bcs.n	801a154 <__hexnan+0xcc>
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	b91b      	cbnz	r3, 801a168 <__hexnan+0xe0>
 801a160:	4547      	cmp	r7, r8
 801a162:	d126      	bne.n	801a1b2 <__hexnan+0x12a>
 801a164:	2301      	movs	r3, #1
 801a166:	603b      	str	r3, [r7, #0]
 801a168:	2005      	movs	r0, #5
 801a16a:	e025      	b.n	801a1b8 <__hexnan+0x130>
 801a16c:	3501      	adds	r5, #1
 801a16e:	2d08      	cmp	r5, #8
 801a170:	f10b 0b01 	add.w	fp, fp, #1
 801a174:	dd06      	ble.n	801a184 <__hexnan+0xfc>
 801a176:	4544      	cmp	r4, r8
 801a178:	d9c3      	bls.n	801a102 <__hexnan+0x7a>
 801a17a:	2300      	movs	r3, #0
 801a17c:	f844 3c04 	str.w	r3, [r4, #-4]
 801a180:	2501      	movs	r5, #1
 801a182:	3c04      	subs	r4, #4
 801a184:	6822      	ldr	r2, [r4, #0]
 801a186:	f000 000f 	and.w	r0, r0, #15
 801a18a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a18e:	6020      	str	r0, [r4, #0]
 801a190:	e7b7      	b.n	801a102 <__hexnan+0x7a>
 801a192:	2508      	movs	r5, #8
 801a194:	e7b5      	b.n	801a102 <__hexnan+0x7a>
 801a196:	9b01      	ldr	r3, [sp, #4]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d0df      	beq.n	801a15c <__hexnan+0xd4>
 801a19c:	f1c3 0320 	rsb	r3, r3, #32
 801a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 801a1a4:	40da      	lsrs	r2, r3
 801a1a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801a1aa:	4013      	ands	r3, r2
 801a1ac:	f846 3c04 	str.w	r3, [r6, #-4]
 801a1b0:	e7d4      	b.n	801a15c <__hexnan+0xd4>
 801a1b2:	3f04      	subs	r7, #4
 801a1b4:	e7d2      	b.n	801a15c <__hexnan+0xd4>
 801a1b6:	2004      	movs	r0, #4
 801a1b8:	b007      	add	sp, #28
 801a1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a1be <__ascii_mbtowc>:
 801a1be:	b082      	sub	sp, #8
 801a1c0:	b901      	cbnz	r1, 801a1c4 <__ascii_mbtowc+0x6>
 801a1c2:	a901      	add	r1, sp, #4
 801a1c4:	b142      	cbz	r2, 801a1d8 <__ascii_mbtowc+0x1a>
 801a1c6:	b14b      	cbz	r3, 801a1dc <__ascii_mbtowc+0x1e>
 801a1c8:	7813      	ldrb	r3, [r2, #0]
 801a1ca:	600b      	str	r3, [r1, #0]
 801a1cc:	7812      	ldrb	r2, [r2, #0]
 801a1ce:	1e10      	subs	r0, r2, #0
 801a1d0:	bf18      	it	ne
 801a1d2:	2001      	movne	r0, #1
 801a1d4:	b002      	add	sp, #8
 801a1d6:	4770      	bx	lr
 801a1d8:	4610      	mov	r0, r2
 801a1da:	e7fb      	b.n	801a1d4 <__ascii_mbtowc+0x16>
 801a1dc:	f06f 0001 	mvn.w	r0, #1
 801a1e0:	e7f8      	b.n	801a1d4 <__ascii_mbtowc+0x16>

0801a1e2 <_realloc_r>:
 801a1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e6:	4680      	mov	r8, r0
 801a1e8:	4614      	mov	r4, r2
 801a1ea:	460e      	mov	r6, r1
 801a1ec:	b921      	cbnz	r1, 801a1f8 <_realloc_r+0x16>
 801a1ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1f2:	4611      	mov	r1, r2
 801a1f4:	f7fd be3e 	b.w	8017e74 <_malloc_r>
 801a1f8:	b92a      	cbnz	r2, 801a206 <_realloc_r+0x24>
 801a1fa:	f7fd fdc7 	bl	8017d8c <_free_r>
 801a1fe:	4625      	mov	r5, r4
 801a200:	4628      	mov	r0, r5
 801a202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a206:	f000 f842 	bl	801a28e <_malloc_usable_size_r>
 801a20a:	4284      	cmp	r4, r0
 801a20c:	4607      	mov	r7, r0
 801a20e:	d802      	bhi.n	801a216 <_realloc_r+0x34>
 801a210:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a214:	d812      	bhi.n	801a23c <_realloc_r+0x5a>
 801a216:	4621      	mov	r1, r4
 801a218:	4640      	mov	r0, r8
 801a21a:	f7fd fe2b 	bl	8017e74 <_malloc_r>
 801a21e:	4605      	mov	r5, r0
 801a220:	2800      	cmp	r0, #0
 801a222:	d0ed      	beq.n	801a200 <_realloc_r+0x1e>
 801a224:	42bc      	cmp	r4, r7
 801a226:	4622      	mov	r2, r4
 801a228:	4631      	mov	r1, r6
 801a22a:	bf28      	it	cs
 801a22c:	463a      	movcs	r2, r7
 801a22e:	f7fc ff1c 	bl	801706a <memcpy>
 801a232:	4631      	mov	r1, r6
 801a234:	4640      	mov	r0, r8
 801a236:	f7fd fda9 	bl	8017d8c <_free_r>
 801a23a:	e7e1      	b.n	801a200 <_realloc_r+0x1e>
 801a23c:	4635      	mov	r5, r6
 801a23e:	e7df      	b.n	801a200 <_realloc_r+0x1e>

0801a240 <__ascii_wctomb>:
 801a240:	b149      	cbz	r1, 801a256 <__ascii_wctomb+0x16>
 801a242:	2aff      	cmp	r2, #255	; 0xff
 801a244:	bf85      	ittet	hi
 801a246:	238a      	movhi	r3, #138	; 0x8a
 801a248:	6003      	strhi	r3, [r0, #0]
 801a24a:	700a      	strbls	r2, [r1, #0]
 801a24c:	f04f 30ff 	movhi.w	r0, #4294967295
 801a250:	bf98      	it	ls
 801a252:	2001      	movls	r0, #1
 801a254:	4770      	bx	lr
 801a256:	4608      	mov	r0, r1
 801a258:	4770      	bx	lr
	...

0801a25c <fiprintf>:
 801a25c:	b40e      	push	{r1, r2, r3}
 801a25e:	b503      	push	{r0, r1, lr}
 801a260:	4601      	mov	r1, r0
 801a262:	ab03      	add	r3, sp, #12
 801a264:	4805      	ldr	r0, [pc, #20]	; (801a27c <fiprintf+0x20>)
 801a266:	f853 2b04 	ldr.w	r2, [r3], #4
 801a26a:	6800      	ldr	r0, [r0, #0]
 801a26c:	9301      	str	r3, [sp, #4]
 801a26e:	f000 f83f 	bl	801a2f0 <_vfiprintf_r>
 801a272:	b002      	add	sp, #8
 801a274:	f85d eb04 	ldr.w	lr, [sp], #4
 801a278:	b003      	add	sp, #12
 801a27a:	4770      	bx	lr
 801a27c:	200003d0 	.word	0x200003d0

0801a280 <abort>:
 801a280:	b508      	push	{r3, lr}
 801a282:	2006      	movs	r0, #6
 801a284:	f000 fa0c 	bl	801a6a0 <raise>
 801a288:	2001      	movs	r0, #1
 801a28a:	f7eb f8f5 	bl	8005478 <_exit>

0801a28e <_malloc_usable_size_r>:
 801a28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a292:	1f18      	subs	r0, r3, #4
 801a294:	2b00      	cmp	r3, #0
 801a296:	bfbc      	itt	lt
 801a298:	580b      	ldrlt	r3, [r1, r0]
 801a29a:	18c0      	addlt	r0, r0, r3
 801a29c:	4770      	bx	lr

0801a29e <__sfputc_r>:
 801a29e:	6893      	ldr	r3, [r2, #8]
 801a2a0:	3b01      	subs	r3, #1
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	b410      	push	{r4}
 801a2a6:	6093      	str	r3, [r2, #8]
 801a2a8:	da08      	bge.n	801a2bc <__sfputc_r+0x1e>
 801a2aa:	6994      	ldr	r4, [r2, #24]
 801a2ac:	42a3      	cmp	r3, r4
 801a2ae:	db01      	blt.n	801a2b4 <__sfputc_r+0x16>
 801a2b0:	290a      	cmp	r1, #10
 801a2b2:	d103      	bne.n	801a2bc <__sfputc_r+0x1e>
 801a2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2b8:	f000 b934 	b.w	801a524 <__swbuf_r>
 801a2bc:	6813      	ldr	r3, [r2, #0]
 801a2be:	1c58      	adds	r0, r3, #1
 801a2c0:	6010      	str	r0, [r2, #0]
 801a2c2:	7019      	strb	r1, [r3, #0]
 801a2c4:	4608      	mov	r0, r1
 801a2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2ca:	4770      	bx	lr

0801a2cc <__sfputs_r>:
 801a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2ce:	4606      	mov	r6, r0
 801a2d0:	460f      	mov	r7, r1
 801a2d2:	4614      	mov	r4, r2
 801a2d4:	18d5      	adds	r5, r2, r3
 801a2d6:	42ac      	cmp	r4, r5
 801a2d8:	d101      	bne.n	801a2de <__sfputs_r+0x12>
 801a2da:	2000      	movs	r0, #0
 801a2dc:	e007      	b.n	801a2ee <__sfputs_r+0x22>
 801a2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2e2:	463a      	mov	r2, r7
 801a2e4:	4630      	mov	r0, r6
 801a2e6:	f7ff ffda 	bl	801a29e <__sfputc_r>
 801a2ea:	1c43      	adds	r3, r0, #1
 801a2ec:	d1f3      	bne.n	801a2d6 <__sfputs_r+0xa>
 801a2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a2f0 <_vfiprintf_r>:
 801a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f4:	460d      	mov	r5, r1
 801a2f6:	b09d      	sub	sp, #116	; 0x74
 801a2f8:	4614      	mov	r4, r2
 801a2fa:	4698      	mov	r8, r3
 801a2fc:	4606      	mov	r6, r0
 801a2fe:	b118      	cbz	r0, 801a308 <_vfiprintf_r+0x18>
 801a300:	6a03      	ldr	r3, [r0, #32]
 801a302:	b90b      	cbnz	r3, 801a308 <_vfiprintf_r+0x18>
 801a304:	f7fc fd98 	bl	8016e38 <__sinit>
 801a308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a30a:	07d9      	lsls	r1, r3, #31
 801a30c:	d405      	bmi.n	801a31a <_vfiprintf_r+0x2a>
 801a30e:	89ab      	ldrh	r3, [r5, #12]
 801a310:	059a      	lsls	r2, r3, #22
 801a312:	d402      	bmi.n	801a31a <_vfiprintf_r+0x2a>
 801a314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a316:	f7fc fea6 	bl	8017066 <__retarget_lock_acquire_recursive>
 801a31a:	89ab      	ldrh	r3, [r5, #12]
 801a31c:	071b      	lsls	r3, r3, #28
 801a31e:	d501      	bpl.n	801a324 <_vfiprintf_r+0x34>
 801a320:	692b      	ldr	r3, [r5, #16]
 801a322:	b99b      	cbnz	r3, 801a34c <_vfiprintf_r+0x5c>
 801a324:	4629      	mov	r1, r5
 801a326:	4630      	mov	r0, r6
 801a328:	f000 f93a 	bl	801a5a0 <__swsetup_r>
 801a32c:	b170      	cbz	r0, 801a34c <_vfiprintf_r+0x5c>
 801a32e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a330:	07dc      	lsls	r4, r3, #31
 801a332:	d504      	bpl.n	801a33e <_vfiprintf_r+0x4e>
 801a334:	f04f 30ff 	mov.w	r0, #4294967295
 801a338:	b01d      	add	sp, #116	; 0x74
 801a33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a33e:	89ab      	ldrh	r3, [r5, #12]
 801a340:	0598      	lsls	r0, r3, #22
 801a342:	d4f7      	bmi.n	801a334 <_vfiprintf_r+0x44>
 801a344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a346:	f7fc fe8f 	bl	8017068 <__retarget_lock_release_recursive>
 801a34a:	e7f3      	b.n	801a334 <_vfiprintf_r+0x44>
 801a34c:	2300      	movs	r3, #0
 801a34e:	9309      	str	r3, [sp, #36]	; 0x24
 801a350:	2320      	movs	r3, #32
 801a352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a356:	f8cd 800c 	str.w	r8, [sp, #12]
 801a35a:	2330      	movs	r3, #48	; 0x30
 801a35c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a510 <_vfiprintf_r+0x220>
 801a360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a364:	f04f 0901 	mov.w	r9, #1
 801a368:	4623      	mov	r3, r4
 801a36a:	469a      	mov	sl, r3
 801a36c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a370:	b10a      	cbz	r2, 801a376 <_vfiprintf_r+0x86>
 801a372:	2a25      	cmp	r2, #37	; 0x25
 801a374:	d1f9      	bne.n	801a36a <_vfiprintf_r+0x7a>
 801a376:	ebba 0b04 	subs.w	fp, sl, r4
 801a37a:	d00b      	beq.n	801a394 <_vfiprintf_r+0xa4>
 801a37c:	465b      	mov	r3, fp
 801a37e:	4622      	mov	r2, r4
 801a380:	4629      	mov	r1, r5
 801a382:	4630      	mov	r0, r6
 801a384:	f7ff ffa2 	bl	801a2cc <__sfputs_r>
 801a388:	3001      	adds	r0, #1
 801a38a:	f000 80a9 	beq.w	801a4e0 <_vfiprintf_r+0x1f0>
 801a38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a390:	445a      	add	r2, fp
 801a392:	9209      	str	r2, [sp, #36]	; 0x24
 801a394:	f89a 3000 	ldrb.w	r3, [sl]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	f000 80a1 	beq.w	801a4e0 <_vfiprintf_r+0x1f0>
 801a39e:	2300      	movs	r3, #0
 801a3a0:	f04f 32ff 	mov.w	r2, #4294967295
 801a3a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a3a8:	f10a 0a01 	add.w	sl, sl, #1
 801a3ac:	9304      	str	r3, [sp, #16]
 801a3ae:	9307      	str	r3, [sp, #28]
 801a3b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a3b4:	931a      	str	r3, [sp, #104]	; 0x68
 801a3b6:	4654      	mov	r4, sl
 801a3b8:	2205      	movs	r2, #5
 801a3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3be:	4854      	ldr	r0, [pc, #336]	; (801a510 <_vfiprintf_r+0x220>)
 801a3c0:	f7e5 ff2e 	bl	8000220 <memchr>
 801a3c4:	9a04      	ldr	r2, [sp, #16]
 801a3c6:	b9d8      	cbnz	r0, 801a400 <_vfiprintf_r+0x110>
 801a3c8:	06d1      	lsls	r1, r2, #27
 801a3ca:	bf44      	itt	mi
 801a3cc:	2320      	movmi	r3, #32
 801a3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a3d2:	0713      	lsls	r3, r2, #28
 801a3d4:	bf44      	itt	mi
 801a3d6:	232b      	movmi	r3, #43	; 0x2b
 801a3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a3dc:	f89a 3000 	ldrb.w	r3, [sl]
 801a3e0:	2b2a      	cmp	r3, #42	; 0x2a
 801a3e2:	d015      	beq.n	801a410 <_vfiprintf_r+0x120>
 801a3e4:	9a07      	ldr	r2, [sp, #28]
 801a3e6:	4654      	mov	r4, sl
 801a3e8:	2000      	movs	r0, #0
 801a3ea:	f04f 0c0a 	mov.w	ip, #10
 801a3ee:	4621      	mov	r1, r4
 801a3f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a3f4:	3b30      	subs	r3, #48	; 0x30
 801a3f6:	2b09      	cmp	r3, #9
 801a3f8:	d94d      	bls.n	801a496 <_vfiprintf_r+0x1a6>
 801a3fa:	b1b0      	cbz	r0, 801a42a <_vfiprintf_r+0x13a>
 801a3fc:	9207      	str	r2, [sp, #28]
 801a3fe:	e014      	b.n	801a42a <_vfiprintf_r+0x13a>
 801a400:	eba0 0308 	sub.w	r3, r0, r8
 801a404:	fa09 f303 	lsl.w	r3, r9, r3
 801a408:	4313      	orrs	r3, r2
 801a40a:	9304      	str	r3, [sp, #16]
 801a40c:	46a2      	mov	sl, r4
 801a40e:	e7d2      	b.n	801a3b6 <_vfiprintf_r+0xc6>
 801a410:	9b03      	ldr	r3, [sp, #12]
 801a412:	1d19      	adds	r1, r3, #4
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	9103      	str	r1, [sp, #12]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	bfbb      	ittet	lt
 801a41c:	425b      	neglt	r3, r3
 801a41e:	f042 0202 	orrlt.w	r2, r2, #2
 801a422:	9307      	strge	r3, [sp, #28]
 801a424:	9307      	strlt	r3, [sp, #28]
 801a426:	bfb8      	it	lt
 801a428:	9204      	strlt	r2, [sp, #16]
 801a42a:	7823      	ldrb	r3, [r4, #0]
 801a42c:	2b2e      	cmp	r3, #46	; 0x2e
 801a42e:	d10c      	bne.n	801a44a <_vfiprintf_r+0x15a>
 801a430:	7863      	ldrb	r3, [r4, #1]
 801a432:	2b2a      	cmp	r3, #42	; 0x2a
 801a434:	d134      	bne.n	801a4a0 <_vfiprintf_r+0x1b0>
 801a436:	9b03      	ldr	r3, [sp, #12]
 801a438:	1d1a      	adds	r2, r3, #4
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	9203      	str	r2, [sp, #12]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	bfb8      	it	lt
 801a442:	f04f 33ff 	movlt.w	r3, #4294967295
 801a446:	3402      	adds	r4, #2
 801a448:	9305      	str	r3, [sp, #20]
 801a44a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a520 <_vfiprintf_r+0x230>
 801a44e:	7821      	ldrb	r1, [r4, #0]
 801a450:	2203      	movs	r2, #3
 801a452:	4650      	mov	r0, sl
 801a454:	f7e5 fee4 	bl	8000220 <memchr>
 801a458:	b138      	cbz	r0, 801a46a <_vfiprintf_r+0x17a>
 801a45a:	9b04      	ldr	r3, [sp, #16]
 801a45c:	eba0 000a 	sub.w	r0, r0, sl
 801a460:	2240      	movs	r2, #64	; 0x40
 801a462:	4082      	lsls	r2, r0
 801a464:	4313      	orrs	r3, r2
 801a466:	3401      	adds	r4, #1
 801a468:	9304      	str	r3, [sp, #16]
 801a46a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a46e:	4829      	ldr	r0, [pc, #164]	; (801a514 <_vfiprintf_r+0x224>)
 801a470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a474:	2206      	movs	r2, #6
 801a476:	f7e5 fed3 	bl	8000220 <memchr>
 801a47a:	2800      	cmp	r0, #0
 801a47c:	d03f      	beq.n	801a4fe <_vfiprintf_r+0x20e>
 801a47e:	4b26      	ldr	r3, [pc, #152]	; (801a518 <_vfiprintf_r+0x228>)
 801a480:	bb1b      	cbnz	r3, 801a4ca <_vfiprintf_r+0x1da>
 801a482:	9b03      	ldr	r3, [sp, #12]
 801a484:	3307      	adds	r3, #7
 801a486:	f023 0307 	bic.w	r3, r3, #7
 801a48a:	3308      	adds	r3, #8
 801a48c:	9303      	str	r3, [sp, #12]
 801a48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a490:	443b      	add	r3, r7
 801a492:	9309      	str	r3, [sp, #36]	; 0x24
 801a494:	e768      	b.n	801a368 <_vfiprintf_r+0x78>
 801a496:	fb0c 3202 	mla	r2, ip, r2, r3
 801a49a:	460c      	mov	r4, r1
 801a49c:	2001      	movs	r0, #1
 801a49e:	e7a6      	b.n	801a3ee <_vfiprintf_r+0xfe>
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	3401      	adds	r4, #1
 801a4a4:	9305      	str	r3, [sp, #20]
 801a4a6:	4619      	mov	r1, r3
 801a4a8:	f04f 0c0a 	mov.w	ip, #10
 801a4ac:	4620      	mov	r0, r4
 801a4ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4b2:	3a30      	subs	r2, #48	; 0x30
 801a4b4:	2a09      	cmp	r2, #9
 801a4b6:	d903      	bls.n	801a4c0 <_vfiprintf_r+0x1d0>
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d0c6      	beq.n	801a44a <_vfiprintf_r+0x15a>
 801a4bc:	9105      	str	r1, [sp, #20]
 801a4be:	e7c4      	b.n	801a44a <_vfiprintf_r+0x15a>
 801a4c0:	fb0c 2101 	mla	r1, ip, r1, r2
 801a4c4:	4604      	mov	r4, r0
 801a4c6:	2301      	movs	r3, #1
 801a4c8:	e7f0      	b.n	801a4ac <_vfiprintf_r+0x1bc>
 801a4ca:	ab03      	add	r3, sp, #12
 801a4cc:	9300      	str	r3, [sp, #0]
 801a4ce:	462a      	mov	r2, r5
 801a4d0:	4b12      	ldr	r3, [pc, #72]	; (801a51c <_vfiprintf_r+0x22c>)
 801a4d2:	a904      	add	r1, sp, #16
 801a4d4:	4630      	mov	r0, r6
 801a4d6:	f7fb fe4d 	bl	8016174 <_printf_float>
 801a4da:	4607      	mov	r7, r0
 801a4dc:	1c78      	adds	r0, r7, #1
 801a4de:	d1d6      	bne.n	801a48e <_vfiprintf_r+0x19e>
 801a4e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a4e2:	07d9      	lsls	r1, r3, #31
 801a4e4:	d405      	bmi.n	801a4f2 <_vfiprintf_r+0x202>
 801a4e6:	89ab      	ldrh	r3, [r5, #12]
 801a4e8:	059a      	lsls	r2, r3, #22
 801a4ea:	d402      	bmi.n	801a4f2 <_vfiprintf_r+0x202>
 801a4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a4ee:	f7fc fdbb 	bl	8017068 <__retarget_lock_release_recursive>
 801a4f2:	89ab      	ldrh	r3, [r5, #12]
 801a4f4:	065b      	lsls	r3, r3, #25
 801a4f6:	f53f af1d 	bmi.w	801a334 <_vfiprintf_r+0x44>
 801a4fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a4fc:	e71c      	b.n	801a338 <_vfiprintf_r+0x48>
 801a4fe:	ab03      	add	r3, sp, #12
 801a500:	9300      	str	r3, [sp, #0]
 801a502:	462a      	mov	r2, r5
 801a504:	4b05      	ldr	r3, [pc, #20]	; (801a51c <_vfiprintf_r+0x22c>)
 801a506:	a904      	add	r1, sp, #16
 801a508:	4630      	mov	r0, r6
 801a50a:	f7fc f8d7 	bl	80166bc <_printf_i>
 801a50e:	e7e4      	b.n	801a4da <_vfiprintf_r+0x1ea>
 801a510:	0801d7d1 	.word	0x0801d7d1
 801a514:	0801d7db 	.word	0x0801d7db
 801a518:	08016175 	.word	0x08016175
 801a51c:	0801a2cd 	.word	0x0801a2cd
 801a520:	0801d7d7 	.word	0x0801d7d7

0801a524 <__swbuf_r>:
 801a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a526:	460e      	mov	r6, r1
 801a528:	4614      	mov	r4, r2
 801a52a:	4605      	mov	r5, r0
 801a52c:	b118      	cbz	r0, 801a536 <__swbuf_r+0x12>
 801a52e:	6a03      	ldr	r3, [r0, #32]
 801a530:	b90b      	cbnz	r3, 801a536 <__swbuf_r+0x12>
 801a532:	f7fc fc81 	bl	8016e38 <__sinit>
 801a536:	69a3      	ldr	r3, [r4, #24]
 801a538:	60a3      	str	r3, [r4, #8]
 801a53a:	89a3      	ldrh	r3, [r4, #12]
 801a53c:	071a      	lsls	r2, r3, #28
 801a53e:	d525      	bpl.n	801a58c <__swbuf_r+0x68>
 801a540:	6923      	ldr	r3, [r4, #16]
 801a542:	b31b      	cbz	r3, 801a58c <__swbuf_r+0x68>
 801a544:	6823      	ldr	r3, [r4, #0]
 801a546:	6922      	ldr	r2, [r4, #16]
 801a548:	1a98      	subs	r0, r3, r2
 801a54a:	6963      	ldr	r3, [r4, #20]
 801a54c:	b2f6      	uxtb	r6, r6
 801a54e:	4283      	cmp	r3, r0
 801a550:	4637      	mov	r7, r6
 801a552:	dc04      	bgt.n	801a55e <__swbuf_r+0x3a>
 801a554:	4621      	mov	r1, r4
 801a556:	4628      	mov	r0, r5
 801a558:	f7ff fa3a 	bl	80199d0 <_fflush_r>
 801a55c:	b9e0      	cbnz	r0, 801a598 <__swbuf_r+0x74>
 801a55e:	68a3      	ldr	r3, [r4, #8]
 801a560:	3b01      	subs	r3, #1
 801a562:	60a3      	str	r3, [r4, #8]
 801a564:	6823      	ldr	r3, [r4, #0]
 801a566:	1c5a      	adds	r2, r3, #1
 801a568:	6022      	str	r2, [r4, #0]
 801a56a:	701e      	strb	r6, [r3, #0]
 801a56c:	6962      	ldr	r2, [r4, #20]
 801a56e:	1c43      	adds	r3, r0, #1
 801a570:	429a      	cmp	r2, r3
 801a572:	d004      	beq.n	801a57e <__swbuf_r+0x5a>
 801a574:	89a3      	ldrh	r3, [r4, #12]
 801a576:	07db      	lsls	r3, r3, #31
 801a578:	d506      	bpl.n	801a588 <__swbuf_r+0x64>
 801a57a:	2e0a      	cmp	r6, #10
 801a57c:	d104      	bne.n	801a588 <__swbuf_r+0x64>
 801a57e:	4621      	mov	r1, r4
 801a580:	4628      	mov	r0, r5
 801a582:	f7ff fa25 	bl	80199d0 <_fflush_r>
 801a586:	b938      	cbnz	r0, 801a598 <__swbuf_r+0x74>
 801a588:	4638      	mov	r0, r7
 801a58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a58c:	4621      	mov	r1, r4
 801a58e:	4628      	mov	r0, r5
 801a590:	f000 f806 	bl	801a5a0 <__swsetup_r>
 801a594:	2800      	cmp	r0, #0
 801a596:	d0d5      	beq.n	801a544 <__swbuf_r+0x20>
 801a598:	f04f 37ff 	mov.w	r7, #4294967295
 801a59c:	e7f4      	b.n	801a588 <__swbuf_r+0x64>
	...

0801a5a0 <__swsetup_r>:
 801a5a0:	b538      	push	{r3, r4, r5, lr}
 801a5a2:	4b2a      	ldr	r3, [pc, #168]	; (801a64c <__swsetup_r+0xac>)
 801a5a4:	4605      	mov	r5, r0
 801a5a6:	6818      	ldr	r0, [r3, #0]
 801a5a8:	460c      	mov	r4, r1
 801a5aa:	b118      	cbz	r0, 801a5b4 <__swsetup_r+0x14>
 801a5ac:	6a03      	ldr	r3, [r0, #32]
 801a5ae:	b90b      	cbnz	r3, 801a5b4 <__swsetup_r+0x14>
 801a5b0:	f7fc fc42 	bl	8016e38 <__sinit>
 801a5b4:	89a3      	ldrh	r3, [r4, #12]
 801a5b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a5ba:	0718      	lsls	r0, r3, #28
 801a5bc:	d422      	bmi.n	801a604 <__swsetup_r+0x64>
 801a5be:	06d9      	lsls	r1, r3, #27
 801a5c0:	d407      	bmi.n	801a5d2 <__swsetup_r+0x32>
 801a5c2:	2309      	movs	r3, #9
 801a5c4:	602b      	str	r3, [r5, #0]
 801a5c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a5ca:	81a3      	strh	r3, [r4, #12]
 801a5cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a5d0:	e034      	b.n	801a63c <__swsetup_r+0x9c>
 801a5d2:	0758      	lsls	r0, r3, #29
 801a5d4:	d512      	bpl.n	801a5fc <__swsetup_r+0x5c>
 801a5d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a5d8:	b141      	cbz	r1, 801a5ec <__swsetup_r+0x4c>
 801a5da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a5de:	4299      	cmp	r1, r3
 801a5e0:	d002      	beq.n	801a5e8 <__swsetup_r+0x48>
 801a5e2:	4628      	mov	r0, r5
 801a5e4:	f7fd fbd2 	bl	8017d8c <_free_r>
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	6363      	str	r3, [r4, #52]	; 0x34
 801a5ec:	89a3      	ldrh	r3, [r4, #12]
 801a5ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a5f2:	81a3      	strh	r3, [r4, #12]
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	6063      	str	r3, [r4, #4]
 801a5f8:	6923      	ldr	r3, [r4, #16]
 801a5fa:	6023      	str	r3, [r4, #0]
 801a5fc:	89a3      	ldrh	r3, [r4, #12]
 801a5fe:	f043 0308 	orr.w	r3, r3, #8
 801a602:	81a3      	strh	r3, [r4, #12]
 801a604:	6923      	ldr	r3, [r4, #16]
 801a606:	b94b      	cbnz	r3, 801a61c <__swsetup_r+0x7c>
 801a608:	89a3      	ldrh	r3, [r4, #12]
 801a60a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a60e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a612:	d003      	beq.n	801a61c <__swsetup_r+0x7c>
 801a614:	4621      	mov	r1, r4
 801a616:	4628      	mov	r0, r5
 801a618:	f000 f884 	bl	801a724 <__smakebuf_r>
 801a61c:	89a0      	ldrh	r0, [r4, #12]
 801a61e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a622:	f010 0301 	ands.w	r3, r0, #1
 801a626:	d00a      	beq.n	801a63e <__swsetup_r+0x9e>
 801a628:	2300      	movs	r3, #0
 801a62a:	60a3      	str	r3, [r4, #8]
 801a62c:	6963      	ldr	r3, [r4, #20]
 801a62e:	425b      	negs	r3, r3
 801a630:	61a3      	str	r3, [r4, #24]
 801a632:	6923      	ldr	r3, [r4, #16]
 801a634:	b943      	cbnz	r3, 801a648 <__swsetup_r+0xa8>
 801a636:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a63a:	d1c4      	bne.n	801a5c6 <__swsetup_r+0x26>
 801a63c:	bd38      	pop	{r3, r4, r5, pc}
 801a63e:	0781      	lsls	r1, r0, #30
 801a640:	bf58      	it	pl
 801a642:	6963      	ldrpl	r3, [r4, #20]
 801a644:	60a3      	str	r3, [r4, #8]
 801a646:	e7f4      	b.n	801a632 <__swsetup_r+0x92>
 801a648:	2000      	movs	r0, #0
 801a64a:	e7f7      	b.n	801a63c <__swsetup_r+0x9c>
 801a64c:	200003d0 	.word	0x200003d0

0801a650 <_raise_r>:
 801a650:	291f      	cmp	r1, #31
 801a652:	b538      	push	{r3, r4, r5, lr}
 801a654:	4604      	mov	r4, r0
 801a656:	460d      	mov	r5, r1
 801a658:	d904      	bls.n	801a664 <_raise_r+0x14>
 801a65a:	2316      	movs	r3, #22
 801a65c:	6003      	str	r3, [r0, #0]
 801a65e:	f04f 30ff 	mov.w	r0, #4294967295
 801a662:	bd38      	pop	{r3, r4, r5, pc}
 801a664:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a666:	b112      	cbz	r2, 801a66e <_raise_r+0x1e>
 801a668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a66c:	b94b      	cbnz	r3, 801a682 <_raise_r+0x32>
 801a66e:	4620      	mov	r0, r4
 801a670:	f000 f830 	bl	801a6d4 <_getpid_r>
 801a674:	462a      	mov	r2, r5
 801a676:	4601      	mov	r1, r0
 801a678:	4620      	mov	r0, r4
 801a67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a67e:	f000 b817 	b.w	801a6b0 <_kill_r>
 801a682:	2b01      	cmp	r3, #1
 801a684:	d00a      	beq.n	801a69c <_raise_r+0x4c>
 801a686:	1c59      	adds	r1, r3, #1
 801a688:	d103      	bne.n	801a692 <_raise_r+0x42>
 801a68a:	2316      	movs	r3, #22
 801a68c:	6003      	str	r3, [r0, #0]
 801a68e:	2001      	movs	r0, #1
 801a690:	e7e7      	b.n	801a662 <_raise_r+0x12>
 801a692:	2400      	movs	r4, #0
 801a694:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a698:	4628      	mov	r0, r5
 801a69a:	4798      	blx	r3
 801a69c:	2000      	movs	r0, #0
 801a69e:	e7e0      	b.n	801a662 <_raise_r+0x12>

0801a6a0 <raise>:
 801a6a0:	4b02      	ldr	r3, [pc, #8]	; (801a6ac <raise+0xc>)
 801a6a2:	4601      	mov	r1, r0
 801a6a4:	6818      	ldr	r0, [r3, #0]
 801a6a6:	f7ff bfd3 	b.w	801a650 <_raise_r>
 801a6aa:	bf00      	nop
 801a6ac:	200003d0 	.word	0x200003d0

0801a6b0 <_kill_r>:
 801a6b0:	b538      	push	{r3, r4, r5, lr}
 801a6b2:	4d07      	ldr	r5, [pc, #28]	; (801a6d0 <_kill_r+0x20>)
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	4604      	mov	r4, r0
 801a6b8:	4608      	mov	r0, r1
 801a6ba:	4611      	mov	r1, r2
 801a6bc:	602b      	str	r3, [r5, #0]
 801a6be:	f7ea fecb 	bl	8005458 <_kill>
 801a6c2:	1c43      	adds	r3, r0, #1
 801a6c4:	d102      	bne.n	801a6cc <_kill_r+0x1c>
 801a6c6:	682b      	ldr	r3, [r5, #0]
 801a6c8:	b103      	cbz	r3, 801a6cc <_kill_r+0x1c>
 801a6ca:	6023      	str	r3, [r4, #0]
 801a6cc:	bd38      	pop	{r3, r4, r5, pc}
 801a6ce:	bf00      	nop
 801a6d0:	200033b8 	.word	0x200033b8

0801a6d4 <_getpid_r>:
 801a6d4:	f7ea beb8 	b.w	8005448 <_getpid>

0801a6d8 <__swhatbuf_r>:
 801a6d8:	b570      	push	{r4, r5, r6, lr}
 801a6da:	460c      	mov	r4, r1
 801a6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6e0:	2900      	cmp	r1, #0
 801a6e2:	b096      	sub	sp, #88	; 0x58
 801a6e4:	4615      	mov	r5, r2
 801a6e6:	461e      	mov	r6, r3
 801a6e8:	da0d      	bge.n	801a706 <__swhatbuf_r+0x2e>
 801a6ea:	89a3      	ldrh	r3, [r4, #12]
 801a6ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a6f0:	f04f 0100 	mov.w	r1, #0
 801a6f4:	bf0c      	ite	eq
 801a6f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a6fa:	2340      	movne	r3, #64	; 0x40
 801a6fc:	2000      	movs	r0, #0
 801a6fe:	6031      	str	r1, [r6, #0]
 801a700:	602b      	str	r3, [r5, #0]
 801a702:	b016      	add	sp, #88	; 0x58
 801a704:	bd70      	pop	{r4, r5, r6, pc}
 801a706:	466a      	mov	r2, sp
 801a708:	f000 f848 	bl	801a79c <_fstat_r>
 801a70c:	2800      	cmp	r0, #0
 801a70e:	dbec      	blt.n	801a6ea <__swhatbuf_r+0x12>
 801a710:	9901      	ldr	r1, [sp, #4]
 801a712:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a716:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a71a:	4259      	negs	r1, r3
 801a71c:	4159      	adcs	r1, r3
 801a71e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a722:	e7eb      	b.n	801a6fc <__swhatbuf_r+0x24>

0801a724 <__smakebuf_r>:
 801a724:	898b      	ldrh	r3, [r1, #12]
 801a726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a728:	079d      	lsls	r5, r3, #30
 801a72a:	4606      	mov	r6, r0
 801a72c:	460c      	mov	r4, r1
 801a72e:	d507      	bpl.n	801a740 <__smakebuf_r+0x1c>
 801a730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a734:	6023      	str	r3, [r4, #0]
 801a736:	6123      	str	r3, [r4, #16]
 801a738:	2301      	movs	r3, #1
 801a73a:	6163      	str	r3, [r4, #20]
 801a73c:	b002      	add	sp, #8
 801a73e:	bd70      	pop	{r4, r5, r6, pc}
 801a740:	ab01      	add	r3, sp, #4
 801a742:	466a      	mov	r2, sp
 801a744:	f7ff ffc8 	bl	801a6d8 <__swhatbuf_r>
 801a748:	9900      	ldr	r1, [sp, #0]
 801a74a:	4605      	mov	r5, r0
 801a74c:	4630      	mov	r0, r6
 801a74e:	f7fd fb91 	bl	8017e74 <_malloc_r>
 801a752:	b948      	cbnz	r0, 801a768 <__smakebuf_r+0x44>
 801a754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a758:	059a      	lsls	r2, r3, #22
 801a75a:	d4ef      	bmi.n	801a73c <__smakebuf_r+0x18>
 801a75c:	f023 0303 	bic.w	r3, r3, #3
 801a760:	f043 0302 	orr.w	r3, r3, #2
 801a764:	81a3      	strh	r3, [r4, #12]
 801a766:	e7e3      	b.n	801a730 <__smakebuf_r+0xc>
 801a768:	89a3      	ldrh	r3, [r4, #12]
 801a76a:	6020      	str	r0, [r4, #0]
 801a76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a770:	81a3      	strh	r3, [r4, #12]
 801a772:	9b00      	ldr	r3, [sp, #0]
 801a774:	6163      	str	r3, [r4, #20]
 801a776:	9b01      	ldr	r3, [sp, #4]
 801a778:	6120      	str	r0, [r4, #16]
 801a77a:	b15b      	cbz	r3, 801a794 <__smakebuf_r+0x70>
 801a77c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a780:	4630      	mov	r0, r6
 801a782:	f000 f81d 	bl	801a7c0 <_isatty_r>
 801a786:	b128      	cbz	r0, 801a794 <__smakebuf_r+0x70>
 801a788:	89a3      	ldrh	r3, [r4, #12]
 801a78a:	f023 0303 	bic.w	r3, r3, #3
 801a78e:	f043 0301 	orr.w	r3, r3, #1
 801a792:	81a3      	strh	r3, [r4, #12]
 801a794:	89a3      	ldrh	r3, [r4, #12]
 801a796:	431d      	orrs	r5, r3
 801a798:	81a5      	strh	r5, [r4, #12]
 801a79a:	e7cf      	b.n	801a73c <__smakebuf_r+0x18>

0801a79c <_fstat_r>:
 801a79c:	b538      	push	{r3, r4, r5, lr}
 801a79e:	4d07      	ldr	r5, [pc, #28]	; (801a7bc <_fstat_r+0x20>)
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	4604      	mov	r4, r0
 801a7a4:	4608      	mov	r0, r1
 801a7a6:	4611      	mov	r1, r2
 801a7a8:	602b      	str	r3, [r5, #0]
 801a7aa:	f7ea feb4 	bl	8005516 <_fstat>
 801a7ae:	1c43      	adds	r3, r0, #1
 801a7b0:	d102      	bne.n	801a7b8 <_fstat_r+0x1c>
 801a7b2:	682b      	ldr	r3, [r5, #0]
 801a7b4:	b103      	cbz	r3, 801a7b8 <_fstat_r+0x1c>
 801a7b6:	6023      	str	r3, [r4, #0]
 801a7b8:	bd38      	pop	{r3, r4, r5, pc}
 801a7ba:	bf00      	nop
 801a7bc:	200033b8 	.word	0x200033b8

0801a7c0 <_isatty_r>:
 801a7c0:	b538      	push	{r3, r4, r5, lr}
 801a7c2:	4d06      	ldr	r5, [pc, #24]	; (801a7dc <_isatty_r+0x1c>)
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	4608      	mov	r0, r1
 801a7ca:	602b      	str	r3, [r5, #0]
 801a7cc:	f7ea feb3 	bl	8005536 <_isatty>
 801a7d0:	1c43      	adds	r3, r0, #1
 801a7d2:	d102      	bne.n	801a7da <_isatty_r+0x1a>
 801a7d4:	682b      	ldr	r3, [r5, #0]
 801a7d6:	b103      	cbz	r3, 801a7da <_isatty_r+0x1a>
 801a7d8:	6023      	str	r3, [r4, #0]
 801a7da:	bd38      	pop	{r3, r4, r5, pc}
 801a7dc:	200033b8 	.word	0x200033b8

0801a7e0 <fmod>:
 801a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7e2:	ed2d 8b02 	vpush	{d8}
 801a7e6:	ec57 6b10 	vmov	r6, r7, d0
 801a7ea:	ec55 4b11 	vmov	r4, r5, d1
 801a7ee:	f000 f86d 	bl	801a8cc <__ieee754_fmod>
 801a7f2:	4622      	mov	r2, r4
 801a7f4:	462b      	mov	r3, r5
 801a7f6:	4630      	mov	r0, r6
 801a7f8:	4639      	mov	r1, r7
 801a7fa:	eeb0 8a40 	vmov.f32	s16, s0
 801a7fe:	eef0 8a60 	vmov.f32	s17, s1
 801a802:	f7e6 f9bb 	bl	8000b7c <__aeabi_dcmpun>
 801a806:	b990      	cbnz	r0, 801a82e <fmod+0x4e>
 801a808:	2200      	movs	r2, #0
 801a80a:	2300      	movs	r3, #0
 801a80c:	4620      	mov	r0, r4
 801a80e:	4629      	mov	r1, r5
 801a810:	f7e6 f982 	bl	8000b18 <__aeabi_dcmpeq>
 801a814:	b158      	cbz	r0, 801a82e <fmod+0x4e>
 801a816:	f7fc fbfb 	bl	8017010 <__errno>
 801a81a:	2321      	movs	r3, #33	; 0x21
 801a81c:	6003      	str	r3, [r0, #0]
 801a81e:	2200      	movs	r2, #0
 801a820:	2300      	movs	r3, #0
 801a822:	4610      	mov	r0, r2
 801a824:	4619      	mov	r1, r3
 801a826:	f7e6 f839 	bl	800089c <__aeabi_ddiv>
 801a82a:	ec41 0b18 	vmov	d8, r0, r1
 801a82e:	eeb0 0a48 	vmov.f32	s0, s16
 801a832:	eef0 0a68 	vmov.f32	s1, s17
 801a836:	ecbd 8b02 	vpop	{d8}
 801a83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a83c <round>:
 801a83c:	ec53 2b10 	vmov	r2, r3, d0
 801a840:	b570      	push	{r4, r5, r6, lr}
 801a842:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801a846:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801a84a:	2813      	cmp	r0, #19
 801a84c:	ee10 5a10 	vmov	r5, s0
 801a850:	4619      	mov	r1, r3
 801a852:	dc18      	bgt.n	801a886 <round+0x4a>
 801a854:	2800      	cmp	r0, #0
 801a856:	da09      	bge.n	801a86c <round+0x30>
 801a858:	3001      	adds	r0, #1
 801a85a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801a85e:	d103      	bne.n	801a868 <round+0x2c>
 801a860:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a864:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a868:	2300      	movs	r3, #0
 801a86a:	e02a      	b.n	801a8c2 <round+0x86>
 801a86c:	4c16      	ldr	r4, [pc, #88]	; (801a8c8 <round+0x8c>)
 801a86e:	4104      	asrs	r4, r0
 801a870:	ea03 0604 	and.w	r6, r3, r4
 801a874:	4316      	orrs	r6, r2
 801a876:	d011      	beq.n	801a89c <round+0x60>
 801a878:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a87c:	4103      	asrs	r3, r0
 801a87e:	440b      	add	r3, r1
 801a880:	ea23 0104 	bic.w	r1, r3, r4
 801a884:	e7f0      	b.n	801a868 <round+0x2c>
 801a886:	2833      	cmp	r0, #51	; 0x33
 801a888:	dd0b      	ble.n	801a8a2 <round+0x66>
 801a88a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a88e:	d105      	bne.n	801a89c <round+0x60>
 801a890:	ee10 0a10 	vmov	r0, s0
 801a894:	f7e5 fd22 	bl	80002dc <__adddf3>
 801a898:	4602      	mov	r2, r0
 801a89a:	460b      	mov	r3, r1
 801a89c:	ec43 2b10 	vmov	d0, r2, r3
 801a8a0:	bd70      	pop	{r4, r5, r6, pc}
 801a8a2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801a8a6:	f04f 34ff 	mov.w	r4, #4294967295
 801a8aa:	40f4      	lsrs	r4, r6
 801a8ac:	4214      	tst	r4, r2
 801a8ae:	d0f5      	beq.n	801a89c <round+0x60>
 801a8b0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801a8b4:	2301      	movs	r3, #1
 801a8b6:	4083      	lsls	r3, r0
 801a8b8:	195b      	adds	r3, r3, r5
 801a8ba:	bf28      	it	cs
 801a8bc:	3101      	addcs	r1, #1
 801a8be:	ea23 0304 	bic.w	r3, r3, r4
 801a8c2:	461a      	mov	r2, r3
 801a8c4:	460b      	mov	r3, r1
 801a8c6:	e7e9      	b.n	801a89c <round+0x60>
 801a8c8:	000fffff 	.word	0x000fffff

0801a8cc <__ieee754_fmod>:
 801a8cc:	ec53 2b11 	vmov	r2, r3, d1
 801a8d0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801a8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8d8:	ea5c 0402 	orrs.w	r4, ip, r2
 801a8dc:	ec51 0b10 	vmov	r0, r1, d0
 801a8e0:	ee11 7a10 	vmov	r7, s2
 801a8e4:	ee11 ea10 	vmov	lr, s2
 801a8e8:	461e      	mov	r6, r3
 801a8ea:	d00c      	beq.n	801a906 <__ieee754_fmod+0x3a>
 801a8ec:	4c78      	ldr	r4, [pc, #480]	; (801aad0 <__ieee754_fmod+0x204>)
 801a8ee:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801a8f2:	45a0      	cmp	r8, r4
 801a8f4:	4689      	mov	r9, r1
 801a8f6:	dc06      	bgt.n	801a906 <__ieee754_fmod+0x3a>
 801a8f8:	4254      	negs	r4, r2
 801a8fa:	4d76      	ldr	r5, [pc, #472]	; (801aad4 <__ieee754_fmod+0x208>)
 801a8fc:	4314      	orrs	r4, r2
 801a8fe:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801a902:	42ac      	cmp	r4, r5
 801a904:	d909      	bls.n	801a91a <__ieee754_fmod+0x4e>
 801a906:	f7e5 fe9f 	bl	8000648 <__aeabi_dmul>
 801a90a:	4602      	mov	r2, r0
 801a90c:	460b      	mov	r3, r1
 801a90e:	f7e5 ffc5 	bl	800089c <__aeabi_ddiv>
 801a912:	ec41 0b10 	vmov	d0, r0, r1
 801a916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a91a:	45e0      	cmp	r8, ip
 801a91c:	ee10 aa10 	vmov	sl, s0
 801a920:	ee10 4a10 	vmov	r4, s0
 801a924:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801a928:	dc09      	bgt.n	801a93e <__ieee754_fmod+0x72>
 801a92a:	dbf2      	blt.n	801a912 <__ieee754_fmod+0x46>
 801a92c:	4290      	cmp	r0, r2
 801a92e:	d3f0      	bcc.n	801a912 <__ieee754_fmod+0x46>
 801a930:	d105      	bne.n	801a93e <__ieee754_fmod+0x72>
 801a932:	4b69      	ldr	r3, [pc, #420]	; (801aad8 <__ieee754_fmod+0x20c>)
 801a934:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801a938:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a93c:	e7e9      	b.n	801a912 <__ieee754_fmod+0x46>
 801a93e:	4a65      	ldr	r2, [pc, #404]	; (801aad4 <__ieee754_fmod+0x208>)
 801a940:	ea19 0f02 	tst.w	r9, r2
 801a944:	d148      	bne.n	801a9d8 <__ieee754_fmod+0x10c>
 801a946:	f1b8 0f00 	cmp.w	r8, #0
 801a94a:	d13d      	bne.n	801a9c8 <__ieee754_fmod+0xfc>
 801a94c:	4963      	ldr	r1, [pc, #396]	; (801aadc <__ieee754_fmod+0x210>)
 801a94e:	4653      	mov	r3, sl
 801a950:	2b00      	cmp	r3, #0
 801a952:	dc36      	bgt.n	801a9c2 <__ieee754_fmod+0xf6>
 801a954:	4216      	tst	r6, r2
 801a956:	d14f      	bne.n	801a9f8 <__ieee754_fmod+0x12c>
 801a958:	f1bc 0f00 	cmp.w	ip, #0
 801a95c:	d144      	bne.n	801a9e8 <__ieee754_fmod+0x11c>
 801a95e:	4a5f      	ldr	r2, [pc, #380]	; (801aadc <__ieee754_fmod+0x210>)
 801a960:	463b      	mov	r3, r7
 801a962:	2b00      	cmp	r3, #0
 801a964:	dc3d      	bgt.n	801a9e2 <__ieee754_fmod+0x116>
 801a966:	485e      	ldr	r0, [pc, #376]	; (801aae0 <__ieee754_fmod+0x214>)
 801a968:	4281      	cmp	r1, r0
 801a96a:	db4a      	blt.n	801aa02 <__ieee754_fmod+0x136>
 801a96c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a974:	485a      	ldr	r0, [pc, #360]	; (801aae0 <__ieee754_fmod+0x214>)
 801a976:	4282      	cmp	r2, r0
 801a978:	db57      	blt.n	801aa2a <__ieee754_fmod+0x15e>
 801a97a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801a97e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801a982:	1a89      	subs	r1, r1, r2
 801a984:	1b98      	subs	r0, r3, r6
 801a986:	eba4 070e 	sub.w	r7, r4, lr
 801a98a:	2900      	cmp	r1, #0
 801a98c:	d162      	bne.n	801aa54 <__ieee754_fmod+0x188>
 801a98e:	4574      	cmp	r4, lr
 801a990:	bf38      	it	cc
 801a992:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801a996:	2800      	cmp	r0, #0
 801a998:	bfa4      	itt	ge
 801a99a:	463c      	movge	r4, r7
 801a99c:	4603      	movge	r3, r0
 801a99e:	ea53 0104 	orrs.w	r1, r3, r4
 801a9a2:	d0c6      	beq.n	801a932 <__ieee754_fmod+0x66>
 801a9a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a9a8:	db69      	blt.n	801aa7e <__ieee754_fmod+0x1b2>
 801a9aa:	494d      	ldr	r1, [pc, #308]	; (801aae0 <__ieee754_fmod+0x214>)
 801a9ac:	428a      	cmp	r2, r1
 801a9ae:	db6c      	blt.n	801aa8a <__ieee754_fmod+0x1be>
 801a9b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a9b4:	432b      	orrs	r3, r5
 801a9b6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801a9ba:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a9be:	4620      	mov	r0, r4
 801a9c0:	e7a7      	b.n	801a912 <__ieee754_fmod+0x46>
 801a9c2:	3901      	subs	r1, #1
 801a9c4:	005b      	lsls	r3, r3, #1
 801a9c6:	e7c3      	b.n	801a950 <__ieee754_fmod+0x84>
 801a9c8:	4945      	ldr	r1, [pc, #276]	; (801aae0 <__ieee754_fmod+0x214>)
 801a9ca:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	ddc0      	ble.n	801a954 <__ieee754_fmod+0x88>
 801a9d2:	3901      	subs	r1, #1
 801a9d4:	005b      	lsls	r3, r3, #1
 801a9d6:	e7fa      	b.n	801a9ce <__ieee754_fmod+0x102>
 801a9d8:	ea4f 5128 	mov.w	r1, r8, asr #20
 801a9dc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a9e0:	e7b8      	b.n	801a954 <__ieee754_fmod+0x88>
 801a9e2:	3a01      	subs	r2, #1
 801a9e4:	005b      	lsls	r3, r3, #1
 801a9e6:	e7bc      	b.n	801a962 <__ieee754_fmod+0x96>
 801a9e8:	4a3d      	ldr	r2, [pc, #244]	; (801aae0 <__ieee754_fmod+0x214>)
 801a9ea:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	ddb9      	ble.n	801a966 <__ieee754_fmod+0x9a>
 801a9f2:	3a01      	subs	r2, #1
 801a9f4:	005b      	lsls	r3, r3, #1
 801a9f6:	e7fa      	b.n	801a9ee <__ieee754_fmod+0x122>
 801a9f8:	ea4f 522c 	mov.w	r2, ip, asr #20
 801a9fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801aa00:	e7b1      	b.n	801a966 <__ieee754_fmod+0x9a>
 801aa02:	1a40      	subs	r0, r0, r1
 801aa04:	281f      	cmp	r0, #31
 801aa06:	dc0a      	bgt.n	801aa1e <__ieee754_fmod+0x152>
 801aa08:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801aa0c:	fa08 f800 	lsl.w	r8, r8, r0
 801aa10:	fa2a f303 	lsr.w	r3, sl, r3
 801aa14:	ea43 0308 	orr.w	r3, r3, r8
 801aa18:	fa0a f400 	lsl.w	r4, sl, r0
 801aa1c:	e7aa      	b.n	801a974 <__ieee754_fmod+0xa8>
 801aa1e:	4b31      	ldr	r3, [pc, #196]	; (801aae4 <__ieee754_fmod+0x218>)
 801aa20:	1a5b      	subs	r3, r3, r1
 801aa22:	fa0a f303 	lsl.w	r3, sl, r3
 801aa26:	2400      	movs	r4, #0
 801aa28:	e7a4      	b.n	801a974 <__ieee754_fmod+0xa8>
 801aa2a:	1a80      	subs	r0, r0, r2
 801aa2c:	281f      	cmp	r0, #31
 801aa2e:	dc0a      	bgt.n	801aa46 <__ieee754_fmod+0x17a>
 801aa30:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801aa34:	fa0c fc00 	lsl.w	ip, ip, r0
 801aa38:	fa27 f606 	lsr.w	r6, r7, r6
 801aa3c:	ea46 060c 	orr.w	r6, r6, ip
 801aa40:	fa07 fe00 	lsl.w	lr, r7, r0
 801aa44:	e79d      	b.n	801a982 <__ieee754_fmod+0xb6>
 801aa46:	4e27      	ldr	r6, [pc, #156]	; (801aae4 <__ieee754_fmod+0x218>)
 801aa48:	1ab6      	subs	r6, r6, r2
 801aa4a:	fa07 f606 	lsl.w	r6, r7, r6
 801aa4e:	f04f 0e00 	mov.w	lr, #0
 801aa52:	e796      	b.n	801a982 <__ieee754_fmod+0xb6>
 801aa54:	4574      	cmp	r4, lr
 801aa56:	bf38      	it	cc
 801aa58:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801aa5c:	2800      	cmp	r0, #0
 801aa5e:	da05      	bge.n	801aa6c <__ieee754_fmod+0x1a0>
 801aa60:	0fe0      	lsrs	r0, r4, #31
 801aa62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801aa66:	0064      	lsls	r4, r4, #1
 801aa68:	3901      	subs	r1, #1
 801aa6a:	e78b      	b.n	801a984 <__ieee754_fmod+0xb8>
 801aa6c:	ea50 0307 	orrs.w	r3, r0, r7
 801aa70:	f43f af5f 	beq.w	801a932 <__ieee754_fmod+0x66>
 801aa74:	0ffb      	lsrs	r3, r7, #31
 801aa76:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801aa7a:	007c      	lsls	r4, r7, #1
 801aa7c:	e7f4      	b.n	801aa68 <__ieee754_fmod+0x19c>
 801aa7e:	0fe1      	lsrs	r1, r4, #31
 801aa80:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801aa84:	0064      	lsls	r4, r4, #1
 801aa86:	3a01      	subs	r2, #1
 801aa88:	e78c      	b.n	801a9a4 <__ieee754_fmod+0xd8>
 801aa8a:	1a89      	subs	r1, r1, r2
 801aa8c:	2914      	cmp	r1, #20
 801aa8e:	dc0a      	bgt.n	801aaa6 <__ieee754_fmod+0x1da>
 801aa90:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801aa94:	fa03 f202 	lsl.w	r2, r3, r2
 801aa98:	40cc      	lsrs	r4, r1
 801aa9a:	4322      	orrs	r2, r4
 801aa9c:	410b      	asrs	r3, r1
 801aa9e:	ea43 0105 	orr.w	r1, r3, r5
 801aaa2:	4610      	mov	r0, r2
 801aaa4:	e735      	b.n	801a912 <__ieee754_fmod+0x46>
 801aaa6:	291f      	cmp	r1, #31
 801aaa8:	dc07      	bgt.n	801aaba <__ieee754_fmod+0x1ee>
 801aaaa:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801aaae:	40cc      	lsrs	r4, r1
 801aab0:	fa03 f202 	lsl.w	r2, r3, r2
 801aab4:	4322      	orrs	r2, r4
 801aab6:	462b      	mov	r3, r5
 801aab8:	e7f1      	b.n	801aa9e <__ieee754_fmod+0x1d2>
 801aaba:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801aabe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801aac2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801aac6:	32e2      	adds	r2, #226	; 0xe2
 801aac8:	fa43 f202 	asr.w	r2, r3, r2
 801aacc:	e7f3      	b.n	801aab6 <__ieee754_fmod+0x1ea>
 801aace:	bf00      	nop
 801aad0:	7fefffff 	.word	0x7fefffff
 801aad4:	7ff00000 	.word	0x7ff00000
 801aad8:	0801d888 	.word	0x0801d888
 801aadc:	fffffbed 	.word	0xfffffbed
 801aae0:	fffffc02 	.word	0xfffffc02
 801aae4:	fffffbe2 	.word	0xfffffbe2

0801aae8 <_init>:
 801aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaea:	bf00      	nop
 801aaec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aaee:	bc08      	pop	{r3}
 801aaf0:	469e      	mov	lr, r3
 801aaf2:	4770      	bx	lr

0801aaf4 <_fini>:
 801aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaf6:	bf00      	nop
 801aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aafa:	bc08      	pop	{r3}
 801aafc:	469e      	mov	lr, r3
 801aafe:	4770      	bx	lr
