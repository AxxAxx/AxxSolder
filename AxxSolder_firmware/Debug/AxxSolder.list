
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c00  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e10  08015de0  08015de0  00025de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018bf0  08018bf0  000303e4  2**0
                  CONTENTS
  4 .ARM          00000008  08018bf0  08018bf0  00028bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018bf8  08018bf8  000303e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018bf8  08018bf8  00028bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018bfc  08018bfc  00028bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e4  20000000  08018c00  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff8  200003e8  08018fe4  000303e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200023e0  08018fe4  000323e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030414  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002601c  00000000  00000000  00030457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b4b  00000000  00000000  00056473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002330  00000000  00000000  0005afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b2a  00000000  00000000  0005d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002551d  00000000  00000000  0005ee1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002afb1  00000000  00000000  00084337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e989e  00000000  00000000  000af2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ad00  00000000  00000000  00198b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001a3888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003e8 	.word	0x200003e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015dc8 	.word	0x08015dc8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003ec 	.word	0x200003ec
 800021c:	08015dc8 	.word	0x08015dc8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800104e:	0adb      	lsrs	r3, r3, #11
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <FlashCheckCRC>:

bool FlashCheckCRC()
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <FlashCheckCRC+0x70>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <FlashCheckCRC+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <FlashCheckCRC+0x70>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <FlashCheckCRC+0x74>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <FlashCheckCRC+0x78>)
 8001094:	f008 f928 	bl	80092e8 <HAL_CRC_Calculate>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bf08      	it	eq
 80010ba:	4290      	cmpeq	r0, r2
 80010bc:	d101      	bne.n	80010c2 <FlashCheckCRC+0x66>
	{
		return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <FlashCheckCRC+0x68>
	}
	return false;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0801f000 	.word	0x0801f000
 80010d4:	20001d30 	.word	0x20001d30

080010d8 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	int i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <FlashReadToBuf+0x88>)
 80010e4:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 80010e6:	f7ff ffb9 	bl	800105c <FlashCheckCRC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d031      	beq.n	8001154 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010f0:	e025      	b.n	800113e <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e013      	b.n	800112c <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <FlashReadToBuf+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d208      	bcs.n	8001126 <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	440a      	add	r2, r1
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FlashReadToBuf+0x90>)
 8001124:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	dde8      	ble.n	8001104 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3308      	adds	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3308      	adds	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FlashReadToBuf+0x8c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d203      	bcs.n	8001150 <FlashReadToBuf+0x78>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <FlashReadToBuf+0x94>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d3d0      	bcc.n	80010f2 <FlashReadToBuf+0x1a>
		}
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <FlashReadToBuf+0x7e>
	}
	return false;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801f000 	.word	0x0801f000
 8001164:	20000000 	.word	0x20000000
 8001168:	20000408 	.word	0x20000408
 800116c:	0801ffff 	.word	0x0801ffff

08001170 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8001178:	f7ff ffae 	bl	80010d8 <FlashReadToBuf>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FlashRead+0x30>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	2350      	movs	r3, #80	; 0x50
 800118c:	461a      	mov	r2, r3
 800118e:	f011 f8de 	bl	801234e <memcpy>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <FlashRead+0x28>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000408 	.word	0x20000408

080011a4 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <FlashWrite+0x170>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <FlashWrite+0x174>)
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 80011da:	f7ff ff7d 	bl	80010d8 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <FlashWrite+0x178>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	2350      	movs	r3, #80	; 0x50
 80011e8:	461a      	mov	r2, r3
 80011ea:	f011 f8b0 	bl	801234e <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <FlashWrite+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4949      	ldr	r1, [pc, #292]	; (800131c <FlashWrite+0x178>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <FlashWrite+0x180>)
 80011f8:	f008 f876 	bl	80092e8 <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	461c      	mov	r4, r3
 8001202:	4615      	mov	r5, r2
 8001204:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 8001208:	f008 fdbc 	bl	8009d84 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <FlashWrite+0x184>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <FlashWrite+0x188>)
 8001216:	f7ff ff13 	bl	8001040 <GetPage>
 800121a:	4604      	mov	r4, r0
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <FlashWrite+0x174>)
 800121e:	f7ff ff0f 	bl	8001040 <GetPage>
 8001222:	4603      	mov	r3, r0
 8001224:	1ae3      	subs	r3, r4, r3
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <FlashWrite+0x18c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <FlashWrite+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <FlashWrite+0x174>)
 8001238:	f7ff ff02 	bl	8001040 <GetPage>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <FlashWrite+0x18c>)
 8001240:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <FlashWrite+0x18c>)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <FlashWrite+0x18c>)
 8001250:	f008 fe84 	bl	8009f5c <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d152      	bne.n	8001300 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 800125a:	e04b      	b.n	80012f4 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e01b      	b.n	800129a <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <FlashWrite+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20a      	bcs.n	8001288 <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	441a      	add	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	440b      	add	r3, r1
 8001280:	4926      	ldr	r1, [pc, #152]	; (800131c <FlashWrite+0x178>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b07      	cmp	r3, #7
 800129e:	dde0      	ble.n	8001262 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <FlashWrite+0x17c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20f      	bcs.n	80012ca <FlashWrite+0x126>
 80012aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b0:	2000      	movs	r0, #0
 80012b2:	f008 fcfb 	bl	8009cac <HAL_FLASH_Program>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <FlashWrite+0x126>
			{
				Address = Address + 8;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	3308      	adds	r3, #8
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	3308      	adds	r3, #8
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	e014      	b.n	80012f4 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <FlashWrite+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d314      	bcc.n	80012fe <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 80012d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012da:	2000      	movs	r0, #0
 80012dc:	f008 fce6 	bl	8009cac <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 80012e6:	f008 fd6f 	bl	8009dc8 <HAL_FLASH_Lock>
					flashWriting = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <FlashWrite+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					return true;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00b      	b.n	800130c <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <FlashWrite+0x188>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3af      	bcc.n	800125c <FlashWrite+0xb8>
 80012fc:	e000      	b.n	8001300 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012fe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001300:	f008 fd62 	bl	8009dc8 <HAL_FLASH_Lock>

	flashWriting = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FlashWrite+0x170>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	20000404 	.word	0x20000404
 8001318:	0801f000 	.word	0x0801f000
 800131c:	20000408 	.word	0x20000408
 8001320:	20000000 	.word	0x20000000
 8001324:	20001d30 	.word	0x20001d30
 8001328:	40022000 	.word	0x40022000
 800132c:	0801ffff 	.word	0x0801ffff
 8001330:	20000458 	.word	0x20000458

08001334 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0b04 	vstr	d0, [r7, #16]
 800133e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001342:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <clamp+0x2a>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	e001      	b.n	8001362 <clamp+0x2e>
 800135e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136e:	f7ff fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <clamp+0x4a>
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	e001      	b.n	8001382 <clamp+0x4e>
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e012      	b.n	80013d2 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <get_mean_ADC_reading_indexed+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dde9      	ble.n	80013ac <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <get_mean_ADC_reading_indexed+0x78>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200004d8 	.word	0x200004d8
 8001408:	200004dc 	.word	0x200004dc
 800140c:	40330000 	.word	0x40330000

08001410 <get_mcu_temp>:

void get_mcu_temp(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ffbd 	bl	8001394 <get_mean_ADC_reading_indexed>
 800141a:	ec51 0b10 	vmov	r0, r1, d0
 800141e:	a328      	add	r3, pc, #160	; (adr r3, 80014c0 <get_mcu_temp+0xb0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f910 	bl	8000648 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <get_mcu_temp+0xa0>)
 8001436:	f7ff fa31 	bl	800089c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a317      	add	r3, pc, #92	; (adr r3, 80014a0 <get_mcu_temp+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff46 	bl	80002d8 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <get_mcu_temp+0x98>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fa1f 	bl	800089c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <get_mcu_temp+0xa4>)
 800146c:	f7fe ff36 	bl	80002dc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <get_mcu_temp+0xa8>)
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fc05 	bl	8004c90 <Moving_Average_Compute>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbd3 	bl	8000c38 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <get_mcu_temp+0xac>)
 8001496:	61d3      	str	r3, [r2, #28]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	40390000 	.word	0x40390000
 80014b8:	200008f0 	.word	0x200008f0
 80014bc:	20000038 	.word	0x20000038
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666

080014c8 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <change_state>:

void change_state(mainstates new_state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <change_state+0x58>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <change_state+0x5c>)
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <change_state+0x58>)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <change_state+0x58>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <change_state+0x44>
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <change_state+0x60>)
 8001518:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <change_state+0x64>)
 8001522:	f7ff faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <change_state+0x68>)
 8001532:	f008 ffd1 	bl	800a4d8 <HAL_GPIO_WritePin>
 8001536:	e005      	b.n	8001544 <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <change_state+0x68>)
 800153e:	f008 ffcb 	bl	800a4d8 <HAL_GPIO_WritePin>
	}
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001d 	.word	0x2000001d
 8001550:	20000038 	.word	0x20000038
 8001554:	20000558 	.word	0x20000558
 8001558:	3ff00000 	.word	0x3ff00000
 800155c:	48000400 	.word	0x48000400

08001560 <get_bus_voltage>:

void get_bus_voltage(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff15 	bl	8001394 <get_mean_ADC_reading_indexed>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb41 	bl	8000bf8 <__aeabi_d2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	490d      	ldr	r1, [pc, #52]	; (80015b0 <get_bus_voltage+0x50>)
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fb88 	bl	8004c90 <Moving_Average_Compute>
 8001580:	ec51 0b10 	vmov	r0, r1, d0
 8001584:	a308      	add	r3, pc, #32	; (adr r3, 80015a8 <get_bus_voltage+0x48>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <get_bus_voltage+0x54>)
 800159e:	6113      	str	r3, [r2, #16]
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	ada68bd9 	.word	0xada68bd9
 80015ac:	3f813656 	.word	0x3f813656
 80015b0:	20000c1c 	.word	0x20000c1c
 80015b4:	20000038 	.word	0x20000038

080015b8 <get_heater_current>:

void get_heater_current(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	sensor_values.heater_current = Moving_Average_Compute(current_raw, &current_filterStruct)*CURRENT_COMPENSATION;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <get_heater_current+0x40>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <get_heater_current+0x44>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fb64 	bl	8004c90 <Moving_Average_Compute>
 80015c8:	ec51 0b10 	vmov	r0, r1, d0
 80015cc:	a308      	add	r3, pc, #32	; (adr r3, 80015f0 <get_heater_current+0x38>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f839 	bl	8000648 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb2b 	bl	8000c38 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <get_heater_current+0x48>)
 80015e6:	6153      	str	r3, [r2, #20]
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fb99999 	.word	0x3fb99999
 80015f8:	2000054e 	.word	0x2000054e
 80015fc:	20000f48 	.word	0x20000f48
 8001600:	20000038 	.word	0x20000038
 8001604:	00000000 	.word	0x00000000

08001608 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fec0 	bl	8001394 <get_mean_ADC_reading_indexed>
 8001614:	ec53 2b10 	vmov	r2, r3, d0
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff faec 	bl	8000bf8 <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	4977      	ldr	r1, [pc, #476]	; (8001800 <get_thermocouple_temperature+0x1f8>)
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fb33 	bl	8004c90 <Moving_Average_Compute>
 800162a:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 800162e:	4b75      	ldr	r3, [pc, #468]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12e      	bne.n	8001694 <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163e:	f7ff f803 	bl	8000648 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a357      	add	r3, pc, #348	; (adr r3, 80017a8 <get_thermocouple_temperature+0x1a0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fffa 	bl	8000648 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	a354      	add	r3, pc, #336	; (adr r3, 80017b0 <get_thermocouple_temperature+0x1a8>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001666:	f7fe ffef 	bl	8000648 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe33 	bl	80002dc <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	a34e      	add	r3, pc, #312	; (adr r3, 80017b8 <get_thermocouple_temperature+0x1b0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fe2a 	bl	80002dc <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	495e      	ldr	r1, [pc, #376]	; (8001808 <get_thermocouple_temperature+0x200>)
 800168e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001692:	e064      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d12e      	bne.n	80016fa <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800169c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a4:	f7fe ffd0 	bl	8000648 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	a343      	add	r3, pc, #268	; (adr r3, 80017c0 <get_thermocouple_temperature+0x1b8>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	a341      	add	r3, pc, #260	; (adr r3, 80017c8 <get_thermocouple_temperature+0x1c0>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016cc:	f7fe ffbc 	bl	8000648 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fe00 	bl	80002dc <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a33a      	add	r3, pc, #232	; (adr r3, 80017d0 <get_thermocouple_temperature+0x1c8>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdf7 	bl	80002dc <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4945      	ldr	r1, [pc, #276]	; (8001808 <get_thermocouple_temperature+0x200>)
 80016f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016f8:	e031      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12d      	bne.n	800175e <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 8001702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170a:	f7fe ff9d 	bl	8000648 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	a330      	add	r3, pc, #192	; (adr r3, 80017d8 <get_thermocouple_temperature+0x1d0>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff94 	bl	8000648 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	a32d      	add	r3, pc, #180	; (adr r3, 80017e0 <get_thermocouple_temperature+0x1d8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f7fe ff89 	bl	8000648 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fdcd 	bl	80002dc <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a327      	add	r3, pc, #156	; (adr r3, 80017e8 <get_thermocouple_temperature+0x1e0>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fdc4 	bl	80002dc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	492b      	ldr	r1, [pc, #172]	; (8001808 <get_thermocouple_temperature+0x200>)
 800175a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001760:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <get_thermocouple_temperature+0x204>)
 8001766:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800176a:	f7fe fdb7 	bl	80002dc <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4925      	ldr	r1, [pc, #148]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001774:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <get_thermocouple_temperature+0x200>)
 800177a:	ed93 7b02 	vldr	d7, [r3, #8]
 800177e:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80017f0 <get_thermocouple_temperature+0x1e8>
 8001782:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80017f8 <get_thermocouple_temperature+0x1f0>
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	eef0 0a67 	vmov.f32	s1, s15
 800178e:	f7ff fdd1 	bl	8001334 <clamp>
 8001792:	eeb0 7a40 	vmov.f32	s14, s0
 8001796:	eef0 7a60 	vmov.f32	s15, s1
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <get_thermocouple_temperature+0x200>)
 800179c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	82211f02 	.word	0x82211f02
 80017ac:	3ed1b769 	.word	0x3ed1b769
 80017b0:	7d232337 	.word	0x7d232337
 80017b4:	3fd46490 	.word	0x3fd46490
 80017b8:	11588fd7 	.word	0x11588fd7
 80017bc:	4034f7d1 	.word	0x4034f7d1
 80017c0:	a66d5482 	.word	0xa66d5482
 80017c4:	be9fc6dc 	.word	0xbe9fc6dc
 80017c8:	56fa2c99 	.word	0x56fa2c99
 80017cc:	3fbe8eac 	.word	0x3fbe8eac
 80017d0:	aef84767 	.word	0xaef84767
 80017d4:	4037c703 	.word	0x4037c703
 80017d8:	e0057d0c 	.word	0xe0057d0c
 80017dc:	3f0ac0ae 	.word	0x3f0ac0ae
 80017e0:	859db92b 	.word	0x859db92b
 80017e4:	3fdae99a 	.word	0x3fdae99a
 80017e8:	027d19fb 	.word	0x027d19fb
 80017ec:	40342538 	.word	0x40342538
 80017f0:	00000000 	.word	0x00000000
 80017f4:	408f3800 	.word	0x408f3800
	...
 8001800:	200005c4 	.word	0x200005c4
 8001804:	20000468 	.word	0x20000468
 8001808:	20000038 	.word	0x20000038
 800180c:	20000558 	.word	0x20000558

08001810 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <set_heater_duty+0x48>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fea5 	bl	8000574 <__aeabi_i2d>
 800182a:	a309      	add	r3, pc, #36	; (adr r3, 8001850 <set_heater_duty+0x40>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe ff0a 	bl	8000648 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <set_heater_duty+0x48>)
 800183a:	680c      	ldr	r4, [r1, #0]
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9da 	bl	8000bf8 <__aeabi_d2uiz>
 8001844:	4603      	mov	r3, r0
 8001846:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	33333333 	.word	0x33333333
 8001854:	3fd33333 	.word	0x3fd33333
 8001858:	20001e6c 	.word	0x20001e6c
 800185c:	00000000 	.word	0x00000000

08001860 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <heater_on+0xa0>)
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	a31e      	add	r3, pc, #120	; (adr r3, 80018e8 <heater_on+0x88>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fee8 	bl	8000648 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <heater_on+0xa0>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe87 	bl	8000598 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7ff f803 	bl	800089c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <heater_on+0xa4>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fed0 	bl	8000648 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <heater_on+0xa8>)
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <heater_on+0xa8>)
 80018b4:	ed93 7b00 	vldr	d7, [r3]
 80018b8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80018f0 <heater_on+0x90>
 80018bc:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80018f8 <heater_on+0x98>
 80018c0:	eeb0 0a47 	vmov.f32	s0, s14
 80018c4:	eef0 0a67 	vmov.f32	s1, s15
 80018c8:	f7ff fd34 	bl	8001334 <clamp>
 80018cc:	ec53 2b10 	vmov	r2, r3, d0
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f990 	bl	8000bf8 <__aeabi_d2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff97 	bl	8001810 <set_heater_duty>
}
 80018e2:	bf00      	nop
 80018e4:	bdb0      	pop	{r4, r5, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	a5e353f8 	.word	0xa5e353f8
 80018ec:	3fc0c49b 	.word	0x3fc0c49b
 80018f0:	00000000 	.word	0x00000000
 80018f4:	407f4000 	.word	0x407f4000
	...
 8001900:	20000038 	.word	0x20000038
 8001904:	200005a8 	.word	0x200005a8
 8001908:	200005b8 	.word	0x200005b8

0800190c <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff ff7d 	bl	8001810 <set_heater_duty>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	0000      	movs	r0, r0
 800191c:	0000      	movs	r0, r0
	...

08001920 <settings_menue>:

void settings_menue(){
 8001920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001924:	b08d      	sub	sp, #52	; 0x34
 8001926:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001928:	2120      	movs	r1, #32
 800192a:	48c7      	ldr	r0, [pc, #796]	; (8001c48 <settings_menue+0x328>)
 800192c:	f008 fdbc 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	f040 831c 	bne.w	8001f70 <settings_menue+0x650>
		if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8001938:	4bc4      	ldr	r3, [pc, #784]	; (8001c4c <settings_menue+0x32c>)
 800193a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	f7ff f8e7 	bl	8000b18 <__aeabi_dcmpeq>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10b      	bne.n	8001968 <settings_menue+0x48>
 8001950:	4bbe      	ldr	r3, [pc, #760]	; (8001c4c <settings_menue+0x32c>)
 8001952:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195e:	f7ff f8db 	bl	8000b18 <__aeabi_dcmpeq>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d026      	beq.n	80019b6 <settings_menue+0x96>
			LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001968:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800196c:	f7ff fdac 	bl	80014c8 <RGB_to_BRG>
 8001970:	4603      	mov	r3, r0
 8001972:	461c      	mov	r4, r3
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fda7 	bl	80014c8 <RGB_to_BRG>
 800197a:	4603      	mov	r3, r0
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	9400      	str	r4, [sp, #0]
 8001980:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <settings_menue+0x330>)
 8001982:	4ab4      	ldr	r2, [pc, #720]	; (8001c54 <settings_menue+0x334>)
 8001984:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001988:	2000      	movs	r0, #0
 800198a:	f004 fed7 	bl	800673c <LCD_PutStr>
			LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 800198e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001992:	f7ff fd99 	bl	80014c8 <RGB_to_BRG>
 8001996:	4603      	mov	r3, r0
 8001998:	461c      	mov	r4, r3
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fd94 	bl	80014c8 <RGB_to_BRG>
 80019a0:	4603      	mov	r3, r0
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	9400      	str	r4, [sp, #0]
 80019a6:	4baa      	ldr	r3, [pc, #680]	; (8001c50 <settings_menue+0x330>)
 80019a8:	4aab      	ldr	r2, [pc, #684]	; (8001c58 <settings_menue+0x338>)
 80019aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019ae:	2096      	movs	r0, #150	; 0x96
 80019b0:	f004 fec4 	bl	800673c <LCD_PutStr>
 80019b4:	e023      	b.n	80019fe <settings_menue+0xde>
		}
		else{
			LCD_PutStr(0, 215, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019b6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019ba:	f7ff fd85 	bl	80014c8 <RGB_to_BRG>
 80019be:	4603      	mov	r3, r0
 80019c0:	461c      	mov	r4, r3
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fd80 	bl	80014c8 <RGB_to_BRG>
 80019c8:	4603      	mov	r3, r0
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9400      	str	r4, [sp, #0]
 80019ce:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <settings_menue+0x330>)
 80019d0:	4aa0      	ldr	r2, [pc, #640]	; (8001c54 <settings_menue+0x334>)
 80019d2:	21d7      	movs	r1, #215	; 0xd7
 80019d4:	2000      	movs	r0, #0
 80019d6:	f004 feb1 	bl	800673c <LCD_PutStr>
			LCD_PutStr(150, 215, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019da:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019de:	f7ff fd73 	bl	80014c8 <RGB_to_BRG>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461c      	mov	r4, r3
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fd6e 	bl	80014c8 <RGB_to_BRG>
 80019ec:	4603      	mov	r3, r0
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	9400      	str	r4, [sp, #0]
 80019f2:	4b97      	ldr	r3, [pc, #604]	; (8001c50 <settings_menue+0x330>)
 80019f4:	4a98      	ldr	r2, [pc, #608]	; (8001c58 <settings_menue+0x338>)
 80019f6:	21d7      	movs	r1, #215	; 0xd7
 80019f8:	2096      	movs	r0, #150	; 0x96
 80019fa:	f004 fe9f 	bl	800673c <LCD_PutStr>
		}

		TIM2->CNT = 1000;
 80019fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8001a22:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a26:	f7ff fd4f 	bl	80014c8 <RGB_to_BRG>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fd4a 	bl	80014c8 <RGB_to_BRG>
 8001a34:	4603      	mov	r3, r0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	9400      	str	r4, [sp, #0]
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <settings_menue+0x330>)
 8001a3c:	4a87      	ldr	r2, [pc, #540]	; (8001c5c <settings_menue+0x33c>)
 8001a3e:	210c      	movs	r1, #12
 8001a40:	203c      	movs	r0, #60	; 0x3c
 8001a42:	f004 fe7b 	bl	800673c <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001a46:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a4a:	f7ff fd3d 	bl	80014c8 <RGB_to_BRG>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2328      	movs	r3, #40	; 0x28
 8001a54:	22f0      	movs	r2, #240	; 0xf0
 8001a56:	2128      	movs	r1, #40	; 0x28
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f004 fe31 	bl	80066c0 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001a5e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a62:	f7ff fd31 	bl	80014c8 <RGB_to_BRG>
 8001a66:	4603      	mov	r3, r0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2329      	movs	r3, #41	; 0x29
 8001a6c:	22f0      	movs	r2, #240	; 0xf0
 8001a6e:	2129      	movs	r1, #41	; 0x29
 8001a70:	2000      	movs	r0, #0
 8001a72:	f004 fe25 	bl	80066c0 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001a76:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a7a:	f7ff fd25 	bl	80014c8 <RGB_to_BRG>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	232a      	movs	r3, #42	; 0x2a
 8001a84:	22f0      	movs	r2, #240	; 0xf0
 8001a86:	212a      	movs	r1, #42	; 0x2a
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f004 fe19 	bl	80066c0 <LCD_DrawLine>

		HAL_Delay(500);
 8001a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a92:	f004 ff6d 	bl	8006970 <HAL_Delay>
		while(menu_active == 1){
 8001a96:	e267      	b.n	8001f68 <settings_menue+0x648>
			if(menue_level == 0){
 8001a98:	8c3b      	ldrh	r3, [r7, #32]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d120      	bne.n	8001ae0 <settings_menue+0x1c0>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 8001a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd55 	bl	8000554 <__aeabi_ui2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	ed9f 2b60 	vldr	d2, [pc, #384]	; 8001c30 <settings_menue+0x310>
 8001ab2:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8001c38 <settings_menue+0x318>
 8001ab6:	ec43 2b10 	vmov	d0, r2, r3
 8001aba:	f7ff fc3b 	bl	8001334 <clamp>
 8001abe:	ec53 2b10 	vmov	r2, r3, d0
 8001ac2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f895 	bl	8000bf8 <__aeabi_d2uiz>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 8001ae0:	8c3b      	ldrh	r3, [r7, #32]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	f040 8091 	bne.w	8001c0a <settings_menue+0x2ea>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001ae8:	69b8      	ldr	r0, [r7, #24]
 8001aea:	f7fe fd55 	bl	8000598 <__aeabi_f2d>
 8001aee:	4604      	mov	r4, r0
 8001af0:	460d      	mov	r5, r1
 8001af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_ui2d>
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b57      	ldr	r3, [pc, #348]	; (8001c60 <settings_menue+0x340>)
 8001b04:	f7fe fbe8 	bl	80002d8 <__aeabi_dsub>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f892 	bl	8000c38 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd3e 	bl	8000598 <__aeabi_f2d>
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b24:	f7fe feba 	bl	800089c <__aeabi_ddiv>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4690      	mov	r8, r2
 8001b3a:	4699      	mov	r9, r3
 8001b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b46:	ee17 0a90 	vmov	r0, s15
 8001b4a:	f7fe fd25 	bl	8000598 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001b54:	00c9      	lsls	r1, r1, #3
 8001b56:	483d      	ldr	r0, [pc, #244]	; (8001c4c <settings_menue+0x32c>)
 8001b58:	180c      	adds	r4, r1, r0
 8001b5a:	4640      	mov	r0, r8
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	f7fe fbbb 	bl	80002d8 <__aeabi_dsub>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001b6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d002      	beq.n	8001b76 <settings_menue+0x256>
 8001b70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d12c      	bne.n	8001bd0 <settings_menue+0x2b0>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <settings_menue+0x32c>)
 8001b7c:	4413      	add	r3, r2
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f80f 	bl	8000ba8 <__aeabi_d2iz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bfb8      	it	lt
 8001b90:	425b      	neglt	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fcee 	bl	8000574 <__aeabi_i2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001c40 <settings_menue+0x320>
 8001ba0:	ec43 2b10 	vmov	d0, r2, r3
 8001ba4:	f013 ff8c 	bl	8015ac0 <fmod>
 8001ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bac:	eef0 7a60 	vmov.f32	s15, s1
 8001bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <settings_menue+0x32c>)
 8001bb6:	189c      	adds	r4, r3, r2
 8001bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbc:	eef0 0a67 	vmov.f32	s1, s15
 8001bc0:	f013 ffac 	bl	8015b1c <round>
 8001bc4:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc8:	eef0 7a60 	vmov.f32	s15, s1
 8001bcc:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 8001bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d019      	beq.n	8001c0a <settings_menue+0x2ea>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001bd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <settings_menue+0x32c>)
 8001bdc:	4413      	add	r3, r2
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ffdf 	bl	8000ba8 <__aeabi_d2iz>
 8001bea:	4603      	mov	r3, r0
 8001bec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bf0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4914      	ldr	r1, [pc, #80]	; (8001c4c <settings_menue+0x32c>)
 8001bfa:	185c      	adds	r4, r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f7fe fcb9 	bl	8000574 <__aeabi_i2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001c0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c0c:	2b0c      	cmp	r3, #12
 8001c0e:	d906      	bls.n	8001c1e <settings_menue+0x2fe>
							menu_cursor_position = menu_length-1;
 8001c10:	230c      	movs	r3, #12
 8001c12:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 8001c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 6){
 8001c1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d91f      	bls.n	8001c64 <settings_menue+0x344>
				menue_start = menu_cursor_position-6;
 8001c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c26:	3b06      	subs	r3, #6
 8001c28:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c2a:	e01d      	b.n	8001c68 <settings_menue+0x348>
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	412e8480 	.word	0x412e8480
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	408f4000 	.word	0x408f4000
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40000000 	.word	0x40000000
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	20000558 	.word	0x20000558
 8001c50:	08016fe0 	.word	0x08016fe0
 8001c54:	08015de0 	.word	0x08015de0
 8001c58:	08015dec 	.word	0x08015dec
 8001c5c:	08015df4 	.word	0x08015df4
 8001c60:	408f4000 	.word	0x408f4000
			}
			else{
				menue_start = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001c68:	2120      	movs	r1, #32
 8001c6a:	4891      	ldr	r0, [pc, #580]	; (8001eb0 <settings_menue+0x590>)
 8001c6c:	f008 fc1c 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d127      	bne.n	8001cc6 <settings_menue+0x3a6>
 8001c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	d824      	bhi.n	8001cc6 <settings_menue+0x3a6>
				if(menue_level == 0){
 8001c7c:	8c3b      	ldrh	r3, [r7, #32]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <settings_menue+0x37e>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001c82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4a8b      	ldr	r2, [pc, #556]	; (8001eb4 <settings_menue+0x594>)
 8001c88:	4413      	add	r3, r2
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ffd1 	bl	8000c38 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001c9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001c9e:	8c3b      	ldrh	r3, [r7, #32]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <settings_menue+0x392>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ca6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001caa:	005a      	lsls	r2, r3, #1
 8001cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001cb2:	8c3b      	ldrh	r3, [r7, #32]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bfb8      	it	lt
 8001cba:	425b      	neglt	r3, r3
 8001cbc:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001cbe:	20c8      	movs	r0, #200	; 0xc8
 8001cc0:	f004 fe56 	bl	8006970 <HAL_Delay>
 8001cc4:	e02e      	b.n	8001d24 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	4879      	ldr	r0, [pc, #484]	; (8001eb0 <settings_menue+0x590>)
 8001cca:	f008 fbed 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <settings_menue+0x3c0>
 8001cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d102      	bne.n	8001ce0 <settings_menue+0x3c0>
				menu_active = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	83fb      	strh	r3, [r7, #30]
 8001cde:	e021      	b.n	8001d24 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4873      	ldr	r0, [pc, #460]	; (8001eb0 <settings_menue+0x590>)
 8001ce4:	f008 fbe0 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d108      	bne.n	8001d00 <settings_menue+0x3e0>
 8001cee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cf0:	2b0b      	cmp	r3, #11
 8001cf2:	d105      	bne.n	8001d00 <settings_menue+0x3e0>
				menu_active = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001cf8:	486e      	ldr	r0, [pc, #440]	; (8001eb4 <settings_menue+0x594>)
 8001cfa:	f7ff fa53 	bl	80011a4 <FlashWrite>
 8001cfe:	e011      	b.n	8001d24 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001d00:	2120      	movs	r1, #32
 8001d02:	486b      	ldr	r0, [pc, #428]	; (8001eb0 <settings_menue+0x590>)
 8001d04:	f008 fbd0 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10a      	bne.n	8001d24 <settings_menue+0x404>
 8001d0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d10:	2b0a      	cmp	r3, #10
 8001d12:	d107      	bne.n	8001d24 <settings_menue+0x404>
				flash_values = default_flash_values;
 8001d14:	4a67      	ldr	r2, [pc, #412]	; (8001eb4 <settings_menue+0x594>)
 8001d16:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <settings_menue+0x598>)
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	2350      	movs	r3, #80	; 0x50
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f010 fb15 	bl	801234e <memcpy>
			}

			for(int i = menue_start;i<=menue_start+6;i++){
 8001d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e118      	b.n	8001f5c <settings_menue+0x63c>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001d2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d12b      	bne.n	8001d8a <settings_menue+0x46a>
 8001d32:	8c3b      	ldrh	r3, [r7, #32]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d128      	bne.n	8001d8a <settings_menue+0x46a>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001d38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	0091      	lsls	r1, r2, #2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	332d      	adds	r3, #45	; 0x2d
 8001d54:	b29c      	uxth	r4, r3
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <settings_menue+0x59c>)
 8001d62:	189d      	adds	r5, r3, r2
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff fbaf 	bl	80014c8 <RGB_to_BRG>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461e      	mov	r6, r3
 8001d6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d72:	f7ff fba9 	bl	80014c8 <RGB_to_BRG>
 8001d76:	4603      	mov	r3, r0
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	9600      	str	r6, [sp, #0]
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <settings_menue+0x5a0>)
 8001d7e:	462a      	mov	r2, r5
 8001d80:	4621      	mov	r1, r4
 8001d82:	2005      	movs	r0, #5
 8001d84:	f004 fcda 	bl	800673c <LCD_PutStr>
 8001d88:	e027      	b.n	8001dda <settings_menue+0x4ba>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	0091      	lsls	r1, r2, #2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	332d      	adds	r3, #45	; 0x2d
 8001da6:	b29c      	uxth	r4, r3
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4a42      	ldr	r2, [pc, #264]	; (8001ebc <settings_menue+0x59c>)
 8001db4:	189d      	adds	r5, r3, r2
 8001db6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dba:	f7ff fb85 	bl	80014c8 <RGB_to_BRG>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461e      	mov	r6, r3
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff fb80 	bl	80014c8 <RGB_to_BRG>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	9600      	str	r6, [sp, #0]
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <settings_menue+0x5a0>)
 8001dd0:	462a      	mov	r2, r5
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	2005      	movs	r0, #5
 8001dd6:	f004 fcb1 	bl	800673c <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2214      	movs	r2, #20
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f010 fa34 	bl	801224e <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4a32      	ldr	r2, [pc, #200]	; (8001eb4 <settings_menue+0x594>)
 8001dec:	4413      	add	r3, r2
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	4638      	mov	r0, r7
 8001df4:	4933      	ldr	r1, [pc, #204]	; (8001ec4 <settings_menue+0x5a4>)
 8001df6:	f010 f9c7 	bl	8012188 <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <settings_menue+0x594>)
 8001e00:	4413      	add	r3, r2
 8001e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <settings_menue+0x5a8>)
 8001e0c:	f7fe fe8e 	bl	8000b2c <__aeabi_dcmplt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <settings_menue+0x508>
					str[1] = 32;
 8001e16:	2320      	movs	r3, #32
 8001e18:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001e22:	2320      	movs	r3, #32
 8001e24:	713b      	strb	r3, [r7, #4]
 8001e26:	e011      	b.n	8001e4c <settings_menue+0x52c>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <settings_menue+0x594>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e34:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <settings_menue+0x588>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fe77 	bl	8000b2c <__aeabi_dcmplt>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <settings_menue+0x52c>
					str[2] = 32;
 8001e44:	2320      	movs	r3, #32
 8001e46:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b09      	cmp	r3, #9
 8001e50:	dc5d      	bgt.n	8001f0e <settings_menue+0x5ee>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d138      	bne.n	8001ecc <settings_menue+0x5ac>
 8001e5a:	8c3b      	ldrh	r3, [r7, #32]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d135      	bne.n	8001ecc <settings_menue+0x5ac>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	0091      	lsls	r1, r2, #2
 8001e72:	461a      	mov	r2, r3
 8001e74:	460b      	mov	r3, r1
 8001e76:	4413      	add	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	332d      	adds	r3, #45	; 0x2d
 8001e7c:	b29c      	uxth	r4, r3
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fb22 	bl	80014c8 <RGB_to_BRG>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461d      	mov	r5, r3
 8001e88:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e8c:	f7ff fb1c 	bl	80014c8 <RGB_to_BRG>
 8001e90:	4603      	mov	r3, r0
 8001e92:	463a      	mov	r2, r7
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	9500      	str	r5, [sp, #0]
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <settings_menue+0x5a0>)
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	20c8      	movs	r0, #200	; 0xc8
 8001e9e:	f004 fc4d 	bl	800673c <LCD_PutStr>
 8001ea2:	e034      	b.n	8001f0e <settings_menue+0x5ee>
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	4058e000 	.word	0x4058e000
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	20000558 	.word	0x20000558
 8001eb8:	20000088 	.word	0x20000088
 8001ebc:	200000d8 	.word	0x200000d8
 8001ec0:	08016fe0 	.word	0x08016fe0
 8001ec4:	08015e00 	.word	0x08015e00
 8001ec8:	40230000 	.word	0x40230000
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ecc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	461a      	mov	r2, r3
 8001edc:	0091      	lsls	r1, r2, #2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	332d      	adds	r3, #45	; 0x2d
 8001ee8:	b29c      	uxth	r4, r3
 8001eea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eee:	f7ff faeb 	bl	80014c8 <RGB_to_BRG>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fae6 	bl	80014c8 <RGB_to_BRG>
 8001efc:	4603      	mov	r3, r0
 8001efe:	463a      	mov	r2, r7
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	9500      	str	r5, [sp, #0]
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <settings_menue+0x65c>)
 8001f06:	4621      	mov	r1, r4
 8001f08:	20c8      	movs	r0, #200	; 0xc8
 8001f0a:	f004 fc17 	bl	800673c <LCD_PutStr>
					}
				}
				if(i >= menu_length-3){
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	dd20      	ble.n	8001f56 <settings_menue+0x636>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	461a      	mov	r2, r3
 8001f24:	0091      	lsls	r1, r2, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	332d      	adds	r3, #45	; 0x2d
 8001f30:	b29c      	uxth	r4, r3
 8001f32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f36:	f7ff fac7 	bl	80014c8 <RGB_to_BRG>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fac2 	bl	80014c8 <RGB_to_BRG>
 8001f44:	4603      	mov	r3, r0
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	9500      	str	r5, [sp, #0]
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <settings_menue+0x65c>)
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <settings_menue+0x660>)
 8001f4e:	4621      	mov	r1, r4
 8001f50:	20c8      	movs	r0, #200	; 0xc8
 8001f52:	f004 fbf3 	bl	800673c <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+6;i++){
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f5e:	3306      	adds	r3, #6
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	f77f aee1 	ble.w	8001d2a <settings_menue+0x40a>
		while(menu_active == 1){
 8001f68:	8bfb      	ldrh	r3, [r7, #30]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f43f ad94 	beq.w	8001a98 <settings_menue+0x178>
				}

			}
		}
	}
}
 8001f70:	bf00      	nop
 8001f72:	372c      	adds	r7, #44	; 0x2c
 8001f74:	46bd      	mov	sp, r7
 8001f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08016fe0 	.word	0x08016fe0
 8001f80:	08015e08 	.word	0x08015e08
 8001f84:	00000000 	.word	0x00000000

08001f88 <update_display>:

void update_display(){
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8001f8e:	4b86      	ldr	r3, [pc, #536]	; (80021a8 <update_display+0x220>)
 8001f90:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	f7fe fdbc 	bl	8000b18 <__aeabi_dcmpeq>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <update_display+0x38>
 8001fa6:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <update_display+0x220>)
 8001fa8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb4:	f7fe fdb0 	bl	8000b18 <__aeabi_dcmpeq>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 82f0 	beq.w	80025a0 <update_display+0x618>
		memset(&buffer, '\0', sizeof(buffer));
 8001fc0:	2228      	movs	r2, #40	; 0x28
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4879      	ldr	r0, [pc, #484]	; (80021ac <update_display+0x224>)
 8001fc6:	f010 f942 	bl	801224e <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001fca:	4b79      	ldr	r3, [pc, #484]	; (80021b0 <update_display+0x228>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	4978      	ldr	r1, [pc, #480]	; (80021b4 <update_display+0x22c>)
 8001fd2:	4876      	ldr	r0, [pc, #472]	; (80021ac <update_display+0x224>)
 8001fd4:	f010 f8d8 	bl	8012188 <siprintf>
		if(sensor_values.set_temperature < 99.5){
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <update_display+0x228>)
 8001fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fde:	a370      	add	r3, pc, #448	; (adr r3, 80021a0 <update_display+0x218>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fda2 	bl	8000b2c <__aeabi_dcmplt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <update_display+0x72>
			buffer[2] = 32;
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <update_display+0x224>)
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001ff4:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <update_display+0x224>)
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ffa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ffe:	f7ff fa63 	bl	80014c8 <RGB_to_BRG>
 8002002:	4603      	mov	r3, r0
 8002004:	461c      	mov	r4, r3
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff fa5e 	bl	80014c8 <RGB_to_BRG>
 800200c:	4603      	mov	r3, r0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	9400      	str	r4, [sp, #0]
 8002012:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <update_display+0x230>)
 8002014:	4a65      	ldr	r2, [pc, #404]	; (80021ac <update_display+0x224>)
 8002016:	214b      	movs	r1, #75	; 0x4b
 8002018:	200e      	movs	r0, #14
 800201a:	f004 fb8f 	bl	800673c <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 800201e:	4b64      	ldr	r3, [pc, #400]	; (80021b0 <update_display+0x228>)
 8002020:	edd3 7a05 	vldr	s15, [r3, #20]
 8002024:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	d512      	bpl.n	8002058 <update_display+0xd0>
			LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002032:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002036:	f7ff fa47 	bl	80014c8 <RGB_to_BRG>
 800203a:	4603      	mov	r3, r0
 800203c:	461c      	mov	r4, r3
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fa42 	bl	80014c8 <RGB_to_BRG>
 8002044:	4603      	mov	r3, r0
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	9400      	str	r4, [sp, #0]
 800204a:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <update_display+0x230>)
 800204c:	4a5b      	ldr	r2, [pc, #364]	; (80021bc <update_display+0x234>)
 800204e:	21a5      	movs	r1, #165	; 0xa5
 8002050:	200a      	movs	r0, #10
 8002052:	f004 fb73 	bl	800673c <LCD_PutStr>
 8002056:	e02e      	b.n	80020b6 <update_display+0x12e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 8002058:	2228      	movs	r2, #40	; 0x28
 800205a:	2100      	movs	r1, #0
 800205c:	4853      	ldr	r0, [pc, #332]	; (80021ac <update_display+0x224>)
 800205e:	f010 f8f6 	bl	801224e <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8002062:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <update_display+0x228>)
 8002064:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002068:	4952      	ldr	r1, [pc, #328]	; (80021b4 <update_display+0x22c>)
 800206a:	4850      	ldr	r0, [pc, #320]	; (80021ac <update_display+0x224>)
 800206c:	f010 f88c 	bl	8012188 <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <update_display+0x228>)
 8002072:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002076:	a34a      	add	r3, pc, #296	; (adr r3, 80021a0 <update_display+0x218>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fd56 	bl	8000b2c <__aeabi_dcmplt>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <update_display+0x10a>
				buffer[2] = 32;
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <update_display+0x224>)
 8002088:	2220      	movs	r2, #32
 800208a:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 800208c:	4b47      	ldr	r3, [pc, #284]	; (80021ac <update_display+0x224>)
 800208e:	2220      	movs	r2, #32
 8002090:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002092:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002096:	f7ff fa17 	bl	80014c8 <RGB_to_BRG>
 800209a:	4603      	mov	r3, r0
 800209c:	461c      	mov	r4, r3
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff fa12 	bl	80014c8 <RGB_to_BRG>
 80020a4:	4603      	mov	r3, r0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <update_display+0x230>)
 80020ac:	4a3f      	ldr	r2, [pc, #252]	; (80021ac <update_display+0x224>)
 80020ae:	21a5      	movs	r1, #165	; 0xa5
 80020b0:	200e      	movs	r0, #14
 80020b2:	f004 fb43 	bl	800673c <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 80020b6:	2228      	movs	r2, #40	; 0x28
 80020b8:	2100      	movs	r1, #0
 80020ba:	483c      	ldr	r0, [pc, #240]	; (80021ac <update_display+0x224>)
 80020bc:	f010 f8c7 	bl	801224e <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80020c0:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <update_display+0x228>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa67 	bl	8000598 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	493c      	ldr	r1, [pc, #240]	; (80021c0 <update_display+0x238>)
 80020d0:	4836      	ldr	r0, [pc, #216]	; (80021ac <update_display+0x224>)
 80020d2:	f010 f859 	bl	8012188 <siprintf>
		LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020da:	f7ff f9f5 	bl	80014c8 <RGB_to_BRG>
 80020de:	4603      	mov	r3, r0
 80020e0:	461c      	mov	r4, r3
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff f9f0 	bl	80014c8 <RGB_to_BRG>
 80020e8:	4603      	mov	r3, r0
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	9400      	str	r4, [sp, #0]
 80020ee:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <update_display+0x23c>)
 80020f0:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <update_display+0x224>)
 80020f2:	21ff      	movs	r1, #255	; 0xff
 80020f4:	2064      	movs	r0, #100	; 0x64
 80020f6:	f004 fb21 	bl	800673c <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 80020fa:	2228      	movs	r2, #40	; 0x28
 80020fc:	2100      	movs	r1, #0
 80020fe:	482b      	ldr	r0, [pc, #172]	; (80021ac <update_display+0x224>)
 8002100:	f010 f8a5 	bl	801224e <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <update_display+0x228>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa45 	bl	8000598 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	492b      	ldr	r1, [pc, #172]	; (80021c0 <update_display+0x238>)
 8002114:	4825      	ldr	r0, [pc, #148]	; (80021ac <update_display+0x224>)
 8002116:	f010 f837 	bl	8012188 <siprintf>
		LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800211a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800211e:	f7ff f9d3 	bl	80014c8 <RGB_to_BRG>
 8002122:	4603      	mov	r3, r0
 8002124:	461c      	mov	r4, r3
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff f9ce 	bl	80014c8 <RGB_to_BRG>
 800212c:	4603      	mov	r3, r0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	9400      	str	r4, [sp, #0]
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <update_display+0x23c>)
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <update_display+0x224>)
 8002136:	f240 1113 	movw	r1, #275	; 0x113
 800213a:	2064      	movs	r0, #100	; 0x64
 800213c:	f004 fafe 	bl	800673c <LCD_PutStr>

		if(handle == T210){
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <update_display+0x240>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d112      	bne.n	800216e <update_display+0x1e6>
			LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002148:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800214c:	f7ff f9bc 	bl	80014c8 <RGB_to_BRG>
 8002150:	4603      	mov	r3, r0
 8002152:	461c      	mov	r4, r3
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff f9b7 	bl	80014c8 <RGB_to_BRG>
 800215a:	4603      	mov	r3, r0
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	9400      	str	r4, [sp, #0]
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <update_display+0x23c>)
 8002162:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <update_display+0x244>)
 8002164:	21eb      	movs	r1, #235	; 0xeb
 8002166:	2064      	movs	r0, #100	; 0x64
 8002168:	f004 fae8 	bl	800673c <LCD_PutStr>
 800216c:	e048      	b.n	8002200 <update_display+0x278>
		}
		else if(handle == T245){
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <update_display+0x240>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d12e      	bne.n	80021d4 <update_display+0x24c>
			LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002176:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800217a:	f7ff f9a5 	bl	80014c8 <RGB_to_BRG>
 800217e:	4603      	mov	r3, r0
 8002180:	461c      	mov	r4, r3
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff f9a0 	bl	80014c8 <RGB_to_BRG>
 8002188:	4603      	mov	r3, r0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	9400      	str	r4, [sp, #0]
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <update_display+0x23c>)
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <update_display+0x248>)
 8002192:	21eb      	movs	r1, #235	; 0xeb
 8002194:	2064      	movs	r0, #100	; 0x64
 8002196:	f004 fad1 	bl	800673c <LCD_PutStr>
 800219a:	e031      	b.n	8002200 <update_display+0x278>
 800219c:	f3af 8000 	nop.w
 80021a0:	00000000 	.word	0x00000000
 80021a4:	4058e000 	.word	0x4058e000
 80021a8:	20000558 	.word	0x20000558
 80021ac:	200004b0 	.word	0x200004b0
 80021b0:	20000038 	.word	0x20000038
 80021b4:	08015e10 	.word	0x08015e10
 80021b8:	08017fd0 	.word	0x08017fd0
 80021bc:	08015e14 	.word	0x08015e14
 80021c0:	08015e1c 	.word	0x08015e1c
 80021c4:	08016010 	.word	0x08016010
 80021c8:	20000468 	.word	0x20000468
 80021cc:	08015e24 	.word	0x08015e24
 80021d0:	08015e2c 	.word	0x08015e2c
		}
		else if(handle == NT115){
 80021d4:	4bab      	ldr	r3, [pc, #684]	; (8002484 <update_display+0x4fc>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <update_display+0x278>
			LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80021dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021e0:	f7ff f972 	bl	80014c8 <RGB_to_BRG>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461c      	mov	r4, r3
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff f96d 	bl	80014c8 <RGB_to_BRG>
 80021ee:	4603      	mov	r3, r0
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	9400      	str	r4, [sp, #0]
 80021f4:	4ba4      	ldr	r3, [pc, #656]	; (8002488 <update_display+0x500>)
 80021f6:	4aa5      	ldr	r2, [pc, #660]	; (800248c <update_display+0x504>)
 80021f8:	21eb      	movs	r1, #235	; 0xeb
 80021fa:	2064      	movs	r0, #100	; 0x64
 80021fc:	f004 fa9e 	bl	800673c <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002200:	4ba3      	ldr	r3, [pc, #652]	; (8002490 <update_display+0x508>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d008      	beq.n	800221a <update_display+0x292>
 8002208:	4ba1      	ldr	r3, [pc, #644]	; (8002490 <update_display+0x508>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d004      	beq.n	800221a <update_display+0x292>
 8002210:	4b9f      	ldr	r3, [pc, #636]	; (8002490 <update_display+0x508>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b04      	cmp	r3, #4
 8002216:	f040 8098 	bne.w	800234a <update_display+0x3c2>
 800221a:	4b9e      	ldr	r3, [pc, #632]	; (8002494 <update_display+0x50c>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 8093 	bne.w	800234a <update_display+0x3c2>
			UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 8002224:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002228:	f7ff f94e 	bl	80014c8 <RGB_to_BRG>
 800222c:	4603      	mov	r3, r0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002234:	22e6      	movs	r2, #230	; 0xe6
 8002236:	2137      	movs	r1, #55	; 0x37
 8002238:	20d2      	movs	r0, #210	; 0xd2
 800223a:	f00d fa61 	bl	800f700 <UG_FillFrame>
			LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff f942 	bl	80014c8 <RGB_to_BRG>
 8002244:	4603      	mov	r3, r0
 8002246:	461c      	mov	r4, r3
 8002248:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800224c:	f7ff f93c 	bl	80014c8 <RGB_to_BRG>
 8002250:	4603      	mov	r3, r0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	9400      	str	r4, [sp, #0]
 8002256:	4b90      	ldr	r3, [pc, #576]	; (8002498 <update_display+0x510>)
 8002258:	4a90      	ldr	r2, [pc, #576]	; (800249c <update_display+0x514>)
 800225a:	213a      	movs	r1, #58	; 0x3a
 800225c:	20d6      	movs	r0, #214	; 0xd6
 800225e:	f004 fa6d 	bl	800673c <LCD_PutStr>
			LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002262:	2000      	movs	r0, #0
 8002264:	f7ff f930 	bl	80014c8 <RGB_to_BRG>
 8002268:	4603      	mov	r3, r0
 800226a:	461c      	mov	r4, r3
 800226c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002270:	f7ff f92a 	bl	80014c8 <RGB_to_BRG>
 8002274:	4603      	mov	r3, r0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	9400      	str	r4, [sp, #0]
 800227a:	4b87      	ldr	r3, [pc, #540]	; (8002498 <update_display+0x510>)
 800227c:	4a88      	ldr	r2, [pc, #544]	; (80024a0 <update_display+0x518>)
 800227e:	215c      	movs	r1, #92	; 0x5c
 8002280:	20d8      	movs	r0, #216	; 0xd8
 8002282:	f004 fa5b 	bl	800673c <LCD_PutStr>
			LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff f91e 	bl	80014c8 <RGB_to_BRG>
 800228c:	4603      	mov	r3, r0
 800228e:	461c      	mov	r4, r3
 8002290:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002294:	f7ff f918 	bl	80014c8 <RGB_to_BRG>
 8002298:	4603      	mov	r3, r0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	9400      	str	r4, [sp, #0]
 800229e:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <update_display+0x510>)
 80022a0:	4a7e      	ldr	r2, [pc, #504]	; (800249c <update_display+0x514>)
 80022a2:	217e      	movs	r1, #126	; 0x7e
 80022a4:	20d6      	movs	r0, #214	; 0xd6
 80022a6:	f004 fa49 	bl	800673c <LCD_PutStr>
			LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff f90c 	bl	80014c8 <RGB_to_BRG>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461c      	mov	r4, r3
 80022b4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022b8:	f7ff f906 	bl	80014c8 <RGB_to_BRG>
 80022bc:	4603      	mov	r3, r0
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	9400      	str	r4, [sp, #0]
 80022c2:	4b75      	ldr	r3, [pc, #468]	; (8002498 <update_display+0x510>)
 80022c4:	4a76      	ldr	r2, [pc, #472]	; (80024a0 <update_display+0x518>)
 80022c6:	21a1      	movs	r1, #161	; 0xa1
 80022c8:	20d8      	movs	r0, #216	; 0xd8
 80022ca:	f004 fa37 	bl	800673c <LCD_PutStr>
			LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff f8fa 	bl	80014c8 <RGB_to_BRG>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461c      	mov	r4, r3
 80022d8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022dc:	f7ff f8f4 	bl	80014c8 <RGB_to_BRG>
 80022e0:	4603      	mov	r3, r0
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	9400      	str	r4, [sp, #0]
 80022e6:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <update_display+0x510>)
 80022e8:	4a6c      	ldr	r2, [pc, #432]	; (800249c <update_display+0x514>)
 80022ea:	21c2      	movs	r1, #194	; 0xc2
 80022ec:	20d6      	movs	r0, #214	; 0xd6
 80022ee:	f004 fa25 	bl	800673c <LCD_PutStr>
			LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff f8e8 	bl	80014c8 <RGB_to_BRG>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461c      	mov	r4, r3
 80022fc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002300:	f7ff f8e2 	bl	80014c8 <RGB_to_BRG>
 8002304:	4603      	mov	r3, r0
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	9400      	str	r4, [sp, #0]
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <update_display+0x510>)
 800230c:	4a64      	ldr	r2, [pc, #400]	; (80024a0 <update_display+0x518>)
 800230e:	21e4      	movs	r1, #228	; 0xe4
 8002310:	20d8      	movs	r0, #216	; 0xd8
 8002312:	f004 fa13 	bl	800673c <LCD_PutStr>
			LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002316:	2000      	movs	r0, #0
 8002318:	f7ff f8d6 	bl	80014c8 <RGB_to_BRG>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002324:	f7ff f8d0 	bl	80014c8 <RGB_to_BRG>
 8002328:	4603      	mov	r3, r0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	9400      	str	r4, [sp, #0]
 800232e:	4b5a      	ldr	r3, [pc, #360]	; (8002498 <update_display+0x510>)
 8002330:	4a5a      	ldr	r2, [pc, #360]	; (800249c <update_display+0x514>)
 8002332:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002336:	20d6      	movs	r0, #214	; 0xd6
 8002338:	f004 fa00 	bl	800673c <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 800233c:	4b55      	ldr	r3, [pc, #340]	; (8002494 <update_display+0x50c>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 8002342:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <update_display+0x51c>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e129      	b.n	800259e <update_display+0x616>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800234a:	4b51      	ldr	r3, [pc, #324]	; (8002490 <update_display+0x508>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	f040 80b8 	bne.w	80024c4 <update_display+0x53c>
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <update_display+0x51c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 80b3 	bne.w	80024c4 <update_display+0x53c>
			UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 800235e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002362:	f7ff f8b1 	bl	80014c8 <RGB_to_BRG>
 8002366:	4603      	mov	r3, r0
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800236e:	22e6      	movs	r2, #230	; 0xe6
 8002370:	2137      	movs	r1, #55	; 0x37
 8002372:	20d2      	movs	r0, #210	; 0xd2
 8002374:	f00d f9c4 	bl	800f700 <UG_FillFrame>
			LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff f8a5 	bl	80014c8 <RGB_to_BRG>
 800237e:	4603      	mov	r3, r0
 8002380:	461c      	mov	r4, r3
 8002382:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002386:	f7ff f89f 	bl	80014c8 <RGB_to_BRG>
 800238a:	4603      	mov	r3, r0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	9400      	str	r4, [sp, #0]
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <update_display+0x510>)
 8002392:	4a45      	ldr	r2, [pc, #276]	; (80024a8 <update_display+0x520>)
 8002394:	213a      	movs	r1, #58	; 0x3a
 8002396:	20d6      	movs	r0, #214	; 0xd6
 8002398:	f004 f9d0 	bl	800673c <LCD_PutStr>
			LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff f893 	bl	80014c8 <RGB_to_BRG>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461c      	mov	r4, r3
 80023a6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023aa:	f7ff f88d 	bl	80014c8 <RGB_to_BRG>
 80023ae:	4603      	mov	r3, r0
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	9400      	str	r4, [sp, #0]
 80023b4:	4b38      	ldr	r3, [pc, #224]	; (8002498 <update_display+0x510>)
 80023b6:	4a3d      	ldr	r2, [pc, #244]	; (80024ac <update_display+0x524>)
 80023b8:	215c      	movs	r1, #92	; 0x5c
 80023ba:	20d6      	movs	r0, #214	; 0xd6
 80023bc:	f004 f9be 	bl	800673c <LCD_PutStr>
			LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff f881 	bl	80014c8 <RGB_to_BRG>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461c      	mov	r4, r3
 80023ca:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023ce:	f7ff f87b 	bl	80014c8 <RGB_to_BRG>
 80023d2:	4603      	mov	r3, r0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	9400      	str	r4, [sp, #0]
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <update_display+0x510>)
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <update_display+0x528>)
 80023dc:	217e      	movs	r1, #126	; 0x7e
 80023de:	20d6      	movs	r0, #214	; 0xd6
 80023e0:	f004 f9ac 	bl	800673c <LCD_PutStr>
			LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff f86f 	bl	80014c8 <RGB_to_BRG>
 80023ea:	4603      	mov	r3, r0
 80023ec:	461c      	mov	r4, r3
 80023ee:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023f2:	f7ff f869 	bl	80014c8 <RGB_to_BRG>
 80023f6:	4603      	mov	r3, r0
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	9400      	str	r4, [sp, #0]
 80023fc:	4b26      	ldr	r3, [pc, #152]	; (8002498 <update_display+0x510>)
 80023fe:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <update_display+0x52c>)
 8002400:	21a1      	movs	r1, #161	; 0xa1
 8002402:	20d6      	movs	r0, #214	; 0xd6
 8002404:	f004 f99a 	bl	800673c <LCD_PutStr>
			LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff f85d 	bl	80014c8 <RGB_to_BRG>
 800240e:	4603      	mov	r3, r0
 8002410:	461c      	mov	r4, r3
 8002412:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002416:	f7ff f857 	bl	80014c8 <RGB_to_BRG>
 800241a:	4603      	mov	r3, r0
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	9400      	str	r4, [sp, #0]
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <update_display+0x510>)
 8002422:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <update_display+0x530>)
 8002424:	21c2      	movs	r1, #194	; 0xc2
 8002426:	20d6      	movs	r0, #214	; 0xd6
 8002428:	f004 f988 	bl	800673c <LCD_PutStr>
			LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff f84b 	bl	80014c8 <RGB_to_BRG>
 8002432:	4603      	mov	r3, r0
 8002434:	461c      	mov	r4, r3
 8002436:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800243a:	f7ff f845 	bl	80014c8 <RGB_to_BRG>
 800243e:	4603      	mov	r3, r0
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	9400      	str	r4, [sp, #0]
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <update_display+0x510>)
 8002446:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <update_display+0x534>)
 8002448:	21e4      	movs	r1, #228	; 0xe4
 800244a:	20d6      	movs	r0, #214	; 0xd6
 800244c:	f004 f976 	bl	800673c <LCD_PutStr>
			LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002450:	2000      	movs	r0, #0
 8002452:	f7ff f839 	bl	80014c8 <RGB_to_BRG>
 8002456:	4603      	mov	r3, r0
 8002458:	461c      	mov	r4, r3
 800245a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800245e:	f7ff f833 	bl	80014c8 <RGB_to_BRG>
 8002462:	4603      	mov	r3, r0
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	9400      	str	r4, [sp, #0]
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <update_display+0x510>)
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <update_display+0x538>)
 800246c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002470:	20d6      	movs	r0, #214	; 0xd6
 8002472:	f004 f963 	bl	800673c <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <update_display+0x51c>)
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <update_display+0x50c>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	e08c      	b.n	800259e <update_display+0x616>
 8002484:	20000468 	.word	0x20000468
 8002488:	08016010 	.word	0x08016010
 800248c:	08015e34 	.word	0x08015e34
 8002490:	2000001d 	.word	0x2000001d
 8002494:	2000048f 	.word	0x2000048f
 8002498:	08016fe0 	.word	0x08016fe0
 800249c:	08015e3c 	.word	0x08015e3c
 80024a0:	08015e40 	.word	0x08015e40
 80024a4:	20000490 	.word	0x20000490
 80024a8:	08015e44 	.word	0x08015e44
 80024ac:	08015e48 	.word	0x08015e48
 80024b0:	08015e4c 	.word	0x08015e4c
 80024b4:	08015e50 	.word	0x08015e50
 80024b8:	08015e54 	.word	0x08015e54
 80024bc:	08015e58 	.word	0x08015e58
 80024c0:	08015e5c 	.word	0x08015e5c
		}
		else if(active_state == RUN){
 80024c4:	4bb4      	ldr	r3, [pc, #720]	; (8002798 <update_display+0x810>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 836a 	bne.w	8002ba2 <update_display+0xc1a>
			UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 80024ce:	4bb3      	ldr	r3, [pc, #716]	; (800279c <update_display+0x814>)
 80024d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	4bb1      	ldr	r3, [pc, #708]	; (80027a0 <update_display+0x818>)
 80024da:	f7fe f9df 	bl	800089c <__aeabi_ddiv>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	4bae      	ldr	r3, [pc, #696]	; (80027a4 <update_display+0x81c>)
 80024ec:	f7fe f8ac 	bl	8000648 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	a1a2      	add	r1, pc, #648	; (adr r1, 8002780 <update_display+0x7f8>)
 80024f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024fa:	f7fd feed 	bl	80002d8 <__aeabi_dsub>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb4f 	bl	8000ba8 <__aeabi_d2iz>
 800250a:	4603      	mov	r3, r0
 800250c:	b21c      	sxth	r4, r3
 800250e:	f248 607e 	movw	r0, #34430	; 0x867e
 8002512:	f7fe ffd9 	bl	80014c8 <RGB_to_BRG>
 8002516:	4603      	mov	r3, r0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f240 131f 	movw	r3, #287	; 0x11f
 800251e:	22e6      	movs	r2, #230	; 0xe6
 8002520:	4621      	mov	r1, r4
 8002522:	20d2      	movs	r0, #210	; 0xd2
 8002524:	f00d f8ec 	bl	800f700 <UG_FillFrame>
			UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 8002528:	4b9c      	ldr	r3, [pc, #624]	; (800279c <update_display+0x814>)
 800252a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b9b      	ldr	r3, [pc, #620]	; (80027a0 <update_display+0x818>)
 8002534:	f7fe f9b2 	bl	800089c <__aeabi_ddiv>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	a391      	add	r3, pc, #580	; (adr r3, 8002788 <update_display+0x800>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f87f 	bl	8000648 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	a18c      	add	r1, pc, #560	; (adr r1, 8002780 <update_display+0x7f8>)
 8002550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002554:	f7fd fec0 	bl	80002d8 <__aeabi_dsub>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4b90      	ldr	r3, [pc, #576]	; (80027a8 <update_display+0x820>)
 8002566:	f7fd feb7 	bl	80002d8 <__aeabi_dsub>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb19 	bl	8000ba8 <__aeabi_d2iz>
 8002576:	4603      	mov	r3, r0
 8002578:	b21c      	sxth	r4, r3
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe ffa4 	bl	80014c8 <RGB_to_BRG>
 8002580:	4603      	mov	r3, r0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	4623      	mov	r3, r4
 8002586:	22e6      	movs	r2, #230	; 0xe6
 8002588:	2137      	movs	r1, #55	; 0x37
 800258a:	20d2      	movs	r0, #210	; 0xd2
 800258c:	f00d f8b8 	bl	800f700 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 8002590:	4b86      	ldr	r3, [pc, #536]	; (80027ac <update_display+0x824>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002596:	4b86      	ldr	r3, [pc, #536]	; (80027b0 <update_display+0x828>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 800259c:	e301      	b.n	8002ba2 <update_display+0xc1a>
 800259e:	e300      	b.n	8002ba2 <update_display+0xc1a>
		}
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 80025a0:	2228      	movs	r2, #40	; 0x28
 80025a2:	2100      	movs	r1, #0
 80025a4:	4883      	ldr	r0, [pc, #524]	; (80027b4 <update_display+0x82c>)
 80025a6:	f00f fe52 	bl	801224e <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 80025aa:	4b83      	ldr	r3, [pc, #524]	; (80027b8 <update_display+0x830>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	4982      	ldr	r1, [pc, #520]	; (80027bc <update_display+0x834>)
 80025b2:	4880      	ldr	r0, [pc, #512]	; (80027b4 <update_display+0x82c>)
 80025b4:	f00f fde8 	bl	8012188 <siprintf>
		if(sensor_values.set_temperature < 99.5){
 80025b8:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <update_display+0x830>)
 80025ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025be:	a374      	add	r3, pc, #464	; (adr r3, 8002790 <update_display+0x808>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe fab2 	bl	8000b2c <__aeabi_dcmplt>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <update_display+0x652>
			buffer[2] = 32;
 80025ce:	4b79      	ldr	r3, [pc, #484]	; (80027b4 <update_display+0x82c>)
 80025d0:	2220      	movs	r2, #32
 80025d2:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 80025d4:	4b77      	ldr	r3, [pc, #476]	; (80027b4 <update_display+0x82c>)
 80025d6:	2220      	movs	r2, #32
 80025d8:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 30, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80025da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025de:	f7fe ff73 	bl	80014c8 <RGB_to_BRG>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461c      	mov	r4, r3
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe ff6e 	bl	80014c8 <RGB_to_BRG>
 80025ec:	4603      	mov	r3, r0
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	9400      	str	r4, [sp, #0]
 80025f2:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <update_display+0x838>)
 80025f4:	4a6f      	ldr	r2, [pc, #444]	; (80027b4 <update_display+0x82c>)
 80025f6:	211e      	movs	r1, #30
 80025f8:	200e      	movs	r0, #14
 80025fa:	f004 f89f 	bl	800673c <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 80025fe:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <update_display+0x830>)
 8002600:	edd3 7a05 	vldr	s15, [r3, #20]
 8002604:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	d512      	bpl.n	8002638 <update_display+0x6b0>
			LCD_PutStr(10, 120, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002612:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002616:	f7fe ff57 	bl	80014c8 <RGB_to_BRG>
 800261a:	4603      	mov	r3, r0
 800261c:	461c      	mov	r4, r3
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe ff52 	bl	80014c8 <RGB_to_BRG>
 8002624:	4603      	mov	r3, r0
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <update_display+0x838>)
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <update_display+0x83c>)
 800262e:	2178      	movs	r1, #120	; 0x78
 8002630:	200a      	movs	r0, #10
 8002632:	f004 f883 	bl	800673c <LCD_PutStr>
 8002636:	e02e      	b.n	8002696 <update_display+0x70e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 8002638:	2228      	movs	r2, #40	; 0x28
 800263a:	2100      	movs	r1, #0
 800263c:	485d      	ldr	r0, [pc, #372]	; (80027b4 <update_display+0x82c>)
 800263e:	f00f fe06 	bl	801224e <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8002642:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <update_display+0x830>)
 8002644:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002648:	495c      	ldr	r1, [pc, #368]	; (80027bc <update_display+0x834>)
 800264a:	485a      	ldr	r0, [pc, #360]	; (80027b4 <update_display+0x82c>)
 800264c:	f00f fd9c 	bl	8012188 <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <update_display+0x830>)
 8002652:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002656:	a34e      	add	r3, pc, #312	; (adr r3, 8002790 <update_display+0x808>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f7fe fa66 	bl	8000b2c <__aeabi_dcmplt>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <update_display+0x6ea>
				buffer[2] = 32;
 8002666:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <update_display+0x82c>)
 8002668:	2220      	movs	r2, #32
 800266a:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 800266c:	4b51      	ldr	r3, [pc, #324]	; (80027b4 <update_display+0x82c>)
 800266e:	2220      	movs	r2, #32
 8002670:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 120, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002672:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002676:	f7fe ff27 	bl	80014c8 <RGB_to_BRG>
 800267a:	4603      	mov	r3, r0
 800267c:	461c      	mov	r4, r3
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe ff22 	bl	80014c8 <RGB_to_BRG>
 8002684:	4603      	mov	r3, r0
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	9400      	str	r4, [sp, #0]
 800268a:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <update_display+0x838>)
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <update_display+0x82c>)
 800268e:	2178      	movs	r1, #120	; 0x78
 8002690:	200e      	movs	r0, #14
 8002692:	f004 f853 	bl	800673c <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 8002696:	2228      	movs	r2, #40	; 0x28
 8002698:	2100      	movs	r1, #0
 800269a:	4846      	ldr	r0, [pc, #280]	; (80027b4 <update_display+0x82c>)
 800269c:	f00f fdd7 	bl	801224e <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80026a0:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <update_display+0x830>)
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff77 	bl	8000598 <__aeabi_f2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4946      	ldr	r1, [pc, #280]	; (80027c8 <update_display+0x840>)
 80026b0:	4840      	ldr	r0, [pc, #256]	; (80027b4 <update_display+0x82c>)
 80026b2:	f00f fd69 	bl	8012188 <siprintf>
		LCD_PutStr(100, 195, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026ba:	f7fe ff05 	bl	80014c8 <RGB_to_BRG>
 80026be:	4603      	mov	r3, r0
 80026c0:	461c      	mov	r4, r3
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe ff00 	bl	80014c8 <RGB_to_BRG>
 80026c8:	4603      	mov	r3, r0
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	9400      	str	r4, [sp, #0]
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <update_display+0x844>)
 80026d0:	4a38      	ldr	r2, [pc, #224]	; (80027b4 <update_display+0x82c>)
 80026d2:	21c3      	movs	r1, #195	; 0xc3
 80026d4:	2064      	movs	r0, #100	; 0x64
 80026d6:	f004 f831 	bl	800673c <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 80026da:	2228      	movs	r2, #40	; 0x28
 80026dc:	2100      	movs	r1, #0
 80026de:	4835      	ldr	r0, [pc, #212]	; (80027b4 <update_display+0x82c>)
 80026e0:	f00f fdb5 	bl	801224e <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 80026e4:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <update_display+0x830>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd ff55 	bl	8000598 <__aeabi_f2d>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4935      	ldr	r1, [pc, #212]	; (80027c8 <update_display+0x840>)
 80026f4:	482f      	ldr	r0, [pc, #188]	; (80027b4 <update_display+0x82c>)
 80026f6:	f00f fd47 	bl	8012188 <siprintf>
		LCD_PutStr(100, 210, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026fe:	f7fe fee3 	bl	80014c8 <RGB_to_BRG>
 8002702:	4603      	mov	r3, r0
 8002704:	461c      	mov	r4, r3
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe fede 	bl	80014c8 <RGB_to_BRG>
 800270c:	4603      	mov	r3, r0
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	9400      	str	r4, [sp, #0]
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <update_display+0x844>)
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <update_display+0x82c>)
 8002716:	21d2      	movs	r1, #210	; 0xd2
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	f004 f80f 	bl	800673c <LCD_PutStr>

		if(handle == T210){
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <update_display+0x848>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d112      	bne.n	800274c <update_display+0x7c4>
			LCD_PutStr(100, 180, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002726:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800272a:	f7fe fecd 	bl	80014c8 <RGB_to_BRG>
 800272e:	4603      	mov	r3, r0
 8002730:	461c      	mov	r4, r3
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fec8 	bl	80014c8 <RGB_to_BRG>
 8002738:	4603      	mov	r3, r0
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	9400      	str	r4, [sp, #0]
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <update_display+0x844>)
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <update_display+0x84c>)
 8002742:	21b4      	movs	r1, #180	; 0xb4
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	f003 fff9 	bl	800673c <LCD_PutStr>
 800274a:	e05d      	b.n	8002808 <update_display+0x880>
		}
		else if(handle == T245){
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <update_display+0x848>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d143      	bne.n	80027dc <update_display+0x854>
			LCD_PutStr(100, 180, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002754:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002758:	f7fe feb6 	bl	80014c8 <RGB_to_BRG>
 800275c:	4603      	mov	r3, r0
 800275e:	461c      	mov	r4, r3
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe feb1 	bl	80014c8 <RGB_to_BRG>
 8002766:	4603      	mov	r3, r0
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9400      	str	r4, [sp, #0]
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <update_display+0x844>)
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <update_display+0x850>)
 8002770:	21b4      	movs	r1, #180	; 0xb4
 8002772:	2064      	movs	r0, #100	; 0x64
 8002774:	f003 ffe2 	bl	800673c <LCD_PutStr>
 8002778:	e046      	b.n	8002808 <update_display+0x880>
 800277a:	bf00      	nop
 800277c:	f3af 8000 	nop.w
 8002780:	00000000 	.word	0x00000000
 8002784:	4071f000 	.word	0x4071f000
 8002788:	00000000 	.word	0x00000000
 800278c:	406ce000 	.word	0x406ce000
 8002790:	00000000 	.word	0x00000000
 8002794:	4058e000 	.word	0x4058e000
 8002798:	2000001d 	.word	0x2000001d
 800279c:	200005a8 	.word	0x200005a8
 80027a0:	407f4000 	.word	0x407f4000
 80027a4:	406d0000 	.word	0x406d0000
 80027a8:	3ff00000 	.word	0x3ff00000
 80027ac:	20000490 	.word	0x20000490
 80027b0:	2000048f 	.word	0x2000048f
 80027b4:	200004b0 	.word	0x200004b0
 80027b8:	20000038 	.word	0x20000038
 80027bc:	08015e10 	.word	0x08015e10
 80027c0:	08017fd0 	.word	0x08017fd0
 80027c4:	08015e14 	.word	0x08015e14
 80027c8:	08015e1c 	.word	0x08015e1c
 80027cc:	08016010 	.word	0x08016010
 80027d0:	20000468 	.word	0x20000468
 80027d4:	08015e24 	.word	0x08015e24
 80027d8:	08015e2c 	.word	0x08015e2c
		}
		else if(handle == NT115){
 80027dc:	4ba9      	ldr	r3, [pc, #676]	; (8002a84 <update_display+0xafc>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <update_display+0x880>
			LCD_PutStr(100, 180, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80027e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027e8:	f7fe fe6e 	bl	80014c8 <RGB_to_BRG>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461c      	mov	r4, r3
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe fe69 	bl	80014c8 <RGB_to_BRG>
 80027f6:	4603      	mov	r3, r0
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	9400      	str	r4, [sp, #0]
 80027fc:	4ba2      	ldr	r3, [pc, #648]	; (8002a88 <update_display+0xb00>)
 80027fe:	4aa3      	ldr	r2, [pc, #652]	; (8002a8c <update_display+0xb04>)
 8002800:	21b4      	movs	r1, #180	; 0xb4
 8002802:	2064      	movs	r0, #100	; 0x64
 8002804:	f003 ff9a 	bl	800673c <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002808:	4ba1      	ldr	r3, [pc, #644]	; (8002a90 <update_display+0xb08>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d008      	beq.n	8002822 <update_display+0x89a>
 8002810:	4b9f      	ldr	r3, [pc, #636]	; (8002a90 <update_display+0xb08>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d004      	beq.n	8002822 <update_display+0x89a>
 8002818:	4b9d      	ldr	r3, [pc, #628]	; (8002a90 <update_display+0xb08>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b04      	cmp	r3, #4
 800281e:	f040 808c 	bne.w	800293a <update_display+0x9b2>
 8002822:	4b9c      	ldr	r3, [pc, #624]	; (8002a94 <update_display+0xb0c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8087 	bne.w	800293a <update_display+0x9b2>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 800282c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002830:	f7fe fe4a 	bl	80014c8 <RGB_to_BRG>
 8002834:	4603      	mov	r3, r0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	23e2      	movs	r3, #226	; 0xe2
 800283a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800283e:	2105      	movs	r1, #5
 8002840:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002844:	f00c ff5c 	bl	800f700 <UG_FillFrame>

			LCD_PutStr(294, 3,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fe3d 	bl	80014c8 <RGB_to_BRG>
 800284e:	4603      	mov	r3, r0
 8002850:	461c      	mov	r4, r3
 8002852:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002856:	f7fe fe37 	bl	80014c8 <RGB_to_BRG>
 800285a:	4603      	mov	r3, r0
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	9400      	str	r4, [sp, #0]
 8002860:	4b8d      	ldr	r3, [pc, #564]	; (8002a98 <update_display+0xb10>)
 8002862:	4a8e      	ldr	r2, [pc, #568]	; (8002a9c <update_display+0xb14>)
 8002864:	2103      	movs	r1, #3
 8002866:	f44f 7093 	mov.w	r0, #294	; 0x126
 800286a:	f003 ff67 	bl	800673c <LCD_PutStr>
			LCD_PutStr(296, 38, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe fe2a 	bl	80014c8 <RGB_to_BRG>
 8002874:	4603      	mov	r3, r0
 8002876:	461c      	mov	r4, r3
 8002878:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800287c:	f7fe fe24 	bl	80014c8 <RGB_to_BRG>
 8002880:	4603      	mov	r3, r0
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	9400      	str	r4, [sp, #0]
 8002886:	4b84      	ldr	r3, [pc, #528]	; (8002a98 <update_display+0xb10>)
 8002888:	4a85      	ldr	r2, [pc, #532]	; (8002aa0 <update_display+0xb18>)
 800288a:	2126      	movs	r1, #38	; 0x26
 800288c:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002890:	f003 ff54 	bl	800673c <LCD_PutStr>
			LCD_PutStr(294, 73, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe fe17 	bl	80014c8 <RGB_to_BRG>
 800289a:	4603      	mov	r3, r0
 800289c:	461c      	mov	r4, r3
 800289e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028a2:	f7fe fe11 	bl	80014c8 <RGB_to_BRG>
 80028a6:	4603      	mov	r3, r0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	9400      	str	r4, [sp, #0]
 80028ac:	4b7a      	ldr	r3, [pc, #488]	; (8002a98 <update_display+0xb10>)
 80028ae:	4a7b      	ldr	r2, [pc, #492]	; (8002a9c <update_display+0xb14>)
 80028b0:	2149      	movs	r1, #73	; 0x49
 80028b2:	f44f 7093 	mov.w	r0, #294	; 0x126
 80028b6:	f003 ff41 	bl	800673c <LCD_PutStr>
			LCD_PutStr(296, 108, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe fe04 	bl	80014c8 <RGB_to_BRG>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461c      	mov	r4, r3
 80028c4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028c8:	f7fe fdfe 	bl	80014c8 <RGB_to_BRG>
 80028cc:	4603      	mov	r3, r0
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	9400      	str	r4, [sp, #0]
 80028d2:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <update_display+0xb10>)
 80028d4:	4a72      	ldr	r2, [pc, #456]	; (8002aa0 <update_display+0xb18>)
 80028d6:	216c      	movs	r1, #108	; 0x6c
 80028d8:	f44f 7094 	mov.w	r0, #296	; 0x128
 80028dc:	f003 ff2e 	bl	800673c <LCD_PutStr>
			LCD_PutStr(294, 143, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe fdf1 	bl	80014c8 <RGB_to_BRG>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461c      	mov	r4, r3
 80028ea:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028ee:	f7fe fdeb 	bl	80014c8 <RGB_to_BRG>
 80028f2:	4603      	mov	r3, r0
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	9400      	str	r4, [sp, #0]
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <update_display+0xb10>)
 80028fa:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <update_display+0xb14>)
 80028fc:	218f      	movs	r1, #143	; 0x8f
 80028fe:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002902:	f003 ff1b 	bl	800673c <LCD_PutStr>
			LCD_PutStr(296, 178, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fdde 	bl	80014c8 <RGB_to_BRG>
 800290c:	4603      	mov	r3, r0
 800290e:	461c      	mov	r4, r3
 8002910:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002914:	f7fe fdd8 	bl	80014c8 <RGB_to_BRG>
 8002918:	4603      	mov	r3, r0
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	9400      	str	r4, [sp, #0]
 800291e:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <update_display+0xb10>)
 8002920:	4a5f      	ldr	r2, [pc, #380]	; (8002aa0 <update_display+0xb18>)
 8002922:	21b2      	movs	r1, #178	; 0xb2
 8002924:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002928:	f003 ff08 	bl	800673c <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <update_display+0xb0c>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <update_display+0xb1c>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e134      	b.n	8002ba4 <update_display+0xc1c>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800293a:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <update_display+0xb08>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	f040 80c0 	bne.w	8002ac4 <update_display+0xb3c>
 8002944:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <update_display+0xb1c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 80bb 	bne.w	8002ac4 <update_display+0xb3c>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 800294e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002952:	f7fe fdb9 	bl	80014c8 <RGB_to_BRG>
 8002956:	4603      	mov	r3, r0
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	23e2      	movs	r3, #226	; 0xe2
 800295c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002960:	2105      	movs	r1, #5
 8002962:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002966:	f00c fecb 	bl	800f700 <UG_FillFrame>
			LCD_PutStr(294, 3,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe fdac 	bl	80014c8 <RGB_to_BRG>
 8002970:	4603      	mov	r3, r0
 8002972:	461c      	mov	r4, r3
 8002974:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002978:	f7fe fda6 	bl	80014c8 <RGB_to_BRG>
 800297c:	4603      	mov	r3, r0
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	9400      	str	r4, [sp, #0]
 8002982:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <update_display+0xb10>)
 8002984:	4a48      	ldr	r2, [pc, #288]	; (8002aa8 <update_display+0xb20>)
 8002986:	2103      	movs	r1, #3
 8002988:	f44f 7093 	mov.w	r0, #294	; 0x126
 800298c:	f003 fed6 	bl	800673c <LCD_PutStr>
			LCD_PutStr(294, 32,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe fd99 	bl	80014c8 <RGB_to_BRG>
 8002996:	4603      	mov	r3, r0
 8002998:	461c      	mov	r4, r3
 800299a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800299e:	f7fe fd93 	bl	80014c8 <RGB_to_BRG>
 80029a2:	4603      	mov	r3, r0
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	9400      	str	r4, [sp, #0]
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <update_display+0xb10>)
 80029aa:	4a40      	ldr	r2, [pc, #256]	; (8002aac <update_display+0xb24>)
 80029ac:	2120      	movs	r1, #32
 80029ae:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029b2:	f003 fec3 	bl	800673c <LCD_PutStr>
			LCD_PutStr(294, 61, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe fd86 	bl	80014c8 <RGB_to_BRG>
 80029bc:	4603      	mov	r3, r0
 80029be:	461c      	mov	r4, r3
 80029c0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029c4:	f7fe fd80 	bl	80014c8 <RGB_to_BRG>
 80029c8:	4603      	mov	r3, r0
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	9400      	str	r4, [sp, #0]
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <update_display+0xb10>)
 80029d0:	4a37      	ldr	r2, [pc, #220]	; (8002ab0 <update_display+0xb28>)
 80029d2:	213d      	movs	r1, #61	; 0x3d
 80029d4:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029d8:	f003 feb0 	bl	800673c <LCD_PutStr>
			LCD_PutStr(294, 90, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fe fd73 	bl	80014c8 <RGB_to_BRG>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461c      	mov	r4, r3
 80029e6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029ea:	f7fe fd6d 	bl	80014c8 <RGB_to_BRG>
 80029ee:	4603      	mov	r3, r0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	9400      	str	r4, [sp, #0]
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <update_display+0xb10>)
 80029f6:	4a2f      	ldr	r2, [pc, #188]	; (8002ab4 <update_display+0xb2c>)
 80029f8:	215a      	movs	r1, #90	; 0x5a
 80029fa:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029fe:	f003 fe9d 	bl	800673c <LCD_PutStr>
			LCD_PutStr(294, 119, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe fd60 	bl	80014c8 <RGB_to_BRG>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461c      	mov	r4, r3
 8002a0c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a10:	f7fe fd5a 	bl	80014c8 <RGB_to_BRG>
 8002a14:	4603      	mov	r3, r0
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	9400      	str	r4, [sp, #0]
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <update_display+0xb10>)
 8002a1c:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <update_display+0xb30>)
 8002a1e:	2177      	movs	r1, #119	; 0x77
 8002a20:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a24:	f003 fe8a 	bl	800673c <LCD_PutStr>
			LCD_PutStr(294, 148, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe fd4d 	bl	80014c8 <RGB_to_BRG>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	461c      	mov	r4, r3
 8002a32:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a36:	f7fe fd47 	bl	80014c8 <RGB_to_BRG>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	9400      	str	r4, [sp, #0]
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <update_display+0xb10>)
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <update_display+0xb34>)
 8002a44:	2194      	movs	r1, #148	; 0x94
 8002a46:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a4a:	f003 fe77 	bl	800673c <LCD_PutStr>
			LCD_PutStr(294, 177, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fe fd3a 	bl	80014c8 <RGB_to_BRG>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461c      	mov	r4, r3
 8002a58:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a5c:	f7fe fd34 	bl	80014c8 <RGB_to_BRG>
 8002a60:	4603      	mov	r3, r0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	9400      	str	r4, [sp, #0]
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <update_display+0xb10>)
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <update_display+0xb38>)
 8002a6a:	21b1      	movs	r1, #177	; 0xb1
 8002a6c:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a70:	f003 fe64 	bl	800673c <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <update_display+0xb1c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <update_display+0xb0c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e090      	b.n	8002ba4 <update_display+0xc1c>
 8002a82:	bf00      	nop
 8002a84:	20000468 	.word	0x20000468
 8002a88:	08016010 	.word	0x08016010
 8002a8c:	08015e34 	.word	0x08015e34
 8002a90:	2000001d 	.word	0x2000001d
 8002a94:	2000048f 	.word	0x2000048f
 8002a98:	08016fe0 	.word	0x08016fe0
 8002a9c:	08015e3c 	.word	0x08015e3c
 8002aa0:	08015e40 	.word	0x08015e40
 8002aa4:	20000490 	.word	0x20000490
 8002aa8:	08015e44 	.word	0x08015e44
 8002aac:	08015e48 	.word	0x08015e48
 8002ab0:	08015e4c 	.word	0x08015e4c
 8002ab4:	08015e50 	.word	0x08015e50
 8002ab8:	08015e54 	.word	0x08015e54
 8002abc:	08015e58 	.word	0x08015e58
 8002ac0:	08015e5c 	.word	0x08015e5c
		}
		else if(active_state == RUN){
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <update_display+0xc38>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d16b      	bne.n	8002ba4 <update_display+0xc1c>
			UG_FillFrame(290, 226-(PID_output/PID_MAX_OUTPUT)*221, 	310, 	226, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002acc:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <update_display+0xc3c>)
 8002ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <update_display+0xc40>)
 8002ad8:	f7fd fee0 	bl	800089c <__aeabi_ddiv>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	a332      	add	r3, pc, #200	; (adr r3, 8002bb0 <update_display+0xc28>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fdad 	bl	8000648 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	4935      	ldr	r1, [pc, #212]	; (8002bcc <update_display+0xc44>)
 8002af8:	f7fd fbee 	bl	80002d8 <__aeabi_dsub>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7fe f850 	bl	8000ba8 <__aeabi_d2iz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b21c      	sxth	r4, r3
 8002b0c:	f248 607e 	movw	r0, #34430	; 0x867e
 8002b10:	f7fe fcda 	bl	80014c8 <RGB_to_BRG>
 8002b14:	4603      	mov	r3, r0
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	23e2      	movs	r3, #226	; 0xe2
 8002b1a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002b1e:	4621      	mov	r1, r4
 8002b20:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002b24:	f00c fdec 	bl	800f700 <UG_FillFrame>
			UG_FillFrame(290, 5, 									310, 	226-(PID_output/PID_MAX_OUTPUT)*211-1, RGB_to_BRG(C_BLACK));
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <update_display+0xc3c>)
 8002b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <update_display+0xc40>)
 8002b34:	f7fd feb2 	bl	800089c <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	a31d      	add	r3, pc, #116	; (adr r3, 8002bb8 <update_display+0xc30>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fd7f 	bl	8000648 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	491e      	ldr	r1, [pc, #120]	; (8002bcc <update_display+0xc44>)
 8002b54:	f7fd fbc0 	bl	80002d8 <__aeabi_dsub>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <update_display+0xc48>)
 8002b66:	f7fd fbb7 	bl	80002d8 <__aeabi_dsub>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f7fe f819 	bl	8000ba8 <__aeabi_d2iz>
 8002b76:	4603      	mov	r3, r0
 8002b78:	b21c      	sxth	r4, r3
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe fca4 	bl	80014c8 <RGB_to_BRG>
 8002b80:	4603      	mov	r3, r0
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4623      	mov	r3, r4
 8002b86:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002b8a:	2105      	movs	r1, #5
 8002b8c:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002b90:	f00c fdb6 	bl	800f700 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <update_display+0xc4c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <update_display+0xc50>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002ba0:	e000      	b.n	8002ba4 <update_display+0xc1c>
		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002ba2:	bf00      	nop
}
 8002ba4:	bf00      	nop
 8002ba6:	3704      	adds	r7, #4
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	f3af 8000 	nop.w
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	406ba000 	.word	0x406ba000
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	406a6000 	.word	0x406a6000
 8002bc0:	2000001d 	.word	0x2000001d
 8002bc4:	200005a8 	.word	0x200005a8
 8002bc8:	407f4000 	.word	0x407f4000
 8002bcc:	406c4000 	.word	0x406c4000
 8002bd0:	3ff00000 	.word	0x3ff00000
 8002bd4:	20000490 	.word	0x20000490
 8002bd8:	2000048f 	.word	0x2000048f

08002bdc <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002be2:	4bd8      	ldr	r3, [pc, #864]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002be4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	f7fd ff92 	bl	8000b18 <__aeabi_dcmpeq>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <LCD_draw_main_screen+0x38>
 8002bfa:	4bd2      	ldr	r3, [pc, #840]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002bfc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c08:	f7fd ff86 	bl	8000b18 <__aeabi_dcmpeq>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 81b6 	beq.w	8002f80 <LCD_draw_main_screen+0x3a4>
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe fc57 	bl	80014c8 <RGB_to_BRG>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00c fd4b 	bl	800f6b8 <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002c22:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c26:	f7fe fc4f 	bl	80014c8 <RGB_to_BRG>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461c      	mov	r4, r3
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe fc4a 	bl	80014c8 <RGB_to_BRG>
 8002c34:	4603      	mov	r3, r0
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	9400      	str	r4, [sp, #0]
 8002c3a:	4bc3      	ldr	r3, [pc, #780]	; (8002f48 <LCD_draw_main_screen+0x36c>)
 8002c3c:	4ac3      	ldr	r2, [pc, #780]	; (8002f4c <LCD_draw_main_screen+0x370>)
 8002c3e:	210c      	movs	r1, #12
 8002c40:	2035      	movs	r0, #53	; 0x35
 8002c42:	f003 fd7b 	bl	800673c <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8002c46:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c4a:	f7fe fc3d 	bl	80014c8 <RGB_to_BRG>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2328      	movs	r3, #40	; 0x28
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	2128      	movs	r1, #40	; 0x28
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f003 fd31 	bl	80066c0 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002c5e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c62:	f7fe fc31 	bl	80014c8 <RGB_to_BRG>
 8002c66:	4603      	mov	r3, r0
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2329      	movs	r3, #41	; 0x29
 8002c6c:	22f0      	movs	r2, #240	; 0xf0
 8002c6e:	2129      	movs	r1, #41	; 0x29
 8002c70:	2000      	movs	r0, #0
 8002c72:	f003 fd25 	bl	80066c0 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002c76:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c7a:	f7fe fc25 	bl	80014c8 <RGB_to_BRG>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	232a      	movs	r3, #42	; 0x2a
 8002c84:	22f0      	movs	r2, #240	; 0xf0
 8002c86:	212a      	movs	r1, #42	; 0x2a
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f003 fd19 	bl	80066c0 <LCD_DrawLine>


		LCD_PutStr(14, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002c8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c92:	f7fe fc19 	bl	80014c8 <RGB_to_BRG>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461c      	mov	r4, r3
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fc14 	bl	80014c8 <RGB_to_BRG>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	9400      	str	r4, [sp, #0]
 8002ca6:	4baa      	ldr	r3, [pc, #680]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002ca8:	4aaa      	ldr	r2, [pc, #680]	; (8002f54 <LCD_draw_main_screen+0x378>)
 8002caa:	2132      	movs	r1, #50	; 0x32
 8002cac:	200e      	movs	r0, #14
 8002cae:	f003 fd45 	bl	800673c <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002cb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cb6:	f7fe fc07 	bl	80014c8 <RGB_to_BRG>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	2155      	movs	r1, #85	; 0x55
 8002cc0:	2078      	movs	r0, #120	; 0x78
 8002cc2:	f00c fdd7 	bl	800f874 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 8002cc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cca:	f7fe fbfd 	bl	80014c8 <RGB_to_BRG>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	2155      	movs	r1, #85	; 0x55
 8002cd4:	2078      	movs	r0, #120	; 0x78
 8002cd6:	f00c fdcd 	bl	800f874 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002cda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cde:	f7fe fbf3 	bl	80014c8 <RGB_to_BRG>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	2155      	movs	r1, #85	; 0x55
 8002ce8:	2078      	movs	r0, #120	; 0x78
 8002cea:	f00c fdc3 	bl	800f874 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002cee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cf2:	f7fe fbe9 	bl	80014c8 <RGB_to_BRG>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461c      	mov	r4, r3
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fe fbe4 	bl	80014c8 <RGB_to_BRG>
 8002d00:	4603      	mov	r3, r0
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	9400      	str	r4, [sp, #0]
 8002d06:	4b94      	ldr	r3, [pc, #592]	; (8002f58 <LCD_draw_main_screen+0x37c>)
 8002d08:	4a94      	ldr	r2, [pc, #592]	; (8002f5c <LCD_draw_main_screen+0x380>)
 8002d0a:	214b      	movs	r1, #75	; 0x4b
 8002d0c:	2082      	movs	r0, #130	; 0x82
 8002d0e:	f003 fd15 	bl	800673c <LCD_PutStr>


		LCD_PutStr(14, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d16:	f7fe fbd7 	bl	80014c8 <RGB_to_BRG>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461c      	mov	r4, r3
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fe fbd2 	bl	80014c8 <RGB_to_BRG>
 8002d24:	4603      	mov	r3, r0
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	9400      	str	r4, [sp, #0]
 8002d2a:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002d2c:	4a8c      	ldr	r2, [pc, #560]	; (8002f60 <LCD_draw_main_screen+0x384>)
 8002d2e:	218c      	movs	r1, #140	; 0x8c
 8002d30:	200e      	movs	r0, #14
 8002d32:	f003 fd03 	bl	800673c <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 8002d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d3a:	f7fe fbc5 	bl	80014c8 <RGB_to_BRG>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2205      	movs	r2, #5
 8002d42:	21af      	movs	r1, #175	; 0xaf
 8002d44:	2078      	movs	r0, #120	; 0x78
 8002d46:	f00c fd95 	bl	800f874 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 8002d4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d4e:	f7fe fbbb 	bl	80014c8 <RGB_to_BRG>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2204      	movs	r2, #4
 8002d56:	21af      	movs	r1, #175	; 0xaf
 8002d58:	2078      	movs	r0, #120	; 0x78
 8002d5a:	f00c fd8b 	bl	800f874 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 8002d5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d62:	f7fe fbb1 	bl	80014c8 <RGB_to_BRG>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2203      	movs	r2, #3
 8002d6a:	21af      	movs	r1, #175	; 0xaf
 8002d6c:	2078      	movs	r0, #120	; 0x78
 8002d6e:	f00c fd81 	bl	800f874 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d76:	f7fe fba7 	bl	80014c8 <RGB_to_BRG>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461c      	mov	r4, r3
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fe fba2 	bl	80014c8 <RGB_to_BRG>
 8002d84:	4603      	mov	r3, r0
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	9400      	str	r4, [sp, #0]
 8002d8a:	4b73      	ldr	r3, [pc, #460]	; (8002f58 <LCD_draw_main_screen+0x37c>)
 8002d8c:	4a73      	ldr	r2, [pc, #460]	; (8002f5c <LCD_draw_main_screen+0x380>)
 8002d8e:	21a5      	movs	r1, #165	; 0xa5
 8002d90:	2082      	movs	r0, #130	; 0x82
 8002d92:	f003 fcd3 	bl	800673c <LCD_PutStr>

		UG_DrawFrame(6, 134, 182, 220, RGB_to_BRG(C_WHITE));
 8002d96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d9a:	f7fe fb95 	bl	80014c8 <RGB_to_BRG>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	23dc      	movs	r3, #220	; 0xdc
 8002da4:	22b6      	movs	r2, #182	; 0xb6
 8002da6:	2186      	movs	r1, #134	; 0x86
 8002da8:	2006      	movs	r0, #6
 8002daa:	f00c fd1b 	bl	800f7e4 <UG_DrawFrame>
		UG_DrawFrame(5, 133, 183, 221, RGB_to_BRG(C_WHITE));
 8002dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002db2:	f7fe fb89 	bl	80014c8 <RGB_to_BRG>
 8002db6:	4603      	mov	r3, r0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	23dd      	movs	r3, #221	; 0xdd
 8002dbc:	22b7      	movs	r2, #183	; 0xb7
 8002dbe:	2185      	movs	r1, #133	; 0x85
 8002dc0:	2005      	movs	r0, #5
 8002dc2:	f00c fd0f 	bl	800f7e4 <UG_DrawFrame>

		LCD_PutStr(6, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002dc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dca:	f7fe fb7d 	bl	80014c8 <RGB_to_BRG>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461c      	mov	r4, r3
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fe fb78 	bl	80014c8 <RGB_to_BRG>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	9400      	str	r4, [sp, #0]
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <LCD_draw_main_screen+0x388>)
 8002de0:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <LCD_draw_main_screen+0x38c>)
 8002de2:	21eb      	movs	r1, #235	; 0xeb
 8002de4:	2006      	movs	r0, #6
 8002de6:	f003 fca9 	bl	800673c <LCD_PutStr>
		LCD_PutStr(6, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002dea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dee:	f7fe fb6b 	bl	80014c8 <RGB_to_BRG>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461c      	mov	r4, r3
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fe fb66 	bl	80014c8 <RGB_to_BRG>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	9400      	str	r4, [sp, #0]
 8002e02:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <LCD_draw_main_screen+0x388>)
 8002e04:	4a59      	ldr	r2, [pc, #356]	; (8002f6c <LCD_draw_main_screen+0x390>)
 8002e06:	21ff      	movs	r1, #255	; 0xff
 8002e08:	2006      	movs	r0, #6
 8002e0a:	f003 fc97 	bl	800673c <LCD_PutStr>
		LCD_PutStr(6, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002e0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e12:	f7fe fb59 	bl	80014c8 <RGB_to_BRG>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461c      	mov	r4, r3
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fe fb54 	bl	80014c8 <RGB_to_BRG>
 8002e20:	4603      	mov	r3, r0
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	9400      	str	r4, [sp, #0]
 8002e26:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <LCD_draw_main_screen+0x388>)
 8002e28:	4a51      	ldr	r2, [pc, #324]	; (8002f70 <LCD_draw_main_screen+0x394>)
 8002e2a:	f240 1113 	movw	r1, #275	; 0x113
 8002e2e:	2006      	movs	r0, #6
 8002e30:	f003 fc84 	bl	800673c <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002e34:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e38:	f7fe fb46 	bl	80014c8 <RGB_to_BRG>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002e44:	22f0      	movs	r2, #240	; 0xf0
 8002e46:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f00c fdf8 	bl	800fa40 <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002e50:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e54:	f7fe fb38 	bl	80014c8 <RGB_to_BRG>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f240 1329 	movw	r3, #297	; 0x129
 8002e60:	22f0      	movs	r2, #240	; 0xf0
 8002e62:	f240 1129 	movw	r1, #297	; 0x129
 8002e66:	2002      	movs	r0, #2
 8002e68:	f00c fdea 	bl	800fa40 <UG_DrawLine>


		LCD_PutStr(6, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002e6c:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e70:	f7fe fb2a 	bl	80014c8 <RGB_to_BRG>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461c      	mov	r4, r3
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fb25 	bl	80014c8 <RGB_to_BRG>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	9400      	str	r4, [sp, #0]
 8002e84:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <LCD_draw_main_screen+0x398>)
 8002e88:	f240 112d 	movw	r1, #301	; 0x12d
 8002e8c:	2006      	movs	r0, #6
 8002e8e:	f003 fc55 	bl	800673c <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002e92:	2228      	movs	r2, #40	; 0x28
 8002e94:	2100      	movs	r1, #0
 8002e96:	4838      	ldr	r0, [pc, #224]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002e98:	f00f f9d9 	bl	801224e <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002e9e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ea2:	4936      	ldr	r1, [pc, #216]	; (8002f7c <LCD_draw_main_screen+0x3a0>)
 8002ea4:	4834      	ldr	r0, [pc, #208]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ea6:	f00f f96f 	bl	8012188 <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002eaa:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002eae:	f7fe fb0b 	bl	80014c8 <RGB_to_BRG>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461c      	mov	r4, r3
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fe fb06 	bl	80014c8 <RGB_to_BRG>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	9400      	str	r4, [sp, #0]
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002ec4:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ec6:	f240 112d 	movw	r1, #301	; 0x12d
 8002eca:	2082      	movs	r0, #130	; 0x82
 8002ecc:	f003 fc36 	bl	800673c <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002ed0:	2228      	movs	r2, #40	; 0x28
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4828      	ldr	r0, [pc, #160]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ed6:	f00f f9ba 	bl	801224e <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002edc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ee0:	4926      	ldr	r1, [pc, #152]	; (8002f7c <LCD_draw_main_screen+0x3a0>)
 8002ee2:	4825      	ldr	r0, [pc, #148]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ee4:	f00f f950 	bl	8012188 <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002ee8:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002eec:	f7fe faec 	bl	80014c8 <RGB_to_BRG>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461c      	mov	r4, r3
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fe fae7 	bl	80014c8 <RGB_to_BRG>
 8002efa:	4603      	mov	r3, r0
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	9400      	str	r4, [sp, #0]
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002f04:	f240 112d 	movw	r1, #301	; 0x12d
 8002f08:	20be      	movs	r0, #190	; 0xbe
 8002f0a:	f003 fc17 	bl	800673c <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 8002f0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f12:	f7fe fad9 	bl	80014c8 <RGB_to_BRG>
 8002f16:	4603      	mov	r3, r0
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	f240 1321 	movw	r3, #289	; 0x121
 8002f1e:	22e8      	movs	r2, #232	; 0xe8
 8002f20:	2135      	movs	r1, #53	; 0x35
 8002f22:	20d0      	movs	r0, #208	; 0xd0
 8002f24:	f00c fc5e 	bl	800f7e4 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 8002f28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f2c:	f7fe facc 	bl	80014c8 <RGB_to_BRG>
 8002f30:	4603      	mov	r3, r0
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002f38:	22e7      	movs	r2, #231	; 0xe7
 8002f3a:	2136      	movs	r1, #54	; 0x36
 8002f3c:	20d1      	movs	r0, #209	; 0xd1
 8002f3e:	f00c fc51 	bl	800f7e4 <UG_DrawFrame>
 8002f42:	e113      	b.n	800316c <LCD_draw_main_screen+0x590>
 8002f44:	20000558 	.word	0x20000558
 8002f48:	08016dac 	.word	0x08016dac
 8002f4c:	08015e60 	.word	0x08015e60
 8002f50:	08016fe0 	.word	0x08016fe0
 8002f54:	08015e6c 	.word	0x08015e6c
 8002f58:	08017ef0 	.word	0x08017ef0
 8002f5c:	08015e78 	.word	0x08015e78
 8002f60:	08015e7c 	.word	0x08015e7c
 8002f64:	08016010 	.word	0x08016010
 8002f68:	08015e88 	.word	0x08015e88
 8002f6c:	08015e98 	.word	0x08015e98
 8002f70:	08015eb4 	.word	0x08015eb4
 8002f74:	08015ed4 	.word	0x08015ed4
 8002f78:	200004b0 	.word	0x200004b0
 8002f7c:	08015e00 	.word	0x08015e00
	}
	else{
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe faa1 	bl	80014c8 <RGB_to_BRG>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f00c fb95 	bl	800f6b8 <UG_FillScreen>

		LCD_PutStr(14, 5, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002f8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f92:	f7fe fa99 	bl	80014c8 <RGB_to_BRG>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461c      	mov	r4, r3
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7fe fa94 	bl	80014c8 <RGB_to_BRG>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	9400      	str	r4, [sp, #0]
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <LCD_draw_main_screen+0x598>)
 8002fa8:	4a73      	ldr	r2, [pc, #460]	; (8003178 <LCD_draw_main_screen+0x59c>)
 8002faa:	2105      	movs	r1, #5
 8002fac:	200e      	movs	r0, #14
 8002fae:	f003 fbc5 	bl	800673c <LCD_PutStr>
		UG_DrawCircle(120, 40, 5, RGB_to_BRG(C_WHITE));
 8002fb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fb6:	f7fe fa87 	bl	80014c8 <RGB_to_BRG>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2205      	movs	r2, #5
 8002fbe:	2128      	movs	r1, #40	; 0x28
 8002fc0:	2078      	movs	r0, #120	; 0x78
 8002fc2:	f00c fc57 	bl	800f874 <UG_DrawCircle>
		UG_DrawCircle(120, 40, 4, RGB_to_BRG(C_WHITE));
 8002fc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fca:	f7fe fa7d 	bl	80014c8 <RGB_to_BRG>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	2128      	movs	r1, #40	; 0x28
 8002fd4:	2078      	movs	r0, #120	; 0x78
 8002fd6:	f00c fc4d 	bl	800f874 <UG_DrawCircle>
		UG_DrawCircle(120, 40, 3, RGB_to_BRG(C_WHITE));
 8002fda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fde:	f7fe fa73 	bl	80014c8 <RGB_to_BRG>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	2128      	movs	r1, #40	; 0x28
 8002fe8:	2078      	movs	r0, #120	; 0x78
 8002fea:	f00c fc43 	bl	800f874 <UG_DrawCircle>
		LCD_PutStr(130, 30, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002fee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ff2:	f7fe fa69 	bl	80014c8 <RGB_to_BRG>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7fe fa64 	bl	80014c8 <RGB_to_BRG>
 8003000:	4603      	mov	r3, r0
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	9400      	str	r4, [sp, #0]
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <LCD_draw_main_screen+0x5a0>)
 8003008:	4a5d      	ldr	r2, [pc, #372]	; (8003180 <LCD_draw_main_screen+0x5a4>)
 800300a:	211e      	movs	r1, #30
 800300c:	2082      	movs	r0, #130	; 0x82
 800300e:	f003 fb95 	bl	800673c <LCD_PutStr>


		LCD_PutStr(14, 95, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003012:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003016:	f7fe fa57 	bl	80014c8 <RGB_to_BRG>
 800301a:	4603      	mov	r3, r0
 800301c:	461c      	mov	r4, r3
 800301e:	2000      	movs	r0, #0
 8003020:	f7fe fa52 	bl	80014c8 <RGB_to_BRG>
 8003024:	4603      	mov	r3, r0
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	9400      	str	r4, [sp, #0]
 800302a:	4b52      	ldr	r3, [pc, #328]	; (8003174 <LCD_draw_main_screen+0x598>)
 800302c:	4a55      	ldr	r2, [pc, #340]	; (8003184 <LCD_draw_main_screen+0x5a8>)
 800302e:	215f      	movs	r1, #95	; 0x5f
 8003030:	200e      	movs	r0, #14
 8003032:	f003 fb83 	bl	800673c <LCD_PutStr>
		UG_DrawCircle(120, 130, 5, RGB_to_BRG(C_WHITE));
 8003036:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800303a:	f7fe fa45 	bl	80014c8 <RGB_to_BRG>
 800303e:	4603      	mov	r3, r0
 8003040:	2205      	movs	r2, #5
 8003042:	2182      	movs	r1, #130	; 0x82
 8003044:	2078      	movs	r0, #120	; 0x78
 8003046:	f00c fc15 	bl	800f874 <UG_DrawCircle>
		UG_DrawCircle(120, 130, 4, RGB_to_BRG(C_WHITE));
 800304a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800304e:	f7fe fa3b 	bl	80014c8 <RGB_to_BRG>
 8003052:	4603      	mov	r3, r0
 8003054:	2204      	movs	r2, #4
 8003056:	2182      	movs	r1, #130	; 0x82
 8003058:	2078      	movs	r0, #120	; 0x78
 800305a:	f00c fc0b 	bl	800f874 <UG_DrawCircle>
		UG_DrawCircle(120, 130, 3, RGB_to_BRG(C_WHITE));
 800305e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003062:	f7fe fa31 	bl	80014c8 <RGB_to_BRG>
 8003066:	4603      	mov	r3, r0
 8003068:	2203      	movs	r2, #3
 800306a:	2182      	movs	r1, #130	; 0x82
 800306c:	2078      	movs	r0, #120	; 0x78
 800306e:	f00c fc01 	bl	800f874 <UG_DrawCircle>
		LCD_PutStr(130, 120, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003072:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003076:	f7fe fa27 	bl	80014c8 <RGB_to_BRG>
 800307a:	4603      	mov	r3, r0
 800307c:	461c      	mov	r4, r3
 800307e:	2000      	movs	r0, #0
 8003080:	f7fe fa22 	bl	80014c8 <RGB_to_BRG>
 8003084:	4603      	mov	r3, r0
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	9400      	str	r4, [sp, #0]
 800308a:	4b3c      	ldr	r3, [pc, #240]	; (800317c <LCD_draw_main_screen+0x5a0>)
 800308c:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <LCD_draw_main_screen+0x5a4>)
 800308e:	2178      	movs	r1, #120	; 0x78
 8003090:	2082      	movs	r0, #130	; 0x82
 8003092:	f003 fb53 	bl	800673c <LCD_PutStr>

		UG_DrawFrame(6, 89, 182,175, RGB_to_BRG(C_WHITE));
 8003096:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800309a:	f7fe fa15 	bl	80014c8 <RGB_to_BRG>
 800309e:	4603      	mov	r3, r0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	23af      	movs	r3, #175	; 0xaf
 80030a4:	22b6      	movs	r2, #182	; 0xb6
 80030a6:	2159      	movs	r1, #89	; 0x59
 80030a8:	2006      	movs	r0, #6
 80030aa:	f00c fb9b 	bl	800f7e4 <UG_DrawFrame>
		UG_DrawFrame(5, 88, 183, 176, RGB_to_BRG(C_WHITE));
 80030ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030b2:	f7fe fa09 	bl	80014c8 <RGB_to_BRG>
 80030b6:	4603      	mov	r3, r0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	23b0      	movs	r3, #176	; 0xb0
 80030bc:	22b7      	movs	r2, #183	; 0xb7
 80030be:	2158      	movs	r1, #88	; 0x58
 80030c0:	2005      	movs	r0, #5
 80030c2:	f00c fb8f 	bl	800f7e4 <UG_DrawFrame>

		LCD_PutStr(6, 180, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80030c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030ca:	f7fe f9fd 	bl	80014c8 <RGB_to_BRG>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461c      	mov	r4, r3
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fe f9f8 	bl	80014c8 <RGB_to_BRG>
 80030d8:	4603      	mov	r3, r0
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	9400      	str	r4, [sp, #0]
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <LCD_draw_main_screen+0x5ac>)
 80030e0:	4a2a      	ldr	r2, [pc, #168]	; (800318c <LCD_draw_main_screen+0x5b0>)
 80030e2:	21b4      	movs	r1, #180	; 0xb4
 80030e4:	2006      	movs	r0, #6
 80030e6:	f003 fb29 	bl	800673c <LCD_PutStr>
		LCD_PutStr(6, 195, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80030ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030ee:	f7fe f9eb 	bl	80014c8 <RGB_to_BRG>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461c      	mov	r4, r3
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fe f9e6 	bl	80014c8 <RGB_to_BRG>
 80030fc:	4603      	mov	r3, r0
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	9400      	str	r4, [sp, #0]
 8003102:	4b21      	ldr	r3, [pc, #132]	; (8003188 <LCD_draw_main_screen+0x5ac>)
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <LCD_draw_main_screen+0x5b4>)
 8003106:	21c3      	movs	r1, #195	; 0xc3
 8003108:	2006      	movs	r0, #6
 800310a:	f003 fb17 	bl	800673c <LCD_PutStr>
		LCD_PutStr(6, 210, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800310e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003112:	f7fe f9d9 	bl	80014c8 <RGB_to_BRG>
 8003116:	4603      	mov	r3, r0
 8003118:	461c      	mov	r4, r3
 800311a:	2000      	movs	r0, #0
 800311c:	f7fe f9d4 	bl	80014c8 <RGB_to_BRG>
 8003120:	4603      	mov	r3, r0
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	9400      	str	r4, [sp, #0]
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <LCD_draw_main_screen+0x5ac>)
 8003128:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <LCD_draw_main_screen+0x5b8>)
 800312a:	21d2      	movs	r1, #210	; 0xd2
 800312c:	2006      	movs	r0, #6
 800312e:	f003 fb05 	bl	800673c <LCD_PutStr>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
		memset(&buffer, '\0', sizeof(buffer));
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
		LCD_PutStr(190, 271, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
		 */
		UG_DrawFrame(288, 3, 312, 228, RGB_to_BRG(C_WHITE));
 8003132:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003136:	f7fe f9c7 	bl	80014c8 <RGB_to_BRG>
 800313a:	4603      	mov	r3, r0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	23e4      	movs	r3, #228	; 0xe4
 8003140:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003144:	2103      	movs	r1, #3
 8003146:	f44f 7090 	mov.w	r0, #288	; 0x120
 800314a:	f00c fb4b 	bl	800f7e4 <UG_DrawFrame>
		UG_DrawFrame(289, 4, 311, 227, RGB_to_BRG(C_WHITE));
 800314e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003152:	f7fe f9b9 	bl	80014c8 <RGB_to_BRG>
 8003156:	4603      	mov	r3, r0
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	23e3      	movs	r3, #227	; 0xe3
 800315c:	f240 1237 	movw	r2, #311	; 0x137
 8003160:	2104      	movs	r1, #4
 8003162:	f240 1021 	movw	r0, #289	; 0x121
 8003166:	f00c fb3d 	bl	800f7e4 <UG_DrawFrame>

	}
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	3704      	adds	r7, #4
 8003170:	46bd      	mov	sp, r7
 8003172:	bd90      	pop	{r4, r7, pc}
 8003174:	08016fe0 	.word	0x08016fe0
 8003178:	08015e6c 	.word	0x08015e6c
 800317c:	08017ef0 	.word	0x08017ef0
 8003180:	08015e78 	.word	0x08015e78
 8003184:	08015e7c 	.word	0x08015e7c
 8003188:	08016010 	.word	0x08016010
 800318c:	08015e88 	.word	0x08015e88
 8003190:	08015e98 	.word	0x08015e98
 8003194:	08015eb4 	.word	0x08015eb4

08003198 <show_popup>:

void show_popup(char * text){
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b085      	sub	sp, #20
 800319c:	af02      	add	r7, sp, #8
 800319e:	6078      	str	r0, [r7, #4]
	UG_FillFrame(10, 50, 225, 105, RGB_to_BRG(C_ORANGE));
 80031a0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80031a4:	f7fe f990 	bl	80014c8 <RGB_to_BRG>
 80031a8:	4603      	mov	r3, r0
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2369      	movs	r3, #105	; 0x69
 80031ae:	22e1      	movs	r2, #225	; 0xe1
 80031b0:	2132      	movs	r1, #50	; 0x32
 80031b2:	200a      	movs	r0, #10
 80031b4:	f00c faa4 	bl	800f700 <UG_FillFrame>
	UG_FillFrame(15, 55, 220, 100, RGB_to_BRG(C_WHITE));
 80031b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031bc:	f7fe f984 	bl	80014c8 <RGB_to_BRG>
 80031c0:	4603      	mov	r3, r0
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	2364      	movs	r3, #100	; 0x64
 80031c6:	22dc      	movs	r2, #220	; 0xdc
 80031c8:	2137      	movs	r1, #55	; 0x37
 80031ca:	200f      	movs	r0, #15
 80031cc:	f00c fa98 	bl	800f700 <UG_FillFrame>
	LCD_PutStr(20, 70, text, FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80031d0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80031d4:	f7fe f978 	bl	80014c8 <RGB_to_BRG>
 80031d8:	4603      	mov	r3, r0
 80031da:	461c      	mov	r4, r3
 80031dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031e0:	f7fe f972 	bl	80014c8 <RGB_to_BRG>
 80031e4:	4603      	mov	r3, r0
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	9400      	str	r4, [sp, #0]
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <show_popup+0x80>)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	2146      	movs	r1, #70	; 0x46
 80031f0:	2014      	movs	r0, #20
 80031f2:	f003 faa3 	bl	800673c <LCD_PutStr>
	HAL_Delay(2000);
 80031f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031fa:	f003 fbb9 	bl	8006970 <HAL_Delay>
	LCD_draw_main_screen();
 80031fe:	f7ff fced 	bl	8002bdc <LCD_draw_main_screen>
	standby_state_written_to_LCD = 0;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <show_popup+0x84>)
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
	sleep_state_written_to_LCD = 0;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <show_popup+0x88>)
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bd90      	pop	{r4, r7, pc}
 8003216:	bf00      	nop
 8003218:	08016fe0 	.word	0x08016fe0
 800321c:	20000490 	.word	0x20000490
 8003220:	2000048f 	.word	0x2000048f

08003224 <LCD_draw_earth_fault_popup>:

void LCD_draw_earth_fault_popup(){
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b083      	sub	sp, #12
 8003228:	af02      	add	r7, sp, #8
	heater_off();
 800322a:	f7fe fb6f 	bl	800190c <heater_off>

	UG_FillFrame(10, 50, 205, 205, RGB_to_BRG(C_ORANGE));
 800322e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003232:	f7fe f949 	bl	80014c8 <RGB_to_BRG>
 8003236:	4603      	mov	r3, r0
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	23cd      	movs	r3, #205	; 0xcd
 800323c:	22cd      	movs	r2, #205	; 0xcd
 800323e:	2132      	movs	r1, #50	; 0x32
 8003240:	200a      	movs	r0, #10
 8003242:	f00c fa5d 	bl	800f700 <UG_FillFrame>
	UG_FillFrame(15, 55, 200, 200, RGB_to_BRG(C_WHITE));
 8003246:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800324a:	f7fe f93d 	bl	80014c8 <RGB_to_BRG>
 800324e:	4603      	mov	r3, r0
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	23c8      	movs	r3, #200	; 0xc8
 8003254:	22c8      	movs	r2, #200	; 0xc8
 8003256:	2137      	movs	r1, #55	; 0x37
 8003258:	200f      	movs	r0, #15
 800325a:	f00c fa51 	bl	800f700 <UG_FillFrame>
	LCD_PutStr(20, 60, "GROUNDING", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800325e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003262:	f7fe f931 	bl	80014c8 <RGB_to_BRG>
 8003266:	4603      	mov	r3, r0
 8003268:	461c      	mov	r4, r3
 800326a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800326e:	f7fe f92b 	bl	80014c8 <RGB_to_BRG>
 8003272:	4603      	mov	r3, r0
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	9400      	str	r4, [sp, #0]
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 800327a:	4a2c      	ldr	r2, [pc, #176]	; (800332c <LCD_draw_earth_fault_popup+0x108>)
 800327c:	213c      	movs	r1, #60	; 0x3c
 800327e:	2014      	movs	r0, #20
 8003280:	f003 fa5c 	bl	800673c <LCD_PutStr>
	LCD_PutStr(20, 80, "ERROR", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8003284:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003288:	f7fe f91e 	bl	80014c8 <RGB_to_BRG>
 800328c:	4603      	mov	r3, r0
 800328e:	461c      	mov	r4, r3
 8003290:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003294:	f7fe f918 	bl	80014c8 <RGB_to_BRG>
 8003298:	4603      	mov	r3, r0
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	9400      	str	r4, [sp, #0]
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 80032a0:	4a23      	ldr	r2, [pc, #140]	; (8003330 <LCD_draw_earth_fault_popup+0x10c>)
 80032a2:	2150      	movs	r1, #80	; 0x50
 80032a4:	2014      	movs	r0, #20
 80032a6:	f003 fa49 	bl	800673c <LCD_PutStr>

	LCD_PutStr(20, 120, "CHECK", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032aa:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032ae:	f7fe f90b 	bl	80014c8 <RGB_to_BRG>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461c      	mov	r4, r3
 80032b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032ba:	f7fe f905 	bl	80014c8 <RGB_to_BRG>
 80032be:	4603      	mov	r3, r0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	9400      	str	r4, [sp, #0]
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <LCD_draw_earth_fault_popup+0x110>)
 80032c8:	2178      	movs	r1, #120	; 0x78
 80032ca:	2014      	movs	r0, #20
 80032cc:	f003 fa36 	bl	800673c <LCD_PutStr>
	LCD_PutStr(20, 140, "CONNECTIONS", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032d0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032d4:	f7fe f8f8 	bl	80014c8 <RGB_to_BRG>
 80032d8:	4603      	mov	r3, r0
 80032da:	461c      	mov	r4, r3
 80032dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032e0:	f7fe f8f2 	bl	80014c8 <RGB_to_BRG>
 80032e4:	4603      	mov	r3, r0
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	9400      	str	r4, [sp, #0]
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <LCD_draw_earth_fault_popup+0x114>)
 80032ee:	218c      	movs	r1, #140	; 0x8c
 80032f0:	2014      	movs	r0, #20
 80032f2:	f003 fa23 	bl	800673c <LCD_PutStr>
	LCD_PutStr(20, 160, "AND REBOOT", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032f6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032fa:	f7fe f8e5 	bl	80014c8 <RGB_to_BRG>
 80032fe:	4603      	mov	r3, r0
 8003300:	461c      	mov	r4, r3
 8003302:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003306:	f7fe f8df 	bl	80014c8 <RGB_to_BRG>
 800330a:	4603      	mov	r3, r0
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	9400      	str	r4, [sp, #0]
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <LCD_draw_earth_fault_popup+0x118>)
 8003314:	21a0      	movs	r1, #160	; 0xa0
 8003316:	2014      	movs	r0, #20
 8003318:	f003 fa10 	bl	800673c <LCD_PutStr>

	Error_Handler();
 800331c:	f001 fc82 	bl	8004c24 <Error_Handler>
}
 8003320:	bf00      	nop
 8003322:	3704      	adds	r7, #4
 8003324:	46bd      	mov	sp, r7
 8003326:	bd90      	pop	{r4, r7, pc}
 8003328:	08016fe0 	.word	0x08016fe0
 800332c:	08015edc 	.word	0x08015edc
 8003330:	08015ee8 	.word	0x08015ee8
 8003334:	08015ef0 	.word	0x08015ef0
 8003338:	08015ef8 	.word	0x08015ef8
 800333c:	08015f04 	.word	0x08015f04

08003340 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8003340:	b598      	push	{r3, r4, r7, lr}
 8003342:	af00      	add	r7, sp, #0
	if(custom_temperature_on == 0){
 8003344:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <get_set_temperature+0x70>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d12f      	bne.n	80033ac <get_set_temperature+0x6c>
		TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 800334c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f8fe 	bl	8000554 <__aeabi_ui2d>
 8003358:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <get_set_temperature+0x74>)
 800335a:	ed93 7b00 	vldr	d7, [r3]
 800335e:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <get_set_temperature+0x78>)
 8003360:	ed93 6b00 	vldr	d6, [r3]
 8003364:	eeb0 2a46 	vmov.f32	s4, s12
 8003368:	eef0 2a66 	vmov.f32	s5, s13
 800336c:	eeb0 1a47 	vmov.f32	s2, s14
 8003370:	eef0 1a67 	vmov.f32	s3, s15
 8003374:	ec41 0b10 	vmov	d0, r0, r1
 8003378:	f7fd ffdc 	bl	8001334 <clamp>
 800337c:	ec53 2b10 	vmov	r2, r3, d0
 8003380:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	f7fd fc36 	bl	8000bf8 <__aeabi_d2uiz>
 800338c:	4603      	mov	r3, r0
 800338e:	6263      	str	r3, [r4, #36]	; 0x24
		sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 8003390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	b29b      	uxth	r3, r3
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd f8e9 	bl	8000574 <__aeabi_i2d>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4905      	ldr	r1, [pc, #20]	; (80033bc <get_set_temperature+0x7c>)
 80033a8:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80033ac:	bf00      	nop
 80033ae:	bd98      	pop	{r3, r4, r7, pc}
 80033b0:	20000550 	.word	0x20000550
 80033b4:	20000028 	.word	0x20000028
 80033b8:	20000030 	.word	0x20000030
 80033bc:	20000038 	.word	0x20000038

080033c0 <beep>:

/* Beep the beeper */
void beep(){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <beep+0x30>)
 80033c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <beep+0x34>)
 80033d0:	f7fd fba2 	bl	8000b18 <__aeabi_dcmpeq>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d100      	bne.n	80033dc <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 80033da:	e006      	b.n	80033ea <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80033dc:	2104      	movs	r1, #4
 80033de:	4806      	ldr	r0, [pc, #24]	; (80033f8 <beep+0x38>)
 80033e0:	f009 f80a 	bl	800c3f8 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <beep+0x3c>)
 80033e6:	f008 ff17 	bl	800c218 <HAL_TIM_Base_Start_IT>
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000558 	.word	0x20000558
 80033f4:	3ff00000 	.word	0x3ff00000
 80033f8:	20001f04 	.word	0x20001f04
 80033fc:	20002080 	.word	0x20002080

08003400 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8003404:	4b46      	ldr	r3, [pc, #280]	; (8003520 <handle_emergency_shutdown+0x120>)
 8003406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <handle_emergency_shutdown+0x20>
 800340e:	4b45      	ldr	r3, [pc, #276]	; (8003524 <handle_emergency_shutdown+0x124>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8003416:	f003 fa9f 	bl	8006958 <HAL_GetTick>
 800341a:	4603      	mov	r3, r0
 800341c:	4a42      	ldr	r2, [pc, #264]	; (8003528 <handle_emergency_shutdown+0x128>)
 800341e:	6013      	str	r3, [r2, #0]
	}
	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8003420:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <handle_emergency_shutdown+0x120>)
 8003422:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	f7fd fb73 	bl	8000b18 <__aeabi_dcmpeq>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d025      	beq.n	8003484 <handle_emergency_shutdown+0x84>
 8003438:	f003 fa8e 	bl	8006958 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <handle_emergency_shutdown+0x128>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f885 	bl	8000554 <__aeabi_ui2d>
 800344a:	4604      	mov	r4, r0
 800344c:	460d      	mov	r5, r1
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <handle_emergency_shutdown+0x12c>)
 8003450:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003454:	a32e      	add	r3, pc, #184	; (adr r3, 8003510 <handle_emergency_shutdown+0x110>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd f8f5 	bl	8000648 <__aeabi_dmul>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fd fb75 	bl	8000b54 <__aeabi_dcmpge>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <handle_emergency_shutdown+0x84>
 8003470:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <handle_emergency_shutdown+0x124>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <handle_emergency_shutdown+0x84>
		show_popup("Standby timeout");
 8003478:	482d      	ldr	r0, [pc, #180]	; (8003530 <handle_emergency_shutdown+0x130>)
 800347a:	f7ff fe8d 	bl	8003198 <show_popup>
		change_state(EMERGENCY_SLEEP);
 800347e:	2003      	movs	r0, #3
 8003480:	f7fe f838 	bl	80014f4 <change_state>
	}
	/* Set state to EMERGENCY_SLEEP if input voltage is too low */
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <handle_emergency_shutdown+0x120>)
 8003486:	edd3 7a04 	vldr	s15, [r3, #16]
 800348a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800348e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	d80a      	bhi.n	80034ae <handle_emergency_shutdown+0xae>
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <handle_emergency_shutdown+0x124>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <handle_emergency_shutdown+0xae>
		show_popup("Too Low voltage");
 80034a0:	4824      	ldr	r0, [pc, #144]	; (8003534 <handle_emergency_shutdown+0x134>)
 80034a2:	f7ff fe79 	bl	8003198 <show_popup>
		change_state(EMERGENCY_SLEEP);
 80034a6:	2003      	movs	r0, #3
 80034a8:	f7fe f824 	bl	80014f4 <change_state>
 80034ac:	e02b      	b.n	8003506 <handle_emergency_shutdown+0x106>
	}
	/* Set state to EMERGENCY_SLEEP if no tip detected (no current draw) */
	else if((sensor_values.heater_current < 30) && (active_state == RUN)){ //NT115 at 9V draws 81
 80034ae:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <handle_emergency_shutdown+0x120>)
 80034b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80034b4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80034b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	d50a      	bpl.n	80034d8 <handle_emergency_shutdown+0xd8>
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <handle_emergency_shutdown+0x124>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <handle_emergency_shutdown+0xd8>
		show_popup("NO tip detected");
 80034ca:	481b      	ldr	r0, [pc, #108]	; (8003538 <handle_emergency_shutdown+0x138>)
 80034cc:	f7ff fe64 	bl	8003198 <show_popup>
		change_state(EMERGENCY_SLEEP);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f7fe f80f 	bl	80014f4 <change_state>
 80034d6:	e016      	b.n	8003506 <handle_emergency_shutdown+0x106>
	}
	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	else if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <handle_emergency_shutdown+0x120>)
 80034da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80034de:	a30e      	add	r3, pc, #56	; (adr r3, 8003518 <handle_emergency_shutdown+0x118>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fd fb40 	bl	8000b68 <__aeabi_dcmpgt>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d100      	bne.n	80034f0 <handle_emergency_shutdown+0xf0>
		show_popup("Too high Temperature");
		change_state(EMERGENCY_SLEEP);
	}
}
 80034ee:	e00a      	b.n	8003506 <handle_emergency_shutdown+0x106>
	else if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <handle_emergency_shutdown+0x124>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <handle_emergency_shutdown+0x106>
		show_popup("Too high Temperature");
 80034f8:	4810      	ldr	r0, [pc, #64]	; (800353c <handle_emergency_shutdown+0x13c>)
 80034fa:	f7ff fe4d 	bl	8003198 <show_popup>
		change_state(EMERGENCY_SLEEP);
 80034fe:	2003      	movs	r0, #3
 8003500:	f7fd fff8 	bl	80014f4 <change_state>
}
 8003504:	e7ff      	b.n	8003506 <handle_emergency_shutdown+0x106>
 8003506:	bf00      	nop
 8003508:	bdb0      	pop	{r4, r5, r7, pc}
 800350a:	bf00      	nop
 800350c:	f3af 8000 	nop.w
 8003510:	00000000 	.word	0x00000000
 8003514:	40ed4c00 	.word	0x40ed4c00
 8003518:	00000000 	.word	0x00000000
 800351c:	407ea000 	.word	0x407ea000
 8003520:	20000038 	.word	0x20000038
 8003524:	2000001d 	.word	0x2000001d
 8003528:	20000478 	.word	0x20000478
 800352c:	20000558 	.word	0x20000558
 8003530:	08015f10 	.word	0x08015f10
 8003534:	08015f20 	.word	0x08015f20
 8003538:	08015f30 	.word	0x08015f30
 800353c:	08015f40 	.word	0x08015f40

08003540 <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 8003540:	b598      	push	{r3, r4, r7, lr}
 8003542:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8003544:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <handle_button_status+0x98>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d11e      	bne.n	800358a <handle_button_status+0x4a>
		SW_1_pressed = 0;
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <handle_button_status+0x98>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <handle_button_status+0x9c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <handle_button_status+0x22>
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <handle_button_status+0x9c>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d103      	bne.n	800356a <handle_button_status+0x2a>
			change_state(HALTED);
 8003562:	2004      	movs	r0, #4
 8003564:	f7fd ffc6 	bl	80014f4 <change_state>
 8003568:	e00a      	b.n	8003580 <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 800356a:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <handle_button_status+0x9c>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d003      	beq.n	800357a <handle_button_status+0x3a>
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <handle_button_status+0x9c>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d102      	bne.n	8003580 <handle_button_status+0x40>
			change_state(RUN);
 800357a:	2000      	movs	r0, #0
 800357c:	f7fd ffba 	bl	80014f4 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8003580:	f003 f9ea 	bl	8006958 <HAL_GetTick>
 8003584:	4603      	mov	r3, r0
 8003586:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <handle_button_status+0xa0>)
 8003588:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 800358a:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <handle_button_status+0xa4>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10d      	bne.n	80035ae <handle_button_status+0x6e>
		SW_2_pressed = 0;
 8003592:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <handle_button_status+0xa4>)
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <handle_button_status+0xa8>)
 800359a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800359e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f7fd fb27 	bl	8000bf8 <__aeabi_d2uiz>
 80035aa:	4603      	mov	r3, r0
 80035ac:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <handle_button_status+0xac>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10d      	bne.n	80035d2 <handle_button_status+0x92>
		SW_3_pressed = 0;
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <handle_button_status+0xac>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <handle_button_status+0xa8>)
 80035be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80035c2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	f7fd fb15 	bl	8000bf8 <__aeabi_d2uiz>
 80035ce:	4603      	mov	r3, r0
 80035d0:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 80035d2:	bf00      	nop
 80035d4:	bd98      	pop	{r3, r4, r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000048c 	.word	0x2000048c
 80035dc:	2000001d 	.word	0x2000001d
 80035e0:	20000474 	.word	0x20000474
 80035e4:	2000048d 	.word	0x2000048d
 80035e8:	20000558 	.word	0x20000558
 80035ec:	2000048e 	.word	0x2000048e

080035f0 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 80035f6:	2140      	movs	r1, #64	; 0x40
 80035f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035fc:	f006 ff54 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <get_stand_status+0x1c>
		stand_status = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	71fb      	strb	r3, [r7, #7]
 800360a:	e001      	b.n	8003610 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	493b      	ldr	r1, [pc, #236]	; (8003700 <get_stand_status+0x110>)
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fb3b 	bl	8004c90 <Moving_Average_Compute>
 800361a:	eeb0 7a40 	vmov.f32	s14, s0
 800361e:	eef0 7a60 	vmov.f32	s15, s1
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <get_stand_status+0x114>)
 8003624:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <get_stand_status+0x114>)
 800362a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800362e:	a330      	add	r3, pc, #192	; (adr r3, 80036f0 <get_stand_status+0x100>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f7fd fa8e 	bl	8000b54 <__aeabi_dcmpge>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d039      	beq.n	80036b2 <get_stand_status+0xc2>
		if(active_state == RUN){
 800363e:	4b32      	ldr	r3, [pc, #200]	; (8003708 <get_stand_status+0x118>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d107      	bne.n	8003656 <get_stand_status+0x66>
			change_state(STANDBY);
 8003646:	2001      	movs	r0, #1
 8003648:	f7fd ff54 	bl	80014f4 <change_state>
			previous_standby_millis = HAL_GetTick();
 800364c:	f003 f984 	bl	8006958 <HAL_GetTick>
 8003650:	4603      	mov	r3, r0
 8003652:	4a2e      	ldr	r2, [pc, #184]	; (800370c <get_stand_status+0x11c>)
 8003654:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 8003656:	f003 f97f 	bl	8006958 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	4b2b      	ldr	r3, [pc, #172]	; (800370c <get_stand_status+0x11c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff76 	bl	8000554 <__aeabi_ui2d>
 8003668:	4604      	mov	r4, r0
 800366a:	460d      	mov	r5, r1
 800366c:	4b28      	ldr	r3, [pc, #160]	; (8003710 <get_stand_status+0x120>)
 800366e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003672:	a321      	add	r3, pc, #132	; (adr r3, 80036f8 <get_stand_status+0x108>)
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f7fc ffe6 	bl	8000648 <__aeabi_dmul>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4620      	mov	r0, r4
 8003682:	4629      	mov	r1, r5
 8003684:	f7fd fa66 	bl	8000b54 <__aeabi_dcmpge>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d006      	beq.n	800369c <get_stand_status+0xac>
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <get_stand_status+0x118>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <get_stand_status+0xac>
			change_state(SLEEP);
 8003696:	2002      	movs	r0, #2
 8003698:	f7fd ff2c 	bl	80014f4 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <get_stand_status+0x118>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d003      	beq.n	80036ac <get_stand_status+0xbc>
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <get_stand_status+0x118>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d102      	bne.n	80036b2 <get_stand_status+0xc2>
			change_state(SLEEP);
 80036ac:	2002      	movs	r0, #2
 80036ae:	f7fd ff21 	bl	80014f4 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <get_stand_status+0x114>)
 80036b4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80036b8:	a30d      	add	r3, pc, #52	; (adr r3, 80036f0 <get_stand_status+0x100>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fd fa35 	bl	8000b2c <__aeabi_dcmplt>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d100      	bne.n	80036ca <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 80036c8:	e00e      	b.n	80036e8 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <get_stand_status+0x118>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d007      	beq.n	80036e2 <get_stand_status+0xf2>
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <get_stand_status+0x118>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d003      	beq.n	80036e2 <get_stand_status+0xf2>
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <get_stand_status+0x118>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <get_stand_status+0xf8>
			change_state(RUN);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7fd ff06 	bl	80014f4 <change_state>
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bdb0      	pop	{r4, r5, r7, pc}
 80036f0:	9999999a 	.word	0x9999999a
 80036f4:	3fc99999 	.word	0x3fc99999
 80036f8:	00000000 	.word	0x00000000
 80036fc:	40ed4c00 	.word	0x40ed4c00
 8003700:	20001274 	.word	0x20001274
 8003704:	20000038 	.word	0x20000038
 8003708:	2000001d 	.word	0x2000001d
 800370c:	2000047c 	.word	0x2000047c
 8003710:	20000558 	.word	0x20000558
 8003714:	00000000 	.word	0x00000000

08003718 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 800371e:	2110      	movs	r1, #16
 8003720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003724:	f006 fec0 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <get_handle_type+0x1c>
		handle_status = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	71fb      	strb	r3, [r7, #7]
 8003732:	e001      	b.n	8003738 <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 8003734:	2301      	movs	r3, #1
 8003736:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	496f      	ldr	r1, [pc, #444]	; (80038f8 <get_handle_type+0x1e0>)
 800373c:	4618      	mov	r0, r3
 800373e:	f001 faa7 	bl	8004c90 <Moving_Average_Compute>
 8003742:	eeb0 7a40 	vmov.f32	s14, s0
 8003746:	eef0 7a60 	vmov.f32	s15, s1
 800374a:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <get_handle_type+0x1e4>)
 800374c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8003750:	2120      	movs	r1, #32
 8003752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003756:	f006 fea7 	bl	800a4a8 <HAL_GPIO_ReadPin>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <get_handle_type+0x4e>
		handle_status = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	71fb      	strb	r3, [r7, #7]
 8003764:	e001      	b.n	800376a <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 8003766:	2301      	movs	r3, #1
 8003768:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	4964      	ldr	r1, [pc, #400]	; (8003900 <get_handle_type+0x1e8>)
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fa8e 	bl	8004c90 <Moving_Average_Compute>
 8003774:	eeb0 7a40 	vmov.f32	s14, s0
 8003778:	eef0 7a60 	vmov.f32	s15, s1
 800377c:	4b5f      	ldr	r3, [pc, #380]	; (80038fc <get_handle_type+0x1e4>)
 800377e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* Determine if NT115 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 8003782:	4b5e      	ldr	r3, [pc, #376]	; (80038fc <get_handle_type+0x1e4>)
 8003784:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	4b5d      	ldr	r3, [pc, #372]	; (8003904 <get_handle_type+0x1ec>)
 800378e:	f7fd f9e1 	bl	8000b54 <__aeabi_dcmpge>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d029      	beq.n	80037ec <get_handle_type+0xd4>
 8003798:	4b58      	ldr	r3, [pc, #352]	; (80038fc <get_handle_type+0x1e4>)
 800379a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	4b58      	ldr	r3, [pc, #352]	; (8003904 <get_handle_type+0x1ec>)
 80037a4:	f7fd f9c2 	bl	8000b2c <__aeabi_dcmplt>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01e      	beq.n	80037ec <get_handle_type+0xd4>
		handle = NT115;
 80037ae:	4b56      	ldr	r3, [pc, #344]	; (8003908 <get_handle_type+0x1f0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 20; //20W
 80037b4:	4b51      	ldr	r3, [pc, #324]	; (80038fc <get_handle_type+0x1e4>)
 80037b6:	4a55      	ldr	r2, [pc, #340]	; (800390c <get_handle_type+0x1f4>)
 80037b8:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 80037ba:	4955      	ldr	r1, [pc, #340]	; (8003910 <get_handle_type+0x1f8>)
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	4b54      	ldr	r3, [pc, #336]	; (8003914 <get_handle_type+0x1fc>)
 80037c2:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 80037c6:	4954      	ldr	r1, [pc, #336]	; (8003918 <get_handle_type+0x200>)
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	4b53      	ldr	r3, [pc, #332]	; (800391c <get_handle_type+0x204>)
 80037ce:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 80037d2:	4953      	ldr	r1, [pc, #332]	; (8003920 <get_handle_type+0x208>)
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	4b52      	ldr	r3, [pc, #328]	; (8003924 <get_handle_type+0x20c>)
 80037da:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 100;
 80037de:	4952      	ldr	r1, [pc, #328]	; (8003928 <get_handle_type+0x210>)
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	4b51      	ldr	r3, [pc, #324]	; (800392c <get_handle_type+0x214>)
 80037e6:	e9c1 2300 	strd	r2, r3, [r1]
 80037ea:	e052      	b.n	8003892 <get_handle_type+0x17a>
	}
	/* Determine if T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 80037ec:	4b43      	ldr	r3, [pc, #268]	; (80038fc <get_handle_type+0x1e4>)
 80037ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	4b43      	ldr	r3, [pc, #268]	; (8003904 <get_handle_type+0x1ec>)
 80037f8:	f7fd f998 	bl	8000b2c <__aeabi_dcmplt>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d029      	beq.n	8003856 <get_handle_type+0x13e>
 8003802:	4b3e      	ldr	r3, [pc, #248]	; (80038fc <get_handle_type+0x1e4>)
 8003804:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <get_handle_type+0x1ec>)
 800380e:	f7fd f9a1 	bl	8000b54 <__aeabi_dcmpge>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01e      	beq.n	8003856 <get_handle_type+0x13e>
		handle = T210;
 8003818:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <get_handle_type+0x1f0>)
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 800381e:	4b37      	ldr	r3, [pc, #220]	; (80038fc <get_handle_type+0x1e4>)
 8003820:	4a43      	ldr	r2, [pc, #268]	; (8003930 <get_handle_type+0x218>)
 8003822:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 5;
 8003824:	493a      	ldr	r1, [pc, #232]	; (8003910 <get_handle_type+0x1f8>)
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	4b42      	ldr	r3, [pc, #264]	; (8003934 <get_handle_type+0x21c>)
 800382c:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 6;
 8003830:	4939      	ldr	r1, [pc, #228]	; (8003918 <get_handle_type+0x200>)
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	4b40      	ldr	r3, [pc, #256]	; (8003938 <get_handle_type+0x220>)
 8003838:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 800383c:	4938      	ldr	r1, [pc, #224]	; (8003920 <get_handle_type+0x208>)
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	4b30      	ldr	r3, [pc, #192]	; (8003904 <get_handle_type+0x1ec>)
 8003844:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 125;
 8003848:	4937      	ldr	r1, [pc, #220]	; (8003928 <get_handle_type+0x210>)
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	4b3b      	ldr	r3, [pc, #236]	; (800393c <get_handle_type+0x224>)
 8003850:	e9c1 2300 	strd	r2, r3, [r1]
 8003854:	e01d      	b.n	8003892 <get_handle_type+0x17a>
	}
	else{
		handle = T245;
 8003856:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <get_handle_type+0x1f0>)
 8003858:	2202      	movs	r2, #2
 800385a:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 800385c:	4b27      	ldr	r3, [pc, #156]	; (80038fc <get_handle_type+0x1e4>)
 800385e:	4a38      	ldr	r2, [pc, #224]	; (8003940 <get_handle_type+0x228>)
 8003860:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 8003862:	492b      	ldr	r1, [pc, #172]	; (8003910 <get_handle_type+0x1f8>)
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	4b36      	ldr	r3, [pc, #216]	; (8003944 <get_handle_type+0x22c>)
 800386a:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 800386e:	492a      	ldr	r1, [pc, #168]	; (8003918 <get_handle_type+0x200>)
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <get_handle_type+0x21c>)
 8003876:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 1;
 800387a:	4929      	ldr	r1, [pc, #164]	; (8003920 <get_handle_type+0x208>)
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	4b26      	ldr	r3, [pc, #152]	; (800391c <get_handle_type+0x204>)
 8003882:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 150;
 8003886:	4928      	ldr	r1, [pc, #160]	; (8003928 <get_handle_type+0x210>)
 8003888:	a319      	add	r3, pc, #100	; (adr r3, 80038f0 <get_handle_type+0x1d8>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8003892:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <get_handle_type+0x1f8>)
 8003894:	ed93 7b00 	vldr	d7, [r3]
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <get_handle_type+0x200>)
 800389a:	ed93 6b00 	vldr	d6, [r3]
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <get_handle_type+0x208>)
 80038a0:	ed93 5b00 	vldr	d5, [r3]
 80038a4:	eeb0 2a45 	vmov.f32	s4, s10
 80038a8:	eef0 2a65 	vmov.f32	s5, s11
 80038ac:	eeb0 1a46 	vmov.f32	s2, s12
 80038b0:	eef0 1a66 	vmov.f32	s3, s13
 80038b4:	eeb0 0a47 	vmov.f32	s0, s14
 80038b8:	eef0 0a67 	vmov.f32	s1, s15
 80038bc:	4822      	ldr	r0, [pc, #136]	; (8003948 <get_handle_type+0x230>)
 80038be:	f001 fcb5 	bl	800522c <PID_SetTunings>
	PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 80038c2:	4b19      	ldr	r3, [pc, #100]	; (8003928 <get_handle_type+0x210>)
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	4614      	mov	r4, r2
 80038ca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <get_handle_type+0x210>)
 80038d0:	ed93 7b00 	vldr	d7, [r3]
 80038d4:	eeb0 1a47 	vmov.f32	s2, s14
 80038d8:	eef0 1a67 	vmov.f32	s3, s15
 80038dc:	ec45 4b10 	vmov	d0, r4, r5
 80038e0:	4819      	ldr	r0, [pc, #100]	; (8003948 <get_handle_type+0x230>)
 80038e2:	f001 fc83 	bl	80051ec <PID_SetILimits>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bdb0      	pop	{r4, r5, r7, pc}
 80038ee:	bf00      	nop
 80038f0:	00000000 	.word	0x00000000
 80038f4:	4062c000 	.word	0x4062c000
 80038f8:	200015a0 	.word	0x200015a0
 80038fc:	20000038 	.word	0x20000038
 8003900:	200018cc 	.word	0x200018cc
 8003904:	3fe00000 	.word	0x3fe00000
 8003908:	20000468 	.word	0x20000468
 800390c:	41a00000 	.word	0x41a00000
 8003910:	20000498 	.word	0x20000498
 8003914:	40080000 	.word	0x40080000
 8003918:	200004a0 	.word	0x200004a0
 800391c:	3ff00000 	.word	0x3ff00000
 8003920:	200004a8 	.word	0x200004a8
 8003924:	3fd00000 	.word	0x3fd00000
 8003928:	20000020 	.word	0x20000020
 800392c:	40590000 	.word	0x40590000
 8003930:	42700000 	.word	0x42700000
 8003934:	40140000 	.word	0x40140000
 8003938:	40180000 	.word	0x40180000
 800393c:	405f4000 	.word	0x405f4000
 8003940:	42f00000 	.word	0x42f00000
 8003944:	40200000 	.word	0x40200000
 8003948:	20002160 	.word	0x20002160

0800394c <HAL_GPIO_EXTI_Callback>:

/* Interrupts at button press */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	2b20      	cmp	r3, #32
 800395a:	d006      	beq.n	800396a <HAL_GPIO_EXTI_Callback+0x1e>
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d003      	beq.n	800396a <HAL_GPIO_EXTI_Callback+0x1e>
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003968:	d109      	bne.n	800397e <HAL_GPIO_EXTI_Callback+0x32>
 800396a:	4b07      	ldr	r3, [pc, #28]	; (8003988 <HAL_GPIO_EXTI_Callback+0x3c>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 8003972:	4806      	ldr	r0, [pc, #24]	; (800398c <HAL_GPIO_EXTI_Callback+0x40>)
 8003974:	f008 fc50 	bl	800c218 <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_GPIO_EXTI_Callback+0x3c>)
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
    }
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	2000001c 	.word	0x2000001c
 800398c:	20002034 	.word	0x20002034

08003990 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7f1b      	ldrb	r3, [r3, #28]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d003      	beq.n	80039a8 <HAL_TIM_IC_CaptureCallback+0x18>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7f1b      	ldrb	r3, [r3, #28]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d101      	bne.n	80039ac <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 80039a8:	f7ff fd0a 	bl	80033c0 <beep>
	}
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d110      	bne.n	80039e6 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7f1b      	ldrb	r3, [r3, #28]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10c      	bne.n	80039e6 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d108      	bne.n	80039e6 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		current_measurement_requested = 0;
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 80039e0:	4806      	ldr	r0, [pc, #24]	; (80039fc <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80039e2:	f003 fcd1 	bl	8007388 <HAL_ADC_Start_IT>
	}
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20001e6c 	.word	0x20001e6c
 80039f4:	200005c0 	.word	0x200005c0
 80039f8:	200001dc 	.word	0x200001dc
 80039fc:	20001c64 	.word	0x20001c64

08003a00 <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a35      	ldr	r2, [pc, #212]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10c      	bne.n	8003a2a <HAL_TIM_PeriodElapsedCallback+0x2a>
		heater_off();
 8003a10:	f7fd ff7c 	bl	800190c <heater_off>
		thermocouple_measurement_done = 0;
 8003a14:	4b33      	ldr	r3, [pc, #204]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim7);
 8003a1a:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a2e      	ldr	r2, [pc, #184]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d104      	bne.n	8003a3c <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8003a32:	2239      	movs	r2, #57	; 0x39
 8003a34:	492d      	ldr	r1, [pc, #180]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003a36:	482e      	ldr	r0, [pc, #184]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003a38:	f003 fdd6 	bl	80075e8 <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a2d      	ldr	r2, [pc, #180]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d106      	bne.n	8003a52 <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_TIM_Base_Stop_IT(&htim17);
 8003a44:	482b      	ldr	r0, [pc, #172]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003a46:	f008 fc51 	bl	800c2ec <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 8003a4a:	2104      	movs	r1, #4
 8003a4c:	482a      	ldr	r0, [pc, #168]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003a4e:	f008 fe1f 	bl	800c690 <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a29      	ldr	r2, [pc, #164]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d13d      	bne.n	8003ad6 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8003a5a:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d139      	bne.n	8003ad6 <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8003a62:	2120      	movs	r1, #32
 8003a64:	4827      	ldr	r0, [pc, #156]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003a66:	f006 fd1f 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10b      	bne.n	8003a88 <HAL_TIM_PeriodElapsedCallback+0x88>
			SW_ready = 1;
 8003a70:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]
			beep();
 8003a7c:	f7ff fca0 	bl	80033c0 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003a80:	481e      	ldr	r0, [pc, #120]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a82:	f008 fc33 	bl	800c2ec <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 8003a86:	e026      	b.n	8003ad6 <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8003a88:	2180      	movs	r1, #128	; 0x80
 8003a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a8e:	f006 fd0b 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10b      	bne.n	8003ab0 <HAL_TIM_PeriodElapsedCallback+0xb0>
			SW_ready = 1;
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
			beep();
 8003aa4:	f7ff fc8c 	bl	80033c0 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003aa8:	4814      	ldr	r0, [pc, #80]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003aaa:	f008 fc1f 	bl	800c2ec <HAL_TIM_Base_Stop_IT>
}
 8003aae:	e012      	b.n	8003ad6 <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8003ab0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ab4:	4813      	ldr	r0, [pc, #76]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003ab6:	f006 fcf7 	bl	800a4a8 <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10a      	bne.n	8003ad6 <HAL_TIM_PeriodElapsedCallback+0xd6>
			SW_ready = 1;
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
			beep();
 8003acc:	f7ff fc78 	bl	80033c0 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003ad0:	480a      	ldr	r0, [pc, #40]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003ad2:	f008 fc0b 	bl	800c2ec <HAL_TIM_Base_Stop_IT>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20001f50 	.word	0x20001f50
 8003ae4:	200001dd 	.word	0x200001dd
 8003ae8:	20001f9c 	.word	0x20001f9c
 8003aec:	200004dc 	.word	0x200004dc
 8003af0:	20001bf8 	.word	0x20001bf8
 8003af4:	20002080 	.word	0x20002080
 8003af8:	20001f04 	.word	0x20001f04
 8003afc:	20002034 	.word	0x20002034
 8003b00:	2000001c 	.word	0x2000001c
 8003b04:	48000400 	.word	0x48000400
 8003b08:	2000048c 	.word	0x2000048c
 8003b0c:	2000048d 	.word	0x2000048d
 8003b10:	2000048e 	.word	0x2000048e

08003b14 <HAL_ADC_ConvCpltCallback>:
/* ADC conversion completed Callbacks */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b24:	d110      	bne.n	8003b48 <HAL_ADC_ConvCpltCallback+0x34>
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <HAL_ADC_ConvCpltCallback+0x74>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_ADC_ConvCpltCallback+0x34>
		get_thermocouple_temperature();
 8003b2e:	f7fd fd6b 	bl	8001608 <get_thermocouple_temperature>
		heater_on();
 8003b32:	f7fd fe95 	bl	8001860 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 8003b36:	4815      	ldr	r0, [pc, #84]	; (8003b8c <HAL_ADC_ConvCpltCallback+0x78>)
 8003b38:	f001 f9a0 	bl	8004e7c <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 8003b3c:	4814      	ldr	r0, [pc, #80]	; (8003b90 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003b3e:	f003 fe07 	bl	8007750 <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_ADC_ConvCpltCallback+0x74>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2) && (current_measurement_done == 0)){
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <HAL_ADC_ConvCpltCallback+0x80>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d116      	bne.n	8003b80 <HAL_ADC_ConvCpltCallback+0x6c>
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_ADC_ConvCpltCallback+0x84>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d112      	bne.n	8003b80 <HAL_ADC_ConvCpltCallback+0x6c>
		sensor_values.leak_current = HAL_ADC_GetValue(&hadc2);
 8003b5a:	4810      	ldr	r0, [pc, #64]	; (8003b9c <HAL_ADC_ConvCpltCallback+0x88>)
 8003b5c:	f003 fe59 	bl	8007812 <HAL_ADC_GetValue>
 8003b60:	4603      	mov	r3, r0
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003b66:	831a      	strh	r2, [r3, #24]
		current_raw = HAL_ADC_GetValue(&hadc2);
 8003b68:	480c      	ldr	r0, [pc, #48]	; (8003b9c <HAL_ADC_ConvCpltCallback+0x88>)
 8003b6a:	f003 fe52 	bl	8007812 <HAL_ADC_GetValue>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_ADC_ConvCpltCallback+0x90>)
 8003b74:	801a      	strh	r2, [r3, #0]
		heater_on();
 8003b76:	f7fd fe73 	bl	8001860 <heater_on>
		current_measurement_done = 1;
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <HAL_ADC_ConvCpltCallback+0x84>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
	}
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	200001dd 	.word	0x200001dd
 8003b8c:	20002160 	.word	0x20002160
 8003b90:	20001bf8 	.word	0x20001bf8
 8003b94:	50000100 	.word	0x50000100
 8003b98:	200001dc 	.word	0x200001dc
 8003b9c:	20001c64 	.word	0x20001c64
 8003ba0:	20000038 	.word	0x20000038
 8003ba4:	2000054e 	.word	0x2000054e

08003ba8 <HAL_ADC_LevelOutOfWindowCallback>:

/* ADC watchdog Callback */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
		LCD_draw_earth_fault_popup();
 8003bb0:	f7ff fb38 	bl	8003224 <LCD_draw_earth_fault_popup>
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	0000      	movs	r0, r0
	...

08003bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc4:	ed2d 8b06 	vpush	{d8-d10}
 8003bc8:	b08e      	sub	sp, #56	; 0x38
 8003bca:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bcc:	f002 fe60 	bl	8006890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bd0:	f000 fa7c 	bl	80040cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bd4:	f000 ff76 	bl	8004ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bd8:	f000 ff42 	bl	8004a60 <MX_DMA_Init>
  MX_ADC1_Init();
 8003bdc:	f000 fac2 	bl	8004164 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003be0:	f000 fb58 	bl	8004294 <MX_ADC2_Init>
  MX_CRC_Init();
 8003be4:	f000 fbf4 	bl	80043d0 <MX_CRC_Init>
  MX_TIM1_Init();
 8003be8:	f000 fc92 	bl	8004510 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003bec:	f000 fd30 	bl	8004650 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003bf0:	f000 fd82 	bl	80046f8 <MX_TIM4_Init>
  MX_SPI2_Init();
 8003bf4:	f000 fc4e 	bl	8004494 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003bf8:	f000 fc0c 	bl	8004414 <MX_I2C1_Init>
  MX_TIM17_Init();
 8003bfc:	f000 feb4 	bl	8004968 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003c00:	f000 fee2 	bl	80049c8 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003c04:	f000 fe08 	bl	8004818 <MX_TIM7_Init>
  MX_TIM8_Init();
 8003c08:	f000 fe46 	bl	8004898 <MX_TIM8_Init>
  MX_TIM6_Init();
 8003c0c:	f000 fdce 	bl	80047ac <MX_TIM6_Init>
  MX_TIM16_Init();
 8003c10:	f000 fe82 	bl	8004918 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7fd fdfb 	bl	8001810 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8003c1a:	2108      	movs	r1, #8
 8003c1c:	489c      	ldr	r0, [pc, #624]	; (8003e90 <main+0x2d0>)
 8003c1e:	f009 fdef 	bl	800d800 <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8003c22:	213c      	movs	r1, #60	; 0x3c
 8003c24:	489b      	ldr	r0, [pc, #620]	; (8003e94 <main+0x2d4>)
 8003c26:	f008 ff0d 	bl	800ca44 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4898      	ldr	r0, [pc, #608]	; (8003e90 <main+0x2d0>)
 8003c2e:	f008 fbe3 	bl	800c3f8 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 8003c32:	4b99      	ldr	r3, [pc, #612]	; (8003e98 <main+0x2d8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2205      	movs	r2, #5
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 8003c3a:	4898      	ldr	r0, [pc, #608]	; (8003e9c <main+0x2dc>)
 8003c3c:	f008 faec 	bl	800c218 <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8003c40:	4b97      	ldr	r3, [pc, #604]	; (8003ea0 <main+0x2e0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	4b96      	ldr	r3, [pc, #600]	; (8003ea0 <main+0x2e0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003c50:	217f      	movs	r1, #127	; 0x7f
 8003c52:	4894      	ldr	r0, [pc, #592]	; (8003ea4 <main+0x2e4>)
 8003c54:	f005 f89c 	bl	8008d90 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003c58:	217f      	movs	r1, #127	; 0x7f
 8003c5a:	4893      	ldr	r0, [pc, #588]	; (8003ea8 <main+0x2e8>)
 8003c5c:	f005 f898 	bl	8008d90 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8003c60:	2239      	movs	r2, #57	; 0x39
 8003c62:	4992      	ldr	r1, [pc, #584]	; (8003eac <main+0x2ec>)
 8003c64:	4890      	ldr	r0, [pc, #576]	; (8003ea8 <main+0x2e8>)
 8003c66:	f003 fcbf 	bl	80075e8 <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,20);
 8003c6a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c6e:	4890      	ldr	r0, [pc, #576]	; (8003eb0 <main+0x2f0>)
 8003c70:	f000 ffdd 	bl	8004c2e <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 8003c74:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8003eb4 <main+0x2f4>
 8003c78:	488f      	ldr	r0, [pc, #572]	; (8003eb8 <main+0x2f8>)
 8003c7a:	f000 ffd8 	bl	8004c2e <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 8003c7e:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003c82:	488e      	ldr	r0, [pc, #568]	; (8003ebc <main+0x2fc>)
 8003c84:	f000 ffd3 	bl	8004c2e <Moving_Average_Init>
	Moving_Average_Init(&current_filterStruct,10);
 8003c88:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003c8c:	488c      	ldr	r0, [pc, #560]	; (8003ec0 <main+0x300>)
 8003c8e:	f000 ffce 	bl	8004c2e <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 8003c92:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c96:	488b      	ldr	r0, [pc, #556]	; (8003ec4 <main+0x304>)
 8003c98:	f000 ffc9 	bl	8004c2e <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 8003c9c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003ca0:	4889      	ldr	r0, [pc, #548]	; (8003ec8 <main+0x308>)
 8003ca2:	f000 ffc4 	bl	8004c2e <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 8003ca6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003caa:	4888      	ldr	r0, [pc, #544]	; (8003ecc <main+0x30c>)
 8003cac:	f000 ffbf 	bl	8004c2e <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 8003cb0:	20c8      	movs	r0, #200	; 0xc8
 8003cb2:	f002 fe5d 	bl	8006970 <HAL_Delay>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8003cb6:	f7fd f9d1 	bl	800105c <FlashCheckCRC>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f083 0301 	eor.w	r3, r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <main+0x10c>
  	    	FlashWrite(&default_flash_values);
 8003cc6:	4882      	ldr	r0, [pc, #520]	; (8003ed0 <main+0x310>)
 8003cc8:	f7fd fa6c 	bl	80011a4 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 8003ccc:	4881      	ldr	r0, [pc, #516]	; (8003ed4 <main+0x314>)
 8003cce:	f7fd fa4f 	bl	8001170 <FlashRead>

  	    /* Set screen rotation */
  	    if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8003cd2:	4b80      	ldr	r3, [pc, #512]	; (8003ed4 <main+0x314>)
 8003cd4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	f7fc ff1a 	bl	8000b18 <__aeabi_dcmpeq>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
  	    }
  	    if((flash_values.screen_rotation == 1) || (flash_values.screen_rotation == 3)){
 8003ce8:	4b7a      	ldr	r3, [pc, #488]	; (8003ed4 <main+0x314>)
 8003cea:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	4b79      	ldr	r3, [pc, #484]	; (8003ed8 <main+0x318>)
 8003cf4:	f7fc ff10 	bl	8000b18 <__aeabi_dcmpeq>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
		}

  	    LCD_init();
 8003cfc:	f002 fd5c 	bl	80067b8 <LCD_init>
  	  	LCD_SetRotation(flash_values.screen_rotation);
 8003d00:	4b74      	ldr	r3, [pc, #464]	; (8003ed4 <main+0x314>)
 8003d02:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	f7fc ff75 	bl	8000bf8 <__aeabi_d2uiz>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	4618      	mov	r0, r3
 8003d14:	f002 fafe 	bl	8006314 <LCD_SetRotation>

  		/* Set startup state */
  	    change_state(HALTED);
 8003d18:	2004      	movs	r0, #4
 8003d1a:	f7fd fbeb 	bl	80014f4 <change_state>

  		settings_menue();
 8003d1e:	f7fd fdff 	bl	8001920 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8003d22:	4b6c      	ldr	r3, [pc, #432]	; (8003ed4 <main+0x314>)
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f7fc ff62 	bl	8000bf8 <__aeabi_d2uiz>
 8003d34:	4603      	mov	r3, r0
 8003d36:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_CD_DIRECT);
 8003d38:	4b68      	ldr	r3, [pc, #416]	; (8003edc <main+0x31c>)
 8003d3a:	ed93 7b00 	vldr	d7, [r3]
 8003d3e:	4b68      	ldr	r3, [pc, #416]	; (8003ee0 <main+0x320>)
 8003d40:	ed93 6b00 	vldr	d6, [r3]
 8003d44:	4b67      	ldr	r3, [pc, #412]	; (8003ee4 <main+0x324>)
 8003d46:	ed93 5b00 	vldr	d5, [r3]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	eeb0 2a45 	vmov.f32	s4, s10
 8003d52:	eef0 2a65 	vmov.f32	s5, s11
 8003d56:	eeb0 1a46 	vmov.f32	s2, s12
 8003d5a:	eef0 1a66 	vmov.f32	s3, s13
 8003d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d62:	eef0 0a67 	vmov.f32	s1, s15
 8003d66:	4b60      	ldr	r3, [pc, #384]	; (8003ee8 <main+0x328>)
 8003d68:	4a60      	ldr	r2, [pc, #384]	; (8003eec <main+0x32c>)
 8003d6a:	4961      	ldr	r1, [pc, #388]	; (8003ef0 <main+0x330>)
 8003d6c:	4861      	ldr	r0, [pc, #388]	; (8003ef4 <main+0x334>)
 8003d6e:	f000 ffef 	bl	8004d50 <PID>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8003d72:	4b61      	ldr	r3, [pc, #388]	; (8003ef8 <main+0x338>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2200      	movs	r2, #0
 8003d78:	4619      	mov	r1, r3
 8003d7a:	485e      	ldr	r0, [pc, #376]	; (8003ef4 <main+0x334>)
 8003d7c:	f001 fb0e 	bl	800539c <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 8003d80:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8003e80 <main+0x2c0>
 8003d84:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8003e88 <main+0x2c8>
 8003d88:	485a      	ldr	r0, [pc, #360]	; (8003ef4 <main+0x334>)
 8003d8a:	f001 f9d1 	bl	8005130 <PID_SetOutputLimits>
        PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT);         // Set max and min I limit
 8003d8e:	4b5b      	ldr	r3, [pc, #364]	; (8003efc <main+0x33c>)
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	4690      	mov	r8, r2
 8003d96:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003d9a:	4b58      	ldr	r3, [pc, #352]	; (8003efc <main+0x33c>)
 8003d9c:	ed93 7b00 	vldr	d7, [r3]
 8003da0:	eeb0 1a47 	vmov.f32	s2, s14
 8003da4:	eef0 1a67 	vmov.f32	s3, s15
 8003da8:	ec49 8b10 	vmov	d0, r8, r9
 8003dac:	4851      	ldr	r0, [pc, #324]	; (8003ef4 <main+0x334>)
 8003dae:	f001 fa1d 	bl	80051ec <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 8003db2:	f7fe ff13 	bl	8002bdc <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	e010      	b.n	8003dde <main+0x21e>
  			get_bus_voltage();
 8003dbc:	f7fd fbd0 	bl	8001560 <get_bus_voltage>
  			get_heater_current();
 8003dc0:	f7fd fbfa 	bl	80015b8 <get_heater_current>
  			get_mcu_temp();
 8003dc4:	f7fd fb24 	bl	8001410 <get_mcu_temp>
  			get_thermocouple_temperature();
 8003dc8:	f7fd fc1e 	bl	8001608 <get_thermocouple_temperature>
  			get_handle_type();
 8003dcc:	f7ff fca4 	bl	8003718 <get_handle_type>
  			get_stand_status();
 8003dd0:	f7ff fc0e 	bl	80035f0 <get_stand_status>
  			handle_button_status();
 8003dd4:	f7ff fbb4 	bl	8003540 <handle_button_status>
  		for (int i = 0; i<200;i++){
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2bc7      	cmp	r3, #199	; 0xc7
 8003de2:	ddeb      	ble.n	8003dbc <main+0x1fc>
  		}

  		/* Start-up beep */
  		beep();
 8003de4:	f7ff faec 	bl	80033c0 <beep>
  		HAL_Delay(100);
 8003de8:	2064      	movs	r0, #100	; 0x64
 8003dea:	f002 fdc1 	bl	8006970 <HAL_Delay>
  		beep();
 8003dee:	f7ff fae7 	bl	80033c0 <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003df2:	f002 fdb1 	bl	8006958 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <main+0x340>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	1ad2      	subs	r2, r2, r3
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <main+0x344>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d30e      	bcc.n	8003e24 <main+0x264>
  				get_stand_status();
 8003e06:	f7ff fbf3 	bl	80035f0 <get_stand_status>
  				get_handle_type();
 8003e0a:	f7ff fc85 	bl	8003718 <get_handle_type>
  				get_set_temperature();
 8003e0e:	f7ff fa97 	bl	8003340 <get_set_temperature>
  				handle_button_status();
 8003e12:	f7ff fb95 	bl	8003540 <handle_button_status>
  	  			handle_emergency_shutdown();
 8003e16:	f7ff faf3 	bl	8003400 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 8003e1a:	f002 fd9d 	bl	8006958 <HAL_GetTick>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4a37      	ldr	r2, [pc, #220]	; (8003f00 <main+0x340>)
 8003e22:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 8003e24:	f002 fd98 	bl	8006958 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <main+0x348>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <main+0x34c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d30a      	bcc.n	8003e4e <main+0x28e>
  				get_bus_voltage();
 8003e38:	f7fd fb92 	bl	8001560 <get_bus_voltage>
  				get_heater_current();
 8003e3c:	f7fd fbbc 	bl	80015b8 <get_heater_current>
  				get_mcu_temp();
 8003e40:	f7fd fae6 	bl	8001410 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 8003e44:	f002 fd88 	bl	8006958 <HAL_GetTick>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <main+0x348>)
 8003e4c:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8003e4e:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <main+0x350>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	dc68      	bgt.n	8003f28 <main+0x368>
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	da5e      	bge.n	8003f18 <main+0x358>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <main+0x2a4>
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d007      	beq.n	8003e72 <main+0x2b2>
 8003e62:	e061      	b.n	8003f28 <main+0x368>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <main+0x354>)
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	491f      	ldr	r1, [pc, #124]	; (8003ee8 <main+0x328>)
 8003e6c:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003e70:	e05a      	b.n	8003f28 <main+0x368>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8003e72:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <main+0x314>)
 8003e74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e78:	491b      	ldr	r1, [pc, #108]	; (8003ee8 <main+0x328>)
 8003e7a:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003e7e:	e053      	b.n	8003f28 <main+0x368>
 8003e80:	00000000 	.word	0x00000000
 8003e84:	407f4000 	.word	0x407f4000
	...
 8003e90:	20001e6c 	.word	0x20001e6c
 8003e94:	20001eb8 	.word	0x20001eb8
 8003e98:	20001f04 	.word	0x20001f04
 8003e9c:	20001f50 	.word	0x20001f50
 8003ea0:	20001f9c 	.word	0x20001f9c
 8003ea4:	20001c64 	.word	0x20001c64
 8003ea8:	20001bf8 	.word	0x20001bf8
 8003eac:	200004dc 	.word	0x200004dc
 8003eb0:	200005c4 	.word	0x200005c4
 8003eb4:	42c80000 	.word	0x42c80000
 8003eb8:	200008f0 	.word	0x200008f0
 8003ebc:	20000c1c 	.word	0x20000c1c
 8003ec0:	20000f48 	.word	0x20000f48
 8003ec4:	20001274 	.word	0x20001274
 8003ec8:	200015a0 	.word	0x200015a0
 8003ecc:	200018cc 	.word	0x200018cc
 8003ed0:	20000088 	.word	0x20000088
 8003ed4:	20000558 	.word	0x20000558
 8003ed8:	3ff00000 	.word	0x3ff00000
 8003edc:	20000498 	.word	0x20000498
 8003ee0:	200004a0 	.word	0x200004a0
 8003ee4:	200004a8 	.word	0x200004a8
 8003ee8:	200005b0 	.word	0x200005b0
 8003eec:	200005a8 	.word	0x200005a8
 8003ef0:	20000040 	.word	0x20000040
 8003ef4:	20002160 	.word	0x20002160
 8003ef8:	2000000c 	.word	0x2000000c
 8003efc:	20000020 	.word	0x20000020
 8003f00:	20000484 	.word	0x20000484
 8003f04:	20000014 	.word	0x20000014
 8003f08:	20000488 	.word	0x20000488
 8003f0c:	20000018 	.word	0x20000018
 8003f10:	2000001d 	.word	0x2000001d
 8003f14:	20000038 	.word	0x20000038
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 8003f18:	4959      	ldr	r1, [pc, #356]	; (8004080 <main+0x4c0>)
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003f26:	bf00      	nop
  			//PID_SetILimits(&TPID, -PID_MAX_I_LIMIT_tuning, PID_MAX_I_LIMIT_tuning); 	// Set max and min I limit
  			//sensor_values.set_temperature = temperature_tuning;
  			// ----------------------------------------------

  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8003f28:	f002 fd16 	bl	8006958 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b55      	ldr	r3, [pc, #340]	; (8004084 <main+0x4c4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1ad2      	subs	r2, r2, r3
 8003f34:	4b54      	ldr	r3, [pc, #336]	; (8004088 <main+0x4c8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d371      	bcc.n	8004020 <main+0x460>
  				memset(&buffer, '\0', sizeof(buffer));
 8003f3c:	2228      	movs	r2, #40	; 0x28
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4852      	ldr	r0, [pc, #328]	; (800408c <main+0x4cc>)
 8003f42:	f00e f984 	bl	801224e <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f46:	4b52      	ldr	r3, [pc, #328]	; (8004090 <main+0x4d0>)
 8003f48:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8003f4c:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <main+0x4c0>)
 8003f4e:	e9d3 8900 	ldrd	r8, r9, [r3]
  						sensor_values.thermocouple_temperature, PID_setpoint,
						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f52:	4b50      	ldr	r3, [pc, #320]	; (8004094 <main+0x4d4>)
 8003f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <main+0x4d8>)
 8003f5e:	f7fc fc9d 	bl	800089c <__aeabi_ddiv>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4610      	mov	r0, r2
 8003f68:	4619      	mov	r1, r3
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	4b4b      	ldr	r3, [pc, #300]	; (800409c <main+0x4dc>)
 8003f70:	f7fc fb6a 	bl	8000648 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	ec43 2b19 	vmov	d9, r2, r3
						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f7c:	4848      	ldr	r0, [pc, #288]	; (80040a0 <main+0x4e0>)
 8003f7e:	f001 fa51 	bl	8005424 <PID_GetPpart>
 8003f82:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	4b46      	ldr	r3, [pc, #280]	; (80040a4 <main+0x4e4>)
 8003f8c:	f7fc fc86 	bl	800089c <__aeabi_ddiv>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	ec43 2b1a 	vmov	d10, r2, r3
						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f98:	4841      	ldr	r0, [pc, #260]	; (80040a0 <main+0x4e0>)
 8003f9a:	f001 fa55 	bl	8005448 <PID_GetIpart>
 8003f9e:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <main+0x4e4>)
 8003fa8:	f7fc fc78 	bl	800089c <__aeabi_ddiv>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	ec43 2b18 	vmov	d8, r2, r3
						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003fb4:	483a      	ldr	r0, [pc, #232]	; (80040a0 <main+0x4e0>)
 8003fb6:	f001 fa59 	bl	800546c <PID_GetDpart>
 8003fba:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <main+0x4e4>)
 8003fc4:	f7fc fc6a 	bl	800089c <__aeabi_ddiv>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003fd0:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <main+0x4d0>)
 8003fd2:	695b      	ldr	r3, [r3, #20]
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc fadf 	bl	8000598 <__aeabi_f2d>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003fe2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003fe6:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003fea:	ed8d ab04 	vstr	d10, [sp, #16]
 8003fee:	ed8d 9b02 	vstr	d9, [sp, #8]
 8003ff2:	e9cd 8900 	strd	r8, r9, [sp]
 8003ff6:	4652      	mov	r2, sl
 8003ff8:	465b      	mov	r3, fp
 8003ffa:	492b      	ldr	r1, [pc, #172]	; (80040a8 <main+0x4e8>)
 8003ffc:	4823      	ldr	r0, [pc, #140]	; (800408c <main+0x4cc>)
 8003ffe:	f00e f8c3 	bl	8012188 <siprintf>
  				//CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
  			    HAL_UART_Transmit_IT(&huart1, (uint8_t *) buffer, strlen(buffer));
 8004002:	4822      	ldr	r0, [pc, #136]	; (800408c <main+0x4cc>)
 8004004:	f7fc f95c 	bl	80002c0 <strlen>
 8004008:	4603      	mov	r3, r0
 800400a:	b29b      	uxth	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	491f      	ldr	r1, [pc, #124]	; (800408c <main+0x4cc>)
 8004010:	4826      	ldr	r0, [pc, #152]	; (80040ac <main+0x4ec>)
 8004012:	f009 fec7 	bl	800dda4 <HAL_UART_Transmit_IT>
  				previous_millis_debug = HAL_GetTick();
 8004016:	f002 fc9f 	bl	8006958 <HAL_GetTick>
 800401a:	4603      	mov	r3, r0
 800401c:	4a19      	ldr	r2, [pc, #100]	; (8004084 <main+0x4c4>)
 800401e:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 8004020:	f002 fc9a 	bl	8006958 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <main+0x4f0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <main+0x4f4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d311      	bcc.n	8004058 <main+0x498>
  					if(thermocouple_measurement_done == 1){ //Only take current measurement if thermocouple measurement is not ongoing
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <main+0x4f8>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d10d      	bne.n	8004058 <main+0x498>
						current_measurement_done = 0;
 800403c:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <main+0x4fc>)
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 8004042:	20fa      	movs	r0, #250	; 0xfa
 8004044:	f7fd fbe4 	bl	8001810 <set_heater_duty>
						current_measurement_requested = 1;
 8004048:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <main+0x500>)
 800404a:	2201      	movs	r2, #1
 800404c:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 800404e:	f002 fc83 	bl	8006958 <HAL_GetTick>
 8004052:	4603      	mov	r3, r0
 8004054:	4a16      	ldr	r2, [pc, #88]	; (80040b0 <main+0x4f0>)
 8004056:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8004058:	f002 fc7e 	bl	8006958 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <main+0x504>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	1ad2      	subs	r2, r2, r3
 8004064:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <main+0x508>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	f4ff aec2 	bcc.w	8003df2 <main+0x232>
  				update_display();
 800406e:	f7fd ff8b 	bl	8001f88 <update_display>
  				previous_millis_display = HAL_GetTick();
 8004072:	f002 fc71 	bl	8006958 <HAL_GetTick>
 8004076:	4603      	mov	r3, r0
 8004078:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <main+0x504>)
 800407a:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 800407c:	e6b9      	b.n	8003df2 <main+0x232>
 800407e:	bf00      	nop
 8004080:	200005b0 	.word	0x200005b0
 8004084:	20000470 	.word	0x20000470
 8004088:	20000008 	.word	0x20000008
 800408c:	200004b0 	.word	0x200004b0
 8004090:	20000038 	.word	0x20000038
 8004094:	200005a8 	.word	0x200005a8
 8004098:	407f4000 	.word	0x407f4000
 800409c:	40590000 	.word	0x40590000
 80040a0:	20002160 	.word	0x20002160
 80040a4:	40240000 	.word	0x40240000
 80040a8:	08015f58 	.word	0x08015f58
 80040ac:	200020cc 	.word	0x200020cc
 80040b0:	20000480 	.word	0x20000480
 80040b4:	20000010 	.word	0x20000010
 80040b8:	200001dd 	.word	0x200001dd
 80040bc:	200001dc 	.word	0x200001dc
 80040c0:	200005c0 	.word	0x200005c0
 80040c4:	2000046c 	.word	0x2000046c
 80040c8:	20000004 	.word	0x20000004

080040cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b094      	sub	sp, #80	; 0x50
 80040d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040d2:	f107 0318 	add.w	r3, r7, #24
 80040d6:	2238      	movs	r2, #56	; 0x38
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f00e f8b7 	bl	801224e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	60da      	str	r2, [r3, #12]
 80040ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80040ee:	2000      	movs	r0, #0
 80040f0:	f006 fb54 	bl	800a79c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040f4:	2302      	movs	r3, #2
 80040f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040fe:	2340      	movs	r3, #64	; 0x40
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004102:	2302      	movs	r3, #2
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004106:	2302      	movs	r3, #2
 8004108:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800410a:	2304      	movs	r3, #4
 800410c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800410e:	2355      	movs	r3, #85	; 0x55
 8004110:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004112:	2302      	movs	r3, #2
 8004114:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004116:	2302      	movs	r3, #2
 8004118:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800411a:	2302      	movs	r3, #2
 800411c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800411e:	f107 0318 	add.w	r3, r7, #24
 8004122:	4618      	mov	r0, r3
 8004124:	f006 fbee 	bl	800a904 <HAL_RCC_OscConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800412e:	f000 fd79 	bl	8004c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004132:	230f      	movs	r3, #15
 8004134:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004136:	2303      	movs	r3, #3
 8004138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	2104      	movs	r1, #4
 800414a:	4618      	mov	r0, r3
 800414c:	f006 feec 	bl	800af28 <HAL_RCC_ClockConfig>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004156:	f000 fd65 	bl	8004c24 <Error_Handler>
  }
}
 800415a:	bf00      	nop
 800415c:	3750      	adds	r7, #80	; 0x50
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08c      	sub	sp, #48	; 0x30
 8004168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800416a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	2220      	movs	r2, #32
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f00e f866 	bl	801224e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004182:	4b40      	ldr	r3, [pc, #256]	; (8004284 <MX_ADC1_Init+0x120>)
 8004184:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004188:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800418a:	4b3e      	ldr	r3, [pc, #248]	; (8004284 <MX_ADC1_Init+0x120>)
 800418c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004190:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004192:	4b3c      	ldr	r3, [pc, #240]	; (8004284 <MX_ADC1_Init+0x120>)
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004198:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <MX_ADC1_Init+0x120>)
 800419a:	2200      	movs	r2, #0
 800419c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800419e:	4b39      	ldr	r3, [pc, #228]	; (8004284 <MX_ADC1_Init+0x120>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <MX_ADC1_Init+0x120>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <MX_ADC1_Init+0x120>)
 80041ac:	2204      	movs	r2, #4
 80041ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80041b0:	4b34      	ldr	r3, [pc, #208]	; (8004284 <MX_ADC1_Init+0x120>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80041b6:	4b33      	ldr	r3, [pc, #204]	; (8004284 <MX_ADC1_Init+0x120>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80041bc:	4b31      	ldr	r3, [pc, #196]	; (8004284 <MX_ADC1_Init+0x120>)
 80041be:	2203      	movs	r2, #3
 80041c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041c2:	4b30      	ldr	r3, [pc, #192]	; (8004284 <MX_ADC1_Init+0x120>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <MX_ADC1_Init+0x120>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041d0:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <MX_ADC1_Init+0x120>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <MX_ADC1_Init+0x120>)
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <MX_ADC1_Init+0x120>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <MX_ADC1_Init+0x120>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041ec:	4825      	ldr	r0, [pc, #148]	; (8004284 <MX_ADC1_Init+0x120>)
 80041ee:	f002 ff47 	bl	8007080 <HAL_ADC_Init>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80041f8:	f000 fd14 	bl	8004c24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80041fc:	2300      	movs	r3, #0
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004204:	4619      	mov	r1, r3
 8004206:	481f      	ldr	r0, [pc, #124]	; (8004284 <MX_ADC1_Init+0x120>)
 8004208:	f004 fe56 	bl	8008eb8 <HAL_ADCEx_MultiModeConfigChannel>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004212:	f000 fd07 	bl	8004c24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <MX_ADC1_Init+0x124>)
 8004218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800421a:	2306      	movs	r3, #6
 800421c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800421e:	2306      	movs	r3, #6
 8004220:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004222:	237f      	movs	r3, #127	; 0x7f
 8004224:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004226:	2304      	movs	r3, #4
 8004228:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4814      	ldr	r0, [pc, #80]	; (8004284 <MX_ADC1_Init+0x120>)
 8004234:	f003 fd28 	bl	8007c88 <HAL_ADC_ConfigChannel>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800423e:	f000 fcf1 	bl	8004c24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <MX_ADC1_Init+0x128>)
 8004244:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004246:	230c      	movs	r3, #12
 8004248:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	4619      	mov	r1, r3
 800424e:	480d      	ldr	r0, [pc, #52]	; (8004284 <MX_ADC1_Init+0x120>)
 8004250:	f003 fd1a 	bl	8007c88 <HAL_ADC_ConfigChannel>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800425a:	f000 fce3 	bl	8004c24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <MX_ADC1_Init+0x12c>)
 8004260:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004262:	2312      	movs	r3, #18
 8004264:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004266:	1d3b      	adds	r3, r7, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4806      	ldr	r0, [pc, #24]	; (8004284 <MX_ADC1_Init+0x120>)
 800426c:	f003 fd0c 	bl	8007c88 <HAL_ADC_ConfigChannel>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8004276:	f000 fcd5 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800427a:	bf00      	nop
 800427c:	3730      	adds	r7, #48	; 0x30
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20001bf8 	.word	0x20001bf8
 8004288:	0c900008 	.word	0x0c900008
 800428c:	10c00010 	.word	0x10c00010
 8004290:	c3210000 	.word	0xc3210000

08004294 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b090      	sub	sp, #64	; 0x40
 8004298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800429a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	609a      	str	r2, [r3, #8]
 80042a6:	60da      	str	r2, [r3, #12]
 80042a8:	611a      	str	r2, [r3, #16]
 80042aa:	615a      	str	r2, [r3, #20]
 80042ac:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	2220      	movs	r2, #32
 80042b2:	2100      	movs	r1, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	f00d ffca 	bl	801224e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80042ba:	4b40      	ldr	r3, [pc, #256]	; (80043bc <MX_ADC2_Init+0x128>)
 80042bc:	4a40      	ldr	r2, [pc, #256]	; (80043c0 <MX_ADC2_Init+0x12c>)
 80042be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80042c0:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <MX_ADC2_Init+0x128>)
 80042c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80042c8:	4b3c      	ldr	r3, [pc, #240]	; (80043bc <MX_ADC2_Init+0x128>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042ce:	4b3b      	ldr	r3, [pc, #236]	; (80043bc <MX_ADC2_Init+0x128>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <MX_ADC2_Init+0x128>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80042da:	4b38      	ldr	r3, [pc, #224]	; (80043bc <MX_ADC2_Init+0x128>)
 80042dc:	2201      	movs	r2, #1
 80042de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042e0:	4b36      	ldr	r3, [pc, #216]	; (80043bc <MX_ADC2_Init+0x128>)
 80042e2:	2204      	movs	r2, #4
 80042e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80042e6:	4b35      	ldr	r3, [pc, #212]	; (80043bc <MX_ADC2_Init+0x128>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80042ec:	4b33      	ldr	r3, [pc, #204]	; (80043bc <MX_ADC2_Init+0x128>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80042f2:	4b32      	ldr	r3, [pc, #200]	; (80043bc <MX_ADC2_Init+0x128>)
 80042f4:	2202      	movs	r2, #2
 80042f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80042f8:	4b30      	ldr	r3, [pc, #192]	; (80043bc <MX_ADC2_Init+0x128>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004300:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <MX_ADC2_Init+0x128>)
 8004302:	2200      	movs	r2, #0
 8004304:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004306:	4b2d      	ldr	r3, [pc, #180]	; (80043bc <MX_ADC2_Init+0x128>)
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800430c:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <MX_ADC2_Init+0x128>)
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004314:	4b29      	ldr	r3, [pc, #164]	; (80043bc <MX_ADC2_Init+0x128>)
 8004316:	2200      	movs	r2, #0
 8004318:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800431a:	4b28      	ldr	r3, [pc, #160]	; (80043bc <MX_ADC2_Init+0x128>)
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004322:	4826      	ldr	r0, [pc, #152]	; (80043bc <MX_ADC2_Init+0x128>)
 8004324:	f002 feac 	bl	8007080 <HAL_ADC_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 800432e:	f000 fc79 	bl	8004c24 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <MX_ADC2_Init+0x130>)
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8004336:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 800433c:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <MX_ADC2_Init+0x134>)
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 8004340:	2301      	movs	r3, #1
 8004342:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 2000;
 8004346:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800434a:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8004350:	2300      	movs	r3, #0
 8004352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8004354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004358:	4619      	mov	r1, r3
 800435a:	4818      	ldr	r0, [pc, #96]	; (80043bc <MX_ADC2_Init+0x128>)
 800435c:	f004 f884 	bl	8008468 <HAL_ADC_AnalogWDGConfig>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8004366:	f000 fc5d 	bl	8004c24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800436a:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <MX_ADC2_Init+0x134>)
 800436c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800436e:	2306      	movs	r3, #6
 8004370:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004376:	237f      	movs	r3, #127	; 0x7f
 8004378:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800437a:	2304      	movs	r3, #4
 800437c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	4619      	mov	r1, r3
 8004386:	480d      	ldr	r0, [pc, #52]	; (80043bc <MX_ADC2_Init+0x128>)
 8004388:	f003 fc7e 	bl	8007c88 <HAL_ADC_ConfigChannel>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 8004392:	f000 fc47 	bl	8004c24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <MX_ADC2_Init+0x138>)
 8004398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800439a:	230c      	movs	r3, #12
 800439c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4806      	ldr	r0, [pc, #24]	; (80043bc <MX_ADC2_Init+0x128>)
 80043a4:	f003 fc70 	bl	8007c88 <HAL_ADC_ConfigChannel>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80043ae:	f000 fc39 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80043b2:	bf00      	nop
 80043b4:	3740      	adds	r7, #64	; 0x40
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20001c64 	.word	0x20001c64
 80043c0:	50000100 	.word	0x50000100
 80043c4:	7dc00000 	.word	0x7dc00000
 80043c8:	08600004 	.word	0x08600004
 80043cc:	2a000400 	.word	0x2a000400

080043d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <MX_CRC_Init+0x3c>)
 80043d6:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <MX_CRC_Init+0x40>)
 80043d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80043da:	4b0c      	ldr	r3, [pc, #48]	; (800440c <MX_CRC_Init+0x3c>)
 80043dc:	2200      	movs	r2, #0
 80043de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <MX_CRC_Init+0x3c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <MX_CRC_Init+0x3c>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80043ec:	4b07      	ldr	r3, [pc, #28]	; (800440c <MX_CRC_Init+0x3c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <MX_CRC_Init+0x3c>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80043f8:	4804      	ldr	r0, [pc, #16]	; (800440c <MX_CRC_Init+0x3c>)
 80043fa:	f004 ff11 	bl	8009220 <HAL_CRC_Init>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004404:	f000 fc0e 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20001d30 	.word	0x20001d30
 8004410:	40023000 	.word	0x40023000

08004414 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <MX_I2C1_Init+0x74>)
 800441a:	4a1c      	ldr	r2, [pc, #112]	; (800448c <MX_I2C1_Init+0x78>)
 800441c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <MX_I2C1_Init+0x74>)
 8004420:	4a1b      	ldr	r2, [pc, #108]	; (8004490 <MX_I2C1_Init+0x7c>)
 8004422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <MX_I2C1_Init+0x74>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <MX_I2C1_Init+0x74>)
 800442c:	2201      	movs	r2, #1
 800442e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004430:	4b15      	ldr	r3, [pc, #84]	; (8004488 <MX_I2C1_Init+0x74>)
 8004432:	2200      	movs	r2, #0
 8004434:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <MX_I2C1_Init+0x74>)
 8004438:	2200      	movs	r2, #0
 800443a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <MX_I2C1_Init+0x74>)
 800443e:	2200      	movs	r2, #0
 8004440:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_I2C1_Init+0x74>)
 8004444:	2200      	movs	r2, #0
 8004446:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <MX_I2C1_Init+0x74>)
 800444a:	2200      	movs	r2, #0
 800444c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800444e:	480e      	ldr	r0, [pc, #56]	; (8004488 <MX_I2C1_Init+0x74>)
 8004450:	f006 f872 	bl	800a538 <HAL_I2C_Init>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800445a:	f000 fbe3 	bl	8004c24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800445e:	2100      	movs	r1, #0
 8004460:	4809      	ldr	r0, [pc, #36]	; (8004488 <MX_I2C1_Init+0x74>)
 8004462:	f006 f904 	bl	800a66e <HAL_I2CEx_ConfigAnalogFilter>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800446c:	f000 fbda 	bl	8004c24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004470:	2100      	movs	r1, #0
 8004472:	4805      	ldr	r0, [pc, #20]	; (8004488 <MX_I2C1_Init+0x74>)
 8004474:	f006 f946 	bl	800a704 <HAL_I2CEx_ConfigDigitalFilter>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800447e:	f000 fbd1 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20001d54 	.word	0x20001d54
 800448c:	40005400 	.word	0x40005400
 8004490:	30a0a7fb 	.word	0x30a0a7fb

08004494 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004498:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <MX_SPI2_Init+0x74>)
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <MX_SPI2_Init+0x78>)
 800449c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800449e:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <MX_SPI2_Init+0x74>)
 80044a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <MX_SPI2_Init+0x74>)
 80044a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80044ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <MX_SPI2_Init+0x74>)
 80044b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <MX_SPI2_Init+0x74>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <MX_SPI2_Init+0x74>)
 80044be:	2200      	movs	r2, #0
 80044c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <MX_SPI2_Init+0x74>)
 80044c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80044ca:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <MX_SPI2_Init+0x74>)
 80044cc:	2210      	movs	r2, #16
 80044ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <MX_SPI2_Init+0x74>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <MX_SPI2_Init+0x74>)
 80044d8:	2200      	movs	r2, #0
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <MX_SPI2_Init+0x74>)
 80044de:	2200      	movs	r2, #0
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <MX_SPI2_Init+0x74>)
 80044e4:	2207      	movs	r2, #7
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <MX_SPI2_Init+0x74>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <MX_SPI2_Init+0x74>)
 80044f0:	2208      	movs	r2, #8
 80044f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80044f4:	4804      	ldr	r0, [pc, #16]	; (8004508 <MX_SPI2_Init+0x74>)
 80044f6:	f007 f923 	bl	800b740 <HAL_SPI_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8004500:	f000 fb90 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20001da8 	.word	0x20001da8
 800450c:	40003800 	.word	0x40003800

08004510 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b098      	sub	sp, #96	; 0x60
 8004514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004516:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004522:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	609a      	str	r2, [r3, #8]
 800452e:	60da      	str	r2, [r3, #12]
 8004530:	611a      	str	r2, [r3, #16]
 8004532:	615a      	str	r2, [r3, #20]
 8004534:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	2234      	movs	r2, #52	; 0x34
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f00d fe86 	bl	801224e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <MX_TIM1_Init+0x138>)
 8004544:	4a41      	ldr	r2, [pc, #260]	; (800464c <MX_TIM1_Init+0x13c>)
 8004546:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <MX_TIM1_Init+0x138>)
 800454a:	2213      	movs	r2, #19
 800454c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800454e:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <MX_TIM1_Init+0x138>)
 8004550:	2200      	movs	r2, #0
 8004552:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8004554:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <MX_TIM1_Init+0x138>)
 8004556:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800455a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800455c:	4b3a      	ldr	r3, [pc, #232]	; (8004648 <MX_TIM1_Init+0x138>)
 800455e:	2200      	movs	r2, #0
 8004560:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004562:	4b39      	ldr	r3, [pc, #228]	; (8004648 <MX_TIM1_Init+0x138>)
 8004564:	2200      	movs	r2, #0
 8004566:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004568:	4b37      	ldr	r3, [pc, #220]	; (8004648 <MX_TIM1_Init+0x138>)
 800456a:	2280      	movs	r2, #128	; 0x80
 800456c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800456e:	4836      	ldr	r0, [pc, #216]	; (8004648 <MX_TIM1_Init+0x138>)
 8004570:	f007 feeb 	bl	800c34a <HAL_TIM_PWM_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800457a:	f000 fb53 	bl	8004c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800457e:	2300      	movs	r3, #0
 8004580:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004586:	2300      	movs	r3, #0
 8004588:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800458a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800458e:	4619      	mov	r1, r3
 8004590:	482d      	ldr	r0, [pc, #180]	; (8004648 <MX_TIM1_Init+0x138>)
 8004592:	f009 fa3d 	bl	800da10 <HAL_TIMEx_MasterConfigSynchronization>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800459c:	f000 fb42 	bl	8004c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045a0:	2360      	movs	r3, #96	; 0x60
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045a8:	2300      	movs	r3, #0
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80045ac:	2300      	movs	r3, #0
 80045ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80045b4:	2300      	movs	r3, #0
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045c0:	2200      	movs	r2, #0
 80045c2:	4619      	mov	r1, r3
 80045c4:	4820      	ldr	r0, [pc, #128]	; (8004648 <MX_TIM1_Init+0x138>)
 80045c6:	f008 fc3b 	bl	800ce40 <HAL_TIM_PWM_ConfigChannel>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80045d0:	f000 fb28 	bl	8004c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80045d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045d8:	2208      	movs	r2, #8
 80045da:	4619      	mov	r1, r3
 80045dc:	481a      	ldr	r0, [pc, #104]	; (8004648 <MX_TIM1_Init+0x138>)
 80045de:	f008 fc2f 	bl	800ce40 <HAL_TIM_PWM_ConfigChannel>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80045e8:	f000 fb1c 	bl	8004c24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004604:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800460a:	2300      	movs	r3, #0
 800460c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800460e:	2300      	movs	r3, #0
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800461c:	2300      	movs	r3, #0
 800461e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004620:	2300      	movs	r3, #0
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004624:	1d3b      	adds	r3, r7, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4807      	ldr	r0, [pc, #28]	; (8004648 <MX_TIM1_Init+0x138>)
 800462a:	f009 fa73 	bl	800db14 <HAL_TIMEx_ConfigBreakDeadTime>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004634:	f000 faf6 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004638:	4803      	ldr	r0, [pc, #12]	; (8004648 <MX_TIM1_Init+0x138>)
 800463a:	f001 fa9f 	bl	8005b7c <HAL_TIM_MspPostInit>

}
 800463e:	bf00      	nop
 8004640:	3760      	adds	r7, #96	; 0x60
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20001e6c 	.word	0x20001e6c
 800464c:	40012c00 	.word	0x40012c00

08004650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08c      	sub	sp, #48	; 0x30
 8004654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f00d fdf5 	bl	801224e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004664:	463b      	mov	r3, r7
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800466e:	4b21      	ldr	r3, [pc, #132]	; (80046f4 <MX_TIM2_Init+0xa4>)
 8004670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004674:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004676:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <MX_TIM2_Init+0xa4>)
 8004678:	2200      	movs	r2, #0
 800467a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467c:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <MX_TIM2_Init+0xa4>)
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <MX_TIM2_Init+0xa4>)
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800468a:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <MX_TIM2_Init+0xa4>)
 800468c:	2200      	movs	r2, #0
 800468e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <MX_TIM2_Init+0xa4>)
 8004692:	2200      	movs	r2, #0
 8004694:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004696:	2303      	movs	r3, #3
 8004698:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800469a:	2302      	movs	r3, #2
 800469c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800469e:	2301      	movs	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80046aa:	2300      	movs	r3, #0
 80046ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80046ae:	2301      	movs	r3, #1
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80046b2:	2300      	movs	r3, #0
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80046ba:	f107 030c 	add.w	r3, r7, #12
 80046be:	4619      	mov	r1, r3
 80046c0:	480c      	ldr	r0, [pc, #48]	; (80046f4 <MX_TIM2_Init+0xa4>)
 80046c2:	f008 f919 	bl	800c8f8 <HAL_TIM_Encoder_Init>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80046cc:	f000 faaa 	bl	8004c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046d0:	2300      	movs	r3, #0
 80046d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046d8:	463b      	mov	r3, r7
 80046da:	4619      	mov	r1, r3
 80046dc:	4805      	ldr	r0, [pc, #20]	; (80046f4 <MX_TIM2_Init+0xa4>)
 80046de:	f009 f997 	bl	800da10 <HAL_TIMEx_MasterConfigSynchronization>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80046e8:	f000 fa9c 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80046ec:	bf00      	nop
 80046ee:	3730      	adds	r7, #48	; 0x30
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20001eb8 	.word	0x20001eb8

080046f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046fe:	f107 031c 	add.w	r3, r7, #28
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800470a:	463b      	mov	r3, r7
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
 8004718:	615a      	str	r2, [r3, #20]
 800471a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800471c:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <MX_TIM4_Init+0xac>)
 800471e:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <MX_TIM4_Init+0xb0>)
 8004720:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8004722:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <MX_TIM4_Init+0xac>)
 8004724:	f242 720f 	movw	r2, #9999	; 0x270f
 8004728:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800472a:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <MX_TIM4_Init+0xac>)
 800472c:	2200      	movs	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8004730:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <MX_TIM4_Init+0xac>)
 8004732:	220a      	movs	r2, #10
 8004734:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004736:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <MX_TIM4_Init+0xac>)
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800473c:	4b19      	ldr	r3, [pc, #100]	; (80047a4 <MX_TIM4_Init+0xac>)
 800473e:	2280      	movs	r2, #128	; 0x80
 8004740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004742:	4818      	ldr	r0, [pc, #96]	; (80047a4 <MX_TIM4_Init+0xac>)
 8004744:	f007 fe01 	bl	800c34a <HAL_TIM_PWM_Init>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800474e:	f000 fa69 	bl	8004c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004756:	2300      	movs	r3, #0
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800475a:	f107 031c 	add.w	r3, r7, #28
 800475e:	4619      	mov	r1, r3
 8004760:	4810      	ldr	r0, [pc, #64]	; (80047a4 <MX_TIM4_Init+0xac>)
 8004762:	f009 f955 	bl	800da10 <HAL_TIMEx_MasterConfigSynchronization>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800476c:	f000 fa5a 	bl	8004c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004770:	2360      	movs	r3, #96	; 0x60
 8004772:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800477c:	2300      	movs	r3, #0
 800477e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004780:	463b      	mov	r3, r7
 8004782:	2204      	movs	r2, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4807      	ldr	r0, [pc, #28]	; (80047a4 <MX_TIM4_Init+0xac>)
 8004788:	f008 fb5a 	bl	800ce40 <HAL_TIM_PWM_ConfigChannel>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8004792:	f000 fa47 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004796:	4803      	ldr	r0, [pc, #12]	; (80047a4 <MX_TIM4_Init+0xac>)
 8004798:	f001 f9f0 	bl	8005b7c <HAL_TIM_MspPostInit>

}
 800479c:	bf00      	nop
 800479e:	3728      	adds	r7, #40	; 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20001f04 	.word	0x20001f04
 80047a8:	40000800 	.word	0x40000800

080047ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80047bc:	4b14      	ldr	r3, [pc, #80]	; (8004810 <MX_TIM6_Init+0x64>)
 80047be:	4a15      	ldr	r2, [pc, #84]	; (8004814 <MX_TIM6_Init+0x68>)
 80047c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <MX_TIM6_Init+0x64>)
 80047c4:	f244 2267 	movw	r2, #16999	; 0x4267
 80047c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <MX_TIM6_Init+0x64>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <MX_TIM6_Init+0x64>)
 80047d2:	22fa      	movs	r2, #250	; 0xfa
 80047d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047d6:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <MX_TIM6_Init+0x64>)
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80047dc:	480c      	ldr	r0, [pc, #48]	; (8004810 <MX_TIM6_Init+0x64>)
 80047de:	f007 fcc3 	bl	800c168 <HAL_TIM_Base_Init>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80047e8:	f000 fa1c 	bl	8004c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ec:	2300      	movs	r3, #0
 80047ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80047f4:	1d3b      	adds	r3, r7, #4
 80047f6:	4619      	mov	r1, r3
 80047f8:	4805      	ldr	r0, [pc, #20]	; (8004810 <MX_TIM6_Init+0x64>)
 80047fa:	f009 f909 	bl	800da10 <HAL_TIMEx_MasterConfigSynchronization>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004804:	f000 fa0e 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20001f50 	.word	0x20001f50
 8004814:	40001000 	.word	0x40001000

08004818 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <MX_TIM7_Init+0x78>)
 800482a:	4a1a      	ldr	r2, [pc, #104]	; (8004894 <MX_TIM7_Init+0x7c>)
 800482c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8500-1;
 800482e:	4b18      	ldr	r3, [pc, #96]	; (8004890 <MX_TIM7_Init+0x78>)
 8004830:	f242 1233 	movw	r2, #8499	; 0x2133
 8004834:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004836:	4b16      	ldr	r3, [pc, #88]	; (8004890 <MX_TIM7_Init+0x78>)
 8004838:	2200      	movs	r2, #0
 800483a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 800483c:	4b14      	ldr	r3, [pc, #80]	; (8004890 <MX_TIM7_Init+0x78>)
 800483e:	2209      	movs	r2, #9
 8004840:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004842:	4b13      	ldr	r3, [pc, #76]	; (8004890 <MX_TIM7_Init+0x78>)
 8004844:	2280      	movs	r2, #128	; 0x80
 8004846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004848:	4811      	ldr	r0, [pc, #68]	; (8004890 <MX_TIM7_Init+0x78>)
 800484a:	f007 fc8d 	bl	800c168 <HAL_TIM_Base_Init>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004854:	f000 f9e6 	bl	8004c24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8004858:	2108      	movs	r1, #8
 800485a:	480d      	ldr	r0, [pc, #52]	; (8004890 <MX_TIM7_Init+0x78>)
 800485c:	f007 fffc 	bl	800c858 <HAL_TIM_OnePulse_Init>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8004866:	f000 f9dd 	bl	8004c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800486a:	2320      	movs	r3, #32
 800486c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4806      	ldr	r0, [pc, #24]	; (8004890 <MX_TIM7_Init+0x78>)
 8004878:	f009 f8ca 	bl	800da10 <HAL_TIMEx_MasterConfigSynchronization>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8004882:	f000 f9cf 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20001f9c 	.word	0x20001f9c
 8004894:	40001400 	.word	0x40001400

08004898 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800489e:	1d3b      	adds	r3, r7, #4
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <MX_TIM8_Init+0x78>)
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <MX_TIM8_Init+0x7c>)
 80048ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80048ae:	4b18      	ldr	r3, [pc, #96]	; (8004910 <MX_TIM8_Init+0x78>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048b4:	4b16      	ldr	r3, [pc, #88]	; (8004910 <MX_TIM8_Init+0x78>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <MX_TIM8_Init+0x78>)
 80048bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <MX_TIM8_Init+0x78>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <MX_TIM8_Init+0x78>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <MX_TIM8_Init+0x78>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 80048d4:	2108      	movs	r1, #8
 80048d6:	480e      	ldr	r0, [pc, #56]	; (8004910 <MX_TIM8_Init+0x78>)
 80048d8:	f007 ffbe 	bl	800c858 <HAL_TIM_OnePulse_Init>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 80048e2:	f000 f99f 	bl	8004c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4806      	ldr	r0, [pc, #24]	; (8004910 <MX_TIM8_Init+0x78>)
 80048f8:	f009 f88a 	bl	800da10 <HAL_TIMEx_MasterConfigSynchronization>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8004902:	f000 f98f 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20001fe8 	.word	0x20001fe8
 8004914:	40013400 	.word	0x40013400

08004918 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <MX_TIM16_Init+0x48>)
 800491e:	4a11      	ldr	r2, [pc, #68]	; (8004964 <MX_TIM16_Init+0x4c>)
 8004920:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <MX_TIM16_Init+0x48>)
 8004924:	f244 2267 	movw	r2, #16999	; 0x4267
 8004928:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <MX_TIM16_Init+0x48>)
 800492c:	2200      	movs	r2, #0
 800492e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <MX_TIM16_Init+0x48>)
 8004932:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004936:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <MX_TIM16_Init+0x48>)
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <MX_TIM16_Init+0x48>)
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <MX_TIM16_Init+0x48>)
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800494a:	4805      	ldr	r0, [pc, #20]	; (8004960 <MX_TIM16_Init+0x48>)
 800494c:	f007 fc0c 	bl	800c168 <HAL_TIM_Base_Init>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8004956:	f000 f965 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20002034 	.word	0x20002034
 8004964:	40014400 	.word	0x40014400

08004968 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <MX_TIM17_Init+0x58>)
 800496e:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <MX_TIM17_Init+0x5c>)
 8004970:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <MX_TIM17_Init+0x58>)
 8004974:	f244 2267 	movw	r2, #16999	; 0x4267
 8004978:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <MX_TIM17_Init+0x58>)
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <MX_TIM17_Init+0x58>)
 8004982:	2231      	movs	r2, #49	; 0x31
 8004984:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <MX_TIM17_Init+0x58>)
 8004988:	2200      	movs	r2, #0
 800498a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <MX_TIM17_Init+0x58>)
 800498e:	2200      	movs	r2, #0
 8004990:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <MX_TIM17_Init+0x58>)
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004998:	4809      	ldr	r0, [pc, #36]	; (80049c0 <MX_TIM17_Init+0x58>)
 800499a:	f007 fbe5 	bl	800c168 <HAL_TIM_Base_Init>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80049a4:	f000 f93e 	bl	8004c24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 80049a8:	2108      	movs	r1, #8
 80049aa:	4805      	ldr	r0, [pc, #20]	; (80049c0 <MX_TIM17_Init+0x58>)
 80049ac:	f007 ff54 	bl	800c858 <HAL_TIM_OnePulse_Init>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 80049b6:	f000 f935 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20002080 	.word	0x20002080
 80049c4:	40014800 	.word	0x40014800

080049c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049cc:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 80049ce:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <MX_USART1_UART_Init+0x94>)
 80049d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80049d2:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 80049d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049da:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 80049dc:	2200      	movs	r2, #0
 80049de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049e6:	4b1c      	ldr	r3, [pc, #112]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 80049ee:	220c      	movs	r2, #12
 80049f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049f2:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049f8:	4b17      	ldr	r3, [pc, #92]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049fe:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a04:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a0a:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a10:	4811      	ldr	r0, [pc, #68]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 8004a12:	f009 f976 	bl	800dd02 <HAL_UART_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004a1c:	f000 f902 	bl	8004c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a20:	2100      	movs	r1, #0
 8004a22:	480d      	ldr	r0, [pc, #52]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 8004a24:	f00a fcbb 	bl	800f39e <HAL_UARTEx_SetTxFifoThreshold>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004a2e:	f000 f8f9 	bl	8004c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a32:	2100      	movs	r1, #0
 8004a34:	4808      	ldr	r0, [pc, #32]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 8004a36:	f00a fcf0 	bl	800f41a <HAL_UARTEx_SetRxFifoThreshold>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004a40:	f000 f8f0 	bl	8004c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004a44:	4804      	ldr	r0, [pc, #16]	; (8004a58 <MX_USART1_UART_Init+0x90>)
 8004a46:	f00a fc71 	bl	800f32c <HAL_UARTEx_DisableFifoMode>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004a50:	f000 f8e8 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a54:	bf00      	nop
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	200020cc 	.word	0x200020cc
 8004a5c:	40013800 	.word	0x40013800

08004a60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004a66:	4b16      	ldr	r3, [pc, #88]	; (8004ac0 <MX_DMA_Init+0x60>)
 8004a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6a:	4a15      	ldr	r2, [pc, #84]	; (8004ac0 <MX_DMA_Init+0x60>)
 8004a6c:	f043 0304 	orr.w	r3, r3, #4
 8004a70:	6493      	str	r3, [r2, #72]	; 0x48
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <MX_DMA_Init+0x60>)
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a7e:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <MX_DMA_Init+0x60>)
 8004a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a82:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <MX_DMA_Init+0x60>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6493      	str	r3, [r2, #72]	; 0x48
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <MX_DMA_Init+0x60>)
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2100      	movs	r1, #0
 8004a9a:	200b      	movs	r0, #11
 8004a9c:	f004 fb8b 	bl	80091b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004aa0:	200b      	movs	r0, #11
 8004aa2:	f004 fba2 	bl	80091ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	200d      	movs	r0, #13
 8004aac:	f004 fb83 	bl	80091b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004ab0:	200d      	movs	r0, #13
 8004ab2:	f004 fb9a 	bl	80091ea <HAL_NVIC_EnableIRQ>

}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000

08004ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08a      	sub	sp, #40	; 0x28
 8004ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aca:	f107 0314 	add.w	r3, r7, #20
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
 8004ad6:	60da      	str	r2, [r3, #12]
 8004ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ada:	4b4f      	ldr	r3, [pc, #316]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	4a4e      	ldr	r2, [pc, #312]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004ae0:	f043 0304 	orr.w	r3, r3, #4
 8004ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae6:	4b4c      	ldr	r3, [pc, #304]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004af2:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	4a48      	ldr	r2, [pc, #288]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004af8:	f043 0320 	orr.w	r3, r3, #32
 8004afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004afe:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0a:	4b43      	ldr	r3, [pc, #268]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	4a42      	ldr	r2, [pc, #264]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b16:	4b40      	ldr	r3, [pc, #256]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	4a3c      	ldr	r2, [pc, #240]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b2e:	4b3a      	ldr	r3, [pc, #232]	; (8004c18 <MX_GPIO_Init+0x154>)
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f645 4107 	movw	r1, #23559	; 0x5c07
 8004b40:	4836      	ldr	r0, [pc, #216]	; (8004c1c <MX_GPIO_Init+0x158>)
 8004b42:	f005 fcc9 	bl	800a4d8 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8004b46:	2200      	movs	r2, #0
 8004b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b50:	f005 fcc2 	bl	800a4d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8004b54:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b62:	f107 0314 	add.w	r3, r7, #20
 8004b66:	4619      	mov	r1, r3
 8004b68:	482d      	ldr	r0, [pc, #180]	; (8004c20 <MX_GPIO_Init+0x15c>)
 8004b6a:	f005 fb1b 	bl	800a1a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8004b6e:	2370      	movs	r3, #112	; 0x70
 8004b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7a:	f107 0314 	add.w	r3, r7, #20
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b84:	f005 fb0e 	bl	800a1a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8004b96:	f107 0314 	add.w	r3, r7, #20
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ba0:	f005 fb00 	bl	800a1a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004ba4:	f645 4307 	movw	r3, #23559	; 0x5c07
 8004ba8:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004baa:	2301      	movs	r3, #1
 8004bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb6:	f107 0314 	add.w	r3, r7, #20
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4817      	ldr	r0, [pc, #92]	; (8004c1c <MX_GPIO_Init+0x158>)
 8004bbe:	f005 faf1 	bl	800a1a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8004bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bde:	f005 fae1 	bl	800a1a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8004be2:	f44f 7390 	mov.w	r3, #288	; 0x120
 8004be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004be8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4808      	ldr	r0, [pc, #32]	; (8004c1c <MX_GPIO_Init+0x158>)
 8004bfa:	f005 fad3 	bl	800a1a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2100      	movs	r1, #0
 8004c02:	2017      	movs	r0, #23
 8004c04:	f004 fad7 	bl	80091b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004c08:	2017      	movs	r0, #23
 8004c0a:	f004 faee 	bl	80091ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004c0e:	bf00      	nop
 8004c10:	3728      	adds	r7, #40	; 0x28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	48000400 	.word	0x48000400
 8004c20:	48000800 	.word	0x48000800

08004c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c28:	b672      	cpsid	i
}
 8004c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c2c:	e7fe      	b.n	8004c2c <Error_Handler+0x8>

08004c2e <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e008      	b.n	8004c68 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3301      	adds	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c80:	d4e9      	bmi.n	8004c56 <Moving_Average_Init+0x28>
	}
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004cb6:	6839      	ldr	r1, [r7, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	1ad2      	subs	r2, r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	edd3 7a00 	vldr	s15, [r3]
 8004cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfa:	d507      	bpl.n	8004d0c <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8004d0a:	e003      	b.n	8004d14 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	edd3 7a00 	vldr	s15, [r3]
 8004d28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d2c:	ee16 0a90 	vmov	r0, s13
 8004d30:	f7fb fc32 	bl	8000598 <__aeabi_f2d>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8004d40:	eef0 0a67 	vmov.f32	s1, s15
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	0000      	movs	r0, r0
 8004d4c:	0000      	movs	r0, r0
	...

08004d50 <PID>:

	uPID->OutputSum = double_clamp(uPID->OutputSum, uPID->OutMin, uPID->OutMax);
}

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	; 0x28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24
 8004d58:	6239      	str	r1, [r7, #32]
 8004d5a:	61fa      	str	r2, [r7, #28]
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d62:	ed87 1b02 	vstr	d1, [r7, #8]
 8004d66:	ed87 2b00 	vstr	d2, [r7]
	/* Set parameters */
	uPID->MyOutput   = Output;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	6a3a      	ldr	r2, [r7, #32]
 8004d74:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	661a      	str	r2, [r3, #96]	; 0x60

	PID_SetOutputLimits(uPID, 0, DEFAULT_PWM_MAX);
 8004d7c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8004dc8 <PID+0x78>
 8004d80:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8004dd0 <PID+0x80>
 8004d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d86:	f000 f9d3 	bl	8005130 <PID_SetOutputLimits>
	uPID->SampleTime = DEFAULT_SAMPLE_TIME_MS;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	2264      	movs	r2, #100	; 0x64
 8004d8e:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8004d90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d94:	4619      	mov	r1, r3
 8004d96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d98:	f000 fac4 	bl	8005324 <PID_SetControllerDirection>
	PID_SetTunings(uPID, Kp, Ki, Kd);
 8004d9c:	ed97 2b00 	vldr	d2, [r7]
 8004da0:	ed97 1b02 	vldr	d1, [r7, #8]
 8004da4:	ed97 0b04 	vldr	d0, [r7, #16]
 8004da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004daa:	f000 fa3f 	bl	800522c <PID_SetTunings>

	uPID->LastTime = HAL_GetTick() - uPID->SampleTime;
 8004dae:	f001 fdd3 	bl	8006958 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	1ad2      	subs	r2, r2, r3
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	605a      	str	r2, [r3, #4]
}
 8004dbe:	bf00      	nop
 8004dc0:	3728      	adds	r7, #40	; 0x28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	40590000 	.word	0x40590000
	...

08004dd8 <double_clamp>:

/* Function to clamp d between the limits min and max */
double double_clamp(double d, double min, double max) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	ed87 0b04 	vstr	d0, [r7, #16]
 8004de2:	ed87 1b02 	vstr	d1, [r7, #8]
 8004de6:	ed87 2b00 	vstr	d2, [r7]
	  const double t = d < min ? min : d;
 8004dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004df2:	f7fb fe9b 	bl	8000b2c <__aeabi_dcmplt>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <double_clamp+0x2a>
 8004dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e00:	e001      	b.n	8004e06 <double_clamp+0x2e>
 8004e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e06:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  return t > max ? max : t;
 8004e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e12:	f7fb fea9 	bl	8000b68 <__aeabi_dcmpgt>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <double_clamp+0x4a>
 8004e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e20:	e001      	b.n	8004e26 <double_clamp+0x4e>
 8004e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e26:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e2e:	eef0 0a67 	vmov.f32	s1, s15
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <check_clamping>:

/* Function to check if clamping will occur */
uint8_t check_clamping(double d, double min, double max) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004e42:	ed87 1b02 	vstr	d1, [r7, #8]
 8004e46:	ed87 2b00 	vstr	d2, [r7]
	  if(d > max || d < min){
 8004e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e52:	f7fb fe89 	bl	8000b68 <__aeabi_dcmpgt>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d108      	bne.n	8004e6e <check_clamping+0x36>
 8004e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e64:	f7fb fe62 	bl	8000b2c <__aeabi_dcmplt>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <check_clamping+0x3a>
		  return 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <check_clamping+0x3c>
	  }
	  else{
		  return 0;
 8004e72:	2300      	movs	r3, #0
	  }
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <PID_Compute>:

/* Compute  */
uint8_t PID_Compute(PID_TypeDef *uPID){
 8004e7c:	b5b0      	push	{r4, r5, r7, lr}
 8004e7e:	b08e      	sub	sp, #56	; 0x38
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* Calculate time */
	now        = HAL_GetTick();
 8004e84:	f001 fd68 	bl	8006958 <HAL_GetTick>
 8004e88:	6378      	str	r0, [r7, #52]	; 0x34
	timeChange = (now - uPID->LastTime);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	633b      	str	r3, [r7, #48]	; 0x30

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d204      	bcs.n	8004ea8 <PID_Compute+0x2c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 813d 	beq.w	8005122 <PID_Compute+0x2a6>
	{
		timeChange_in_seconds = timeChange/1000.0;
 8004ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eaa:	f7fb fb53 	bl	8000554 <__aeabi_ui2d>
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	4b9e      	ldr	r3, [pc, #632]	; (800512c <PID_Compute+0x2b0>)
 8004eb4:	f7fb fcf2 	bl	800089c <__aeabi_ddiv>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		/* Compute all the working error variables */
		input   = *uPID->MyInput;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	e9c7 2308 	strd	r2, r3, [r7, #32]
		error   = *uPID->MySetpoint - input;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ed4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ed8:	f7fb f9fe 	bl	80002d8 <__aeabi_dsub>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		dInput  = (input - uPID->LastInput);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004eea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004eee:	f7fb f9f3 	bl	80002d8 <__aeabi_dsub>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	e9c7 2304 	strd	r2, r3, [r7, #16]

		/* Calculate Proportional on Error */
		uPID->DispKp_part = uPID->Kp * error;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f04:	f7fb fba0 	bl	8000648 <__aeabi_dmul>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		output = uPID->DispKp_part;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004f18:	e9c7 2302 	strd	r2, r3, [r7, #8]

		/* Calculate Derivative term and add to output sum */
		uPID->DispKd_part = - (uPID->Kd / timeChange_in_seconds) * dInput;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f26:	f7fb fcb9 	bl	800089c <__aeabi_ddiv>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4614      	mov	r4, r2
 8004f30:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004f34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f38:	4620      	mov	r0, r4
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f7fb fb84 	bl	8000648 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		output += uPID->DispKd_part;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004f50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f54:	f7fb f9c2 	bl	80002dc <__adddf3>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		/* Conditional integration as anti-windup (clamping) */
		if(check_clamping(output + uPID->Ki * error  * timeChange_in_seconds, uPID->OutMin, uPID->OutMax) && (error*(output + uPID->OutputSum) > 0)){
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004f66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f6a:	f7fb fb6d 	bl	8000648 <__aeabi_dmul>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f7a:	f7fb fb65 	bl	8000648 <__aeabi_dmul>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f8a:	f7fb f9a7 	bl	80002dc <__adddf3>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	ec43 2b15 	vmov	d5, r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8004fa2:	eeb0 2a46 	vmov.f32	s4, s12
 8004fa6:	eef0 2a66 	vmov.f32	s5, s13
 8004faa:	eeb0 1a47 	vmov.f32	s2, s14
 8004fae:	eef0 1a67 	vmov.f32	s3, s15
 8004fb2:	eeb0 0a45 	vmov.f32	s0, s10
 8004fb6:	eef0 0a65 	vmov.f32	s1, s11
 8004fba:	f7ff ff3d 	bl	8004e38 <check_clamping>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d02a      	beq.n	800501a <PID_Compute+0x19e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fce:	f7fb f985 	bl	80002dc <__adddf3>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fde:	f7fb fb33 	bl	8000648 <__aeabi_dmul>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	f7fb fdb9 	bl	8000b68 <__aeabi_dcmpgt>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00e      	beq.n	800501a <PID_Compute+0x19e>
		//if((error > proportional_band_max) || (error < proportional_band_min)){
			uPID->OutputSum     += 0;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	f7fb f967 	bl	80002dc <__adddf3>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8005018:	e01c      	b.n	8005054 <PID_Compute+0x1d8>
		}
		else{
			uPID->OutputSum     += (uPID->Ki * error * timeChange_in_seconds);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800502a:	f7fb fb0d 	bl	8000648 <__aeabi_dmul>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800503a:	f7fb fb05 	bl	8000648 <__aeabi_dmul>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4620      	mov	r0, r4
 8005044:	4629      	mov	r1, r5
 8005046:	f7fb f949 	bl	80002dc <__adddf3>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		/* Clamp Integral part */
		uPID->OutputSum = double_clamp(uPID->OutputSum, uPID->IMin, uPID->IMax);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	ed93 5b24 	vldr	d5, [r3, #144]	; 0x90
 8005066:	eeb0 2a45 	vmov.f32	s4, s10
 800506a:	eef0 2a65 	vmov.f32	s5, s11
 800506e:	eeb0 1a46 	vmov.f32	s2, s12
 8005072:	eef0 1a66 	vmov.f32	s3, s13
 8005076:	eeb0 0a47 	vmov.f32	s0, s14
 800507a:	eef0 0a67 	vmov.f32	s1, s15
 800507e:	f7ff feab 	bl	8004dd8 <double_clamp>
 8005082:	eeb0 7a40 	vmov.f32	s14, s0
 8005086:	eef0 7a60 	vmov.f32	s15, s1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68

		/* If Setpoint is set to 0, zero integral part */
		if(*uPID->MySetpoint == 0){
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	f7fb fd3a 	bl	8000b18 <__aeabi_dcmpeq>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <PID_Compute+0x23c>
			uPID->OutputSum = 0;
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		uPID->DispKi_part = uPID->OutputSum;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		/* Final summation */
		output += uPID->OutputSum;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80050ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050ce:	f7fb f905 	bl	80002dc <__adddf3>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		/* Clamp output */
		output = double_clamp(output, uPID->OutMin, uPID->OutMax);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 80050e6:	eeb0 2a46 	vmov.f32	s4, s12
 80050ea:	eef0 2a66 	vmov.f32	s5, s13
 80050ee:	eeb0 1a47 	vmov.f32	s2, s14
 80050f2:	eef0 1a67 	vmov.f32	s3, s15
 80050f6:	ed97 0b02 	vldr	d0, [r7, #8]
 80050fa:	f7ff fe6d 	bl	8004dd8 <double_clamp>
 80050fe:	ed87 0b02 	vstr	d0, [r7, #8]

		*uPID->MyOutput = output;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800510a:	e9c1 2300 	strd	r2, r3, [r1]

		/* Remember some variables for next time */
		uPID->LastInput = input;
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005114:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800511c:	605a      	str	r2, [r3, #4]

		return 1;
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <PID_Compute+0x2a8>
	}
	else{
		return 0;
 8005122:	2300      	movs	r3, #0
	}
}
 8005124:	4618      	mov	r0, r3
 8005126:	3738      	adds	r7, #56	; 0x38
 8005128:	46bd      	mov	sp, r7
 800512a:	bdb0      	pop	{r4, r5, r7, pc}
 800512c:	408f4000 	.word	0x408f4000

08005130 <PID_SetOutputLimits>:

/* PID Limits */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max){
 8005130:	b590      	push	{r4, r7, lr}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6178      	str	r0, [r7, #20]
 8005138:	ed87 0b02 	vstr	d0, [r7, #8]
 800513c:	ed87 1b00 	vstr	d1, [r7]
	/* Check value */
	if (Min >= Max){
 8005140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005144:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005148:	f7fb fd04 	bl	8000b54 <__aeabi_dcmpge>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d148      	bne.n	80051e4 <PID_SetOutputLimits+0xb4>
		return;
	}

	uPID->OutMin = Min;
 8005152:	6979      	ldr	r1, [r7, #20]
 8005154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005158:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 800515c:	6979      	ldr	r1, [r7, #20]
 800515e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005162:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* Check value */
	*uPID->MyOutput = double_clamp(*uPID->MyOutput, uPID->OutMin, uPID->OutMax);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516a:	ed93 7b00 	vldr	d7, [r3]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800517e:	eeb0 2a45 	vmov.f32	s4, s10
 8005182:	eef0 2a65 	vmov.f32	s5, s11
 8005186:	eeb0 1a46 	vmov.f32	s2, s12
 800518a:	eef0 1a66 	vmov.f32	s3, s13
 800518e:	eeb0 0a47 	vmov.f32	s0, s14
 8005192:	eef0 0a67 	vmov.f32	s1, s15
 8005196:	f7ff fe1f 	bl	8004dd8 <double_clamp>
 800519a:	eeb0 7a40 	vmov.f32	s14, s0
 800519e:	eef0 7a60 	vmov.f32	s15, s1
 80051a2:	ed84 7b00 	vstr	d7, [r4]

	/* Check out value */
	uPID->OutputSum = double_clamp(uPID->OutputSum, uPID->OutMin, uPID->OutMax);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 80051b8:	eeb0 2a45 	vmov.f32	s4, s10
 80051bc:	eef0 2a65 	vmov.f32	s5, s11
 80051c0:	eeb0 1a46 	vmov.f32	s2, s12
 80051c4:	eef0 1a66 	vmov.f32	s3, s13
 80051c8:	eeb0 0a47 	vmov.f32	s0, s14
 80051cc:	eef0 0a67 	vmov.f32	s1, s15
 80051d0:	f7ff fe02 	bl	8004dd8 <double_clamp>
 80051d4:	eeb0 7a40 	vmov.f32	s14, s0
 80051d8:	eef0 7a60 	vmov.f32	s15, s1
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
 80051e2:	e000      	b.n	80051e6 <PID_SetOutputLimits+0xb6>
		return;
 80051e4:	bf00      	nop

}
 80051e6:	371c      	adds	r7, #28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd90      	pop	{r4, r7, pc}

080051ec <PID_SetILimits>:

/* PID I-windup Limits */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max){
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6178      	str	r0, [r7, #20]
 80051f4:	ed87 0b02 	vstr	d0, [r7, #8]
 80051f8:	ed87 1b00 	vstr	d1, [r7]
	/* Check value */
	if (Min >= Max){
 80051fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005200:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005204:	f7fb fca6 	bl	8000b54 <__aeabi_dcmpge>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <PID_SetILimits+0x38>
		return;
	}

	uPID->IMin = Min;
 800520e:	6979      	ldr	r1, [r7, #20]
 8005210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005214:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8005218:	6979      	ldr	r1, [r7, #20]
 800521a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8005222:	e000      	b.n	8005226 <PID_SetILimits+0x3a>
		return;
 8005224:	bf00      	nop
}
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <PID_SetTunings>:

/* PID Tunings */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd){
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	61f8      	str	r0, [r7, #28]
 8005234:	ed87 0b04 	vstr	d0, [r7, #16]
 8005238:	ed87 1b02 	vstr	d1, [r7, #8]
 800523c:	ed87 2b00 	vstr	d2, [r7]
	/* Check value */
	if (Kp < 0 || Ki < 0 || Kd < 0){
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800524c:	f7fb fc6e 	bl	8000b2c <__aeabi_dcmplt>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d162      	bne.n	800531c <PID_SetTunings+0xf0>
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005262:	f7fb fc63 	bl	8000b2c <__aeabi_dcmplt>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d157      	bne.n	800531c <PID_SetTunings+0xf0>
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005278:	f7fb fc58 	bl	8000b2c <__aeabi_dcmplt>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d14c      	bne.n	800531c <PID_SetTunings+0xf0>
		return;
	}

	uPID->DispKp = Kp;
 8005282:	69f9      	ldr	r1, [r7, #28]
 8005284:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005288:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800528c:	69f9      	ldr	r1, [r7, #28]
 800528e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005292:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8005296:	69f9      	ldr	r1, [r7, #28]
 8005298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529c:	e9c1 2308 	strd	r2, r3, [r1, #32]

	uPID->Kp = Kp;
 80052a0:	69f9      	ldr	r1, [r7, #28]
 80052a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052a6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki;
 80052aa:	69f9      	ldr	r1, [r7, #28]
 80052ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd;
 80052b4:	69f9      	ldr	r1, [r7, #28]
 80052b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* Check direction */
	if (uPID->ControllerDirection == _PID_CD_REVERSE){
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d12b      	bne.n	800531e <PID_SetTunings+0xf2>

		uPID->Kp = (0 - uPID->Kp);
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80052cc:	f04f 0000 	mov.w	r0, #0
 80052d0:	f04f 0100 	mov.w	r1, #0
 80052d4:	f7fb f800 	bl	80002d8 <__aeabi_dsub>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	69f9      	ldr	r1, [r7, #28]
 80052de:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80052e8:	f04f 0000 	mov.w	r0, #0
 80052ec:	f04f 0100 	mov.w	r1, #0
 80052f0:	f7fa fff2 	bl	80002d8 <__aeabi_dsub>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	69f9      	ldr	r1, [r7, #28]
 80052fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	f7fa ffe4 	bl	80002d8 <__aeabi_dsub>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	69f9      	ldr	r1, [r7, #28]
 8005316:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800531a:	e000      	b.n	800531e <PID_SetTunings+0xf2>
		return;
 800531c:	bf00      	nop
	}
}
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <PID_SetControllerDirection>:

/* PID Direction */
void PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction){
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
	/* Check parameters */
	if (Direction !=uPID->ControllerDirection){
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	429a      	cmp	r2, r3
 8005338:	d029      	beq.n	800538e <PID_SetControllerDirection+0x6a>
		uPID->Kp = (0 - uPID->Kp);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005340:	f04f 0000 	mov.w	r0, #0
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	f7fa ffc6 	bl	80002d8 <__aeabi_dsub>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800535c:	f04f 0000 	mov.w	r0, #0
 8005360:	f04f 0100 	mov.w	r1, #0
 8005364:	f7fa ffb8 	bl	80002d8 <__aeabi_dsub>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005378:	f04f 0000 	mov.w	r0, #0
 800537c:	f04f 0100 	mov.w	r1, #0
 8005380:	f7fa ffaa 	bl	80002d8 <__aeabi_dsub>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	}

	uPID->ControllerDirection = Direction;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	701a      	strb	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <PID_SetSampleTime>:
PIDCD_TypeDef PID_GetDirection(PID_TypeDef *uPID){
	return uPID->ControllerDirection;
}

/* PID Sampling */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall){
 800539c:	b5b0      	push	{r4, r5, r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dd01      	ble.n	80053b2 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 80053ae:	2301      	movs	r3, #1
 80053b0:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	60da      	str	r2, [r3, #12]
	double ratio;

	/* Check value */
	if (NewSampleTime > 0){
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	dd2e      	ble.n	800541c <PID_SetSampleTime+0x80>
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80053be:	68b8      	ldr	r0, [r7, #8]
 80053c0:	f7fb f8d8 	bl	8000574 <__aeabi_i2d>
 80053c4:	4604      	mov	r4, r0
 80053c6:	460d      	mov	r5, r1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fb f8c1 	bl	8000554 <__aeabi_ui2d>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4620      	mov	r0, r4
 80053d8:	4629      	mov	r1, r5
 80053da:	f7fb fa5f 	bl	800089c <__aeabi_ddiv>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80053ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053f0:	f7fb f92a 	bl	8000648 <__aeabi_dmul>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	68f9      	ldr	r1, [r7, #12]
 80053fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005404:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005408:	f7fb fa48 	bl	800089c <__aeabi_ddiv>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	68f9      	ldr	r1, [r7, #12]
 8005412:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	609a      	str	r2, [r3, #8]
	}
}
 800541c:	bf00      	nop
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bdb0      	pop	{r4, r5, r7, pc}

08005424 <PID_GetPpart>:
double PID_GetKd(PID_TypeDef *uPID){
	return uPID->DispKd;
}

/* Get current contributions*/
double PID_GetPpart(PID_TypeDef *uPID){
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005432:	ec43 2b17 	vmov	d7, r2, r3
}
 8005436:	eeb0 0a47 	vmov.f32	s0, s14
 800543a:	eef0 0a67 	vmov.f32	s1, s15
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID){
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005456:	ec43 2b17 	vmov	d7, r2, r3
}
 800545a:	eeb0 0a47 	vmov.f32	s0, s14
 800545e:	eef0 0a67 	vmov.f32	s1, s15
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID){
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800547a:	ec43 2b17 	vmov	d7, r2, r3
}
 800547e:	eeb0 0a47 	vmov.f32	s0, s14
 8005482:	eef0 0a67 	vmov.f32	s1, s15
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <HAL_MspInit+0x44>)
 8005498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549a:	4a0e      	ldr	r2, [pc, #56]	; (80054d4 <HAL_MspInit+0x44>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6613      	str	r3, [r2, #96]	; 0x60
 80054a2:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <HAL_MspInit+0x44>)
 80054a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_MspInit+0x44>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b2:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <HAL_MspInit+0x44>)
 80054b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b8:	6593      	str	r3, [r2, #88]	; 0x58
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_MspInit+0x44>)
 80054bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80054c6:	f005 fa0d 	bl	800a8e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40021000 	.word	0x40021000

080054d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b09e      	sub	sp, #120	; 0x78
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	609a      	str	r2, [r3, #8]
 80054ec:	60da      	str	r2, [r3, #12]
 80054ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054f0:	f107 0320 	add.w	r3, r7, #32
 80054f4:	2244      	movs	r2, #68	; 0x44
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f00c fea8 	bl	801224e <memset>
  if(hadc->Instance==ADC1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005506:	d171      	bne.n	80055ec <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800550e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005512:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005514:	f107 0320 	add.w	r3, r7, #32
 8005518:	4618      	mov	r0, r3
 800551a:	f005 ff21 	bl	800b360 <HAL_RCCEx_PeriphCLKConfig>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8005524:	f7ff fb7e 	bl	8004c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005528:	4b64      	ldr	r3, [pc, #400]	; (80056bc <HAL_ADC_MspInit+0x1e4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3301      	adds	r3, #1
 800552e:	4a63      	ldr	r2, [pc, #396]	; (80056bc <HAL_ADC_MspInit+0x1e4>)
 8005530:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005532:	4b62      	ldr	r3, [pc, #392]	; (80056bc <HAL_ADC_MspInit+0x1e4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d10b      	bne.n	8005552 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800553a:	4b61      	ldr	r3, [pc, #388]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 800553c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553e:	4a60      	ldr	r2, [pc, #384]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 8005540:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005546:	4b5e      	ldr	r3, [pc, #376]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005552:	4b5b      	ldr	r3, [pc, #364]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 8005554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005556:	4a5a      	ldr	r2, [pc, #360]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800555e:	4b58      	ldr	r3, [pc, #352]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 8005560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBUS_Pin|THERMOCOUPLE_Pin;
 800556a:	230c      	movs	r3, #12
 800556c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800556e:	2303      	movs	r3, #3
 8005570:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005572:	2300      	movs	r3, #0
 8005574:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005576:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800557a:	4619      	mov	r1, r3
 800557c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005580:	f004 fe10 	bl	800a1a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8005584:	4b4f      	ldr	r3, [pc, #316]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 8005586:	4a50      	ldr	r2, [pc, #320]	; (80056c8 <HAL_ADC_MspInit+0x1f0>)
 8005588:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800558a:	4b4e      	ldr	r3, [pc, #312]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 800558c:	2205      	movs	r2, #5
 800558e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005590:	4b4c      	ldr	r3, [pc, #304]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 8005592:	2200      	movs	r2, #0
 8005594:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005596:	4b4b      	ldr	r3, [pc, #300]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 8005598:	2200      	movs	r2, #0
 800559a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800559c:	4b49      	ldr	r3, [pc, #292]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 800559e:	2280      	movs	r2, #128	; 0x80
 80055a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80055a2:	4b48      	ldr	r3, [pc, #288]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 80055a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80055aa:	4b46      	ldr	r3, [pc, #280]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 80055ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80055b2:	4b44      	ldr	r3, [pc, #272]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 80055b4:	2220      	movs	r2, #32
 80055b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80055b8:	4b42      	ldr	r3, [pc, #264]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80055be:	4841      	ldr	r0, [pc, #260]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 80055c0:	f004 f834 	bl	800962c <HAL_DMA_Init>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80055ca:	f7ff fb2b 	bl	8004c24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a3c      	ldr	r2, [pc, #240]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
 80055d4:	4a3b      	ldr	r2, [pc, #236]	; (80056c4 <HAL_ADC_MspInit+0x1ec>)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 80055da:	2200      	movs	r2, #0
 80055dc:	210a      	movs	r1, #10
 80055de:	2012      	movs	r0, #18
 80055e0:	f003 fde9 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80055e4:	2012      	movs	r0, #18
 80055e6:	f003 fe00 	bl	80091ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80055ea:	e062      	b.n	80056b2 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a36      	ldr	r2, [pc, #216]	; (80056cc <HAL_ADC_MspInit+0x1f4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d15d      	bne.n	80056b2 <HAL_ADC_MspInit+0x1da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80055f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80055fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005600:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005602:	f107 0320 	add.w	r3, r7, #32
 8005606:	4618      	mov	r0, r3
 8005608:	f005 feaa 	bl	800b360 <HAL_RCCEx_PeriphCLKConfig>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8005612:	f7ff fb07 	bl	8004c24 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005616:	4b29      	ldr	r3, [pc, #164]	; (80056bc <HAL_ADC_MspInit+0x1e4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	4a27      	ldr	r2, [pc, #156]	; (80056bc <HAL_ADC_MspInit+0x1e4>)
 800561e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005620:	4b26      	ldr	r3, [pc, #152]	; (80056bc <HAL_ADC_MspInit+0x1e4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d10b      	bne.n	8005640 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005628:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 800562a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562c:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 800562e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005634:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 8005636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005640:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 8005642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005644:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 8005646:	f043 0320 	orr.w	r3, r3, #32
 800564a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800564c:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 800564e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005658:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 800565a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005664:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <HAL_ADC_MspInit+0x1e8>)
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_Pin;
 8005670:	2302      	movs	r3, #2
 8005672:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005674:	2303      	movs	r3, #3
 8005676:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005678:	2300      	movs	r3, #0
 800567a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 800567c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005680:	4619      	mov	r1, r3
 8005682:	4813      	ldr	r0, [pc, #76]	; (80056d0 <HAL_ADC_MspInit+0x1f8>)
 8005684:	f004 fd8e 	bl	800a1a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_LEAK_Pin;
 8005688:	2302      	movs	r3, #2
 800568a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800568c:	2303      	movs	r3, #3
 800568e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005690:	2300      	movs	r3, #0
 8005692:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(I_LEAK_GPIO_Port, &GPIO_InitStruct);
 8005694:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005698:	4619      	mov	r1, r3
 800569a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800569e:	f004 fd81 	bl	800a1a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 80056a2:	2200      	movs	r2, #0
 80056a4:	210a      	movs	r1, #10
 80056a6:	2012      	movs	r0, #18
 80056a8:	f003 fd85 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80056ac:	2012      	movs	r0, #18
 80056ae:	f003 fd9c 	bl	80091ea <HAL_NVIC_EnableIRQ>
}
 80056b2:	bf00      	nop
 80056b4:	3778      	adds	r7, #120	; 0x78
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	200021f8 	.word	0x200021f8
 80056c0:	40021000 	.word	0x40021000
 80056c4:	20001cd0 	.word	0x20001cd0
 80056c8:	40020030 	.word	0x40020030
 80056cc:	50000100 	.word	0x50000100
 80056d0:	48001400 	.word	0x48001400

080056d4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <HAL_CRC_MspInit+0x38>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d10b      	bne.n	80056fe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <HAL_CRC_MspInit+0x3c>)
 80056e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ea:	4a09      	ldr	r2, [pc, #36]	; (8005710 <HAL_CRC_MspInit+0x3c>)
 80056ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056f0:	6493      	str	r3, [r2, #72]	; 0x48
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <HAL_CRC_MspInit+0x3c>)
 80056f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40023000 	.word	0x40023000
 8005710:	40021000 	.word	0x40021000

08005714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b09c      	sub	sp, #112	; 0x70
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800571c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	60da      	str	r2, [r3, #12]
 800572a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800572c:	f107 0318 	add.w	r3, r7, #24
 8005730:	2244      	movs	r2, #68	; 0x44
 8005732:	2100      	movs	r1, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f00c fd8a 	bl	801224e <memset>
  if(hi2c->Instance==I2C1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2e      	ldr	r2, [pc, #184]	; (80057f8 <HAL_I2C_MspInit+0xe4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d154      	bne.n	80057ee <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005748:	2300      	movs	r3, #0
 800574a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800574c:	f107 0318 	add.w	r3, r7, #24
 8005750:	4618      	mov	r0, r3
 8005752:	f005 fe05 	bl	800b360 <HAL_RCCEx_PeriphCLKConfig>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800575c:	f7ff fa62 	bl	8004c24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005760:	4b26      	ldr	r3, [pc, #152]	; (80057fc <HAL_I2C_MspInit+0xe8>)
 8005762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005764:	4a25      	ldr	r2, [pc, #148]	; (80057fc <HAL_I2C_MspInit+0xe8>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800576c:	4b23      	ldr	r3, [pc, #140]	; (80057fc <HAL_I2C_MspInit+0xe8>)
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005778:	4b20      	ldr	r3, [pc, #128]	; (80057fc <HAL_I2C_MspInit+0xe8>)
 800577a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577c:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <HAL_I2C_MspInit+0xe8>)
 800577e:	f043 0302 	orr.w	r3, r3, #2
 8005782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005784:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_I2C_MspInit+0xe8>)
 8005786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005796:	2312      	movs	r3, #18
 8005798:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579a:	2300      	movs	r3, #0
 800579c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800579e:	2300      	movs	r3, #0
 80057a0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057a2:	2304      	movs	r3, #4
 80057a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80057aa:	4619      	mov	r1, r3
 80057ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057b0:	f004 fcf8 	bl	800a1a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80057b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057ba:	2312      	movs	r3, #18
 80057bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057c2:	2300      	movs	r3, #0
 80057c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057c6:	2304      	movs	r3, #4
 80057c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80057ce:	4619      	mov	r1, r3
 80057d0:	480b      	ldr	r0, [pc, #44]	; (8005800 <HAL_I2C_MspInit+0xec>)
 80057d2:	f004 fce7 	bl	800a1a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_I2C_MspInit+0xe8>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057da:	4a08      	ldr	r2, [pc, #32]	; (80057fc <HAL_I2C_MspInit+0xe8>)
 80057dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057e0:	6593      	str	r3, [r2, #88]	; 0x58
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <HAL_I2C_MspInit+0xe8>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80057ee:	bf00      	nop
 80057f0:	3770      	adds	r7, #112	; 0x70
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40005400 	.word	0x40005400
 80057fc:	40021000 	.word	0x40021000
 8005800:	48000400 	.word	0x48000400

08005804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08a      	sub	sp, #40	; 0x28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800580c:	f107 0314 	add.w	r3, r7, #20
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	60da      	str	r2, [r3, #12]
 800581a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2c      	ldr	r2, [pc, #176]	; (80058d4 <HAL_SPI_MspInit+0xd0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d151      	bne.n	80058ca <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005826:	4b2c      	ldr	r3, [pc, #176]	; (80058d8 <HAL_SPI_MspInit+0xd4>)
 8005828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582a:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <HAL_SPI_MspInit+0xd4>)
 800582c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005830:	6593      	str	r3, [r2, #88]	; 0x58
 8005832:	4b29      	ldr	r3, [pc, #164]	; (80058d8 <HAL_SPI_MspInit+0xd4>)
 8005834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800583e:	4b26      	ldr	r3, [pc, #152]	; (80058d8 <HAL_SPI_MspInit+0xd4>)
 8005840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005842:	4a25      	ldr	r2, [pc, #148]	; (80058d8 <HAL_SPI_MspInit+0xd4>)
 8005844:	f043 0302 	orr.w	r3, r3, #2
 8005848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800584a:	4b23      	ldr	r3, [pc, #140]	; (80058d8 <HAL_SPI_MspInit+0xd4>)
 800584c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005856:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800585a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585c:	2302      	movs	r3, #2
 800585e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005864:	2300      	movs	r3, #0
 8005866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005868:	2305      	movs	r3, #5
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4619      	mov	r1, r3
 8005872:	481a      	ldr	r0, [pc, #104]	; (80058dc <HAL_SPI_MspInit+0xd8>)
 8005874:	f004 fc96 	bl	800a1a4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8005878:	4b19      	ldr	r3, [pc, #100]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 800587a:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <HAL_SPI_MspInit+0xe0>)
 800587c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800587e:	4b18      	ldr	r3, [pc, #96]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 8005880:	220d      	movs	r2, #13
 8005882:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005884:	4b16      	ldr	r3, [pc, #88]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 8005886:	2210      	movs	r2, #16
 8005888:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800588a:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 800588c:	2200      	movs	r2, #0
 800588e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005890:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 8005892:	2280      	movs	r2, #128	; 0x80
 8005894:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005896:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 8005898:	2200      	movs	r2, #0
 800589a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800589c:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 800589e:	2200      	movs	r2, #0
 80058a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80058a8:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80058ae:	480c      	ldr	r0, [pc, #48]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 80058b0:	f003 febc 	bl	800962c <HAL_DMA_Init>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80058ba:	f7ff f9b3 	bl	8004c24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a07      	ldr	r2, [pc, #28]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
 80058c4:	4a06      	ldr	r2, [pc, #24]	; (80058e0 <HAL_SPI_MspInit+0xdc>)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80058ca:	bf00      	nop
 80058cc:	3728      	adds	r7, #40	; 0x28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40003800 	.word	0x40003800
 80058d8:	40021000 	.word	0x40021000
 80058dc:	48000400 	.word	0x48000400
 80058e0:	20001e0c 	.word	0x20001e0c
 80058e4:	40020008 	.word	0x40020008

080058e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a22      	ldr	r2, [pc, #136]	; (8005980 <HAL_TIM_PWM_MspInit+0x98>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d12c      	bne.n	8005954 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80058fa:	4b22      	ldr	r3, [pc, #136]	; (8005984 <HAL_TIM_PWM_MspInit+0x9c>)
 80058fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fe:	4a21      	ldr	r2, [pc, #132]	; (8005984 <HAL_TIM_PWM_MspInit+0x9c>)
 8005900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005904:	6613      	str	r3, [r2, #96]	; 0x60
 8005906:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <HAL_TIM_PWM_MspInit+0x9c>)
 8005908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	2018      	movs	r0, #24
 8005918:	f003 fc4d 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800591c:	2018      	movs	r0, #24
 800591e:	f003 fc64 	bl	80091ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005922:	2200      	movs	r2, #0
 8005924:	2100      	movs	r1, #0
 8005926:	2019      	movs	r0, #25
 8005928:	f003 fc45 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800592c:	2019      	movs	r0, #25
 800592e:	f003 fc5c 	bl	80091ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8005932:	2200      	movs	r2, #0
 8005934:	2100      	movs	r1, #0
 8005936:	201a      	movs	r0, #26
 8005938:	f003 fc3d 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800593c:	201a      	movs	r0, #26
 800593e:	f003 fc54 	bl	80091ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005942:	2200      	movs	r2, #0
 8005944:	2100      	movs	r1, #0
 8005946:	201b      	movs	r0, #27
 8005948:	f003 fc35 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800594c:	201b      	movs	r0, #27
 800594e:	f003 fc4c 	bl	80091ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005952:	e010      	b.n	8005976 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <HAL_TIM_PWM_MspInit+0xa0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d10b      	bne.n	8005976 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <HAL_TIM_PWM_MspInit+0x9c>)
 8005960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005962:	4a08      	ldr	r2, [pc, #32]	; (8005984 <HAL_TIM_PWM_MspInit+0x9c>)
 8005964:	f043 0304 	orr.w	r3, r3, #4
 8005968:	6593      	str	r3, [r2, #88]	; 0x58
 800596a:	4b06      	ldr	r3, [pc, #24]	; (8005984 <HAL_TIM_PWM_MspInit+0x9c>)
 800596c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	60bb      	str	r3, [r7, #8]
 8005974:	68bb      	ldr	r3, [r7, #8]
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40021000 	.word	0x40021000
 8005988:	40000800 	.word	0x40000800

0800598c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d144      	bne.n	8005a38 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80059ae:	4b24      	ldr	r3, [pc, #144]	; (8005a40 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b2:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	6593      	str	r3, [r2, #88]	; 0x58
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c6:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ca:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059de:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e2:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059e4:	f043 0302 	orr.w	r3, r3, #2
 80059e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 80059f6:	2301      	movs	r3, #1
 80059f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059fa:	2302      	movs	r3, #2
 80059fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a02:	2300      	movs	r3, #0
 8005a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a06:	2301      	movs	r3, #1
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8005a0a:	f107 0314 	add.w	r3, r7, #20
 8005a0e:	4619      	mov	r1, r3
 8005a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a14:	f004 fbc6 	bl	800a1a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8005a18:	2308      	movs	r3, #8
 8005a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a24:	2300      	movs	r3, #0
 8005a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8005a2c:	f107 0314 	add.w	r3, r7, #20
 8005a30:	4619      	mov	r1, r3
 8005a32:	4804      	ldr	r0, [pc, #16]	; (8005a44 <HAL_TIM_Encoder_MspInit+0xb8>)
 8005a34:	f004 fbb6 	bl	800a1a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005a38:	bf00      	nop
 8005a3a:	3728      	adds	r7, #40	; 0x28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40021000 	.word	0x40021000
 8005a44:	48000400 	.word	0x48000400

08005a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a34      	ldr	r2, [pc, #208]	; (8005b28 <HAL_TIM_Base_MspInit+0xe0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d114      	bne.n	8005a84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005a5a:	4b34      	ldr	r3, [pc, #208]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5e:	4a33      	ldr	r2, [pc, #204]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005a60:	f043 0310 	orr.w	r3, r3, #16
 8005a64:	6593      	str	r3, [r2, #88]	; 0x58
 8005a66:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005a72:	2200      	movs	r2, #0
 8005a74:	2100      	movs	r1, #0
 8005a76:	2036      	movs	r0, #54	; 0x36
 8005a78:	f003 fb9d 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a7c:	2036      	movs	r0, #54	; 0x36
 8005a7e:	f003 fbb4 	bl	80091ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005a82:	e04c      	b.n	8005b1e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a29      	ldr	r2, [pc, #164]	; (8005b30 <HAL_TIM_Base_MspInit+0xe8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d114      	bne.n	8005ab8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005a8e:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	4a26      	ldr	r2, [pc, #152]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005a94:	f043 0320 	orr.w	r3, r3, #32
 8005a98:	6593      	str	r3, [r2, #88]	; 0x58
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	2037      	movs	r0, #55	; 0x37
 8005aac:	f003 fb83 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005ab0:	2037      	movs	r0, #55	; 0x37
 8005ab2:	f003 fb9a 	bl	80091ea <HAL_NVIC_EnableIRQ>
}
 8005ab6:	e032      	b.n	8005b1e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <HAL_TIM_Base_MspInit+0xec>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d114      	bne.n	8005aec <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac6:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005acc:	6613      	str	r3, [r2, #96]	; 0x60
 8005ace:	4b17      	ldr	r3, [pc, #92]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005ada:	2200      	movs	r2, #0
 8005adc:	2100      	movs	r1, #0
 8005ade:	2019      	movs	r0, #25
 8005ae0:	f003 fb69 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005ae4:	2019      	movs	r0, #25
 8005ae6:	f003 fb80 	bl	80091ea <HAL_NVIC_EnableIRQ>
}
 8005aea:	e018      	b.n	8005b1e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <HAL_TIM_Base_MspInit+0xf0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d113      	bne.n	8005b1e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afa:	4a0c      	ldr	r2, [pc, #48]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b00:	6613      	str	r3, [r2, #96]	; 0x60
 8005b02:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <HAL_TIM_Base_MspInit+0xe4>)
 8005b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2100      	movs	r1, #0
 8005b12:	201a      	movs	r0, #26
 8005b14:	f003 fb4f 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005b18:	201a      	movs	r0, #26
 8005b1a:	f003 fb66 	bl	80091ea <HAL_NVIC_EnableIRQ>
}
 8005b1e:	bf00      	nop
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40001000 	.word	0x40001000
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	40001400 	.word	0x40001400
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800

08005b3c <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <HAL_TIM_OnePulse_MspInit+0x38>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d10b      	bne.n	8005b66 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b52:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005b54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b58:	6613      	str	r3, [r2, #96]	; 0x60
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40013400 	.word	0x40013400
 8005b78:	40021000 	.word	0x40021000

08005b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	; 0x28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b84:	f107 0314 	add.w	r3, r7, #20
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <HAL_TIM_MspPostInit+0xa8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d11c      	bne.n	8005bd8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <HAL_TIM_MspPostInit+0xac>)
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <HAL_TIM_MspPostInit+0xac>)
 8005ba4:	f043 0320 	orr.w	r3, r3, #32
 8005ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005baa:	4b1f      	ldr	r3, [pc, #124]	; (8005c28 <HAL_TIM_MspPostInit+0xac>)
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bba:	2302      	movs	r3, #2
 8005bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005bc6:	2306      	movs	r3, #6
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8005bca:	f107 0314 	add.w	r3, r7, #20
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4816      	ldr	r0, [pc, #88]	; (8005c2c <HAL_TIM_MspPostInit+0xb0>)
 8005bd2:	f004 fae7 	bl	800a1a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005bd6:	e020      	b.n	8005c1a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	; (8005c30 <HAL_TIM_MspPostInit+0xb4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d11b      	bne.n	8005c1a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <HAL_TIM_MspPostInit+0xac>)
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	4a10      	ldr	r2, [pc, #64]	; (8005c28 <HAL_TIM_MspPostInit+0xac>)
 8005be8:	f043 0302 	orr.w	r3, r3, #2
 8005bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bee:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <HAL_TIM_MspPostInit+0xac>)
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c06:	2300      	movs	r3, #0
 8005c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005c0e:	f107 0314 	add.w	r3, r7, #20
 8005c12:	4619      	mov	r1, r3
 8005c14:	4807      	ldr	r0, [pc, #28]	; (8005c34 <HAL_TIM_MspPostInit+0xb8>)
 8005c16:	f004 fac5 	bl	800a1a4 <HAL_GPIO_Init>
}
 8005c1a:	bf00      	nop
 8005c1c:	3728      	adds	r7, #40	; 0x28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	48001400 	.word	0x48001400
 8005c30:	40000800 	.word	0x40000800
 8005c34:	48000400 	.word	0x48000400

08005c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b09a      	sub	sp, #104	; 0x68
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	60da      	str	r2, [r3, #12]
 8005c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c50:	f107 0310 	add.w	r3, r7, #16
 8005c54:	2244      	movs	r2, #68	; 0x44
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f00c faf8 	bl	801224e <memset>
  if(huart->Instance==USART1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a23      	ldr	r2, [pc, #140]	; (8005cf0 <HAL_UART_MspInit+0xb8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d13f      	bne.n	8005ce8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	4618      	mov	r0, r3
 8005c76:	f005 fb73 	bl	800b360 <HAL_RCCEx_PeriphCLKConfig>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005c80:	f7fe ffd0 	bl	8004c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c84:	4b1b      	ldr	r3, [pc, #108]	; (8005cf4 <HAL_UART_MspInit+0xbc>)
 8005c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c88:	4a1a      	ldr	r2, [pc, #104]	; (8005cf4 <HAL_UART_MspInit+0xbc>)
 8005c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c8e:	6613      	str	r3, [r2, #96]	; 0x60
 8005c90:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <HAL_UART_MspInit+0xbc>)
 8005c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c9c:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <HAL_UART_MspInit+0xbc>)
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca0:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <HAL_UART_MspInit+0xbc>)
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ca8:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_UART_MspInit+0xbc>)
 8005caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005cb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005cb8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cba:	2302      	movs	r3, #2
 8005cbc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005cc6:	2307      	movs	r3, #7
 8005cc8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005cce:	4619      	mov	r1, r3
 8005cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cd4:	f004 fa66 	bl	800a1a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2100      	movs	r1, #0
 8005cdc:	2025      	movs	r0, #37	; 0x25
 8005cde:	f003 fa6a 	bl	80091b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ce2:	2025      	movs	r0, #37	; 0x25
 8005ce4:	f003 fa81 	bl	80091ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005ce8:	bf00      	nop
 8005cea:	3768      	adds	r7, #104	; 0x68
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40013800 	.word	0x40013800
 8005cf4:	40021000 	.word	0x40021000

08005cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005cfc:	e7fe      	b.n	8005cfc <NMI_Handler+0x4>

08005cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d02:	e7fe      	b.n	8005d02 <HardFault_Handler+0x4>

08005d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d08:	e7fe      	b.n	8005d08 <MemManage_Handler+0x4>

08005d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d0e:	e7fe      	b.n	8005d0e <BusFault_Handler+0x4>

08005d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d14:	e7fe      	b.n	8005d14 <UsageFault_Handler+0x4>

08005d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d16:	b480      	push	{r7}
 8005d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d1a:	bf00      	nop
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d32:	b480      	push	{r7}
 8005d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d36:	bf00      	nop
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d44:	f000 fdf6 	bl	8006934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005d50:	4802      	ldr	r0, [pc, #8]	; (8005d5c <DMA1_Channel1_IRQHandler+0x10>)
 8005d52:	f003 fe4e 	bl	80099f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20001e0c 	.word	0x20001e0c

08005d60 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005d64:	4802      	ldr	r0, [pc, #8]	; (8005d70 <DMA1_Channel3_IRQHandler+0x10>)
 8005d66:	f003 fe44 	bl	80099f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20001cd0 	.word	0x20001cd0

08005d74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005d78:	4803      	ldr	r0, [pc, #12]	; (8005d88 <ADC1_2_IRQHandler+0x14>)
 8005d7a:	f001 fd57 	bl	800782c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005d7e:	4803      	ldr	r0, [pc, #12]	; (8005d8c <ADC1_2_IRQHandler+0x18>)
 8005d80:	f001 fd54 	bl	800782c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005d84:	bf00      	nop
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20001bf8 	.word	0x20001bf8
 8005d8c:	20001c64 	.word	0x20001c64

08005d90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8005d94:	2020      	movs	r0, #32
 8005d96:	f004 fbb7 	bl	800a508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8005d9a:	2080      	movs	r0, #128	; 0x80
 8005d9c:	f004 fbb4 	bl	800a508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 8005da0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005da4:	f004 fbb0 	bl	800a508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005da8:	bf00      	nop
 8005daa:	bd80      	pop	{r7, pc}

08005dac <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005db0:	4802      	ldr	r0, [pc, #8]	; (8005dbc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005db2:	f006 fef5 	bl	800cba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005db6:	bf00      	nop
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20001e6c 	.word	0x20001e6c

08005dc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005dc4:	4803      	ldr	r0, [pc, #12]	; (8005dd4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005dc6:	f006 feeb 	bl	800cba0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005dca:	4803      	ldr	r0, [pc, #12]	; (8005dd8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005dcc:	f006 fee8 	bl	800cba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005dd0:	bf00      	nop
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20001e6c 	.word	0x20001e6c
 8005dd8:	20002034 	.word	0x20002034

08005ddc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005de0:	4803      	ldr	r0, [pc, #12]	; (8005df0 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8005de2:	f006 fedd 	bl	800cba0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8005de6:	4803      	ldr	r0, [pc, #12]	; (8005df4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005de8:	f006 feda 	bl	800cba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005dec:	bf00      	nop
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20001e6c 	.word	0x20001e6c
 8005df4:	20002080 	.word	0x20002080

08005df8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005dfc:	4802      	ldr	r0, [pc, #8]	; (8005e08 <TIM1_CC_IRQHandler+0x10>)
 8005dfe:	f006 fecf 	bl	800cba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005e02:	bf00      	nop
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20001e6c 	.word	0x20001e6c

08005e0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005e10:	4802      	ldr	r0, [pc, #8]	; (8005e1c <USART1_IRQHandler+0x10>)
 8005e12:	f008 f85b 	bl	800decc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005e16:	bf00      	nop
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	200020cc 	.word	0x200020cc

08005e20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e24:	4802      	ldr	r0, [pc, #8]	; (8005e30 <TIM6_DAC_IRQHandler+0x10>)
 8005e26:	f006 febb 	bl	800cba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e2a:	bf00      	nop
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20001f50 	.word	0x20001f50

08005e34 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005e38:	4802      	ldr	r0, [pc, #8]	; (8005e44 <TIM7_IRQHandler+0x10>)
 8005e3a:	f006 feb1 	bl	800cba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005e3e:	bf00      	nop
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20001f9c 	.word	0x20001f9c

08005e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  return 1;
 8005e4c:	2301      	movs	r3, #1
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <_kill>:

int _kill(int pid, int sig)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005e62:	f00c fa47 	bl	80122f4 <__errno>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2216      	movs	r2, #22
 8005e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <_exit>:

void _exit (int status)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e80:	f04f 31ff 	mov.w	r1, #4294967295
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ffe7 	bl	8005e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e8a:	e7fe      	b.n	8005e8a <_exit+0x12>

08005e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e00a      	b.n	8005eb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e9e:	f3af 8000 	nop.w
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	60ba      	str	r2, [r7, #8]
 8005eaa:	b2ca      	uxtb	r2, r1
 8005eac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	dbf0      	blt.n	8005e9e <_read+0x12>
  }

  return len;
 8005ebc:	687b      	ldr	r3, [r7, #4]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e009      	b.n	8005eec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	60ba      	str	r2, [r7, #8]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	dbf1      	blt.n	8005ed8 <_write+0x12>
  }
  return len;
 8005ef4:	687b      	ldr	r3, [r7, #4]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <_close>:

int _close(int file)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f26:	605a      	str	r2, [r3, #4]
  return 0;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <_isatty>:

int _isatty(int file)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005f3e:	2301      	movs	r3, #1
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f70:	4a14      	ldr	r2, [pc, #80]	; (8005fc4 <_sbrk+0x5c>)
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <_sbrk+0x60>)
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <_sbrk+0x64>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <_sbrk+0x64>)
 8005f86:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <_sbrk+0x68>)
 8005f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f8a:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <_sbrk+0x64>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d207      	bcs.n	8005fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f98:	f00c f9ac 	bl	80122f4 <__errno>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	220c      	movs	r2, #12
 8005fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa6:	e009      	b.n	8005fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005fa8:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <_sbrk+0x64>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005fae:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <_sbrk+0x64>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	4a05      	ldr	r2, [pc, #20]	; (8005fcc <_sbrk+0x64>)
 8005fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005fba:	68fb      	ldr	r3, [r7, #12]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20008000 	.word	0x20008000
 8005fc8:	00000400 	.word	0x00000400
 8005fcc:	200021fc 	.word	0x200021fc
 8005fd0:	200023e0 	.word	0x200023e0

08005fd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <SystemInit+0x20>)
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fde:	4a05      	ldr	r2, [pc, #20]	; (8005ff4 <SystemInit+0x20>)
 8005fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005fe8:	bf00      	nop
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	e000ed00 	.word	0xe000ed00

08005ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005ff8:	480d      	ldr	r0, [pc, #52]	; (8006030 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005ffa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ffc:	f7ff ffea 	bl	8005fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
                                   ldr r0, =_sdata
 8006000:	480c      	ldr	r0, [pc, #48]	; (8006034 <LoopForever+0x6>)
  ldr r1, =_edata
 8006002:	490d      	ldr	r1, [pc, #52]	; (8006038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006004:	4a0d      	ldr	r2, [pc, #52]	; (800603c <LoopForever+0xe>)
  movs r3, #0
 8006006:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006008:	e002      	b.n	8006010 <LoopCopyDataInit>

0800600a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800600a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800600c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800600e:	3304      	adds	r3, #4

08006010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006014:	d3f9      	bcc.n	800600a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006016:	4a0a      	ldr	r2, [pc, #40]	; (8006040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006018:	4c0a      	ldr	r4, [pc, #40]	; (8006044 <LoopForever+0x16>)
  movs r3, #0
 800601a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800601c:	e001      	b.n	8006022 <LoopFillZerobss>

0800601e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800601e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006020:	3204      	adds	r2, #4

08006022 <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 8006022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006024:	d3fb      	bcc.n	800601e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8006026:	f00c f96b 	bl	8012300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800602a:	f7fd fdc9 	bl	8003bc0 <main>

0800602e <LoopForever>:

LoopForever:
    b LoopForever
 800602e:	e7fe      	b.n	800602e <LoopForever>
  ldr   r0, =_estack
 8006030:	20008000 	.word	0x20008000
                                   ldr r0, =_sdata
 8006034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006038:	200003e4 	.word	0x200003e4
  ldr r2, =_sidata
 800603c:	08018c00 	.word	0x08018c00
  ldr r2, =_sbss
 8006040:	200003e8 	.word	0x200003e8
  ldr r4, =_ebss
 8006044:	200023e0 	.word	0x200023e0

08006048 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006048:	e7fe      	b.n	8006048 <COMP1_2_3_IRQHandler>
	...

0800604c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <setSPI_Size+0x54>)
 8006058:	f993 3000 	ldrsb.w	r3, [r3]
 800605c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006060:	429a      	cmp	r2, r3
 8006062:	d017      	beq.n	8006094 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <setSPI_Size+0x58>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <setSPI_Size+0x58>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006072:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8006074:	4a0a      	ldr	r2, [pc, #40]	; (80060a0 <setSPI_Size+0x54>)
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800607a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d104      	bne.n	800608c <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8006082:	4b08      	ldr	r3, [pc, #32]	; (80060a4 <setSPI_Size+0x58>)
 8006084:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8006088:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 800608a:	e003      	b.n	8006094 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <setSPI_Size+0x58>)
 800608e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006092:	60da      	str	r2, [r3, #12]
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	200001e4 	.word	0x200001e4
 80060a4:	20001da8 	.word	0x20001da8

080060a8 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	460a      	mov	r2, r1
 80060b2:	71fb      	strb	r3, [r7, #7]
 80060b4:	4613      	mov	r3, r2
 80060b6:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 80060b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff ffc5 	bl	800604c <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 80060c2:	4b3c      	ldr	r3, [pc, #240]	; (80061b4 <setDMAMemMode+0x10c>)
 80060c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80060c8:	461a      	mov	r2, r3
 80060ca:	79bb      	ldrb	r3, [r7, #6]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d106      	bne.n	80060de <setDMAMemMode+0x36>
 80060d0:	4b38      	ldr	r3, [pc, #224]	; (80061b4 <setDMAMemMode+0x10c>)
 80060d2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80060d6:	461a      	mov	r2, r3
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d066      	beq.n	80061ac <setDMAMemMode+0x104>
    config.dma_sz =size;
 80060de:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80060e2:	4b34      	ldr	r3, [pc, #208]	; (80061b4 <setDMAMemMode+0x10c>)
 80060e4:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80060e6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80060ea:	4b32      	ldr	r3, [pc, #200]	; (80061b4 <setDMAMemMode+0x10c>)
 80060ec:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 80060ee:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <setDMAMemMode+0x110>)
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b30      	ldr	r3, [pc, #192]	; (80061b8 <setDMAMemMode+0x110>)
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8006102:	bf00      	nop
 8006104:	4b2c      	ldr	r3, [pc, #176]	; (80061b8 <setDMAMemMode+0x110>)
 8006106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f7      	bne.n	8006104 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d10e      	bne.n	8006138 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800611a:	4b27      	ldr	r3, [pc, #156]	; (80061b8 <setDMAMemMode+0x110>)
 800611c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611e:	2280      	movs	r2, #128	; 0x80
 8006120:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8006122:	4b25      	ldr	r3, [pc, #148]	; (80061b8 <setDMAMemMode+0x110>)
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4b23      	ldr	r3, [pc, #140]	; (80061b8 <setDMAMemMode+0x110>)
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e00d      	b.n	8006154 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8006138:	4b1f      	ldr	r3, [pc, #124]	; (80061b8 <setDMAMemMode+0x110>)
 800613a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613c:	2200      	movs	r2, #0
 800613e:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8006140:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <setDMAMemMode+0x110>)
 8006142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <setDMAMemMode+0x110>)
 800614a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006152:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 8006154:	79bb      	ldrb	r3, [r7, #6]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d116      	bne.n	8006188 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800615a:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <setDMAMemMode+0x110>)
 800615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006162:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006164:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <setDMAMemMode+0x110>)
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800616c:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <setDMAMemMode+0x110>)
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800617a:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <setDMAMemMode+0x110>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8006184:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8006186:	e011      	b.n	80061ac <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006188:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <setDMAMemMode+0x110>)
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	2200      	movs	r2, #0
 800618e:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <setDMAMemMode+0x110>)
 8006192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006194:	2200      	movs	r2, #0
 8006196:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8006198:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <setDMAMemMode+0x110>)
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <setDMAMemMode+0x110>)
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80061aa:	601a      	str	r2, [r3, #0]
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	200001e4 	.word	0x200001e4
 80061b8:	20001da8 	.word	0x20001da8

080061bc <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 80061c8:	2000      	movs	r0, #0
 80061ca:	f7ff ff3f 	bl	800604c <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 80061ce:	2200      	movs	r2, #0
 80061d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061d4:	4815      	ldr	r0, [pc, #84]	; (800622c <LCD_WriteCommand+0x70>)
 80061d6:	f004 f97f 	bl	800a4d8 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80061da:	2200      	movs	r2, #0
 80061dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061e0:	4812      	ldr	r0, [pc, #72]	; (800622c <LCD_WriteCommand+0x70>)
 80061e2:	f004 f979 	bl	800a4d8 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ea:	2201      	movs	r2, #1
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4810      	ldr	r0, [pc, #64]	; (8006230 <LCD_WriteCommand+0x74>)
 80061f0:	f005 fb51 	bl	800b896 <HAL_SPI_Transmit>
  if(argc){
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00e      	beq.n	8006218 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80061fa:	2201      	movs	r2, #1
 80061fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006200:	480a      	ldr	r0, [pc, #40]	; (800622c <LCD_WriteCommand+0x70>)
 8006202:	f004 f969 	bl	800a4d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	1c59      	adds	r1, r3, #1
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	b29a      	uxth	r2, r3
 800620e:	f04f 33ff 	mov.w	r3, #4294967295
 8006212:	4807      	ldr	r0, [pc, #28]	; (8006230 <LCD_WriteCommand+0x74>)
 8006214:	f005 fb3f 	bl	800b896 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8006218:	2201      	movs	r2, #1
 800621a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800621e:	4803      	ldr	r0, [pc, #12]	; (800622c <LCD_WriteCommand+0x70>)
 8006220:	f004 f95a 	bl	800a4d8 <HAL_GPIO_WritePin>
#endif
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	48000400 	.word	0x48000400
 8006230:	20001da8 	.word	0x20001da8

08006234 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800623e:	2201      	movs	r2, #1
 8006240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006244:	4830      	ldr	r0, [pc, #192]	; (8006308 <LCD_WriteData+0xd4>)
 8006246:	f004 f947 	bl	800a4d8 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800624a:	2200      	movs	r2, #0
 800624c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006250:	482d      	ldr	r0, [pc, #180]	; (8006308 <LCD_WriteData+0xd4>)
 8006252:	f004 f941 	bl	800a4d8 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8006256:	e049      	b.n	80062ec <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800625e:	4293      	cmp	r3, r2
 8006260:	bf28      	it	cs
 8006262:	4613      	movcs	r3, r2
 8006264:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b20      	cmp	r3, #32
 800626a:	d924      	bls.n	80062b6 <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800626c:	89fb      	ldrh	r3, [r7, #14]
 800626e:	461a      	mov	r2, r3
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4826      	ldr	r0, [pc, #152]	; (800630c <LCD_WriteData+0xd8>)
 8006274:	f005 fc84 	bl	800bb80 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8006278:	bf00      	nop
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <LCD_WriteData+0xd8>)
 800627c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627e:	4618      	mov	r0, r3
 8006280:	f003 fc66 	bl	8009b50 <HAL_DMA_GetState>
 8006284:	4603      	mov	r3, r0
 8006286:	2b01      	cmp	r3, #1
 8006288:	d1f7      	bne.n	800627a <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 800628a:	4b21      	ldr	r3, [pc, #132]	; (8006310 <LCD_WriteData+0xdc>)
 800628c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d127      	bne.n	80062e4 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8006294:	4b1e      	ldr	r3, [pc, #120]	; (8006310 <LCD_WriteData+0xdc>)
 8006296:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d104      	bne.n	80062a8 <LCD_WriteData+0x74>
          buff += chunk_size;
 800629e:	89fb      	ldrh	r3, [r7, #14]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4413      	add	r3, r2
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	e01d      	b.n	80062e4 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 80062a8:	89fb      	ldrh	r3, [r7, #14]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	461a      	mov	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4413      	add	r3, r2
 80062b2:	607b      	str	r3, [r7, #4]
 80062b4:	e016      	b.n	80062e4 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80062b6:	89fa      	ldrh	r2, [r7, #14]
 80062b8:	f04f 33ff 	mov.w	r3, #4294967295
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	4813      	ldr	r0, [pc, #76]	; (800630c <LCD_WriteData+0xd8>)
 80062c0:	f005 fae9 	bl	800b896 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 80062c4:	4b12      	ldr	r3, [pc, #72]	; (8006310 <LCD_WriteData+0xdc>)
 80062c6:	f993 3000 	ldrsb.w	r3, [r3]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d104      	bne.n	80062d8 <LCD_WriteData+0xa4>
        buff += chunk_size;
 80062ce:	89fb      	ldrh	r3, [r7, #14]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	4413      	add	r3, r2
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	e005      	b.n	80062e4 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 80062d8:	89fb      	ldrh	r3, [r7, #14]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	461a      	mov	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4413      	add	r3, r2
 80062e2:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1b2      	bne.n	8006258 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80062f2:	2201      	movs	r2, #1
 80062f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062f8:	4803      	ldr	r0, [pc, #12]	; (8006308 <LCD_WriteData+0xd4>)
 80062fa:	f004 f8ed 	bl	800a4d8 <HAL_GPIO_WritePin>
#endif
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	48000400 	.word	0x48000400
 800630c:	20001da8 	.word	0x20001da8
 8006310:	200001e4 	.word	0x200001e4

08006314 <LCD_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in ST7735.h)
 * @return none
 */
void LCD_SetRotation(uint8_t m)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { CMD_MADCTL, 0};
 800631e:	2336      	movs	r3, #54	; 0x36
 8006320:	81bb      	strh	r3, [r7, #12]

  m = m % 4; // can't be higher than 3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	71fb      	strb	r3, [r7, #7]

  switch (m)
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	2b03      	cmp	r3, #3
 800632e:	d817      	bhi.n	8006360 <LCD_SetRotation+0x4c>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <LCD_SetRotation+0x24>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	08006349 	.word	0x08006349
 800633c:	0800634f 	.word	0x0800634f
 8006340:	08006355 	.word	0x08006355
 8006344:	0800635b 	.word	0x0800635b
  {
  case 0:
#if LCD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_RGB;
 8006348:	23c0      	movs	r3, #192	; 0xc0
 800634a:	737b      	strb	r3, [r7, #13]
#endif
    break;
 800634c:	e008      	b.n	8006360 <LCD_SetRotation+0x4c>
  case 1:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 800634e:	23a0      	movs	r3, #160	; 0xa0
 8006350:	737b      	strb	r3, [r7, #13]
#endif
    break;
 8006352:	e005      	b.n	8006360 <LCD_SetRotation+0x4c>
  case 2:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_RGB;
 8006354:	2300      	movs	r3, #0
 8006356:	737b      	strb	r3, [r7, #13]
#endif
    break;
 8006358:	e002      	b.n	8006360 <LCD_SetRotation+0x4c>
  case 3:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 800635a:	2360      	movs	r3, #96	; 0x60
 800635c:	737b      	strb	r3, [r7, #13]
#endif
    break;
 800635e:	bf00      	nop
  }
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006360:	f107 030c 	add.w	r3, r7, #12
 8006364:	2101      	movs	r1, #1
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff ff28 	bl	80061bc <LCD_WriteCommand>
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8006374:	b590      	push	{r4, r7, lr}
 8006376:	b08b      	sub	sp, #44	; 0x2c
 8006378:	af00      	add	r7, sp, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	461a      	mov	r2, r3
 8006382:	4623      	mov	r3, r4
 8006384:	80fb      	strh	r3, [r7, #6]
 8006386:	4603      	mov	r3, r0
 8006388:	80bb      	strh	r3, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	807b      	strh	r3, [r7, #2]
 800638e:	4613      	mov	r3, r2
 8006390:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006396:	887b      	ldrh	r3, [r7, #2]
 8006398:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800639a:	88bb      	ldrh	r3, [r7, #4]
 800639c:	847b      	strh	r3, [r7, #34]	; 0x22
 800639e:	883b      	ldrh	r3, [r7, #0]
 80063a0:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80063a2:	232a      	movs	r3, #42	; 0x2a
 80063a4:	763b      	strb	r3, [r7, #24]
 80063a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80063aa:	121b      	asrs	r3, r3, #8
 80063ac:	b21b      	sxth	r3, r3
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	767b      	strb	r3, [r7, #25]
 80063b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	76bb      	strb	r3, [r7, #26]
 80063b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80063bc:	121b      	asrs	r3, r3, #8
 80063be:	b21b      	sxth	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	76fb      	strb	r3, [r7, #27]
 80063c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80063ca:	f107 0318 	add.w	r3, r7, #24
 80063ce:	2104      	movs	r1, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fef3 	bl	80061bc <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80063d6:	232b      	movs	r3, #43	; 0x2b
 80063d8:	743b      	strb	r3, [r7, #16]
 80063da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80063de:	121b      	asrs	r3, r3, #8
 80063e0:	b21b      	sxth	r3, r3
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	747b      	strb	r3, [r7, #17]
 80063e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	74bb      	strb	r3, [r7, #18]
 80063ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80063f0:	121b      	asrs	r3, r3, #8
 80063f2:	b21b      	sxth	r3, r3
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	74fb      	strb	r3, [r7, #19]
 80063f8:	8c3b      	ldrh	r3, [r7, #32]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80063fe:	f107 0310 	add.w	r3, r7, #16
 8006402:	2104      	movs	r1, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fed9 	bl	80061bc <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800640a:	232c      	movs	r3, #44	; 0x2c
 800640c:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800640e:	f107 030c 	add.w	r3, r7, #12
 8006412:	2100      	movs	r1, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fed1 	bl	80061bc <LCD_WriteCommand>
  }
}
 800641a:	bf00      	nop
 800641c:	372c      	adds	r7, #44	; 0x2c
 800641e:	46bd      	mov	sp, r7
 8006420:	bd90      	pop	{r4, r7, pc}
	...

08006424 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	80fb      	strh	r3, [r7, #6]
 800642e:	460b      	mov	r3, r1
 8006430:	80bb      	strh	r3, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8006436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	db39      	blt.n	80064b2 <LCD_DrawPixel+0x8e>
 800643e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006442:	2bef      	cmp	r3, #239	; 0xef
 8006444:	dc35      	bgt.n	80064b2 <LCD_DrawPixel+0x8e>
 8006446:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	db31      	blt.n	80064b2 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 800644e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006452:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006456:	da2c      	bge.n	80064b2 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	b29b      	uxth	r3, r3
 800645e:	b2db      	uxtb	r3, r3
 8006460:	733b      	strb	r3, [r7, #12]
 8006462:	887b      	ldrh	r3, [r7, #2]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8006468:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800646c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006470:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006474:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006478:	f7ff ff7c 	bl	8006374 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800647c:	2201      	movs	r2, #1
 800647e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006482:	480e      	ldr	r0, [pc, #56]	; (80064bc <LCD_DrawPixel+0x98>)
 8006484:	f004 f828 	bl	800a4d8 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8006488:	2200      	movs	r2, #0
 800648a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800648e:	480b      	ldr	r0, [pc, #44]	; (80064bc <LCD_DrawPixel+0x98>)
 8006490:	f004 f822 	bl	800a4d8 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8006494:	f107 010c 	add.w	r1, r7, #12
 8006498:	f04f 33ff 	mov.w	r3, #4294967295
 800649c:	2202      	movs	r2, #2
 800649e:	4808      	ldr	r0, [pc, #32]	; (80064c0 <LCD_DrawPixel+0x9c>)
 80064a0:	f005 f9f9 	bl	800b896 <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80064a4:	2201      	movs	r2, #1
 80064a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064aa:	4804      	ldr	r0, [pc, #16]	; (80064bc <LCD_DrawPixel+0x98>)
 80064ac:	f004 f814 	bl	800a4d8 <HAL_GPIO_WritePin>
 80064b0:	e000      	b.n	80064b4 <LCD_DrawPixel+0x90>
    return;
 80064b2:	bf00      	nop
#endif
}
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	48000400 	.word	0x48000400
 80064c0:	20001da8 	.word	0x20001da8

080064c4 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b094      	sub	sp, #80	; 0x50
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d905      	bls.n	80064e2 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 80064d6:	1cbb      	adds	r3, r7, #2
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff feaa 	bl	8006234 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 80064e0:	e026      	b.n	8006530 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80064e2:	2300      	movs	r3, #0
 80064e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e6:	e009      	b.n	80064fc <LCD_FillPixels+0x38>
      fill[t]=color;
 80064e8:	887a      	ldrh	r2, [r7, #2]
 80064ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	3350      	adds	r3, #80	; 0x50
 80064f0:	443b      	add	r3, r7
 80064f2:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80064f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f8:	3301      	adds	r3, #1
 80064fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b20      	cmp	r3, #32
 8006500:	bf28      	it	cs
 8006502:	2320      	movcs	r3, #32
 8006504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006506:	429a      	cmp	r2, r3
 8006508:	d3ee      	bcc.n	80064e8 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 800650a:	e00e      	b.n	800652a <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b20      	cmp	r3, #32
 8006510:	bf28      	it	cs
 8006512:	2320      	movcs	r3, #32
 8006514:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8006516:	f107 0308 	add.w	r3, r7, #8
 800651a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fe89 	bl	8006234 <LCD_WriteData>
      pixels-=sz;
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1ed      	bne.n	800650c <LCD_FillPixels+0x48>
}
 8006530:	bf00      	nop
 8006532:	3750      	adds	r7, #80	; 0x50
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8006538:	b590      	push	{r4, r7, lr}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	4623      	mov	r3, r4
 8006548:	80fb      	strh	r3, [r7, #6]
 800654a:	4603      	mov	r3, r0
 800654c:	80bb      	strh	r3, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	807b      	strh	r3, [r7, #2]
 8006552:	4613      	mov	r3, r2
 8006554:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8006556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655e:	d105      	bne.n	800656c <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8006560:	2100      	movs	r1, #0
 8006562:	2001      	movs	r0, #1
 8006564:	f7ff fda0 	bl	80060a8 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	e014      	b.n	8006596 <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 800656c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006570:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006574:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006578:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800657c:	f7ff fefa 	bl	8006374 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8006580:	2101      	movs	r1, #1
 8006582:	2000      	movs	r0, #0
 8006584:	f7ff fd90 	bl	80060a8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8006588:	2201      	movs	r2, #1
 800658a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800658e:	4804      	ldr	r0, [pc, #16]	; (80065a0 <LCD_FillArea+0x68>)
 8006590:	f003 ffa2 	bl	800a4d8 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8006594:	4b03      	ldr	r3, [pc, #12]	; (80065a4 <LCD_FillArea+0x6c>)
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	bf00      	nop
 80065a0:	48000400 	.word	0x48000400
 80065a4:	080064c5 	.word	0x080064c5

080065a8 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	4611      	mov	r1, r2
 80065b4:	461a      	mov	r2, r3
 80065b6:	4623      	mov	r3, r4
 80065b8:	80fb      	strh	r3, [r7, #6]
 80065ba:	4603      	mov	r3, r0
 80065bc:	80bb      	strh	r3, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	807b      	strh	r3, [r7, #2]
 80065c2:	4613      	mov	r3, r2
 80065c4:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 80065c6:	887a      	ldrh	r2, [r7, #2]
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	3301      	adds	r3, #1
 80065ce:	4619      	mov	r1, r3
 80065d0:	883a      	ldrh	r2, [r7, #0]
 80065d2:	88bb      	ldrh	r3, [r7, #4]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	3301      	adds	r3, #1
 80065d8:	fb01 f303 	mul.w	r3, r1, r3
 80065dc:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80065de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80065ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80065ee:	f7ff fec1 	bl	8006374 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80065f2:	2101      	movs	r1, #1
 80065f4:	2000      	movs	r0, #0
 80065f6:	f7ff fd57 	bl	80060a8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 80065fa:	8c3b      	ldrh	r3, [r7, #32]
 80065fc:	4619      	mov	r1, r3
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff ff60 	bl	80064c4 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8006604:	2100      	movs	r1, #0
 8006606:	2001      	movs	r0, #1
 8006608:	f7ff fd4e 	bl	80060a8 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bd90      	pop	{r4, r7, pc}

08006616 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8006616:	b590      	push	{r4, r7, lr}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	4603      	mov	r3, r0
 800661e:	603a      	str	r2, [r7, #0]
 8006620:	80fb      	strh	r3, [r7, #6]
 8006622:	460b      	mov	r3, r1
 8006624:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	889b      	ldrh	r3, [r3, #4]
 800662a:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	88db      	ldrh	r3, [r3, #6]
 8006630:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	2bef      	cmp	r3, #239	; 0xef
 8006636:	d839      	bhi.n	80066ac <LCD_DrawImage+0x96>
 8006638:	88bb      	ldrh	r3, [r7, #4]
 800663a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800663e:	d235      	bcs.n	80066ac <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8006640:	88fa      	ldrh	r2, [r7, #6]
 8006642:	89fb      	ldrh	r3, [r7, #14]
 8006644:	4413      	add	r3, r2
 8006646:	2bf0      	cmp	r3, #240	; 0xf0
 8006648:	dc32      	bgt.n	80066b0 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 800664a:	88ba      	ldrh	r2, [r7, #4]
 800664c:	89bb      	ldrh	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006654:	dc2e      	bgt.n	80066b4 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	7a1b      	ldrb	r3, [r3, #8]
 800665a:	2b10      	cmp	r3, #16
 800665c:	d12c      	bne.n	80066b8 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800665e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006662:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006666:	88fa      	ldrh	r2, [r7, #6]
 8006668:	89fb      	ldrh	r3, [r7, #14]
 800666a:	4413      	add	r3, r2
 800666c:	b29b      	uxth	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b29b      	uxth	r3, r3
 8006672:	b21c      	sxth	r4, r3
 8006674:	88ba      	ldrh	r2, [r7, #4]
 8006676:	89bb      	ldrh	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29b      	uxth	r3, r3
 8006680:	b21b      	sxth	r3, r3
 8006682:	4622      	mov	r2, r4
 8006684:	f7ff fe76 	bl	8006374 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8006688:	2101      	movs	r1, #1
 800668a:	2001      	movs	r0, #1
 800668c:	f7ff fd0c 	bl	80060a8 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	89fb      	ldrh	r3, [r7, #14]
 8006696:	89ba      	ldrh	r2, [r7, #12]
 8006698:	fb02 f303 	mul.w	r3, r2, r3
 800669c:	4619      	mov	r1, r3
 800669e:	f7ff fdc9 	bl	8006234 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80066a2:	2100      	movs	r1, #0
 80066a4:	2001      	movs	r0, #1
 80066a6:	f7ff fcff 	bl	80060a8 <setDMAMemMode>
 80066aa:	e006      	b.n	80066ba <LCD_DrawImage+0xa4>
    return;
 80066ac:	bf00      	nop
 80066ae:	e004      	b.n	80066ba <LCD_DrawImage+0xa4>
    return;
 80066b0:	bf00      	nop
 80066b2:	e002      	b.n	80066ba <LCD_DrawImage+0xa4>
    return;
 80066b4:	bf00      	nop
 80066b6:	e000      	b.n	80066ba <LCD_DrawImage+0xa4>
    return;
 80066b8:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd90      	pop	{r4, r7, pc}

080066c0 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	4604      	mov	r4, r0
 80066c8:	4608      	mov	r0, r1
 80066ca:	4611      	mov	r1, r2
 80066cc:	461a      	mov	r2, r3
 80066ce:	4623      	mov	r3, r4
 80066d0:	80fb      	strh	r3, [r7, #6]
 80066d2:	4603      	mov	r3, r0
 80066d4:	80bb      	strh	r3, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	807b      	strh	r3, [r7, #2]
 80066da:	4613      	mov	r3, r2
 80066dc:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 80066de:	88fa      	ldrh	r2, [r7, #6]
 80066e0:	887b      	ldrh	r3, [r7, #2]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d10a      	bne.n	80066fc <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80066e6:	88ba      	ldrh	r2, [r7, #4]
 80066e8:	883b      	ldrh	r3, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d918      	bls.n	8006720 <LCD_DrawLine+0x60>
 80066ee:	88bb      	ldrh	r3, [r7, #4]
 80066f0:	81bb      	strh	r3, [r7, #12]
 80066f2:	883b      	ldrh	r3, [r7, #0]
 80066f4:	80bb      	strh	r3, [r7, #4]
 80066f6:	89bb      	ldrh	r3, [r7, #12]
 80066f8:	803b      	strh	r3, [r7, #0]
 80066fa:	e011      	b.n	8006720 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 80066fc:	88ba      	ldrh	r2, [r7, #4]
 80066fe:	883b      	ldrh	r3, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d10a      	bne.n	800671a <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8006704:	88fa      	ldrh	r2, [r7, #6]
 8006706:	887b      	ldrh	r3, [r7, #2]
 8006708:	429a      	cmp	r2, r3
 800670a:	d909      	bls.n	8006720 <LCD_DrawLine+0x60>
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	81fb      	strh	r3, [r7, #14]
 8006710:	887b      	ldrh	r3, [r7, #2]
 8006712:	80fb      	strh	r3, [r7, #6]
 8006714:	89fb      	ldrh	r3, [r7, #14]
 8006716:	807b      	strh	r3, [r7, #2]
 8006718:	e002      	b.n	8006720 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800671a:	f04f 33ff 	mov.w	r3, #4294967295
 800671e:	e009      	b.n	8006734 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8006720:	883c      	ldrh	r4, [r7, #0]
 8006722:	887a      	ldrh	r2, [r7, #2]
 8006724:	88b9      	ldrh	r1, [r7, #4]
 8006726:	88f8      	ldrh	r0, [r7, #6]
 8006728:	8c3b      	ldrh	r3, [r7, #32]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	4623      	mov	r3, r4
 800672e:	f7ff ff3b 	bl	80065a8 <LCD_Fill>
  return UG_RESULT_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bd90      	pop	{r4, r7, pc}

0800673c <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60ba      	str	r2, [r7, #8]
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	4603      	mov	r3, r0
 8006748:	81fb      	strh	r3, [r7, #14]
 800674a:	460b      	mov	r3, r1
 800674c:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f008 ffa2 	bl	800f698 <UG_FontSelect>
  UG_SetForecolor(color);
 8006754:	8b3b      	ldrh	r3, [r7, #24]
 8006756:	4618      	mov	r0, r3
 8006758:	f009 faea 	bl	800fd30 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 800675c:	8bbb      	ldrh	r3, [r7, #28]
 800675e:	4618      	mov	r0, r3
 8006760:	f009 faf8 	bl	800fd54 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8006764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006768:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f009 fa46 	bl	800fc00 <UG_PutString>
}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <LCD_setPower+0x14>
 800678c:	2329      	movs	r3, #41	; 0x29
 800678e:	e000      	b.n	8006792 <LCD_setPower+0x16>
 8006790:	2328      	movs	r3, #40	; 0x28
 8006792:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006794:	f107 030c 	add.w	r3, r7, #12
 8006798:	2100      	movs	r1, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fd0e 	bl	80061bc <LCD_WriteCommand>
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <LCD_Update>:

static void LCD_Update(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80067ac:	2100      	movs	r1, #0
 80067ae:	2001      	movs	r0, #1
 80067b0:	f7ff fc7a 	bl	80060a8 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 80067b4:	bf00      	nop
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80067be:	2201      	movs	r2, #1
 80067c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067c4:	482a      	ldr	r0, [pc, #168]	; (8006870 <LCD_init+0xb8>)
 80067c6:	f003 fe87 	bl	800a4d8 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 80067ca:	2200      	movs	r2, #0
 80067cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067d0:	4827      	ldr	r0, [pc, #156]	; (8006870 <LCD_init+0xb8>)
 80067d2:	f003 fe81 	bl	800a4d8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80067d6:	2001      	movs	r0, #1
 80067d8:	f000 f8ca 	bl	8006970 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 80067dc:	2201      	movs	r2, #1
 80067de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067e2:	4823      	ldr	r0, [pc, #140]	; (8006870 <LCD_init+0xb8>)
 80067e4:	f003 fe78 	bl	800a4d8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80067e8:	20c8      	movs	r0, #200	; 0xc8
 80067ea:	f000 f8c1 	bl	8006970 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 80067ee:	4921      	ldr	r1, [pc, #132]	; (8006874 <LCD_init+0xbc>)
 80067f0:	4821      	ldr	r0, [pc, #132]	; (8006878 <LCD_init+0xc0>)
 80067f2:	f008 feb7 	bl	800f564 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 80067f6:	4921      	ldr	r1, [pc, #132]	; (800687c <LCD_init+0xc4>)
 80067f8:	2000      	movs	r0, #0
 80067fa:	f00a fb41 	bl	8010e80 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 80067fe:	4920      	ldr	r1, [pc, #128]	; (8006880 <LCD_init+0xc8>)
 8006800:	2001      	movs	r0, #1
 8006802:	f00a fb3d 	bl	8010e80 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8006806:	491f      	ldr	r1, [pc, #124]	; (8006884 <LCD_init+0xcc>)
 8006808:	2002      	movs	r0, #2
 800680a:	f00a fb39 	bl	8010e80 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 800680e:	491e      	ldr	r1, [pc, #120]	; (8006888 <LCD_init+0xd0>)
 8006810:	2003      	movs	r0, #3
 8006812:	f00a fb35 	bl	8010e80 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8006816:	2000      	movs	r0, #0
 8006818:	f009 faae 	bl	800fd78 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 800681c:	2000      	movs	r0, #0
 800681e:	f009 fabf 	bl	800fda0 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8006822:	2300      	movs	r3, #0
 8006824:	80fb      	strh	r3, [r7, #6]
 8006826:	e013      	b.n	8006850 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	3301      	adds	r3, #1
 800682c:	4a17      	ldr	r2, [pc, #92]	; (800688c <LCD_init+0xd4>)
 800682e:	441a      	add	r2, r3
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	4916      	ldr	r1, [pc, #88]	; (800688c <LCD_init+0xd4>)
 8006834:	5ccb      	ldrb	r3, [r1, r3]
 8006836:	4619      	mov	r1, r3
 8006838:	4610      	mov	r0, r2
 800683a:	f7ff fcbf 	bl	80061bc <LCD_WriteCommand>
    i += init_cmd[i]+2;
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	4a12      	ldr	r2, [pc, #72]	; (800688c <LCD_init+0xd4>)
 8006842:	5cd3      	ldrb	r3, [r2, r3]
 8006844:	b29a      	uxth	r2, r3
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	4413      	add	r3, r2
 800684a:	b29b      	uxth	r3, r3
 800684c:	3302      	adds	r3, #2
 800684e:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	2b4b      	cmp	r3, #75	; 0x4b
 8006854:	d9e8      	bls.n	8006828 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8006856:	2000      	movs	r0, #0
 8006858:	f008 ff2e 	bl	800f6b8 <UG_FillScreen>
  LCD_setPower(ENABLE);
 800685c:	2001      	movs	r0, #1
 800685e:	f7ff ff8d 	bl	800677c <LCD_setPower>
  UG_Update();
 8006862:	f00a fb2f 	bl	8010ec4 <UG_Update>
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	48000400 	.word	0x48000400
 8006874:	200001e8 	.word	0x200001e8
 8006878:	20002200 	.word	0x20002200
 800687c:	080066c1 	.word	0x080066c1
 8006880:	080065a9 	.word	0x080065a9
 8006884:	08006539 	.word	0x08006539
 8006888:	08006617 	.word	0x08006617
 800688c:	08015f9c 	.word	0x08015f9c

08006890 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800689a:	2003      	movs	r0, #3
 800689c:	f002 fc80 	bl	80091a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068a0:	200f      	movs	r0, #15
 80068a2:	f000 f80d 	bl	80068c0 <HAL_InitTick>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	71fb      	strb	r3, [r7, #7]
 80068b0:	e001      	b.n	80068b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068b2:	f7fe fded 	bl	8005490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068b6:	79fb      	ldrb	r3, [r7, #7]

}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80068cc:	4b16      	ldr	r3, [pc, #88]	; (8006928 <HAL_InitTick+0x68>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d022      	beq.n	800691a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80068d4:	4b15      	ldr	r3, [pc, #84]	; (800692c <HAL_InitTick+0x6c>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	4b13      	ldr	r3, [pc, #76]	; (8006928 <HAL_InitTick+0x68>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80068e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e8:	4618      	mov	r0, r3
 80068ea:	f002 fc8c 	bl	8009206 <HAL_SYSTICK_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10f      	bne.n	8006914 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b0f      	cmp	r3, #15
 80068f8:	d809      	bhi.n	800690e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068fa:	2200      	movs	r2, #0
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006902:	f002 fc58 	bl	80091b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006906:	4a0a      	ldr	r2, [pc, #40]	; (8006930 <HAL_InitTick+0x70>)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	e007      	b.n	800691e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
 8006912:	e004      	b.n	800691e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
 8006918:	e001      	b.n	800691e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	200001f8 	.word	0x200001f8
 800692c:	200001e0 	.word	0x200001e0
 8006930:	200001f4 	.word	0x200001f4

08006934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <HAL_IncTick+0x1c>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <HAL_IncTick+0x20>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4413      	add	r3, r2
 8006942:	4a03      	ldr	r2, [pc, #12]	; (8006950 <HAL_IncTick+0x1c>)
 8006944:	6013      	str	r3, [r2, #0]
}
 8006946:	bf00      	nop
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	20002274 	.word	0x20002274
 8006954:	200001f8 	.word	0x200001f8

08006958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  return uwTick;
 800695c:	4b03      	ldr	r3, [pc, #12]	; (800696c <HAL_GetTick+0x14>)
 800695e:	681b      	ldr	r3, [r3, #0]
}
 8006960:	4618      	mov	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	20002274 	.word	0x20002274

08006970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006978:	f7ff ffee 	bl	8006958 <HAL_GetTick>
 800697c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006988:	d004      	beq.n	8006994 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <HAL_Delay+0x40>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006994:	bf00      	nop
 8006996:	f7ff ffdf 	bl	8006958 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d8f7      	bhi.n	8006996 <HAL_Delay+0x26>
  {
  }
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	200001f8 	.word	0x200001f8

080069b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	609a      	str	r2, [r3, #8]
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3360      	adds	r3, #96	; 0x60
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <LL_ADC_SetOffset+0x44>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a54:	bf00      	nop
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	03fff000 	.word	0x03fff000

08006a64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3360      	adds	r3, #96	; 0x60
 8006a72:	461a      	mov	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3360      	adds	r3, #96	; 0x60
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b087      	sub	sp, #28
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3360      	adds	r3, #96	; 0x60
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006af0:	bf00      	nop
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3360      	adds	r3, #96	; 0x60
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	431a      	orrs	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	615a      	str	r2, [r3, #20]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b087      	sub	sp, #28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3330      	adds	r3, #48	; 0x30
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	4413      	add	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	211f      	movs	r1, #31
 8006baa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	401a      	ands	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	0e9b      	lsrs	r3, r3, #26
 8006bb6:	f003 011f 	and.w	r1, r3, #31
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3314      	adds	r3, #20
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	0e5b      	lsrs	r3, r3, #25
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	4413      	add	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	0d1b      	lsrs	r3, r3, #20
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2107      	movs	r1, #7
 8006c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2e:	43db      	mvns	r3, r3
 8006c30:	401a      	ands	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	0d1b      	lsrs	r3, r3, #20
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c40:	431a      	orrs	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	401a      	ands	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f003 0318 	and.w	r3, r3, #24
 8006c76:	4908      	ldr	r1, [pc, #32]	; (8006c98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006c78:	40d9      	lsrs	r1, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c82:	431a      	orrs	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	0007ffff 	.word	0x0007ffff

08006c9c <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	330c      	adds	r3, #12
 8006cac:	4618      	mov	r0, r3
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	0d1b      	lsrs	r3, r3, #20
 8006cb2:	f003 0103 	and.w	r1, r3, #3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f003 0201 	and.w	r2, r3, #1
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4403      	add	r3, r0
 8006cca:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006cd6:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	401a      	ands	r2, r3
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	400b      	ands	r3, r1
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b087      	sub	sp, #28
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
 8006d02:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3320      	adds	r3, #32
 8006d08:	461a      	mov	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	0d1b      	lsrs	r3, r3, #20
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	f003 030c 	and.w	r3, r3, #12
 8006d14:	4413      	add	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	0419      	lsls	r1, r3, #16
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	430b      	orrs	r3, r1
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 031f 	and.w	r3, r3, #31
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006d82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6093      	str	r3, [r2, #8]
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006daa:	d101      	bne.n	8006db0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006dce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006dd2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dfa:	d101      	bne.n	8006e00 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e22:	f043 0201 	orr.w	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e4a:	f043 0202 	orr.w	r2, r3, #2
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d101      	bne.n	8006e76 <LL_ADC_IsEnabled+0x18>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <LL_ADC_IsEnabled+0x1a>
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d101      	bne.n	8006e9c <LL_ADC_IsDisableOngoing+0x18>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <LL_ADC_IsDisableOngoing+0x1a>
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ebe:	f043 0204 	orr.w	r2, r3, #4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ee2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ee6:	f043 0210 	orr.w	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d101      	bne.n	8006f12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d101      	bne.n	8006f60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2280      	movs	r2, #128	; 0x80
 8006f7a:	601a      	str	r2, [r3, #0]
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f96:	601a      	str	r2, [r3, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fb2:	601a      	str	r2, [r3, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	605a      	str	r2, [r3, #4]
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	605a      	str	r2, [r3, #4]
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	605a      	str	r2, [r3, #4]
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	605a      	str	r2, [r3, #4]
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	605a      	str	r2, [r3, #4]
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	605a      	str	r2, [r3, #4]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	b089      	sub	sp, #36	; 0x24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e167      	b.n	800736a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7fe fa15 	bl	80054d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fe68 	bl	8006d96 <LL_ADC_IsDeepPowerDownEnabled>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d004      	beq.n	80070d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff fe4e 	bl	8006d72 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fe83 	bl	8006de6 <LL_ADC_IsInternalRegulatorEnabled>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d115      	bne.n	8007112 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fe67 	bl	8006dbe <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070f0:	4ba0      	ldr	r3, [pc, #640]	; (8007374 <HAL_ADC_Init+0x2f4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	099b      	lsrs	r3, r3, #6
 80070f6:	4aa0      	ldr	r2, [pc, #640]	; (8007378 <HAL_ADC_Init+0x2f8>)
 80070f8:	fba2 2303 	umull	r2, r3, r2, r3
 80070fc:	099b      	lsrs	r3, r3, #6
 80070fe:	3301      	adds	r3, #1
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007104:	e002      	b.n	800710c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3b01      	subs	r3, #1
 800710a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f9      	bne.n	8007106 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff fe65 	bl	8006de6 <LL_ADC_IsInternalRegulatorEnabled>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10d      	bne.n	800713e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007126:	f043 0210 	orr.w	r2, r3, #16
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007132:	f043 0201 	orr.w	r2, r3, #1
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff fed9 	bl	8006efa <LL_ADC_REG_IsConversionOngoing>
 8007148:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b00      	cmp	r3, #0
 8007154:	f040 8100 	bne.w	8007358 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f040 80fc 	bne.w	8007358 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007164:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007168:	f043 0202 	orr.w	r2, r3, #2
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff fe72 	bl	8006e5e <LL_ADC_IsEnabled>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d111      	bne.n	80071a4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007180:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007184:	f7ff fe6b 	bl	8006e5e <LL_ADC_IsEnabled>
 8007188:	4604      	mov	r4, r0
 800718a:	487c      	ldr	r0, [pc, #496]	; (800737c <HAL_ADC_Init+0x2fc>)
 800718c:	f7ff fe67 	bl	8006e5e <LL_ADC_IsEnabled>
 8007190:	4603      	mov	r3, r0
 8007192:	4323      	orrs	r3, r4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	4619      	mov	r1, r3
 800719e:	4878      	ldr	r0, [pc, #480]	; (8007380 <HAL_ADC_Init+0x300>)
 80071a0:	f7ff fc08 	bl	80069b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7f5b      	ldrb	r3, [r3, #29]
 80071a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80071ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80071b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80071ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80071c4:	4313      	orrs	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d106      	bne.n	80071e0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	3b01      	subs	r3, #1
 80071d8:	045b      	lsls	r3, r3, #17
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	4313      	orrs	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d009      	beq.n	80071fc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	4b60      	ldr	r3, [pc, #384]	; (8007384 <HAL_ADC_Init+0x304>)
 8007204:	4013      	ands	r3, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	69b9      	ldr	r1, [r7, #24]
 800720c:	430b      	orrs	r3, r1
 800720e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fe8c 	bl	8006f48 <LL_ADC_INJ_IsConversionOngoing>
 8007230:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d16d      	bne.n	8007314 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d16a      	bne.n	8007314 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007242:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800724a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800724c:	4313      	orrs	r3, r2
 800724e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800725a:	f023 0302 	bic.w	r3, r3, #2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	69b9      	ldr	r1, [r7, #24]
 8007264:	430b      	orrs	r3, r1
 8007266:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d017      	beq.n	80072a0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800727e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007288:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800728c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6911      	ldr	r1, [r2, #16]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6812      	ldr	r2, [r2, #0]
 8007298:	430b      	orrs	r3, r1
 800729a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800729e:	e013      	b.n	80072c8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80072c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80072c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d118      	bne.n	8007304 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80072dc:	f023 0304 	bic.w	r3, r3, #4
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80072e8:	4311      	orrs	r1, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80072ee:	4311      	orrs	r1, r2
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80072f4:	430a      	orrs	r2, r1
 80072f6:	431a      	orrs	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f042 0201 	orr.w	r2, r2, #1
 8007300:	611a      	str	r2, [r3, #16]
 8007302:	e007      	b.n	8007314 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691a      	ldr	r2, [r3, #16]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0201 	bic.w	r2, r2, #1
 8007312:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10c      	bne.n	8007336 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	f023 010f 	bic.w	r1, r3, #15
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	1e5a      	subs	r2, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	631a      	str	r2, [r3, #48]	; 0x30
 8007334:	e007      	b.n	8007346 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 020f 	bic.w	r2, r2, #15
 8007344:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734a:	f023 0303 	bic.w	r3, r3, #3
 800734e:	f043 0201 	orr.w	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	65da      	str	r2, [r3, #92]	; 0x5c
 8007356:	e007      	b.n	8007368 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800735c:	f043 0210 	orr.w	r2, r3, #16
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007368:	7ffb      	ldrb	r3, [r7, #31]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3724      	adds	r7, #36	; 0x24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd90      	pop	{r4, r7, pc}
 8007372:	bf00      	nop
 8007374:	200001e0 	.word	0x200001e0
 8007378:	053e2d63 	.word	0x053e2d63
 800737c:	50000100 	.word	0x50000100
 8007380:	50000300 	.word	0x50000300
 8007384:	fff04007 	.word	0xfff04007

08007388 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007390:	4893      	ldr	r0, [pc, #588]	; (80075e0 <HAL_ADC_Start_IT+0x258>)
 8007392:	f7ff fcd2 	bl	8006d3a <LL_ADC_GetMultimode>
 8007396:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff fdac 	bl	8006efa <LL_ADC_REG_IsConversionOngoing>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8113 	bne.w	80075d0 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d101      	bne.n	80073b8 <HAL_ADC_Start_IT+0x30>
 80073b4:	2302      	movs	r3, #2
 80073b6:	e10e      	b.n	80075d6 <HAL_ADC_Start_IT+0x24e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 fb19 	bl	80089f8 <ADC_Enable>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 80fa 	bne.w	80075c6 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073da:	f023 0301 	bic.w	r3, r3, #1
 80073de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a7e      	ldr	r2, [pc, #504]	; (80075e4 <HAL_ADC_Start_IT+0x25c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d002      	beq.n	80073f6 <HAL_ADC_Start_IT+0x6e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	e001      	b.n	80073fa <HAL_ADC_Start_IT+0x72>
 80073f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6812      	ldr	r2, [r2, #0]
 80073fe:	4293      	cmp	r3, r2
 8007400:	d002      	beq.n	8007408 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d006      	beq.n	800742e <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007424:	f023 0206 	bic.w	r2, r3, #6
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	661a      	str	r2, [r3, #96]	; 0x60
 800742c:	e002      	b.n	8007434 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	221c      	movs	r2, #28
 800743a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 021c 	bic.w	r2, r2, #28
 8007452:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b08      	cmp	r3, #8
 800745a:	d108      	bne.n	800746e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0208 	orr.w	r2, r2, #8
 800746a:	605a      	str	r2, [r3, #4]
          break;
 800746c:	e008      	b.n	8007480 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0204 	orr.w	r2, r2, #4
 800747c:	605a      	str	r2, [r3, #4]
          break;
 800747e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	2b00      	cmp	r3, #0
 8007486:	d107      	bne.n	8007498 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0210 	orr.w	r2, r2, #16
 8007496:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a51      	ldr	r2, [pc, #324]	; (80075e4 <HAL_ADC_Start_IT+0x25c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d002      	beq.n	80074a8 <HAL_ADC_Start_IT+0x120>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	e001      	b.n	80074ac <HAL_ADC_Start_IT+0x124>
 80074a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d008      	beq.n	80074c6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b05      	cmp	r3, #5
 80074be:	d002      	beq.n	80074c6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	2b09      	cmp	r3, #9
 80074c4:	d13a      	bne.n	800753c <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d02d      	beq.n	8007530 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80074dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d110      	bne.n	800750e <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0220 	bic.w	r2, r2, #32
 80074fa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800750a:	605a      	str	r2, [r3, #4]
              break;
 800750c:	e010      	b.n	8007530 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800751c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0220 	orr.w	r2, r2, #32
 800752c:	605a      	str	r2, [r3, #4]
              break;
 800752e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff fcb8 	bl	8006eaa <LL_ADC_REG_StartConversion>
 800753a:	e04b      	b.n	80075d4 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007540:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a25      	ldr	r2, [pc, #148]	; (80075e4 <HAL_ADC_Start_IT+0x25c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d002      	beq.n	8007558 <HAL_ADC_Start_IT+0x1d0>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	e001      	b.n	800755c <HAL_ADC_Start_IT+0x1d4>
 8007558:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800755c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d034      	beq.n	80075d4 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	2b08      	cmp	r3, #8
 8007580:	d110      	bne.n	80075a4 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0220 	bic.w	r2, r2, #32
 8007590:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a0:	605a      	str	r2, [r3, #4]
              break;
 80075a2:	e017      	b.n	80075d4 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0220 	orr.w	r2, r2, #32
 80075c2:	605a      	str	r2, [r3, #4]
              break;
 80075c4:	e006      	b.n	80075d4 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80075ce:	e001      	b.n	80075d4 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80075d0:	2302      	movs	r3, #2
 80075d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	50000300 	.word	0x50000300
 80075e4:	50000100 	.word	0x50000100

080075e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075f4:	4851      	ldr	r0, [pc, #324]	; (800773c <HAL_ADC_Start_DMA+0x154>)
 80075f6:	f7ff fba0 	bl	8006d3a <LL_ADC_GetMultimode>
 80075fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fc7a 	bl	8006efa <LL_ADC_REG_IsConversionOngoing>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	f040 808f 	bne.w	800772c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_ADC_Start_DMA+0x34>
 8007618:	2302      	movs	r3, #2
 800761a:	e08a      	b.n	8007732 <HAL_ADC_Start_DMA+0x14a>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d005      	beq.n	8007636 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b05      	cmp	r3, #5
 800762e:	d002      	beq.n	8007636 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b09      	cmp	r3, #9
 8007634:	d173      	bne.n	800771e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f001 f9de 	bl	80089f8 <ADC_Enable>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007640:	7dfb      	ldrb	r3, [r7, #23]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d166      	bne.n	8007714 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800764e:	f023 0301 	bic.w	r3, r3, #1
 8007652:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a38      	ldr	r2, [pc, #224]	; (8007740 <HAL_ADC_Start_DMA+0x158>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d002      	beq.n	800766a <HAL_ADC_Start_DMA+0x82>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	e001      	b.n	800766e <HAL_ADC_Start_DMA+0x86>
 800766a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	6812      	ldr	r2, [r2, #0]
 8007672:	4293      	cmp	r3, r2
 8007674:	d002      	beq.n	800767c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d105      	bne.n	8007688 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007680:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800768c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d006      	beq.n	80076a2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007698:	f023 0206 	bic.w	r2, r3, #6
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	661a      	str	r2, [r3, #96]	; 0x60
 80076a0:	e002      	b.n	80076a8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ac:	4a25      	ldr	r2, [pc, #148]	; (8007744 <HAL_ADC_Start_DMA+0x15c>)
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b4:	4a24      	ldr	r2, [pc, #144]	; (8007748 <HAL_ADC_Start_DMA+0x160>)
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076bc:	4a23      	ldr	r2, [pc, #140]	; (800774c <HAL_ADC_Start_DMA+0x164>)
 80076be:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	221c      	movs	r2, #28
 80076c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0210 	orr.w	r2, r2, #16
 80076de:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3340      	adds	r3, #64	; 0x40
 80076fa:	4619      	mov	r1, r3
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f002 f83c 	bl	800977c <HAL_DMA_Start_IT>
 8007704:	4603      	mov	r3, r0
 8007706:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f7ff fbcc 	bl	8006eaa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007712:	e00d      	b.n	8007730 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800771c:	e008      	b.n	8007730 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800772a:	e001      	b.n	8007730 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800772c:	2302      	movs	r3, #2
 800772e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	50000300 	.word	0x50000300
 8007740:	50000100 	.word	0x50000100
 8007744:	08008bc3 	.word	0x08008bc3
 8007748:	08008c9b 	.word	0x08008c9b
 800774c:	08008cb7 	.word	0x08008cb7

08007750 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_ADC_Stop_DMA+0x16>
 8007762:	2302      	movs	r3, #2
 8007764:	e051      	b.n	800780a <HAL_ADC_Stop_DMA+0xba>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800776e:	2103      	movs	r1, #3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f885 	bl	8008880 <ADC_ConversionStop>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d13f      	bne.n	8007800 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d10f      	bne.n	80077be <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a2:	4618      	mov	r0, r3
 80077a4:	f002 f865 	bl	8009872 <HAL_DMA_Abort>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0210 	bic.w	r2, r2, #16
 80077cc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d105      	bne.n	80077e0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 f995 	bl	8008b04 <ADC_Disable>
 80077da:	4603      	mov	r3, r0
 80077dc:	73fb      	strb	r3, [r7, #15]
 80077de:	e002      	b.n	80077e6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 f98f 	bl	8008b04 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d109      	bne.n	8007800 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80077f4:	f023 0301 	bic.w	r3, r3, #1
 80077f8:	f043 0201 	orr.w	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007808:	7bfb      	ldrb	r3, [r7, #15]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	; 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007834:	2300      	movs	r3, #0
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007848:	4883      	ldr	r0, [pc, #524]	; (8007a58 <HAL_ADC_IRQHandler+0x22c>)
 800784a:	f7ff fa76 	bl	8006d3a <LL_ADC_GetMultimode>
 800784e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d017      	beq.n	800788a <HAL_ADC_IRQHandler+0x5e>
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d012      	beq.n	800788a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007874:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 fb11 	bl	8008ea4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2202      	movs	r2, #2
 8007888:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <HAL_ADC_IRQHandler+0x72>
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8085 	beq.w	80079b4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d07f      	beq.n	80079b4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7ff f941 	bl	8006b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d064      	beq.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a5e      	ldr	r2, [pc, #376]	; (8007a5c <HAL_ADC_IRQHandler+0x230>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d002      	beq.n	80078ec <HAL_ADC_IRQHandler+0xc0>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	e001      	b.n	80078f0 <HAL_ADC_IRQHandler+0xc4>
 80078ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6812      	ldr	r2, [r2, #0]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d008      	beq.n	800790a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b05      	cmp	r3, #5
 8007902:	d002      	beq.n	800790a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b09      	cmp	r3, #9
 8007908:	d104      	bne.n	8007914 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	623b      	str	r3, [r7, #32]
 8007912:	e00d      	b.n	8007930 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a50      	ldr	r2, [pc, #320]	; (8007a5c <HAL_ADC_IRQHandler+0x230>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d002      	beq.n	8007924 <HAL_ADC_IRQHandler+0xf8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	e001      	b.n	8007928 <HAL_ADC_IRQHandler+0xfc>
 8007924:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007928:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d135      	bne.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b08      	cmp	r3, #8
 8007946:	d12e      	bne.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f7ff fad4 	bl	8006efa <LL_ADC_REG_IsConversionOngoing>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d11a      	bne.n	800798e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 020c 	bic.w	r2, r2, #12
 8007966:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d112      	bne.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007984:	f043 0201 	orr.w	r2, r3, #1
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	65da      	str	r2, [r3, #92]	; 0x5c
 800798c:	e00b      	b.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007992:	f043 0210 	orr.w	r2, r3, #16
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799e:	f043 0201 	orr.w	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fc f8b4 	bl	8003b14 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	220c      	movs	r2, #12
 80079b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <HAL_ADC_IRQHandler+0x19c>
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10b      	bne.n	80079e0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 809e 	beq.w	8007b10 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 8098 	beq.w	8007b10 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d105      	bne.n	80079f8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff f8ea 	bl	8006bd6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007a02:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff f8a5 	bl	8006b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007a0e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a11      	ldr	r2, [pc, #68]	; (8007a5c <HAL_ADC_IRQHandler+0x230>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d002      	beq.n	8007a20 <HAL_ADC_IRQHandler+0x1f4>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	e001      	b.n	8007a24 <HAL_ADC_IRQHandler+0x1f8>
 8007a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6812      	ldr	r2, [r2, #0]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d008      	beq.n	8007a3e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b06      	cmp	r3, #6
 8007a36:	d002      	beq.n	8007a3e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b07      	cmp	r3, #7
 8007a3c:	d104      	bne.n	8007a48 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	623b      	str	r3, [r7, #32]
 8007a46:	e011      	b.n	8007a6c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a03      	ldr	r2, [pc, #12]	; (8007a5c <HAL_ADC_IRQHandler+0x230>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d006      	beq.n	8007a60 <HAL_ADC_IRQHandler+0x234>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	e005      	b.n	8007a64 <HAL_ADC_IRQHandler+0x238>
 8007a58:	50000300 	.word	0x50000300
 8007a5c:	50000100 	.word	0x50000100
 8007a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007a64:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d047      	beq.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d007      	beq.n	8007a8c <HAL_ADC_IRQHandler+0x260>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d03f      	beq.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d13a      	bne.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d133      	bne.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d12e      	bne.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fa4d 	bl	8006f48 <LL_ADC_INJ_IsConversionOngoing>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d11a      	bne.n	8007aea <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ac2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d112      	bne.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae0:	f043 0201 	orr.w	r2, r3, #1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ae8:	e00b      	b.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aee:	f043 0210 	orr.w	r2, r3, #16
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afa:	f043 0201 	orr.w	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 f9a6 	bl	8008e54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2260      	movs	r2, #96	; 0x60
 8007b0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d011      	beq.n	8007b3e <HAL_ADC_IRQHandler+0x312>
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00c      	beq.n	8007b3e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fc f839 	bl	8003ba8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2280      	movs	r2, #128	; 0x80
 8007b3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d012      	beq.n	8007b6e <HAL_ADC_IRQHandler+0x342>
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00d      	beq.n	8007b6e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 f98c 	bl	8008e7c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d012      	beq.n	8007b9e <HAL_ADC_IRQHandler+0x372>
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00d      	beq.n	8007b9e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 f97e 	bl	8008e90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d036      	beq.n	8007c16 <HAL_ADC_IRQHandler+0x3ea>
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d031      	beq.n	8007c16 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbe:	e014      	b.n	8007bea <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d008      	beq.n	8007bd8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007bc6:	4825      	ldr	r0, [pc, #148]	; (8007c5c <HAL_ADC_IRQHandler+0x430>)
 8007bc8:	f7ff f8c5 	bl	8006d56 <LL_ADC_GetMultiDMATransfer>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd6:	e008      	b.n	8007bea <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007be6:	2301      	movs	r3, #1
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d10e      	bne.n	8007c0e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c00:	f043 0202 	orr.w	r2, r3, #2
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f833 	bl	8007c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2210      	movs	r2, #16
 8007c14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d018      	beq.n	8007c52 <HAL_ADC_IRQHandler+0x426>
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d013      	beq.n	8007c52 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c3a:	f043 0208 	orr.w	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c4a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f90b 	bl	8008e68 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007c52:	bf00      	nop
 8007c54:	3728      	adds	r7, #40	; 0x28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	50000300 	.word	0x50000300

08007c60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b0b6      	sub	sp, #216	; 0xd8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <HAL_ADC_ConfigChannel+0x22>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e3c8      	b.n	800843c <HAL_ADC_ConfigChannel+0x7b4>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff f91f 	bl	8006efa <LL_ADC_REG_IsConversionOngoing>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f040 83ad 	bne.w	800841e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	6859      	ldr	r1, [r3, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	f7fe ff54 	bl	8006b7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff f90d 	bl	8006efa <LL_ADC_REG_IsConversionOngoing>
 8007ce0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff f92d 	bl	8006f48 <LL_ADC_INJ_IsConversionOngoing>
 8007cee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007cf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f040 81d9 	bne.w	80080ae <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f040 81d4 	bne.w	80080ae <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d0e:	d10f      	bne.n	8007d30 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6818      	ldr	r0, [r3, #0]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f7fe ff6e 	bl	8006bfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fe ff02 	bl	8006b32 <LL_ADC_SetSamplingTimeCommonConfig>
 8007d2e:	e00e      	b.n	8007d4e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6819      	ldr	r1, [r3, #0]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f7fe ff5d 	bl	8006bfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fe fef2 	bl	8006b32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	08db      	lsrs	r3, r3, #3
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d022      	beq.n	8007db6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	6919      	ldr	r1, [r3, #16]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d80:	f7fe fe4c 	bl	8006a1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	6919      	ldr	r1, [r3, #16]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	461a      	mov	r2, r3
 8007d92:	f7fe fe98 	bl	8006ac6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d102      	bne.n	8007dac <HAL_ADC_ConfigChannel+0x124>
 8007da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007daa:	e000      	b.n	8007dae <HAL_ADC_ConfigChannel+0x126>
 8007dac:	2300      	movs	r3, #0
 8007dae:	461a      	mov	r2, r3
 8007db0:	f7fe fea4 	bl	8006afc <LL_ADC_SetOffsetSaturation>
 8007db4:	e17b      	b.n	80080ae <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2100      	movs	r1, #0
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fe51 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <HAL_ADC_ConfigChannel+0x15a>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fe46 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	0e9b      	lsrs	r3, r3, #26
 8007ddc:	f003 021f 	and.w	r2, r3, #31
 8007de0:	e01e      	b.n	8007e20 <HAL_ADC_ConfigChannel+0x198>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2100      	movs	r1, #0
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fe3b 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007df4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007df8:	fa93 f3a3 	rbit	r3, r3
 8007dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007e00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007e10:	2320      	movs	r3, #32
 8007e12:	e004      	b.n	8007e1e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8007e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e18:	fab3 f383 	clz	r3, r3
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d105      	bne.n	8007e38 <HAL_ADC_ConfigChannel+0x1b0>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	0e9b      	lsrs	r3, r3, #26
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	e018      	b.n	8007e6a <HAL_ADC_ConfigChannel+0x1e2>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e44:	fa93 f3a3 	rbit	r3, r3
 8007e48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007e5c:	2320      	movs	r3, #32
 8007e5e:	e004      	b.n	8007e6a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e64:	fab3 f383 	clz	r3, r3
 8007e68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d106      	bne.n	8007e7c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2200      	movs	r2, #0
 8007e74:	2100      	movs	r1, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fe0a 	bl	8006a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2101      	movs	r1, #1
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fdee 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <HAL_ADC_ConfigChannel+0x220>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2101      	movs	r1, #1
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fe fde3 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	0e9b      	lsrs	r3, r3, #26
 8007ea2:	f003 021f 	and.w	r2, r3, #31
 8007ea6:	e01e      	b.n	8007ee6 <HAL_ADC_ConfigChannel+0x25e>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2101      	movs	r1, #1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fdd8 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ebe:	fa93 f3a3 	rbit	r3, r3
 8007ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007ece:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007ed6:	2320      	movs	r3, #32
 8007ed8:	e004      	b.n	8007ee4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ede:	fab3 f383 	clz	r3, r3
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <HAL_ADC_ConfigChannel+0x276>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	0e9b      	lsrs	r3, r3, #26
 8007ef8:	f003 031f 	and.w	r3, r3, #31
 8007efc:	e018      	b.n	8007f30 <HAL_ADC_ConfigChannel+0x2a8>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f0a:	fa93 f3a3 	rbit	r3, r3
 8007f0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007f12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8007f22:	2320      	movs	r3, #32
 8007f24:	e004      	b.n	8007f30 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8007f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f2a:	fab3 f383 	clz	r3, r3
 8007f2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d106      	bne.n	8007f42 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fda7 	bl	8006a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2102      	movs	r1, #2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe fd8b 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <HAL_ADC_ConfigChannel+0x2e6>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2102      	movs	r1, #2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fd80 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8007f64:	4603      	mov	r3, r0
 8007f66:	0e9b      	lsrs	r3, r3, #26
 8007f68:	f003 021f 	and.w	r2, r3, #31
 8007f6c:	e01e      	b.n	8007fac <HAL_ADC_ConfigChannel+0x324>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2102      	movs	r1, #2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe fd75 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f84:	fa93 f3a3 	rbit	r3, r3
 8007f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007f94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007f9c:	2320      	movs	r3, #32
 8007f9e:	e004      	b.n	8007faa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fa4:	fab3 f383 	clz	r3, r3
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d105      	bne.n	8007fc4 <HAL_ADC_ConfigChannel+0x33c>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	0e9b      	lsrs	r3, r3, #26
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	e016      	b.n	8007ff2 <HAL_ADC_ConfigChannel+0x36a>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fd0:	fa93 f3a3 	rbit	r3, r3
 8007fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007fd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	e004      	b.n	8007ff2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fec:	fab3 f383 	clz	r3, r3
 8007ff0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d106      	bne.n	8008004 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2102      	movs	r1, #2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fd46 	bl	8006a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2103      	movs	r1, #3
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fd2a 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8008010:	4603      	mov	r3, r0
 8008012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <HAL_ADC_ConfigChannel+0x3a8>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2103      	movs	r1, #3
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe fd1f 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 8008026:	4603      	mov	r3, r0
 8008028:	0e9b      	lsrs	r3, r3, #26
 800802a:	f003 021f 	and.w	r2, r3, #31
 800802e:	e017      	b.n	8008060 <HAL_ADC_ConfigChannel+0x3d8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2103      	movs	r1, #3
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fd14 	bl	8006a64 <LL_ADC_GetOffsetChannel>
 800803c:	4603      	mov	r3, r0
 800803e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008042:	fa93 f3a3 	rbit	r3, r3
 8008046:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800804a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800804c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8008052:	2320      	movs	r3, #32
 8008054:	e003      	b.n	800805e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8008056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008058:	fab3 f383 	clz	r3, r3
 800805c:	b2db      	uxtb	r3, r3
 800805e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008068:	2b00      	cmp	r3, #0
 800806a:	d105      	bne.n	8008078 <HAL_ADC_ConfigChannel+0x3f0>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	0e9b      	lsrs	r3, r3, #26
 8008072:	f003 031f 	and.w	r3, r3, #31
 8008076:	e011      	b.n	800809c <HAL_ADC_ConfigChannel+0x414>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800807e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008080:	fa93 f3a3 	rbit	r3, r3
 8008084:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008088:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800808a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8008090:	2320      	movs	r3, #32
 8008092:	e003      	b.n	800809c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8008094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008096:	fab3 f383 	clz	r3, r3
 800809a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800809c:	429a      	cmp	r2, r3
 800809e:	d106      	bne.n	80080ae <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2200      	movs	r2, #0
 80080a6:	2103      	movs	r1, #3
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fcf1 	bl	8006a90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe fed3 	bl	8006e5e <LL_ADC_IsEnabled>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f040 8140 	bne.w	8008340 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6818      	ldr	r0, [r3, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	6819      	ldr	r1, [r3, #0]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	461a      	mov	r2, r3
 80080ce:	f7fe fdc1 	bl	8006c54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	4a8f      	ldr	r2, [pc, #572]	; (8008314 <HAL_ADC_ConfigChannel+0x68c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	f040 8131 	bne.w	8008340 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10b      	bne.n	8008106 <HAL_ADC_ConfigChannel+0x47e>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	0e9b      	lsrs	r3, r3, #26
 80080f4:	3301      	adds	r3, #1
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2b09      	cmp	r3, #9
 80080fc:	bf94      	ite	ls
 80080fe:	2301      	movls	r3, #1
 8008100:	2300      	movhi	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	e019      	b.n	800813a <HAL_ADC_ConfigChannel+0x4b2>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800810c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800810e:	fa93 f3a3 	rbit	r3, r3
 8008112:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008116:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800811e:	2320      	movs	r3, #32
 8008120:	e003      	b.n	800812a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8008122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008124:	fab3 f383 	clz	r3, r3
 8008128:	b2db      	uxtb	r3, r3
 800812a:	3301      	adds	r3, #1
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2b09      	cmp	r3, #9
 8008132:	bf94      	ite	ls
 8008134:	2301      	movls	r3, #1
 8008136:	2300      	movhi	r3, #0
 8008138:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800813a:	2b00      	cmp	r3, #0
 800813c:	d079      	beq.n	8008232 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008146:	2b00      	cmp	r3, #0
 8008148:	d107      	bne.n	800815a <HAL_ADC_ConfigChannel+0x4d2>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	0e9b      	lsrs	r3, r3, #26
 8008150:	3301      	adds	r3, #1
 8008152:	069b      	lsls	r3, r3, #26
 8008154:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008158:	e015      	b.n	8008186 <HAL_ADC_ConfigChannel+0x4fe>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008162:	fa93 f3a3 	rbit	r3, r3
 8008166:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800816c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8008172:	2320      	movs	r3, #32
 8008174:	e003      	b.n	800817e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8008176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008178:	fab3 f383 	clz	r3, r3
 800817c:	b2db      	uxtb	r3, r3
 800817e:	3301      	adds	r3, #1
 8008180:	069b      	lsls	r3, r3, #26
 8008182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800818e:	2b00      	cmp	r3, #0
 8008190:	d109      	bne.n	80081a6 <HAL_ADC_ConfigChannel+0x51e>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	0e9b      	lsrs	r3, r3, #26
 8008198:	3301      	adds	r3, #1
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	2101      	movs	r1, #1
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	e017      	b.n	80081d6 <HAL_ADC_ConfigChannel+0x54e>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ae:	fa93 f3a3 	rbit	r3, r3
 80081b2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80081b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80081b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80081be:	2320      	movs	r3, #32
 80081c0:	e003      	b.n	80081ca <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80081c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c4:	fab3 f383 	clz	r3, r3
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	3301      	adds	r3, #1
 80081cc:	f003 031f 	and.w	r3, r3, #31
 80081d0:	2101      	movs	r1, #1
 80081d2:	fa01 f303 	lsl.w	r3, r1, r3
 80081d6:	ea42 0103 	orr.w	r1, r2, r3
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <HAL_ADC_ConfigChannel+0x574>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	0e9b      	lsrs	r3, r3, #26
 80081ec:	3301      	adds	r3, #1
 80081ee:	f003 021f 	and.w	r2, r3, #31
 80081f2:	4613      	mov	r3, r2
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	4413      	add	r3, r2
 80081f8:	051b      	lsls	r3, r3, #20
 80081fa:	e018      	b.n	800822e <HAL_ADC_ConfigChannel+0x5a6>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	fa93 f3a3 	rbit	r3, r3
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800820e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8008214:	2320      	movs	r3, #32
 8008216:	e003      	b.n	8008220 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8008218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821a:	fab3 f383 	clz	r3, r3
 800821e:	b2db      	uxtb	r3, r3
 8008220:	3301      	adds	r3, #1
 8008222:	f003 021f 	and.w	r2, r3, #31
 8008226:	4613      	mov	r3, r2
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	4413      	add	r3, r2
 800822c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800822e:	430b      	orrs	r3, r1
 8008230:	e081      	b.n	8008336 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800823a:	2b00      	cmp	r3, #0
 800823c:	d107      	bne.n	800824e <HAL_ADC_ConfigChannel+0x5c6>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	0e9b      	lsrs	r3, r3, #26
 8008244:	3301      	adds	r3, #1
 8008246:	069b      	lsls	r3, r3, #26
 8008248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800824c:	e015      	b.n	800827a <HAL_ADC_ConfigChannel+0x5f2>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	fa93 f3a3 	rbit	r3, r3
 800825a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8008266:	2320      	movs	r3, #32
 8008268:	e003      	b.n	8008272 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	fab3 f383 	clz	r3, r3
 8008270:	b2db      	uxtb	r3, r3
 8008272:	3301      	adds	r3, #1
 8008274:	069b      	lsls	r3, r3, #26
 8008276:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008282:	2b00      	cmp	r3, #0
 8008284:	d109      	bne.n	800829a <HAL_ADC_ConfigChannel+0x612>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	0e9b      	lsrs	r3, r3, #26
 800828c:	3301      	adds	r3, #1
 800828e:	f003 031f 	and.w	r3, r3, #31
 8008292:	2101      	movs	r1, #1
 8008294:	fa01 f303 	lsl.w	r3, r1, r3
 8008298:	e017      	b.n	80082ca <HAL_ADC_ConfigChannel+0x642>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	fa93 f3a3 	rbit	r3, r3
 80082a6:	61fb      	str	r3, [r7, #28]
  return result;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80082b2:	2320      	movs	r3, #32
 80082b4:	e003      	b.n	80082be <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	fab3 f383 	clz	r3, r3
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	3301      	adds	r3, #1
 80082c0:	f003 031f 	and.w	r3, r3, #31
 80082c4:	2101      	movs	r1, #1
 80082c6:	fa01 f303 	lsl.w	r3, r1, r3
 80082ca:	ea42 0103 	orr.w	r1, r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10d      	bne.n	80082f6 <HAL_ADC_ConfigChannel+0x66e>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	0e9b      	lsrs	r3, r3, #26
 80082e0:	3301      	adds	r3, #1
 80082e2:	f003 021f 	and.w	r2, r3, #31
 80082e6:	4613      	mov	r3, r2
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	4413      	add	r3, r2
 80082ec:	3b1e      	subs	r3, #30
 80082ee:	051b      	lsls	r3, r3, #20
 80082f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082f4:	e01e      	b.n	8008334 <HAL_ADC_ConfigChannel+0x6ac>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	fa93 f3a3 	rbit	r3, r3
 8008302:	613b      	str	r3, [r7, #16]
  return result;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d104      	bne.n	8008318 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800830e:	2320      	movs	r3, #32
 8008310:	e006      	b.n	8008320 <HAL_ADC_ConfigChannel+0x698>
 8008312:	bf00      	nop
 8008314:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	fab3 f383 	clz	r3, r3
 800831e:	b2db      	uxtb	r3, r3
 8008320:	3301      	adds	r3, #1
 8008322:	f003 021f 	and.w	r2, r3, #31
 8008326:	4613      	mov	r3, r2
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	4413      	add	r3, r2
 800832c:	3b1e      	subs	r3, #30
 800832e:	051b      	lsls	r3, r3, #20
 8008330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008334:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800833a:	4619      	mov	r1, r3
 800833c:	f7fe fc5e 	bl	8006bfc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	4b3f      	ldr	r3, [pc, #252]	; (8008444 <HAL_ADC_ConfigChannel+0x7bc>)
 8008346:	4013      	ands	r3, r2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d071      	beq.n	8008430 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800834c:	483e      	ldr	r0, [pc, #248]	; (8008448 <HAL_ADC_ConfigChannel+0x7c0>)
 800834e:	f7fe fb57 	bl	8006a00 <LL_ADC_GetCommonPathInternalCh>
 8008352:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a3c      	ldr	r2, [pc, #240]	; (800844c <HAL_ADC_ConfigChannel+0x7c4>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d004      	beq.n	800836a <HAL_ADC_ConfigChannel+0x6e2>
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a3a      	ldr	r2, [pc, #232]	; (8008450 <HAL_ADC_ConfigChannel+0x7c8>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d127      	bne.n	80083ba <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800836a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800836e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d121      	bne.n	80083ba <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800837e:	d157      	bne.n	8008430 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008384:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008388:	4619      	mov	r1, r3
 800838a:	482f      	ldr	r0, [pc, #188]	; (8008448 <HAL_ADC_ConfigChannel+0x7c0>)
 800838c:	f7fe fb25 	bl	80069da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008390:	4b30      	ldr	r3, [pc, #192]	; (8008454 <HAL_ADC_ConfigChannel+0x7cc>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	099b      	lsrs	r3, r3, #6
 8008396:	4a30      	ldr	r2, [pc, #192]	; (8008458 <HAL_ADC_ConfigChannel+0x7d0>)
 8008398:	fba2 2303 	umull	r2, r3, r2, r3
 800839c:	099b      	lsrs	r3, r3, #6
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	4613      	mov	r3, r2
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80083aa:	e002      	b.n	80083b2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1f9      	bne.n	80083ac <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80083b8:	e03a      	b.n	8008430 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a27      	ldr	r2, [pc, #156]	; (800845c <HAL_ADC_ConfigChannel+0x7d4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d113      	bne.n	80083ec <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80083c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10d      	bne.n	80083ec <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a22      	ldr	r2, [pc, #136]	; (8008460 <HAL_ADC_ConfigChannel+0x7d8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d02a      	beq.n	8008430 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80083da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083e2:	4619      	mov	r1, r3
 80083e4:	4818      	ldr	r0, [pc, #96]	; (8008448 <HAL_ADC_ConfigChannel+0x7c0>)
 80083e6:	f7fe faf8 	bl	80069da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083ea:	e021      	b.n	8008430 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1c      	ldr	r2, [pc, #112]	; (8008464 <HAL_ADC_ConfigChannel+0x7dc>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d11c      	bne.n	8008430 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80083f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d116      	bne.n	8008430 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a16      	ldr	r2, [pc, #88]	; (8008460 <HAL_ADC_ConfigChannel+0x7d8>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d011      	beq.n	8008430 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800840c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008414:	4619      	mov	r1, r3
 8008416:	480c      	ldr	r0, [pc, #48]	; (8008448 <HAL_ADC_ConfigChannel+0x7c0>)
 8008418:	f7fe fadf 	bl	80069da <LL_ADC_SetCommonPathInternalCh>
 800841c:	e008      	b.n	8008430 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008422:	f043 0220 	orr.w	r2, r3, #32
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008438:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800843c:	4618      	mov	r0, r3
 800843e:	37d8      	adds	r7, #216	; 0xd8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	80080000 	.word	0x80080000
 8008448:	50000300 	.word	0x50000300
 800844c:	c3210000 	.word	0xc3210000
 8008450:	90c00010 	.word	0x90c00010
 8008454:	200001e0 	.word	0x200001e0
 8008458:	053e2d63 	.word	0x053e2d63
 800845c:	c7520000 	.word	0xc7520000
 8008460:	50000100 	.word	0x50000100
 8008464:	cb840000 	.word	0xcb840000

08008468 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08e      	sub	sp, #56	; 0x38
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008480:	d003      	beq.n	800848a <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008486:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008490:	2b01      	cmp	r3, #1
 8008492:	d101      	bne.n	8008498 <HAL_ADC_AnalogWDGConfig+0x30>
 8008494:	2302      	movs	r3, #2
 8008496:	e1ea      	b.n	800886e <HAL_ADC_AnalogWDGConfig+0x406>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fe fd28 	bl	8006efa <LL_ADC_REG_IsConversionOngoing>
 80084aa:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe fd49 	bl	8006f48 <LL_ADC_INJ_IsConversionOngoing>
 80084b6:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f040 8175 	bne.w	80087aa <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f040 8171 	bne.w	80087aa <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a90      	ldr	r2, [pc, #576]	; (8008710 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	f040 808d 	bne.w	80085ee <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80084dc:	d034      	beq.n	8008548 <HAL_ADC_AnalogWDGConfig+0xe0>
 80084de:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80084e2:	d856      	bhi.n	8008592 <HAL_ADC_AnalogWDGConfig+0x12a>
 80084e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084e8:	d04b      	beq.n	8008582 <HAL_ADC_AnalogWDGConfig+0x11a>
 80084ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084ee:	d850      	bhi.n	8008592 <HAL_ADC_AnalogWDGConfig+0x12a>
 80084f0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80084f4:	d01b      	beq.n	800852e <HAL_ADC_AnalogWDGConfig+0xc6>
 80084f6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80084fa:	d84a      	bhi.n	8008592 <HAL_ADC_AnalogWDGConfig+0x12a>
 80084fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008500:	d037      	beq.n	8008572 <HAL_ADC_AnalogWDGConfig+0x10a>
 8008502:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008506:	d844      	bhi.n	8008592 <HAL_ADC_AnalogWDGConfig+0x12a>
 8008508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800850c:	d029      	beq.n	8008562 <HAL_ADC_AnalogWDGConfig+0xfa>
 800850e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008512:	d13e      	bne.n	8008592 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8008520:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008524:	461a      	mov	r2, r3
 8008526:	497a      	ldr	r1, [pc, #488]	; (8008710 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008528:	f7fe fbb8 	bl	8006c9c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 800852c:	e039      	b.n	80085a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800853a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800853e:	461a      	mov	r2, r3
 8008540:	4973      	ldr	r1, [pc, #460]	; (8008710 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008542:	f7fe fbab 	bl	8006c9c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 8008546:	e02c      	b.n	80085a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8008554:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8008558:	461a      	mov	r2, r3
 800855a:	496d      	ldr	r1, [pc, #436]	; (8008710 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800855c:	f7fe fb9e 	bl	8006c9c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8008560:	e01f      	b.n	80085a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a6b      	ldr	r2, [pc, #428]	; (8008714 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8008568:	4969      	ldr	r1, [pc, #420]	; (8008710 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fb96 	bl	8006c9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008570:	e017      	b.n	80085a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a68      	ldr	r2, [pc, #416]	; (8008718 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8008578:	4965      	ldr	r1, [pc, #404]	; (8008710 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe fb8e 	bl	8006c9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008580:	e00f      	b.n	80085a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a65      	ldr	r2, [pc, #404]	; (800871c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008588:	4961      	ldr	r1, [pc, #388]	; (8008710 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fb86 	bl	8006c9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008590:	e007      	b.n	80085a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2200      	movs	r2, #0
 8008598:	495d      	ldr	r1, [pc, #372]	; (8008710 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe fb7e 	bl	8006c9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80085a0:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fe fcd0 	bl	8006f6e <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	7b1b      	ldrb	r3, [r3, #12]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d105      	bne.n	80085e2 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fcf0 	bl	8006fc0 <LL_ADC_EnableIT_AWD1>
 80085e0:	e0e3      	b.n	80087aa <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe fd1a 	bl	8007020 <LL_ADC_DisableIT_AWD1>
 80085ec:	e0dd      	b.n	80087aa <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80085f6:	d01d      	beq.n	8008634 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80085f8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80085fc:	f200 8092 	bhi.w	8008724 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008600:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008604:	d07b      	beq.n	80086fe <HAL_ADC_AnalogWDGConfig+0x296>
 8008606:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800860a:	f200 808b 	bhi.w	8008724 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800860e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008612:	d00f      	beq.n	8008634 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8008614:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008618:	f200 8084 	bhi.w	8008724 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800861c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008620:	d06d      	beq.n	80086fe <HAL_ADC_AnalogWDGConfig+0x296>
 8008622:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008626:	d87d      	bhi.n	8008724 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008628:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800862c:	d067      	beq.n	80086fe <HAL_ADC_AnalogWDGConfig+0x296>
 800862e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008632:	d177      	bne.n	8008724 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a39      	ldr	r2, [pc, #228]	; (8008720 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d12f      	bne.n	800869e <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008646:	2b00      	cmp	r3, #0
 8008648:	d108      	bne.n	800865c <HAL_ADC_AnalogWDGConfig+0x1f4>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	0e9b      	lsrs	r3, r3, #26
 8008650:	f003 031f 	and.w	r3, r3, #31
 8008654:	2201      	movs	r2, #1
 8008656:	fa02 f303 	lsl.w	r3, r2, r3
 800865a:	e016      	b.n	800868a <HAL_ADC_AnalogWDGConfig+0x222>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	fa93 f3a3 	rbit	r3, r3
 8008668:	61bb      	str	r3, [r7, #24]
  return result;
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8008674:	2320      	movs	r3, #32
 8008676:	e003      	b.n	8008680 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	fab3 f383 	clz	r3, r3
 800867e:	b2db      	uxtb	r3, r3
 8008680:	f003 031f 	and.w	r3, r3, #31
 8008684:	2201      	movs	r2, #1
 8008686:	fa02 f303 	lsl.w	r3, r2, r3
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6812      	ldr	r2, [r2, #0]
 800868e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6812      	ldr	r2, [r2, #0]
 8008696:	430b      	orrs	r3, r1
 8008698:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800869c:	e04b      	b.n	8008736 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d108      	bne.n	80086bc <HAL_ADC_AnalogWDGConfig+0x254>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	0e9b      	lsrs	r3, r3, #26
 80086b0:	f003 031f 	and.w	r3, r3, #31
 80086b4:	2201      	movs	r2, #1
 80086b6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ba:	e016      	b.n	80086ea <HAL_ADC_AnalogWDGConfig+0x282>
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	fa93 f3a3 	rbit	r3, r3
 80086c8:	60fb      	str	r3, [r7, #12]
  return result;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 80086d4:	2320      	movs	r3, #32
 80086d6:	e003      	b.n	80086e0 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	fab3 f383 	clz	r3, r3
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	f003 031f 	and.w	r3, r3, #31
 80086e4:	2201      	movs	r2, #1
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	430b      	orrs	r3, r1
 80086f8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80086fc:	e01b      	b.n	8008736 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8008706:	4a05      	ldr	r2, [pc, #20]	; (800871c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008708:	4619      	mov	r1, r3
 800870a:	f7fe fac7 	bl	8006c9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800870e:	e012      	b.n	8008736 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8008710:	7dc00000 	.word	0x7dc00000
 8008714:	0087ffff 	.word	0x0087ffff
 8008718:	0107ffff 	.word	0x0107ffff
 800871c:	0187ffff 	.word	0x0187ffff
 8008720:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2200      	movs	r2, #0
 800872e:	4619      	mov	r1, r3
 8008730:	f7fe fab4 	bl	8006c9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008734:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a4f      	ldr	r2, [pc, #316]	; (8008878 <HAL_ADC_AnalogWDGConfig+0x410>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d11a      	bne.n	8008776 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008744:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4618      	mov	r0, r3
 8008752:	f7fe fc19 	bl	8006f88 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	7b1b      	ldrb	r3, [r3, #12]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d105      	bne.n	800876a <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fc3c 	bl	8006fe0 <LL_ADC_EnableIT_AWD2>
 8008768:	e01f      	b.n	80087aa <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fc66 	bl	8007040 <LL_ADC_DisableIT_AWD2>
 8008774:	e019      	b.n	80087aa <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800877a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe fc0c 	bl	8006fa4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	7b1b      	ldrb	r3, [r3, #12]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d105      	bne.n	80087a0 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4618      	mov	r0, r3
 800879a:	f7fe fc31 	bl	8007000 <LL_ADC_EnableIT_AWD3>
 800879e:	e004      	b.n	80087aa <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fc5b 	bl	8007060 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a33      	ldr	r2, [pc, #204]	; (800887c <HAL_ADC_AnalogWDGConfig+0x414>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d118      	bne.n	80087e6 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	691a      	ldr	r2, [r3, #16]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	08db      	lsrs	r3, r3, #3
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ca:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	695a      	ldr	r2, [r3, #20]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	08db      	lsrs	r3, r3, #3
 80087d8:	f003 0303 	and.w	r3, r3, #3
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	fa02 f303 	lsl.w	r3, r2, r3
 80087e2:	633b      	str	r3, [r7, #48]	; 0x30
 80087e4:	e035      	b.n	8008852 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f003 0318 	and.w	r3, r3, #24
 80087f0:	2b18      	cmp	r3, #24
 80087f2:	d00f      	beq.n	8008814 <HAL_ADC_AnalogWDGConfig+0x3ac>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	691a      	ldr	r2, [r3, #16]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	08db      	lsrs	r3, r3, #3
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	f1c3 0302 	rsb	r3, r3, #2
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	f003 031e 	and.w	r3, r3, #30
 800880e:	fa22 f303 	lsr.w	r3, r2, r3
 8008812:	e002      	b.n	800881a <HAL_ADC_AnalogWDGConfig+0x3b2>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f003 0318 	and.w	r3, r3, #24
 8008826:	2b18      	cmp	r3, #24
 8008828:	d00f      	beq.n	800884a <HAL_ADC_AnalogWDGConfig+0x3e2>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	695a      	ldr	r2, [r3, #20]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	08db      	lsrs	r3, r3, #3
 8008836:	f003 0303 	and.w	r3, r3, #3
 800883a:	f1c3 0302 	rsb	r3, r3, #2
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	f003 031e 	and.w	r3, r3, #30
 8008844:	fa22 f303 	lsr.w	r3, r2, r3
 8008848:	e002      	b.n	8008850 <HAL_ADC_AnalogWDGConfig+0x3e8>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6819      	ldr	r1, [r3, #0]
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800885e:	f7fe fa4a 	bl	8006cf6 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800886a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800886e:	4618      	mov	r0, r3
 8008870:	3738      	adds	r7, #56	; 0x38
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	0017ffff 	.word	0x0017ffff
 800887c:	7dc00000 	.word	0x7dc00000

08008880 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b088      	sub	sp, #32
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800888a:	2300      	movs	r3, #0
 800888c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fb2f 	bl	8006efa <LL_ADC_REG_IsConversionOngoing>
 800889c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fb50 	bl	8006f48 <LL_ADC_INJ_IsConversionOngoing>
 80088a8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 8098 	beq.w	80089e8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d02a      	beq.n	800891c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	7f5b      	ldrb	r3, [r3, #29]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d126      	bne.n	800891c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7f1b      	ldrb	r3, [r3, #28]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d122      	bne.n	800891c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80088d6:	2301      	movs	r3, #1
 80088d8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80088da:	e014      	b.n	8008906 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	4a45      	ldr	r2, [pc, #276]	; (80089f4 <ADC_ConversionStop+0x174>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d90d      	bls.n	8008900 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e8:	f043 0210 	orr.w	r2, r3, #16
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f4:	f043 0201 	orr.w	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e074      	b.n	80089ea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	3301      	adds	r3, #1
 8008904:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008910:	2b40      	cmp	r3, #64	; 0x40
 8008912:	d1e3      	bne.n	80088dc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2240      	movs	r2, #64	; 0x40
 800891a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d014      	beq.n	800894c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe fae7 	bl	8006efa <LL_ADC_REG_IsConversionOngoing>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00c      	beq.n	800894c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe faa4 	bl	8006e84 <LL_ADC_IsDisableOngoing>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d104      	bne.n	800894c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fac3 	bl	8006ed2 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d014      	beq.n	800897c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe faf6 	bl	8006f48 <LL_ADC_INJ_IsConversionOngoing>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00c      	beq.n	800897c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fa8c 	bl	8006e84 <LL_ADC_IsDisableOngoing>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d104      	bne.n	800897c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe fad2 	bl	8006f20 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	2b02      	cmp	r3, #2
 8008980:	d005      	beq.n	800898e <ADC_ConversionStop+0x10e>
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b03      	cmp	r3, #3
 8008986:	d105      	bne.n	8008994 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008988:	230c      	movs	r3, #12
 800898a:	617b      	str	r3, [r7, #20]
        break;
 800898c:	e005      	b.n	800899a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800898e:	2308      	movs	r3, #8
 8008990:	617b      	str	r3, [r7, #20]
        break;
 8008992:	e002      	b.n	800899a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008994:	2304      	movs	r3, #4
 8008996:	617b      	str	r3, [r7, #20]
        break;
 8008998:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800899a:	f7fd ffdd 	bl	8006958 <HAL_GetTick>
 800899e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80089a0:	e01b      	b.n	80089da <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80089a2:	f7fd ffd9 	bl	8006958 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	d914      	bls.n	80089da <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	4013      	ands	r3, r2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c2:	f043 0210 	orr.w	r2, r3, #16
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ce:	f043 0201 	orr.w	r2, r3, #1
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e007      	b.n	80089ea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	4013      	ands	r3, r2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1dc      	bne.n	80089a2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3720      	adds	r7, #32
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	a33fffff 	.word	0xa33fffff

080089f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe fa28 	bl	8006e5e <LL_ADC_IsEnabled>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d169      	bne.n	8008ae8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	4b36      	ldr	r3, [pc, #216]	; (8008af4 <ADC_Enable+0xfc>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00d      	beq.n	8008a3e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a26:	f043 0210 	orr.w	r2, r3, #16
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a32:	f043 0201 	orr.w	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e055      	b.n	8008aea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe f9e3 	bl	8006e0e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008a48:	482b      	ldr	r0, [pc, #172]	; (8008af8 <ADC_Enable+0x100>)
 8008a4a:	f7fd ffd9 	bl	8006a00 <LL_ADC_GetCommonPathInternalCh>
 8008a4e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d013      	beq.n	8008a80 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a58:	4b28      	ldr	r3, [pc, #160]	; (8008afc <ADC_Enable+0x104>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	099b      	lsrs	r3, r3, #6
 8008a5e:	4a28      	ldr	r2, [pc, #160]	; (8008b00 <ADC_Enable+0x108>)
 8008a60:	fba2 2303 	umull	r2, r3, r2, r3
 8008a64:	099b      	lsrs	r3, r3, #6
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	4613      	mov	r3, r2
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008a72:	e002      	b.n	8008a7a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f9      	bne.n	8008a74 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008a80:	f7fd ff6a 	bl	8006958 <HAL_GetTick>
 8008a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a86:	e028      	b.n	8008ada <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe f9e6 	bl	8006e5e <LL_ADC_IsEnabled>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d104      	bne.n	8008aa2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe f9b6 	bl	8006e0e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008aa2:	f7fd ff59 	bl	8006958 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d914      	bls.n	8008ada <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d00d      	beq.n	8008ada <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac2:	f043 0210 	orr.w	r2, r3, #16
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ace:	f043 0201 	orr.w	r2, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e007      	b.n	8008aea <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d1cf      	bne.n	8008a88 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	8000003f 	.word	0x8000003f
 8008af8:	50000300 	.word	0x50000300
 8008afc:	200001e0 	.word	0x200001e0
 8008b00:	053e2d63 	.word	0x053e2d63

08008b04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe f9b7 	bl	8006e84 <LL_ADC_IsDisableOngoing>
 8008b16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fe f99e 	bl	8006e5e <LL_ADC_IsEnabled>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d047      	beq.n	8008bb8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d144      	bne.n	8008bb8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 030d 	and.w	r3, r3, #13
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d10c      	bne.n	8008b56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe f978 	bl	8006e36 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008b4e:	f7fd ff03 	bl	8006958 <HAL_GetTick>
 8008b52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b54:	e029      	b.n	8008baa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b5a:	f043 0210 	orr.w	r2, r3, #16
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b66:	f043 0201 	orr.w	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e023      	b.n	8008bba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008b72:	f7fd fef1 	bl	8006958 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d914      	bls.n	8008baa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00d      	beq.n	8008baa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b92:	f043 0210 	orr.w	r2, r3, #16
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b9e:	f043 0201 	orr.w	r2, r3, #1
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e007      	b.n	8008bba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1dc      	bne.n	8008b72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d14b      	bne.n	8008c74 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0308 	and.w	r3, r3, #8
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d021      	beq.n	8008c3a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fd ffac 	bl	8006b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d032      	beq.n	8008c6c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d12b      	bne.n	8008c6c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d11f      	bne.n	8008c6c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c30:	f043 0201 	orr.w	r2, r3, #1
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c38:	e018      	b.n	8008c6c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f003 0302 	and.w	r3, r3, #2
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d111      	bne.n	8008c6c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d105      	bne.n	8008c6c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c64:	f043 0201 	orr.w	r2, r3, #1
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f7fa ff51 	bl	8003b14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008c72:	e00e      	b.n	8008c92 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7fe fff7 	bl	8007c74 <HAL_ADC_ErrorCallback>
}
 8008c86:	e004      	b.n	8008c92 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	4798      	blx	r3
}
 8008c92:	bf00      	nop
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f7fe ffd9 	bl	8007c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008cae:	bf00      	nop
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd4:	f043 0204 	orr.w	r2, r3, #4
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7fe ffc9 	bl	8007c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <LL_ADC_IsEnabled>:
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d101      	bne.n	8008d02 <LL_ADC_IsEnabled+0x18>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e000      	b.n	8008d04 <LL_ADC_IsEnabled+0x1a>
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <LL_ADC_StartCalibration>:
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008d22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	609a      	str	r2, [r3, #8]
}
 8008d36:	bf00      	nop
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <LL_ADC_IsCalibrationOnGoing>:
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d56:	d101      	bne.n	8008d5c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e000      	b.n	8008d5e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <LL_ADC_REG_IsConversionOngoing>:
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	d101      	bne.n	8008d82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_ADCEx_Calibration_Start+0x1c>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e04d      	b.n	8008e48 <HAL_ADCEx_Calibration_Start+0xb8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fea5 	bl	8008b04 <ADC_Disable>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d136      	bne.n	8008e32 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008dcc:	f023 0302 	bic.w	r3, r3, #2
 8008dd0:	f043 0202 	orr.w	r2, r3, #2
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7ff ff96 	bl	8008d10 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008de4:	e014      	b.n	8008e10 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	3301      	adds	r3, #1
 8008dea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4a18      	ldr	r2, [pc, #96]	; (8008e50 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d90d      	bls.n	8008e10 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df8:	f023 0312 	bic.w	r3, r3, #18
 8008dfc:	f043 0210 	orr.w	r2, r3, #16
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e01b      	b.n	8008e48 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff ff94 	bl	8008d42 <LL_ADC_IsCalibrationOnGoing>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e2      	bne.n	8008de6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e24:	f023 0303 	bic.w	r3, r3, #3
 8008e28:	f043 0201 	orr.w	r2, r3, #1
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e30:	e005      	b.n	8008e3e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e36:	f043 0210 	orr.w	r2, r3, #16
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	0004de01 	.word	0x0004de01

08008e54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008eb8:	b590      	push	{r4, r7, lr}
 8008eba:	b0a1      	sub	sp, #132	; 0x84
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d101      	bne.n	8008ed6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e08b      	b.n	8008fee <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008ede:	2300      	movs	r3, #0
 8008ee0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eee:	d102      	bne.n	8008ef6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008ef0:	4b41      	ldr	r3, [pc, #260]	; (8008ff8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008ef2:	60bb      	str	r3, [r7, #8]
 8008ef4:	e001      	b.n	8008efa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10b      	bne.n	8008f18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f04:	f043 0220 	orr.w	r2, r3, #32
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e06a      	b.n	8008fee <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff ff25 	bl	8008d6a <LL_ADC_REG_IsConversionOngoing>
 8008f20:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff ff1f 	bl	8008d6a <LL_ADC_REG_IsConversionOngoing>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d14c      	bne.n	8008fcc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d149      	bne.n	8008fcc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008f38:	4b30      	ldr	r3, [pc, #192]	; (8008ffc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8008f3a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d028      	beq.n	8008f96 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	6859      	ldr	r1, [r3, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f56:	035b      	lsls	r3, r3, #13
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f60:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008f64:	f7ff fec1 	bl	8008cea <LL_ADC_IsEnabled>
 8008f68:	4604      	mov	r4, r0
 8008f6a:	4823      	ldr	r0, [pc, #140]	; (8008ff8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008f6c:	f7ff febd 	bl	8008cea <LL_ADC_IsEnabled>
 8008f70:	4603      	mov	r3, r0
 8008f72:	4323      	orrs	r3, r4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d133      	bne.n	8008fe0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f80:	f023 030f 	bic.w	r3, r3, #15
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	6811      	ldr	r1, [r2, #0]
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	6892      	ldr	r2, [r2, #8]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f92:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f94:	e024      	b.n	8008fe0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fa0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008fa2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008fa6:	f7ff fea0 	bl	8008cea <LL_ADC_IsEnabled>
 8008faa:	4604      	mov	r4, r0
 8008fac:	4812      	ldr	r0, [pc, #72]	; (8008ff8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008fae:	f7ff fe9c 	bl	8008cea <LL_ADC_IsEnabled>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4323      	orrs	r3, r4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d112      	bne.n	8008fe0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008fc2:	f023 030f 	bic.w	r3, r3, #15
 8008fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008fc8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008fca:	e009      	b.n	8008fe0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008fde:	e000      	b.n	8008fe2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008fea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3784      	adds	r7, #132	; 0x84
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd90      	pop	{r4, r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	50000100 	.word	0x50000100
 8008ffc:	50000300 	.word	0x50000300

08009000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009010:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <__NVIC_SetPriorityGrouping+0x44>)
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800901c:	4013      	ands	r3, r2
 800901e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800902c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <__NVIC_SetPriorityGrouping+0x44>)
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	60d3      	str	r3, [r2, #12]
}
 8009038:	bf00      	nop
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	e000ed00 	.word	0xe000ed00

08009048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <__NVIC_GetPriorityGrouping+0x18>)
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	0a1b      	lsrs	r3, r3, #8
 8009052:	f003 0307 	and.w	r3, r3, #7
}
 8009056:	4618      	mov	r0, r3
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	e000ed00 	.word	0xe000ed00

08009064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800906e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009072:	2b00      	cmp	r3, #0
 8009074:	db0b      	blt.n	800908e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	f003 021f 	and.w	r2, r3, #31
 800907c:	4907      	ldr	r1, [pc, #28]	; (800909c <__NVIC_EnableIRQ+0x38>)
 800907e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	2001      	movs	r0, #1
 8009086:	fa00 f202 	lsl.w	r2, r0, r2
 800908a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	e000e100 	.word	0xe000e100

080090a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	6039      	str	r1, [r7, #0]
 80090aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	db0a      	blt.n	80090ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	490c      	ldr	r1, [pc, #48]	; (80090ec <__NVIC_SetPriority+0x4c>)
 80090ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090be:	0112      	lsls	r2, r2, #4
 80090c0:	b2d2      	uxtb	r2, r2
 80090c2:	440b      	add	r3, r1
 80090c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80090c8:	e00a      	b.n	80090e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	4908      	ldr	r1, [pc, #32]	; (80090f0 <__NVIC_SetPriority+0x50>)
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	f003 030f 	and.w	r3, r3, #15
 80090d6:	3b04      	subs	r3, #4
 80090d8:	0112      	lsls	r2, r2, #4
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	440b      	add	r3, r1
 80090de:	761a      	strb	r2, [r3, #24]
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	e000e100 	.word	0xe000e100
 80090f0:	e000ed00 	.word	0xe000ed00

080090f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b089      	sub	sp, #36	; 0x24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f1c3 0307 	rsb	r3, r3, #7
 800910e:	2b04      	cmp	r3, #4
 8009110:	bf28      	it	cs
 8009112:	2304      	movcs	r3, #4
 8009114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	3304      	adds	r3, #4
 800911a:	2b06      	cmp	r3, #6
 800911c:	d902      	bls.n	8009124 <NVIC_EncodePriority+0x30>
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	3b03      	subs	r3, #3
 8009122:	e000      	b.n	8009126 <NVIC_EncodePriority+0x32>
 8009124:	2300      	movs	r3, #0
 8009126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009128:	f04f 32ff 	mov.w	r2, #4294967295
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	fa02 f303 	lsl.w	r3, r2, r3
 8009132:	43da      	mvns	r2, r3
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	401a      	ands	r2, r3
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800913c:	f04f 31ff 	mov.w	r1, #4294967295
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	fa01 f303 	lsl.w	r3, r1, r3
 8009146:	43d9      	mvns	r1, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800914c:	4313      	orrs	r3, r2
         );
}
 800914e:	4618      	mov	r0, r3
 8009150:	3724      	adds	r7, #36	; 0x24
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3b01      	subs	r3, #1
 8009168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800916c:	d301      	bcc.n	8009172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800916e:	2301      	movs	r3, #1
 8009170:	e00f      	b.n	8009192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009172:	4a0a      	ldr	r2, [pc, #40]	; (800919c <SysTick_Config+0x40>)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3b01      	subs	r3, #1
 8009178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800917a:	210f      	movs	r1, #15
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	f7ff ff8e 	bl	80090a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009184:	4b05      	ldr	r3, [pc, #20]	; (800919c <SysTick_Config+0x40>)
 8009186:	2200      	movs	r2, #0
 8009188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800918a:	4b04      	ldr	r3, [pc, #16]	; (800919c <SysTick_Config+0x40>)
 800918c:	2207      	movs	r2, #7
 800918e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	e000e010 	.word	0xe000e010

080091a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff ff29 	bl	8009000 <__NVIC_SetPriorityGrouping>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	4603      	mov	r3, r0
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	607a      	str	r2, [r7, #4]
 80091c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80091c4:	f7ff ff40 	bl	8009048 <__NVIC_GetPriorityGrouping>
 80091c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	6978      	ldr	r0, [r7, #20]
 80091d0:	f7ff ff90 	bl	80090f4 <NVIC_EncodePriority>
 80091d4:	4602      	mov	r2, r0
 80091d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091da:	4611      	mov	r1, r2
 80091dc:	4618      	mov	r0, r3
 80091de:	f7ff ff5f 	bl	80090a0 <__NVIC_SetPriority>
}
 80091e2:	bf00      	nop
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	4603      	mov	r3, r0
 80091f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80091f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff ff33 	bl	8009064 <__NVIC_EnableIRQ>
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7ff ffa4 	bl	800915c <SysTick_Config>
 8009214:	4603      	mov	r3, r0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e054      	b.n	80092dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7f5b      	ldrb	r3, [r3, #29]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	d105      	bne.n	8009248 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fc fa46 	bl	80056d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	791b      	ldrb	r3, [r3, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10c      	bne.n	8009270 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a22      	ldr	r2, [pc, #136]	; (80092e4 <HAL_CRC_Init+0xc4>)
 800925c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0218 	bic.w	r2, r2, #24
 800926c:	609a      	str	r2, [r3, #8]
 800926e:	e00c      	b.n	800928a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6899      	ldr	r1, [r3, #8]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	461a      	mov	r2, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f948 	bl	8009510 <HAL_CRCEx_Polynomial_Set>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e028      	b.n	80092dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	795b      	ldrb	r3, [r3, #5]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d105      	bne.n	800929e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f04f 32ff 	mov.w	r2, #4294967295
 800929a:	611a      	str	r2, [r3, #16]
 800929c:	e004      	b.n	80092a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6912      	ldr	r2, [r2, #16]
 80092a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	695a      	ldr	r2, [r3, #20]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	04c11db7 	.word	0x04c11db7

080092e8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80092f4:	2300      	movs	r3, #0
 80092f6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2202      	movs	r2, #2
 80092fc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0201 	orr.w	r2, r2, #1
 800930c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	2b03      	cmp	r3, #3
 8009314:	d006      	beq.n	8009324 <HAL_CRC_Calculate+0x3c>
 8009316:	2b03      	cmp	r3, #3
 8009318:	d829      	bhi.n	800936e <HAL_CRC_Calculate+0x86>
 800931a:	2b01      	cmp	r3, #1
 800931c:	d019      	beq.n	8009352 <HAL_CRC_Calculate+0x6a>
 800931e:	2b02      	cmp	r3, #2
 8009320:	d01e      	beq.n	8009360 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8009322:	e024      	b.n	800936e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8009324:	2300      	movs	r3, #0
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	e00a      	b.n	8009340 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	441a      	add	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6812      	ldr	r2, [r2, #0]
 8009338:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	3301      	adds	r3, #1
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	429a      	cmp	r2, r3
 8009346:	d3f0      	bcc.n	800932a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	613b      	str	r3, [r7, #16]
      break;
 8009350:	e00e      	b.n	8009370 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 f812 	bl	8009380 <CRC_Handle_8>
 800935c:	6138      	str	r0, [r7, #16]
      break;
 800935e:	e007      	b.n	8009370 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	68b9      	ldr	r1, [r7, #8]
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 f899 	bl	800949c <CRC_Handle_16>
 800936a:	6138      	str	r0, [r7, #16]
      break;
 800936c:	e000      	b.n	8009370 <HAL_CRC_Calculate+0x88>
      break;
 800936e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8009376:	693b      	ldr	r3, [r7, #16]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8009380:	b480      	push	{r7}
 8009382:	b089      	sub	sp, #36	; 0x24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800938c:	2300      	movs	r3, #0
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e023      	b.n	80093da <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	4413      	add	r3, r2
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	3301      	adds	r3, #1
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	440b      	add	r3, r1
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80093ac:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	3302      	adds	r3, #2
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	440b      	add	r3, r1
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80093bc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	3303      	adds	r3, #3
 80093c4:	68b9      	ldr	r1, [r7, #8]
 80093c6:	440b      	add	r3, r1
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80093d0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80093d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	3301      	adds	r3, #1
 80093d8:	61fb      	str	r3, [r7, #28]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	089b      	lsrs	r3, r3, #2
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d3d6      	bcc.n	8009392 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d04d      	beq.n	800948a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d107      	bne.n	8009408 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	4413      	add	r3, r2
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f003 0303 	and.w	r3, r3, #3
 800940e:	2b02      	cmp	r3, #2
 8009410:	d116      	bne.n	8009440 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	b21a      	sxth	r2, r3
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	3301      	adds	r3, #1
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	440b      	add	r3, r1
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	b21b      	sxth	r3, r3
 800942e:	4313      	orrs	r3, r2
 8009430:	b21b      	sxth	r3, r3
 8009432:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	8b7a      	ldrh	r2, [r7, #26]
 800943e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f003 0303 	and.w	r3, r3, #3
 8009446:	2b03      	cmp	r3, #3
 8009448:	d11f      	bne.n	800948a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	4413      	add	r3, r2
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	b21a      	sxth	r2, r3
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	3301      	adds	r3, #1
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	440b      	add	r3, r1
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	b21b      	sxth	r3, r3
 8009466:	4313      	orrs	r3, r2
 8009468:	b21b      	sxth	r3, r3
 800946a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	8b7a      	ldrh	r2, [r7, #26]
 8009476:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	3302      	adds	r3, #2
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4413      	add	r3, r2
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	6812      	ldr	r2, [r2, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3724      	adds	r7, #36	; 0x24
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80094a8:	2300      	movs	r3, #0
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	e013      	b.n	80094d6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	4413      	add	r3, r2
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	041a      	lsls	r2, r3, #16
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	3302      	adds	r3, #2
 80094c0:	68b9      	ldr	r1, [r7, #8]
 80094c2:	440b      	add	r3, r1
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	4619      	mov	r1, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	3301      	adds	r3, #1
 80094d4:	617b      	str	r3, [r7, #20]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	085b      	lsrs	r3, r3, #1
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d3e6      	bcc.n	80094ae <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	4413      	add	r3, r2
 80094f8:	881a      	ldrh	r2, [r3, #0]
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
}
 8009504:	4618      	mov	r0, r3
 8009506:	371c      	adds	r7, #28
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009520:	231f      	movs	r3, #31
 8009522:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d102      	bne.n	8009534 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	75fb      	strb	r3, [r7, #23]
 8009532:	e063      	b.n	80095fc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009534:	bf00      	nop
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	1e5a      	subs	r2, r3, #1
 800953a:	613a      	str	r2, [r7, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d009      	beq.n	8009554 <HAL_CRCEx_Polynomial_Set+0x44>
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f003 031f 	and.w	r3, r3, #31
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	fa22 f303 	lsr.w	r3, r2, r3
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d0f0      	beq.n	8009536 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b18      	cmp	r3, #24
 8009558:	d846      	bhi.n	80095e8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800955a:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <HAL_CRCEx_Polynomial_Set+0x50>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	080095ef 	.word	0x080095ef
 8009564:	080095e9 	.word	0x080095e9
 8009568:	080095e9 	.word	0x080095e9
 800956c:	080095e9 	.word	0x080095e9
 8009570:	080095e9 	.word	0x080095e9
 8009574:	080095e9 	.word	0x080095e9
 8009578:	080095e9 	.word	0x080095e9
 800957c:	080095e9 	.word	0x080095e9
 8009580:	080095dd 	.word	0x080095dd
 8009584:	080095e9 	.word	0x080095e9
 8009588:	080095e9 	.word	0x080095e9
 800958c:	080095e9 	.word	0x080095e9
 8009590:	080095e9 	.word	0x080095e9
 8009594:	080095e9 	.word	0x080095e9
 8009598:	080095e9 	.word	0x080095e9
 800959c:	080095e9 	.word	0x080095e9
 80095a0:	080095d1 	.word	0x080095d1
 80095a4:	080095e9 	.word	0x080095e9
 80095a8:	080095e9 	.word	0x080095e9
 80095ac:	080095e9 	.word	0x080095e9
 80095b0:	080095e9 	.word	0x080095e9
 80095b4:	080095e9 	.word	0x080095e9
 80095b8:	080095e9 	.word	0x080095e9
 80095bc:	080095e9 	.word	0x080095e9
 80095c0:	080095c5 	.word	0x080095c5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	2b06      	cmp	r3, #6
 80095c8:	d913      	bls.n	80095f2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80095ce:	e010      	b.n	80095f2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	2b07      	cmp	r3, #7
 80095d4:	d90f      	bls.n	80095f6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80095da:	e00c      	b.n	80095f6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	2b0f      	cmp	r3, #15
 80095e0:	d90b      	bls.n	80095fa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80095e6:	e008      	b.n	80095fa <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	75fb      	strb	r3, [r7, #23]
        break;
 80095ec:	e006      	b.n	80095fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80095ee:	bf00      	nop
 80095f0:	e004      	b.n	80095fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80095f2:	bf00      	nop
 80095f4:	e002      	b.n	80095fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80095f6:	bf00      	nop
 80095f8:	e000      	b.n	80095fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80095fa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10d      	bne.n	800961e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f023 0118 	bic.w	r1, r3, #24
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	430a      	orrs	r2, r1
 800961c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009620:	4618      	mov	r0, r3
 8009622:	371c      	adds	r7, #28
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e08d      	b.n	800975a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	4b47      	ldr	r3, [pc, #284]	; (8009764 <HAL_DMA_Init+0x138>)
 8009646:	429a      	cmp	r2, r3
 8009648:	d80f      	bhi.n	800966a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	4b45      	ldr	r3, [pc, #276]	; (8009768 <HAL_DMA_Init+0x13c>)
 8009652:	4413      	add	r3, r2
 8009654:	4a45      	ldr	r2, [pc, #276]	; (800976c <HAL_DMA_Init+0x140>)
 8009656:	fba2 2303 	umull	r2, r3, r2, r3
 800965a:	091b      	lsrs	r3, r3, #4
 800965c:	009a      	lsls	r2, r3, #2
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a42      	ldr	r2, [pc, #264]	; (8009770 <HAL_DMA_Init+0x144>)
 8009666:	641a      	str	r2, [r3, #64]	; 0x40
 8009668:	e00e      	b.n	8009688 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	4b40      	ldr	r3, [pc, #256]	; (8009774 <HAL_DMA_Init+0x148>)
 8009672:	4413      	add	r3, r2
 8009674:	4a3d      	ldr	r2, [pc, #244]	; (800976c <HAL_DMA_Init+0x140>)
 8009676:	fba2 2303 	umull	r2, r3, r2, r3
 800967a:	091b      	lsrs	r3, r3, #4
 800967c:	009a      	lsls	r2, r3, #2
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a3c      	ldr	r2, [pc, #240]	; (8009778 <HAL_DMA_Init+0x14c>)
 8009686:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800969e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80096ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa84 	bl	8009be8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e8:	d102      	bne.n	80096f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f8:	b2d2      	uxtb	r2, r2
 80096fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009704:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d010      	beq.n	8009730 <HAL_DMA_Init+0x104>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	2b04      	cmp	r3, #4
 8009714:	d80c      	bhi.n	8009730 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 faa4 	bl	8009c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009720:	2200      	movs	r2, #0
 8009722:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800972c:	605a      	str	r2, [r3, #4]
 800972e:	e008      	b.n	8009742 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	40020407 	.word	0x40020407
 8009768:	bffdfff8 	.word	0xbffdfff8
 800976c:	cccccccd 	.word	0xcccccccd
 8009770:	40020000 	.word	0x40020000
 8009774:	bffdfbf8 	.word	0xbffdfbf8
 8009778:	40020400 	.word	0x40020400

0800977c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009794:	2b01      	cmp	r3, #1
 8009796:	d101      	bne.n	800979c <HAL_DMA_Start_IT+0x20>
 8009798:	2302      	movs	r3, #2
 800979a:	e066      	b.n	800986a <HAL_DMA_Start_IT+0xee>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d155      	bne.n	800985c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0201 	bic.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 f9c9 	bl	8009b6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d008      	beq.n	80097f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f042 020e 	orr.w	r2, r2, #14
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	e00f      	b.n	8009814 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f022 0204 	bic.w	r2, r2, #4
 8009802:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 020a 	orr.w	r2, r2, #10
 8009812:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800982c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009830:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009836:	2b00      	cmp	r3, #0
 8009838:	d007      	beq.n	800984a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009848:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0201 	orr.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e005      	b.n	8009868 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009864:	2302      	movs	r3, #2
 8009866:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009872:	b480      	push	{r7}
 8009874:	b085      	sub	sp, #20
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b02      	cmp	r3, #2
 8009888:	d005      	beq.n	8009896 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2204      	movs	r2, #4
 800988e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	73fb      	strb	r3, [r7, #15]
 8009894:	e037      	b.n	8009906 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 020e 	bic.w	r2, r2, #14
 80098a4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098b4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0201 	bic.w	r2, r2, #1
 80098c4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ca:	f003 021f 	and.w	r2, r3, #31
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	2101      	movs	r1, #1
 80098d4:	fa01 f202 	lsl.w	r2, r1, r2
 80098d8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80098e2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00c      	beq.n	8009906 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098fa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009904:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009916:	7bfb      	ldrb	r3, [r7, #15]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d00d      	beq.n	8009958 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2204      	movs	r2, #4
 8009940:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	73fb      	strb	r3, [r7, #15]
 8009956:	e047      	b.n	80099e8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 020e 	bic.w	r2, r2, #14
 8009966:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0201 	bic.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998c:	f003 021f 	and.w	r2, r3, #31
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009994:	2101      	movs	r1, #1
 8009996:	fa01 f202 	lsl.w	r2, r1, r2
 800999a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80099a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00c      	beq.n	80099c8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80099c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	4798      	blx	r3
    }
  }
  return status;
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0e:	f003 031f 	and.w	r3, r3, #31
 8009a12:	2204      	movs	r2, #4
 8009a14:	409a      	lsls	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d026      	beq.n	8009a6c <HAL_DMA_IRQHandler+0x7a>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f003 0304 	and.w	r3, r3, #4
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d021      	beq.n	8009a6c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0320 	and.w	r3, r3, #32
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d107      	bne.n	8009a46 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0204 	bic.w	r2, r2, #4
 8009a44:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4a:	f003 021f 	and.w	r2, r3, #31
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a52:	2104      	movs	r1, #4
 8009a54:	fa01 f202 	lsl.w	r2, r1, r2
 8009a58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d071      	beq.n	8009b46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009a6a:	e06c      	b.n	8009b46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a70:	f003 031f 	and.w	r3, r3, #31
 8009a74:	2202      	movs	r2, #2
 8009a76:	409a      	lsls	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d02e      	beq.n	8009ade <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d029      	beq.n	8009ade <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10b      	bne.n	8009ab0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 020a 	bic.w	r2, r2, #10
 8009aa6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab4:	f003 021f 	and.w	r2, r3, #31
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abc:	2102      	movs	r1, #2
 8009abe:	fa01 f202 	lsl.w	r2, r1, r2
 8009ac2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d038      	beq.n	8009b46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009adc:	e033      	b.n	8009b46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae2:	f003 031f 	and.w	r3, r3, #31
 8009ae6:	2208      	movs	r2, #8
 8009ae8:	409a      	lsls	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4013      	ands	r3, r2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d02a      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f003 0308 	and.w	r3, r3, #8
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d025      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f022 020e 	bic.w	r2, r2, #14
 8009b0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b10:	f003 021f 	and.w	r2, r3, #31
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	2101      	movs	r1, #1
 8009b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8009b1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d004      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009b46:	bf00      	nop
 8009b48:	bf00      	nop
}
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b5e:	b2db      	uxtb	r3, r3
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009b82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d004      	beq.n	8009b96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009b94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9a:	f003 021f 	and.w	r2, r3, #31
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8009ba8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	d108      	bne.n	8009bcc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009bca:	e007      	b.n	8009bdc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	60da      	str	r2, [r3, #12]
}
 8009bdc:	bf00      	nop
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	4b16      	ldr	r3, [pc, #88]	; (8009c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d802      	bhi.n	8009c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009bfc:	4b15      	ldr	r3, [pc, #84]	; (8009c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	e001      	b.n	8009c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8009c02:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009c04:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	3b08      	subs	r3, #8
 8009c12:	4a12      	ldr	r2, [pc, #72]	; (8009c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009c14:	fba2 2303 	umull	r2, r3, r2, r3
 8009c18:	091b      	lsrs	r3, r3, #4
 8009c1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c20:	089b      	lsrs	r3, r3, #2
 8009c22:	009a      	lsls	r2, r3, #2
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	4413      	add	r3, r2
 8009c28:	461a      	mov	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a0b      	ldr	r2, [pc, #44]	; (8009c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009c32:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f003 031f 	and.w	r3, r3, #31
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	409a      	lsls	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	40020407 	.word	0x40020407
 8009c54:	40020800 	.word	0x40020800
 8009c58:	40020820 	.word	0x40020820
 8009c5c:	cccccccd 	.word	0xcccccccd
 8009c60:	40020880 	.word	0x40020880

08009c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	4b0b      	ldr	r3, [pc, #44]	; (8009ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a08      	ldr	r2, [pc, #32]	; (8009ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009c86:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	f003 031f 	and.w	r3, r3, #31
 8009c90:	2201      	movs	r2, #1
 8009c92:	409a      	lsls	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009c98:	bf00      	nop
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	1000823f 	.word	0x1000823f
 8009ca8:	40020940 	.word	0x40020940

08009cac <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009cbe:	4b2f      	ldr	r3, [pc, #188]	; (8009d7c <HAL_FLASH_Program+0xd0>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d101      	bne.n	8009cca <HAL_FLASH_Program+0x1e>
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	e053      	b.n	8009d72 <HAL_FLASH_Program+0xc6>
 8009cca:	4b2c      	ldr	r3, [pc, #176]	; (8009d7c <HAL_FLASH_Program+0xd0>)
 8009ccc:	2201      	movs	r2, #1
 8009cce:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009cd4:	f000 f892 	bl	8009dfc <FLASH_WaitForLastOperation>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d143      	bne.n	8009d6a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009ce2:	4b26      	ldr	r3, [pc, #152]	; (8009d7c <HAL_FLASH_Program+0xd0>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009ce8:	4b25      	ldr	r3, [pc, #148]	; (8009d80 <HAL_FLASH_Program+0xd4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d009      	beq.n	8009d08 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009cf4:	4b22      	ldr	r3, [pc, #136]	; (8009d80 <HAL_FLASH_Program+0xd4>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a21      	ldr	r2, [pc, #132]	; (8009d80 <HAL_FLASH_Program+0xd4>)
 8009cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cfe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009d00:	4b1e      	ldr	r3, [pc, #120]	; (8009d7c <HAL_FLASH_Program+0xd0>)
 8009d02:	2202      	movs	r2, #2
 8009d04:	771a      	strb	r2, [r3, #28]
 8009d06:	e002      	b.n	8009d0e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009d08:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <HAL_FLASH_Program+0xd0>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d107      	bne.n	8009d24 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d18:	68b8      	ldr	r0, [r7, #8]
 8009d1a:	f000 f8c3 	bl	8009ea4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	613b      	str	r3, [r7, #16]
 8009d22:	e010      	b.n	8009d46 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d002      	beq.n	8009d30 <HAL_FLASH_Program+0x84>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d10a      	bne.n	8009d46 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	4619      	mov	r1, r3
 8009d34:	68b8      	ldr	r0, [r7, #8]
 8009d36:	f000 f8db 	bl	8009ef0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d102      	bne.n	8009d46 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d44:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009d4a:	f000 f857 	bl	8009dfc <FLASH_WaitForLastOperation>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d006      	beq.n	8009d66 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009d58:	4b09      	ldr	r3, [pc, #36]	; (8009d80 <HAL_FLASH_Program+0xd4>)
 8009d5a:	695a      	ldr	r2, [r3, #20]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	43db      	mvns	r3, r3
 8009d60:	4907      	ldr	r1, [pc, #28]	; (8009d80 <HAL_FLASH_Program+0xd4>)
 8009d62:	4013      	ands	r3, r2
 8009d64:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009d66:	f000 f9d3 	bl	800a110 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009d6a:	4b04      	ldr	r3, [pc, #16]	; (8009d7c <HAL_FLASH_Program+0xd0>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	200001fc 	.word	0x200001fc
 8009d80:	40022000 	.word	0x40022000

08009d84 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009d8e:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <HAL_FLASH_Unlock+0x38>)
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da0b      	bge.n	8009dae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009d96:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <HAL_FLASH_Unlock+0x38>)
 8009d98:	4a09      	ldr	r2, [pc, #36]	; (8009dc0 <HAL_FLASH_Unlock+0x3c>)
 8009d9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009d9c:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <HAL_FLASH_Unlock+0x38>)
 8009d9e:	4a09      	ldr	r2, [pc, #36]	; (8009dc4 <HAL_FLASH_Unlock+0x40>)
 8009da0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009da2:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <HAL_FLASH_Unlock+0x38>)
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	da01      	bge.n	8009dae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009dae:	79fb      	ldrb	r3, [r7, #7]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	40022000 	.word	0x40022000
 8009dc0:	45670123 	.word	0x45670123
 8009dc4:	cdef89ab 	.word	0xcdef89ab

08009dc8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009dd2:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <HAL_FLASH_Lock+0x30>)
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	4a08      	ldr	r2, [pc, #32]	; (8009df8 <HAL_FLASH_Lock+0x30>)
 8009dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ddc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009dde:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <HAL_FLASH_Lock+0x30>)
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da01      	bge.n	8009dea <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009dea:	79fb      	ldrb	r3, [r7, #7]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	40022000 	.word	0x40022000

08009dfc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8009e04:	f7fc fda8 	bl	8006958 <HAL_GetTick>
 8009e08:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009e0a:	e009      	b.n	8009e20 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8009e0c:	f7fc fda4 	bl	8006958 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d201      	bcs.n	8009e20 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e038      	b.n	8009e92 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009e20:	4b1e      	ldr	r3, [pc, #120]	; (8009e9c <FLASH_WaitForLastOperation+0xa0>)
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e2c:	d0ee      	beq.n	8009e0c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009e2e:	4b1b      	ldr	r3, [pc, #108]	; (8009e9c <FLASH_WaitForLastOperation+0xa0>)
 8009e30:	691a      	ldr	r2, [r3, #16]
 8009e32:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8009e36:	4013      	ands	r3, r2
 8009e38:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01e      	beq.n	8009e7e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009e40:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <FLASH_WaitForLastOperation+0xa4>)
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	4a15      	ldr	r2, [pc, #84]	; (8009ea0 <FLASH_WaitForLastOperation+0xa4>)
 8009e4a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <FLASH_WaitForLastOperation+0x6a>
 8009e56:	4b11      	ldr	r3, [pc, #68]	; (8009e9c <FLASH_WaitForLastOperation+0xa0>)
 8009e58:	699a      	ldr	r2, [r3, #24]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009e60:	490e      	ldr	r1, [pc, #56]	; (8009e9c <FLASH_WaitForLastOperation+0xa0>)
 8009e62:	4313      	orrs	r3, r2
 8009e64:	618b      	str	r3, [r1, #24]
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d004      	beq.n	8009e7a <FLASH_WaitForLastOperation+0x7e>
 8009e70:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <FLASH_WaitForLastOperation+0xa0>)
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009e78:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e009      	b.n	8009e92 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009e7e:	4b07      	ldr	r3, [pc, #28]	; (8009e9c <FLASH_WaitForLastOperation+0xa0>)
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d102      	bne.n	8009e90 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009e8a:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <FLASH_WaitForLastOperation+0xa0>)
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	40022000 	.word	0x40022000
 8009ea0:	200001fc 	.word	0x200001fc

08009ea4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009eb0:	4b0e      	ldr	r3, [pc, #56]	; (8009eec <FLASH_Program_DoubleWord+0x48>)
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	4a0d      	ldr	r2, [pc, #52]	; (8009eec <FLASH_Program_DoubleWord+0x48>)
 8009eb6:	f043 0301 	orr.w	r3, r3, #1
 8009eba:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009ec2:	f3bf 8f6f 	isb	sy
}
 8009ec6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ecc:	f04f 0200 	mov.w	r2, #0
 8009ed0:	f04f 0300 	mov.w	r3, #0
 8009ed4:	000a      	movs	r2, r1
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	68f9      	ldr	r1, [r7, #12]
 8009eda:	3104      	adds	r1, #4
 8009edc:	4613      	mov	r3, r2
 8009ede:	600b      	str	r3, [r1, #0]
}
 8009ee0:	bf00      	nop
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	40022000 	.word	0x40022000

08009ef0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b089      	sub	sp, #36	; 0x24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009efa:	2340      	movs	r3, #64	; 0x40
 8009efc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8009f06:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <FLASH_Program_Fast+0x68>)
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	4a13      	ldr	r2, [pc, #76]	; (8009f58 <FLASH_Program_Fast+0x68>)
 8009f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f10:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f12:	f3ef 8310 	mrs	r3, PRIMASK
 8009f16:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f18:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8009f1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f1c:	b672      	cpsid	i
}
 8009f1e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	3304      	adds	r3, #4
 8009f32:	617b      	str	r3, [r7, #20]
    row_index--;
 8009f34:	7ffb      	ldrb	r3, [r7, #31]
 8009f36:	3b01      	subs	r3, #1
 8009f38:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8009f3a:	7ffb      	ldrb	r3, [r7, #31]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1ef      	bne.n	8009f20 <FLASH_Program_Fast+0x30>
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f383 8810 	msr	PRIMASK, r3
}
 8009f4a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009f4c:	bf00      	nop
 8009f4e:	3724      	adds	r7, #36	; 0x24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	40022000 	.word	0x40022000

08009f5c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f66:	4b47      	ldr	r3, [pc, #284]	; (800a084 <HAL_FLASHEx_Erase+0x128>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <HAL_FLASHEx_Erase+0x16>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e083      	b.n	800a07a <HAL_FLASHEx_Erase+0x11e>
 8009f72:	4b44      	ldr	r3, [pc, #272]	; (800a084 <HAL_FLASHEx_Erase+0x128>)
 8009f74:	2201      	movs	r2, #1
 8009f76:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f7c:	f7ff ff3e 	bl	8009dfc <FLASH_WaitForLastOperation>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d173      	bne.n	800a072 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009f8a:	4b3e      	ldr	r3, [pc, #248]	; (800a084 <HAL_FLASHEx_Erase+0x128>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009f90:	4b3d      	ldr	r3, [pc, #244]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d013      	beq.n	8009fc4 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009f9c:	4b3a      	ldr	r3, [pc, #232]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d009      	beq.n	8009fbc <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009fa8:	4b37      	ldr	r3, [pc, #220]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a36      	ldr	r2, [pc, #216]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 8009fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fb2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009fb4:	4b33      	ldr	r3, [pc, #204]	; (800a084 <HAL_FLASHEx_Erase+0x128>)
 8009fb6:	2203      	movs	r2, #3
 8009fb8:	771a      	strb	r2, [r3, #28]
 8009fba:	e016      	b.n	8009fea <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009fbc:	4b31      	ldr	r3, [pc, #196]	; (800a084 <HAL_FLASHEx_Erase+0x128>)
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	771a      	strb	r2, [r3, #28]
 8009fc2:	e012      	b.n	8009fea <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009fc4:	4b30      	ldr	r3, [pc, #192]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d009      	beq.n	8009fe4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009fd0:	4b2d      	ldr	r3, [pc, #180]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a2c      	ldr	r2, [pc, #176]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 8009fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fda:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009fdc:	4b29      	ldr	r3, [pc, #164]	; (800a084 <HAL_FLASHEx_Erase+0x128>)
 8009fde:	2202      	movs	r2, #2
 8009fe0:	771a      	strb	r2, [r3, #28]
 8009fe2:	e002      	b.n	8009fea <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009fe4:	4b27      	ldr	r3, [pc, #156]	; (800a084 <HAL_FLASHEx_Erase+0x128>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d111      	bne.n	800a016 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 f848 	bl	800a08c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a000:	f7ff fefc 	bl	8009dfc <FLASH_WaitForLastOperation>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800a008:	4b1f      	ldr	r3, [pc, #124]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 800a00a:	695b      	ldr	r3, [r3, #20]
 800a00c:	4a1e      	ldr	r2, [pc, #120]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 800a00e:	f023 0304 	bic.w	r3, r3, #4
 800a012:	6153      	str	r3, [r2, #20]
 800a014:	e02b      	b.n	800a06e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	f04f 32ff 	mov.w	r2, #4294967295
 800a01c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	60bb      	str	r3, [r7, #8]
 800a024:	e01b      	b.n	800a05e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	4619      	mov	r1, r3
 800a02c:	68b8      	ldr	r0, [r7, #8]
 800a02e:	f000 f84b 	bl	800a0c8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a036:	f7ff fee1 	bl	8009dfc <FLASH_WaitForLastOperation>
 800a03a:	4603      	mov	r3, r0
 800a03c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800a03e:	4b12      	ldr	r3, [pc, #72]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	4a11      	ldr	r2, [pc, #68]	; (800a088 <HAL_FLASHEx_Erase+0x12c>)
 800a044:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 800a048:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	601a      	str	r2, [r3, #0]
          break;
 800a056:	e00a      	b.n	800a06e <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	3301      	adds	r3, #1
 800a05c:	60bb      	str	r3, [r7, #8]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689a      	ldr	r2, [r3, #8]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	4413      	add	r3, r2
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d3db      	bcc.n	800a026 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a06e:	f000 f84f 	bl	800a110 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a072:	4b04      	ldr	r3, [pc, #16]	; (800a084 <HAL_FLASHEx_Erase+0x128>)
 800a074:	2200      	movs	r2, #0
 800a076:	701a      	strb	r2, [r3, #0]

  return status;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	200001fc 	.word	0x200001fc
 800a088:	40022000 	.word	0x40022000

0800a08c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d005      	beq.n	800a0aa <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800a09e:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <FLASH_MassErase+0x38>)
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	4a08      	ldr	r2, [pc, #32]	; (800a0c4 <FLASH_MassErase+0x38>)
 800a0a4:	f043 0304 	orr.w	r3, r3, #4
 800a0a8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a0aa:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <FLASH_MassErase+0x38>)
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	4a05      	ldr	r2, [pc, #20]	; (800a0c4 <FLASH_MassErase+0x38>)
 800a0b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0b4:	6153      	str	r3, [r2, #20]
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	40022000 	.word	0x40022000

0800a0c8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800a0d2:	4b0e      	ldr	r3, [pc, #56]	; (800a10c <FLASH_PageErase+0x44>)
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800a0e2:	490a      	ldr	r1, [pc, #40]	; (800a10c <FLASH_PageErase+0x44>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a0e8:	4b08      	ldr	r3, [pc, #32]	; (800a10c <FLASH_PageErase+0x44>)
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	4a07      	ldr	r2, [pc, #28]	; (800a10c <FLASH_PageErase+0x44>)
 800a0ee:	f043 0302 	orr.w	r3, r3, #2
 800a0f2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <FLASH_PageErase+0x44>)
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	4a04      	ldr	r2, [pc, #16]	; (800a10c <FLASH_PageErase+0x44>)
 800a0fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0fe:	6153      	str	r3, [r2, #20]
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	40022000 	.word	0x40022000

0800a110 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800a116:	4b21      	ldr	r3, [pc, #132]	; (800a19c <FLASH_FlushCaches+0x8c>)
 800a118:	7f1b      	ldrb	r3, [r3, #28]
 800a11a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d002      	beq.n	800a128 <FLASH_FlushCaches+0x18>
 800a122:	79fb      	ldrb	r3, [r7, #7]
 800a124:	2b03      	cmp	r3, #3
 800a126:	d117      	bne.n	800a158 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a128:	4b1d      	ldr	r3, [pc, #116]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a1c      	ldr	r2, [pc, #112]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a12e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a132:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a134:	4b1a      	ldr	r3, [pc, #104]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a19      	ldr	r2, [pc, #100]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a13a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a16      	ldr	r2, [pc, #88]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a14a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a14c:	4b14      	ldr	r3, [pc, #80]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a13      	ldr	r2, [pc, #76]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a156:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d002      	beq.n	800a164 <FLASH_FlushCaches+0x54>
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	2b03      	cmp	r3, #3
 800a162:	d111      	bne.n	800a188 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a164:	4b0e      	ldr	r3, [pc, #56]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a0d      	ldr	r2, [pc, #52]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a16a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	4b0b      	ldr	r3, [pc, #44]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a0a      	ldr	r2, [pc, #40]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a17a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a17c:	4b08      	ldr	r3, [pc, #32]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a07      	ldr	r2, [pc, #28]	; (800a1a0 <FLASH_FlushCaches+0x90>)
 800a182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a186:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a188:	4b04      	ldr	r3, [pc, #16]	; (800a19c <FLASH_FlushCaches+0x8c>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	771a      	strb	r2, [r3, #28]
}
 800a18e:	bf00      	nop
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	200001fc 	.word	0x200001fc
 800a1a0:	40022000 	.word	0x40022000

0800a1a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a1b2:	e15a      	b.n	800a46a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 814c 	beq.w	800a464 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f003 0303 	and.w	r3, r3, #3
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d005      	beq.n	800a1e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d130      	bne.n	800a246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	2203      	movs	r2, #3
 800a1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f4:	43db      	mvns	r3, r3
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	68da      	ldr	r2, [r3, #12]
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	fa02 f303 	lsl.w	r3, r2, r3
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a21a:	2201      	movs	r2, #1
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	fa02 f303 	lsl.w	r3, r2, r3
 800a222:	43db      	mvns	r3, r3
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	4013      	ands	r3, r2
 800a228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	091b      	lsrs	r3, r3, #4
 800a230:	f003 0201 	and.w	r2, r3, #1
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	fa02 f303 	lsl.w	r3, r2, r3
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	f003 0303 	and.w	r3, r3, #3
 800a24e:	2b03      	cmp	r3, #3
 800a250:	d017      	beq.n	800a282 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	2203      	movs	r2, #3
 800a25e:	fa02 f303 	lsl.w	r3, r2, r3
 800a262:	43db      	mvns	r3, r3
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4013      	ands	r3, r2
 800a268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	fa02 f303 	lsl.w	r3, r2, r3
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	4313      	orrs	r3, r2
 800a27a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f003 0303 	and.w	r3, r3, #3
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d123      	bne.n	800a2d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	08da      	lsrs	r2, r3, #3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3208      	adds	r2, #8
 800a296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	220f      	movs	r2, #15
 800a2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2aa:	43db      	mvns	r3, r3
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	691a      	ldr	r2, [r3, #16]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	08da      	lsrs	r2, r3, #3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3208      	adds	r2, #8
 800a2d0:	6939      	ldr	r1, [r7, #16]
 800a2d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	2203      	movs	r2, #3
 800a2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e6:	43db      	mvns	r3, r3
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f003 0203 	and.w	r2, r3, #3
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	4313      	orrs	r3, r2
 800a302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 80a6 	beq.w	800a464 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a318:	4b5b      	ldr	r3, [pc, #364]	; (800a488 <HAL_GPIO_Init+0x2e4>)
 800a31a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a31c:	4a5a      	ldr	r2, [pc, #360]	; (800a488 <HAL_GPIO_Init+0x2e4>)
 800a31e:	f043 0301 	orr.w	r3, r3, #1
 800a322:	6613      	str	r3, [r2, #96]	; 0x60
 800a324:	4b58      	ldr	r3, [pc, #352]	; (800a488 <HAL_GPIO_Init+0x2e4>)
 800a326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	60bb      	str	r3, [r7, #8]
 800a32e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a330:	4a56      	ldr	r2, [pc, #344]	; (800a48c <HAL_GPIO_Init+0x2e8>)
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	089b      	lsrs	r3, r3, #2
 800a336:	3302      	adds	r3, #2
 800a338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a33c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	220f      	movs	r2, #15
 800a348:	fa02 f303 	lsl.w	r3, r2, r3
 800a34c:	43db      	mvns	r3, r3
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	4013      	ands	r3, r2
 800a352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a35a:	d01f      	beq.n	800a39c <HAL_GPIO_Init+0x1f8>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a4c      	ldr	r2, [pc, #304]	; (800a490 <HAL_GPIO_Init+0x2ec>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d019      	beq.n	800a398 <HAL_GPIO_Init+0x1f4>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a4b      	ldr	r2, [pc, #300]	; (800a494 <HAL_GPIO_Init+0x2f0>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d013      	beq.n	800a394 <HAL_GPIO_Init+0x1f0>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a4a      	ldr	r2, [pc, #296]	; (800a498 <HAL_GPIO_Init+0x2f4>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d00d      	beq.n	800a390 <HAL_GPIO_Init+0x1ec>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a49      	ldr	r2, [pc, #292]	; (800a49c <HAL_GPIO_Init+0x2f8>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d007      	beq.n	800a38c <HAL_GPIO_Init+0x1e8>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a48      	ldr	r2, [pc, #288]	; (800a4a0 <HAL_GPIO_Init+0x2fc>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d101      	bne.n	800a388 <HAL_GPIO_Init+0x1e4>
 800a384:	2305      	movs	r3, #5
 800a386:	e00a      	b.n	800a39e <HAL_GPIO_Init+0x1fa>
 800a388:	2306      	movs	r3, #6
 800a38a:	e008      	b.n	800a39e <HAL_GPIO_Init+0x1fa>
 800a38c:	2304      	movs	r3, #4
 800a38e:	e006      	b.n	800a39e <HAL_GPIO_Init+0x1fa>
 800a390:	2303      	movs	r3, #3
 800a392:	e004      	b.n	800a39e <HAL_GPIO_Init+0x1fa>
 800a394:	2302      	movs	r3, #2
 800a396:	e002      	b.n	800a39e <HAL_GPIO_Init+0x1fa>
 800a398:	2301      	movs	r3, #1
 800a39a:	e000      	b.n	800a39e <HAL_GPIO_Init+0x1fa>
 800a39c:	2300      	movs	r3, #0
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	f002 0203 	and.w	r2, r2, #3
 800a3a4:	0092      	lsls	r2, r2, #2
 800a3a6:	4093      	lsls	r3, r2
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a3ae:	4937      	ldr	r1, [pc, #220]	; (800a48c <HAL_GPIO_Init+0x2e8>)
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	089b      	lsrs	r3, r3, #2
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a3bc:	4b39      	ldr	r3, [pc, #228]	; (800a4a4 <HAL_GPIO_Init+0x300>)
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	43db      	mvns	r3, r3
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a3e0:	4a30      	ldr	r2, [pc, #192]	; (800a4a4 <HAL_GPIO_Init+0x300>)
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a3e6:	4b2f      	ldr	r3, [pc, #188]	; (800a4a4 <HAL_GPIO_Init+0x300>)
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	43db      	mvns	r3, r3
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4313      	orrs	r3, r2
 800a408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a40a:	4a26      	ldr	r2, [pc, #152]	; (800a4a4 <HAL_GPIO_Init+0x300>)
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a410:	4b24      	ldr	r3, [pc, #144]	; (800a4a4 <HAL_GPIO_Init+0x300>)
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	43db      	mvns	r3, r3
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4013      	ands	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d003      	beq.n	800a434 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4313      	orrs	r3, r2
 800a432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a434:	4a1b      	ldr	r2, [pc, #108]	; (800a4a4 <HAL_GPIO_Init+0x300>)
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a43a:	4b1a      	ldr	r3, [pc, #104]	; (800a4a4 <HAL_GPIO_Init+0x300>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	43db      	mvns	r3, r3
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	4013      	ands	r3, r2
 800a448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a45e:	4a11      	ldr	r2, [pc, #68]	; (800a4a4 <HAL_GPIO_Init+0x300>)
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	3301      	adds	r3, #1
 800a468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	fa22 f303 	lsr.w	r3, r2, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	f47f ae9d 	bne.w	800a1b4 <HAL_GPIO_Init+0x10>
  }
}
 800a47a:	bf00      	nop
 800a47c:	bf00      	nop
 800a47e:	371c      	adds	r7, #28
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	40021000 	.word	0x40021000
 800a48c:	40010000 	.word	0x40010000
 800a490:	48000400 	.word	0x48000400
 800a494:	48000800 	.word	0x48000800
 800a498:	48000c00 	.word	0x48000c00
 800a49c:	48001000 	.word	0x48001000
 800a4a0:	48001400 	.word	0x48001400
 800a4a4:	40010400 	.word	0x40010400

0800a4a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	691a      	ldr	r2, [r3, #16]
 800a4b8:	887b      	ldrh	r3, [r7, #2]
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	73fb      	strb	r3, [r7, #15]
 800a4c4:	e001      	b.n	800a4ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	807b      	strh	r3, [r7, #2]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a4e8:	787b      	ldrb	r3, [r7, #1]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a4ee:	887a      	ldrh	r2, [r7, #2]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a4f4:	e002      	b.n	800a4fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a4f6:	887a      	ldrh	r2, [r7, #2]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a512:	4b08      	ldr	r3, [pc, #32]	; (800a534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a514:	695a      	ldr	r2, [r3, #20]
 800a516:	88fb      	ldrh	r3, [r7, #6]
 800a518:	4013      	ands	r3, r2
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d006      	beq.n	800a52c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a51e:	4a05      	ldr	r2, [pc, #20]	; (800a534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a520:	88fb      	ldrh	r3, [r7, #6]
 800a522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a524:	88fb      	ldrh	r3, [r7, #6]
 800a526:	4618      	mov	r0, r3
 800a528:	f7f9 fa10 	bl	800394c <HAL_GPIO_EXTI_Callback>
  }
}
 800a52c:	bf00      	nop
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	40010400 	.word	0x40010400

0800a538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e08d      	b.n	800a666 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d106      	bne.n	800a564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7fb f8d8 	bl	8005714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2224      	movs	r2, #36	; 0x24
 800a568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 0201 	bic.w	r2, r2, #1
 800a57a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a588:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689a      	ldr	r2, [r3, #8]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a598:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d107      	bne.n	800a5b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	689a      	ldr	r2, [r3, #8]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5ae:	609a      	str	r2, [r3, #8]
 800a5b0:	e006      	b.n	800a5c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a5be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d108      	bne.n	800a5da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5d6:	605a      	str	r2, [r3, #4]
 800a5d8:	e007      	b.n	800a5ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6812      	ldr	r2, [r2, #0]
 800a5f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a5f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68da      	ldr	r2, [r3, #12]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a60c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	691a      	ldr	r2, [r3, #16]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	69d9      	ldr	r1, [r3, #28]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a1a      	ldr	r2, [r3, #32]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	430a      	orrs	r2, r1
 800a636:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0201 	orr.w	r2, r2, #1
 800a646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2220      	movs	r2, #32
 800a652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b20      	cmp	r3, #32
 800a682:	d138      	bne.n	800a6f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d101      	bne.n	800a692 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a68e:	2302      	movs	r3, #2
 800a690:	e032      	b.n	800a6f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2224      	movs	r2, #36	; 0x24
 800a69e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0201 	bic.w	r2, r2, #1
 800a6b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a6c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6819      	ldr	r1, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f042 0201 	orr.w	r2, r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e000      	b.n	800a6f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a6f6:	2302      	movs	r3, #2
  }
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b20      	cmp	r3, #32
 800a718:	d139      	bne.n	800a78e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a724:	2302      	movs	r3, #2
 800a726:	e033      	b.n	800a790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2224      	movs	r2, #36	; 0x24
 800a734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 0201 	bic.w	r2, r2, #1
 800a746:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a756:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	021b      	lsls	r3, r3, #8
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	4313      	orrs	r3, r2
 800a760:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f042 0201 	orr.w	r2, r2, #1
 800a778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e000      	b.n	800a790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a78e:	2302      	movs	r3, #2
  }
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d141      	bne.n	800a82e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a7aa:	4b4b      	ldr	r3, [pc, #300]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b6:	d131      	bne.n	800a81c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a7b8:	4b47      	ldr	r3, [pc, #284]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7be:	4a46      	ldr	r2, [pc, #280]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a7c8:	4b43      	ldr	r3, [pc, #268]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a7d0:	4a41      	ldr	r2, [pc, #260]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a7d8:	4b40      	ldr	r3, [pc, #256]	; (800a8dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2232      	movs	r2, #50	; 0x32
 800a7de:	fb02 f303 	mul.w	r3, r2, r3
 800a7e2:	4a3f      	ldr	r2, [pc, #252]	; (800a8e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a7e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e8:	0c9b      	lsrs	r3, r3, #18
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a7ee:	e002      	b.n	800a7f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a7f6:	4b38      	ldr	r3, [pc, #224]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a802:	d102      	bne.n	800a80a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1f2      	bne.n	800a7f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a80a:	4b33      	ldr	r3, [pc, #204]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a816:	d158      	bne.n	800a8ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e057      	b.n	800a8cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a81c:	4b2e      	ldr	r3, [pc, #184]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a822:	4a2d      	ldr	r2, [pc, #180]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a82c:	e04d      	b.n	800a8ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a834:	d141      	bne.n	800a8ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a836:	4b28      	ldr	r3, [pc, #160]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a83e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a842:	d131      	bne.n	800a8a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a844:	4b24      	ldr	r3, [pc, #144]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a84a:	4a23      	ldr	r2, [pc, #140]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a84c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a854:	4b20      	ldr	r3, [pc, #128]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a85c:	4a1e      	ldr	r2, [pc, #120]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a85e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a862:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a864:	4b1d      	ldr	r3, [pc, #116]	; (800a8dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2232      	movs	r2, #50	; 0x32
 800a86a:	fb02 f303 	mul.w	r3, r2, r3
 800a86e:	4a1c      	ldr	r2, [pc, #112]	; (800a8e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a870:	fba2 2303 	umull	r2, r3, r2, r3
 800a874:	0c9b      	lsrs	r3, r3, #18
 800a876:	3301      	adds	r3, #1
 800a878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a87a:	e002      	b.n	800a882 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	3b01      	subs	r3, #1
 800a880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a882:	4b15      	ldr	r3, [pc, #84]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a88a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a88e:	d102      	bne.n	800a896 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1f2      	bne.n	800a87c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a896:	4b10      	ldr	r3, [pc, #64]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a89e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8a2:	d112      	bne.n	800a8ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e011      	b.n	800a8cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a8a8:	4b0b      	ldr	r3, [pc, #44]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8ae:	4a0a      	ldr	r2, [pc, #40]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a8b8:	e007      	b.n	800a8ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a8ba:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a8c2:	4a05      	ldr	r2, [pc, #20]	; (800a8d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	40007000 	.word	0x40007000
 800a8dc:	200001e0 	.word	0x200001e0
 800a8e0:	431bde83 	.word	0x431bde83

0800a8e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a8e8:	4b05      	ldr	r3, [pc, #20]	; (800a900 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	4a04      	ldr	r2, [pc, #16]	; (800a900 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a8ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8f2:	6093      	str	r3, [r2, #8]
}
 800a8f4:	bf00      	nop
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	40007000 	.word	0x40007000

0800a904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e2fe      	b.n	800af14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d075      	beq.n	800aa0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a922:	4b97      	ldr	r3, [pc, #604]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f003 030c 	and.w	r3, r3, #12
 800a92a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a92c:	4b94      	ldr	r3, [pc, #592]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	f003 0303 	and.w	r3, r3, #3
 800a934:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	2b0c      	cmp	r3, #12
 800a93a:	d102      	bne.n	800a942 <HAL_RCC_OscConfig+0x3e>
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d002      	beq.n	800a948 <HAL_RCC_OscConfig+0x44>
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	2b08      	cmp	r3, #8
 800a946:	d10b      	bne.n	800a960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a948:	4b8d      	ldr	r3, [pc, #564]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d05b      	beq.n	800aa0c <HAL_RCC_OscConfig+0x108>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d157      	bne.n	800aa0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e2d9      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a968:	d106      	bne.n	800a978 <HAL_RCC_OscConfig+0x74>
 800a96a:	4b85      	ldr	r3, [pc, #532]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a84      	ldr	r2, [pc, #528]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	e01d      	b.n	800a9b4 <HAL_RCC_OscConfig+0xb0>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a980:	d10c      	bne.n	800a99c <HAL_RCC_OscConfig+0x98>
 800a982:	4b7f      	ldr	r3, [pc, #508]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a7e      	ldr	r2, [pc, #504]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a98c:	6013      	str	r3, [r2, #0]
 800a98e:	4b7c      	ldr	r3, [pc, #496]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a7b      	ldr	r2, [pc, #492]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	e00b      	b.n	800a9b4 <HAL_RCC_OscConfig+0xb0>
 800a99c:	4b78      	ldr	r3, [pc, #480]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a77      	ldr	r2, [pc, #476]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a9a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	4b75      	ldr	r3, [pc, #468]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a74      	ldr	r2, [pc, #464]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a9ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d013      	beq.n	800a9e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9bc:	f7fb ffcc 	bl	8006958 <HAL_GetTick>
 800a9c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9c2:	e008      	b.n	800a9d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9c4:	f7fb ffc8 	bl	8006958 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	2b64      	cmp	r3, #100	; 0x64
 800a9d0:	d901      	bls.n	800a9d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e29e      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9d6:	4b6a      	ldr	r3, [pc, #424]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d0f0      	beq.n	800a9c4 <HAL_RCC_OscConfig+0xc0>
 800a9e2:	e014      	b.n	800aa0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e4:	f7fb ffb8 	bl	8006958 <HAL_GetTick>
 800a9e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a9ea:	e008      	b.n	800a9fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9ec:	f7fb ffb4 	bl	8006958 <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b64      	cmp	r3, #100	; 0x64
 800a9f8:	d901      	bls.n	800a9fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e28a      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a9fe:	4b60      	ldr	r3, [pc, #384]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1f0      	bne.n	800a9ec <HAL_RCC_OscConfig+0xe8>
 800aa0a:	e000      	b.n	800aa0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d075      	beq.n	800ab06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa1a:	4b59      	ldr	r3, [pc, #356]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	f003 030c 	and.w	r3, r3, #12
 800aa22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa24:	4b56      	ldr	r3, [pc, #344]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f003 0303 	and.w	r3, r3, #3
 800aa2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	2b0c      	cmp	r3, #12
 800aa32:	d102      	bne.n	800aa3a <HAL_RCC_OscConfig+0x136>
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d002      	beq.n	800aa40 <HAL_RCC_OscConfig+0x13c>
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d11f      	bne.n	800aa80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa40:	4b4f      	ldr	r3, [pc, #316]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <HAL_RCC_OscConfig+0x154>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e25d      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa58:	4b49      	ldr	r3, [pc, #292]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	061b      	lsls	r3, r3, #24
 800aa66:	4946      	ldr	r1, [pc, #280]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800aa6c:	4b45      	ldr	r3, [pc, #276]	; (800ab84 <HAL_RCC_OscConfig+0x280>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fb ff25 	bl	80068c0 <HAL_InitTick>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d043      	beq.n	800ab04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e249      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d023      	beq.n	800aad0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa88:	4b3d      	ldr	r3, [pc, #244]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a3c      	ldr	r2, [pc, #240]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aa8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa94:	f7fb ff60 	bl	8006958 <HAL_GetTick>
 800aa98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa9a:	e008      	b.n	800aaae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa9c:	f7fb ff5c 	bl	8006958 <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d901      	bls.n	800aaae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e232      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aaae:	4b34      	ldr	r3, [pc, #208]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0f0      	beq.n	800aa9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aaba:	4b31      	ldr	r3, [pc, #196]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	061b      	lsls	r3, r3, #24
 800aac8:	492d      	ldr	r1, [pc, #180]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aaca:	4313      	orrs	r3, r2
 800aacc:	604b      	str	r3, [r1, #4]
 800aace:	e01a      	b.n	800ab06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aad0:	4b2b      	ldr	r3, [pc, #172]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a2a      	ldr	r2, [pc, #168]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aadc:	f7fb ff3c 	bl	8006958 <HAL_GetTick>
 800aae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aae2:	e008      	b.n	800aaf6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aae4:	f7fb ff38 	bl	8006958 <HAL_GetTick>
 800aae8:	4602      	mov	r2, r0
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d901      	bls.n	800aaf6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	e20e      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aaf6:	4b22      	ldr	r3, [pc, #136]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1f0      	bne.n	800aae4 <HAL_RCC_OscConfig+0x1e0>
 800ab02:	e000      	b.n	800ab06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0308 	and.w	r3, r3, #8
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d041      	beq.n	800ab96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d01c      	beq.n	800ab54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab1a:	4b19      	ldr	r3, [pc, #100]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800ab1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab20:	4a17      	ldr	r2, [pc, #92]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800ab22:	f043 0301 	orr.w	r3, r3, #1
 800ab26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab2a:	f7fb ff15 	bl	8006958 <HAL_GetTick>
 800ab2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab30:	e008      	b.n	800ab44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab32:	f7fb ff11 	bl	8006958 <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d901      	bls.n	800ab44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ab40:	2303      	movs	r3, #3
 800ab42:	e1e7      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab44:	4b0e      	ldr	r3, [pc, #56]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800ab46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab4a:	f003 0302 	and.w	r3, r3, #2
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0ef      	beq.n	800ab32 <HAL_RCC_OscConfig+0x22e>
 800ab52:	e020      	b.n	800ab96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab54:	4b0a      	ldr	r3, [pc, #40]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800ab56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab5a:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <HAL_RCC_OscConfig+0x27c>)
 800ab5c:	f023 0301 	bic.w	r3, r3, #1
 800ab60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab64:	f7fb fef8 	bl	8006958 <HAL_GetTick>
 800ab68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ab6a:	e00d      	b.n	800ab88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab6c:	f7fb fef4 	bl	8006958 <HAL_GetTick>
 800ab70:	4602      	mov	r2, r0
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d906      	bls.n	800ab88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e1ca      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
 800ab7e:	bf00      	nop
 800ab80:	40021000 	.word	0x40021000
 800ab84:	200001f4 	.word	0x200001f4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ab88:	4b8c      	ldr	r3, [pc, #560]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ab8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab8e:	f003 0302 	and.w	r3, r3, #2
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1ea      	bne.n	800ab6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f003 0304 	and.w	r3, r3, #4
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 80a6 	beq.w	800acf0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aba4:	2300      	movs	r3, #0
 800aba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aba8:	4b84      	ldr	r3, [pc, #528]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800abaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <HAL_RCC_OscConfig+0x2b4>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e000      	b.n	800abba <HAL_RCC_OscConfig+0x2b6>
 800abb8:	2300      	movs	r3, #0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00d      	beq.n	800abda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abbe:	4b7f      	ldr	r3, [pc, #508]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800abc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc2:	4a7e      	ldr	r2, [pc, #504]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800abc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abc8:	6593      	str	r3, [r2, #88]	; 0x58
 800abca:	4b7c      	ldr	r3, [pc, #496]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800abcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800abd6:	2301      	movs	r3, #1
 800abd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800abda:	4b79      	ldr	r3, [pc, #484]	; (800adc0 <HAL_RCC_OscConfig+0x4bc>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d118      	bne.n	800ac18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800abe6:	4b76      	ldr	r3, [pc, #472]	; (800adc0 <HAL_RCC_OscConfig+0x4bc>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a75      	ldr	r2, [pc, #468]	; (800adc0 <HAL_RCC_OscConfig+0x4bc>)
 800abec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800abf2:	f7fb feb1 	bl	8006958 <HAL_GetTick>
 800abf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800abf8:	e008      	b.n	800ac0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abfa:	f7fb fead 	bl	8006958 <HAL_GetTick>
 800abfe:	4602      	mov	r2, r0
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d901      	bls.n	800ac0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e183      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac0c:	4b6c      	ldr	r3, [pc, #432]	; (800adc0 <HAL_RCC_OscConfig+0x4bc>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d0f0      	beq.n	800abfa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d108      	bne.n	800ac32 <HAL_RCC_OscConfig+0x32e>
 800ac20:	4b66      	ldr	r3, [pc, #408]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac26:	4a65      	ldr	r2, [pc, #404]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac28:	f043 0301 	orr.w	r3, r3, #1
 800ac2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac30:	e024      	b.n	800ac7c <HAL_RCC_OscConfig+0x378>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	2b05      	cmp	r3, #5
 800ac38:	d110      	bne.n	800ac5c <HAL_RCC_OscConfig+0x358>
 800ac3a:	4b60      	ldr	r3, [pc, #384]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac40:	4a5e      	ldr	r2, [pc, #376]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac42:	f043 0304 	orr.w	r3, r3, #4
 800ac46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac4a:	4b5c      	ldr	r3, [pc, #368]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac50:	4a5a      	ldr	r2, [pc, #360]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac52:	f043 0301 	orr.w	r3, r3, #1
 800ac56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac5a:	e00f      	b.n	800ac7c <HAL_RCC_OscConfig+0x378>
 800ac5c:	4b57      	ldr	r3, [pc, #348]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac62:	4a56      	ldr	r2, [pc, #344]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac64:	f023 0301 	bic.w	r3, r3, #1
 800ac68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac6c:	4b53      	ldr	r3, [pc, #332]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac72:	4a52      	ldr	r2, [pc, #328]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ac74:	f023 0304 	bic.w	r3, r3, #4
 800ac78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d016      	beq.n	800acb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac84:	f7fb fe68 	bl	8006958 <HAL_GetTick>
 800ac88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ac8a:	e00a      	b.n	800aca2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac8c:	f7fb fe64 	bl	8006958 <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d901      	bls.n	800aca2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e138      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aca2:	4b46      	ldr	r3, [pc, #280]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800aca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aca8:	f003 0302 	and.w	r3, r3, #2
 800acac:	2b00      	cmp	r3, #0
 800acae:	d0ed      	beq.n	800ac8c <HAL_RCC_OscConfig+0x388>
 800acb0:	e015      	b.n	800acde <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acb2:	f7fb fe51 	bl	8006958 <HAL_GetTick>
 800acb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800acb8:	e00a      	b.n	800acd0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acba:	f7fb fe4d 	bl	8006958 <HAL_GetTick>
 800acbe:	4602      	mov	r2, r0
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc8:	4293      	cmp	r3, r2
 800acca:	d901      	bls.n	800acd0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e121      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800acd0:	4b3a      	ldr	r3, [pc, #232]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800acd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acd6:	f003 0302 	and.w	r3, r3, #2
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1ed      	bne.n	800acba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800acde:	7ffb      	ldrb	r3, [r7, #31]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d105      	bne.n	800acf0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ace4:	4b35      	ldr	r3, [pc, #212]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ace6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ace8:	4a34      	ldr	r2, [pc, #208]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800acea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0320 	and.w	r3, r3, #32
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d03c      	beq.n	800ad76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d01c      	beq.n	800ad3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ad04:	4b2d      	ldr	r3, [pc, #180]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ad06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad0a:	4a2c      	ldr	r2, [pc, #176]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ad0c:	f043 0301 	orr.w	r3, r3, #1
 800ad10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad14:	f7fb fe20 	bl	8006958 <HAL_GetTick>
 800ad18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ad1a:	e008      	b.n	800ad2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad1c:	f7fb fe1c 	bl	8006958 <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d901      	bls.n	800ad2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e0f2      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ad2e:	4b23      	ldr	r3, [pc, #140]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ad30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad34:	f003 0302 	and.w	r3, r3, #2
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d0ef      	beq.n	800ad1c <HAL_RCC_OscConfig+0x418>
 800ad3c:	e01b      	b.n	800ad76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad3e:	4b1f      	ldr	r3, [pc, #124]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ad40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad44:	4a1d      	ldr	r2, [pc, #116]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ad46:	f023 0301 	bic.w	r3, r3, #1
 800ad4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad4e:	f7fb fe03 	bl	8006958 <HAL_GetTick>
 800ad52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ad54:	e008      	b.n	800ad68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad56:	f7fb fdff 	bl	8006958 <HAL_GetTick>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d901      	bls.n	800ad68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ad64:	2303      	movs	r3, #3
 800ad66:	e0d5      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ad68:	4b14      	ldr	r3, [pc, #80]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ad6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad6e:	f003 0302 	and.w	r3, r3, #2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1ef      	bne.n	800ad56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 80c9 	beq.w	800af12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ad80:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	f003 030c 	and.w	r3, r3, #12
 800ad88:	2b0c      	cmp	r3, #12
 800ad8a:	f000 8083 	beq.w	800ae94 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d15e      	bne.n	800ae54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad96:	4b09      	ldr	r3, [pc, #36]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a08      	ldr	r2, [pc, #32]	; (800adbc <HAL_RCC_OscConfig+0x4b8>)
 800ad9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ada0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada2:	f7fb fdd9 	bl	8006958 <HAL_GetTick>
 800ada6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ada8:	e00c      	b.n	800adc4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adaa:	f7fb fdd5 	bl	8006958 <HAL_GetTick>
 800adae:	4602      	mov	r2, r0
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d905      	bls.n	800adc4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e0ab      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
 800adbc:	40021000 	.word	0x40021000
 800adc0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800adc4:	4b55      	ldr	r3, [pc, #340]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1ec      	bne.n	800adaa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800add0:	4b52      	ldr	r3, [pc, #328]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800add2:	68da      	ldr	r2, [r3, #12]
 800add4:	4b52      	ldr	r3, [pc, #328]	; (800af20 <HAL_RCC_OscConfig+0x61c>)
 800add6:	4013      	ands	r3, r2
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	6a11      	ldr	r1, [r2, #32]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ade0:	3a01      	subs	r2, #1
 800ade2:	0112      	lsls	r2, r2, #4
 800ade4:	4311      	orrs	r1, r2
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800adea:	0212      	lsls	r2, r2, #8
 800adec:	4311      	orrs	r1, r2
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800adf2:	0852      	lsrs	r2, r2, #1
 800adf4:	3a01      	subs	r2, #1
 800adf6:	0552      	lsls	r2, r2, #21
 800adf8:	4311      	orrs	r1, r2
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800adfe:	0852      	lsrs	r2, r2, #1
 800ae00:	3a01      	subs	r2, #1
 800ae02:	0652      	lsls	r2, r2, #25
 800ae04:	4311      	orrs	r1, r2
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae0a:	06d2      	lsls	r2, r2, #27
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	4943      	ldr	r1, [pc, #268]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae10:	4313      	orrs	r3, r2
 800ae12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae14:	4b41      	ldr	r3, [pc, #260]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a40      	ldr	r2, [pc, #256]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae20:	4b3e      	ldr	r3, [pc, #248]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	4a3d      	ldr	r2, [pc, #244]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae2c:	f7fb fd94 	bl	8006958 <HAL_GetTick>
 800ae30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae34:	f7fb fd90 	bl	8006958 <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e066      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae46:	4b35      	ldr	r3, [pc, #212]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0f0      	beq.n	800ae34 <HAL_RCC_OscConfig+0x530>
 800ae52:	e05e      	b.n	800af12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae54:	4b31      	ldr	r3, [pc, #196]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a30      	ldr	r2, [pc, #192]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae60:	f7fb fd7a 	bl	8006958 <HAL_GetTick>
 800ae64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae66:	e008      	b.n	800ae7a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae68:	f7fb fd76 	bl	8006958 <HAL_GetTick>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d901      	bls.n	800ae7a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e04c      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae7a:	4b28      	ldr	r3, [pc, #160]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1f0      	bne.n	800ae68 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ae86:	4b25      	ldr	r3, [pc, #148]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae88:	68da      	ldr	r2, [r3, #12]
 800ae8a:	4924      	ldr	r1, [pc, #144]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800ae8c:	4b25      	ldr	r3, [pc, #148]	; (800af24 <HAL_RCC_OscConfig+0x620>)
 800ae8e:	4013      	ands	r3, r2
 800ae90:	60cb      	str	r3, [r1, #12]
 800ae92:	e03e      	b.n	800af12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d101      	bne.n	800aea0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e039      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800aea0:	4b1e      	ldr	r3, [pc, #120]	; (800af1c <HAL_RCC_OscConfig+0x618>)
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f003 0203 	and.w	r2, r3, #3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d12c      	bne.n	800af0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	3b01      	subs	r3, #1
 800aec0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d123      	bne.n	800af0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d11b      	bne.n	800af0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d113      	bne.n	800af0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef0:	085b      	lsrs	r3, r3, #1
 800aef2:	3b01      	subs	r3, #1
 800aef4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d109      	bne.n	800af0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af04:	085b      	lsrs	r3, r3, #1
 800af06:	3b01      	subs	r3, #1
 800af08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d001      	beq.n	800af12 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	e000      	b.n	800af14 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3720      	adds	r7, #32
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	40021000 	.word	0x40021000
 800af20:	019f800c 	.word	0x019f800c
 800af24:	feeefffc 	.word	0xfeeefffc

0800af28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800af32:	2300      	movs	r3, #0
 800af34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d101      	bne.n	800af40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e11e      	b.n	800b17e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af40:	4b91      	ldr	r3, [pc, #580]	; (800b188 <HAL_RCC_ClockConfig+0x260>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 030f 	and.w	r3, r3, #15
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d910      	bls.n	800af70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af4e:	4b8e      	ldr	r3, [pc, #568]	; (800b188 <HAL_RCC_ClockConfig+0x260>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f023 020f 	bic.w	r2, r3, #15
 800af56:	498c      	ldr	r1, [pc, #560]	; (800b188 <HAL_RCC_ClockConfig+0x260>)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af5e:	4b8a      	ldr	r3, [pc, #552]	; (800b188 <HAL_RCC_ClockConfig+0x260>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 030f 	and.w	r3, r3, #15
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d001      	beq.n	800af70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e106      	b.n	800b17e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d073      	beq.n	800b064 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	2b03      	cmp	r3, #3
 800af82:	d129      	bne.n	800afd8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af84:	4b81      	ldr	r3, [pc, #516]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	e0f4      	b.n	800b17e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800af94:	f000 f99e 	bl	800b2d4 <RCC_GetSysClockFreqFromPLLSource>
 800af98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	4a7c      	ldr	r2, [pc, #496]	; (800b190 <HAL_RCC_ClockConfig+0x268>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d93f      	bls.n	800b022 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800afa2:	4b7a      	ldr	r3, [pc, #488]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d009      	beq.n	800afc2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d033      	beq.n	800b022 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d12f      	bne.n	800b022 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800afc2:	4b72      	ldr	r3, [pc, #456]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afca:	4a70      	ldr	r2, [pc, #448]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800afcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800afd2:	2380      	movs	r3, #128	; 0x80
 800afd4:	617b      	str	r3, [r7, #20]
 800afd6:	e024      	b.n	800b022 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d107      	bne.n	800aff0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afe0:	4b6a      	ldr	r3, [pc, #424]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d109      	bne.n	800b000 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e0c6      	b.n	800b17e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aff0:	4b66      	ldr	r3, [pc, #408]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e0be      	b.n	800b17e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b000:	f000 f8ce 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800b004:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	4a61      	ldr	r2, [pc, #388]	; (800b190 <HAL_RCC_ClockConfig+0x268>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d909      	bls.n	800b022 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b00e:	4b5f      	ldr	r3, [pc, #380]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b016:	4a5d      	ldr	r2, [pc, #372]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b01c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b01e:	2380      	movs	r3, #128	; 0x80
 800b020:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b022:	4b5a      	ldr	r3, [pc, #360]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f023 0203 	bic.w	r2, r3, #3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	4957      	ldr	r1, [pc, #348]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b030:	4313      	orrs	r3, r2
 800b032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b034:	f7fb fc90 	bl	8006958 <HAL_GetTick>
 800b038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b03a:	e00a      	b.n	800b052 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b03c:	f7fb fc8c 	bl	8006958 <HAL_GetTick>
 800b040:	4602      	mov	r2, r0
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	f241 3288 	movw	r2, #5000	; 0x1388
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d901      	bls.n	800b052 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e095      	b.n	800b17e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b052:	4b4e      	ldr	r3, [pc, #312]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	f003 020c 	and.w	r2, r3, #12
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	429a      	cmp	r2, r3
 800b062:	d1eb      	bne.n	800b03c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0302 	and.w	r3, r3, #2
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d023      	beq.n	800b0b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0304 	and.w	r3, r3, #4
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d005      	beq.n	800b088 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b07c:	4b43      	ldr	r3, [pc, #268]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	4a42      	ldr	r2, [pc, #264]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b082:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b086:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0308 	and.w	r3, r3, #8
 800b090:	2b00      	cmp	r3, #0
 800b092:	d007      	beq.n	800b0a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b094:	4b3d      	ldr	r3, [pc, #244]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b09c:	4a3b      	ldr	r2, [pc, #236]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b09e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b0a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0a4:	4b39      	ldr	r3, [pc, #228]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	4936      	ldr	r1, [pc, #216]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	608b      	str	r3, [r1, #8]
 800b0b6:	e008      	b.n	800b0ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b80      	cmp	r3, #128	; 0x80
 800b0bc:	d105      	bne.n	800b0ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b0be:	4b33      	ldr	r3, [pc, #204]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	4a32      	ldr	r2, [pc, #200]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b0c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0ca:	4b2f      	ldr	r3, [pc, #188]	; (800b188 <HAL_RCC_ClockConfig+0x260>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 030f 	and.w	r3, r3, #15
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d21d      	bcs.n	800b114 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0d8:	4b2b      	ldr	r3, [pc, #172]	; (800b188 <HAL_RCC_ClockConfig+0x260>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f023 020f 	bic.w	r2, r3, #15
 800b0e0:	4929      	ldr	r1, [pc, #164]	; (800b188 <HAL_RCC_ClockConfig+0x260>)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b0e8:	f7fb fc36 	bl	8006958 <HAL_GetTick>
 800b0ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0ee:	e00a      	b.n	800b106 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0f0:	f7fb fc32 	bl	8006958 <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d901      	bls.n	800b106 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e03b      	b.n	800b17e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b106:	4b20      	ldr	r3, [pc, #128]	; (800b188 <HAL_RCC_ClockConfig+0x260>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 030f 	and.w	r3, r3, #15
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d1ed      	bne.n	800b0f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d008      	beq.n	800b132 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b120:	4b1a      	ldr	r3, [pc, #104]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	4917      	ldr	r1, [pc, #92]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b12e:	4313      	orrs	r3, r2
 800b130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 0308 	and.w	r3, r3, #8
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d009      	beq.n	800b152 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b13e:	4b13      	ldr	r3, [pc, #76]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	00db      	lsls	r3, r3, #3
 800b14c:	490f      	ldr	r1, [pc, #60]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b152:	f000 f825 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800b156:	4602      	mov	r2, r0
 800b158:	4b0c      	ldr	r3, [pc, #48]	; (800b18c <HAL_RCC_ClockConfig+0x264>)
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	091b      	lsrs	r3, r3, #4
 800b15e:	f003 030f 	and.w	r3, r3, #15
 800b162:	490c      	ldr	r1, [pc, #48]	; (800b194 <HAL_RCC_ClockConfig+0x26c>)
 800b164:	5ccb      	ldrb	r3, [r1, r3]
 800b166:	f003 031f 	and.w	r3, r3, #31
 800b16a:	fa22 f303 	lsr.w	r3, r2, r3
 800b16e:	4a0a      	ldr	r2, [pc, #40]	; (800b198 <HAL_RCC_ClockConfig+0x270>)
 800b170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b172:	4b0a      	ldr	r3, [pc, #40]	; (800b19c <HAL_RCC_ClockConfig+0x274>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4618      	mov	r0, r3
 800b178:	f7fb fba2 	bl	80068c0 <HAL_InitTick>
 800b17c:	4603      	mov	r3, r0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	40022000 	.word	0x40022000
 800b18c:	40021000 	.word	0x40021000
 800b190:	04c4b400 	.word	0x04c4b400
 800b194:	08015f84 	.word	0x08015f84
 800b198:	200001e0 	.word	0x200001e0
 800b19c:	200001f4 	.word	0x200001f4

0800b1a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b087      	sub	sp, #28
 800b1a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b1a6:	4b2c      	ldr	r3, [pc, #176]	; (800b258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	f003 030c 	and.w	r3, r3, #12
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	d102      	bne.n	800b1b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b1b2:	4b2a      	ldr	r3, [pc, #168]	; (800b25c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b1b4:	613b      	str	r3, [r7, #16]
 800b1b6:	e047      	b.n	800b248 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b1b8:	4b27      	ldr	r3, [pc, #156]	; (800b258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	f003 030c 	and.w	r3, r3, #12
 800b1c0:	2b08      	cmp	r3, #8
 800b1c2:	d102      	bne.n	800b1ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b1c4:	4b26      	ldr	r3, [pc, #152]	; (800b260 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b1c6:	613b      	str	r3, [r7, #16]
 800b1c8:	e03e      	b.n	800b248 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b1ca:	4b23      	ldr	r3, [pc, #140]	; (800b258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f003 030c 	and.w	r3, r3, #12
 800b1d2:	2b0c      	cmp	r3, #12
 800b1d4:	d136      	bne.n	800b244 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b1d6:	4b20      	ldr	r3, [pc, #128]	; (800b258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	f003 0303 	and.w	r3, r3, #3
 800b1de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b1e0:	4b1d      	ldr	r3, [pc, #116]	; (800b258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	091b      	lsrs	r3, r3, #4
 800b1e6:	f003 030f 	and.w	r3, r3, #15
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2b03      	cmp	r3, #3
 800b1f2:	d10c      	bne.n	800b20e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b1f4:	4a1a      	ldr	r2, [pc, #104]	; (800b260 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1fc:	4a16      	ldr	r2, [pc, #88]	; (800b258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1fe:	68d2      	ldr	r2, [r2, #12]
 800b200:	0a12      	lsrs	r2, r2, #8
 800b202:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b206:	fb02 f303 	mul.w	r3, r2, r3
 800b20a:	617b      	str	r3, [r7, #20]
      break;
 800b20c:	e00c      	b.n	800b228 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b20e:	4a13      	ldr	r2, [pc, #76]	; (800b25c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	fbb2 f3f3 	udiv	r3, r2, r3
 800b216:	4a10      	ldr	r2, [pc, #64]	; (800b258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b218:	68d2      	ldr	r2, [r2, #12]
 800b21a:	0a12      	lsrs	r2, r2, #8
 800b21c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b220:	fb02 f303 	mul.w	r3, r2, r3
 800b224:	617b      	str	r3, [r7, #20]
      break;
 800b226:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b228:	4b0b      	ldr	r3, [pc, #44]	; (800b258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	0e5b      	lsrs	r3, r3, #25
 800b22e:	f003 0303 	and.w	r3, r3, #3
 800b232:	3301      	adds	r3, #1
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	e001      	b.n	800b248 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b244:	2300      	movs	r3, #0
 800b246:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b248:	693b      	ldr	r3, [r7, #16]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	371c      	adds	r7, #28
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	40021000 	.word	0x40021000
 800b25c:	00f42400 	.word	0x00f42400
 800b260:	007a1200 	.word	0x007a1200

0800b264 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b268:	4b03      	ldr	r3, [pc, #12]	; (800b278 <HAL_RCC_GetHCLKFreq+0x14>)
 800b26a:	681b      	ldr	r3, [r3, #0]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	200001e0 	.word	0x200001e0

0800b27c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b280:	f7ff fff0 	bl	800b264 <HAL_RCC_GetHCLKFreq>
 800b284:	4602      	mov	r2, r0
 800b286:	4b06      	ldr	r3, [pc, #24]	; (800b2a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	0a1b      	lsrs	r3, r3, #8
 800b28c:	f003 0307 	and.w	r3, r3, #7
 800b290:	4904      	ldr	r1, [pc, #16]	; (800b2a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b292:	5ccb      	ldrb	r3, [r1, r3]
 800b294:	f003 031f 	and.w	r3, r3, #31
 800b298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	40021000 	.word	0x40021000
 800b2a4:	08015f94 	.word	0x08015f94

0800b2a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b2ac:	f7ff ffda 	bl	800b264 <HAL_RCC_GetHCLKFreq>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	4b06      	ldr	r3, [pc, #24]	; (800b2cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	0adb      	lsrs	r3, r3, #11
 800b2b8:	f003 0307 	and.w	r3, r3, #7
 800b2bc:	4904      	ldr	r1, [pc, #16]	; (800b2d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2be:	5ccb      	ldrb	r3, [r1, r3]
 800b2c0:	f003 031f 	and.w	r3, r3, #31
 800b2c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	40021000 	.word	0x40021000
 800b2d0:	08015f94 	.word	0x08015f94

0800b2d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b2da:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	f003 0303 	and.w	r3, r3, #3
 800b2e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b2e4:	4b1b      	ldr	r3, [pc, #108]	; (800b354 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	091b      	lsrs	r3, r3, #4
 800b2ea:	f003 030f 	and.w	r3, r3, #15
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d10c      	bne.n	800b312 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b2f8:	4a17      	ldr	r2, [pc, #92]	; (800b358 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b300:	4a14      	ldr	r2, [pc, #80]	; (800b354 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b302:	68d2      	ldr	r2, [r2, #12]
 800b304:	0a12      	lsrs	r2, r2, #8
 800b306:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b30a:	fb02 f303 	mul.w	r3, r2, r3
 800b30e:	617b      	str	r3, [r7, #20]
    break;
 800b310:	e00c      	b.n	800b32c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b312:	4a12      	ldr	r2, [pc, #72]	; (800b35c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	fbb2 f3f3 	udiv	r3, r2, r3
 800b31a:	4a0e      	ldr	r2, [pc, #56]	; (800b354 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b31c:	68d2      	ldr	r2, [r2, #12]
 800b31e:	0a12      	lsrs	r2, r2, #8
 800b320:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b324:	fb02 f303 	mul.w	r3, r2, r3
 800b328:	617b      	str	r3, [r7, #20]
    break;
 800b32a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b32c:	4b09      	ldr	r3, [pc, #36]	; (800b354 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	0e5b      	lsrs	r3, r3, #25
 800b332:	f003 0303 	and.w	r3, r3, #3
 800b336:	3301      	adds	r3, #1
 800b338:	005b      	lsls	r3, r3, #1
 800b33a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	fbb2 f3f3 	udiv	r3, r2, r3
 800b344:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b346:	687b      	ldr	r3, [r7, #4]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	371c      	adds	r7, #28
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	40021000 	.word	0x40021000
 800b358:	007a1200 	.word	0x007a1200
 800b35c:	00f42400 	.word	0x00f42400

0800b360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b368:	2300      	movs	r3, #0
 800b36a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b36c:	2300      	movs	r3, #0
 800b36e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f000 8098 	beq.w	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b37e:	2300      	movs	r3, #0
 800b380:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b382:	4b43      	ldr	r3, [pc, #268]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10d      	bne.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b38e:	4b40      	ldr	r3, [pc, #256]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b392:	4a3f      	ldr	r2, [pc, #252]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b398:	6593      	str	r3, [r2, #88]	; 0x58
 800b39a:	4b3d      	ldr	r3, [pc, #244]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b39c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3a2:	60bb      	str	r3, [r7, #8]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3aa:	4b3a      	ldr	r3, [pc, #232]	; (800b494 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a39      	ldr	r2, [pc, #228]	; (800b494 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b3b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3b6:	f7fb facf 	bl	8006958 <HAL_GetTick>
 800b3ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3bc:	e009      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3be:	f7fb facb 	bl	8006958 <HAL_GetTick>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d902      	bls.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	74fb      	strb	r3, [r7, #19]
        break;
 800b3d0:	e005      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3d2:	4b30      	ldr	r3, [pc, #192]	; (800b494 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d0ef      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b3de:	7cfb      	ldrb	r3, [r7, #19]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d159      	bne.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b3e4:	4b2a      	ldr	r3, [pc, #168]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d01e      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d019      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b400:	4b23      	ldr	r3, [pc, #140]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b40a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b40c:	4b20      	ldr	r3, [pc, #128]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b412:	4a1f      	ldr	r2, [pc, #124]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b41c:	4b1c      	ldr	r3, [pc, #112]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b422:	4a1b      	ldr	r2, [pc, #108]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b42c:	4a18      	ldr	r2, [pc, #96]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d016      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b43e:	f7fb fa8b 	bl	8006958 <HAL_GetTick>
 800b442:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b444:	e00b      	b.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b446:	f7fb fa87 	bl	8006958 <HAL_GetTick>
 800b44a:	4602      	mov	r2, r0
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	f241 3288 	movw	r2, #5000	; 0x1388
 800b454:	4293      	cmp	r3, r2
 800b456:	d902      	bls.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b458:	2303      	movs	r3, #3
 800b45a:	74fb      	strb	r3, [r7, #19]
            break;
 800b45c:	e006      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b45e:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b464:	f003 0302 	and.w	r3, r3, #2
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d0ec      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b46c:	7cfb      	ldrb	r3, [r7, #19]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10b      	bne.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b472:	4b07      	ldr	r3, [pc, #28]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b480:	4903      	ldr	r1, [pc, #12]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b482:	4313      	orrs	r3, r2
 800b484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b488:	e008      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b48a:	7cfb      	ldrb	r3, [r7, #19]
 800b48c:	74bb      	strb	r3, [r7, #18]
 800b48e:	e005      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b490:	40021000 	.word	0x40021000
 800b494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b498:	7cfb      	ldrb	r3, [r7, #19]
 800b49a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b49c:	7c7b      	ldrb	r3, [r7, #17]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d105      	bne.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4a2:	4ba6      	ldr	r3, [pc, #664]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a6:	4aa5      	ldr	r2, [pc, #660]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00a      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b4ba:	4ba0      	ldr	r3, [pc, #640]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4c0:	f023 0203 	bic.w	r2, r3, #3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	499c      	ldr	r1, [pc, #624]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00a      	beq.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b4dc:	4b97      	ldr	r3, [pc, #604]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e2:	f023 020c 	bic.w	r2, r3, #12
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	4994      	ldr	r1, [pc, #592]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0304 	and.w	r3, r3, #4
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00a      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b4fe:	4b8f      	ldr	r3, [pc, #572]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b504:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	498b      	ldr	r1, [pc, #556]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b50e:	4313      	orrs	r3, r2
 800b510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0308 	and.w	r3, r3, #8
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00a      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b520:	4b86      	ldr	r3, [pc, #536]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	4983      	ldr	r1, [pc, #524]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b530:	4313      	orrs	r3, r2
 800b532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0320 	and.w	r3, r3, #32
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00a      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b542:	4b7e      	ldr	r3, [pc, #504]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b548:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	497a      	ldr	r1, [pc, #488]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b552:	4313      	orrs	r3, r2
 800b554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00a      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b564:	4b75      	ldr	r3, [pc, #468]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b56a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	4972      	ldr	r1, [pc, #456]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b574:	4313      	orrs	r3, r2
 800b576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00a      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b586:	4b6d      	ldr	r3, [pc, #436]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b58c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	69db      	ldr	r3, [r3, #28]
 800b594:	4969      	ldr	r1, [pc, #420]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b596:	4313      	orrs	r3, r2
 800b598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00a      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b5a8:	4b64      	ldr	r3, [pc, #400]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	4961      	ldr	r1, [pc, #388]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b5ca:	4b5c      	ldr	r3, [pc, #368]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	4958      	ldr	r1, [pc, #352]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d015      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b5ec:	4b53      	ldr	r3, [pc, #332]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fa:	4950      	ldr	r1, [pc, #320]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b60a:	d105      	bne.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b60c:	4b4b      	ldr	r3, [pc, #300]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	4a4a      	ldr	r2, [pc, #296]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b616:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b620:	2b00      	cmp	r3, #0
 800b622:	d015      	beq.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b624:	4b45      	ldr	r3, [pc, #276]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b62a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b632:	4942      	ldr	r1, [pc, #264]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b634:	4313      	orrs	r3, r2
 800b636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b642:	d105      	bne.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b644:	4b3d      	ldr	r3, [pc, #244]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	4a3c      	ldr	r2, [pc, #240]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b64a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b64e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d015      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b65c:	4b37      	ldr	r3, [pc, #220]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b662:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66a:	4934      	ldr	r1, [pc, #208]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b66c:	4313      	orrs	r3, r2
 800b66e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b676:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b67a:	d105      	bne.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b67c:	4b2f      	ldr	r3, [pc, #188]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	4a2e      	ldr	r2, [pc, #184]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b686:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d015      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b694:	4b29      	ldr	r3, [pc, #164]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b69a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a2:	4926      	ldr	r1, [pc, #152]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6b2:	d105      	bne.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b6b4:	4b21      	ldr	r3, [pc, #132]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	4a20      	ldr	r2, [pc, #128]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d015      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b6cc:	4b1b      	ldr	r3, [pc, #108]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6da:	4918      	ldr	r1, [pc, #96]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6ea:	d105      	bne.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b6ec:	4b13      	ldr	r3, [pc, #76]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	4a12      	ldr	r2, [pc, #72]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d015      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b704:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b70a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b712:	490a      	ldr	r1, [pc, #40]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b714:	4313      	orrs	r3, r2
 800b716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b722:	d105      	bne.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	4a04      	ldr	r2, [pc, #16]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b72a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b72e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b730:	7cbb      	ldrb	r3, [r7, #18]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	40021000 	.word	0x40021000

0800b740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	e09d      	b.n	800b88e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	2b00      	cmp	r3, #0
 800b758:	d108      	bne.n	800b76c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b762:	d009      	beq.n	800b778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	61da      	str	r2, [r3, #28]
 800b76a:	e005      	b.n	800b778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d106      	bne.n	800b798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7fa f836 	bl	8005804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7b8:	d902      	bls.n	800b7c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60fb      	str	r3, [r7, #12]
 800b7be:	e002      	b.n	800b7c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b7c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b7ce:	d007      	beq.n	800b7e0 <HAL_SPI_Init+0xa0>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7d8:	d002      	beq.n	800b7e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b7f0:	431a      	orrs	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	f003 0302 	and.w	r3, r3, #2
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	431a      	orrs	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b80e:	431a      	orrs	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b818:	431a      	orrs	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b822:	ea42 0103 	orr.w	r1, r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	430a      	orrs	r2, r1
 800b834:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	0c1b      	lsrs	r3, r3, #16
 800b83c:	f003 0204 	and.w	r2, r3, #4
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b844:	f003 0310 	and.w	r3, r3, #16
 800b848:	431a      	orrs	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84e:	f003 0308 	and.w	r3, r3, #8
 800b852:	431a      	orrs	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b85c:	ea42 0103 	orr.w	r1, r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	430a      	orrs	r2, r1
 800b86c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69da      	ldr	r2, [r3, #28]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b87c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b088      	sub	sp, #32
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	603b      	str	r3, [r7, #0]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d101      	bne.n	800b8b8 <HAL_SPI_Transmit+0x22>
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	e15f      	b.n	800bb78 <HAL_SPI_Transmit+0x2e2>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8c0:	f7fb f84a 	bl	8006958 <HAL_GetTick>
 800b8c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b8c6:	88fb      	ldrh	r3, [r7, #6]
 800b8c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d002      	beq.n	800b8dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b8da:	e148      	b.n	800bb6e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d002      	beq.n	800b8e8 <HAL_SPI_Transmit+0x52>
 800b8e2:	88fb      	ldrh	r3, [r7, #6]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d102      	bne.n	800b8ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b8ec:	e13f      	b.n	800bb6e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2203      	movs	r2, #3
 800b8f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	88fa      	ldrh	r2, [r7, #6]
 800b906:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	88fa      	ldrh	r2, [r7, #6]
 800b90c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2200      	movs	r2, #0
 800b928:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b938:	d10f      	bne.n	800b95a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b948:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b958:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b964:	2b40      	cmp	r3, #64	; 0x40
 800b966:	d007      	beq.n	800b978 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b980:	d94f      	bls.n	800ba22 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d002      	beq.n	800b990 <HAL_SPI_Transmit+0xfa>
 800b98a:	8afb      	ldrh	r3, [r7, #22]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d142      	bne.n	800ba16 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	881a      	ldrh	r2, [r3, #0]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a0:	1c9a      	adds	r2, r3, #2
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b9b4:	e02f      	b.n	800ba16 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	f003 0302 	and.w	r3, r3, #2
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	d112      	bne.n	800b9ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c8:	881a      	ldrh	r2, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d4:	1c9a      	adds	r2, r3, #2
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b9e8:	e015      	b.n	800ba16 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9ea:	f7fa ffb5 	bl	8006958 <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	683a      	ldr	r2, [r7, #0]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d803      	bhi.n	800ba02 <HAL_SPI_Transmit+0x16c>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba00:	d102      	bne.n	800ba08 <HAL_SPI_Transmit+0x172>
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ba14:	e0ab      	b.n	800bb6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1ca      	bne.n	800b9b6 <HAL_SPI_Transmit+0x120>
 800ba20:	e080      	b.n	800bb24 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d002      	beq.n	800ba30 <HAL_SPI_Transmit+0x19a>
 800ba2a:	8afb      	ldrh	r3, [r7, #22]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d174      	bne.n	800bb1a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d912      	bls.n	800ba60 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3e:	881a      	ldrh	r2, [r3, #0]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4a:	1c9a      	adds	r2, r3, #2
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	3b02      	subs	r3, #2
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba5e:	e05c      	b.n	800bb1a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	330c      	adds	r3, #12
 800ba6a:	7812      	ldrb	r2, [r2, #0]
 800ba6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ba86:	e048      	b.n	800bb1a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f003 0302 	and.w	r3, r3, #2
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d12b      	bne.n	800baee <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d912      	bls.n	800bac6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa4:	881a      	ldrh	r2, [r3, #0]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab0:	1c9a      	adds	r2, r3, #2
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baba:	b29b      	uxth	r3, r3
 800babc:	3b02      	subs	r3, #2
 800babe:	b29a      	uxth	r2, r3
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bac4:	e029      	b.n	800bb1a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	330c      	adds	r3, #12
 800bad0:	7812      	ldrb	r2, [r2, #0]
 800bad2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad8:	1c5a      	adds	r2, r3, #1
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	3b01      	subs	r3, #1
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800baec:	e015      	b.n	800bb1a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baee:	f7fa ff33 	bl	8006958 <HAL_GetTick>
 800baf2:	4602      	mov	r2, r0
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d803      	bhi.n	800bb06 <HAL_SPI_Transmit+0x270>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb04:	d102      	bne.n	800bb0c <HAL_SPI_Transmit+0x276>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d106      	bne.n	800bb1a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800bb18:	e029      	b.n	800bb6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1b1      	bne.n	800ba88 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb24:	69ba      	ldr	r2, [r7, #24]
 800bb26:	6839      	ldr	r1, [r7, #0]
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f000 fad7 	bl	800c0dc <SPI_EndRxTxTransaction>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2220      	movs	r2, #32
 800bb38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10a      	bne.n	800bb58 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb42:	2300      	movs	r3, #0
 800bb44:	613b      	str	r3, [r7, #16]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	613b      	str	r3, [r7, #16]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	613b      	str	r3, [r7, #16]
 800bb56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	77fb      	strb	r3, [r7, #31]
 800bb64:	e003      	b.n	800bb6e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bb76:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3720      	adds	r7, #32
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d101      	bne.n	800bba0 <HAL_SPI_Transmit_DMA+0x20>
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	e0d4      	b.n	800bd4a <HAL_SPI_Transmit_DMA+0x1ca>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d002      	beq.n	800bbba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbb8:	e0c2      	b.n	800bd40 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <HAL_SPI_Transmit_DMA+0x46>
 800bbc0:	88fb      	ldrh	r3, [r7, #6]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d102      	bne.n	800bbcc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbca:	e0b9      	b.n	800bd40 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2203      	movs	r2, #3
 800bbd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	88fa      	ldrh	r2, [r7, #6]
 800bbe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	88fa      	ldrh	r2, [r7, #6]
 800bbea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc16:	d10f      	bne.n	800bc38 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3c:	4a45      	ldr	r2, [pc, #276]	; (800bd54 <HAL_SPI_Transmit_DMA+0x1d4>)
 800bc3e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc44:	4a44      	ldr	r2, [pc, #272]	; (800bd58 <HAL_SPI_Transmit_DMA+0x1d8>)
 800bc46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4c:	4a43      	ldr	r2, [pc, #268]	; (800bd5c <HAL_SPI_Transmit_DMA+0x1dc>)
 800bc4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc54:	2200      	movs	r2, #0
 800bc56:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	685a      	ldr	r2, [r3, #4]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc66:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc70:	d82d      	bhi.n	800bcce <HAL_SPI_Transmit_DMA+0x14e>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc7c:	d127      	bne.n	800bcce <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	f003 0301 	and.w	r3, r3, #1
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10f      	bne.n	800bcac <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc9a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	085b      	lsrs	r3, r3, #1
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bcaa:	e010      	b.n	800bcce <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	085b      	lsrs	r3, r3, #1
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	330c      	adds	r3, #12
 800bcde:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bce4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bce6:	f7fd fd49 	bl	800977c <HAL_DMA_Start_IT>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d008      	beq.n	800bd02 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcf4:	f043 0210 	orr.w	r2, r3, #16
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	75fb      	strb	r3, [r7, #23]

    goto error;
 800bd00:	e01e      	b.n	800bd40 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0c:	2b40      	cmp	r3, #64	; 0x40
 800bd0e:	d007      	beq.n	800bd20 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd1e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f042 0220 	orr.w	r2, r2, #32
 800bd2e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f042 0202 	orr.w	r2, r2, #2
 800bd3e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bd48:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3718      	adds	r7, #24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	0800be43 	.word	0x0800be43
 800bd58:	0800bd9d 	.word	0x0800bd9d
 800bd5c:	0800be5f 	.word	0x0800be5f

0800bd60 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdaa:	f7fa fdd5 	bl	8006958 <HAL_GetTick>
 800bdae:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f003 0320 	and.w	r3, r3, #32
 800bdba:	2b20      	cmp	r3, #32
 800bdbc:	d03b      	beq.n	800be36 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f022 0220 	bic.w	r2, r2, #32
 800bdcc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f022 0202 	bic.w	r2, r2, #2
 800bddc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	2164      	movs	r1, #100	; 0x64
 800bde2:	6978      	ldr	r0, [r7, #20]
 800bde4:	f000 f97a 	bl	800c0dc <SPI_EndRxTxTransaction>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d005      	beq.n	800bdfa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdf2:	f043 0220 	orr.w	r2, r3, #32
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10a      	bne.n	800be18 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be02:	2300      	movs	r3, #0
 800be04:	60fb      	str	r3, [r7, #12]
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	60fb      	str	r3, [r7, #12]
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	2200      	movs	r2, #0
 800be1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	2201      	movs	r2, #1
 800be22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800be2e:	6978      	ldr	r0, [r7, #20]
 800be30:	f7ff ffaa 	bl	800bd88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800be34:	e002      	b.n	800be3c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800be36:	6978      	ldr	r0, [r7, #20]
 800be38:	f7ff ff92 	bl	800bd60 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b084      	sub	sp, #16
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f7ff ff8f 	bl	800bd74 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be56:	bf00      	nop
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b084      	sub	sp, #16
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be6a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f022 0203 	bic.w	r2, r2, #3
 800be7a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be80:	f043 0210 	orr.w	r2, r3, #16
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff ff79 	bl	800bd88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be96:	bf00      	nop
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
	...

0800bea0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	603b      	str	r3, [r7, #0]
 800beac:	4613      	mov	r3, r2
 800beae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800beb0:	f7fa fd52 	bl	8006958 <HAL_GetTick>
 800beb4:	4602      	mov	r2, r0
 800beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb8:	1a9b      	subs	r3, r3, r2
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4413      	add	r3, r2
 800bebe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bec0:	f7fa fd4a 	bl	8006958 <HAL_GetTick>
 800bec4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bec6:	4b39      	ldr	r3, [pc, #228]	; (800bfac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	015b      	lsls	r3, r3, #5
 800becc:	0d1b      	lsrs	r3, r3, #20
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	fb02 f303 	mul.w	r3, r2, r3
 800bed4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bed6:	e054      	b.n	800bf82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bede:	d050      	beq.n	800bf82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bee0:	f7fa fd3a 	bl	8006958 <HAL_GetTick>
 800bee4:	4602      	mov	r2, r0
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	69fa      	ldr	r2, [r7, #28]
 800beec:	429a      	cmp	r2, r3
 800beee:	d902      	bls.n	800bef6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d13d      	bne.n	800bf72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf0e:	d111      	bne.n	800bf34 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf18:	d004      	beq.n	800bf24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf22:	d107      	bne.n	800bf34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf3c:	d10f      	bne.n	800bf5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	e017      	b.n	800bfa2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	bf0c      	ite	eq
 800bf92:	2301      	moveq	r3, #1
 800bf94:	2300      	movne	r3, #0
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	461a      	mov	r2, r3
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d19b      	bne.n	800bed8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3720      	adds	r7, #32
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	200001e0 	.word	0x200001e0

0800bfb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08a      	sub	sp, #40	; 0x28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bfc2:	f7fa fcc9 	bl	8006958 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	1a9b      	subs	r3, r3, r2
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	4413      	add	r3, r2
 800bfd0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bfd2:	f7fa fcc1 	bl	8006958 <HAL_GetTick>
 800bfd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	330c      	adds	r3, #12
 800bfde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bfe0:	4b3d      	ldr	r3, [pc, #244]	; (800c0d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	00da      	lsls	r2, r3, #3
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	0d1b      	lsrs	r3, r3, #20
 800bff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff2:	fb02 f303 	mul.w	r3, r2, r3
 800bff6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bff8:	e060      	b.n	800c0bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c000:	d107      	bne.n	800c012 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d104      	bne.n	800c012 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c010:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c018:	d050      	beq.n	800c0bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c01a:	f7fa fc9d 	bl	8006958 <HAL_GetTick>
 800c01e:	4602      	mov	r2, r0
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c026:	429a      	cmp	r2, r3
 800c028:	d902      	bls.n	800c030 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d13d      	bne.n	800c0ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c03e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c048:	d111      	bne.n	800c06e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c052:	d004      	beq.n	800c05e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c05c:	d107      	bne.n	800c06e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c06c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c076:	d10f      	bne.n	800c098 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c096:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e010      	b.n	800c0ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	689a      	ldr	r2, [r3, #8]
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d196      	bne.n	800bffa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3728      	adds	r7, #40	; 0x28
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	200001e0 	.word	0x200001e0

0800c0dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af02      	add	r7, sp, #8
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f7ff ff5b 	bl	800bfb0 <SPI_WaitFifoStateUntilTimeout>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d007      	beq.n	800c110 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c104:	f043 0220 	orr.w	r2, r3, #32
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c10c:	2303      	movs	r3, #3
 800c10e:	e027      	b.n	800c160 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2200      	movs	r2, #0
 800c118:	2180      	movs	r1, #128	; 0x80
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7ff fec0 	bl	800bea0 <SPI_WaitFlagStateUntilTimeout>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d007      	beq.n	800c136 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c12a:	f043 0220 	orr.w	r2, r3, #32
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c132:	2303      	movs	r3, #3
 800c134:	e014      	b.n	800c160 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	9300      	str	r3, [sp, #0]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f7ff ff34 	bl	800bfb0 <SPI_WaitFifoStateUntilTimeout>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d007      	beq.n	800c15e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c152:	f043 0220 	orr.w	r2, r3, #32
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e000      	b.n	800c160 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e049      	b.n	800c20e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d106      	bne.n	800c194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7f9 fc5a 	bl	8005a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2202      	movs	r2, #2
 800c198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	4610      	mov	r0, r2
 800c1a8:	f000 ff72 	bl	800d090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d001      	beq.n	800c230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e04a      	b.n	800c2c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2202      	movs	r2, #2
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68da      	ldr	r2, [r3, #12]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f042 0201 	orr.w	r2, r2, #1
 800c246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a21      	ldr	r2, [pc, #132]	; (800c2d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d018      	beq.n	800c284 <HAL_TIM_Base_Start_IT+0x6c>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c25a:	d013      	beq.n	800c284 <HAL_TIM_Base_Start_IT+0x6c>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a1d      	ldr	r2, [pc, #116]	; (800c2d8 <HAL_TIM_Base_Start_IT+0xc0>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d00e      	beq.n	800c284 <HAL_TIM_Base_Start_IT+0x6c>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a1c      	ldr	r2, [pc, #112]	; (800c2dc <HAL_TIM_Base_Start_IT+0xc4>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d009      	beq.n	800c284 <HAL_TIM_Base_Start_IT+0x6c>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a1a      	ldr	r2, [pc, #104]	; (800c2e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d004      	beq.n	800c284 <HAL_TIM_Base_Start_IT+0x6c>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a19      	ldr	r2, [pc, #100]	; (800c2e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d115      	bne.n	800c2b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	689a      	ldr	r2, [r3, #8]
 800c28a:	4b17      	ldr	r3, [pc, #92]	; (800c2e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c28c:	4013      	ands	r3, r2
 800c28e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2b06      	cmp	r3, #6
 800c294:	d015      	beq.n	800c2c2 <HAL_TIM_Base_Start_IT+0xaa>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c29c:	d011      	beq.n	800c2c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f042 0201 	orr.w	r2, r2, #1
 800c2ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2ae:	e008      	b.n	800c2c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f042 0201 	orr.w	r2, r2, #1
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	e000      	b.n	800c2c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3714      	adds	r7, #20
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	40012c00 	.word	0x40012c00
 800c2d8:	40000400 	.word	0x40000400
 800c2dc:	40000800 	.word	0x40000800
 800c2e0:	40013400 	.word	0x40013400
 800c2e4:	40014000 	.word	0x40014000
 800c2e8:	00010007 	.word	0x00010007

0800c2ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f022 0201 	bic.w	r2, r2, #1
 800c302:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6a1a      	ldr	r2, [r3, #32]
 800c30a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c30e:	4013      	ands	r3, r2
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10f      	bne.n	800c334 <HAL_TIM_Base_Stop_IT+0x48>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	6a1a      	ldr	r2, [r3, #32]
 800c31a:	f244 4344 	movw	r3, #17476	; 0x4444
 800c31e:	4013      	ands	r3, r2
 800c320:	2b00      	cmp	r3, #0
 800c322:	d107      	bne.n	800c334 <HAL_TIM_Base_Stop_IT+0x48>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f022 0201 	bic.w	r2, r2, #1
 800c332:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b082      	sub	sp, #8
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	e049      	b.n	800c3f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c362:	b2db      	uxtb	r3, r3
 800c364:	2b00      	cmp	r3, #0
 800c366:	d106      	bne.n	800c376 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7f9 fab9 	bl	80058e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2202      	movs	r2, #2
 800c37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	3304      	adds	r3, #4
 800c386:	4619      	mov	r1, r3
 800c388:	4610      	mov	r0, r2
 800c38a:	f000 fe81 	bl	800d090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d109      	bne.n	800c420 <HAL_TIM_PWM_Start_IT+0x28>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c412:	b2db      	uxtb	r3, r3
 800c414:	2b01      	cmp	r3, #1
 800c416:	bf14      	ite	ne
 800c418:	2301      	movne	r3, #1
 800c41a:	2300      	moveq	r3, #0
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	e03c      	b.n	800c49a <HAL_TIM_PWM_Start_IT+0xa2>
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b04      	cmp	r3, #4
 800c424:	d109      	bne.n	800c43a <HAL_TIM_PWM_Start_IT+0x42>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b01      	cmp	r3, #1
 800c430:	bf14      	ite	ne
 800c432:	2301      	movne	r3, #1
 800c434:	2300      	moveq	r3, #0
 800c436:	b2db      	uxtb	r3, r3
 800c438:	e02f      	b.n	800c49a <HAL_TIM_PWM_Start_IT+0xa2>
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b08      	cmp	r3, #8
 800c43e:	d109      	bne.n	800c454 <HAL_TIM_PWM_Start_IT+0x5c>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b01      	cmp	r3, #1
 800c44a:	bf14      	ite	ne
 800c44c:	2301      	movne	r3, #1
 800c44e:	2300      	moveq	r3, #0
 800c450:	b2db      	uxtb	r3, r3
 800c452:	e022      	b.n	800c49a <HAL_TIM_PWM_Start_IT+0xa2>
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2b0c      	cmp	r3, #12
 800c458:	d109      	bne.n	800c46e <HAL_TIM_PWM_Start_IT+0x76>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2b01      	cmp	r3, #1
 800c464:	bf14      	ite	ne
 800c466:	2301      	movne	r3, #1
 800c468:	2300      	moveq	r3, #0
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	e015      	b.n	800c49a <HAL_TIM_PWM_Start_IT+0xa2>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b10      	cmp	r3, #16
 800c472:	d109      	bne.n	800c488 <HAL_TIM_PWM_Start_IT+0x90>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	bf14      	ite	ne
 800c480:	2301      	movne	r3, #1
 800c482:	2300      	moveq	r3, #0
 800c484:	b2db      	uxtb	r3, r3
 800c486:	e008      	b.n	800c49a <HAL_TIM_PWM_Start_IT+0xa2>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b01      	cmp	r3, #1
 800c492:	bf14      	ite	ne
 800c494:	2301      	movne	r3, #1
 800c496:	2300      	moveq	r3, #0
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d001      	beq.n	800c4a2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e0e2      	b.n	800c668 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d104      	bne.n	800c4b2 <HAL_TIM_PWM_Start_IT+0xba>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4b0:	e023      	b.n	800c4fa <HAL_TIM_PWM_Start_IT+0x102>
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	d104      	bne.n	800c4c2 <HAL_TIM_PWM_Start_IT+0xca>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2202      	movs	r2, #2
 800c4bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4c0:	e01b      	b.n	800c4fa <HAL_TIM_PWM_Start_IT+0x102>
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b08      	cmp	r3, #8
 800c4c6:	d104      	bne.n	800c4d2 <HAL_TIM_PWM_Start_IT+0xda>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4d0:	e013      	b.n	800c4fa <HAL_TIM_PWM_Start_IT+0x102>
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	2b0c      	cmp	r3, #12
 800c4d6:	d104      	bne.n	800c4e2 <HAL_TIM_PWM_Start_IT+0xea>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2202      	movs	r2, #2
 800c4dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4e0:	e00b      	b.n	800c4fa <HAL_TIM_PWM_Start_IT+0x102>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b10      	cmp	r3, #16
 800c4e6:	d104      	bne.n	800c4f2 <HAL_TIM_PWM_Start_IT+0xfa>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4f0:	e003      	b.n	800c4fa <HAL_TIM_PWM_Start_IT+0x102>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b0c      	cmp	r3, #12
 800c4fe:	d841      	bhi.n	800c584 <HAL_TIM_PWM_Start_IT+0x18c>
 800c500:	a201      	add	r2, pc, #4	; (adr r2, 800c508 <HAL_TIM_PWM_Start_IT+0x110>)
 800c502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c506:	bf00      	nop
 800c508:	0800c53d 	.word	0x0800c53d
 800c50c:	0800c585 	.word	0x0800c585
 800c510:	0800c585 	.word	0x0800c585
 800c514:	0800c585 	.word	0x0800c585
 800c518:	0800c54f 	.word	0x0800c54f
 800c51c:	0800c585 	.word	0x0800c585
 800c520:	0800c585 	.word	0x0800c585
 800c524:	0800c585 	.word	0x0800c585
 800c528:	0800c561 	.word	0x0800c561
 800c52c:	0800c585 	.word	0x0800c585
 800c530:	0800c585 	.word	0x0800c585
 800c534:	0800c585 	.word	0x0800c585
 800c538:	0800c573 	.word	0x0800c573
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68da      	ldr	r2, [r3, #12]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f042 0202 	orr.w	r2, r2, #2
 800c54a:	60da      	str	r2, [r3, #12]
      break;
 800c54c:	e01d      	b.n	800c58a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68da      	ldr	r2, [r3, #12]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f042 0204 	orr.w	r2, r2, #4
 800c55c:	60da      	str	r2, [r3, #12]
      break;
 800c55e:	e014      	b.n	800c58a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f042 0208 	orr.w	r2, r2, #8
 800c56e:	60da      	str	r2, [r3, #12]
      break;
 800c570:	e00b      	b.n	800c58a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68da      	ldr	r2, [r3, #12]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f042 0210 	orr.w	r2, r2, #16
 800c580:	60da      	str	r2, [r3, #12]
      break;
 800c582:	e002      	b.n	800c58a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	73fb      	strb	r3, [r7, #15]
      break;
 800c588:	bf00      	nop
  }

  if (status == HAL_OK)
 800c58a:	7bfb      	ldrb	r3, [r7, #15]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d16a      	bne.n	800c666 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2201      	movs	r2, #1
 800c596:	6839      	ldr	r1, [r7, #0]
 800c598:	4618      	mov	r0, r3
 800c59a:	f001 f90b 	bl	800d7b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a33      	ldr	r2, [pc, #204]	; (800c670 <HAL_TIM_PWM_Start_IT+0x278>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d013      	beq.n	800c5d0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a31      	ldr	r2, [pc, #196]	; (800c674 <HAL_TIM_PWM_Start_IT+0x27c>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d00e      	beq.n	800c5d0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a30      	ldr	r2, [pc, #192]	; (800c678 <HAL_TIM_PWM_Start_IT+0x280>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d009      	beq.n	800c5d0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a2e      	ldr	r2, [pc, #184]	; (800c67c <HAL_TIM_PWM_Start_IT+0x284>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d004      	beq.n	800c5d0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a2d      	ldr	r2, [pc, #180]	; (800c680 <HAL_TIM_PWM_Start_IT+0x288>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d101      	bne.n	800c5d4 <HAL_TIM_PWM_Start_IT+0x1dc>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e000      	b.n	800c5d6 <HAL_TIM_PWM_Start_IT+0x1de>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d007      	beq.n	800c5ea <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a20      	ldr	r2, [pc, #128]	; (800c670 <HAL_TIM_PWM_Start_IT+0x278>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d018      	beq.n	800c626 <HAL_TIM_PWM_Start_IT+0x22e>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5fc:	d013      	beq.n	800c626 <HAL_TIM_PWM_Start_IT+0x22e>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4a20      	ldr	r2, [pc, #128]	; (800c684 <HAL_TIM_PWM_Start_IT+0x28c>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d00e      	beq.n	800c626 <HAL_TIM_PWM_Start_IT+0x22e>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a1e      	ldr	r2, [pc, #120]	; (800c688 <HAL_TIM_PWM_Start_IT+0x290>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d009      	beq.n	800c626 <HAL_TIM_PWM_Start_IT+0x22e>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a17      	ldr	r2, [pc, #92]	; (800c674 <HAL_TIM_PWM_Start_IT+0x27c>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d004      	beq.n	800c626 <HAL_TIM_PWM_Start_IT+0x22e>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a15      	ldr	r2, [pc, #84]	; (800c678 <HAL_TIM_PWM_Start_IT+0x280>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d115      	bne.n	800c652 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	4b17      	ldr	r3, [pc, #92]	; (800c68c <HAL_TIM_PWM_Start_IT+0x294>)
 800c62e:	4013      	ands	r3, r2
 800c630:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	2b06      	cmp	r3, #6
 800c636:	d015      	beq.n	800c664 <HAL_TIM_PWM_Start_IT+0x26c>
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c63e:	d011      	beq.n	800c664 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f042 0201 	orr.w	r2, r2, #1
 800c64e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c650:	e008      	b.n	800c664 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f042 0201 	orr.w	r2, r2, #1
 800c660:	601a      	str	r2, [r3, #0]
 800c662:	e000      	b.n	800c666 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c664:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c666:	7bfb      	ldrb	r3, [r7, #15]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	40012c00 	.word	0x40012c00
 800c674:	40013400 	.word	0x40013400
 800c678:	40014000 	.word	0x40014000
 800c67c:	40014400 	.word	0x40014400
 800c680:	40014800 	.word	0x40014800
 800c684:	40000400 	.word	0x40000400
 800c688:	40000800 	.word	0x40000800
 800c68c:	00010007 	.word	0x00010007

0800c690 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b0c      	cmp	r3, #12
 800c6a2:	d841      	bhi.n	800c728 <HAL_TIM_PWM_Stop_IT+0x98>
 800c6a4:	a201      	add	r2, pc, #4	; (adr r2, 800c6ac <HAL_TIM_PWM_Stop_IT+0x1c>)
 800c6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6aa:	bf00      	nop
 800c6ac:	0800c6e1 	.word	0x0800c6e1
 800c6b0:	0800c729 	.word	0x0800c729
 800c6b4:	0800c729 	.word	0x0800c729
 800c6b8:	0800c729 	.word	0x0800c729
 800c6bc:	0800c6f3 	.word	0x0800c6f3
 800c6c0:	0800c729 	.word	0x0800c729
 800c6c4:	0800c729 	.word	0x0800c729
 800c6c8:	0800c729 	.word	0x0800c729
 800c6cc:	0800c705 	.word	0x0800c705
 800c6d0:	0800c729 	.word	0x0800c729
 800c6d4:	0800c729 	.word	0x0800c729
 800c6d8:	0800c729 	.word	0x0800c729
 800c6dc:	0800c717 	.word	0x0800c717
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f022 0202 	bic.w	r2, r2, #2
 800c6ee:	60da      	str	r2, [r3, #12]
      break;
 800c6f0:	e01d      	b.n	800c72e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68da      	ldr	r2, [r3, #12]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f022 0204 	bic.w	r2, r2, #4
 800c700:	60da      	str	r2, [r3, #12]
      break;
 800c702:	e014      	b.n	800c72e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68da      	ldr	r2, [r3, #12]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f022 0208 	bic.w	r2, r2, #8
 800c712:	60da      	str	r2, [r3, #12]
      break;
 800c714:	e00b      	b.n	800c72e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68da      	ldr	r2, [r3, #12]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f022 0210 	bic.w	r2, r2, #16
 800c724:	60da      	str	r2, [r3, #12]
      break;
 800c726:	e002      	b.n	800c72e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	73fb      	strb	r3, [r7, #15]
      break;
 800c72c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c72e:	7bfb      	ldrb	r3, [r7, #15]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f040 8081 	bne.w	800c838 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2200      	movs	r2, #0
 800c73c:	6839      	ldr	r1, [r7, #0]
 800c73e:	4618      	mov	r0, r3
 800c740:	f001 f838 	bl	800d7b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a3e      	ldr	r2, [pc, #248]	; (800c844 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d013      	beq.n	800c776 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a3d      	ldr	r2, [pc, #244]	; (800c848 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d00e      	beq.n	800c776 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a3b      	ldr	r2, [pc, #236]	; (800c84c <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d009      	beq.n	800c776 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a3a      	ldr	r2, [pc, #232]	; (800c850 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d004      	beq.n	800c776 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a38      	ldr	r2, [pc, #224]	; (800c854 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d101      	bne.n	800c77a <HAL_TIM_PWM_Stop_IT+0xea>
 800c776:	2301      	movs	r3, #1
 800c778:	e000      	b.n	800c77c <HAL_TIM_PWM_Stop_IT+0xec>
 800c77a:	2300      	movs	r3, #0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d017      	beq.n	800c7b0 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6a1a      	ldr	r2, [r3, #32]
 800c786:	f241 1311 	movw	r3, #4369	; 0x1111
 800c78a:	4013      	ands	r3, r2
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10f      	bne.n	800c7b0 <HAL_TIM_PWM_Stop_IT+0x120>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	6a1a      	ldr	r2, [r3, #32]
 800c796:	f244 4344 	movw	r3, #17476	; 0x4444
 800c79a:	4013      	ands	r3, r2
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d107      	bne.n	800c7b0 <HAL_TIM_PWM_Stop_IT+0x120>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c7ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6a1a      	ldr	r2, [r3, #32]
 800c7b6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10f      	bne.n	800c7e0 <HAL_TIM_PWM_Stop_IT+0x150>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6a1a      	ldr	r2, [r3, #32]
 800c7c6:	f244 4344 	movw	r3, #17476	; 0x4444
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d107      	bne.n	800c7e0 <HAL_TIM_PWM_Stop_IT+0x150>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f022 0201 	bic.w	r2, r2, #1
 800c7de:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d104      	bne.n	800c7f0 <HAL_TIM_PWM_Stop_IT+0x160>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7ee:	e023      	b.n	800c838 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	2b04      	cmp	r3, #4
 800c7f4:	d104      	bne.n	800c800 <HAL_TIM_PWM_Stop_IT+0x170>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c7fe:	e01b      	b.n	800c838 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	2b08      	cmp	r3, #8
 800c804:	d104      	bne.n	800c810 <HAL_TIM_PWM_Stop_IT+0x180>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c80e:	e013      	b.n	800c838 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	2b0c      	cmp	r3, #12
 800c814:	d104      	bne.n	800c820 <HAL_TIM_PWM_Stop_IT+0x190>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2201      	movs	r2, #1
 800c81a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c81e:	e00b      	b.n	800c838 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	2b10      	cmp	r3, #16
 800c824:	d104      	bne.n	800c830 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2201      	movs	r2, #1
 800c82a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c82e:	e003      	b.n	800c838 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c838:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	40012c00 	.word	0x40012c00
 800c848:	40013400 	.word	0x40013400
 800c84c:	40014000 	.word	0x40014000
 800c850:	40014400 	.word	0x40014400
 800c854:	40014800 	.word	0x40014800

0800c858 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d101      	bne.n	800c86c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e041      	b.n	800c8f0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c872:	b2db      	uxtb	r3, r3
 800c874:	2b00      	cmp	r3, #0
 800c876:	d106      	bne.n	800c886 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f7f9 f95b 	bl	8005b3c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2202      	movs	r2, #2
 800c88a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	3304      	adds	r3, #4
 800c896:	4619      	mov	r1, r3
 800c898:	4610      	mov	r0, r2
 800c89a:	f000 fbf9 	bl	800d090 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f022 0208 	bic.w	r2, r2, #8
 800c8ac:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6819      	ldr	r1, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d101      	bne.n	800c90c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c908:	2301      	movs	r3, #1
 800c90a:	e097      	b.n	800ca3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b00      	cmp	r3, #0
 800c916:	d106      	bne.n	800c926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7f9 f833 	bl	800598c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2202      	movs	r2, #2
 800c92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	6812      	ldr	r2, [r2, #0]
 800c938:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c93c:	f023 0307 	bic.w	r3, r3, #7
 800c940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	3304      	adds	r3, #4
 800c94a:	4619      	mov	r1, r3
 800c94c:	4610      	mov	r0, r2
 800c94e:	f000 fb9f 	bl	800d090 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	4313      	orrs	r3, r2
 800c972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c97a:	f023 0303 	bic.w	r3, r3, #3
 800c97e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	689a      	ldr	r2, [r3, #8]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	021b      	lsls	r3, r3, #8
 800c98a:	4313      	orrs	r3, r2
 800c98c:	693a      	ldr	r2, [r7, #16]
 800c98e:	4313      	orrs	r3, r2
 800c990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c998:	f023 030c 	bic.w	r3, r3, #12
 800c99c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c9a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	68da      	ldr	r2, [r3, #12]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	69db      	ldr	r3, [r3, #28]
 800c9b2:	021b      	lsls	r3, r3, #8
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	011a      	lsls	r2, r3, #4
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	031b      	lsls	r3, r3, #12
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	693a      	ldr	r2, [r7, #16]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c9d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c9de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	011b      	lsls	r3, r3, #4
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2201      	movs	r2, #1
 800ca36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ca5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d110      	bne.n	800ca96 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d102      	bne.n	800ca80 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca7a:	7b7b      	ldrb	r3, [r7, #13]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d001      	beq.n	800ca84 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	e089      	b.n	800cb98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2202      	movs	r2, #2
 800ca88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2202      	movs	r2, #2
 800ca90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca94:	e031      	b.n	800cafa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2b04      	cmp	r3, #4
 800ca9a:	d110      	bne.n	800cabe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca9c:	7bbb      	ldrb	r3, [r7, #14]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d102      	bne.n	800caa8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800caa2:	7b3b      	ldrb	r3, [r7, #12]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d001      	beq.n	800caac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
 800caaa:	e075      	b.n	800cb98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2202      	movs	r2, #2
 800cab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cabc:	e01d      	b.n	800cafa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d108      	bne.n	800cad6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cac4:	7bbb      	ldrb	r3, [r7, #14]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d105      	bne.n	800cad6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800caca:	7b7b      	ldrb	r3, [r7, #13]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d102      	bne.n	800cad6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cad0:	7b3b      	ldrb	r3, [r7, #12]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d001      	beq.n	800cada <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e05e      	b.n	800cb98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2202      	movs	r2, #2
 800cade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2202      	movs	r2, #2
 800cae6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2202      	movs	r2, #2
 800caee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2202      	movs	r2, #2
 800caf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d003      	beq.n	800cb08 <HAL_TIM_Encoder_Start_IT+0xc4>
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	2b04      	cmp	r3, #4
 800cb04:	d010      	beq.n	800cb28 <HAL_TIM_Encoder_Start_IT+0xe4>
 800cb06:	e01f      	b.n	800cb48 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	2100      	movs	r1, #0
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 fe4f 	bl	800d7b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68da      	ldr	r2, [r3, #12]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f042 0202 	orr.w	r2, r2, #2
 800cb24:	60da      	str	r2, [r3, #12]
      break;
 800cb26:	e02e      	b.n	800cb86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	2104      	movs	r1, #4
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 fe3f 	bl	800d7b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	68da      	ldr	r2, [r3, #12]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f042 0204 	orr.w	r2, r2, #4
 800cb44:	60da      	str	r2, [r3, #12]
      break;
 800cb46:	e01e      	b.n	800cb86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	2100      	movs	r1, #0
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 fe2f 	bl	800d7b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	2104      	movs	r1, #4
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 fe28 	bl	800d7b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	68da      	ldr	r2, [r3, #12]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f042 0202 	orr.w	r2, r2, #2
 800cb72:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68da      	ldr	r2, [r3, #12]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f042 0204 	orr.w	r2, r2, #4
 800cb82:	60da      	str	r2, [r3, #12]
      break;
 800cb84:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f042 0201 	orr.w	r2, r2, #1
 800cb94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	f003 0302 	and.w	r3, r3, #2
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d020      	beq.n	800cc04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f003 0302 	and.w	r3, r3, #2
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01b      	beq.n	800cc04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f06f 0202 	mvn.w	r2, #2
 800cbd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	f003 0303 	and.w	r3, r3, #3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f7f6 fed0 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 800cbf0:	e005      	b.n	800cbfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fa38 	bl	800d068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7f6 fedb 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	f003 0304 	and.w	r3, r3, #4
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d020      	beq.n	800cc50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f003 0304 	and.w	r3, r3, #4
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01b      	beq.n	800cc50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f06f 0204 	mvn.w	r2, #4
 800cc20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2202      	movs	r2, #2
 800cc26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	699b      	ldr	r3, [r3, #24]
 800cc2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7f6 feaa 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 800cc3c:	e005      	b.n	800cc4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fa12 	bl	800d068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7f6 feb5 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	f003 0308 	and.w	r3, r3, #8
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d020      	beq.n	800cc9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f003 0308 	and.w	r3, r3, #8
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d01b      	beq.n	800cc9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f06f 0208 	mvn.w	r2, #8
 800cc6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2204      	movs	r2, #4
 800cc72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	69db      	ldr	r3, [r3, #28]
 800cc7a:	f003 0303 	and.w	r3, r3, #3
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d003      	beq.n	800cc8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7f6 fe84 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 800cc88:	e005      	b.n	800cc96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f9ec 	bl	800d068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7f6 fe8f 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	f003 0310 	and.w	r3, r3, #16
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d020      	beq.n	800cce8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f003 0310 	and.w	r3, r3, #16
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d01b      	beq.n	800cce8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f06f 0210 	mvn.w	r2, #16
 800ccb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2208      	movs	r2, #8
 800ccbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	69db      	ldr	r3, [r3, #28]
 800ccc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7f6 fe5e 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 800ccd4:	e005      	b.n	800cce2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f9c6 	bl	800d068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7f6 fe69 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00c      	beq.n	800cd0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d007      	beq.n	800cd0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f06f 0201 	mvn.w	r2, #1
 800cd04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7f6 fe7a 	bl	8003a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d104      	bne.n	800cd20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00c      	beq.n	800cd3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d007      	beq.n	800cd3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800cd32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 ff83 	bl	800dc40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00c      	beq.n	800cd5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d007      	beq.n	800cd5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 ff7b 	bl	800dc54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00c      	beq.n	800cd82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d007      	beq.n	800cd82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 f97d 	bl	800d07c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	f003 0320 	and.w	r3, r3, #32
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00c      	beq.n	800cda6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f003 0320 	and.w	r3, r3, #32
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d007      	beq.n	800cda6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f06f 0220 	mvn.w	r2, #32
 800cd9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 ff43 	bl	800dc2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00c      	beq.n	800cdca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d007      	beq.n	800cdca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cdc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 ff4f 	bl	800dc68 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00c      	beq.n	800cdee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d007      	beq.n	800cdee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cde6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 ff47 	bl	800dc7c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00c      	beq.n	800ce12 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d007      	beq.n	800ce12 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ce0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 ff3f 	bl	800dc90 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00c      	beq.n	800ce36 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d007      	beq.n	800ce36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ce2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 ff37 	bl	800dca4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce36:	bf00      	nop
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d101      	bne.n	800ce5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	e0ff      	b.n	800d05e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2201      	movs	r2, #1
 800ce62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b14      	cmp	r3, #20
 800ce6a:	f200 80f0 	bhi.w	800d04e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ce6e:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce74:	0800cec9 	.word	0x0800cec9
 800ce78:	0800d04f 	.word	0x0800d04f
 800ce7c:	0800d04f 	.word	0x0800d04f
 800ce80:	0800d04f 	.word	0x0800d04f
 800ce84:	0800cf09 	.word	0x0800cf09
 800ce88:	0800d04f 	.word	0x0800d04f
 800ce8c:	0800d04f 	.word	0x0800d04f
 800ce90:	0800d04f 	.word	0x0800d04f
 800ce94:	0800cf4b 	.word	0x0800cf4b
 800ce98:	0800d04f 	.word	0x0800d04f
 800ce9c:	0800d04f 	.word	0x0800d04f
 800cea0:	0800d04f 	.word	0x0800d04f
 800cea4:	0800cf8b 	.word	0x0800cf8b
 800cea8:	0800d04f 	.word	0x0800d04f
 800ceac:	0800d04f 	.word	0x0800d04f
 800ceb0:	0800d04f 	.word	0x0800d04f
 800ceb4:	0800cfcd 	.word	0x0800cfcd
 800ceb8:	0800d04f 	.word	0x0800d04f
 800cebc:	0800d04f 	.word	0x0800d04f
 800cec0:	0800d04f 	.word	0x0800d04f
 800cec4:	0800d00d 	.word	0x0800d00d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68b9      	ldr	r1, [r7, #8]
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 f97a 	bl	800d1c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	699a      	ldr	r2, [r3, #24]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f042 0208 	orr.w	r2, r2, #8
 800cee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	699a      	ldr	r2, [r3, #24]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f022 0204 	bic.w	r2, r2, #4
 800cef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6999      	ldr	r1, [r3, #24]
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	691a      	ldr	r2, [r3, #16]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	430a      	orrs	r2, r1
 800cf04:	619a      	str	r2, [r3, #24]
      break;
 800cf06:	e0a5      	b.n	800d054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68b9      	ldr	r1, [r7, #8]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 f9ea 	bl	800d2e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	699a      	ldr	r2, [r3, #24]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	699a      	ldr	r2, [r3, #24]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	6999      	ldr	r1, [r3, #24]
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	021a      	lsls	r2, r3, #8
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	430a      	orrs	r2, r1
 800cf46:	619a      	str	r2, [r3, #24]
      break;
 800cf48:	e084      	b.n	800d054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	68b9      	ldr	r1, [r7, #8]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 fa53 	bl	800d3fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	69da      	ldr	r2, [r3, #28]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f042 0208 	orr.w	r2, r2, #8
 800cf64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	69da      	ldr	r2, [r3, #28]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f022 0204 	bic.w	r2, r2, #4
 800cf74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	69d9      	ldr	r1, [r3, #28]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	691a      	ldr	r2, [r3, #16]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	61da      	str	r2, [r3, #28]
      break;
 800cf88:	e064      	b.n	800d054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68b9      	ldr	r1, [r7, #8]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f000 fabb 	bl	800d50c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	69da      	ldr	r2, [r3, #28]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	69da      	ldr	r2, [r3, #28]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	69d9      	ldr	r1, [r3, #28]
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	021a      	lsls	r2, r3, #8
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	430a      	orrs	r2, r1
 800cfc8:	61da      	str	r2, [r3, #28]
      break;
 800cfca:	e043      	b.n	800d054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68b9      	ldr	r1, [r7, #8]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 fb24 	bl	800d620 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f042 0208 	orr.w	r2, r2, #8
 800cfe6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f022 0204 	bic.w	r2, r2, #4
 800cff6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	691a      	ldr	r2, [r3, #16]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	430a      	orrs	r2, r1
 800d008:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d00a:	e023      	b.n	800d054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68b9      	ldr	r1, [r7, #8]
 800d012:	4618      	mov	r0, r3
 800d014:	f000 fb68 	bl	800d6e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d026:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d036:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	021a      	lsls	r2, r3, #8
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	430a      	orrs	r2, r1
 800d04a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d04c:	e002      	b.n	800d054 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d04e:	2301      	movs	r3, #1
 800d050:	75fb      	strb	r3, [r7, #23]
      break;
 800d052:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3718      	adds	r7, #24
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop

0800d068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a42      	ldr	r2, [pc, #264]	; (800d1ac <TIM_Base_SetConfig+0x11c>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d00f      	beq.n	800d0c8 <TIM_Base_SetConfig+0x38>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0ae:	d00b      	beq.n	800d0c8 <TIM_Base_SetConfig+0x38>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a3f      	ldr	r2, [pc, #252]	; (800d1b0 <TIM_Base_SetConfig+0x120>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d007      	beq.n	800d0c8 <TIM_Base_SetConfig+0x38>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a3e      	ldr	r2, [pc, #248]	; (800d1b4 <TIM_Base_SetConfig+0x124>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d003      	beq.n	800d0c8 <TIM_Base_SetConfig+0x38>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a3d      	ldr	r2, [pc, #244]	; (800d1b8 <TIM_Base_SetConfig+0x128>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d108      	bne.n	800d0da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4a33      	ldr	r2, [pc, #204]	; (800d1ac <TIM_Base_SetConfig+0x11c>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d01b      	beq.n	800d11a <TIM_Base_SetConfig+0x8a>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e8:	d017      	beq.n	800d11a <TIM_Base_SetConfig+0x8a>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a30      	ldr	r2, [pc, #192]	; (800d1b0 <TIM_Base_SetConfig+0x120>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d013      	beq.n	800d11a <TIM_Base_SetConfig+0x8a>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a2f      	ldr	r2, [pc, #188]	; (800d1b4 <TIM_Base_SetConfig+0x124>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d00f      	beq.n	800d11a <TIM_Base_SetConfig+0x8a>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a2e      	ldr	r2, [pc, #184]	; (800d1b8 <TIM_Base_SetConfig+0x128>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d00b      	beq.n	800d11a <TIM_Base_SetConfig+0x8a>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a2d      	ldr	r2, [pc, #180]	; (800d1bc <TIM_Base_SetConfig+0x12c>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d007      	beq.n	800d11a <TIM_Base_SetConfig+0x8a>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a2c      	ldr	r2, [pc, #176]	; (800d1c0 <TIM_Base_SetConfig+0x130>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d003      	beq.n	800d11a <TIM_Base_SetConfig+0x8a>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a2b      	ldr	r2, [pc, #172]	; (800d1c4 <TIM_Base_SetConfig+0x134>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d108      	bne.n	800d12c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	4313      	orrs	r3, r2
 800d12a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	4313      	orrs	r3, r2
 800d138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	689a      	ldr	r2, [r3, #8]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a16      	ldr	r2, [pc, #88]	; (800d1ac <TIM_Base_SetConfig+0x11c>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d00f      	beq.n	800d178 <TIM_Base_SetConfig+0xe8>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a17      	ldr	r2, [pc, #92]	; (800d1b8 <TIM_Base_SetConfig+0x128>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d00b      	beq.n	800d178 <TIM_Base_SetConfig+0xe8>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4a16      	ldr	r2, [pc, #88]	; (800d1bc <TIM_Base_SetConfig+0x12c>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d007      	beq.n	800d178 <TIM_Base_SetConfig+0xe8>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4a15      	ldr	r2, [pc, #84]	; (800d1c0 <TIM_Base_SetConfig+0x130>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d003      	beq.n	800d178 <TIM_Base_SetConfig+0xe8>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a14      	ldr	r2, [pc, #80]	; (800d1c4 <TIM_Base_SetConfig+0x134>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d103      	bne.n	800d180 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	691a      	ldr	r2, [r3, #16]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	691b      	ldr	r3, [r3, #16]
 800d18a:	f003 0301 	and.w	r3, r3, #1
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d105      	bne.n	800d19e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	691b      	ldr	r3, [r3, #16]
 800d196:	f023 0201 	bic.w	r2, r3, #1
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	611a      	str	r2, [r3, #16]
  }
}
 800d19e:	bf00      	nop
 800d1a0:	3714      	adds	r7, #20
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	40012c00 	.word	0x40012c00
 800d1b0:	40000400 	.word	0x40000400
 800d1b4:	40000800 	.word	0x40000800
 800d1b8:	40013400 	.word	0x40013400
 800d1bc:	40014000 	.word	0x40014000
 800d1c0:	40014400 	.word	0x40014400
 800d1c4:	40014800 	.word	0x40014800

0800d1c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b087      	sub	sp, #28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6a1b      	ldr	r3, [r3, #32]
 800d1d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a1b      	ldr	r3, [r3, #32]
 800d1dc:	f023 0201 	bic.w	r2, r3, #1
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	699b      	ldr	r3, [r3, #24]
 800d1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f023 0303 	bic.w	r3, r3, #3
 800d202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	4313      	orrs	r3, r2
 800d20c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f023 0302 	bic.w	r3, r3, #2
 800d214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4a2c      	ldr	r2, [pc, #176]	; (800d2d4 <TIM_OC1_SetConfig+0x10c>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d00f      	beq.n	800d248 <TIM_OC1_SetConfig+0x80>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4a2b      	ldr	r2, [pc, #172]	; (800d2d8 <TIM_OC1_SetConfig+0x110>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d00b      	beq.n	800d248 <TIM_OC1_SetConfig+0x80>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a2a      	ldr	r2, [pc, #168]	; (800d2dc <TIM_OC1_SetConfig+0x114>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d007      	beq.n	800d248 <TIM_OC1_SetConfig+0x80>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a29      	ldr	r2, [pc, #164]	; (800d2e0 <TIM_OC1_SetConfig+0x118>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d003      	beq.n	800d248 <TIM_OC1_SetConfig+0x80>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a28      	ldr	r2, [pc, #160]	; (800d2e4 <TIM_OC1_SetConfig+0x11c>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d10c      	bne.n	800d262 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	f023 0308 	bic.w	r3, r3, #8
 800d24e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	4313      	orrs	r3, r2
 800d258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	f023 0304 	bic.w	r3, r3, #4
 800d260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a1b      	ldr	r2, [pc, #108]	; (800d2d4 <TIM_OC1_SetConfig+0x10c>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d00f      	beq.n	800d28a <TIM_OC1_SetConfig+0xc2>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a1a      	ldr	r2, [pc, #104]	; (800d2d8 <TIM_OC1_SetConfig+0x110>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d00b      	beq.n	800d28a <TIM_OC1_SetConfig+0xc2>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a19      	ldr	r2, [pc, #100]	; (800d2dc <TIM_OC1_SetConfig+0x114>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d007      	beq.n	800d28a <TIM_OC1_SetConfig+0xc2>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4a18      	ldr	r2, [pc, #96]	; (800d2e0 <TIM_OC1_SetConfig+0x118>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d003      	beq.n	800d28a <TIM_OC1_SetConfig+0xc2>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4a17      	ldr	r2, [pc, #92]	; (800d2e4 <TIM_OC1_SetConfig+0x11c>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d111      	bne.n	800d2ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	693a      	ldr	r2, [r7, #16]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	699b      	ldr	r3, [r3, #24]
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	621a      	str	r2, [r3, #32]
}
 800d2c8:	bf00      	nop
 800d2ca:	371c      	adds	r7, #28
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	40012c00 	.word	0x40012c00
 800d2d8:	40013400 	.word	0x40013400
 800d2dc:	40014000 	.word	0x40014000
 800d2e0:	40014400 	.word	0x40014400
 800d2e4:	40014800 	.word	0x40014800

0800d2e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b087      	sub	sp, #28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a1b      	ldr	r3, [r3, #32]
 800d2f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6a1b      	ldr	r3, [r3, #32]
 800d2fc:	f023 0210 	bic.w	r2, r3, #16
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	699b      	ldr	r3, [r3, #24]
 800d30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	021b      	lsls	r3, r3, #8
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	f023 0320 	bic.w	r3, r3, #32
 800d336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	011b      	lsls	r3, r3, #4
 800d33e:	697a      	ldr	r2, [r7, #20]
 800d340:	4313      	orrs	r3, r2
 800d342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	4a28      	ldr	r2, [pc, #160]	; (800d3e8 <TIM_OC2_SetConfig+0x100>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d003      	beq.n	800d354 <TIM_OC2_SetConfig+0x6c>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4a27      	ldr	r2, [pc, #156]	; (800d3ec <TIM_OC2_SetConfig+0x104>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d10d      	bne.n	800d370 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d35a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	011b      	lsls	r3, r3, #4
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	4313      	orrs	r3, r2
 800d366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d36e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a1d      	ldr	r2, [pc, #116]	; (800d3e8 <TIM_OC2_SetConfig+0x100>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d00f      	beq.n	800d398 <TIM_OC2_SetConfig+0xb0>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a1c      	ldr	r2, [pc, #112]	; (800d3ec <TIM_OC2_SetConfig+0x104>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d00b      	beq.n	800d398 <TIM_OC2_SetConfig+0xb0>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a1b      	ldr	r2, [pc, #108]	; (800d3f0 <TIM_OC2_SetConfig+0x108>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d007      	beq.n	800d398 <TIM_OC2_SetConfig+0xb0>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a1a      	ldr	r2, [pc, #104]	; (800d3f4 <TIM_OC2_SetConfig+0x10c>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d003      	beq.n	800d398 <TIM_OC2_SetConfig+0xb0>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a19      	ldr	r2, [pc, #100]	; (800d3f8 <TIM_OC2_SetConfig+0x110>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d113      	bne.n	800d3c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d39e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	685a      	ldr	r2, [r3, #4]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	621a      	str	r2, [r3, #32]
}
 800d3da:	bf00      	nop
 800d3dc:	371c      	adds	r7, #28
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	40012c00 	.word	0x40012c00
 800d3ec:	40013400 	.word	0x40013400
 800d3f0:	40014000 	.word	0x40014000
 800d3f4:	40014400 	.word	0x40014400
 800d3f8:	40014800 	.word	0x40014800

0800d3fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b087      	sub	sp, #28
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a1b      	ldr	r3, [r3, #32]
 800d410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	69db      	ldr	r3, [r3, #28]
 800d422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f023 0303 	bic.w	r3, r3, #3
 800d436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	4313      	orrs	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	021b      	lsls	r3, r3, #8
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	4313      	orrs	r3, r2
 800d454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a27      	ldr	r2, [pc, #156]	; (800d4f8 <TIM_OC3_SetConfig+0xfc>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d003      	beq.n	800d466 <TIM_OC3_SetConfig+0x6a>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a26      	ldr	r2, [pc, #152]	; (800d4fc <TIM_OC3_SetConfig+0x100>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d10d      	bne.n	800d482 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d46c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	021b      	lsls	r3, r3, #8
 800d474:	697a      	ldr	r2, [r7, #20]
 800d476:	4313      	orrs	r3, r2
 800d478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a1c      	ldr	r2, [pc, #112]	; (800d4f8 <TIM_OC3_SetConfig+0xfc>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d00f      	beq.n	800d4aa <TIM_OC3_SetConfig+0xae>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a1b      	ldr	r2, [pc, #108]	; (800d4fc <TIM_OC3_SetConfig+0x100>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d00b      	beq.n	800d4aa <TIM_OC3_SetConfig+0xae>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4a1a      	ldr	r2, [pc, #104]	; (800d500 <TIM_OC3_SetConfig+0x104>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d007      	beq.n	800d4aa <TIM_OC3_SetConfig+0xae>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a19      	ldr	r2, [pc, #100]	; (800d504 <TIM_OC3_SetConfig+0x108>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d003      	beq.n	800d4aa <TIM_OC3_SetConfig+0xae>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a18      	ldr	r2, [pc, #96]	; (800d508 <TIM_OC3_SetConfig+0x10c>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d113      	bne.n	800d4d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	011b      	lsls	r3, r3, #4
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	011b      	lsls	r3, r3, #4
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	621a      	str	r2, [r3, #32]
}
 800d4ec:	bf00      	nop
 800d4ee:	371c      	adds	r7, #28
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	40012c00 	.word	0x40012c00
 800d4fc:	40013400 	.word	0x40013400
 800d500:	40014000 	.word	0x40014000
 800d504:	40014400 	.word	0x40014400
 800d508:	40014800 	.word	0x40014800

0800d50c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b087      	sub	sp, #28
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a1b      	ldr	r3, [r3, #32]
 800d520:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	69db      	ldr	r3, [r3, #28]
 800d532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	021b      	lsls	r3, r3, #8
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	4313      	orrs	r3, r2
 800d552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d55a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	031b      	lsls	r3, r3, #12
 800d562:	697a      	ldr	r2, [r7, #20]
 800d564:	4313      	orrs	r3, r2
 800d566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a28      	ldr	r2, [pc, #160]	; (800d60c <TIM_OC4_SetConfig+0x100>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d003      	beq.n	800d578 <TIM_OC4_SetConfig+0x6c>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a27      	ldr	r2, [pc, #156]	; (800d610 <TIM_OC4_SetConfig+0x104>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d10d      	bne.n	800d594 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d57e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	031b      	lsls	r3, r3, #12
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	4313      	orrs	r3, r2
 800d58a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a1d      	ldr	r2, [pc, #116]	; (800d60c <TIM_OC4_SetConfig+0x100>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d00f      	beq.n	800d5bc <TIM_OC4_SetConfig+0xb0>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a1c      	ldr	r2, [pc, #112]	; (800d610 <TIM_OC4_SetConfig+0x104>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d00b      	beq.n	800d5bc <TIM_OC4_SetConfig+0xb0>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a1b      	ldr	r2, [pc, #108]	; (800d614 <TIM_OC4_SetConfig+0x108>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d007      	beq.n	800d5bc <TIM_OC4_SetConfig+0xb0>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a1a      	ldr	r2, [pc, #104]	; (800d618 <TIM_OC4_SetConfig+0x10c>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d003      	beq.n	800d5bc <TIM_OC4_SetConfig+0xb0>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a19      	ldr	r2, [pc, #100]	; (800d61c <TIM_OC4_SetConfig+0x110>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d113      	bne.n	800d5e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	695b      	ldr	r3, [r3, #20]
 800d5d0:	019b      	lsls	r3, r3, #6
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	699b      	ldr	r3, [r3, #24]
 800d5dc:	019b      	lsls	r3, r3, #6
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	621a      	str	r2, [r3, #32]
}
 800d5fe:	bf00      	nop
 800d600:	371c      	adds	r7, #28
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	40012c00 	.word	0x40012c00
 800d610:	40013400 	.word	0x40013400
 800d614:	40014000 	.word	0x40014000
 800d618:	40014400 	.word	0x40014400
 800d61c:	40014800 	.word	0x40014800

0800d620 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d620:	b480      	push	{r7}
 800d622:	b087      	sub	sp, #28
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a1b      	ldr	r3, [r3, #32]
 800d634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	68fa      	ldr	r2, [r7, #12]
 800d65a:	4313      	orrs	r3, r2
 800d65c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d664:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	041b      	lsls	r3, r3, #16
 800d66c:	693a      	ldr	r2, [r7, #16]
 800d66e:	4313      	orrs	r3, r2
 800d670:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a17      	ldr	r2, [pc, #92]	; (800d6d4 <TIM_OC5_SetConfig+0xb4>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d00f      	beq.n	800d69a <TIM_OC5_SetConfig+0x7a>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a16      	ldr	r2, [pc, #88]	; (800d6d8 <TIM_OC5_SetConfig+0xb8>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d00b      	beq.n	800d69a <TIM_OC5_SetConfig+0x7a>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a15      	ldr	r2, [pc, #84]	; (800d6dc <TIM_OC5_SetConfig+0xbc>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d007      	beq.n	800d69a <TIM_OC5_SetConfig+0x7a>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a14      	ldr	r2, [pc, #80]	; (800d6e0 <TIM_OC5_SetConfig+0xc0>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d003      	beq.n	800d69a <TIM_OC5_SetConfig+0x7a>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a13      	ldr	r2, [pc, #76]	; (800d6e4 <TIM_OC5_SetConfig+0xc4>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d109      	bne.n	800d6ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	695b      	ldr	r3, [r3, #20]
 800d6a6:	021b      	lsls	r3, r3, #8
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	621a      	str	r2, [r3, #32]
}
 800d6c8:	bf00      	nop
 800d6ca:	371c      	adds	r7, #28
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	40012c00 	.word	0x40012c00
 800d6d8:	40013400 	.word	0x40013400
 800d6dc:	40014000 	.word	0x40014000
 800d6e0:	40014400 	.word	0x40014400
 800d6e4:	40014800 	.word	0x40014800

0800d6e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b087      	sub	sp, #28
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a1b      	ldr	r3, [r3, #32]
 800d6f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a1b      	ldr	r3, [r3, #32]
 800d6fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d71a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	021b      	lsls	r3, r3, #8
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	4313      	orrs	r3, r2
 800d726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d72e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	051b      	lsls	r3, r3, #20
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	4313      	orrs	r3, r2
 800d73a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a18      	ldr	r2, [pc, #96]	; (800d7a0 <TIM_OC6_SetConfig+0xb8>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d00f      	beq.n	800d764 <TIM_OC6_SetConfig+0x7c>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	4a17      	ldr	r2, [pc, #92]	; (800d7a4 <TIM_OC6_SetConfig+0xbc>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d00b      	beq.n	800d764 <TIM_OC6_SetConfig+0x7c>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4a16      	ldr	r2, [pc, #88]	; (800d7a8 <TIM_OC6_SetConfig+0xc0>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d007      	beq.n	800d764 <TIM_OC6_SetConfig+0x7c>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a15      	ldr	r2, [pc, #84]	; (800d7ac <TIM_OC6_SetConfig+0xc4>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d003      	beq.n	800d764 <TIM_OC6_SetConfig+0x7c>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a14      	ldr	r2, [pc, #80]	; (800d7b0 <TIM_OC6_SetConfig+0xc8>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d109      	bne.n	800d778 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d76a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	029b      	lsls	r3, r3, #10
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	4313      	orrs	r3, r2
 800d776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	697a      	ldr	r2, [r7, #20]
 800d77c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	685a      	ldr	r2, [r3, #4]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	621a      	str	r2, [r3, #32]
}
 800d792:	bf00      	nop
 800d794:	371c      	adds	r7, #28
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	40012c00 	.word	0x40012c00
 800d7a4:	40013400 	.word	0x40013400
 800d7a8:	40014000 	.word	0x40014000
 800d7ac:	40014400 	.word	0x40014400
 800d7b0:	40014800 	.word	0x40014800

0800d7b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b087      	sub	sp, #28
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	f003 031f 	and.w	r3, r3, #31
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6a1a      	ldr	r2, [r3, #32]
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	43db      	mvns	r3, r3
 800d7d6:	401a      	ands	r2, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6a1a      	ldr	r2, [r3, #32]
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	f003 031f 	and.w	r3, r3, #31
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d7ec:	431a      	orrs	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	621a      	str	r2, [r3, #32]
}
 800d7f2:	bf00      	nop
 800d7f4:	371c      	adds	r7, #28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
	...

0800d800 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d80a:	2300      	movs	r3, #0
 800d80c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d109      	bne.n	800d828 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	bf14      	ite	ne
 800d820:	2301      	movne	r3, #1
 800d822:	2300      	moveq	r3, #0
 800d824:	b2db      	uxtb	r3, r3
 800d826:	e022      	b.n	800d86e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2b04      	cmp	r3, #4
 800d82c:	d109      	bne.n	800d842 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d834:	b2db      	uxtb	r3, r3
 800d836:	2b01      	cmp	r3, #1
 800d838:	bf14      	ite	ne
 800d83a:	2301      	movne	r3, #1
 800d83c:	2300      	moveq	r3, #0
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	e015      	b.n	800d86e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b08      	cmp	r3, #8
 800d846:	d109      	bne.n	800d85c <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b01      	cmp	r3, #1
 800d852:	bf14      	ite	ne
 800d854:	2301      	movne	r3, #1
 800d856:	2300      	moveq	r3, #0
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	e008      	b.n	800d86e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d862:	b2db      	uxtb	r3, r3
 800d864:	2b01      	cmp	r3, #1
 800d866:	bf14      	ite	ne
 800d868:	2301      	movne	r3, #1
 800d86a:	2300      	moveq	r3, #0
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d001      	beq.n	800d876 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800d872:	2301      	movs	r3, #1
 800d874:	e0bc      	b.n	800d9f0 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d104      	bne.n	800d886 <HAL_TIMEx_PWMN_Start_IT+0x86>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2202      	movs	r2, #2
 800d880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d884:	e013      	b.n	800d8ae <HAL_TIMEx_PWMN_Start_IT+0xae>
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	2b04      	cmp	r3, #4
 800d88a:	d104      	bne.n	800d896 <HAL_TIMEx_PWMN_Start_IT+0x96>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2202      	movs	r2, #2
 800d890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d894:	e00b      	b.n	800d8ae <HAL_TIMEx_PWMN_Start_IT+0xae>
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	2b08      	cmp	r3, #8
 800d89a:	d104      	bne.n	800d8a6 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d8a4:	e003      	b.n	800d8ae <HAL_TIMEx_PWMN_Start_IT+0xae>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2202      	movs	r2, #2
 800d8aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	2b0c      	cmp	r3, #12
 800d8b2:	d841      	bhi.n	800d938 <HAL_TIMEx_PWMN_Start_IT+0x138>
 800d8b4:	a201      	add	r2, pc, #4	; (adr r2, 800d8bc <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800d8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ba:	bf00      	nop
 800d8bc:	0800d8f1 	.word	0x0800d8f1
 800d8c0:	0800d939 	.word	0x0800d939
 800d8c4:	0800d939 	.word	0x0800d939
 800d8c8:	0800d939 	.word	0x0800d939
 800d8cc:	0800d903 	.word	0x0800d903
 800d8d0:	0800d939 	.word	0x0800d939
 800d8d4:	0800d939 	.word	0x0800d939
 800d8d8:	0800d939 	.word	0x0800d939
 800d8dc:	0800d915 	.word	0x0800d915
 800d8e0:	0800d939 	.word	0x0800d939
 800d8e4:	0800d939 	.word	0x0800d939
 800d8e8:	0800d939 	.word	0x0800d939
 800d8ec:	0800d927 	.word	0x0800d927
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	68da      	ldr	r2, [r3, #12]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f042 0202 	orr.w	r2, r2, #2
 800d8fe:	60da      	str	r2, [r3, #12]
      break;
 800d900:	e01d      	b.n	800d93e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68da      	ldr	r2, [r3, #12]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f042 0204 	orr.w	r2, r2, #4
 800d910:	60da      	str	r2, [r3, #12]
      break;
 800d912:	e014      	b.n	800d93e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68da      	ldr	r2, [r3, #12]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f042 0208 	orr.w	r2, r2, #8
 800d922:	60da      	str	r2, [r3, #12]
      break;
 800d924:	e00b      	b.n	800d93e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	68da      	ldr	r2, [r3, #12]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f042 0210 	orr.w	r2, r2, #16
 800d934:	60da      	str	r2, [r3, #12]
      break;
 800d936:	e002      	b.n	800d93e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800d938:	2301      	movs	r3, #1
 800d93a:	73fb      	strb	r3, [r7, #15]
      break;
 800d93c:	bf00      	nop
  }

  if (status == HAL_OK)
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d154      	bne.n	800d9ee <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68da      	ldr	r2, [r3, #12]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d952:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2204      	movs	r2, #4
 800d95a:	6839      	ldr	r1, [r7, #0]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f000 f9ab 	bl	800dcb8 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d970:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a20      	ldr	r2, [pc, #128]	; (800d9f8 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d018      	beq.n	800d9ae <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d984:	d013      	beq.n	800d9ae <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a1c      	ldr	r2, [pc, #112]	; (800d9fc <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d00e      	beq.n	800d9ae <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a1a      	ldr	r2, [pc, #104]	; (800da00 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d009      	beq.n	800d9ae <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a19      	ldr	r2, [pc, #100]	; (800da04 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d004      	beq.n	800d9ae <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a17      	ldr	r2, [pc, #92]	; (800da08 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d115      	bne.n	800d9da <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	689a      	ldr	r2, [r3, #8]
 800d9b4:	4b15      	ldr	r3, [pc, #84]	; (800da0c <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2b06      	cmp	r3, #6
 800d9be:	d015      	beq.n	800d9ec <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9c6:	d011      	beq.n	800d9ec <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f042 0201 	orr.w	r2, r2, #1
 800d9d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9d8:	e008      	b.n	800d9ec <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f042 0201 	orr.w	r2, r2, #1
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	e000      	b.n	800d9ee <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	40012c00 	.word	0x40012c00
 800d9fc:	40000400 	.word	0x40000400
 800da00:	40000800 	.word	0x40000800
 800da04:	40013400 	.word	0x40013400
 800da08:	40014000 	.word	0x40014000
 800da0c:	00010007 	.word	0x00010007

0800da10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da20:	2b01      	cmp	r3, #1
 800da22:	d101      	bne.n	800da28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da24:	2302      	movs	r3, #2
 800da26:	e065      	b.n	800daf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2202      	movs	r2, #2
 800da34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a2c      	ldr	r2, [pc, #176]	; (800db00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d004      	beq.n	800da5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a2b      	ldr	r2, [pc, #172]	; (800db04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d108      	bne.n	800da6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800da74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	4313      	orrs	r3, r2
 800da82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a1b      	ldr	r2, [pc, #108]	; (800db00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d018      	beq.n	800dac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da9e:	d013      	beq.n	800dac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a18      	ldr	r2, [pc, #96]	; (800db08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d00e      	beq.n	800dac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a17      	ldr	r2, [pc, #92]	; (800db0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d009      	beq.n	800dac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a12      	ldr	r2, [pc, #72]	; (800db04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d004      	beq.n	800dac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a13      	ldr	r2, [pc, #76]	; (800db10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d10c      	bne.n	800dae2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	4313      	orrs	r3, r2
 800dad8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68ba      	ldr	r2, [r7, #8]
 800dae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3714      	adds	r7, #20
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr
 800db00:	40012c00 	.word	0x40012c00
 800db04:	40013400 	.word	0x40013400
 800db08:	40000400 	.word	0x40000400
 800db0c:	40000800 	.word	0x40000800
 800db10:	40014000 	.word	0x40014000

0800db14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800db1e:	2300      	movs	r3, #0
 800db20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d101      	bne.n	800db30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800db2c:	2302      	movs	r3, #2
 800db2e:	e073      	b.n	800dc18 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	4313      	orrs	r3, r2
 800db44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	4313      	orrs	r3, r2
 800db52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	4313      	orrs	r3, r2
 800db60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	695b      	ldr	r3, [r3, #20]
 800db88:	4313      	orrs	r3, r2
 800db8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db96:	4313      	orrs	r3, r2
 800db98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	699b      	ldr	r3, [r3, #24]
 800dba4:	041b      	lsls	r3, r3, #16
 800dba6:	4313      	orrs	r3, r2
 800dba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4a19      	ldr	r2, [pc, #100]	; (800dc24 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d004      	beq.n	800dbcc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4a18      	ldr	r2, [pc, #96]	; (800dc28 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d11c      	bne.n	800dc06 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd6:	051b      	lsls	r3, r3, #20
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc02:	4313      	orrs	r3, r2
 800dc04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	40012c00 	.word	0x40012c00
 800dc28:	40013400 	.word	0x40013400

0800dc2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc34:	bf00      	nop
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dc98:	bf00      	nop
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dcac:	bf00      	nop
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b087      	sub	sp, #28
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	f003 030f 	and.w	r3, r3, #15
 800dcca:	2204      	movs	r2, #4
 800dccc:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6a1a      	ldr	r2, [r3, #32]
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	43db      	mvns	r3, r3
 800dcda:	401a      	ands	r2, r3
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6a1a      	ldr	r2, [r3, #32]
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	f003 030f 	and.w	r3, r3, #15
 800dcea:	6879      	ldr	r1, [r7, #4]
 800dcec:	fa01 f303 	lsl.w	r3, r1, r3
 800dcf0:	431a      	orrs	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	621a      	str	r2, [r3, #32]
}
 800dcf6:	bf00      	nop
 800dcf8:	371c      	adds	r7, #28
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d101      	bne.n	800dd14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd10:	2301      	movs	r3, #1
 800dd12:	e042      	b.n	800dd9a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d106      	bne.n	800dd2c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7f7 ff86 	bl	8005c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2224      	movs	r2, #36	; 0x24
 800dd30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f022 0201 	bic.w	r2, r2, #1
 800dd42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d002      	beq.n	800dd52 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fecd 	bl	800eaec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 fbfe 	bl	800e554 <UART_SetConfig>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d101      	bne.n	800dd62 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e01b      	b.n	800dd9a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	689a      	ldr	r2, [r3, #8]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f042 0201 	orr.w	r2, r2, #1
 800dd90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 ff4c 	bl	800ec30 <UART_CheckIdleState>
 800dd98:	4603      	mov	r3, r0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
	...

0800dda4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b091      	sub	sp, #68	; 0x44
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddb8:	2b20      	cmp	r3, #32
 800ddba:	d178      	bne.n	800deae <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <HAL_UART_Transmit_IT+0x24>
 800ddc2:	88fb      	ldrh	r3, [r7, #6]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d101      	bne.n	800ddcc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e071      	b.n	800deb0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	68ba      	ldr	r2, [r7, #8]
 800ddd0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	88fa      	ldrh	r2, [r7, #6]
 800ddd6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	88fa      	ldrh	r2, [r7, #6]
 800ddde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2200      	movs	r2, #0
 800dde6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2221      	movs	r2, #33	; 0x21
 800ddf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de00:	d12a      	bne.n	800de58 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de0a:	d107      	bne.n	800de1c <HAL_UART_Transmit_IT+0x78>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d103      	bne.n	800de1c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	4a29      	ldr	r2, [pc, #164]	; (800debc <HAL_UART_Transmit_IT+0x118>)
 800de18:	679a      	str	r2, [r3, #120]	; 0x78
 800de1a:	e002      	b.n	800de22 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4a28      	ldr	r2, [pc, #160]	; (800dec0 <HAL_UART_Transmit_IT+0x11c>)
 800de20:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3308      	adds	r3, #8
 800de28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2c:	e853 3f00 	ldrex	r3, [r3]
 800de30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800de38:	63bb      	str	r3, [r7, #56]	; 0x38
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	3308      	adds	r3, #8
 800de40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de42:	637a      	str	r2, [r7, #52]	; 0x34
 800de44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de4a:	e841 2300 	strex	r3, r2, [r1]
 800de4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1e5      	bne.n	800de22 <HAL_UART_Transmit_IT+0x7e>
 800de56:	e028      	b.n	800deaa <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de60:	d107      	bne.n	800de72 <HAL_UART_Transmit_IT+0xce>
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d103      	bne.n	800de72 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	4a15      	ldr	r2, [pc, #84]	; (800dec4 <HAL_UART_Transmit_IT+0x120>)
 800de6e:	679a      	str	r2, [r3, #120]	; 0x78
 800de70:	e002      	b.n	800de78 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	4a14      	ldr	r2, [pc, #80]	; (800dec8 <HAL_UART_Transmit_IT+0x124>)
 800de76:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	e853 3f00 	ldrex	r3, [r3]
 800de84:	613b      	str	r3, [r7, #16]
   return(result);
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	461a      	mov	r2, r3
 800de94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de96:	623b      	str	r3, [r7, #32]
 800de98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de9a:	69f9      	ldr	r1, [r7, #28]
 800de9c:	6a3a      	ldr	r2, [r7, #32]
 800de9e:	e841 2300 	strex	r3, r2, [r1]
 800dea2:	61bb      	str	r3, [r7, #24]
   return(result);
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d1e6      	bne.n	800de78 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800deaa:	2300      	movs	r3, #0
 800deac:	e000      	b.n	800deb0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800deae:	2302      	movs	r3, #2
  }
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3744      	adds	r7, #68	; 0x44
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr
 800debc:	0800f1b1 	.word	0x0800f1b1
 800dec0:	0800f0d1 	.word	0x0800f0d1
 800dec4:	0800f00f 	.word	0x0800f00f
 800dec8:	0800ef57 	.word	0x0800ef57

0800decc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b0ba      	sub	sp, #232	; 0xe8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	69db      	ldr	r3, [r3, #28]
 800deda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800def2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800def6:	f640 030f 	movw	r3, #2063	; 0x80f
 800defa:	4013      	ands	r3, r2
 800defc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800df00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df04:	2b00      	cmp	r3, #0
 800df06:	d11b      	bne.n	800df40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df0c:	f003 0320 	and.w	r3, r3, #32
 800df10:	2b00      	cmp	r3, #0
 800df12:	d015      	beq.n	800df40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df18:	f003 0320 	and.w	r3, r3, #32
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d105      	bne.n	800df2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d009      	beq.n	800df40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df30:	2b00      	cmp	r3, #0
 800df32:	f000 82e3 	beq.w	800e4fc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	4798      	blx	r3
      }
      return;
 800df3e:	e2dd      	b.n	800e4fc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800df40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 8123 	beq.w	800e190 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800df4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800df4e:	4b8d      	ldr	r3, [pc, #564]	; (800e184 <HAL_UART_IRQHandler+0x2b8>)
 800df50:	4013      	ands	r3, r2
 800df52:	2b00      	cmp	r3, #0
 800df54:	d106      	bne.n	800df64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800df56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800df5a:	4b8b      	ldr	r3, [pc, #556]	; (800e188 <HAL_UART_IRQHandler+0x2bc>)
 800df5c:	4013      	ands	r3, r2
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f000 8116 	beq.w	800e190 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800df64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df68:	f003 0301 	and.w	r3, r3, #1
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d011      	beq.n	800df94 <HAL_UART_IRQHandler+0xc8>
 800df70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00b      	beq.n	800df94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2201      	movs	r2, #1
 800df82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df8a:	f043 0201 	orr.w	r2, r3, #1
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df98:	f003 0302 	and.w	r3, r3, #2
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d011      	beq.n	800dfc4 <HAL_UART_IRQHandler+0xf8>
 800dfa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfa4:	f003 0301 	and.w	r3, r3, #1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00b      	beq.n	800dfc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2202      	movs	r2, #2
 800dfb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfba:	f043 0204 	orr.w	r2, r3, #4
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfc8:	f003 0304 	and.w	r3, r3, #4
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d011      	beq.n	800dff4 <HAL_UART_IRQHandler+0x128>
 800dfd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfd4:	f003 0301 	and.w	r3, r3, #1
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d00b      	beq.n	800dff4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2204      	movs	r2, #4
 800dfe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfea:	f043 0202 	orr.w	r2, r3, #2
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dff8:	f003 0308 	and.w	r3, r3, #8
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d017      	beq.n	800e030 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e004:	f003 0320 	and.w	r3, r3, #32
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d105      	bne.n	800e018 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e00c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e010:	4b5c      	ldr	r3, [pc, #368]	; (800e184 <HAL_UART_IRQHandler+0x2b8>)
 800e012:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00b      	beq.n	800e030 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2208      	movs	r2, #8
 800e01e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e026:	f043 0208 	orr.w	r2, r3, #8
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d012      	beq.n	800e062 <HAL_UART_IRQHandler+0x196>
 800e03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00c      	beq.n	800e062 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e058:	f043 0220 	orr.w	r2, r3, #32
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 8249 	beq.w	800e500 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e072:	f003 0320 	and.w	r3, r3, #32
 800e076:	2b00      	cmp	r3, #0
 800e078:	d013      	beq.n	800e0a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e07e:	f003 0320 	and.w	r3, r3, #32
 800e082:	2b00      	cmp	r3, #0
 800e084:	d105      	bne.n	800e092 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d007      	beq.n	800e0a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e096:	2b00      	cmp	r3, #0
 800e098:	d003      	beq.n	800e0a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0b6:	2b40      	cmp	r3, #64	; 0x40
 800e0b8:	d005      	beq.n	800e0c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e0ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d054      	beq.n	800e170 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 fec9 	bl	800ee5e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0d6:	2b40      	cmp	r3, #64	; 0x40
 800e0d8:	d146      	bne.n	800e168 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	3308      	adds	r3, #8
 800e0e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0e8:	e853 3f00 	ldrex	r3, [r3]
 800e0ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e0f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e0f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	3308      	adds	r3, #8
 800e102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e106:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e10a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e10e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e116:	e841 2300 	strex	r3, r2, [r1]
 800e11a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e11e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1d9      	bne.n	800e0da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d017      	beq.n	800e160 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e136:	4a15      	ldr	r2, [pc, #84]	; (800e18c <HAL_UART_IRQHandler+0x2c0>)
 800e138:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e140:	4618      	mov	r0, r3
 800e142:	f7fb fbef 	bl	8009924 <HAL_DMA_Abort_IT>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d019      	beq.n	800e180 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e15a:	4610      	mov	r0, r2
 800e15c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e15e:	e00f      	b.n	800e180 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 f9e1 	bl	800e528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e166:	e00b      	b.n	800e180 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 f9dd 	bl	800e528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e16e:	e007      	b.n	800e180 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 f9d9 	bl	800e528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e17e:	e1bf      	b.n	800e500 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e180:	bf00      	nop
    return;
 800e182:	e1bd      	b.n	800e500 <HAL_UART_IRQHandler+0x634>
 800e184:	10000001 	.word	0x10000001
 800e188:	04000120 	.word	0x04000120
 800e18c:	0800ef2b 	.word	0x0800ef2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e194:	2b01      	cmp	r3, #1
 800e196:	f040 8153 	bne.w	800e440 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e19e:	f003 0310 	and.w	r3, r3, #16
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f000 814c 	beq.w	800e440 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1ac:	f003 0310 	and.w	r3, r3, #16
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f000 8145 	beq.w	800e440 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2210      	movs	r2, #16
 800e1bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1c8:	2b40      	cmp	r3, #64	; 0x40
 800e1ca:	f040 80bb 	bne.w	800e344 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e1dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 818f 	beq.w	800e504 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e1ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	f080 8187 	bcs.w	800e504 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e1fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f003 0320 	and.w	r3, r3, #32
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f040 8087 	bne.w	800e322 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e220:	e853 3f00 	ldrex	r3, [r3]
 800e224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e22c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	461a      	mov	r2, r3
 800e23a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e23e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e242:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e24a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e24e:	e841 2300 	strex	r3, r2, [r1]
 800e252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1da      	bne.n	800e214 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3308      	adds	r3, #8
 800e264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e268:	e853 3f00 	ldrex	r3, [r3]
 800e26c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e26e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e270:	f023 0301 	bic.w	r3, r3, #1
 800e274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	3308      	adds	r3, #8
 800e27e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e28a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e28e:	e841 2300 	strex	r3, r2, [r1]
 800e292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1e1      	bne.n	800e25e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	3308      	adds	r3, #8
 800e2a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2a4:	e853 3f00 	ldrex	r3, [r3]
 800e2a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e2aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	3308      	adds	r3, #8
 800e2ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e2be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e2c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e2c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e2c6:	e841 2300 	strex	r3, r2, [r1]
 800e2ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e2cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1e3      	bne.n	800e29a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2220      	movs	r2, #32
 800e2d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2e8:	e853 3f00 	ldrex	r3, [r3]
 800e2ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2f0:	f023 0310 	bic.w	r3, r3, #16
 800e2f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e302:	65bb      	str	r3, [r7, #88]	; 0x58
 800e304:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e306:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e30a:	e841 2300 	strex	r3, r2, [r1]
 800e30e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1e4      	bne.n	800e2e0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fb faa8 	bl	8009872 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2202      	movs	r2, #2
 800e326:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e334:	b29b      	uxth	r3, r3
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	b29b      	uxth	r3, r3
 800e33a:	4619      	mov	r1, r3
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 f8fd 	bl	800e53c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e342:	e0df      	b.n	800e504 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e350:	b29b      	uxth	r3, r3
 800e352:	1ad3      	subs	r3, r2, r3
 800e354:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e35e:	b29b      	uxth	r3, r3
 800e360:	2b00      	cmp	r3, #0
 800e362:	f000 80d1 	beq.w	800e508 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800e366:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	f000 80cc 	beq.w	800e508 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e378:	e853 3f00 	ldrex	r3, [r3]
 800e37c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	461a      	mov	r2, r3
 800e38e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e392:	647b      	str	r3, [r7, #68]	; 0x44
 800e394:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e396:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e39a:	e841 2300 	strex	r3, r2, [r1]
 800e39e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1e4      	bne.n	800e370 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b0:	e853 3f00 	ldrex	r3, [r3]
 800e3b4:	623b      	str	r3, [r7, #32]
   return(result);
 800e3b6:	6a3b      	ldr	r3, [r7, #32]
 800e3b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e3bc:	f023 0301 	bic.w	r3, r3, #1
 800e3c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	3308      	adds	r3, #8
 800e3ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e3ce:	633a      	str	r2, [r7, #48]	; 0x30
 800e3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3d6:	e841 2300 	strex	r3, r2, [r1]
 800e3da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1e1      	bne.n	800e3a6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2220      	movs	r2, #32
 800e3e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	e853 3f00 	ldrex	r3, [r3]
 800e402:	60fb      	str	r3, [r7, #12]
   return(result);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f023 0310 	bic.w	r3, r3, #16
 800e40a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	461a      	mov	r2, r3
 800e414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e418:	61fb      	str	r3, [r7, #28]
 800e41a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41c:	69b9      	ldr	r1, [r7, #24]
 800e41e:	69fa      	ldr	r2, [r7, #28]
 800e420:	e841 2300 	strex	r3, r2, [r1]
 800e424:	617b      	str	r3, [r7, #20]
   return(result);
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1e4      	bne.n	800e3f6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2202      	movs	r2, #2
 800e430:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e432:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e436:	4619      	mov	r1, r3
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 f87f 	bl	800e53c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e43e:	e063      	b.n	800e508 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d00e      	beq.n	800e46a <HAL_UART_IRQHandler+0x59e>
 800e44c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e454:	2b00      	cmp	r3, #0
 800e456:	d008      	beq.n	800e46a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 ff44 	bl	800f2f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e468:	e051      	b.n	800e50e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e472:	2b00      	cmp	r3, #0
 800e474:	d014      	beq.n	800e4a0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d105      	bne.n	800e48e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d008      	beq.n	800e4a0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e492:	2b00      	cmp	r3, #0
 800e494:	d03a      	beq.n	800e50c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	4798      	blx	r3
    }
    return;
 800e49e:	e035      	b.n	800e50c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e4a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d009      	beq.n	800e4c0 <HAL_UART_IRQHandler+0x5f4>
 800e4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d003      	beq.n	800e4c0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 feee 	bl	800f29a <UART_EndTransmit_IT>
    return;
 800e4be:	e026      	b.n	800e50e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d009      	beq.n	800e4e0 <HAL_UART_IRQHandler+0x614>
 800e4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d003      	beq.n	800e4e0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 ff1d 	bl	800f318 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4de:	e016      	b.n	800e50e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d010      	beq.n	800e50e <HAL_UART_IRQHandler+0x642>
 800e4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	da0c      	bge.n	800e50e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 ff05 	bl	800f304 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4fa:	e008      	b.n	800e50e <HAL_UART_IRQHandler+0x642>
      return;
 800e4fc:	bf00      	nop
 800e4fe:	e006      	b.n	800e50e <HAL_UART_IRQHandler+0x642>
    return;
 800e500:	bf00      	nop
 800e502:	e004      	b.n	800e50e <HAL_UART_IRQHandler+0x642>
      return;
 800e504:	bf00      	nop
 800e506:	e002      	b.n	800e50e <HAL_UART_IRQHandler+0x642>
      return;
 800e508:	bf00      	nop
 800e50a:	e000      	b.n	800e50e <HAL_UART_IRQHandler+0x642>
    return;
 800e50c:	bf00      	nop
  }
}
 800e50e:	37e8      	adds	r7, #232	; 0xe8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e530:	bf00      	nop
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	460b      	mov	r3, r1
 800e546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e558:	b08c      	sub	sp, #48	; 0x30
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e55e:	2300      	movs	r3, #0
 800e560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	689a      	ldr	r2, [r3, #8]
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	431a      	orrs	r2, r3
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	431a      	orrs	r2, r3
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	69db      	ldr	r3, [r3, #28]
 800e578:	4313      	orrs	r3, r2
 800e57a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	4bab      	ldr	r3, [pc, #684]	; (800e830 <UART_SetConfig+0x2dc>)
 800e584:	4013      	ands	r3, r2
 800e586:	697a      	ldr	r2, [r7, #20]
 800e588:	6812      	ldr	r2, [r2, #0]
 800e58a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e58c:	430b      	orrs	r3, r1
 800e58e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	68da      	ldr	r2, [r3, #12]
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	430a      	orrs	r2, r1
 800e5a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	699b      	ldr	r3, [r3, #24]
 800e5aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4aa0      	ldr	r2, [pc, #640]	; (800e834 <UART_SetConfig+0x2e0>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d004      	beq.n	800e5c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	6a1b      	ldr	r3, [r3, #32]
 800e5ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e5ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e5ce:	697a      	ldr	r2, [r7, #20]
 800e5d0:	6812      	ldr	r2, [r2, #0]
 800e5d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5d4:	430b      	orrs	r3, r1
 800e5d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5de:	f023 010f 	bic.w	r1, r3, #15
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	430a      	orrs	r2, r1
 800e5ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4a91      	ldr	r2, [pc, #580]	; (800e838 <UART_SetConfig+0x2e4>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d125      	bne.n	800e644 <UART_SetConfig+0xf0>
 800e5f8:	4b90      	ldr	r3, [pc, #576]	; (800e83c <UART_SetConfig+0x2e8>)
 800e5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5fe:	f003 0303 	and.w	r3, r3, #3
 800e602:	2b03      	cmp	r3, #3
 800e604:	d81a      	bhi.n	800e63c <UART_SetConfig+0xe8>
 800e606:	a201      	add	r2, pc, #4	; (adr r2, 800e60c <UART_SetConfig+0xb8>)
 800e608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60c:	0800e61d 	.word	0x0800e61d
 800e610:	0800e62d 	.word	0x0800e62d
 800e614:	0800e625 	.word	0x0800e625
 800e618:	0800e635 	.word	0x0800e635
 800e61c:	2301      	movs	r3, #1
 800e61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e622:	e0d6      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e624:	2302      	movs	r3, #2
 800e626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e62a:	e0d2      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e62c:	2304      	movs	r3, #4
 800e62e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e632:	e0ce      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e634:	2308      	movs	r3, #8
 800e636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e63a:	e0ca      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e63c:	2310      	movs	r3, #16
 800e63e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e642:	e0c6      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a7d      	ldr	r2, [pc, #500]	; (800e840 <UART_SetConfig+0x2ec>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d138      	bne.n	800e6c0 <UART_SetConfig+0x16c>
 800e64e:	4b7b      	ldr	r3, [pc, #492]	; (800e83c <UART_SetConfig+0x2e8>)
 800e650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e654:	f003 030c 	and.w	r3, r3, #12
 800e658:	2b0c      	cmp	r3, #12
 800e65a:	d82d      	bhi.n	800e6b8 <UART_SetConfig+0x164>
 800e65c:	a201      	add	r2, pc, #4	; (adr r2, 800e664 <UART_SetConfig+0x110>)
 800e65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e662:	bf00      	nop
 800e664:	0800e699 	.word	0x0800e699
 800e668:	0800e6b9 	.word	0x0800e6b9
 800e66c:	0800e6b9 	.word	0x0800e6b9
 800e670:	0800e6b9 	.word	0x0800e6b9
 800e674:	0800e6a9 	.word	0x0800e6a9
 800e678:	0800e6b9 	.word	0x0800e6b9
 800e67c:	0800e6b9 	.word	0x0800e6b9
 800e680:	0800e6b9 	.word	0x0800e6b9
 800e684:	0800e6a1 	.word	0x0800e6a1
 800e688:	0800e6b9 	.word	0x0800e6b9
 800e68c:	0800e6b9 	.word	0x0800e6b9
 800e690:	0800e6b9 	.word	0x0800e6b9
 800e694:	0800e6b1 	.word	0x0800e6b1
 800e698:	2300      	movs	r3, #0
 800e69a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e69e:	e098      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6a6:	e094      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e6a8:	2304      	movs	r3, #4
 800e6aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6ae:	e090      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e6b0:	2308      	movs	r3, #8
 800e6b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6b6:	e08c      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e6b8:	2310      	movs	r3, #16
 800e6ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6be:	e088      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a5f      	ldr	r2, [pc, #380]	; (800e844 <UART_SetConfig+0x2f0>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d125      	bne.n	800e716 <UART_SetConfig+0x1c2>
 800e6ca:	4b5c      	ldr	r3, [pc, #368]	; (800e83c <UART_SetConfig+0x2e8>)
 800e6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e6d4:	2b30      	cmp	r3, #48	; 0x30
 800e6d6:	d016      	beq.n	800e706 <UART_SetConfig+0x1b2>
 800e6d8:	2b30      	cmp	r3, #48	; 0x30
 800e6da:	d818      	bhi.n	800e70e <UART_SetConfig+0x1ba>
 800e6dc:	2b20      	cmp	r3, #32
 800e6de:	d00a      	beq.n	800e6f6 <UART_SetConfig+0x1a2>
 800e6e0:	2b20      	cmp	r3, #32
 800e6e2:	d814      	bhi.n	800e70e <UART_SetConfig+0x1ba>
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d002      	beq.n	800e6ee <UART_SetConfig+0x19a>
 800e6e8:	2b10      	cmp	r3, #16
 800e6ea:	d008      	beq.n	800e6fe <UART_SetConfig+0x1aa>
 800e6ec:	e00f      	b.n	800e70e <UART_SetConfig+0x1ba>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6f4:	e06d      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6fc:	e069      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e6fe:	2304      	movs	r3, #4
 800e700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e704:	e065      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e706:	2308      	movs	r3, #8
 800e708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e70c:	e061      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e70e:	2310      	movs	r3, #16
 800e710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e714:	e05d      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a4b      	ldr	r2, [pc, #300]	; (800e848 <UART_SetConfig+0x2f4>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d125      	bne.n	800e76c <UART_SetConfig+0x218>
 800e720:	4b46      	ldr	r3, [pc, #280]	; (800e83c <UART_SetConfig+0x2e8>)
 800e722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e726:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e72a:	2bc0      	cmp	r3, #192	; 0xc0
 800e72c:	d016      	beq.n	800e75c <UART_SetConfig+0x208>
 800e72e:	2bc0      	cmp	r3, #192	; 0xc0
 800e730:	d818      	bhi.n	800e764 <UART_SetConfig+0x210>
 800e732:	2b80      	cmp	r3, #128	; 0x80
 800e734:	d00a      	beq.n	800e74c <UART_SetConfig+0x1f8>
 800e736:	2b80      	cmp	r3, #128	; 0x80
 800e738:	d814      	bhi.n	800e764 <UART_SetConfig+0x210>
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <UART_SetConfig+0x1f0>
 800e73e:	2b40      	cmp	r3, #64	; 0x40
 800e740:	d008      	beq.n	800e754 <UART_SetConfig+0x200>
 800e742:	e00f      	b.n	800e764 <UART_SetConfig+0x210>
 800e744:	2300      	movs	r3, #0
 800e746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e74a:	e042      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e74c:	2302      	movs	r3, #2
 800e74e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e752:	e03e      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e754:	2304      	movs	r3, #4
 800e756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e75a:	e03a      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e75c:	2308      	movs	r3, #8
 800e75e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e762:	e036      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e764:	2310      	movs	r3, #16
 800e766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e76a:	e032      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a30      	ldr	r2, [pc, #192]	; (800e834 <UART_SetConfig+0x2e0>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d12a      	bne.n	800e7cc <UART_SetConfig+0x278>
 800e776:	4b31      	ldr	r3, [pc, #196]	; (800e83c <UART_SetConfig+0x2e8>)
 800e778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e77c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e784:	d01a      	beq.n	800e7bc <UART_SetConfig+0x268>
 800e786:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e78a:	d81b      	bhi.n	800e7c4 <UART_SetConfig+0x270>
 800e78c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e790:	d00c      	beq.n	800e7ac <UART_SetConfig+0x258>
 800e792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e796:	d815      	bhi.n	800e7c4 <UART_SetConfig+0x270>
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d003      	beq.n	800e7a4 <UART_SetConfig+0x250>
 800e79c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7a0:	d008      	beq.n	800e7b4 <UART_SetConfig+0x260>
 800e7a2:	e00f      	b.n	800e7c4 <UART_SetConfig+0x270>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e7aa:	e012      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e7b2:	e00e      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e7b4:	2304      	movs	r3, #4
 800e7b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e7ba:	e00a      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e7bc:	2308      	movs	r3, #8
 800e7be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e7c2:	e006      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e7c4:	2310      	movs	r3, #16
 800e7c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e7ca:	e002      	b.n	800e7d2 <UART_SetConfig+0x27e>
 800e7cc:	2310      	movs	r3, #16
 800e7ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a17      	ldr	r2, [pc, #92]	; (800e834 <UART_SetConfig+0x2e0>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	f040 80a8 	bne.w	800e92e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e7e2:	2b08      	cmp	r3, #8
 800e7e4:	d834      	bhi.n	800e850 <UART_SetConfig+0x2fc>
 800e7e6:	a201      	add	r2, pc, #4	; (adr r2, 800e7ec <UART_SetConfig+0x298>)
 800e7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ec:	0800e811 	.word	0x0800e811
 800e7f0:	0800e851 	.word	0x0800e851
 800e7f4:	0800e819 	.word	0x0800e819
 800e7f8:	0800e851 	.word	0x0800e851
 800e7fc:	0800e81f 	.word	0x0800e81f
 800e800:	0800e851 	.word	0x0800e851
 800e804:	0800e851 	.word	0x0800e851
 800e808:	0800e851 	.word	0x0800e851
 800e80c:	0800e827 	.word	0x0800e827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e810:	f7fc fd34 	bl	800b27c <HAL_RCC_GetPCLK1Freq>
 800e814:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e816:	e021      	b.n	800e85c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e818:	4b0c      	ldr	r3, [pc, #48]	; (800e84c <UART_SetConfig+0x2f8>)
 800e81a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e81c:	e01e      	b.n	800e85c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e81e:	f7fc fcbf 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800e822:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e824:	e01a      	b.n	800e85c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e82a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e82c:	e016      	b.n	800e85c <UART_SetConfig+0x308>
 800e82e:	bf00      	nop
 800e830:	cfff69f3 	.word	0xcfff69f3
 800e834:	40008000 	.word	0x40008000
 800e838:	40013800 	.word	0x40013800
 800e83c:	40021000 	.word	0x40021000
 800e840:	40004400 	.word	0x40004400
 800e844:	40004800 	.word	0x40004800
 800e848:	40004c00 	.word	0x40004c00
 800e84c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e850:	2300      	movs	r3, #0
 800e852:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e854:	2301      	movs	r3, #1
 800e856:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e85a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f000 812a 	beq.w	800eab8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e868:	4a9e      	ldr	r2, [pc, #632]	; (800eae4 <UART_SetConfig+0x590>)
 800e86a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e86e:	461a      	mov	r2, r3
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e872:	fbb3 f3f2 	udiv	r3, r3, r2
 800e876:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	685a      	ldr	r2, [r3, #4]
 800e87c:	4613      	mov	r3, r2
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	4413      	add	r3, r2
 800e882:	69ba      	ldr	r2, [r7, #24]
 800e884:	429a      	cmp	r2, r3
 800e886:	d305      	bcc.n	800e894 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e88e:	69ba      	ldr	r2, [r7, #24]
 800e890:	429a      	cmp	r2, r3
 800e892:	d903      	bls.n	800e89c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800e894:	2301      	movs	r3, #1
 800e896:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e89a:	e10d      	b.n	800eab8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89e:	2200      	movs	r2, #0
 800e8a0:	60bb      	str	r3, [r7, #8]
 800e8a2:	60fa      	str	r2, [r7, #12]
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a8:	4a8e      	ldr	r2, [pc, #568]	; (800eae4 <UART_SetConfig+0x590>)
 800e8aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	603b      	str	r3, [r7, #0]
 800e8b4:	607a      	str	r2, [r7, #4]
 800e8b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e8be:	f7f2 fa0b 	bl	8000cd8 <__aeabi_uldivmod>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	f04f 0200 	mov.w	r2, #0
 800e8ce:	f04f 0300 	mov.w	r3, #0
 800e8d2:	020b      	lsls	r3, r1, #8
 800e8d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e8d8:	0202      	lsls	r2, r0, #8
 800e8da:	6979      	ldr	r1, [r7, #20]
 800e8dc:	6849      	ldr	r1, [r1, #4]
 800e8de:	0849      	lsrs	r1, r1, #1
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	4605      	mov	r5, r0
 800e8e6:	eb12 0804 	adds.w	r8, r2, r4
 800e8ea:	eb43 0905 	adc.w	r9, r3, r5
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	469a      	mov	sl, r3
 800e8f6:	4693      	mov	fp, r2
 800e8f8:	4652      	mov	r2, sl
 800e8fa:	465b      	mov	r3, fp
 800e8fc:	4640      	mov	r0, r8
 800e8fe:	4649      	mov	r1, r9
 800e900:	f7f2 f9ea 	bl	8000cd8 <__aeabi_uldivmod>
 800e904:	4602      	mov	r2, r0
 800e906:	460b      	mov	r3, r1
 800e908:	4613      	mov	r3, r2
 800e90a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e90c:	6a3b      	ldr	r3, [r7, #32]
 800e90e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e912:	d308      	bcc.n	800e926 <UART_SetConfig+0x3d2>
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e91a:	d204      	bcs.n	800e926 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	6a3a      	ldr	r2, [r7, #32]
 800e922:	60da      	str	r2, [r3, #12]
 800e924:	e0c8      	b.n	800eab8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e92c:	e0c4      	b.n	800eab8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	69db      	ldr	r3, [r3, #28]
 800e932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e936:	d167      	bne.n	800ea08 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800e938:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e93c:	2b08      	cmp	r3, #8
 800e93e:	d828      	bhi.n	800e992 <UART_SetConfig+0x43e>
 800e940:	a201      	add	r2, pc, #4	; (adr r2, 800e948 <UART_SetConfig+0x3f4>)
 800e942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e946:	bf00      	nop
 800e948:	0800e96d 	.word	0x0800e96d
 800e94c:	0800e975 	.word	0x0800e975
 800e950:	0800e97d 	.word	0x0800e97d
 800e954:	0800e993 	.word	0x0800e993
 800e958:	0800e983 	.word	0x0800e983
 800e95c:	0800e993 	.word	0x0800e993
 800e960:	0800e993 	.word	0x0800e993
 800e964:	0800e993 	.word	0x0800e993
 800e968:	0800e98b 	.word	0x0800e98b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e96c:	f7fc fc86 	bl	800b27c <HAL_RCC_GetPCLK1Freq>
 800e970:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e972:	e014      	b.n	800e99e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e974:	f7fc fc98 	bl	800b2a8 <HAL_RCC_GetPCLK2Freq>
 800e978:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e97a:	e010      	b.n	800e99e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e97c:	4b5a      	ldr	r3, [pc, #360]	; (800eae8 <UART_SetConfig+0x594>)
 800e97e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e980:	e00d      	b.n	800e99e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e982:	f7fc fc0d 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800e986:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e988:	e009      	b.n	800e99e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e98a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e98e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e990:	e005      	b.n	800e99e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800e992:	2300      	movs	r3, #0
 800e994:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e99c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f000 8089 	beq.w	800eab8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9aa:	4a4e      	ldr	r2, [pc, #312]	; (800eae4 <UART_SetConfig+0x590>)
 800e9ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9b8:	005a      	lsls	r2, r3, #1
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	085b      	lsrs	r3, r3, #1
 800e9c0:	441a      	add	r2, r3
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9cc:	6a3b      	ldr	r3, [r7, #32]
 800e9ce:	2b0f      	cmp	r3, #15
 800e9d0:	d916      	bls.n	800ea00 <UART_SetConfig+0x4ac>
 800e9d2:	6a3b      	ldr	r3, [r7, #32]
 800e9d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9d8:	d212      	bcs.n	800ea00 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e9da:	6a3b      	ldr	r3, [r7, #32]
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	f023 030f 	bic.w	r3, r3, #15
 800e9e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e9e4:	6a3b      	ldr	r3, [r7, #32]
 800e9e6:	085b      	lsrs	r3, r3, #1
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	f003 0307 	and.w	r3, r3, #7
 800e9ee:	b29a      	uxth	r2, r3
 800e9f0:	8bfb      	ldrh	r3, [r7, #30]
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	8bfa      	ldrh	r2, [r7, #30]
 800e9fc:	60da      	str	r2, [r3, #12]
 800e9fe:	e05b      	b.n	800eab8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ea00:	2301      	movs	r3, #1
 800ea02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ea06:	e057      	b.n	800eab8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ea08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ea0c:	2b08      	cmp	r3, #8
 800ea0e:	d828      	bhi.n	800ea62 <UART_SetConfig+0x50e>
 800ea10:	a201      	add	r2, pc, #4	; (adr r2, 800ea18 <UART_SetConfig+0x4c4>)
 800ea12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea16:	bf00      	nop
 800ea18:	0800ea3d 	.word	0x0800ea3d
 800ea1c:	0800ea45 	.word	0x0800ea45
 800ea20:	0800ea4d 	.word	0x0800ea4d
 800ea24:	0800ea63 	.word	0x0800ea63
 800ea28:	0800ea53 	.word	0x0800ea53
 800ea2c:	0800ea63 	.word	0x0800ea63
 800ea30:	0800ea63 	.word	0x0800ea63
 800ea34:	0800ea63 	.word	0x0800ea63
 800ea38:	0800ea5b 	.word	0x0800ea5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea3c:	f7fc fc1e 	bl	800b27c <HAL_RCC_GetPCLK1Freq>
 800ea40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea42:	e014      	b.n	800ea6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea44:	f7fc fc30 	bl	800b2a8 <HAL_RCC_GetPCLK2Freq>
 800ea48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea4a:	e010      	b.n	800ea6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea4c:	4b26      	ldr	r3, [pc, #152]	; (800eae8 <UART_SetConfig+0x594>)
 800ea4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ea50:	e00d      	b.n	800ea6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea52:	f7fc fba5 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800ea56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea58:	e009      	b.n	800ea6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ea60:	e005      	b.n	800ea6e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ea62:	2300      	movs	r3, #0
 800ea64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ea66:	2301      	movs	r3, #1
 800ea68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ea6c:	bf00      	nop
    }

    if (pclk != 0U)
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d021      	beq.n	800eab8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea78:	4a1a      	ldr	r2, [pc, #104]	; (800eae4 <UART_SetConfig+0x590>)
 800ea7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea7e:	461a      	mov	r2, r3
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	fbb3 f2f2 	udiv	r2, r3, r2
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	085b      	lsrs	r3, r3, #1
 800ea8c:	441a      	add	r2, r3
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea98:	6a3b      	ldr	r3, [r7, #32]
 800ea9a:	2b0f      	cmp	r3, #15
 800ea9c:	d909      	bls.n	800eab2 <UART_SetConfig+0x55e>
 800ea9e:	6a3b      	ldr	r3, [r7, #32]
 800eaa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaa4:	d205      	bcs.n	800eab2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eaa6:	6a3b      	ldr	r3, [r7, #32]
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	60da      	str	r2, [r3, #12]
 800eab0:	e002      	b.n	800eab8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2200      	movs	r2, #0
 800eacc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	2200      	movs	r2, #0
 800ead2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ead4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3730      	adds	r7, #48	; 0x30
 800eadc:	46bd      	mov	sp, r7
 800eade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eae2:	bf00      	nop
 800eae4:	08015fe8 	.word	0x08015fe8
 800eae8:	00f42400 	.word	0x00f42400

0800eaec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf8:	f003 0308 	and.w	r3, r3, #8
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00a      	beq.n	800eb16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	685b      	ldr	r3, [r3, #4]
 800eb06:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	430a      	orrs	r2, r1
 800eb14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1a:	f003 0301 	and.w	r3, r3, #1
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00a      	beq.n	800eb38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	430a      	orrs	r2, r1
 800eb36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3c:	f003 0302 	and.w	r3, r3, #2
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00a      	beq.n	800eb5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	430a      	orrs	r2, r1
 800eb58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb5e:	f003 0304 	and.w	r3, r3, #4
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d00a      	beq.n	800eb7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	430a      	orrs	r2, r1
 800eb7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb80:	f003 0310 	and.w	r3, r3, #16
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00a      	beq.n	800eb9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	430a      	orrs	r2, r1
 800eb9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba2:	f003 0320 	and.w	r3, r3, #32
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00a      	beq.n	800ebc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	689b      	ldr	r3, [r3, #8]
 800ebb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	430a      	orrs	r2, r1
 800ebbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d01a      	beq.n	800ec02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	430a      	orrs	r2, r1
 800ebe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebea:	d10a      	bne.n	800ec02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	430a      	orrs	r2, r1
 800ec00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00a      	beq.n	800ec24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	430a      	orrs	r2, r1
 800ec22:	605a      	str	r2, [r3, #4]
  }
}
 800ec24:	bf00      	nop
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b098      	sub	sp, #96	; 0x60
 800ec34:	af02      	add	r7, sp, #8
 800ec36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec40:	f7f7 fe8a 	bl	8006958 <HAL_GetTick>
 800ec44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f003 0308 	and.w	r3, r3, #8
 800ec50:	2b08      	cmp	r3, #8
 800ec52:	d12f      	bne.n	800ecb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 f88e 	bl	800ed84 <UART_WaitOnFlagUntilTimeout>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d022      	beq.n	800ecb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec76:	e853 3f00 	ldrex	r3, [r3]
 800ec7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec82:	653b      	str	r3, [r7, #80]	; 0x50
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec8c:	647b      	str	r3, [r7, #68]	; 0x44
 800ec8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec94:	e841 2300 	strex	r3, r2, [r1]
 800ec98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1e6      	bne.n	800ec6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2220      	movs	r2, #32
 800eca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecb0:	2303      	movs	r3, #3
 800ecb2:	e063      	b.n	800ed7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f003 0304 	and.w	r3, r3, #4
 800ecbe:	2b04      	cmp	r3, #4
 800ecc0:	d149      	bne.n	800ed56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecca:	2200      	movs	r2, #0
 800eccc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 f857 	bl	800ed84 <UART_WaitOnFlagUntilTimeout>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d03c      	beq.n	800ed56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ece2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece4:	e853 3f00 	ldrex	r3, [r3]
 800ece8:	623b      	str	r3, [r7, #32]
   return(result);
 800ecea:	6a3b      	ldr	r3, [r7, #32]
 800ecec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ecf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecfa:	633b      	str	r3, [r7, #48]	; 0x30
 800ecfc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed02:	e841 2300 	strex	r3, r2, [r1]
 800ed06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1e6      	bne.n	800ecdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	3308      	adds	r3, #8
 800ed14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	e853 3f00 	ldrex	r3, [r3]
 800ed1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f023 0301 	bic.w	r3, r3, #1
 800ed24:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	3308      	adds	r3, #8
 800ed2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed2e:	61fa      	str	r2, [r7, #28]
 800ed30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed32:	69b9      	ldr	r1, [r7, #24]
 800ed34:	69fa      	ldr	r2, [r7, #28]
 800ed36:	e841 2300 	strex	r3, r2, [r1]
 800ed3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1e5      	bne.n	800ed0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2220      	movs	r2, #32
 800ed46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed52:	2303      	movs	r3, #3
 800ed54:	e012      	b.n	800ed7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2220      	movs	r2, #32
 800ed5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2220      	movs	r2, #32
 800ed62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3758      	adds	r7, #88	; 0x58
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	603b      	str	r3, [r7, #0]
 800ed90:	4613      	mov	r3, r2
 800ed92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed94:	e04f      	b.n	800ee36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9c:	d04b      	beq.n	800ee36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed9e:	f7f7 fddb 	bl	8006958 <HAL_GetTick>
 800eda2:	4602      	mov	r2, r0
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	69ba      	ldr	r2, [r7, #24]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d302      	bcc.n	800edb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d101      	bne.n	800edb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800edb4:	2303      	movs	r3, #3
 800edb6:	e04e      	b.n	800ee56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f003 0304 	and.w	r3, r3, #4
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d037      	beq.n	800ee36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	2b80      	cmp	r3, #128	; 0x80
 800edca:	d034      	beq.n	800ee36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	2b40      	cmp	r3, #64	; 0x40
 800edd0:	d031      	beq.n	800ee36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	69db      	ldr	r3, [r3, #28]
 800edd8:	f003 0308 	and.w	r3, r3, #8
 800eddc:	2b08      	cmp	r3, #8
 800edde:	d110      	bne.n	800ee02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2208      	movs	r2, #8
 800ede6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f000 f838 	bl	800ee5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2208      	movs	r2, #8
 800edf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2200      	movs	r2, #0
 800edfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800edfe:	2301      	movs	r3, #1
 800ee00:	e029      	b.n	800ee56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	69db      	ldr	r3, [r3, #28]
 800ee08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee10:	d111      	bne.n	800ee36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 f81e 	bl	800ee5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2220      	movs	r2, #32
 800ee26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ee32:	2303      	movs	r3, #3
 800ee34:	e00f      	b.n	800ee56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	69da      	ldr	r2, [r3, #28]
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	4013      	ands	r3, r2
 800ee40:	68ba      	ldr	r2, [r7, #8]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	bf0c      	ite	eq
 800ee46:	2301      	moveq	r3, #1
 800ee48:	2300      	movne	r3, #0
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	79fb      	ldrb	r3, [r7, #7]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d0a0      	beq.n	800ed96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee5e:	b480      	push	{r7}
 800ee60:	b095      	sub	sp, #84	; 0x54
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee6e:	e853 3f00 	ldrex	r3, [r3]
 800ee72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ee74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	461a      	mov	r2, r3
 800ee82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee84:	643b      	str	r3, [r7, #64]	; 0x40
 800ee86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee8c:	e841 2300 	strex	r3, r2, [r1]
 800ee90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d1e6      	bne.n	800ee66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	e853 3f00 	ldrex	r3, [r3]
 800eea6:	61fb      	str	r3, [r7, #28]
   return(result);
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eeae:	f023 0301 	bic.w	r3, r3, #1
 800eeb2:	64bb      	str	r3, [r7, #72]	; 0x48
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	3308      	adds	r3, #8
 800eeba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eec4:	e841 2300 	strex	r3, r2, [r1]
 800eec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1e3      	bne.n	800ee98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d118      	bne.n	800ef0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	e853 3f00 	ldrex	r3, [r3]
 800eee4:	60bb      	str	r3, [r7, #8]
   return(result);
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	f023 0310 	bic.w	r3, r3, #16
 800eeec:	647b      	str	r3, [r7, #68]	; 0x44
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	461a      	mov	r2, r3
 800eef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eef6:	61bb      	str	r3, [r7, #24]
 800eef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eefa:	6979      	ldr	r1, [r7, #20]
 800eefc:	69ba      	ldr	r2, [r7, #24]
 800eefe:	e841 2300 	strex	r3, r2, [r1]
 800ef02:	613b      	str	r3, [r7, #16]
   return(result);
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1e6      	bne.n	800eed8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2220      	movs	r2, #32
 800ef0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ef1e:	bf00      	nop
 800ef20:	3754      	adds	r7, #84	; 0x54
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b084      	sub	sp, #16
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f7ff faed 	bl	800e528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef4e:	bf00      	nop
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ef56:	b480      	push	{r7}
 800ef58:	b08f      	sub	sp, #60	; 0x3c
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef64:	2b21      	cmp	r3, #33	; 0x21
 800ef66:	d14c      	bne.n	800f002 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d132      	bne.n	800efda <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7a:	6a3b      	ldr	r3, [r7, #32]
 800ef7c:	e853 3f00 	ldrex	r3, [r3]
 800ef80:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef88:	637b      	str	r3, [r7, #52]	; 0x34
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef94:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef9a:	e841 2300 	strex	r3, r2, [r1]
 800ef9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1e6      	bne.n	800ef74 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	e853 3f00 	ldrex	r3, [r3]
 800efb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efba:	633b      	str	r3, [r7, #48]	; 0x30
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	461a      	mov	r2, r3
 800efc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc4:	61bb      	str	r3, [r7, #24]
 800efc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efc8:	6979      	ldr	r1, [r7, #20]
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	e841 2300 	strex	r3, r2, [r1]
 800efd0:	613b      	str	r3, [r7, #16]
   return(result);
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d1e6      	bne.n	800efa6 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800efd8:	e013      	b.n	800f002 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efde:	781a      	ldrb	r2, [r3, #0]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efea:	1c5a      	adds	r2, r3, #1
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	3b01      	subs	r3, #1
 800effa:	b29a      	uxth	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f002:	bf00      	nop
 800f004:	373c      	adds	r7, #60	; 0x3c
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr

0800f00e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f00e:	b480      	push	{r7}
 800f010:	b091      	sub	sp, #68	; 0x44
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f01c:	2b21      	cmp	r3, #33	; 0x21
 800f01e:	d151      	bne.n	800f0c4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f026:	b29b      	uxth	r3, r3
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d132      	bne.n	800f092 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f034:	e853 3f00 	ldrex	r3, [r3]
 800f038:	623b      	str	r3, [r7, #32]
   return(result);
 800f03a:	6a3b      	ldr	r3, [r7, #32]
 800f03c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f040:	63bb      	str	r3, [r7, #56]	; 0x38
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	461a      	mov	r2, r3
 800f048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04a:	633b      	str	r3, [r7, #48]	; 0x30
 800f04c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f052:	e841 2300 	strex	r3, r2, [r1]
 800f056:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d1e6      	bne.n	800f02c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	e853 3f00 	ldrex	r3, [r3]
 800f06a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f072:	637b      	str	r3, [r7, #52]	; 0x34
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	461a      	mov	r2, r3
 800f07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f07c:	61fb      	str	r3, [r7, #28]
 800f07e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f080:	69b9      	ldr	r1, [r7, #24]
 800f082:	69fa      	ldr	r2, [r7, #28]
 800f084:	e841 2300 	strex	r3, r2, [r1]
 800f088:	617b      	str	r3, [r7, #20]
   return(result);
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d1e6      	bne.n	800f05e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f090:	e018      	b.n	800f0c4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f096:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f09a:	881b      	ldrh	r3, [r3, #0]
 800f09c:	461a      	mov	r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f0a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0ac:	1c9a      	adds	r2, r3, #2
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f0c4:	bf00      	nop
 800f0c6:	3744      	adds	r7, #68	; 0x44
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b091      	sub	sp, #68	; 0x44
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0de:	2b21      	cmp	r3, #33	; 0x21
 800f0e0:	d160      	bne.n	800f1a4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f0ea:	e057      	b.n	800f19c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d133      	bne.n	800f160 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	3308      	adds	r3, #8
 800f0fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	e853 3f00 	ldrex	r3, [r3]
 800f106:	623b      	str	r3, [r7, #32]
   return(result);
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f10e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	3308      	adds	r3, #8
 800f116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f118:	633a      	str	r2, [r7, #48]	; 0x30
 800f11a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f11e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f120:	e841 2300 	strex	r3, r2, [r1]
 800f124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1e5      	bne.n	800f0f8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	e853 3f00 	ldrex	r3, [r3]
 800f138:	60fb      	str	r3, [r7, #12]
   return(result);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f140:	637b      	str	r3, [r7, #52]	; 0x34
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14a:	61fb      	str	r3, [r7, #28]
 800f14c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14e:	69b9      	ldr	r1, [r7, #24]
 800f150:	69fa      	ldr	r2, [r7, #28]
 800f152:	e841 2300 	strex	r3, r2, [r1]
 800f156:	617b      	str	r3, [r7, #20]
   return(result);
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1e6      	bne.n	800f12c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f15e:	e021      	b.n	800f1a4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	69db      	ldr	r3, [r3, #28]
 800f166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d013      	beq.n	800f196 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f172:	781a      	ldrb	r2, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f17e:	1c5a      	adds	r2, r3, #1
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	3b01      	subs	r3, #1
 800f18e:	b29a      	uxth	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f196:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f198:	3b01      	subs	r3, #1
 800f19a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f19c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1a4      	bne.n	800f0ec <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f1a2:	e7ff      	b.n	800f1a4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800f1a4:	bf00      	nop
 800f1a6:	3744      	adds	r7, #68	; 0x44
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b091      	sub	sp, #68	; 0x44
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1be:	2b21      	cmp	r3, #33	; 0x21
 800f1c0:	d165      	bne.n	800f28e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f1ca:	e05c      	b.n	800f286 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d133      	bne.n	800f240 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	3308      	adds	r3, #8
 800f1de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e0:	6a3b      	ldr	r3, [r7, #32]
 800f1e2:	e853 3f00 	ldrex	r3, [r3]
 800f1e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3308      	adds	r3, #8
 800f1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f200:	e841 2300 	strex	r3, r2, [r1]
 800f204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1e5      	bne.n	800f1d8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	e853 3f00 	ldrex	r3, [r3]
 800f218:	60bb      	str	r3, [r7, #8]
   return(result);
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f220:	633b      	str	r3, [r7, #48]	; 0x30
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	461a      	mov	r2, r3
 800f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22a:	61bb      	str	r3, [r7, #24]
 800f22c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f22e:	6979      	ldr	r1, [r7, #20]
 800f230:	69ba      	ldr	r2, [r7, #24]
 800f232:	e841 2300 	strex	r3, r2, [r1]
 800f236:	613b      	str	r3, [r7, #16]
   return(result);
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d1e6      	bne.n	800f20c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f23e:	e026      	b.n	800f28e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	69db      	ldr	r3, [r3, #28]
 800f246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d018      	beq.n	800f280 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f252:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	881b      	ldrh	r3, [r3, #0]
 800f258:	461a      	mov	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f262:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f268:	1c9a      	adds	r2, r3, #2
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f274:	b29b      	uxth	r3, r3
 800f276:	3b01      	subs	r3, #1
 800f278:	b29a      	uxth	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f280:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f282:	3b01      	subs	r3, #1
 800f284:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f286:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d19f      	bne.n	800f1cc <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f28c:	e7ff      	b.n	800f28e <UART_TxISR_16BIT_FIFOEN+0xde>
 800f28e:	bf00      	nop
 800f290:	3744      	adds	r7, #68	; 0x44
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b088      	sub	sp, #32
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	e853 3f00 	ldrex	r3, [r3]
 800f2ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2b6:	61fb      	str	r3, [r7, #28]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	61bb      	str	r3, [r7, #24]
 800f2c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2c4:	6979      	ldr	r1, [r7, #20]
 800f2c6:	69ba      	ldr	r2, [r7, #24]
 800f2c8:	e841 2300 	strex	r3, r2, [r1]
 800f2cc:	613b      	str	r3, [r7, #16]
   return(result);
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d1e6      	bne.n	800f2a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2220      	movs	r2, #32
 800f2d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7ff f916 	bl	800e514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2e8:	bf00      	nop
 800f2ea:	3720      	adds	r7, #32
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f2f8:	bf00      	nop
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f30c:	bf00      	nop
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f320:	bf00      	nop
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b085      	sub	sp, #20
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d101      	bne.n	800f342 <HAL_UARTEx_DisableFifoMode+0x16>
 800f33e:	2302      	movs	r3, #2
 800f340:	e027      	b.n	800f392 <HAL_UARTEx_DisableFifoMode+0x66>
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2201      	movs	r2, #1
 800f346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2224      	movs	r2, #36	; 0x24
 800f34e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f022 0201 	bic.w	r2, r2, #1
 800f368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2220      	movs	r2, #32
 800f384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2200      	movs	r2, #0
 800f38c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f390:	2300      	movs	r3, #0
}
 800f392:	4618      	mov	r0, r3
 800f394:	3714      	adds	r7, #20
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr

0800f39e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b084      	sub	sp, #16
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
 800f3a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d101      	bne.n	800f3b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f3b2:	2302      	movs	r3, #2
 800f3b4:	e02d      	b.n	800f412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2224      	movs	r2, #36	; 0x24
 800f3c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f022 0201 	bic.w	r2, r2, #1
 800f3dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	430a      	orrs	r2, r1
 800f3f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 f850 	bl	800f498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2220      	movs	r2, #32
 800f404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b084      	sub	sp, #16
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
 800f422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d101      	bne.n	800f432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f42e:	2302      	movs	r3, #2
 800f430:	e02d      	b.n	800f48e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2201      	movs	r2, #1
 800f436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2224      	movs	r2, #36	; 0x24
 800f43e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f022 0201 	bic.w	r2, r2, #1
 800f458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	683a      	ldr	r2, [r7, #0]
 800f46a:	430a      	orrs	r2, r1
 800f46c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 f812 	bl	800f498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2220      	movs	r2, #32
 800f480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
	...

0800f498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d108      	bne.n	800f4ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f4b8:	e031      	b.n	800f51e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f4ba:	2308      	movs	r3, #8
 800f4bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f4be:	2308      	movs	r3, #8
 800f4c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	0e5b      	lsrs	r3, r3, #25
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	f003 0307 	and.w	r3, r3, #7
 800f4d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	689b      	ldr	r3, [r3, #8]
 800f4d8:	0f5b      	lsrs	r3, r3, #29
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	f003 0307 	and.w	r3, r3, #7
 800f4e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f4e2:	7bbb      	ldrb	r3, [r7, #14]
 800f4e4:	7b3a      	ldrb	r2, [r7, #12]
 800f4e6:	4911      	ldr	r1, [pc, #68]	; (800f52c <UARTEx_SetNbDataToProcess+0x94>)
 800f4e8:	5c8a      	ldrb	r2, [r1, r2]
 800f4ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f4ee:	7b3a      	ldrb	r2, [r7, #12]
 800f4f0:	490f      	ldr	r1, [pc, #60]	; (800f530 <UARTEx_SetNbDataToProcess+0x98>)
 800f4f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f4f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4f8:	b29a      	uxth	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f500:	7bfb      	ldrb	r3, [r7, #15]
 800f502:	7b7a      	ldrb	r2, [r7, #13]
 800f504:	4909      	ldr	r1, [pc, #36]	; (800f52c <UARTEx_SetNbDataToProcess+0x94>)
 800f506:	5c8a      	ldrb	r2, [r1, r2]
 800f508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f50c:	7b7a      	ldrb	r2, [r7, #13]
 800f50e:	4908      	ldr	r1, [pc, #32]	; (800f530 <UARTEx_SetNbDataToProcess+0x98>)
 800f510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f512:	fb93 f3f2 	sdiv	r3, r3, r2
 800f516:	b29a      	uxth	r2, r3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f51e:	bf00      	nop
 800f520:	3714      	adds	r7, #20
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop
 800f52c:	08016000 	.word	0x08016000
 800f530:	08016008 	.word	0x08016008

0800f534 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800f534:	b480      	push	{r7}
 800f536:	b085      	sub	sp, #20
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	1c5a      	adds	r2, r3, #1
 800f540:	607a      	str	r2, [r7, #4]
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800f546:	89fb      	ldrh	r3, [r7, #14]
 800f548:	021b      	lsls	r3, r3, #8
 800f54a:	b21a      	sxth	r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	b21b      	sxth	r3, r3
 800f552:	4313      	orrs	r3, r2
 800f554:	b21b      	sxth	r3, r3
 800f556:	b29b      	uxth	r3, r3
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3714      	adds	r7, #20
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800f564:	b480      	push	{r7}
 800f566:	b085      	sub	sp, #20
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	683a      	ldr	r2, [r7, #0]
 800f572:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2204      	movs	r2, #4
 800f578:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2204      	movs	r2, #4
 800f57e:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f588:	b29a      	uxth	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f590:	b29b      	uxth	r3, r3
 800f592:	1ad3      	subs	r3, r2, r3
 800f594:	b29b      	uxth	r3, r3
 800f596:	3b01      	subs	r3, #1
 800f598:	b29b      	uxth	r3, r3
 800f59a:	b21a      	sxth	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	1ad3      	subs	r3, r2, r3
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	b21a      	sxth	r2, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2200      	movs	r2, #0
 800f60a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2200      	movs	r2, #0
 800f616:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2200      	movs	r2, #0
 800f61c:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2200      	movs	r2, #0
 800f622:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800f62a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f634:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2200      	movs	r2, #0
 800f644:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2200      	movs	r2, #0
 800f64a:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f652:	2300      	movs	r3, #0
 800f654:	73fb      	strb	r3, [r7, #15]
 800f656:	e010      	b.n	800f67a <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800f658:	7bfb      	ldrb	r3, [r7, #15]
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	330a      	adds	r3, #10
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	4413      	add	r3, r2
 800f662:	2200      	movs	r2, #0
 800f664:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800f666:	7bfb      	ldrb	r3, [r7, #15]
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	330a      	adds	r3, #10
 800f66c:	00db      	lsls	r3, r3, #3
 800f66e:	4413      	add	r3, r2
 800f670:	2200      	movs	r2, #0
 800f672:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f674:	7bfb      	ldrb	r3, [r7, #15]
 800f676:	3301      	adds	r3, #1
 800f678:	73fb      	strb	r3, [r7, #15]
 800f67a:	7bfb      	ldrb	r3, [r7, #15]
 800f67c:	2b03      	cmp	r3, #3
 800f67e:	d9eb      	bls.n	800f658 <UG_Init+0xf4>
   }

   gui = g;
 800f680:	4a04      	ldr	r2, [pc, #16]	; (800f694 <UG_Init+0x130>)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6013      	str	r3, [r2, #0]
   return 1;
 800f686:	2301      	movs	r3, #1
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3714      	adds	r7, #20
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr
 800f694:	20002278 	.word	0x20002278

0800f698 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800f6a0:	4b04      	ldr	r3, [pc, #16]	; (800f6b4 <UG_FontSelect+0x1c>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f6a8:	bf00      	nop
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	20002278 	.word	0x20002278

0800f6b8 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af02      	add	r7, sp, #8
 800f6be:	4603      	mov	r3, r0
 800f6c0:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800f6c2:	4b0e      	ldr	r3, [pc, #56]	; (800f6fc <UG_FillScreen+0x44>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	b21a      	sxth	r2, r3
 800f6d4:	4b09      	ldr	r3, [pc, #36]	; (800f6fc <UG_FillScreen+0x44>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	b219      	sxth	r1, r3
 800f6e6:	88fb      	ldrh	r3, [r7, #6]
 800f6e8:	9300      	str	r3, [sp, #0]
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	f000 f806 	bl	800f700 <UG_FillFrame>
}
 800f6f4:	bf00      	nop
 800f6f6:	3708      	adds	r7, #8
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	20002278 	.word	0x20002278

0800f700 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f700:	b5b0      	push	{r4, r5, r7, lr}
 800f702:	b086      	sub	sp, #24
 800f704:	af02      	add	r7, sp, #8
 800f706:	4604      	mov	r4, r0
 800f708:	4608      	mov	r0, r1
 800f70a:	4611      	mov	r1, r2
 800f70c:	461a      	mov	r2, r3
 800f70e:	4623      	mov	r3, r4
 800f710:	80fb      	strh	r3, [r7, #6]
 800f712:	4603      	mov	r3, r0
 800f714:	80bb      	strh	r3, [r7, #4]
 800f716:	460b      	mov	r3, r1
 800f718:	807b      	strh	r3, [r7, #2]
 800f71a:	4613      	mov	r3, r2
 800f71c:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800f71e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f726:	429a      	cmp	r2, r3
 800f728:	da05      	bge.n	800f736 <UG_FillFrame+0x36>
     swap(x1,x2);
 800f72a:	88fb      	ldrh	r3, [r7, #6]
 800f72c:	817b      	strh	r3, [r7, #10]
 800f72e:	887b      	ldrh	r3, [r7, #2]
 800f730:	80fb      	strh	r3, [r7, #6]
 800f732:	897b      	ldrh	r3, [r7, #10]
 800f734:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800f736:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f73a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f73e:	429a      	cmp	r2, r3
 800f740:	da05      	bge.n	800f74e <UG_FillFrame+0x4e>
     swap(y1,y2);
 800f742:	88bb      	ldrh	r3, [r7, #4]
 800f744:	813b      	strh	r3, [r7, #8]
 800f746:	883b      	ldrh	r3, [r7, #0]
 800f748:	80bb      	strh	r3, [r7, #4]
 800f74a:	893b      	ldrh	r3, [r7, #8]
 800f74c:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800f74e:	4b24      	ldr	r3, [pc, #144]	; (800f7e0 <UG_FillFrame+0xe0>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f756:	f003 0302 	and.w	r3, r3, #2
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d012      	beq.n	800f784 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f75e:	4b20      	ldr	r3, [pc, #128]	; (800f7e0 <UG_FillFrame+0xe0>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f764:	461d      	mov	r5, r3
 800f766:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f76a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f76e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f772:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f776:	8c3b      	ldrh	r3, [r7, #32]
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	4623      	mov	r3, r4
 800f77c:	47a8      	blx	r5
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d028      	beq.n	800f7d6 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 800f784:	88bb      	ldrh	r3, [r7, #4]
 800f786:	81bb      	strh	r3, [r7, #12]
 800f788:	e01e      	b.n	800f7c8 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800f78a:	88fb      	ldrh	r3, [r7, #6]
 800f78c:	81fb      	strh	r3, [r7, #14]
 800f78e:	e00f      	b.n	800f7b0 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 800f790:	4b13      	ldr	r3, [pc, #76]	; (800f7e0 <UG_FillFrame+0xe0>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	8c3a      	ldrh	r2, [r7, #32]
 800f79a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800f79e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800f7a2:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800f7a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	81fb      	strh	r3, [r7, #14]
 800f7b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f7b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	dde9      	ble.n	800f790 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800f7bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	81bb      	strh	r3, [r7, #12]
 800f7c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f7cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	ddda      	ble.n	800f78a <UG_FillFrame+0x8a>
 800f7d4:	e000      	b.n	800f7d8 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f7d6:	bf00      	nop
      }
   }
}
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	20002278 	.word	0x20002278

0800f7e4 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f7e4:	b590      	push	{r4, r7, lr}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af02      	add	r7, sp, #8
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4608      	mov	r0, r1
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	4623      	mov	r3, r4
 800f7f4:	80fb      	strh	r3, [r7, #6]
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	80bb      	strh	r3, [r7, #4]
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	807b      	strh	r3, [r7, #2]
 800f7fe:	4613      	mov	r3, r2
 800f800:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 800f802:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800f806:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f80a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f80e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f812:	8b3b      	ldrh	r3, [r7, #24]
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	4623      	mov	r3, r4
 800f818:	f000 f912 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 800f81c:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f820:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f824:	f9b7 1000 	ldrsh.w	r1, [r7]
 800f828:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f82c:	8b3b      	ldrh	r3, [r7, #24]
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	4623      	mov	r3, r4
 800f832:	f000 f905 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 800f836:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f83a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f83e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f842:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f846:	8b3b      	ldrh	r3, [r7, #24]
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	4623      	mov	r3, r4
 800f84c:	f000 f8f8 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800f850:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f854:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f858:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f85c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800f860:	8b3b      	ldrh	r3, [r7, #24]
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	4623      	mov	r3, r4
 800f866:	f000 f8eb 	bl	800fa40 <UG_DrawLine>
}
 800f86a:	bf00      	nop
 800f86c:	370c      	adds	r7, #12
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd90      	pop	{r4, r7, pc}
	...

0800f874 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 800f874:	b590      	push	{r4, r7, lr}
 800f876:	b087      	sub	sp, #28
 800f878:	af00      	add	r7, sp, #0
 800f87a:	4604      	mov	r4, r0
 800f87c:	4608      	mov	r0, r1
 800f87e:	4611      	mov	r1, r2
 800f880:	461a      	mov	r2, r3
 800f882:	4623      	mov	r3, r4
 800f884:	80fb      	strh	r3, [r7, #6]
 800f886:	4603      	mov	r3, r0
 800f888:	80bb      	strh	r3, [r7, #4]
 800f88a:	460b      	mov	r3, r1
 800f88c:	807b      	strh	r3, [r7, #2]
 800f88e:	4613      	mov	r3, r2
 800f890:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 800f892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f896:	2b00      	cmp	r3, #0
 800f898:	f2c0 80c8 	blt.w	800fa2c <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 800f89c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	f2c0 80c5 	blt.w	800fa30 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 800f8a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f340 80c2 	ble.w	800fa34 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 800f8b0:	887b      	ldrh	r3, [r7, #2]
 800f8b2:	005b      	lsls	r3, r3, #1
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	f1c3 0301 	rsb	r3, r3, #1
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	827b      	strh	r3, [r7, #18]
   yd = 0;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	823b      	strh	r3, [r7, #16]
   e = 0;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	81fb      	strh	r3, [r7, #14]
   x = r;
 800f8c6:	887b      	ldrh	r3, [r7, #2]
 800f8c8:	82fb      	strh	r3, [r7, #22]
   y = 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 800f8ce:	e0a5      	b.n	800fa1c <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 800f8d0:	4b5a      	ldr	r3, [pc, #360]	; (800fa3c <UG_DrawCircle+0x1c8>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	88f9      	ldrh	r1, [r7, #6]
 800f8da:	8afa      	ldrh	r2, [r7, #22]
 800f8dc:	1a8a      	subs	r2, r1, r2
 800f8de:	b292      	uxth	r2, r2
 800f8e0:	b210      	sxth	r0, r2
 800f8e2:	88b9      	ldrh	r1, [r7, #4]
 800f8e4:	8aba      	ldrh	r2, [r7, #20]
 800f8e6:	440a      	add	r2, r1
 800f8e8:	b292      	uxth	r2, r2
 800f8ea:	b211      	sxth	r1, r2
 800f8ec:	883a      	ldrh	r2, [r7, #0]
 800f8ee:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 800f8f0:	4b52      	ldr	r3, [pc, #328]	; (800fa3c <UG_DrawCircle+0x1c8>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	88f9      	ldrh	r1, [r7, #6]
 800f8fa:	8afa      	ldrh	r2, [r7, #22]
 800f8fc:	1a8a      	subs	r2, r1, r2
 800f8fe:	b292      	uxth	r2, r2
 800f900:	b210      	sxth	r0, r2
 800f902:	88b9      	ldrh	r1, [r7, #4]
 800f904:	8aba      	ldrh	r2, [r7, #20]
 800f906:	1a8a      	subs	r2, r1, r2
 800f908:	b292      	uxth	r2, r2
 800f90a:	b211      	sxth	r1, r2
 800f90c:	883a      	ldrh	r2, [r7, #0]
 800f90e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 800f910:	4b4a      	ldr	r3, [pc, #296]	; (800fa3c <UG_DrawCircle+0x1c8>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	88f9      	ldrh	r1, [r7, #6]
 800f91a:	8afa      	ldrh	r2, [r7, #22]
 800f91c:	440a      	add	r2, r1
 800f91e:	b292      	uxth	r2, r2
 800f920:	b210      	sxth	r0, r2
 800f922:	88b9      	ldrh	r1, [r7, #4]
 800f924:	8aba      	ldrh	r2, [r7, #20]
 800f926:	440a      	add	r2, r1
 800f928:	b292      	uxth	r2, r2
 800f92a:	b211      	sxth	r1, r2
 800f92c:	883a      	ldrh	r2, [r7, #0]
 800f92e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 800f930:	4b42      	ldr	r3, [pc, #264]	; (800fa3c <UG_DrawCircle+0x1c8>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	88f9      	ldrh	r1, [r7, #6]
 800f93a:	8afa      	ldrh	r2, [r7, #22]
 800f93c:	440a      	add	r2, r1
 800f93e:	b292      	uxth	r2, r2
 800f940:	b210      	sxth	r0, r2
 800f942:	88b9      	ldrh	r1, [r7, #4]
 800f944:	8aba      	ldrh	r2, [r7, #20]
 800f946:	1a8a      	subs	r2, r1, r2
 800f948:	b292      	uxth	r2, r2
 800f94a:	b211      	sxth	r1, r2
 800f94c:	883a      	ldrh	r2, [r7, #0]
 800f94e:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 800f950:	4b3a      	ldr	r3, [pc, #232]	; (800fa3c <UG_DrawCircle+0x1c8>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	88f9      	ldrh	r1, [r7, #6]
 800f95a:	8aba      	ldrh	r2, [r7, #20]
 800f95c:	1a8a      	subs	r2, r1, r2
 800f95e:	b292      	uxth	r2, r2
 800f960:	b210      	sxth	r0, r2
 800f962:	88b9      	ldrh	r1, [r7, #4]
 800f964:	8afa      	ldrh	r2, [r7, #22]
 800f966:	440a      	add	r2, r1
 800f968:	b292      	uxth	r2, r2
 800f96a:	b211      	sxth	r1, r2
 800f96c:	883a      	ldrh	r2, [r7, #0]
 800f96e:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 800f970:	4b32      	ldr	r3, [pc, #200]	; (800fa3c <UG_DrawCircle+0x1c8>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	88f9      	ldrh	r1, [r7, #6]
 800f97a:	8aba      	ldrh	r2, [r7, #20]
 800f97c:	1a8a      	subs	r2, r1, r2
 800f97e:	b292      	uxth	r2, r2
 800f980:	b210      	sxth	r0, r2
 800f982:	88b9      	ldrh	r1, [r7, #4]
 800f984:	8afa      	ldrh	r2, [r7, #22]
 800f986:	1a8a      	subs	r2, r1, r2
 800f988:	b292      	uxth	r2, r2
 800f98a:	b211      	sxth	r1, r2
 800f98c:	883a      	ldrh	r2, [r7, #0]
 800f98e:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 800f990:	4b2a      	ldr	r3, [pc, #168]	; (800fa3c <UG_DrawCircle+0x1c8>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	88f9      	ldrh	r1, [r7, #6]
 800f99a:	8aba      	ldrh	r2, [r7, #20]
 800f99c:	440a      	add	r2, r1
 800f99e:	b292      	uxth	r2, r2
 800f9a0:	b210      	sxth	r0, r2
 800f9a2:	88b9      	ldrh	r1, [r7, #4]
 800f9a4:	8afa      	ldrh	r2, [r7, #22]
 800f9a6:	440a      	add	r2, r1
 800f9a8:	b292      	uxth	r2, r2
 800f9aa:	b211      	sxth	r1, r2
 800f9ac:	883a      	ldrh	r2, [r7, #0]
 800f9ae:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 800f9b0:	4b22      	ldr	r3, [pc, #136]	; (800fa3c <UG_DrawCircle+0x1c8>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	88f9      	ldrh	r1, [r7, #6]
 800f9ba:	8aba      	ldrh	r2, [r7, #20]
 800f9bc:	440a      	add	r2, r1
 800f9be:	b292      	uxth	r2, r2
 800f9c0:	b210      	sxth	r0, r2
 800f9c2:	88b9      	ldrh	r1, [r7, #4]
 800f9c4:	8afa      	ldrh	r2, [r7, #22]
 800f9c6:	1a8a      	subs	r2, r1, r2
 800f9c8:	b292      	uxth	r2, r2
 800f9ca:	b211      	sxth	r1, r2
 800f9cc:	883a      	ldrh	r2, [r7, #0]
 800f9ce:	4798      	blx	r3

      y++;
 800f9d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	82bb      	strh	r3, [r7, #20]
      e += yd;
 800f9dc:	89fa      	ldrh	r2, [r7, #14]
 800f9de:	8a3b      	ldrh	r3, [r7, #16]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 800f9e6:	8a3b      	ldrh	r3, [r7, #16]
 800f9e8:	3302      	adds	r3, #2
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 800f9ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9f2:	005a      	lsls	r2, r3, #1
 800f9f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	dd0e      	ble.n	800fa1c <UG_DrawCircle+0x1a8>
      {
         x--;
 800f9fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	3b01      	subs	r3, #1
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	82fb      	strh	r3, [r7, #22]
         e += xd;
 800fa0a:	89fa      	ldrh	r2, [r7, #14]
 800fa0c:	8a7b      	ldrh	r3, [r7, #18]
 800fa0e:	4413      	add	r3, r2
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 800fa14:	8a7b      	ldrh	r3, [r7, #18]
 800fa16:	3302      	adds	r3, #2
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 800fa1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	f6bf af53 	bge.w	800f8d0 <UG_DrawCircle+0x5c>
 800fa2a:	e004      	b.n	800fa36 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 800fa2c:	bf00      	nop
 800fa2e:	e002      	b.n	800fa36 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 800fa30:	bf00      	nop
 800fa32:	e000      	b.n	800fa36 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 800fa34:	bf00      	nop
      }
   }
}
 800fa36:	371c      	adds	r7, #28
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd90      	pop	{r4, r7, pc}
 800fa3c:	20002278 	.word	0x20002278

0800fa40 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fa40:	b5b0      	push	{r4, r5, r7, lr}
 800fa42:	b08a      	sub	sp, #40	; 0x28
 800fa44:	af02      	add	r7, sp, #8
 800fa46:	4604      	mov	r4, r0
 800fa48:	4608      	mov	r0, r1
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4623      	mov	r3, r4
 800fa50:	80fb      	strh	r3, [r7, #6]
 800fa52:	4603      	mov	r3, r0
 800fa54:	80bb      	strh	r3, [r7, #4]
 800fa56:	460b      	mov	r3, r1
 800fa58:	807b      	strh	r3, [r7, #2]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800fa5e:	4b67      	ldr	r3, [pc, #412]	; (800fbfc <UG_DrawLine+0x1bc>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fa66:	f003 0302 	and.w	r3, r3, #2
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d013      	beq.n	800fa96 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fa6e:	4b63      	ldr	r3, [pc, #396]	; (800fbfc <UG_DrawLine+0x1bc>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa74:	461d      	mov	r5, r3
 800fa76:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fa7a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fa7e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fa82:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fa86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	4623      	mov	r3, r4
 800fa8c:	47a8      	blx	r5
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	f000 80ae 	beq.w	800fbf2 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800fa96:	887a      	ldrh	r2, [r7, #2]
 800fa98:	88fb      	ldrh	r3, [r7, #6]
 800fa9a:	1ad3      	subs	r3, r2, r3
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800faa0:	883a      	ldrh	r2, [r7, #0]
 800faa2:	88bb      	ldrh	r3, [r7, #4]
 800faa4:	1ad3      	subs	r3, r2, r3
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800faaa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	bfb8      	it	lt
 800fab2:	425b      	neglt	r3, r3
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 800fab8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	bfb8      	it	lt
 800fac0:	425b      	neglt	r3, r3
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800fac6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800faca:	2b00      	cmp	r3, #0
 800facc:	dd01      	ble.n	800fad2 <UG_DrawLine+0x92>
 800face:	2301      	movs	r3, #1
 800fad0:	e001      	b.n	800fad6 <UG_DrawLine+0x96>
 800fad2:	f04f 33ff 	mov.w	r3, #4294967295
 800fad6:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 800fad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	dd01      	ble.n	800fae4 <UG_DrawLine+0xa4>
 800fae0:	2301      	movs	r3, #1
 800fae2:	e001      	b.n	800fae8 <UG_DrawLine+0xa8>
 800fae4:	f04f 33ff 	mov.w	r3, #4294967295
 800fae8:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 800faea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800faee:	105b      	asrs	r3, r3, #1
 800faf0:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800faf2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800faf6:	105b      	asrs	r3, r3, #1
 800faf8:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800fafa:	88fb      	ldrh	r3, [r7, #6]
 800fafc:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800fafe:	88bb      	ldrh	r3, [r7, #4]
 800fb00:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800fb02:	4b3e      	ldr	r3, [pc, #248]	; (800fbfc <UG_DrawLine+0x1bc>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fb0c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fb10:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fb14:	4798      	blx	r3

   if( dxabs >= dyabs )
 800fb16:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800fb1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	db33      	blt.n	800fb8a <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800fb22:	2300      	movs	r3, #0
 800fb24:	83fb      	strh	r3, [r7, #30]
 800fb26:	e029      	b.n	800fb7c <UG_DrawLine+0x13c>
      {
         y += dyabs;
 800fb28:	8b7a      	ldrh	r2, [r7, #26]
 800fb2a:	89fb      	ldrh	r3, [r7, #14]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800fb32:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fb36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	db09      	blt.n	800fb52 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 800fb3e:	8b7a      	ldrh	r2, [r7, #26]
 800fb40:	8a3b      	ldrh	r3, [r7, #16]
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800fb48:	8afa      	ldrh	r2, [r7, #22]
 800fb4a:	897b      	ldrh	r3, [r7, #10]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800fb52:	8b3a      	ldrh	r2, [r7, #24]
 800fb54:	89bb      	ldrh	r3, [r7, #12]
 800fb56:	4413      	add	r3, r2
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 800fb5c:	4b27      	ldr	r3, [pc, #156]	; (800fbfc <UG_DrawLine+0x1bc>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fb66:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fb6a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fb6e:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 800fb70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	3301      	adds	r3, #1
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	83fb      	strh	r3, [r7, #30]
 800fb7c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800fb80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	dbcf      	blt.n	800fb28 <UG_DrawLine+0xe8>
 800fb88:	e034      	b.n	800fbf4 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	83fb      	strh	r3, [r7, #30]
 800fb8e:	e029      	b.n	800fbe4 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800fb90:	8bba      	ldrh	r2, [r7, #28]
 800fb92:	8a3b      	ldrh	r3, [r7, #16]
 800fb94:	4413      	add	r3, r2
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800fb9a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800fb9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	db09      	blt.n	800fbba <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800fba6:	8bba      	ldrh	r2, [r7, #28]
 800fba8:	89fb      	ldrh	r3, [r7, #14]
 800fbaa:	1ad3      	subs	r3, r2, r3
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800fbb0:	8b3a      	ldrh	r2, [r7, #24]
 800fbb2:	89bb      	ldrh	r3, [r7, #12]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800fbba:	8afa      	ldrh	r2, [r7, #22]
 800fbbc:	897b      	ldrh	r3, [r7, #10]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 800fbc4:	4b0d      	ldr	r3, [pc, #52]	; (800fbfc <UG_DrawLine+0x1bc>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fbce:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fbd2:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fbd6:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 800fbd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	3301      	adds	r3, #1
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	83fb      	strh	r3, [r7, #30]
 800fbe4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800fbe8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	dbcf      	blt.n	800fb90 <UG_DrawLine+0x150>
 800fbf0:	e000      	b.n	800fbf4 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fbf2:	bf00      	nop
      }
   }  
}
 800fbf4:	3720      	adds	r7, #32
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bdb0      	pop	{r4, r5, r7, pc}
 800fbfa:	bf00      	nop
 800fbfc:	20002278 	.word	0x20002278

0800fc00 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800fc00:	b590      	push	{r4, r7, lr}
 800fc02:	b087      	sub	sp, #28
 800fc04:	af02      	add	r7, sp, #8
 800fc06:	4603      	mov	r3, r0
 800fc08:	603a      	str	r2, [r7, #0]
 800fc0a:	80fb      	strh	r3, [r7, #6]
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800fc10:	88fb      	ldrh	r3, [r7, #6]
 800fc12:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800fc14:	88bb      	ldrh	r3, [r7, #4]
 800fc16:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800fc18:	4b44      	ldr	r3, [pc, #272]	; (800fd2c <UG_PutString+0x12c>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f000 fa96 	bl	8010150 <_UG_FontSelect>
   while ( *str != 0 )
 800fc24:	e064      	b.n	800fcf0 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800fc26:	4b41      	ldr	r3, [pc, #260]	; (800fd2c <UG_PutString+0x12c>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d106      	bne.n	800fc40 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 800fc32:	463b      	mov	r3, r7
 800fc34:	4618      	mov	r0, r3
 800fc36:	f000 f8c7 	bl	800fdc8 <_UG_DecodeUTF8>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	817b      	strh	r3, [r7, #10]
 800fc3e:	e004      	b.n	800fc4a <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	1c5a      	adds	r2, r3, #1
 800fc44:	603a      	str	r2, [r7, #0]
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800fc4a:	897b      	ldrh	r3, [r7, #10]
 800fc4c:	2b0a      	cmp	r3, #10
 800fc4e:	d105      	bne.n	800fc5c <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 800fc50:	4b36      	ldr	r3, [pc, #216]	; (800fd2c <UG_PutString+0x12c>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	881b      	ldrh	r3, [r3, #0]
 800fc58:	81fb      	strh	r3, [r7, #14]
         continue;
 800fc5a:	e049      	b.n	800fcf0 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 800fc5c:	897b      	ldrh	r3, [r7, #10]
 800fc5e:	2100      	movs	r1, #0
 800fc60:	4618      	mov	r0, r3
 800fc62:	f000 f929 	bl	800feb8 <_UG_GetCharData>
 800fc66:	4603      	mov	r3, r0
 800fc68:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800fc6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc72:	d100      	bne.n	800fc76 <UG_PutString+0x76>
 800fc74:	e03c      	b.n	800fcf0 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 800fc76:	4b2d      	ldr	r3, [pc, #180]	; (800fd2c <UG_PutString+0x12c>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc80:	4619      	mov	r1, r3
 800fc82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fc86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	4299      	cmp	r1, r3
 800fc8e:	dc12      	bgt.n	800fcb6 <UG_PutString+0xb6>
      {
         xp = x;
 800fc90:	88fb      	ldrh	r3, [r7, #6]
 800fc92:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800fc94:	4b25      	ldr	r3, [pc, #148]	; (800fd2c <UG_PutString+0x12c>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fc9c:	b21a      	sxth	r2, r3
 800fc9e:	4b23      	ldr	r3, [pc, #140]	; (800fd2c <UG_PutString+0x12c>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 800fca6:	b21b      	sxth	r3, r3
 800fca8:	4413      	add	r3, r2
 800fcaa:	b21b      	sxth	r3, r3
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	89bb      	ldrh	r3, [r7, #12]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800fcb6:	4b1d      	ldr	r3, [pc, #116]	; (800fd2c <UG_PutString+0x12c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 800fcbe:	4b1b      	ldr	r3, [pc, #108]	; (800fd2c <UG_PutString+0x12c>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fcc6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fcca:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800fcce:	8978      	ldrh	r0, [r7, #10]
 800fcd0:	9300      	str	r3, [sp, #0]
 800fcd2:	4623      	mov	r3, r4
 800fcd4:	f000 fabe 	bl	8010254 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800fcd8:	4b14      	ldr	r3, [pc, #80]	; (800fd2c <UG_PutString+0x12c>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	893b      	ldrh	r3, [r7, #8]
 800fce4:	4413      	add	r3, r2
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	89fb      	ldrh	r3, [r7, #14]
 800fcea:	4413      	add	r3, r2
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d196      	bne.n	800fc26 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800fcf8:	4b0c      	ldr	r3, [pc, #48]	; (800fd2c <UG_PutString+0x12c>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fd00:	f003 0302 	and.w	r3, r3, #2
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d00c      	beq.n	800fd22 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800fd08:	4b08      	ldr	r3, [pc, #32]	; (800fd2c <UG_PutString+0x12c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd0e:	461c      	mov	r4, r3
 800fd10:	f04f 33ff 	mov.w	r3, #4294967295
 800fd14:	f04f 32ff 	mov.w	r2, #4294967295
 800fd18:	f04f 31ff 	mov.w	r1, #4294967295
 800fd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd20:	47a0      	blx	r4
}
 800fd22:	bf00      	nop
 800fd24:	3714      	adds	r7, #20
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd90      	pop	{r4, r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	20002278 	.word	0x20002278

0800fd30 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	4603      	mov	r3, r0
 800fd38:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800fd3a:	4b05      	ldr	r3, [pc, #20]	; (800fd50 <UG_SetForecolor+0x20>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	88fa      	ldrh	r2, [r7, #6]
 800fd40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800fd44:	bf00      	nop
 800fd46:	370c      	adds	r7, #12
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr
 800fd50:	20002278 	.word	0x20002278

0800fd54 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800fd5e:	4b05      	ldr	r3, [pc, #20]	; (800fd74 <UG_SetBackcolor+0x20>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	88fa      	ldrh	r2, [r7, #6]
 800fd64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800fd68:	bf00      	nop
 800fd6a:	370c      	adds	r7, #12
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr
 800fd74:	20002278 	.word	0x20002278

0800fd78 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b083      	sub	sp, #12
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	4603      	mov	r3, r0
 800fd80:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800fd82:	4b06      	ldr	r3, [pc, #24]	; (800fd9c <UG_FontSetHSpace+0x24>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	88fa      	ldrh	r2, [r7, #6]
 800fd88:	b252      	sxtb	r2, r2
 800fd8a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800fd8e:	bf00      	nop
 800fd90:	370c      	adds	r7, #12
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr
 800fd9a:	bf00      	nop
 800fd9c:	20002278 	.word	0x20002278

0800fda0 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	4603      	mov	r3, r0
 800fda8:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800fdaa:	4b06      	ldr	r3, [pc, #24]	; (800fdc4 <UG_FontSetVSpace+0x24>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	88fa      	ldrh	r2, [r7, #6]
 800fdb0:	b252      	sxtb	r2, r2
 800fdb2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 800fdb6:	bf00      	nop
 800fdb8:	370c      	adds	r7, #12
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	20002278 	.word	0x20002278

0800fdc8 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]

  char c=**str;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 800fdd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	db07      	blt.n	800fdf0 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	1c5a      	adds	r2, r3, #1
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	601a      	str	r2, [r3, #0]
    return c;
 800fdea:	7bfb      	ldrb	r3, [r7, #15]
 800fdec:	b29b      	uxth	r3, r3
 800fdee:	e05c      	b.n	800feaa <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	81bb      	strh	r3, [r7, #12]

  while(**str)
 800fdf8:	e04f      	b.n	800fe9a <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	1c5a      	adds	r2, r3, #1
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 800fe0c:	7bbb      	ldrb	r3, [r7, #14]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d130      	bne.n	800fe74 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800fe12:	7bfb      	ldrb	r3, [r7, #15]
 800fe14:	2bdf      	cmp	r3, #223	; 0xdf
 800fe16:	d806      	bhi.n	800fe26 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 800fe1c:	7bfb      	ldrb	r3, [r7, #15]
 800fe1e:	f003 031f 	and.w	r3, r3, #31
 800fe22:	73fb      	strb	r3, [r7, #15]
 800fe24:	e023      	b.n	800fe6e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800fe26:	7bfb      	ldrb	r3, [r7, #15]
 800fe28:	2bef      	cmp	r3, #239	; 0xef
 800fe2a:	d806      	bhi.n	800fe3a <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	f003 030f 	and.w	r3, r3, #15
 800fe36:	73fb      	strb	r3, [r7, #15]
 800fe38:	e019      	b.n	800fe6e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800fe3a:	7bfb      	ldrb	r3, [r7, #15]
 800fe3c:	2bf7      	cmp	r3, #247	; 0xf7
 800fe3e:	d806      	bhi.n	800fe4e <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 800fe40:	2303      	movs	r3, #3
 800fe42:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 800fe44:	7bfb      	ldrb	r3, [r7, #15]
 800fe46:	f003 0307 	and.w	r3, r3, #7
 800fe4a:	73fb      	strb	r3, [r7, #15]
 800fe4c:	e00f      	b.n	800fe6e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800fe4e:	7bfb      	ldrb	r3, [r7, #15]
 800fe50:	2bfb      	cmp	r3, #251	; 0xfb
 800fe52:	d806      	bhi.n	800fe62 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 800fe54:	2304      	movs	r3, #4
 800fe56:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
 800fe5a:	f003 0303 	and.w	r3, r3, #3
 800fe5e:	73fb      	strb	r3, [r7, #15]
 800fe60:	e005      	b.n	800fe6e <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 800fe62:	2305      	movs	r3, #5
 800fe64:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 800fe66:	7bfb      	ldrb	r3, [r7, #15]
 800fe68:	f003 0301 	and.w	r3, r3, #1
 800fe6c:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 800fe6e:	7bfb      	ldrb	r3, [r7, #15]
 800fe70:	81bb      	strh	r3, [r7, #12]
 800fe72:	e012      	b.n	800fe9a <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 800fe74:	89bb      	ldrh	r3, [r7, #12]
 800fe76:	019b      	lsls	r3, r3, #6
 800fe78:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 800fe7a:	7bfb      	ldrb	r3, [r7, #15]
 800fe7c:	b21b      	sxth	r3, r3
 800fe7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe82:	b21a      	sxth	r2, r3
 800fe84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	b21b      	sxth	r3, r3
 800fe8c:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 800fe8e:	7bbb      	ldrb	r3, [r7, #14]
 800fe90:	3b01      	subs	r3, #1
 800fe92:	73bb      	strb	r3, [r7, #14]
 800fe94:	7bbb      	ldrb	r3, [r7, #14]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d005      	beq.n	800fea6 <_UG_DecodeUTF8+0xde>
  while(**str)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d1aa      	bne.n	800fdfa <_UG_DecodeUTF8+0x32>
 800fea4:	e000      	b.n	800fea8 <_UG_DecodeUTF8+0xe0>
        break;
 800fea6:	bf00      	nop
    }
  }
  return encoding;
 800fea8:	89bb      	ldrh	r3, [r7, #12]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3714      	adds	r7, #20
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
	...

0800feb8 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 800feb8:	b580      	push	{r7, lr}
 800feba:	b086      	sub	sp, #24
 800febc:	af00      	add	r7, sp, #0
 800febe:	4603      	mov	r3, r0
 800fec0:	6039      	str	r1, [r7, #0]
 800fec2:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 800fec4:	2300      	movs	r3, #0
 800fec6:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 800fec8:	2300      	movs	r3, #0
 800feca:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 800fecc:	2300      	movs	r3, #0
 800fece:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 800fed0:	2300      	movs	r3, #0
 800fed2:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 800fed4:	2300      	movs	r3, #0
 800fed6:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800fed8:	4b98      	ldr	r3, [pc, #608]	; (801013c <_UG_GetCharData+0x284>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fede:	4b98      	ldr	r3, [pc, #608]	; (8010140 <_UG_GetCharData+0x288>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d10f      	bne.n	800ff06 <_UG_GetCharData+0x4e>
 800fee6:	4b97      	ldr	r3, [pc, #604]	; (8010144 <_UG_GetCharData+0x28c>)
 800fee8:	881b      	ldrh	r3, [r3, #0]
 800feea:	88fa      	ldrh	r2, [r7, #6]
 800feec:	429a      	cmp	r2, r3
 800feee:	d10a      	bne.n	800ff06 <_UG_GetCharData+0x4e>
    if(p){
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d003      	beq.n	800fefe <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800fef6:	4b94      	ldr	r3, [pc, #592]	; (8010148 <_UG_GetCharData+0x290>)
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 800fefe:	4b93      	ldr	r3, [pc, #588]	; (801014c <_UG_GetCharData+0x294>)
 800ff00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff04:	e116      	b.n	8010134 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800ff06:	4b8d      	ldr	r3, [pc, #564]	; (801013c <_UG_GetCharData+0x284>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	f000 80cc 	beq.w	80100ac <_UG_GetCharData+0x1f4>
    switch ( encoding )
 800ff14:	88fb      	ldrh	r3, [r7, #6]
 800ff16:	2bfc      	cmp	r3, #252	; 0xfc
 800ff18:	f300 80c8 	bgt.w	80100ac <_UG_GetCharData+0x1f4>
 800ff1c:	2bd6      	cmp	r3, #214	; 0xd6
 800ff1e:	da09      	bge.n	800ff34 <_UG_GetCharData+0x7c>
 800ff20:	2bc4      	cmp	r3, #196	; 0xc4
 800ff22:	d06c      	beq.n	800fffe <_UG_GetCharData+0x146>
 800ff24:	2bc4      	cmp	r3, #196	; 0xc4
 800ff26:	f300 80c1 	bgt.w	80100ac <_UG_GetCharData+0x1f4>
 800ff2a:	2bb0      	cmp	r3, #176	; 0xb0
 800ff2c:	d06d      	beq.n	801000a <_UG_GetCharData+0x152>
 800ff2e:	2bb5      	cmp	r3, #181	; 0xb5
 800ff30:	d068      	beq.n	8010004 <_UG_GetCharData+0x14c>
 800ff32:	e06e      	b.n	8010012 <_UG_GetCharData+0x15a>
 800ff34:	3bd6      	subs	r3, #214	; 0xd6
 800ff36:	2b26      	cmp	r3, #38	; 0x26
 800ff38:	f200 80b8 	bhi.w	80100ac <_UG_GetCharData+0x1f4>
 800ff3c:	a201      	add	r2, pc, #4	; (adr r2, 800ff44 <_UG_GetCharData+0x8c>)
 800ff3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff42:	bf00      	nop
 800ff44:	0800ffe7 	.word	0x0800ffe7
 800ff48:	080100ad 	.word	0x080100ad
 800ff4c:	080100ad 	.word	0x080100ad
 800ff50:	080100ad 	.word	0x080100ad
 800ff54:	080100ad 	.word	0x080100ad
 800ff58:	080100ad 	.word	0x080100ad
 800ff5c:	0800fff3 	.word	0x0800fff3
 800ff60:	080100ad 	.word	0x080100ad
 800ff64:	080100ad 	.word	0x080100ad
 800ff68:	080100ad 	.word	0x080100ad
 800ff6c:	080100ad 	.word	0x080100ad
 800ff70:	080100ad 	.word	0x080100ad
 800ff74:	080100ad 	.word	0x080100ad
 800ff78:	080100ad 	.word	0x080100ad
 800ff7c:	0800fff9 	.word	0x0800fff9
 800ff80:	080100ad 	.word	0x080100ad
 800ff84:	080100ad 	.word	0x080100ad
 800ff88:	080100ad 	.word	0x080100ad
 800ff8c:	080100ad 	.word	0x080100ad
 800ff90:	080100ad 	.word	0x080100ad
 800ff94:	080100ad 	.word	0x080100ad
 800ff98:	080100ad 	.word	0x080100ad
 800ff9c:	080100ad 	.word	0x080100ad
 800ffa0:	080100ad 	.word	0x080100ad
 800ffa4:	080100ad 	.word	0x080100ad
 800ffa8:	080100ad 	.word	0x080100ad
 800ffac:	080100ad 	.word	0x080100ad
 800ffb0:	080100ad 	.word	0x080100ad
 800ffb4:	080100ad 	.word	0x080100ad
 800ffb8:	080100ad 	.word	0x080100ad
 800ffbc:	080100ad 	.word	0x080100ad
 800ffc0:	080100ad 	.word	0x080100ad
 800ffc4:	0800ffe1 	.word	0x0800ffe1
 800ffc8:	080100ad 	.word	0x080100ad
 800ffcc:	080100ad 	.word	0x080100ad
 800ffd0:	080100ad 	.word	0x080100ad
 800ffd4:	080100ad 	.word	0x080100ad
 800ffd8:	080100ad 	.word	0x080100ad
 800ffdc:	0800ffed 	.word	0x0800ffed
    {
       case 0xF6: encoding = 0x94; break; // ö
 800ffe0:	2394      	movs	r3, #148	; 0x94
 800ffe2:	80fb      	strh	r3, [r7, #6]
 800ffe4:	e015      	b.n	8010012 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 800ffe6:	2399      	movs	r3, #153	; 0x99
 800ffe8:	80fb      	strh	r3, [r7, #6]
 800ffea:	e012      	b.n	8010012 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 800ffec:	2381      	movs	r3, #129	; 0x81
 800ffee:	80fb      	strh	r3, [r7, #6]
 800fff0:	e00f      	b.n	8010012 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 800fff2:	239a      	movs	r3, #154	; 0x9a
 800fff4:	80fb      	strh	r3, [r7, #6]
 800fff6:	e00c      	b.n	8010012 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 800fff8:	2384      	movs	r3, #132	; 0x84
 800fffa:	80fb      	strh	r3, [r7, #6]
 800fffc:	e009      	b.n	8010012 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 800fffe:	238e      	movs	r3, #142	; 0x8e
 8010000:	80fb      	strh	r3, [r7, #6]
 8010002:	e006      	b.n	8010012 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8010004:	23e6      	movs	r3, #230	; 0xe6
 8010006:	80fb      	strh	r3, [r7, #6]
 8010008:	e003      	b.n	8010012 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 801000a:	23f8      	movs	r3, #248	; 0xf8
 801000c:	80fb      	strh	r3, [r7, #6]
 801000e:	bf00      	nop
 8010010:	e04c      	b.n	80100ac <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8010012:	e04b      	b.n	80100ac <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8010014:	4b49      	ldr	r3, [pc, #292]	; (801013c <_UG_GetCharData+0x284>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801001a:	8a7a      	ldrh	r2, [r7, #18]
 801001c:	0052      	lsls	r2, r2, #1
 801001e:	4413      	add	r3, r2
 8010020:	4618      	mov	r0, r3
 8010022:	f7ff fa87 	bl	800f534 <ptr_8to16>
 8010026:	4603      	mov	r3, r0
 8010028:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 801002a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801002e:	2b00      	cmp	r3, #0
 8010030:	da06      	bge.n	8010040 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8010032:	89fb      	ldrh	r3, [r7, #14]
 8010034:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010038:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 801003a:	2301      	movs	r3, #1
 801003c:	747b      	strb	r3, [r7, #17]
 801003e:	e032      	b.n	80100a6 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8010040:	7c7b      	ldrb	r3, [r7, #17]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d021      	beq.n	801008a <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8010046:	88fa      	ldrh	r2, [r7, #6]
 8010048:	8afb      	ldrh	r3, [r7, #22]
 801004a:	429a      	cmp	r2, r3
 801004c:	d30d      	bcc.n	801006a <_UG_GetCharData+0x1b2>
 801004e:	88fa      	ldrh	r2, [r7, #6]
 8010050:	89fb      	ldrh	r3, [r7, #14]
 8010052:	429a      	cmp	r2, r3
 8010054:	d809      	bhi.n	801006a <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8010056:	88fa      	ldrh	r2, [r7, #6]
 8010058:	8afb      	ldrh	r3, [r7, #22]
 801005a:	1ad3      	subs	r3, r2, r3
 801005c:	b29a      	uxth	r2, r3
 801005e:	8abb      	ldrh	r3, [r7, #20]
 8010060:	4413      	add	r3, r2
 8010062:	82bb      	strh	r3, [r7, #20]
        found=1;
 8010064:	2301      	movs	r3, #1
 8010066:	743b      	strb	r3, [r7, #16]
        break;
 8010068:	e02a      	b.n	80100c0 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 801006a:	88fa      	ldrh	r2, [r7, #6]
 801006c:	8afb      	ldrh	r3, [r7, #22]
 801006e:	429a      	cmp	r2, r3
 8010070:	d323      	bcc.n	80100ba <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8010072:	89fa      	ldrh	r2, [r7, #14]
 8010074:	8afb      	ldrh	r3, [r7, #22]
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	b29a      	uxth	r2, r3
 801007a:	8abb      	ldrh	r3, [r7, #20]
 801007c:	4413      	add	r3, r2
 801007e:	b29b      	uxth	r3, r3
 8010080:	3301      	adds	r3, #1
 8010082:	82bb      	strh	r3, [r7, #20]
      range=0;
 8010084:	2300      	movs	r3, #0
 8010086:	747b      	strb	r3, [r7, #17]
 8010088:	e00d      	b.n	80100a6 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 801008a:	88fa      	ldrh	r2, [r7, #6]
 801008c:	89fb      	ldrh	r3, [r7, #14]
 801008e:	429a      	cmp	r2, r3
 8010090:	d102      	bne.n	8010098 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8010092:	2301      	movs	r3, #1
 8010094:	743b      	strb	r3, [r7, #16]
        break;
 8010096:	e013      	b.n	80100c0 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8010098:	88fa      	ldrh	r2, [r7, #6]
 801009a:	89fb      	ldrh	r3, [r7, #14]
 801009c:	429a      	cmp	r2, r3
 801009e:	d30e      	bcc.n	80100be <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80100a0:	8abb      	ldrh	r3, [r7, #20]
 80100a2:	3301      	adds	r3, #1
 80100a4:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80100a6:	8a7b      	ldrh	r3, [r7, #18]
 80100a8:	3301      	adds	r3, #1
 80100aa:	827b      	strh	r3, [r7, #18]
 80100ac:	4b23      	ldr	r3, [pc, #140]	; (801013c <_UG_GetCharData+0x284>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80100b2:	8a7a      	ldrh	r2, [r7, #18]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d3ad      	bcc.n	8010014 <_UG_GetCharData+0x15c>
 80100b8:	e002      	b.n	80100c0 <_UG_GetCharData+0x208>
        break;
 80100ba:	bf00      	nop
 80100bc:	e000      	b.n	80100c0 <_UG_GetCharData+0x208>
        break;
 80100be:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 80100c0:	7c3b      	ldrb	r3, [r7, #16]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d034      	beq.n	8010130 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 80100c6:	4b1d      	ldr	r3, [pc, #116]	; (801013c <_UG_GetCharData+0x284>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100cc:	4a1c      	ldr	r2, [pc, #112]	; (8010140 <_UG_GetCharData+0x288>)
 80100ce:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 80100d0:	4a1c      	ldr	r2, [pc, #112]	; (8010144 <_UG_GetCharData+0x28c>)
 80100d2:	88fb      	ldrh	r3, [r7, #6]
 80100d4:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80100d6:	4b19      	ldr	r3, [pc, #100]	; (801013c <_UG_GetCharData+0x284>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100dc:	8aba      	ldrh	r2, [r7, #20]
 80100de:	4917      	ldr	r1, [pc, #92]	; (801013c <_UG_GetCharData+0x284>)
 80100e0:	6809      	ldr	r1, [r1, #0]
 80100e2:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 80100e4:	fb01 f202 	mul.w	r2, r1, r2
 80100e8:	4413      	add	r3, r2
 80100ea:	4a17      	ldr	r2, [pc, #92]	; (8010148 <_UG_GetCharData+0x290>)
 80100ec:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80100ee:	4b13      	ldr	r3, [pc, #76]	; (801013c <_UG_GetCharData+0x284>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d009      	beq.n	801010c <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80100f8:	4b10      	ldr	r3, [pc, #64]	; (801013c <_UG_GetCharData+0x284>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100fe:	8abb      	ldrh	r3, [r7, #20]
 8010100:	4413      	add	r3, r2
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	b21a      	sxth	r2, r3
 8010106:	4b11      	ldr	r3, [pc, #68]	; (801014c <_UG_GetCharData+0x294>)
 8010108:	801a      	strh	r2, [r3, #0]
 801010a:	e006      	b.n	801011a <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 801010c:	4b0b      	ldr	r3, [pc, #44]	; (801013c <_UG_GetCharData+0x284>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010114:	b21a      	sxth	r2, r3
 8010116:	4b0d      	ldr	r3, [pc, #52]	; (801014c <_UG_GetCharData+0x294>)
 8010118:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d003      	beq.n	8010128 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8010120:	4b09      	ldr	r3, [pc, #36]	; (8010148 <_UG_GetCharData+0x290>)
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8010128:	4b08      	ldr	r3, [pc, #32]	; (801014c <_UG_GetCharData+0x294>)
 801012a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801012e:	e001      	b.n	8010134 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8010130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010134:	4618      	mov	r0, r3
 8010136:	3718      	adds	r7, #24
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	20002278 	.word	0x20002278
 8010140:	2000227c 	.word	0x2000227c
 8010144:	20002280 	.word	0x20002280
 8010148:	20002284 	.word	0x20002284
 801014c:	20002288 	.word	0x20002288

08010150 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8010150:	b590      	push	{r4, r7, lr}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8010158:	4b3d      	ldr	r3, [pc, #244]	; (8010250 <_UG_FontSelect+0x100>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	429a      	cmp	r2, r3
 8010162:	d070      	beq.n	8010246 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8010164:	4b3a      	ldr	r3, [pc, #232]	; (8010250 <_UG_FontSelect+0x100>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	781a      	ldrb	r2, [r3, #0]
 8010170:	4b37      	ldr	r3, [pc, #220]	; (8010250 <_UG_FontSelect+0x100>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010178:	b2d2      	uxtb	r2, r2
 801017a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	1c5a      	adds	r2, r3, #1
 8010182:	607a      	str	r2, [r7, #4]
 8010184:	781b      	ldrb	r3, [r3, #0]
 8010186:	b25b      	sxtb	r3, r3
 8010188:	2b00      	cmp	r3, #0
 801018a:	da01      	bge.n	8010190 <_UG_FontSelect+0x40>
 801018c:	2201      	movs	r2, #1
 801018e:	e000      	b.n	8010192 <_UG_FontSelect+0x42>
 8010190:	2200      	movs	r2, #0
 8010192:	4b2f      	ldr	r3, [pc, #188]	; (8010250 <_UG_FontSelect+0x100>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	b2d2      	uxtb	r2, r2
 8010198:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	1c5a      	adds	r2, r3, #1
 80101a0:	607a      	str	r2, [r7, #4]
 80101a2:	4a2b      	ldr	r2, [pc, #172]	; (8010250 <_UG_FontSelect+0x100>)
 80101a4:	6812      	ldr	r2, [r2, #0]
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	1c5a      	adds	r2, r3, #1
 80101b0:	607a      	str	r2, [r7, #4]
 80101b2:	4a27      	ldr	r2, [pc, #156]	; (8010250 <_UG_FontSelect+0x100>)
 80101b4:	6812      	ldr	r2, [r2, #0]
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 80101bc:	4b24      	ldr	r3, [pc, #144]	; (8010250 <_UG_FontSelect+0x100>)
 80101be:	681c      	ldr	r4, [r3, #0]
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7ff f9b7 	bl	800f534 <ptr_8to16>
 80101c6:	4603      	mov	r3, r0
 80101c8:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	3302      	adds	r3, #2
 80101ce:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 80101d0:	4b1f      	ldr	r3, [pc, #124]	; (8010250 <_UG_FontSelect+0x100>)
 80101d2:	681c      	ldr	r4, [r3, #0]
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f7ff f9ad 	bl	800f534 <ptr_8to16>
 80101da:	4603      	mov	r3, r0
 80101dc:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	3302      	adds	r3, #2
 80101e2:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80101e4:	4b1a      	ldr	r3, [pc, #104]	; (8010250 <_UG_FontSelect+0x100>)
 80101e6:	681c      	ldr	r4, [r3, #0]
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f7ff f9a3 	bl	800f534 <ptr_8to16>
 80101ee:	4603      	mov	r3, r0
 80101f0:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	3302      	adds	r3, #2
 80101f6:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	1c5a      	adds	r2, r3, #1
 80101fc:	607a      	str	r2, [r7, #4]
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00b      	beq.n	801021c <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8010204:	4b12      	ldr	r3, [pc, #72]	; (8010250 <_UG_FontSelect+0x100>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 801020c:	4b10      	ldr	r3, [pc, #64]	; (8010250 <_UG_FontSelect+0x100>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010212:	461a      	mov	r2, r3
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4413      	add	r3, r2
 8010218:	607b      	str	r3, [r7, #4]
 801021a:	e003      	b.n	8010224 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 801021c:	4b0c      	ldr	r3, [pc, #48]	; (8010250 <_UG_FontSelect+0x100>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2200      	movs	r2, #0
 8010222:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8010224:	4b0a      	ldr	r3, [pc, #40]	; (8010250 <_UG_FontSelect+0x100>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 801022c:	4b08      	ldr	r3, [pc, #32]	; (8010250 <_UG_FontSelect+0x100>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010232:	005b      	lsls	r3, r3, #1
 8010234:	461a      	mov	r2, r3
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4413      	add	r3, r2
 801023a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 801023c:	4b04      	ldr	r3, [pc, #16]	; (8010250 <_UG_FontSelect+0x100>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	641a      	str	r2, [r3, #64]	; 0x40
 8010244:	e000      	b.n	8010248 <_UG_FontSelect+0xf8>
    return;
 8010246:	bf00      	nop
}
 8010248:	370c      	adds	r7, #12
 801024a:	46bd      	mov	sp, r7
 801024c:	bd90      	pop	{r4, r7, pc}
 801024e:	bf00      	nop
 8010250:	20002278 	.word	0x20002278

08010254 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8010254:	b5b0      	push	{r4, r5, r7, lr}
 8010256:	b08c      	sub	sp, #48	; 0x30
 8010258:	af00      	add	r7, sp, #0
 801025a:	4604      	mov	r4, r0
 801025c:	4608      	mov	r0, r1
 801025e:	4611      	mov	r1, r2
 8010260:	461a      	mov	r2, r3
 8010262:	4623      	mov	r3, r4
 8010264:	80fb      	strh	r3, [r7, #6]
 8010266:	4603      	mov	r3, r0
 8010268:	80bb      	strh	r3, [r7, #4]
 801026a:	460b      	mov	r3, r1
 801026c:	807b      	strh	r3, [r7, #2]
 801026e:	4613      	mov	r3, r2
 8010270:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8010272:	2300      	movs	r3, #0
 8010274:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010276:	2300      	movs	r3, #0
 8010278:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801027a:	2300      	movs	r3, #0
 801027c:	847b      	strh	r3, [r7, #34]	; 0x22
 801027e:	2300      	movs	r3, #0
 8010280:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8010282:	4b8c      	ldr	r3, [pc, #560]	; (80104b4 <_UG_PutChar+0x260>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801028a:	75fb      	strb	r3, [r7, #23]
 801028c:	4b89      	ldr	r3, [pc, #548]	; (80104b4 <_UG_PutChar+0x260>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010294:	f003 0302 	and.w	r3, r3, #2
 8010298:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 801029a:	2300      	movs	r3, #0
 801029c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 801029e:	f107 0208 	add.w	r2, r7, #8
 80102a2:	88fb      	ldrh	r3, [r7, #6]
 80102a4:	4611      	mov	r1, r2
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7ff fe06 	bl	800feb8 <_UG_GetCharData>
 80102ac:	4603      	mov	r3, r0
 80102ae:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 80102b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80102b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b8:	d102      	bne.n	80102c0 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80102ba:	f04f 33ff 	mov.w	r3, #4294967295
 80102be:	e226      	b.n	801070e <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 80102c0:	4b7c      	ldr	r3, [pc, #496]	; (80104b4 <_UG_PutChar+0x260>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80102c8:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 80102ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d101      	bne.n	80102d4 <_UG_PutChar+0x80>
     return 0;
 80102d0:	2300      	movs	r3, #0
 80102d2:	e21c      	b.n	801070e <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 80102d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102d6:	08db      	lsrs	r3, r3, #3
 80102d8:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 80102da:	4b76      	ldr	r3, [pc, #472]	; (80104b4 <_UG_PutChar+0x260>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80102e2:	f003 0307 	and.w	r3, r3, #7
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <_UG_PutChar+0x9e>
 80102ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102ee:	3301      	adds	r3, #1
 80102f0:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80102f2:	7dbb      	ldrb	r3, [r7, #22]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d01d      	beq.n	8010334 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80102f8:	4b6e      	ldr	r3, [pc, #440]	; (80104b4 <_UG_PutChar+0x260>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102fe:	461d      	mov	r5, r3
 8010300:	88ba      	ldrh	r2, [r7, #4]
 8010302:	8abb      	ldrh	r3, [r7, #20]
 8010304:	4413      	add	r3, r2
 8010306:	b29b      	uxth	r3, r3
 8010308:	3b01      	subs	r3, #1
 801030a:	b29b      	uxth	r3, r3
 801030c:	b21c      	sxth	r4, r3
 801030e:	4b69      	ldr	r3, [pc, #420]	; (80104b4 <_UG_PutChar+0x260>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010316:	b29a      	uxth	r2, r3
 8010318:	887b      	ldrh	r3, [r7, #2]
 801031a:	4413      	add	r3, r2
 801031c:	b29b      	uxth	r3, r3
 801031e:	3b01      	subs	r3, #1
 8010320:	b29b      	uxth	r3, r3
 8010322:	b21b      	sxth	r3, r3
 8010324:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010328:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 801032c:	4622      	mov	r2, r4
 801032e:	47a8      	blx	r5
 8010330:	4603      	mov	r3, r0
 8010332:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8010334:	4b5f      	ldr	r3, [pc, #380]	; (80104b4 <_UG_PutChar+0x260>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801033c:	2b00      	cmp	r3, #0
 801033e:	f040 8172 	bne.w	8010626 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010342:	2300      	movs	r3, #0
 8010344:	853b      	strh	r3, [r7, #40]	; 0x28
 8010346:	e0ec      	b.n	8010522 <_UG_PutChar+0x2ce>
     {
       c=0;
 8010348:	2300      	movs	r3, #0
 801034a:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 801034c:	2300      	movs	r3, #0
 801034e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010350:	e0df      	b.n	8010512 <_UG_PutChar+0x2be>
       {
         b = *data++;
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	1c5a      	adds	r2, r3, #1
 8010356:	60ba      	str	r2, [r7, #8]
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 801035c:	2300      	movs	r3, #0
 801035e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010360:	e0ca      	b.n	80104f8 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8010362:	7f7b      	ldrb	r3, [r7, #29]
 8010364:	f003 0301 	and.w	r3, r3, #1
 8010368:	2b00      	cmp	r3, #0
 801036a:	d033      	beq.n	80103d4 <_UG_PutChar+0x180>
           {
             if(driver)
 801036c:	7dbb      	ldrb	r3, [r7, #22]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d01f      	beq.n	80103b2 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8010372:	8c3b      	ldrh	r3, [r7, #32]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00a      	beq.n	801038e <_UG_PutChar+0x13a>
 8010378:	7dfb      	ldrb	r3, [r7, #23]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d107      	bne.n	801038e <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 801037e:	8c3a      	ldrh	r2, [r7, #32]
 8010380:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	4610      	mov	r0, r2
 8010388:	4798      	blx	r3
                 bpixels=0;
 801038a:	2300      	movs	r3, #0
 801038c:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 801038e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010390:	2b00      	cmp	r3, #0
 8010392:	d10a      	bne.n	80103aa <_UG_PutChar+0x156>
 8010394:	7dfb      	ldrb	r3, [r7, #23]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d007      	beq.n	80103aa <_UG_PutChar+0x156>
               {
                 x0=x+c;
 801039a:	88ba      	ldrh	r2, [r7, #4]
 801039c:	8bfb      	ldrh	r3, [r7, #30]
 801039e:	4413      	add	r3, r2
 80103a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 80103a2:	887a      	ldrh	r2, [r7, #2]
 80103a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80103a6:	4413      	add	r3, r2
 80103a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 80103aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103ac:	3301      	adds	r3, #1
 80103ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80103b0:	e096      	b.n	80104e0 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 80103b2:	4b40      	ldr	r3, [pc, #256]	; (80104b4 <_UG_PutChar+0x260>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	88b9      	ldrh	r1, [r7, #4]
 80103bc:	8bfa      	ldrh	r2, [r7, #30]
 80103be:	440a      	add	r2, r1
 80103c0:	b292      	uxth	r2, r2
 80103c2:	b210      	sxth	r0, r2
 80103c4:	8879      	ldrh	r1, [r7, #2]
 80103c6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80103c8:	440a      	add	r2, r1
 80103ca:	b292      	uxth	r2, r2
 80103cc:	b211      	sxth	r1, r2
 80103ce:	883a      	ldrh	r2, [r7, #0]
 80103d0:	4798      	blx	r3
 80103d2:	e085      	b.n	80104e0 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 80103d4:	7dbb      	ldrb	r3, [r7, #22]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d06e      	beq.n	80104b8 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 80103da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d064      	beq.n	80104aa <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80103e0:	7dfb      	ldrb	r3, [r7, #23]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d15e      	bne.n	80104a4 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 80103e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80103e8:	8839      	ldrh	r1, [r7, #0]
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	4610      	mov	r0, r2
 80103ee:	4798      	blx	r3
                   fpixels=0;
 80103f0:	2300      	movs	r3, #0
 80103f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80103f4:	e059      	b.n	80104aa <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80103f6:	88ba      	ldrh	r2, [r7, #4]
 80103f8:	8abb      	ldrh	r3, [r7, #20]
 80103fa:	4413      	add	r3, r2
 80103fc:	b29a      	uxth	r2, r3
 80103fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010400:	1ad3      	subs	r3, r2, r3
 8010402:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8010404:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010406:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801040a:	429a      	cmp	r2, r3
 801040c:	d003      	beq.n	8010416 <_UG_PutChar+0x1c2>
 801040e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010410:	89fb      	ldrh	r3, [r7, #14]
 8010412:	429a      	cmp	r2, r3
 8010414:	d224      	bcs.n	8010460 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8010416:	4b27      	ldr	r3, [pc, #156]	; (80104b4 <_UG_PutChar+0x260>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801041c:	461d      	mov	r5, r3
 801041e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010422:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010426:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010428:	89fb      	ldrh	r3, [r7, #14]
 801042a:	4413      	add	r3, r2
 801042c:	b29b      	uxth	r3, r3
 801042e:	3b01      	subs	r3, #1
 8010430:	b29b      	uxth	r3, r3
 8010432:	b21c      	sxth	r4, r3
 8010434:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010436:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801043a:	fb92 f3f3 	sdiv	r3, r2, r3
 801043e:	b29a      	uxth	r2, r3
 8010440:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010442:	4413      	add	r3, r2
 8010444:	b29b      	uxth	r3, r3
 8010446:	b21b      	sxth	r3, r3
 8010448:	4622      	mov	r2, r4
 801044a:	47a8      	blx	r5
 801044c:	4603      	mov	r3, r0
 801044e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8010450:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010452:	8839      	ldrh	r1, [r7, #0]
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	4610      	mov	r0, r2
 8010458:	4798      	blx	r3
                       fpixels=0;
 801045a:	2300      	movs	r3, #0
 801045c:	847b      	strh	r3, [r7, #34]	; 0x22
 801045e:	e021      	b.n	80104a4 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8010460:	4b14      	ldr	r3, [pc, #80]	; (80104b4 <_UG_PutChar+0x260>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010466:	461c      	mov	r4, r3
 8010468:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801046c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010472:	89fb      	ldrh	r3, [r7, #14]
 8010474:	4413      	add	r3, r2
 8010476:	b29b      	uxth	r3, r3
 8010478:	3b01      	subs	r3, #1
 801047a:	b29b      	uxth	r3, r3
 801047c:	b21a      	sxth	r2, r3
 801047e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010482:	47a0      	blx	r4
 8010484:	4603      	mov	r3, r0
 8010486:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8010488:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801048a:	8839      	ldrh	r1, [r7, #0]
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	4610      	mov	r0, r2
 8010490:	4798      	blx	r3
                       fpixels -= width;
 8010492:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010494:	89fb      	ldrh	r3, [r7, #14]
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 801049a:	88bb      	ldrh	r3, [r7, #4]
 801049c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 801049e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80104a0:	3301      	adds	r3, #1
 80104a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 80104a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1a5      	bne.n	80103f6 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 80104aa:	8c3b      	ldrh	r3, [r7, #32]
 80104ac:	3301      	adds	r3, #1
 80104ae:	843b      	strh	r3, [r7, #32]
 80104b0:	e016      	b.n	80104e0 <_UG_PutChar+0x28c>
 80104b2:	bf00      	nop
 80104b4:	20002278 	.word	0x20002278
             }
             else if(!trans)                           // Not accelerated output
 80104b8:	7dfb      	ldrb	r3, [r7, #23]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d110      	bne.n	80104e0 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 80104be:	4b96      	ldr	r3, [pc, #600]	; (8010718 <_UG_PutChar+0x4c4>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	88b9      	ldrh	r1, [r7, #4]
 80104c8:	8bfa      	ldrh	r2, [r7, #30]
 80104ca:	440a      	add	r2, r1
 80104cc:	b292      	uxth	r2, r2
 80104ce:	b210      	sxth	r0, r2
 80104d0:	8879      	ldrh	r1, [r7, #2]
 80104d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80104d4:	440a      	add	r2, r1
 80104d6:	b292      	uxth	r2, r2
 80104d8:	b211      	sxth	r1, r2
 80104da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80104de:	4798      	blx	r3
             }
           }
           b >>= 1;
 80104e0:	7f7b      	ldrb	r3, [r7, #29]
 80104e2:	085b      	lsrs	r3, r3, #1
 80104e4:	777b      	strb	r3, [r7, #29]
           c++;
 80104e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	3301      	adds	r3, #1
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80104f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80104f4:	3301      	adds	r3, #1
 80104f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80104f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80104fa:	2b07      	cmp	r3, #7
 80104fc:	d806      	bhi.n	801050c <_UG_PutChar+0x2b8>
 80104fe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8010502:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010506:	429a      	cmp	r2, r3
 8010508:	f6ff af2b 	blt.w	8010362 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 801050c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801050e:	3301      	adds	r3, #1
 8010510:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010512:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010516:	429a      	cmp	r2, r3
 8010518:	f4ff af1b 	bcc.w	8010352 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 801051c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801051e:	3301      	adds	r3, #1
 8010520:	853b      	strh	r3, [r7, #40]	; 0x28
 8010522:	4b7d      	ldr	r3, [pc, #500]	; (8010718 <_UG_PutChar+0x4c4>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801052a:	b29b      	uxth	r3, r3
 801052c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801052e:	429a      	cmp	r2, r3
 8010530:	f4ff af0a 	bcc.w	8010348 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8010534:	7dbb      	ldrb	r3, [r7, #22]
 8010536:	2b00      	cmp	r3, #0
 8010538:	f000 80e7 	beq.w	801070a <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 801053c:	8c3b      	ldrh	r3, [r7, #32]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d009      	beq.n	8010556 <_UG_PutChar+0x302>
 8010542:	7dfb      	ldrb	r3, [r7, #23]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d106      	bne.n	8010556 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8010548:	8c3a      	ldrh	r2, [r7, #32]
 801054a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	4610      	mov	r0, r2
 8010552:	4798      	blx	r3
 8010554:	e0d9      	b.n	801070a <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8010556:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 80d6 	beq.w	801070a <_UG_PutChar+0x4b6>
       {
         if(!trans)
 801055e:	7dfb      	ldrb	r3, [r7, #23]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d15c      	bne.n	801061e <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8010564:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010566:	8839      	ldrh	r1, [r7, #0]
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	4610      	mov	r0, r2
 801056c:	4798      	blx	r3
 801056e:	e0cc      	b.n	801070a <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8010570:	88ba      	ldrh	r2, [r7, #4]
 8010572:	8abb      	ldrh	r3, [r7, #20]
 8010574:	4413      	add	r3, r2
 8010576:	b29a      	uxth	r2, r3
 8010578:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 801057e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010580:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010584:	429a      	cmp	r2, r3
 8010586:	d003      	beq.n	8010590 <_UG_PutChar+0x33c>
 8010588:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801058a:	8a3b      	ldrh	r3, [r7, #16]
 801058c:	429a      	cmp	r2, r3
 801058e:	d224      	bcs.n	80105da <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8010590:	4b61      	ldr	r3, [pc, #388]	; (8010718 <_UG_PutChar+0x4c4>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010596:	461d      	mov	r5, r3
 8010598:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801059c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80105a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80105a2:	8a3b      	ldrh	r3, [r7, #16]
 80105a4:	4413      	add	r3, r2
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	3b01      	subs	r3, #1
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	b21c      	sxth	r4, r3
 80105ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80105b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80105b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80105b8:	b29a      	uxth	r2, r3
 80105ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80105bc:	4413      	add	r3, r2
 80105be:	b29b      	uxth	r3, r3
 80105c0:	b21b      	sxth	r3, r3
 80105c2:	4622      	mov	r2, r4
 80105c4:	47a8      	blx	r5
 80105c6:	4603      	mov	r3, r0
 80105c8:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80105ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80105cc:	8839      	ldrh	r1, [r7, #0]
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	4610      	mov	r0, r2
 80105d2:	4798      	blx	r3
               fpixels=0;
 80105d4:	2300      	movs	r3, #0
 80105d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80105d8:	e021      	b.n	801061e <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80105da:	4b4f      	ldr	r3, [pc, #316]	; (8010718 <_UG_PutChar+0x4c4>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105e0:	461c      	mov	r4, r3
 80105e2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80105e6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80105ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80105ec:	8a3b      	ldrh	r3, [r7, #16]
 80105ee:	4413      	add	r3, r2
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	3b01      	subs	r3, #1
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	b21a      	sxth	r2, r3
 80105f8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80105fc:	47a0      	blx	r4
 80105fe:	4603      	mov	r3, r0
 8010600:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010602:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010604:	8839      	ldrh	r1, [r7, #0]
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	4610      	mov	r0, r2
 801060a:	4798      	blx	r3
               fpixels -= width;
 801060c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801060e:	8a3b      	ldrh	r3, [r7, #16]
 8010610:	1ad3      	subs	r3, r2, r3
 8010612:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8010614:	88bb      	ldrh	r3, [r7, #4]
 8010616:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8010618:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801061a:	3301      	adds	r3, #1
 801061c:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 801061e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1a5      	bne.n	8010570 <_UG_PutChar+0x31c>
 8010624:	e071      	b.n	801070a <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8010626:	4b3c      	ldr	r3, [pc, #240]	; (8010718 <_UG_PutChar+0x4c4>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801062e:	2b01      	cmp	r3, #1
 8010630:	d16b      	bne.n	801070a <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010632:	2300      	movs	r3, #0
 8010634:	853b      	strh	r3, [r7, #40]	; 0x28
 8010636:	e060      	b.n	80106fa <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8010638:	2300      	movs	r3, #0
 801063a:	857b      	strh	r3, [r7, #42]	; 0x2a
 801063c:	e04a      	b.n	80106d4 <_UG_PutChar+0x480>
       {
         b = *data++;
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	1c5a      	adds	r2, r3, #1
 8010642:	60ba      	str	r2, [r7, #8]
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010648:	883b      	ldrh	r3, [r7, #0]
 801064a:	b2db      	uxtb	r3, r3
 801064c:	7f7a      	ldrb	r2, [r7, #29]
 801064e:	fb03 f202 	mul.w	r2, r3, r2
 8010652:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010656:	b2db      	uxtb	r3, r3
 8010658:	7f79      	ldrb	r1, [r7, #29]
 801065a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801065e:	fb01 f303 	mul.w	r3, r1, r3
 8010662:	4413      	add	r3, r2
 8010664:	121b      	asrs	r3, r3, #8
 8010666:	b21b      	sxth	r3, r3
 8010668:	b2db      	uxtb	r3, r3
 801066a:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 801066c:	883b      	ldrh	r3, [r7, #0]
 801066e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010672:	7f79      	ldrb	r1, [r7, #29]
 8010674:	fb03 f101 	mul.w	r1, r3, r1
 8010678:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801067c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010680:	7f78      	ldrb	r0, [r7, #29]
 8010682:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8010686:	fb00 f303 	mul.w	r3, r0, r3
 801068a:	440b      	add	r3, r1
 801068c:	121b      	asrs	r3, r3, #8
 801068e:	b21b      	sxth	r3, r3
 8010690:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010694:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010696:	4313      	orrs	r3, r2
 8010698:	b21b      	sxth	r3, r3
 801069a:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 801069c:	7dbb      	ldrb	r3, [r7, #22]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d005      	beq.n	80106ae <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80106a2:	8a7a      	ldrh	r2, [r7, #18]
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	4611      	mov	r1, r2
 80106a8:	2001      	movs	r0, #1
 80106aa:	4798      	blx	r3
 80106ac:	e00f      	b.n	80106ce <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 80106ae:	4b1a      	ldr	r3, [pc, #104]	; (8010718 <_UG_PutChar+0x4c4>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	88b9      	ldrh	r1, [r7, #4]
 80106b8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80106ba:	440a      	add	r2, r1
 80106bc:	b292      	uxth	r2, r2
 80106be:	b210      	sxth	r0, r2
 80106c0:	8879      	ldrh	r1, [r7, #2]
 80106c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106c4:	440a      	add	r2, r1
 80106c6:	b292      	uxth	r2, r2
 80106c8:	b211      	sxth	r1, r2
 80106ca:	8a7a      	ldrh	r2, [r7, #18]
 80106cc:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80106ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106d0:	3301      	adds	r3, #1
 80106d2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80106d4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80106d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80106da:	429a      	cmp	r2, r3
 80106dc:	dbaf      	blt.n	801063e <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	4a0d      	ldr	r2, [pc, #52]	; (8010718 <_UG_PutChar+0x4c4>)
 80106e2:	6812      	ldr	r2, [r2, #0]
 80106e4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80106e8:	4611      	mov	r1, r2
 80106ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80106ee:	1a8a      	subs	r2, r1, r2
 80106f0:	4413      	add	r3, r2
 80106f2:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80106f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106f6:	3301      	adds	r3, #1
 80106f8:	853b      	strh	r3, [r7, #40]	; 0x28
 80106fa:	4b07      	ldr	r3, [pc, #28]	; (8010718 <_UG_PutChar+0x4c4>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010702:	b29b      	uxth	r3, r3
 8010704:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010706:	429a      	cmp	r2, r3
 8010708:	d396      	bcc.n	8010638 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 801070a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801070e:	4618      	mov	r0, r3
 8010710:	3730      	adds	r7, #48	; 0x30
 8010712:	46bd      	mov	sp, r7
 8010714:	bdb0      	pop	{r4, r5, r7, pc}
 8010716:	bf00      	nop
 8010718:	20002278 	.word	0x20002278

0801071c <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 801071c:	b480      	push	{r7}
 801071e:	b089      	sub	sp, #36	; 0x24
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8010724:	4b57      	ldr	r3, [pc, #348]	; (8010884 <_UG_ProcessTouchData+0x168>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	88db      	ldrh	r3, [r3, #6]
 801072a:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 801072c:	4b55      	ldr	r3, [pc, #340]	; (8010884 <_UG_ProcessTouchData+0x168>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	891b      	ldrh	r3, [r3, #8]
 8010732:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8010734:	4b53      	ldr	r3, [pc, #332]	; (8010884 <_UG_ProcessTouchData+0x168>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	791b      	ldrb	r3, [r3, #4]
 801073a:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010742:	2300      	movs	r3, #0
 8010744:	83fb      	strh	r3, [r7, #30]
 8010746:	e090      	b.n	801086a <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	685a      	ldr	r2, [r3, #4]
 801074c:	8bfb      	ldrh	r3, [r7, #30]
 801074e:	015b      	lsls	r3, r3, #5
 8010750:	4413      	add	r3, r2
 8010752:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	785b      	ldrb	r3, [r3, #1]
 801075e:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8010760:	7bfb      	ldrb	r3, [r7, #15]
 8010762:	f003 0301 	and.w	r3, r3, #1
 8010766:	2b00      	cmp	r3, #0
 8010768:	d179      	bne.n	801085e <_UG_ProcessTouchData+0x142>
 801076a:	7bfb      	ldrb	r3, [r7, #15]
 801076c:	f003 0302 	and.w	r3, r3, #2
 8010770:	2b00      	cmp	r3, #0
 8010772:	d074      	beq.n	801085e <_UG_ProcessTouchData+0x142>
 8010774:	7bfb      	ldrb	r3, [r7, #15]
 8010776:	f003 0308 	and.w	r3, r3, #8
 801077a:	2b00      	cmp	r3, #0
 801077c:	d06f      	beq.n	801085e <_UG_ProcessTouchData+0x142>
 801077e:	7bfb      	ldrb	r3, [r7, #15]
 8010780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010784:	2b00      	cmp	r3, #0
 8010786:	d16a      	bne.n	801085e <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8010788:	7dfb      	ldrb	r3, [r7, #23]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d047      	beq.n	801081e <_UG_ProcessTouchData+0x102>
 801078e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010796:	d042      	beq.n	801081e <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010798:	7f7b      	ldrb	r3, [r7, #29]
 801079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d107      	bne.n	80107b2 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80107a2:	7f7b      	ldrb	r3, [r7, #29]
 80107a4:	f043 0305 	orr.w	r3, r3, #5
 80107a8:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80107aa:	7f7b      	ldrb	r3, [r7, #29]
 80107ac:	f023 0318 	bic.w	r3, r3, #24
 80107b0:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80107b2:	7f7b      	ldrb	r3, [r7, #29]
 80107b4:	f023 0320 	bic.w	r3, r3, #32
 80107b8:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80107c0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	db25      	blt.n	8010814 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80107ce:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	dc1e      	bgt.n	8010814 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80107dc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	db17      	blt.n	8010814 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80107ea:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	dc10      	bgt.n	8010814 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80107f2:	7f7b      	ldrb	r3, [r7, #29]
 80107f4:	f043 0320 	orr.w	r3, r3, #32
 80107f8:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80107fa:	7f7b      	ldrb	r3, [r7, #29]
 80107fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010800:	2b00      	cmp	r3, #0
 8010802:	d107      	bne.n	8010814 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8010804:	7f7b      	ldrb	r3, [r7, #29]
 8010806:	f023 0304 	bic.w	r3, r3, #4
 801080a:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 801080c:	7f7b      	ldrb	r3, [r7, #29]
 801080e:	f043 0302 	orr.w	r3, r3, #2
 8010812:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8010814:	7f7b      	ldrb	r3, [r7, #29]
 8010816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801081a:	777b      	strb	r3, [r7, #29]
 801081c:	e01f      	b.n	801085e <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 801081e:	7f7b      	ldrb	r3, [r7, #29]
 8010820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010824:	2b00      	cmp	r3, #0
 8010826:	d01a      	beq.n	801085e <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8010828:	7f7b      	ldrb	r3, [r7, #29]
 801082a:	f003 0320 	and.w	r3, r3, #32
 801082e:	2b00      	cmp	r3, #0
 8010830:	d004      	beq.n	801083c <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8010832:	7f7b      	ldrb	r3, [r7, #29]
 8010834:	f043 0308 	orr.w	r3, r3, #8
 8010838:	777b      	strb	r3, [r7, #29]
 801083a:	e003      	b.n	8010844 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 801083c:	7f7b      	ldrb	r3, [r7, #29]
 801083e:	f043 0310 	orr.w	r3, r3, #16
 8010842:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8010844:	7f7b      	ldrb	r3, [r7, #29]
 8010846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801084a:	2b00      	cmp	r3, #0
 801084c:	d003      	beq.n	8010856 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 801084e:	7f7b      	ldrb	r3, [r7, #29]
 8010850:	f043 0301 	orr.w	r3, r3, #1
 8010854:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8010856:	7f7b      	ldrb	r3, [r7, #29]
 8010858:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 801085c:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	7f7a      	ldrb	r2, [r7, #29]
 8010862:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8010864:	8bfb      	ldrh	r3, [r7, #30]
 8010866:	3301      	adds	r3, #1
 8010868:	83fb      	strh	r3, [r7, #30]
 801086a:	8bfa      	ldrh	r2, [r7, #30]
 801086c:	8abb      	ldrh	r3, [r7, #20]
 801086e:	429a      	cmp	r2, r3
 8010870:	f4ff af6a 	bcc.w	8010748 <_UG_ProcessTouchData+0x2c>
   }
}
 8010874:	bf00      	nop
 8010876:	bf00      	nop
 8010878:	3724      	adds	r7, #36	; 0x24
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	20002278 	.word	0x20002278

08010888 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b086      	sub	sp, #24
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010896:	2300      	movs	r3, #0
 8010898:	82fb      	strh	r3, [r7, #22]
 801089a:	e035      	b.n	8010908 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	685a      	ldr	r2, [r3, #4]
 80108a0:	8afb      	ldrh	r3, [r7, #22]
 80108a2:	015b      	lsls	r3, r3, #5
 80108a4:	4413      	add	r3, r2
 80108a6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	781b      	ldrb	r3, [r3, #0]
 80108ac:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	785b      	ldrb	r3, [r3, #1]
 80108b2:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80108b4:	7bfb      	ldrb	r3, [r7, #15]
 80108b6:	f003 0301 	and.w	r3, r3, #1
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d121      	bne.n	8010902 <_UG_UpdateObjects+0x7a>
 80108be:	7bfb      	ldrb	r3, [r7, #15]
 80108c0:	f003 0302 	and.w	r3, r3, #2
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d01c      	beq.n	8010902 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 80108c8:	7bfb      	ldrb	r3, [r7, #15]
 80108ca:	f003 0320 	and.w	r3, r3, #32
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d004      	beq.n	80108dc <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	6939      	ldr	r1, [r7, #16]
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
 80108de:	f003 0308 	and.w	r3, r3, #8
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00d      	beq.n	8010902 <_UG_UpdateObjects+0x7a>
 80108e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	da09      	bge.n	8010902 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 80108ee:	7bbb      	ldrb	r3, [r7, #14]
 80108f0:	f003 0341 	and.w	r3, r3, #65	; 0x41
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d004      	beq.n	8010902 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	6939      	ldr	r1, [r7, #16]
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8010902:	8afb      	ldrh	r3, [r7, #22]
 8010904:	3301      	adds	r3, #1
 8010906:	82fb      	strh	r3, [r7, #22]
 8010908:	8afa      	ldrh	r2, [r7, #22]
 801090a:	8abb      	ldrh	r3, [r7, #20]
 801090c:	429a      	cmp	r2, r3
 801090e:	d3c5      	bcc.n	801089c <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8010910:	bf00      	nop
 8010912:	bf00      	nop
 8010914:	3718      	adds	r7, #24
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
	...

0801091c <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b086      	sub	sp, #24
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8010924:	4b22      	ldr	r3, [pc, #136]	; (80109b0 <_UG_HandleEvents+0x94>)
 8010926:	2200      	movs	r2, #0
 8010928:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 801092a:	4b21      	ldr	r3, [pc, #132]	; (80109b0 <_UG_HandleEvents+0x94>)
 801092c:	2202      	movs	r2, #2
 801092e:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010936:	2300      	movs	r3, #0
 8010938:	82fb      	strh	r3, [r7, #22]
 801093a:	e02f      	b.n	801099c <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	685a      	ldr	r2, [r3, #4]
 8010940:	8afb      	ldrh	r3, [r7, #22]
 8010942:	015b      	lsls	r3, r3, #5
 8010944:	4413      	add	r3, r2
 8010946:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 801094e:	7bfb      	ldrb	r3, [r7, #15]
 8010950:	f003 0301 	and.w	r3, r3, #1
 8010954:	2b00      	cmp	r3, #0
 8010956:	d11e      	bne.n	8010996 <_UG_HandleEvents+0x7a>
 8010958:	7bfb      	ldrb	r3, [r7, #15]
 801095a:	f003 0302 	and.w	r3, r3, #2
 801095e:	2b00      	cmp	r3, #0
 8010960:	d019      	beq.n	8010996 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	7e9b      	ldrb	r3, [r3, #26]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d015      	beq.n	8010996 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 801096a:	4a11      	ldr	r2, [pc, #68]	; (80109b0 <_UG_HandleEvents+0x94>)
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	7e1a      	ldrb	r2, [r3, #24]
 8010974:	4b0e      	ldr	r3, [pc, #56]	; (80109b0 <_UG_HandleEvents+0x94>)
 8010976:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	7e5a      	ldrb	r2, [r3, #25]
 801097c:	4b0c      	ldr	r3, [pc, #48]	; (80109b0 <_UG_HandleEvents+0x94>)
 801097e:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	7e9a      	ldrb	r2, [r3, #26]
 8010984:	4b0a      	ldr	r3, [pc, #40]	; (80109b0 <_UG_HandleEvents+0x94>)
 8010986:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801098c:	4808      	ldr	r0, [pc, #32]	; (80109b0 <_UG_HandleEvents+0x94>)
 801098e:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	2200      	movs	r2, #0
 8010994:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8010996:	8afb      	ldrh	r3, [r7, #22]
 8010998:	3301      	adds	r3, #1
 801099a:	82fb      	strh	r3, [r7, #22]
 801099c:	8afa      	ldrh	r2, [r7, #22]
 801099e:	8abb      	ldrh	r3, [r7, #20]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d3cb      	bcc.n	801093c <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80109a4:	bf00      	nop
 80109a6:	bf00      	nop
 80109a8:	3718      	adds	r7, #24
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	2000228c 	.word	0x2000228c

080109b4 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 80109b4:	b590      	push	{r4, r7, lr}
 80109b6:	b08f      	sub	sp, #60	; 0x3c
 80109b8:	af02      	add	r7, sp, #8
 80109ba:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f000 812c 	beq.w	8010c1e <_UG_PutText+0x26a>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	f000 8127 	beq.w	8010c1e <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	89db      	ldrh	r3, [r3, #14]
 80109d4:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	895b      	ldrh	r3, [r3, #10]
 80109da:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	3302      	adds	r3, #2
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 80109e6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80109ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80109ee:	1ad2      	subs	r2, r2, r3
 80109f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	f2c0 8114 	blt.w	8010c22 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	891b      	ldrh	r3, [r3, #8]
 80109fe:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	899b      	ldrh	r3, [r3, #12]
 8010a04:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	7d1b      	ldrb	r3, [r3, #20]
 8010a0a:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	8adb      	ldrh	r3, [r3, #22]
 8010a10:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	8b1b      	ldrh	r3, [r3, #24]
 8010a16:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7ff fb92 	bl	8010150 <_UG_FontSelect>

   rc=1;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010a34:	4b80      	ldr	r3, [pc, #512]	; (8010c38 <_UG_PutText+0x284>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d107      	bne.n	8010a50 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8010a40:	f107 0308 	add.w	r3, r7, #8
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7ff f9bf 	bl	800fdc8 <_UG_DecodeUTF8>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010a4e:	e004      	b.n	8010a5a <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	1c5a      	adds	r2, r3, #1
 8010a54:	60ba      	str	r2, [r7, #8]
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8010a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d006      	beq.n	8010a6e <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8010a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a62:	2b0a      	cmp	r3, #10
 8010a64:	d1e6      	bne.n	8010a34 <_UG_PutText+0x80>
 8010a66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010a68:	3301      	adds	r3, #1
 8010a6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010a6c:	e7e2      	b.n	8010a34 <_UG_PutText+0x80>
     if(!chr) break;
 8010a6e:	bf00      	nop
   }

   yp = 0;
 8010a70:	2300      	movs	r3, #0
 8010a72:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8010a74:	7e7b      	ldrb	r3, [r7, #25]
 8010a76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d01f      	beq.n	8010abe <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8010a7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a80:	8c3b      	ldrh	r3, [r7, #32]
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	3301      	adds	r3, #1
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8010a8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010a8e:	8bfb      	ldrh	r3, [r7, #30]
 8010a90:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8010a92:	fb11 f303 	smulbb	r3, r1, r3
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8010a9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010aa0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	b299      	uxth	r1, r3
 8010aa6:	8abb      	ldrh	r3, [r7, #20]
 8010aa8:	fb11 f303 	smulbb	r3, r1, r3
 8010aac:	b29b      	uxth	r3, r3
 8010aae:	1ad3      	subs	r3, r2, r3
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8010ab4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f2c0 80b4 	blt.w	8010c26 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8010abe:	7e7b      	ldrb	r3, [r7, #25]
 8010ac0:	f003 0310 	and.w	r3, r3, #16
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d003      	beq.n	8010ad0 <_UG_PutText+0x11c>
 8010ac8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010acc:	105b      	asrs	r3, r3, #1
 8010ace:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8010ad0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010ad2:	8c3b      	ldrh	r3, [r7, #32]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8010ada:	2300      	movs	r3, #0
 8010adc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010ae6:	4b54      	ldr	r3, [pc, #336]	; (8010c38 <_UG_PutText+0x284>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d107      	bne.n	8010b02 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8010af2:	f107 0308 	add.w	r3, r7, #8
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7ff f966 	bl	800fdc8 <_UG_DecodeUTF8>
 8010afc:	4603      	mov	r3, r0
 8010afe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010b00:	e004      	b.n	8010b0c <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	1c5a      	adds	r2, r3, #1
 8010b06:	60ba      	str	r2, [r7, #8]
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8010b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d01b      	beq.n	8010b4a <_UG_PutText+0x196>
 8010b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b14:	2b0a      	cmp	r3, #10
 8010b16:	d018      	beq.n	8010b4a <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8010b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b1a:	2100      	movs	r1, #0
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7ff f9cb 	bl	800feb8 <_UG_GetCharData>
 8010b22:	4603      	mov	r3, r0
 8010b24:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8010b26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b2e:	d00a      	beq.n	8010b46 <_UG_PutText+0x192>
         sl++;
 8010b30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b32:	3301      	adds	r3, #1
 8010b34:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8010b36:	8a7a      	ldrh	r2, [r7, #18]
 8010b38:	8afb      	ldrh	r3, [r7, #22]
 8010b3a:	4413      	add	r3, r2
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b40:	4413      	add	r3, r2
 8010b42:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010b44:	e7cf      	b.n	8010ae6 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8010b46:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010b48:	e7cd      	b.n	8010ae6 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8010b4a:	8afb      	ldrh	r3, [r7, #22]
 8010b4c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8010b52:	8b7a      	ldrh	r2, [r7, #26]
 8010b54:	8bbb      	ldrh	r3, [r7, #28]
 8010b56:	1ad3      	subs	r3, r2, r3
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8010b60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010b62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b64:	1ad3      	subs	r3, r2, r3
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8010b6a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	db5b      	blt.n	8010c2a <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8010b72:	7e7b      	ldrb	r3, [r7, #25]
 8010b74:	f003 0301 	and.w	r3, r3, #1
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d002      	beq.n	8010b82 <_UG_PutText+0x1ce>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8010b80:	e008      	b.n	8010b94 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8010b82:	7e7b      	ldrb	r3, [r7, #25]
 8010b84:	f003 0302 	and.w	r3, r3, #2
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d003      	beq.n	8010b94 <_UG_PutText+0x1e0>
 8010b8c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010b90:	105b      	asrs	r3, r3, #1
 8010b92:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8010b94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010b96:	8bbb      	ldrh	r3, [r7, #28]
 8010b98:	4413      	add	r3, r2
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010b9e:	4b26      	ldr	r3, [pc, #152]	; (8010c38 <_UG_PutText+0x284>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d107      	bne.n	8010bba <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8010baa:	f107 030c 	add.w	r3, r7, #12
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7ff f90a 	bl	800fdc8 <_UG_DecodeUTF8>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010bb8:	e004      	b.n	8010bc4 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	1c5a      	adds	r2, r3, #1
 8010bbe:	60fa      	str	r2, [r7, #12]
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8010bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d031      	beq.n	8010c2e <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8010bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bcc:	2b0a      	cmp	r3, #10
 8010bce:	d01c      	beq.n	8010c0a <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	8a1c      	ldrh	r4, [r3, #16]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	8a5b      	ldrh	r3, [r3, #18]
 8010bd8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010bdc:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8010be0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8010be2:	9300      	str	r3, [sp, #0]
 8010be4:	4623      	mov	r3, r4
 8010be6:	f7ff fb35 	bl	8010254 <_UG_PutChar>
 8010bea:	4603      	mov	r3, r0
 8010bec:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8010bee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf6:	d0d2      	beq.n	8010b9e <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8010bf8:	8a7a      	ldrh	r2, [r7, #18]
 8010bfa:	8afb      	ldrh	r3, [r7, #22]
 8010bfc:	4413      	add	r3, r2
 8010bfe:	b29a      	uxth	r2, r3
 8010c00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010c02:	4413      	add	r3, r2
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010c08:	e7c9      	b.n	8010b9e <_UG_PutText+0x1ea>
           break;
 8010c0a:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8010c0c:	8bfa      	ldrh	r2, [r7, #30]
 8010c0e:	8abb      	ldrh	r3, [r7, #20]
 8010c10:	4413      	add	r3, r2
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c16:	4413      	add	r3, r2
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8010c1c:	e75d      	b.n	8010ada <_UG_PutText+0x126>
     return;
 8010c1e:	bf00      	nop
 8010c20:	e006      	b.n	8010c30 <_UG_PutText+0x27c>
     return;
 8010c22:	bf00      	nop
 8010c24:	e004      	b.n	8010c30 <_UG_PutText+0x27c>
        return;
 8010c26:	bf00      	nop
 8010c28:	e002      	b.n	8010c30 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8010c2a:	bf00      	nop
 8010c2c:	e000      	b.n	8010c30 <_UG_PutText+0x27c>
           return;
 8010c2e:	bf00      	nop
   }
}
 8010c30:	3734      	adds	r7, #52	; 0x34
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd90      	pop	{r4, r7, pc}
 8010c36:	bf00      	nop
 8010c38:	20002278 	.word	0x20002278

08010c3c <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8010c3c:	b5b0      	push	{r4, r5, r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af02      	add	r7, sp, #8
 8010c42:	4604      	mov	r4, r0
 8010c44:	4608      	mov	r0, r1
 8010c46:	4611      	mov	r1, r2
 8010c48:	461a      	mov	r2, r3
 8010c4a:	4623      	mov	r3, r4
 8010c4c:	80fb      	strh	r3, [r7, #6]
 8010c4e:	4603      	mov	r3, r0
 8010c50:	80bb      	strh	r3, [r7, #4]
 8010c52:	460b      	mov	r3, r1
 8010c54:	807b      	strh	r3, [r7, #2]
 8010c56:	4613      	mov	r3, r2
 8010c58:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8010c5a:	887b      	ldrh	r3, [r7, #2]
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	b21c      	sxth	r4, r3
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	1c9a      	adds	r2, r3, #2
 8010c66:	61ba      	str	r2, [r7, #24]
 8010c68:	881b      	ldrh	r3, [r3, #0]
 8010c6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010c6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8010c72:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010c76:	9300      	str	r3, [sp, #0]
 8010c78:	4613      	mov	r3, r2
 8010c7a:	4622      	mov	r2, r4
 8010c7c:	f7fe fee0 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8010c80:	88bb      	ldrh	r3, [r7, #4]
 8010c82:	3301      	adds	r3, #1
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	b219      	sxth	r1, r3
 8010c88:	883b      	ldrh	r3, [r7, #0]
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	b21c      	sxth	r4, r3
 8010c90:	69bb      	ldr	r3, [r7, #24]
 8010c92:	1c9a      	adds	r2, r3, #2
 8010c94:	61ba      	str	r2, [r7, #24]
 8010c96:	881b      	ldrh	r3, [r3, #0]
 8010c98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010c9c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010ca0:	9300      	str	r3, [sp, #0]
 8010ca2:	4623      	mov	r3, r4
 8010ca4:	f7fe fecc 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8010ca8:	69bb      	ldr	r3, [r7, #24]
 8010caa:	1c9a      	adds	r2, r3, #2
 8010cac:	61ba      	str	r2, [r7, #24]
 8010cae:	881b      	ldrh	r3, [r3, #0]
 8010cb0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8010cb4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010cb8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8010cbc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010cc0:	9300      	str	r3, [sp, #0]
 8010cc2:	4623      	mov	r3, r4
 8010cc4:	f7fe febc 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8010cc8:	883b      	ldrh	r3, [r7, #0]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	b21c      	sxth	r4, r3
 8010cd0:	69bb      	ldr	r3, [r7, #24]
 8010cd2:	1c9a      	adds	r2, r3, #2
 8010cd4:	61ba      	str	r2, [r7, #24]
 8010cd6:	881b      	ldrh	r3, [r3, #0]
 8010cd8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010cdc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8010ce0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8010ce4:	9300      	str	r3, [sp, #0]
 8010ce6:	4623      	mov	r3, r4
 8010ce8:	f7fe feaa 	bl	800fa40 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8010cec:	88fb      	ldrh	r3, [r7, #6]
 8010cee:	3301      	adds	r3, #1
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	b218      	sxth	r0, r3
 8010cf4:	88bb      	ldrh	r3, [r7, #4]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	b219      	sxth	r1, r3
 8010cfc:	887b      	ldrh	r3, [r7, #2]
 8010cfe:	3b02      	subs	r3, #2
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	b21c      	sxth	r4, r3
 8010d04:	88bb      	ldrh	r3, [r7, #4]
 8010d06:	3301      	adds	r3, #1
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	b21d      	sxth	r5, r3
 8010d0c:	69bb      	ldr	r3, [r7, #24]
 8010d0e:	1c9a      	adds	r2, r3, #2
 8010d10:	61ba      	str	r2, [r7, #24]
 8010d12:	881b      	ldrh	r3, [r3, #0]
 8010d14:	9300      	str	r3, [sp, #0]
 8010d16:	462b      	mov	r3, r5
 8010d18:	4622      	mov	r2, r4
 8010d1a:	f7fe fe91 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8010d1e:	88fb      	ldrh	r3, [r7, #6]
 8010d20:	3301      	adds	r3, #1
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	b218      	sxth	r0, r3
 8010d26:	88bb      	ldrh	r3, [r7, #4]
 8010d28:	3302      	adds	r3, #2
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	b219      	sxth	r1, r3
 8010d2e:	88fb      	ldrh	r3, [r7, #6]
 8010d30:	3301      	adds	r3, #1
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	b21c      	sxth	r4, r3
 8010d36:	883b      	ldrh	r3, [r7, #0]
 8010d38:	3b02      	subs	r3, #2
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	b21d      	sxth	r5, r3
 8010d3e:	69bb      	ldr	r3, [r7, #24]
 8010d40:	1c9a      	adds	r2, r3, #2
 8010d42:	61ba      	str	r2, [r7, #24]
 8010d44:	881b      	ldrh	r3, [r3, #0]
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	462b      	mov	r3, r5
 8010d4a:	4622      	mov	r2, r4
 8010d4c:	f7fe fe78 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8010d50:	88fb      	ldrh	r3, [r7, #6]
 8010d52:	3301      	adds	r3, #1
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	b218      	sxth	r0, r3
 8010d58:	883b      	ldrh	r3, [r7, #0]
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	b219      	sxth	r1, r3
 8010d60:	887b      	ldrh	r3, [r7, #2]
 8010d62:	3b01      	subs	r3, #1
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	b21c      	sxth	r4, r3
 8010d68:	883b      	ldrh	r3, [r7, #0]
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	b21d      	sxth	r5, r3
 8010d70:	69bb      	ldr	r3, [r7, #24]
 8010d72:	1c9a      	adds	r2, r3, #2
 8010d74:	61ba      	str	r2, [r7, #24]
 8010d76:	881b      	ldrh	r3, [r3, #0]
 8010d78:	9300      	str	r3, [sp, #0]
 8010d7a:	462b      	mov	r3, r5
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	f7fe fe5f 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8010d82:	887b      	ldrh	r3, [r7, #2]
 8010d84:	3b01      	subs	r3, #1
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	b218      	sxth	r0, r3
 8010d8a:	88bb      	ldrh	r3, [r7, #4]
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	b29b      	uxth	r3, r3
 8010d90:	b219      	sxth	r1, r3
 8010d92:	887b      	ldrh	r3, [r7, #2]
 8010d94:	3b01      	subs	r3, #1
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	b21c      	sxth	r4, r3
 8010d9a:	883b      	ldrh	r3, [r7, #0]
 8010d9c:	3b02      	subs	r3, #2
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	b21d      	sxth	r5, r3
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	1c9a      	adds	r2, r3, #2
 8010da6:	61ba      	str	r2, [r7, #24]
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	9300      	str	r3, [sp, #0]
 8010dac:	462b      	mov	r3, r5
 8010dae:	4622      	mov	r2, r4
 8010db0:	f7fe fe46 	bl	800fa40 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8010db4:	88fb      	ldrh	r3, [r7, #6]
 8010db6:	3302      	adds	r3, #2
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	b218      	sxth	r0, r3
 8010dbc:	88bb      	ldrh	r3, [r7, #4]
 8010dbe:	3302      	adds	r3, #2
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	b219      	sxth	r1, r3
 8010dc4:	887b      	ldrh	r3, [r7, #2]
 8010dc6:	3b03      	subs	r3, #3
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	b21c      	sxth	r4, r3
 8010dcc:	88bb      	ldrh	r3, [r7, #4]
 8010dce:	3302      	adds	r3, #2
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	b21d      	sxth	r5, r3
 8010dd4:	69bb      	ldr	r3, [r7, #24]
 8010dd6:	1c9a      	adds	r2, r3, #2
 8010dd8:	61ba      	str	r2, [r7, #24]
 8010dda:	881b      	ldrh	r3, [r3, #0]
 8010ddc:	9300      	str	r3, [sp, #0]
 8010dde:	462b      	mov	r3, r5
 8010de0:	4622      	mov	r2, r4
 8010de2:	f7fe fe2d 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8010de6:	88fb      	ldrh	r3, [r7, #6]
 8010de8:	3302      	adds	r3, #2
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	b218      	sxth	r0, r3
 8010dee:	88bb      	ldrh	r3, [r7, #4]
 8010df0:	3303      	adds	r3, #3
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	b219      	sxth	r1, r3
 8010df6:	88fb      	ldrh	r3, [r7, #6]
 8010df8:	3302      	adds	r3, #2
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	b21c      	sxth	r4, r3
 8010dfe:	883b      	ldrh	r3, [r7, #0]
 8010e00:	3b03      	subs	r3, #3
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	b21d      	sxth	r5, r3
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	1c9a      	adds	r2, r3, #2
 8010e0a:	61ba      	str	r2, [r7, #24]
 8010e0c:	881b      	ldrh	r3, [r3, #0]
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	462b      	mov	r3, r5
 8010e12:	4622      	mov	r2, r4
 8010e14:	f7fe fe14 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8010e18:	88fb      	ldrh	r3, [r7, #6]
 8010e1a:	3302      	adds	r3, #2
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	b218      	sxth	r0, r3
 8010e20:	883b      	ldrh	r3, [r7, #0]
 8010e22:	3b02      	subs	r3, #2
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	b219      	sxth	r1, r3
 8010e28:	887b      	ldrh	r3, [r7, #2]
 8010e2a:	3b02      	subs	r3, #2
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	b21c      	sxth	r4, r3
 8010e30:	883b      	ldrh	r3, [r7, #0]
 8010e32:	3b02      	subs	r3, #2
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	b21d      	sxth	r5, r3
 8010e38:	69bb      	ldr	r3, [r7, #24]
 8010e3a:	1c9a      	adds	r2, r3, #2
 8010e3c:	61ba      	str	r2, [r7, #24]
 8010e3e:	881b      	ldrh	r3, [r3, #0]
 8010e40:	9300      	str	r3, [sp, #0]
 8010e42:	462b      	mov	r3, r5
 8010e44:	4622      	mov	r2, r4
 8010e46:	f7fe fdfb 	bl	800fa40 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8010e4a:	887b      	ldrh	r3, [r7, #2]
 8010e4c:	3b02      	subs	r3, #2
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	b218      	sxth	r0, r3
 8010e52:	88bb      	ldrh	r3, [r7, #4]
 8010e54:	3302      	adds	r3, #2
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	b219      	sxth	r1, r3
 8010e5a:	887b      	ldrh	r3, [r7, #2]
 8010e5c:	3b02      	subs	r3, #2
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	b21a      	sxth	r2, r3
 8010e62:	883b      	ldrh	r3, [r7, #0]
 8010e64:	3b03      	subs	r3, #3
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	b21c      	sxth	r4, r3
 8010e6a:	69bb      	ldr	r3, [r7, #24]
 8010e6c:	881b      	ldrh	r3, [r3, #0]
 8010e6e:	9300      	str	r3, [sp, #0]
 8010e70:	4623      	mov	r3, r4
 8010e72:	f7fe fde5 	bl	800fa40 <UG_DrawLine>
}
 8010e76:	bf00      	nop
 8010e78:	3708      	adds	r7, #8
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010e80 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8010e80:	b480      	push	{r7}
 8010e82:	b083      	sub	sp, #12
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	4603      	mov	r3, r0
 8010e88:	6039      	str	r1, [r7, #0]
 8010e8a:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8010e8c:	79fb      	ldrb	r3, [r7, #7]
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d810      	bhi.n	8010eb4 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8010e92:	4b0b      	ldr	r3, [pc, #44]	; (8010ec0 <UG_DriverRegister+0x40>)
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	79fb      	ldrb	r3, [r7, #7]
 8010e98:	330a      	adds	r3, #10
 8010e9a:	00db      	lsls	r3, r3, #3
 8010e9c:	4413      	add	r3, r2
 8010e9e:	683a      	ldr	r2, [r7, #0]
 8010ea0:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8010ea2:	4b07      	ldr	r3, [pc, #28]	; (8010ec0 <UG_DriverRegister+0x40>)
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	79fb      	ldrb	r3, [r7, #7]
 8010ea8:	330a      	adds	r3, #10
 8010eaa:	00db      	lsls	r3, r3, #3
 8010eac:	4413      	add	r3, r2
 8010eae:	2203      	movs	r2, #3
 8010eb0:	721a      	strb	r2, [r3, #8]
 8010eb2:	e000      	b.n	8010eb6 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8010eb4:	bf00      	nop
}
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr
 8010ec0:	20002278 	.word	0x20002278

08010ec4 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8010eca:	4b5e      	ldr	r3, [pc, #376]	; (8011044 <UG_Update+0x180>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010ed2:	f003 0301 	and.w	r3, r3, #1
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d00a      	beq.n	8010ef0 <UG_Update+0x2c>
 8010eda:	4b5a      	ldr	r3, [pc, #360]	; (8011044 <UG_Update+0x180>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8010ee2:	4b58      	ldr	r3, [pc, #352]	; (8011044 <UG_Update+0x180>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f022 0201 	bic.w	r2, r2, #1
 8010eea:	b2d2      	uxtb	r2, r2
 8010eec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8010ef0:	4b54      	ldr	r3, [pc, #336]	; (8011044 <UG_Update+0x180>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	68da      	ldr	r2, [r3, #12]
 8010ef6:	4b53      	ldr	r3, [pc, #332]	; (8011044 <UG_Update+0x180>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	691b      	ldr	r3, [r3, #16]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d071      	beq.n	8010fe4 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8010f00:	4b50      	ldr	r3, [pc, #320]	; (8011044 <UG_Update+0x180>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d06c      	beq.n	8010fe4 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8010f0a:	4b4e      	ldr	r3, [pc, #312]	; (8011044 <UG_Update+0x180>)
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	4b4d      	ldr	r3, [pc, #308]	; (8011044 <UG_Update+0x180>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	6912      	ldr	r2, [r2, #16]
 8010f14:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8010f16:	4b4b      	ldr	r3, [pc, #300]	; (8011044 <UG_Update+0x180>)
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	4b4a      	ldr	r3, [pc, #296]	; (8011044 <UG_Update+0x180>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	68d2      	ldr	r2, [r2, #12]
 8010f20:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8010f22:	4b48      	ldr	r3, [pc, #288]	; (8011044 <UG_Update+0x180>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	695b      	ldr	r3, [r3, #20]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d045      	beq.n	8010fb8 <UG_Update+0xf4>
 8010f2c:	4b45      	ldr	r3, [pc, #276]	; (8011044 <UG_Update+0x180>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	695b      	ldr	r3, [r3, #20]
 8010f32:	7d9b      	ldrb	r3, [r3, #22]
 8010f34:	f003 0302 	and.w	r3, r3, #2
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d03d      	beq.n	8010fb8 <UG_Update+0xf4>
 8010f3c:	4b41      	ldr	r3, [pc, #260]	; (8011044 <UG_Update+0x180>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	7a1b      	ldrb	r3, [r3, #8]
 8010f44:	f003 0308 	and.w	r3, r3, #8
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d035      	beq.n	8010fb8 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8010f4c:	4b3d      	ldr	r3, [pc, #244]	; (8011044 <UG_Update+0x180>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	695b      	ldr	r3, [r3, #20]
 8010f52:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8010f56:	4b3b      	ldr	r3, [pc, #236]	; (8011044 <UG_Update+0x180>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	691b      	ldr	r3, [r3, #16]
 8010f5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d123      	bne.n	8010fac <UG_Update+0xe8>
 8010f64:	4b37      	ldr	r3, [pc, #220]	; (8011044 <UG_Update+0x180>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	695b      	ldr	r3, [r3, #20]
 8010f6a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010f6e:	4b35      	ldr	r3, [pc, #212]	; (8011044 <UG_Update+0x180>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	691b      	ldr	r3, [r3, #16]
 8010f74:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d117      	bne.n	8010fac <UG_Update+0xe8>
 8010f7c:	4b31      	ldr	r3, [pc, #196]	; (8011044 <UG_Update+0x180>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	695b      	ldr	r3, [r3, #20]
 8010f82:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8010f86:	4b2f      	ldr	r3, [pc, #188]	; (8011044 <UG_Update+0x180>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	691b      	ldr	r3, [r3, #16]
 8010f8c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d10b      	bne.n	8010fac <UG_Update+0xe8>
 8010f94:	4b2b      	ldr	r3, [pc, #172]	; (8011044 <UG_Update+0x180>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	695b      	ldr	r3, [r3, #20]
 8010f9a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8010f9e:	4b29      	ldr	r3, [pc, #164]	; (8011044 <UG_Update+0x180>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	691b      	ldr	r3, [r3, #16]
 8010fa4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d005      	beq.n	8010fb8 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8010fac:	4b25      	ldr	r3, [pc, #148]	; (8011044 <UG_Update+0x180>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	695b      	ldr	r3, [r3, #20]
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f000 f848 	bl	8011048 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8010fb8:	4b22      	ldr	r3, [pc, #136]	; (8011044 <UG_Update+0x180>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	691b      	ldr	r3, [r3, #16]
 8010fbe:	7a1a      	ldrb	r2, [r3, #8]
 8010fc0:	4b20      	ldr	r3, [pc, #128]	; (8011044 <UG_Update+0x180>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	691b      	ldr	r3, [r3, #16]
 8010fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010fca:	b2d2      	uxtb	r2, r2
 8010fcc:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8010fce:	4b1d      	ldr	r3, [pc, #116]	; (8011044 <UG_Update+0x180>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	691b      	ldr	r3, [r3, #16]
 8010fd4:	7a1a      	ldrb	r2, [r3, #8]
 8010fd6:	4b1b      	ldr	r3, [pc, #108]	; (8011044 <UG_Update+0x180>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8010fe0:	b2d2      	uxtb	r2, r2
 8010fe2:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8010fe4:	4b17      	ldr	r3, [pc, #92]	; (8011044 <UG_Update+0x180>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	691b      	ldr	r3, [r3, #16]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d01b      	beq.n	8011026 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8010fee:	4b15      	ldr	r3, [pc, #84]	; (8011044 <UG_Update+0x180>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	7a1b      	ldrb	r3, [r3, #8]
 8010ffa:	f003 0320 	and.w	r3, r3, #32
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d002      	beq.n	8011008 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 f8ca 	bl	801119c <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	7a1b      	ldrb	r3, [r3, #8]
 801100c:	f003 0308 	and.w	r3, r3, #8
 8011010:	2b00      	cmp	r3, #0
 8011012:	d008      	beq.n	8011026 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7ff fb81 	bl	801071c <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f7ff fc34 	bl	8010888 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7ff fc7b 	bl	801091c <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8011026:	4b07      	ldr	r3, [pc, #28]	; (8011044 <UG_Update+0x180>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	689b      	ldr	r3, [r3, #8]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d004      	beq.n	801103c <UG_Update+0x178>
     gui->device->flush();
 8011032:	4b04      	ldr	r3, [pc, #16]	; (8011044 <UG_Update+0x180>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	4798      	blx	r3
   }
}
 801103c:	bf00      	nop
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	20002278 	.word	0x20002278

08011048 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8011048:	b590      	push	{r4, r7, lr}
 801104a:	b08f      	sub	sp, #60	; 0x3c
 801104c:	af02      	add	r7, sp, #8
 801104e:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2b00      	cmp	r3, #0
 8011054:	f000 809a 	beq.w	801118c <_UG_WindowDrawTitle+0x144>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	7a1b      	ldrb	r3, [r3, #8]
 801105c:	f003 0302 	and.w	r3, r3, #2
 8011060:	2b00      	cmp	r3, #0
 8011062:	f000 8093 	beq.w	801118c <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	89db      	ldrh	r3, [r3, #14]
 801106a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	8a1b      	ldrh	r3, [r3, #16]
 8011070:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	8a5b      	ldrh	r3, [r3, #18]
 8011076:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	8a9b      	ldrh	r3, [r3, #20]
 801107c:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	7d9b      	ldrb	r3, [r3, #22]
 8011082:	f003 0301 	and.w	r3, r3, #1
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00f      	beq.n	80110aa <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 801108a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801108c:	3303      	adds	r3, #3
 801108e:	b29b      	uxth	r3, r3
 8011090:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8011092:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011094:	3303      	adds	r3, #3
 8011096:	b29b      	uxth	r3, r3
 8011098:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 801109a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801109c:	3b03      	subs	r3, #3
 801109e:	b29b      	uxth	r3, r3
 80110a0:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 80110a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80110a4:	3b03      	subs	r3, #3
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80110aa:	4b3b      	ldr	r3, [pc, #236]	; (8011198 <_UG_WindowDrawTitle+0x150>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	691b      	ldr	r3, [r3, #16]
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d106      	bne.n	80110c4 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80110ba:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80110c0:	83bb      	strh	r3, [r7, #28]
 80110c2:	e005      	b.n	80110d0 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80110c8:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110ce:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80110d6:	b29a      	uxth	r2, r3
 80110d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80110da:	4413      	add	r3, r2
 80110dc:	b29b      	uxth	r3, r3
 80110de:	3b01      	subs	r3, #1
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	b21c      	sxth	r4, r3
 80110e4:	8bfb      	ldrh	r3, [r7, #30]
 80110e6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80110ea:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80110ee:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	4623      	mov	r3, r4
 80110f6:	f7fe fb03 	bl	800f700 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	699b      	ldr	r3, [r3, #24]
 80110fe:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	69db      	ldr	r3, [r3, #28]
 8011104:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8011106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011108:	3303      	adds	r3, #3
 801110a:	b29b      	uxth	r3, r3
 801110c:	b21b      	sxth	r3, r3
 801110e:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8011110:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011112:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8011114:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011116:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801111e:	b29a      	uxth	r2, r3
 8011120:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011122:	4413      	add	r3, r2
 8011124:	b29b      	uxth	r3, r3
 8011126:	3b01      	subs	r3, #1
 8011128:	b29b      	uxth	r3, r3
 801112a:	b21b      	sxth	r3, r3
 801112c:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011134:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801113e:	b21b      	sxth	r3, r3
 8011140:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8011148:	b21b      	sxth	r3, r3
 801114a:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 801114c:	f107 030c 	add.w	r3, r7, #12
 8011150:	4618      	mov	r0, r3
 8011152:	f7ff fc2f 	bl	80109b4 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801115c:	b29a      	uxth	r2, r3
 801115e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011160:	4413      	add	r3, r2
 8011162:	b29b      	uxth	r3, r3
 8011164:	b219      	sxth	r1, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801116c:	b29a      	uxth	r2, r3
 801116e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011170:	4413      	add	r3, r2
 8011172:	b29b      	uxth	r3, r3
 8011174:	b21b      	sxth	r3, r3
 8011176:	f649 5413 	movw	r4, #40211	; 0x9d13
 801117a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801117e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011182:	9400      	str	r4, [sp, #0]
 8011184:	f7fe fc5c 	bl	800fa40 <UG_DrawLine>
      return UG_RESULT_OK;
 8011188:	2300      	movs	r3, #0
 801118a:	e001      	b.n	8011190 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 801118c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011190:	4618      	mov	r0, r3
 8011192:	3734      	adds	r7, #52	; 0x34
 8011194:	46bd      	mov	sp, r7
 8011196:	bd90      	pop	{r4, r7, pc}
 8011198:	20002278 	.word	0x20002278

0801119c <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 801119c:	b590      	push	{r4, r7, lr}
 801119e:	b089      	sub	sp, #36	; 0x24
 80111a0:	af02      	add	r7, sp, #8
 80111a2:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	89db      	ldrh	r3, [r3, #14]
 80111a8:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	8a1b      	ldrh	r3, [r3, #16]
 80111ae:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	8a5b      	ldrh	r3, [r3, #18]
 80111b4:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	8a9b      	ldrh	r3, [r3, #20]
 80111ba:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	7a1b      	ldrb	r3, [r3, #8]
 80111c0:	f023 0320 	bic.w	r3, r3, #32
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	7a1b      	ldrb	r3, [r3, #8]
 80111ce:	f003 0308 	and.w	r3, r3, #8
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	f000 8084 	beq.w	80112e0 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	7d9b      	ldrb	r3, [r3, #22]
 80111dc:	f003 0301 	and.w	r3, r3, #1
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d021      	beq.n	8011228 <_UG_WindowUpdate+0x8c>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	7a1b      	ldrb	r3, [r3, #8]
 80111e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d11b      	bne.n	8011228 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80111f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80111f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80111f8:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80111fc:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8011200:	4c43      	ldr	r4, [pc, #268]	; (8011310 <_UG_WindowUpdate+0x174>)
 8011202:	9400      	str	r4, [sp, #0]
 8011204:	f7ff fd1a 	bl	8010c3c <_UG_DrawObjectFrame>
         xs+=3;
 8011208:	8abb      	ldrh	r3, [r7, #20]
 801120a:	3303      	adds	r3, #3
 801120c:	b29b      	uxth	r3, r3
 801120e:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8011210:	8a7b      	ldrh	r3, [r7, #18]
 8011212:	3303      	adds	r3, #3
 8011214:	b29b      	uxth	r3, r3
 8011216:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8011218:	8a3b      	ldrh	r3, [r7, #16]
 801121a:	3b03      	subs	r3, #3
 801121c:	b29b      	uxth	r3, r3
 801121e:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8011220:	89fb      	ldrh	r3, [r7, #14]
 8011222:	3b03      	subs	r3, #3
 8011224:	b29b      	uxth	r3, r3
 8011226:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7d9b      	ldrb	r3, [r3, #22]
 801122c:	f003 0302 	and.w	r3, r3, #2
 8011230:	2b00      	cmp	r3, #0
 8011232:	d01a      	beq.n	801126a <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f7ff ff07 	bl	8011048 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011240:	b29a      	uxth	r2, r3
 8011242:	8a7b      	ldrh	r3, [r7, #18]
 8011244:	4413      	add	r3, r2
 8011246:	b29b      	uxth	r3, r3
 8011248:	3301      	adds	r3, #1
 801124a:	b29b      	uxth	r3, r3
 801124c:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	7a1b      	ldrb	r3, [r3, #8]
 8011252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011256:	2b00      	cmp	r3, #0
 8011258:	d007      	beq.n	801126a <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	7a1b      	ldrb	r3, [r3, #8]
 801125e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011262:	b2da      	uxtb	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	721a      	strb	r2, [r3, #8]
            return;
 8011268:	e04e      	b.n	8011308 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	899b      	ldrh	r3, [r3, #12]
 801126e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8011272:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011276:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 801127a:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	4623      	mov	r3, r4
 8011282:	f7fe fa3d 	bl	800f700 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 801128c:	2300      	movs	r3, #0
 801128e:	82fb      	strh	r3, [r7, #22]
 8011290:	e021      	b.n	80112d6 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	685a      	ldr	r2, [r3, #4]
 8011296:	8afb      	ldrh	r3, [r7, #22]
 8011298:	015b      	lsls	r3, r3, #5
 801129a:	4413      	add	r3, r2
 801129c:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	781b      	ldrb	r3, [r3, #0]
 80112a2:	f003 0301 	and.w	r3, r3, #1
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d112      	bne.n	80112d0 <_UG_WindowUpdate+0x134>
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	f003 0302 	and.w	r3, r3, #2
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d00c      	beq.n	80112d0 <_UG_WindowUpdate+0x134>
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	f003 0308 	and.w	r3, r3, #8
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d006      	beq.n	80112d0 <_UG_WindowUpdate+0x134>
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80112ca:	b2da      	uxtb	r2, r3
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80112d0:	8afb      	ldrh	r3, [r7, #22]
 80112d2:	3301      	adds	r3, #1
 80112d4:	82fb      	strh	r3, [r7, #22]
 80112d6:	8afa      	ldrh	r2, [r7, #22]
 80112d8:	89bb      	ldrh	r3, [r7, #12]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d3d9      	bcc.n	8011292 <_UG_WindowUpdate+0xf6>
 80112de:	e013      	b.n	8011308 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80112f8:	4b06      	ldr	r3, [pc, #24]	; (8011314 <_UG_WindowUpdate+0x178>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011300:	9300      	str	r3, [sp, #0]
 8011302:	4623      	mov	r3, r4
 8011304:	f7fe f9fc 	bl	800f700 <UG_FillFrame>
   }
}
 8011308:	371c      	adds	r7, #28
 801130a:	46bd      	mov	sp, r7
 801130c:	bd90      	pop	{r4, r7, pc}
 801130e:	bf00      	nop
 8011310:	080187a0 	.word	0x080187a0
 8011314:	20002278 	.word	0x20002278

08011318 <__cvt>:
 8011318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801131c:	ec55 4b10 	vmov	r4, r5, d0
 8011320:	2d00      	cmp	r5, #0
 8011322:	460e      	mov	r6, r1
 8011324:	4619      	mov	r1, r3
 8011326:	462b      	mov	r3, r5
 8011328:	bfbb      	ittet	lt
 801132a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801132e:	461d      	movlt	r5, r3
 8011330:	2300      	movge	r3, #0
 8011332:	232d      	movlt	r3, #45	; 0x2d
 8011334:	700b      	strb	r3, [r1, #0]
 8011336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011338:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801133c:	4691      	mov	r9, r2
 801133e:	f023 0820 	bic.w	r8, r3, #32
 8011342:	bfbc      	itt	lt
 8011344:	4622      	movlt	r2, r4
 8011346:	4614      	movlt	r4, r2
 8011348:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801134c:	d005      	beq.n	801135a <__cvt+0x42>
 801134e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011352:	d100      	bne.n	8011356 <__cvt+0x3e>
 8011354:	3601      	adds	r6, #1
 8011356:	2102      	movs	r1, #2
 8011358:	e000      	b.n	801135c <__cvt+0x44>
 801135a:	2103      	movs	r1, #3
 801135c:	ab03      	add	r3, sp, #12
 801135e:	9301      	str	r3, [sp, #4]
 8011360:	ab02      	add	r3, sp, #8
 8011362:	9300      	str	r3, [sp, #0]
 8011364:	ec45 4b10 	vmov	d0, r4, r5
 8011368:	4653      	mov	r3, sl
 801136a:	4632      	mov	r2, r6
 801136c:	f001 f88c 	bl	8012488 <_dtoa_r>
 8011370:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011374:	4607      	mov	r7, r0
 8011376:	d102      	bne.n	801137e <__cvt+0x66>
 8011378:	f019 0f01 	tst.w	r9, #1
 801137c:	d022      	beq.n	80113c4 <__cvt+0xac>
 801137e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011382:	eb07 0906 	add.w	r9, r7, r6
 8011386:	d110      	bne.n	80113aa <__cvt+0x92>
 8011388:	783b      	ldrb	r3, [r7, #0]
 801138a:	2b30      	cmp	r3, #48	; 0x30
 801138c:	d10a      	bne.n	80113a4 <__cvt+0x8c>
 801138e:	2200      	movs	r2, #0
 8011390:	2300      	movs	r3, #0
 8011392:	4620      	mov	r0, r4
 8011394:	4629      	mov	r1, r5
 8011396:	f7ef fbbf 	bl	8000b18 <__aeabi_dcmpeq>
 801139a:	b918      	cbnz	r0, 80113a4 <__cvt+0x8c>
 801139c:	f1c6 0601 	rsb	r6, r6, #1
 80113a0:	f8ca 6000 	str.w	r6, [sl]
 80113a4:	f8da 3000 	ldr.w	r3, [sl]
 80113a8:	4499      	add	r9, r3
 80113aa:	2200      	movs	r2, #0
 80113ac:	2300      	movs	r3, #0
 80113ae:	4620      	mov	r0, r4
 80113b0:	4629      	mov	r1, r5
 80113b2:	f7ef fbb1 	bl	8000b18 <__aeabi_dcmpeq>
 80113b6:	b108      	cbz	r0, 80113bc <__cvt+0xa4>
 80113b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80113bc:	2230      	movs	r2, #48	; 0x30
 80113be:	9b03      	ldr	r3, [sp, #12]
 80113c0:	454b      	cmp	r3, r9
 80113c2:	d307      	bcc.n	80113d4 <__cvt+0xbc>
 80113c4:	9b03      	ldr	r3, [sp, #12]
 80113c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113c8:	1bdb      	subs	r3, r3, r7
 80113ca:	4638      	mov	r0, r7
 80113cc:	6013      	str	r3, [r2, #0]
 80113ce:	b004      	add	sp, #16
 80113d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113d4:	1c59      	adds	r1, r3, #1
 80113d6:	9103      	str	r1, [sp, #12]
 80113d8:	701a      	strb	r2, [r3, #0]
 80113da:	e7f0      	b.n	80113be <__cvt+0xa6>

080113dc <__exponent>:
 80113dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113de:	4603      	mov	r3, r0
 80113e0:	2900      	cmp	r1, #0
 80113e2:	bfb8      	it	lt
 80113e4:	4249      	neglt	r1, r1
 80113e6:	f803 2b02 	strb.w	r2, [r3], #2
 80113ea:	bfb4      	ite	lt
 80113ec:	222d      	movlt	r2, #45	; 0x2d
 80113ee:	222b      	movge	r2, #43	; 0x2b
 80113f0:	2909      	cmp	r1, #9
 80113f2:	7042      	strb	r2, [r0, #1]
 80113f4:	dd2a      	ble.n	801144c <__exponent+0x70>
 80113f6:	f10d 0207 	add.w	r2, sp, #7
 80113fa:	4617      	mov	r7, r2
 80113fc:	260a      	movs	r6, #10
 80113fe:	4694      	mov	ip, r2
 8011400:	fb91 f5f6 	sdiv	r5, r1, r6
 8011404:	fb06 1415 	mls	r4, r6, r5, r1
 8011408:	3430      	adds	r4, #48	; 0x30
 801140a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801140e:	460c      	mov	r4, r1
 8011410:	2c63      	cmp	r4, #99	; 0x63
 8011412:	f102 32ff 	add.w	r2, r2, #4294967295
 8011416:	4629      	mov	r1, r5
 8011418:	dcf1      	bgt.n	80113fe <__exponent+0x22>
 801141a:	3130      	adds	r1, #48	; 0x30
 801141c:	f1ac 0402 	sub.w	r4, ip, #2
 8011420:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011424:	1c41      	adds	r1, r0, #1
 8011426:	4622      	mov	r2, r4
 8011428:	42ba      	cmp	r2, r7
 801142a:	d30a      	bcc.n	8011442 <__exponent+0x66>
 801142c:	f10d 0209 	add.w	r2, sp, #9
 8011430:	eba2 020c 	sub.w	r2, r2, ip
 8011434:	42bc      	cmp	r4, r7
 8011436:	bf88      	it	hi
 8011438:	2200      	movhi	r2, #0
 801143a:	4413      	add	r3, r2
 801143c:	1a18      	subs	r0, r3, r0
 801143e:	b003      	add	sp, #12
 8011440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011442:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011446:	f801 5f01 	strb.w	r5, [r1, #1]!
 801144a:	e7ed      	b.n	8011428 <__exponent+0x4c>
 801144c:	2330      	movs	r3, #48	; 0x30
 801144e:	3130      	adds	r1, #48	; 0x30
 8011450:	7083      	strb	r3, [r0, #2]
 8011452:	70c1      	strb	r1, [r0, #3]
 8011454:	1d03      	adds	r3, r0, #4
 8011456:	e7f1      	b.n	801143c <__exponent+0x60>

08011458 <_printf_float>:
 8011458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145c:	ed2d 8b02 	vpush	{d8}
 8011460:	b08d      	sub	sp, #52	; 0x34
 8011462:	460c      	mov	r4, r1
 8011464:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011468:	4616      	mov	r6, r2
 801146a:	461f      	mov	r7, r3
 801146c:	4605      	mov	r5, r0
 801146e:	f000 fef7 	bl	8012260 <_localeconv_r>
 8011472:	f8d0 a000 	ldr.w	sl, [r0]
 8011476:	4650      	mov	r0, sl
 8011478:	f7ee ff22 	bl	80002c0 <strlen>
 801147c:	2300      	movs	r3, #0
 801147e:	930a      	str	r3, [sp, #40]	; 0x28
 8011480:	6823      	ldr	r3, [r4, #0]
 8011482:	9305      	str	r3, [sp, #20]
 8011484:	f8d8 3000 	ldr.w	r3, [r8]
 8011488:	f894 b018 	ldrb.w	fp, [r4, #24]
 801148c:	3307      	adds	r3, #7
 801148e:	f023 0307 	bic.w	r3, r3, #7
 8011492:	f103 0208 	add.w	r2, r3, #8
 8011496:	f8c8 2000 	str.w	r2, [r8]
 801149a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801149e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80114a2:	9307      	str	r3, [sp, #28]
 80114a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80114a8:	ee08 0a10 	vmov	s16, r0
 80114ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80114b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80114b4:	4b9e      	ldr	r3, [pc, #632]	; (8011730 <_printf_float+0x2d8>)
 80114b6:	f04f 32ff 	mov.w	r2, #4294967295
 80114ba:	f7ef fb5f 	bl	8000b7c <__aeabi_dcmpun>
 80114be:	bb88      	cbnz	r0, 8011524 <_printf_float+0xcc>
 80114c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80114c4:	4b9a      	ldr	r3, [pc, #616]	; (8011730 <_printf_float+0x2d8>)
 80114c6:	f04f 32ff 	mov.w	r2, #4294967295
 80114ca:	f7ef fb39 	bl	8000b40 <__aeabi_dcmple>
 80114ce:	bb48      	cbnz	r0, 8011524 <_printf_float+0xcc>
 80114d0:	2200      	movs	r2, #0
 80114d2:	2300      	movs	r3, #0
 80114d4:	4640      	mov	r0, r8
 80114d6:	4649      	mov	r1, r9
 80114d8:	f7ef fb28 	bl	8000b2c <__aeabi_dcmplt>
 80114dc:	b110      	cbz	r0, 80114e4 <_printf_float+0x8c>
 80114de:	232d      	movs	r3, #45	; 0x2d
 80114e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114e4:	4a93      	ldr	r2, [pc, #588]	; (8011734 <_printf_float+0x2dc>)
 80114e6:	4b94      	ldr	r3, [pc, #592]	; (8011738 <_printf_float+0x2e0>)
 80114e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80114ec:	bf94      	ite	ls
 80114ee:	4690      	movls	r8, r2
 80114f0:	4698      	movhi	r8, r3
 80114f2:	2303      	movs	r3, #3
 80114f4:	6123      	str	r3, [r4, #16]
 80114f6:	9b05      	ldr	r3, [sp, #20]
 80114f8:	f023 0304 	bic.w	r3, r3, #4
 80114fc:	6023      	str	r3, [r4, #0]
 80114fe:	f04f 0900 	mov.w	r9, #0
 8011502:	9700      	str	r7, [sp, #0]
 8011504:	4633      	mov	r3, r6
 8011506:	aa0b      	add	r2, sp, #44	; 0x2c
 8011508:	4621      	mov	r1, r4
 801150a:	4628      	mov	r0, r5
 801150c:	f000 f9da 	bl	80118c4 <_printf_common>
 8011510:	3001      	adds	r0, #1
 8011512:	f040 8090 	bne.w	8011636 <_printf_float+0x1de>
 8011516:	f04f 30ff 	mov.w	r0, #4294967295
 801151a:	b00d      	add	sp, #52	; 0x34
 801151c:	ecbd 8b02 	vpop	{d8}
 8011520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011524:	4642      	mov	r2, r8
 8011526:	464b      	mov	r3, r9
 8011528:	4640      	mov	r0, r8
 801152a:	4649      	mov	r1, r9
 801152c:	f7ef fb26 	bl	8000b7c <__aeabi_dcmpun>
 8011530:	b140      	cbz	r0, 8011544 <_printf_float+0xec>
 8011532:	464b      	mov	r3, r9
 8011534:	2b00      	cmp	r3, #0
 8011536:	bfbc      	itt	lt
 8011538:	232d      	movlt	r3, #45	; 0x2d
 801153a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801153e:	4a7f      	ldr	r2, [pc, #508]	; (801173c <_printf_float+0x2e4>)
 8011540:	4b7f      	ldr	r3, [pc, #508]	; (8011740 <_printf_float+0x2e8>)
 8011542:	e7d1      	b.n	80114e8 <_printf_float+0x90>
 8011544:	6863      	ldr	r3, [r4, #4]
 8011546:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801154a:	9206      	str	r2, [sp, #24]
 801154c:	1c5a      	adds	r2, r3, #1
 801154e:	d13f      	bne.n	80115d0 <_printf_float+0x178>
 8011550:	2306      	movs	r3, #6
 8011552:	6063      	str	r3, [r4, #4]
 8011554:	9b05      	ldr	r3, [sp, #20]
 8011556:	6861      	ldr	r1, [r4, #4]
 8011558:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801155c:	2300      	movs	r3, #0
 801155e:	9303      	str	r3, [sp, #12]
 8011560:	ab0a      	add	r3, sp, #40	; 0x28
 8011562:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011566:	ab09      	add	r3, sp, #36	; 0x24
 8011568:	ec49 8b10 	vmov	d0, r8, r9
 801156c:	9300      	str	r3, [sp, #0]
 801156e:	6022      	str	r2, [r4, #0]
 8011570:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011574:	4628      	mov	r0, r5
 8011576:	f7ff fecf 	bl	8011318 <__cvt>
 801157a:	9b06      	ldr	r3, [sp, #24]
 801157c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801157e:	2b47      	cmp	r3, #71	; 0x47
 8011580:	4680      	mov	r8, r0
 8011582:	d108      	bne.n	8011596 <_printf_float+0x13e>
 8011584:	1cc8      	adds	r0, r1, #3
 8011586:	db02      	blt.n	801158e <_printf_float+0x136>
 8011588:	6863      	ldr	r3, [r4, #4]
 801158a:	4299      	cmp	r1, r3
 801158c:	dd41      	ble.n	8011612 <_printf_float+0x1ba>
 801158e:	f1ab 0302 	sub.w	r3, fp, #2
 8011592:	fa5f fb83 	uxtb.w	fp, r3
 8011596:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801159a:	d820      	bhi.n	80115de <_printf_float+0x186>
 801159c:	3901      	subs	r1, #1
 801159e:	465a      	mov	r2, fp
 80115a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80115a4:	9109      	str	r1, [sp, #36]	; 0x24
 80115a6:	f7ff ff19 	bl	80113dc <__exponent>
 80115aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115ac:	1813      	adds	r3, r2, r0
 80115ae:	2a01      	cmp	r2, #1
 80115b0:	4681      	mov	r9, r0
 80115b2:	6123      	str	r3, [r4, #16]
 80115b4:	dc02      	bgt.n	80115bc <_printf_float+0x164>
 80115b6:	6822      	ldr	r2, [r4, #0]
 80115b8:	07d2      	lsls	r2, r2, #31
 80115ba:	d501      	bpl.n	80115c0 <_printf_float+0x168>
 80115bc:	3301      	adds	r3, #1
 80115be:	6123      	str	r3, [r4, #16]
 80115c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d09c      	beq.n	8011502 <_printf_float+0xaa>
 80115c8:	232d      	movs	r3, #45	; 0x2d
 80115ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115ce:	e798      	b.n	8011502 <_printf_float+0xaa>
 80115d0:	9a06      	ldr	r2, [sp, #24]
 80115d2:	2a47      	cmp	r2, #71	; 0x47
 80115d4:	d1be      	bne.n	8011554 <_printf_float+0xfc>
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d1bc      	bne.n	8011554 <_printf_float+0xfc>
 80115da:	2301      	movs	r3, #1
 80115dc:	e7b9      	b.n	8011552 <_printf_float+0xfa>
 80115de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80115e2:	d118      	bne.n	8011616 <_printf_float+0x1be>
 80115e4:	2900      	cmp	r1, #0
 80115e6:	6863      	ldr	r3, [r4, #4]
 80115e8:	dd0b      	ble.n	8011602 <_printf_float+0x1aa>
 80115ea:	6121      	str	r1, [r4, #16]
 80115ec:	b913      	cbnz	r3, 80115f4 <_printf_float+0x19c>
 80115ee:	6822      	ldr	r2, [r4, #0]
 80115f0:	07d0      	lsls	r0, r2, #31
 80115f2:	d502      	bpl.n	80115fa <_printf_float+0x1a2>
 80115f4:	3301      	adds	r3, #1
 80115f6:	440b      	add	r3, r1
 80115f8:	6123      	str	r3, [r4, #16]
 80115fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80115fc:	f04f 0900 	mov.w	r9, #0
 8011600:	e7de      	b.n	80115c0 <_printf_float+0x168>
 8011602:	b913      	cbnz	r3, 801160a <_printf_float+0x1b2>
 8011604:	6822      	ldr	r2, [r4, #0]
 8011606:	07d2      	lsls	r2, r2, #31
 8011608:	d501      	bpl.n	801160e <_printf_float+0x1b6>
 801160a:	3302      	adds	r3, #2
 801160c:	e7f4      	b.n	80115f8 <_printf_float+0x1a0>
 801160e:	2301      	movs	r3, #1
 8011610:	e7f2      	b.n	80115f8 <_printf_float+0x1a0>
 8011612:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011618:	4299      	cmp	r1, r3
 801161a:	db05      	blt.n	8011628 <_printf_float+0x1d0>
 801161c:	6823      	ldr	r3, [r4, #0]
 801161e:	6121      	str	r1, [r4, #16]
 8011620:	07d8      	lsls	r0, r3, #31
 8011622:	d5ea      	bpl.n	80115fa <_printf_float+0x1a2>
 8011624:	1c4b      	adds	r3, r1, #1
 8011626:	e7e7      	b.n	80115f8 <_printf_float+0x1a0>
 8011628:	2900      	cmp	r1, #0
 801162a:	bfd4      	ite	le
 801162c:	f1c1 0202 	rsble	r2, r1, #2
 8011630:	2201      	movgt	r2, #1
 8011632:	4413      	add	r3, r2
 8011634:	e7e0      	b.n	80115f8 <_printf_float+0x1a0>
 8011636:	6823      	ldr	r3, [r4, #0]
 8011638:	055a      	lsls	r2, r3, #21
 801163a:	d407      	bmi.n	801164c <_printf_float+0x1f4>
 801163c:	6923      	ldr	r3, [r4, #16]
 801163e:	4642      	mov	r2, r8
 8011640:	4631      	mov	r1, r6
 8011642:	4628      	mov	r0, r5
 8011644:	47b8      	blx	r7
 8011646:	3001      	adds	r0, #1
 8011648:	d12c      	bne.n	80116a4 <_printf_float+0x24c>
 801164a:	e764      	b.n	8011516 <_printf_float+0xbe>
 801164c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011650:	f240 80e0 	bls.w	8011814 <_printf_float+0x3bc>
 8011654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011658:	2200      	movs	r2, #0
 801165a:	2300      	movs	r3, #0
 801165c:	f7ef fa5c 	bl	8000b18 <__aeabi_dcmpeq>
 8011660:	2800      	cmp	r0, #0
 8011662:	d034      	beq.n	80116ce <_printf_float+0x276>
 8011664:	4a37      	ldr	r2, [pc, #220]	; (8011744 <_printf_float+0x2ec>)
 8011666:	2301      	movs	r3, #1
 8011668:	4631      	mov	r1, r6
 801166a:	4628      	mov	r0, r5
 801166c:	47b8      	blx	r7
 801166e:	3001      	adds	r0, #1
 8011670:	f43f af51 	beq.w	8011516 <_printf_float+0xbe>
 8011674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011678:	429a      	cmp	r2, r3
 801167a:	db02      	blt.n	8011682 <_printf_float+0x22a>
 801167c:	6823      	ldr	r3, [r4, #0]
 801167e:	07d8      	lsls	r0, r3, #31
 8011680:	d510      	bpl.n	80116a4 <_printf_float+0x24c>
 8011682:	ee18 3a10 	vmov	r3, s16
 8011686:	4652      	mov	r2, sl
 8011688:	4631      	mov	r1, r6
 801168a:	4628      	mov	r0, r5
 801168c:	47b8      	blx	r7
 801168e:	3001      	adds	r0, #1
 8011690:	f43f af41 	beq.w	8011516 <_printf_float+0xbe>
 8011694:	f04f 0800 	mov.w	r8, #0
 8011698:	f104 091a 	add.w	r9, r4, #26
 801169c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801169e:	3b01      	subs	r3, #1
 80116a0:	4543      	cmp	r3, r8
 80116a2:	dc09      	bgt.n	80116b8 <_printf_float+0x260>
 80116a4:	6823      	ldr	r3, [r4, #0]
 80116a6:	079b      	lsls	r3, r3, #30
 80116a8:	f100 8107 	bmi.w	80118ba <_printf_float+0x462>
 80116ac:	68e0      	ldr	r0, [r4, #12]
 80116ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116b0:	4298      	cmp	r0, r3
 80116b2:	bfb8      	it	lt
 80116b4:	4618      	movlt	r0, r3
 80116b6:	e730      	b.n	801151a <_printf_float+0xc2>
 80116b8:	2301      	movs	r3, #1
 80116ba:	464a      	mov	r2, r9
 80116bc:	4631      	mov	r1, r6
 80116be:	4628      	mov	r0, r5
 80116c0:	47b8      	blx	r7
 80116c2:	3001      	adds	r0, #1
 80116c4:	f43f af27 	beq.w	8011516 <_printf_float+0xbe>
 80116c8:	f108 0801 	add.w	r8, r8, #1
 80116cc:	e7e6      	b.n	801169c <_printf_float+0x244>
 80116ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	dc39      	bgt.n	8011748 <_printf_float+0x2f0>
 80116d4:	4a1b      	ldr	r2, [pc, #108]	; (8011744 <_printf_float+0x2ec>)
 80116d6:	2301      	movs	r3, #1
 80116d8:	4631      	mov	r1, r6
 80116da:	4628      	mov	r0, r5
 80116dc:	47b8      	blx	r7
 80116de:	3001      	adds	r0, #1
 80116e0:	f43f af19 	beq.w	8011516 <_printf_float+0xbe>
 80116e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80116e8:	4313      	orrs	r3, r2
 80116ea:	d102      	bne.n	80116f2 <_printf_float+0x29a>
 80116ec:	6823      	ldr	r3, [r4, #0]
 80116ee:	07d9      	lsls	r1, r3, #31
 80116f0:	d5d8      	bpl.n	80116a4 <_printf_float+0x24c>
 80116f2:	ee18 3a10 	vmov	r3, s16
 80116f6:	4652      	mov	r2, sl
 80116f8:	4631      	mov	r1, r6
 80116fa:	4628      	mov	r0, r5
 80116fc:	47b8      	blx	r7
 80116fe:	3001      	adds	r0, #1
 8011700:	f43f af09 	beq.w	8011516 <_printf_float+0xbe>
 8011704:	f04f 0900 	mov.w	r9, #0
 8011708:	f104 0a1a 	add.w	sl, r4, #26
 801170c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801170e:	425b      	negs	r3, r3
 8011710:	454b      	cmp	r3, r9
 8011712:	dc01      	bgt.n	8011718 <_printf_float+0x2c0>
 8011714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011716:	e792      	b.n	801163e <_printf_float+0x1e6>
 8011718:	2301      	movs	r3, #1
 801171a:	4652      	mov	r2, sl
 801171c:	4631      	mov	r1, r6
 801171e:	4628      	mov	r0, r5
 8011720:	47b8      	blx	r7
 8011722:	3001      	adds	r0, #1
 8011724:	f43f aef7 	beq.w	8011516 <_printf_float+0xbe>
 8011728:	f109 0901 	add.w	r9, r9, #1
 801172c:	e7ee      	b.n	801170c <_printf_float+0x2b4>
 801172e:	bf00      	nop
 8011730:	7fefffff 	.word	0x7fefffff
 8011734:	080187b8 	.word	0x080187b8
 8011738:	080187bc 	.word	0x080187bc
 801173c:	080187c0 	.word	0x080187c0
 8011740:	080187c4 	.word	0x080187c4
 8011744:	080187c8 	.word	0x080187c8
 8011748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801174a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801174c:	429a      	cmp	r2, r3
 801174e:	bfa8      	it	ge
 8011750:	461a      	movge	r2, r3
 8011752:	2a00      	cmp	r2, #0
 8011754:	4691      	mov	r9, r2
 8011756:	dc37      	bgt.n	80117c8 <_printf_float+0x370>
 8011758:	f04f 0b00 	mov.w	fp, #0
 801175c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011760:	f104 021a 	add.w	r2, r4, #26
 8011764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011766:	9305      	str	r3, [sp, #20]
 8011768:	eba3 0309 	sub.w	r3, r3, r9
 801176c:	455b      	cmp	r3, fp
 801176e:	dc33      	bgt.n	80117d8 <_printf_float+0x380>
 8011770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011774:	429a      	cmp	r2, r3
 8011776:	db3b      	blt.n	80117f0 <_printf_float+0x398>
 8011778:	6823      	ldr	r3, [r4, #0]
 801177a:	07da      	lsls	r2, r3, #31
 801177c:	d438      	bmi.n	80117f0 <_printf_float+0x398>
 801177e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011782:	eba2 0903 	sub.w	r9, r2, r3
 8011786:	9b05      	ldr	r3, [sp, #20]
 8011788:	1ad2      	subs	r2, r2, r3
 801178a:	4591      	cmp	r9, r2
 801178c:	bfa8      	it	ge
 801178e:	4691      	movge	r9, r2
 8011790:	f1b9 0f00 	cmp.w	r9, #0
 8011794:	dc35      	bgt.n	8011802 <_printf_float+0x3aa>
 8011796:	f04f 0800 	mov.w	r8, #0
 801179a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801179e:	f104 0a1a 	add.w	sl, r4, #26
 80117a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80117a6:	1a9b      	subs	r3, r3, r2
 80117a8:	eba3 0309 	sub.w	r3, r3, r9
 80117ac:	4543      	cmp	r3, r8
 80117ae:	f77f af79 	ble.w	80116a4 <_printf_float+0x24c>
 80117b2:	2301      	movs	r3, #1
 80117b4:	4652      	mov	r2, sl
 80117b6:	4631      	mov	r1, r6
 80117b8:	4628      	mov	r0, r5
 80117ba:	47b8      	blx	r7
 80117bc:	3001      	adds	r0, #1
 80117be:	f43f aeaa 	beq.w	8011516 <_printf_float+0xbe>
 80117c2:	f108 0801 	add.w	r8, r8, #1
 80117c6:	e7ec      	b.n	80117a2 <_printf_float+0x34a>
 80117c8:	4613      	mov	r3, r2
 80117ca:	4631      	mov	r1, r6
 80117cc:	4642      	mov	r2, r8
 80117ce:	4628      	mov	r0, r5
 80117d0:	47b8      	blx	r7
 80117d2:	3001      	adds	r0, #1
 80117d4:	d1c0      	bne.n	8011758 <_printf_float+0x300>
 80117d6:	e69e      	b.n	8011516 <_printf_float+0xbe>
 80117d8:	2301      	movs	r3, #1
 80117da:	4631      	mov	r1, r6
 80117dc:	4628      	mov	r0, r5
 80117de:	9205      	str	r2, [sp, #20]
 80117e0:	47b8      	blx	r7
 80117e2:	3001      	adds	r0, #1
 80117e4:	f43f ae97 	beq.w	8011516 <_printf_float+0xbe>
 80117e8:	9a05      	ldr	r2, [sp, #20]
 80117ea:	f10b 0b01 	add.w	fp, fp, #1
 80117ee:	e7b9      	b.n	8011764 <_printf_float+0x30c>
 80117f0:	ee18 3a10 	vmov	r3, s16
 80117f4:	4652      	mov	r2, sl
 80117f6:	4631      	mov	r1, r6
 80117f8:	4628      	mov	r0, r5
 80117fa:	47b8      	blx	r7
 80117fc:	3001      	adds	r0, #1
 80117fe:	d1be      	bne.n	801177e <_printf_float+0x326>
 8011800:	e689      	b.n	8011516 <_printf_float+0xbe>
 8011802:	9a05      	ldr	r2, [sp, #20]
 8011804:	464b      	mov	r3, r9
 8011806:	4442      	add	r2, r8
 8011808:	4631      	mov	r1, r6
 801180a:	4628      	mov	r0, r5
 801180c:	47b8      	blx	r7
 801180e:	3001      	adds	r0, #1
 8011810:	d1c1      	bne.n	8011796 <_printf_float+0x33e>
 8011812:	e680      	b.n	8011516 <_printf_float+0xbe>
 8011814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011816:	2a01      	cmp	r2, #1
 8011818:	dc01      	bgt.n	801181e <_printf_float+0x3c6>
 801181a:	07db      	lsls	r3, r3, #31
 801181c:	d53a      	bpl.n	8011894 <_printf_float+0x43c>
 801181e:	2301      	movs	r3, #1
 8011820:	4642      	mov	r2, r8
 8011822:	4631      	mov	r1, r6
 8011824:	4628      	mov	r0, r5
 8011826:	47b8      	blx	r7
 8011828:	3001      	adds	r0, #1
 801182a:	f43f ae74 	beq.w	8011516 <_printf_float+0xbe>
 801182e:	ee18 3a10 	vmov	r3, s16
 8011832:	4652      	mov	r2, sl
 8011834:	4631      	mov	r1, r6
 8011836:	4628      	mov	r0, r5
 8011838:	47b8      	blx	r7
 801183a:	3001      	adds	r0, #1
 801183c:	f43f ae6b 	beq.w	8011516 <_printf_float+0xbe>
 8011840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011844:	2200      	movs	r2, #0
 8011846:	2300      	movs	r3, #0
 8011848:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801184c:	f7ef f964 	bl	8000b18 <__aeabi_dcmpeq>
 8011850:	b9d8      	cbnz	r0, 801188a <_printf_float+0x432>
 8011852:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011856:	f108 0201 	add.w	r2, r8, #1
 801185a:	4631      	mov	r1, r6
 801185c:	4628      	mov	r0, r5
 801185e:	47b8      	blx	r7
 8011860:	3001      	adds	r0, #1
 8011862:	d10e      	bne.n	8011882 <_printf_float+0x42a>
 8011864:	e657      	b.n	8011516 <_printf_float+0xbe>
 8011866:	2301      	movs	r3, #1
 8011868:	4652      	mov	r2, sl
 801186a:	4631      	mov	r1, r6
 801186c:	4628      	mov	r0, r5
 801186e:	47b8      	blx	r7
 8011870:	3001      	adds	r0, #1
 8011872:	f43f ae50 	beq.w	8011516 <_printf_float+0xbe>
 8011876:	f108 0801 	add.w	r8, r8, #1
 801187a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801187c:	3b01      	subs	r3, #1
 801187e:	4543      	cmp	r3, r8
 8011880:	dcf1      	bgt.n	8011866 <_printf_float+0x40e>
 8011882:	464b      	mov	r3, r9
 8011884:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011888:	e6da      	b.n	8011640 <_printf_float+0x1e8>
 801188a:	f04f 0800 	mov.w	r8, #0
 801188e:	f104 0a1a 	add.w	sl, r4, #26
 8011892:	e7f2      	b.n	801187a <_printf_float+0x422>
 8011894:	2301      	movs	r3, #1
 8011896:	4642      	mov	r2, r8
 8011898:	e7df      	b.n	801185a <_printf_float+0x402>
 801189a:	2301      	movs	r3, #1
 801189c:	464a      	mov	r2, r9
 801189e:	4631      	mov	r1, r6
 80118a0:	4628      	mov	r0, r5
 80118a2:	47b8      	blx	r7
 80118a4:	3001      	adds	r0, #1
 80118a6:	f43f ae36 	beq.w	8011516 <_printf_float+0xbe>
 80118aa:	f108 0801 	add.w	r8, r8, #1
 80118ae:	68e3      	ldr	r3, [r4, #12]
 80118b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80118b2:	1a5b      	subs	r3, r3, r1
 80118b4:	4543      	cmp	r3, r8
 80118b6:	dcf0      	bgt.n	801189a <_printf_float+0x442>
 80118b8:	e6f8      	b.n	80116ac <_printf_float+0x254>
 80118ba:	f04f 0800 	mov.w	r8, #0
 80118be:	f104 0919 	add.w	r9, r4, #25
 80118c2:	e7f4      	b.n	80118ae <_printf_float+0x456>

080118c4 <_printf_common>:
 80118c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118c8:	4616      	mov	r6, r2
 80118ca:	4699      	mov	r9, r3
 80118cc:	688a      	ldr	r2, [r1, #8]
 80118ce:	690b      	ldr	r3, [r1, #16]
 80118d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80118d4:	4293      	cmp	r3, r2
 80118d6:	bfb8      	it	lt
 80118d8:	4613      	movlt	r3, r2
 80118da:	6033      	str	r3, [r6, #0]
 80118dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80118e0:	4607      	mov	r7, r0
 80118e2:	460c      	mov	r4, r1
 80118e4:	b10a      	cbz	r2, 80118ea <_printf_common+0x26>
 80118e6:	3301      	adds	r3, #1
 80118e8:	6033      	str	r3, [r6, #0]
 80118ea:	6823      	ldr	r3, [r4, #0]
 80118ec:	0699      	lsls	r1, r3, #26
 80118ee:	bf42      	ittt	mi
 80118f0:	6833      	ldrmi	r3, [r6, #0]
 80118f2:	3302      	addmi	r3, #2
 80118f4:	6033      	strmi	r3, [r6, #0]
 80118f6:	6825      	ldr	r5, [r4, #0]
 80118f8:	f015 0506 	ands.w	r5, r5, #6
 80118fc:	d106      	bne.n	801190c <_printf_common+0x48>
 80118fe:	f104 0a19 	add.w	sl, r4, #25
 8011902:	68e3      	ldr	r3, [r4, #12]
 8011904:	6832      	ldr	r2, [r6, #0]
 8011906:	1a9b      	subs	r3, r3, r2
 8011908:	42ab      	cmp	r3, r5
 801190a:	dc26      	bgt.n	801195a <_printf_common+0x96>
 801190c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011910:	1e13      	subs	r3, r2, #0
 8011912:	6822      	ldr	r2, [r4, #0]
 8011914:	bf18      	it	ne
 8011916:	2301      	movne	r3, #1
 8011918:	0692      	lsls	r2, r2, #26
 801191a:	d42b      	bmi.n	8011974 <_printf_common+0xb0>
 801191c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011920:	4649      	mov	r1, r9
 8011922:	4638      	mov	r0, r7
 8011924:	47c0      	blx	r8
 8011926:	3001      	adds	r0, #1
 8011928:	d01e      	beq.n	8011968 <_printf_common+0xa4>
 801192a:	6823      	ldr	r3, [r4, #0]
 801192c:	6922      	ldr	r2, [r4, #16]
 801192e:	f003 0306 	and.w	r3, r3, #6
 8011932:	2b04      	cmp	r3, #4
 8011934:	bf02      	ittt	eq
 8011936:	68e5      	ldreq	r5, [r4, #12]
 8011938:	6833      	ldreq	r3, [r6, #0]
 801193a:	1aed      	subeq	r5, r5, r3
 801193c:	68a3      	ldr	r3, [r4, #8]
 801193e:	bf0c      	ite	eq
 8011940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011944:	2500      	movne	r5, #0
 8011946:	4293      	cmp	r3, r2
 8011948:	bfc4      	itt	gt
 801194a:	1a9b      	subgt	r3, r3, r2
 801194c:	18ed      	addgt	r5, r5, r3
 801194e:	2600      	movs	r6, #0
 8011950:	341a      	adds	r4, #26
 8011952:	42b5      	cmp	r5, r6
 8011954:	d11a      	bne.n	801198c <_printf_common+0xc8>
 8011956:	2000      	movs	r0, #0
 8011958:	e008      	b.n	801196c <_printf_common+0xa8>
 801195a:	2301      	movs	r3, #1
 801195c:	4652      	mov	r2, sl
 801195e:	4649      	mov	r1, r9
 8011960:	4638      	mov	r0, r7
 8011962:	47c0      	blx	r8
 8011964:	3001      	adds	r0, #1
 8011966:	d103      	bne.n	8011970 <_printf_common+0xac>
 8011968:	f04f 30ff 	mov.w	r0, #4294967295
 801196c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011970:	3501      	adds	r5, #1
 8011972:	e7c6      	b.n	8011902 <_printf_common+0x3e>
 8011974:	18e1      	adds	r1, r4, r3
 8011976:	1c5a      	adds	r2, r3, #1
 8011978:	2030      	movs	r0, #48	; 0x30
 801197a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801197e:	4422      	add	r2, r4
 8011980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011988:	3302      	adds	r3, #2
 801198a:	e7c7      	b.n	801191c <_printf_common+0x58>
 801198c:	2301      	movs	r3, #1
 801198e:	4622      	mov	r2, r4
 8011990:	4649      	mov	r1, r9
 8011992:	4638      	mov	r0, r7
 8011994:	47c0      	blx	r8
 8011996:	3001      	adds	r0, #1
 8011998:	d0e6      	beq.n	8011968 <_printf_common+0xa4>
 801199a:	3601      	adds	r6, #1
 801199c:	e7d9      	b.n	8011952 <_printf_common+0x8e>
	...

080119a0 <_printf_i>:
 80119a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119a4:	7e0f      	ldrb	r7, [r1, #24]
 80119a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80119a8:	2f78      	cmp	r7, #120	; 0x78
 80119aa:	4691      	mov	r9, r2
 80119ac:	4680      	mov	r8, r0
 80119ae:	460c      	mov	r4, r1
 80119b0:	469a      	mov	sl, r3
 80119b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80119b6:	d807      	bhi.n	80119c8 <_printf_i+0x28>
 80119b8:	2f62      	cmp	r7, #98	; 0x62
 80119ba:	d80a      	bhi.n	80119d2 <_printf_i+0x32>
 80119bc:	2f00      	cmp	r7, #0
 80119be:	f000 80d4 	beq.w	8011b6a <_printf_i+0x1ca>
 80119c2:	2f58      	cmp	r7, #88	; 0x58
 80119c4:	f000 80c0 	beq.w	8011b48 <_printf_i+0x1a8>
 80119c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80119d0:	e03a      	b.n	8011a48 <_printf_i+0xa8>
 80119d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80119d6:	2b15      	cmp	r3, #21
 80119d8:	d8f6      	bhi.n	80119c8 <_printf_i+0x28>
 80119da:	a101      	add	r1, pc, #4	; (adr r1, 80119e0 <_printf_i+0x40>)
 80119dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80119e0:	08011a39 	.word	0x08011a39
 80119e4:	08011a4d 	.word	0x08011a4d
 80119e8:	080119c9 	.word	0x080119c9
 80119ec:	080119c9 	.word	0x080119c9
 80119f0:	080119c9 	.word	0x080119c9
 80119f4:	080119c9 	.word	0x080119c9
 80119f8:	08011a4d 	.word	0x08011a4d
 80119fc:	080119c9 	.word	0x080119c9
 8011a00:	080119c9 	.word	0x080119c9
 8011a04:	080119c9 	.word	0x080119c9
 8011a08:	080119c9 	.word	0x080119c9
 8011a0c:	08011b51 	.word	0x08011b51
 8011a10:	08011a79 	.word	0x08011a79
 8011a14:	08011b0b 	.word	0x08011b0b
 8011a18:	080119c9 	.word	0x080119c9
 8011a1c:	080119c9 	.word	0x080119c9
 8011a20:	08011b73 	.word	0x08011b73
 8011a24:	080119c9 	.word	0x080119c9
 8011a28:	08011a79 	.word	0x08011a79
 8011a2c:	080119c9 	.word	0x080119c9
 8011a30:	080119c9 	.word	0x080119c9
 8011a34:	08011b13 	.word	0x08011b13
 8011a38:	682b      	ldr	r3, [r5, #0]
 8011a3a:	1d1a      	adds	r2, r3, #4
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	602a      	str	r2, [r5, #0]
 8011a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a48:	2301      	movs	r3, #1
 8011a4a:	e09f      	b.n	8011b8c <_printf_i+0x1ec>
 8011a4c:	6820      	ldr	r0, [r4, #0]
 8011a4e:	682b      	ldr	r3, [r5, #0]
 8011a50:	0607      	lsls	r7, r0, #24
 8011a52:	f103 0104 	add.w	r1, r3, #4
 8011a56:	6029      	str	r1, [r5, #0]
 8011a58:	d501      	bpl.n	8011a5e <_printf_i+0xbe>
 8011a5a:	681e      	ldr	r6, [r3, #0]
 8011a5c:	e003      	b.n	8011a66 <_printf_i+0xc6>
 8011a5e:	0646      	lsls	r6, r0, #25
 8011a60:	d5fb      	bpl.n	8011a5a <_printf_i+0xba>
 8011a62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011a66:	2e00      	cmp	r6, #0
 8011a68:	da03      	bge.n	8011a72 <_printf_i+0xd2>
 8011a6a:	232d      	movs	r3, #45	; 0x2d
 8011a6c:	4276      	negs	r6, r6
 8011a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a72:	485a      	ldr	r0, [pc, #360]	; (8011bdc <_printf_i+0x23c>)
 8011a74:	230a      	movs	r3, #10
 8011a76:	e012      	b.n	8011a9e <_printf_i+0xfe>
 8011a78:	682b      	ldr	r3, [r5, #0]
 8011a7a:	6820      	ldr	r0, [r4, #0]
 8011a7c:	1d19      	adds	r1, r3, #4
 8011a7e:	6029      	str	r1, [r5, #0]
 8011a80:	0605      	lsls	r5, r0, #24
 8011a82:	d501      	bpl.n	8011a88 <_printf_i+0xe8>
 8011a84:	681e      	ldr	r6, [r3, #0]
 8011a86:	e002      	b.n	8011a8e <_printf_i+0xee>
 8011a88:	0641      	lsls	r1, r0, #25
 8011a8a:	d5fb      	bpl.n	8011a84 <_printf_i+0xe4>
 8011a8c:	881e      	ldrh	r6, [r3, #0]
 8011a8e:	4853      	ldr	r0, [pc, #332]	; (8011bdc <_printf_i+0x23c>)
 8011a90:	2f6f      	cmp	r7, #111	; 0x6f
 8011a92:	bf0c      	ite	eq
 8011a94:	2308      	moveq	r3, #8
 8011a96:	230a      	movne	r3, #10
 8011a98:	2100      	movs	r1, #0
 8011a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a9e:	6865      	ldr	r5, [r4, #4]
 8011aa0:	60a5      	str	r5, [r4, #8]
 8011aa2:	2d00      	cmp	r5, #0
 8011aa4:	bfa2      	ittt	ge
 8011aa6:	6821      	ldrge	r1, [r4, #0]
 8011aa8:	f021 0104 	bicge.w	r1, r1, #4
 8011aac:	6021      	strge	r1, [r4, #0]
 8011aae:	b90e      	cbnz	r6, 8011ab4 <_printf_i+0x114>
 8011ab0:	2d00      	cmp	r5, #0
 8011ab2:	d04b      	beq.n	8011b4c <_printf_i+0x1ac>
 8011ab4:	4615      	mov	r5, r2
 8011ab6:	fbb6 f1f3 	udiv	r1, r6, r3
 8011aba:	fb03 6711 	mls	r7, r3, r1, r6
 8011abe:	5dc7      	ldrb	r7, [r0, r7]
 8011ac0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ac4:	4637      	mov	r7, r6
 8011ac6:	42bb      	cmp	r3, r7
 8011ac8:	460e      	mov	r6, r1
 8011aca:	d9f4      	bls.n	8011ab6 <_printf_i+0x116>
 8011acc:	2b08      	cmp	r3, #8
 8011ace:	d10b      	bne.n	8011ae8 <_printf_i+0x148>
 8011ad0:	6823      	ldr	r3, [r4, #0]
 8011ad2:	07de      	lsls	r6, r3, #31
 8011ad4:	d508      	bpl.n	8011ae8 <_printf_i+0x148>
 8011ad6:	6923      	ldr	r3, [r4, #16]
 8011ad8:	6861      	ldr	r1, [r4, #4]
 8011ada:	4299      	cmp	r1, r3
 8011adc:	bfde      	ittt	le
 8011ade:	2330      	movle	r3, #48	; 0x30
 8011ae0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011ae4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011ae8:	1b52      	subs	r2, r2, r5
 8011aea:	6122      	str	r2, [r4, #16]
 8011aec:	f8cd a000 	str.w	sl, [sp]
 8011af0:	464b      	mov	r3, r9
 8011af2:	aa03      	add	r2, sp, #12
 8011af4:	4621      	mov	r1, r4
 8011af6:	4640      	mov	r0, r8
 8011af8:	f7ff fee4 	bl	80118c4 <_printf_common>
 8011afc:	3001      	adds	r0, #1
 8011afe:	d14a      	bne.n	8011b96 <_printf_i+0x1f6>
 8011b00:	f04f 30ff 	mov.w	r0, #4294967295
 8011b04:	b004      	add	sp, #16
 8011b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b0a:	6823      	ldr	r3, [r4, #0]
 8011b0c:	f043 0320 	orr.w	r3, r3, #32
 8011b10:	6023      	str	r3, [r4, #0]
 8011b12:	4833      	ldr	r0, [pc, #204]	; (8011be0 <_printf_i+0x240>)
 8011b14:	2778      	movs	r7, #120	; 0x78
 8011b16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011b1a:	6823      	ldr	r3, [r4, #0]
 8011b1c:	6829      	ldr	r1, [r5, #0]
 8011b1e:	061f      	lsls	r7, r3, #24
 8011b20:	f851 6b04 	ldr.w	r6, [r1], #4
 8011b24:	d402      	bmi.n	8011b2c <_printf_i+0x18c>
 8011b26:	065f      	lsls	r7, r3, #25
 8011b28:	bf48      	it	mi
 8011b2a:	b2b6      	uxthmi	r6, r6
 8011b2c:	07df      	lsls	r7, r3, #31
 8011b2e:	bf48      	it	mi
 8011b30:	f043 0320 	orrmi.w	r3, r3, #32
 8011b34:	6029      	str	r1, [r5, #0]
 8011b36:	bf48      	it	mi
 8011b38:	6023      	strmi	r3, [r4, #0]
 8011b3a:	b91e      	cbnz	r6, 8011b44 <_printf_i+0x1a4>
 8011b3c:	6823      	ldr	r3, [r4, #0]
 8011b3e:	f023 0320 	bic.w	r3, r3, #32
 8011b42:	6023      	str	r3, [r4, #0]
 8011b44:	2310      	movs	r3, #16
 8011b46:	e7a7      	b.n	8011a98 <_printf_i+0xf8>
 8011b48:	4824      	ldr	r0, [pc, #144]	; (8011bdc <_printf_i+0x23c>)
 8011b4a:	e7e4      	b.n	8011b16 <_printf_i+0x176>
 8011b4c:	4615      	mov	r5, r2
 8011b4e:	e7bd      	b.n	8011acc <_printf_i+0x12c>
 8011b50:	682b      	ldr	r3, [r5, #0]
 8011b52:	6826      	ldr	r6, [r4, #0]
 8011b54:	6961      	ldr	r1, [r4, #20]
 8011b56:	1d18      	adds	r0, r3, #4
 8011b58:	6028      	str	r0, [r5, #0]
 8011b5a:	0635      	lsls	r5, r6, #24
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	d501      	bpl.n	8011b64 <_printf_i+0x1c4>
 8011b60:	6019      	str	r1, [r3, #0]
 8011b62:	e002      	b.n	8011b6a <_printf_i+0x1ca>
 8011b64:	0670      	lsls	r0, r6, #25
 8011b66:	d5fb      	bpl.n	8011b60 <_printf_i+0x1c0>
 8011b68:	8019      	strh	r1, [r3, #0]
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	6123      	str	r3, [r4, #16]
 8011b6e:	4615      	mov	r5, r2
 8011b70:	e7bc      	b.n	8011aec <_printf_i+0x14c>
 8011b72:	682b      	ldr	r3, [r5, #0]
 8011b74:	1d1a      	adds	r2, r3, #4
 8011b76:	602a      	str	r2, [r5, #0]
 8011b78:	681d      	ldr	r5, [r3, #0]
 8011b7a:	6862      	ldr	r2, [r4, #4]
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	4628      	mov	r0, r5
 8011b80:	f7ee fb4e 	bl	8000220 <memchr>
 8011b84:	b108      	cbz	r0, 8011b8a <_printf_i+0x1ea>
 8011b86:	1b40      	subs	r0, r0, r5
 8011b88:	6060      	str	r0, [r4, #4]
 8011b8a:	6863      	ldr	r3, [r4, #4]
 8011b8c:	6123      	str	r3, [r4, #16]
 8011b8e:	2300      	movs	r3, #0
 8011b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b94:	e7aa      	b.n	8011aec <_printf_i+0x14c>
 8011b96:	6923      	ldr	r3, [r4, #16]
 8011b98:	462a      	mov	r2, r5
 8011b9a:	4649      	mov	r1, r9
 8011b9c:	4640      	mov	r0, r8
 8011b9e:	47d0      	blx	sl
 8011ba0:	3001      	adds	r0, #1
 8011ba2:	d0ad      	beq.n	8011b00 <_printf_i+0x160>
 8011ba4:	6823      	ldr	r3, [r4, #0]
 8011ba6:	079b      	lsls	r3, r3, #30
 8011ba8:	d413      	bmi.n	8011bd2 <_printf_i+0x232>
 8011baa:	68e0      	ldr	r0, [r4, #12]
 8011bac:	9b03      	ldr	r3, [sp, #12]
 8011bae:	4298      	cmp	r0, r3
 8011bb0:	bfb8      	it	lt
 8011bb2:	4618      	movlt	r0, r3
 8011bb4:	e7a6      	b.n	8011b04 <_printf_i+0x164>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	4632      	mov	r2, r6
 8011bba:	4649      	mov	r1, r9
 8011bbc:	4640      	mov	r0, r8
 8011bbe:	47d0      	blx	sl
 8011bc0:	3001      	adds	r0, #1
 8011bc2:	d09d      	beq.n	8011b00 <_printf_i+0x160>
 8011bc4:	3501      	adds	r5, #1
 8011bc6:	68e3      	ldr	r3, [r4, #12]
 8011bc8:	9903      	ldr	r1, [sp, #12]
 8011bca:	1a5b      	subs	r3, r3, r1
 8011bcc:	42ab      	cmp	r3, r5
 8011bce:	dcf2      	bgt.n	8011bb6 <_printf_i+0x216>
 8011bd0:	e7eb      	b.n	8011baa <_printf_i+0x20a>
 8011bd2:	2500      	movs	r5, #0
 8011bd4:	f104 0619 	add.w	r6, r4, #25
 8011bd8:	e7f5      	b.n	8011bc6 <_printf_i+0x226>
 8011bda:	bf00      	nop
 8011bdc:	080187ca 	.word	0x080187ca
 8011be0:	080187db 	.word	0x080187db

08011be4 <_scanf_float>:
 8011be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be8:	b087      	sub	sp, #28
 8011bea:	4617      	mov	r7, r2
 8011bec:	9303      	str	r3, [sp, #12]
 8011bee:	688b      	ldr	r3, [r1, #8]
 8011bf0:	1e5a      	subs	r2, r3, #1
 8011bf2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011bf6:	bf83      	ittte	hi
 8011bf8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011bfc:	195b      	addhi	r3, r3, r5
 8011bfe:	9302      	strhi	r3, [sp, #8]
 8011c00:	2300      	movls	r3, #0
 8011c02:	bf86      	itte	hi
 8011c04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011c08:	608b      	strhi	r3, [r1, #8]
 8011c0a:	9302      	strls	r3, [sp, #8]
 8011c0c:	680b      	ldr	r3, [r1, #0]
 8011c0e:	468b      	mov	fp, r1
 8011c10:	2500      	movs	r5, #0
 8011c12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011c16:	f84b 3b1c 	str.w	r3, [fp], #28
 8011c1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011c1e:	4680      	mov	r8, r0
 8011c20:	460c      	mov	r4, r1
 8011c22:	465e      	mov	r6, fp
 8011c24:	46aa      	mov	sl, r5
 8011c26:	46a9      	mov	r9, r5
 8011c28:	9501      	str	r5, [sp, #4]
 8011c2a:	68a2      	ldr	r2, [r4, #8]
 8011c2c:	b152      	cbz	r2, 8011c44 <_scanf_float+0x60>
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	2b4e      	cmp	r3, #78	; 0x4e
 8011c34:	d864      	bhi.n	8011d00 <_scanf_float+0x11c>
 8011c36:	2b40      	cmp	r3, #64	; 0x40
 8011c38:	d83c      	bhi.n	8011cb4 <_scanf_float+0xd0>
 8011c3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011c3e:	b2c8      	uxtb	r0, r1
 8011c40:	280e      	cmp	r0, #14
 8011c42:	d93a      	bls.n	8011cba <_scanf_float+0xd6>
 8011c44:	f1b9 0f00 	cmp.w	r9, #0
 8011c48:	d003      	beq.n	8011c52 <_scanf_float+0x6e>
 8011c4a:	6823      	ldr	r3, [r4, #0]
 8011c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c50:	6023      	str	r3, [r4, #0]
 8011c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c56:	f1ba 0f01 	cmp.w	sl, #1
 8011c5a:	f200 8113 	bhi.w	8011e84 <_scanf_float+0x2a0>
 8011c5e:	455e      	cmp	r6, fp
 8011c60:	f200 8105 	bhi.w	8011e6e <_scanf_float+0x28a>
 8011c64:	2501      	movs	r5, #1
 8011c66:	4628      	mov	r0, r5
 8011c68:	b007      	add	sp, #28
 8011c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011c72:	2a0d      	cmp	r2, #13
 8011c74:	d8e6      	bhi.n	8011c44 <_scanf_float+0x60>
 8011c76:	a101      	add	r1, pc, #4	; (adr r1, 8011c7c <_scanf_float+0x98>)
 8011c78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011c7c:	08011dbb 	.word	0x08011dbb
 8011c80:	08011c45 	.word	0x08011c45
 8011c84:	08011c45 	.word	0x08011c45
 8011c88:	08011c45 	.word	0x08011c45
 8011c8c:	08011e1b 	.word	0x08011e1b
 8011c90:	08011df3 	.word	0x08011df3
 8011c94:	08011c45 	.word	0x08011c45
 8011c98:	08011c45 	.word	0x08011c45
 8011c9c:	08011dc9 	.word	0x08011dc9
 8011ca0:	08011c45 	.word	0x08011c45
 8011ca4:	08011c45 	.word	0x08011c45
 8011ca8:	08011c45 	.word	0x08011c45
 8011cac:	08011c45 	.word	0x08011c45
 8011cb0:	08011d81 	.word	0x08011d81
 8011cb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011cb8:	e7db      	b.n	8011c72 <_scanf_float+0x8e>
 8011cba:	290e      	cmp	r1, #14
 8011cbc:	d8c2      	bhi.n	8011c44 <_scanf_float+0x60>
 8011cbe:	a001      	add	r0, pc, #4	; (adr r0, 8011cc4 <_scanf_float+0xe0>)
 8011cc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011cc4:	08011d73 	.word	0x08011d73
 8011cc8:	08011c45 	.word	0x08011c45
 8011ccc:	08011d73 	.word	0x08011d73
 8011cd0:	08011e07 	.word	0x08011e07
 8011cd4:	08011c45 	.word	0x08011c45
 8011cd8:	08011d21 	.word	0x08011d21
 8011cdc:	08011d5d 	.word	0x08011d5d
 8011ce0:	08011d5d 	.word	0x08011d5d
 8011ce4:	08011d5d 	.word	0x08011d5d
 8011ce8:	08011d5d 	.word	0x08011d5d
 8011cec:	08011d5d 	.word	0x08011d5d
 8011cf0:	08011d5d 	.word	0x08011d5d
 8011cf4:	08011d5d 	.word	0x08011d5d
 8011cf8:	08011d5d 	.word	0x08011d5d
 8011cfc:	08011d5d 	.word	0x08011d5d
 8011d00:	2b6e      	cmp	r3, #110	; 0x6e
 8011d02:	d809      	bhi.n	8011d18 <_scanf_float+0x134>
 8011d04:	2b60      	cmp	r3, #96	; 0x60
 8011d06:	d8b2      	bhi.n	8011c6e <_scanf_float+0x8a>
 8011d08:	2b54      	cmp	r3, #84	; 0x54
 8011d0a:	d077      	beq.n	8011dfc <_scanf_float+0x218>
 8011d0c:	2b59      	cmp	r3, #89	; 0x59
 8011d0e:	d199      	bne.n	8011c44 <_scanf_float+0x60>
 8011d10:	2d07      	cmp	r5, #7
 8011d12:	d197      	bne.n	8011c44 <_scanf_float+0x60>
 8011d14:	2508      	movs	r5, #8
 8011d16:	e029      	b.n	8011d6c <_scanf_float+0x188>
 8011d18:	2b74      	cmp	r3, #116	; 0x74
 8011d1a:	d06f      	beq.n	8011dfc <_scanf_float+0x218>
 8011d1c:	2b79      	cmp	r3, #121	; 0x79
 8011d1e:	e7f6      	b.n	8011d0e <_scanf_float+0x12a>
 8011d20:	6821      	ldr	r1, [r4, #0]
 8011d22:	05c8      	lsls	r0, r1, #23
 8011d24:	d51a      	bpl.n	8011d5c <_scanf_float+0x178>
 8011d26:	9b02      	ldr	r3, [sp, #8]
 8011d28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011d2c:	6021      	str	r1, [r4, #0]
 8011d2e:	f109 0901 	add.w	r9, r9, #1
 8011d32:	b11b      	cbz	r3, 8011d3c <_scanf_float+0x158>
 8011d34:	3b01      	subs	r3, #1
 8011d36:	3201      	adds	r2, #1
 8011d38:	9302      	str	r3, [sp, #8]
 8011d3a:	60a2      	str	r2, [r4, #8]
 8011d3c:	68a3      	ldr	r3, [r4, #8]
 8011d3e:	3b01      	subs	r3, #1
 8011d40:	60a3      	str	r3, [r4, #8]
 8011d42:	6923      	ldr	r3, [r4, #16]
 8011d44:	3301      	adds	r3, #1
 8011d46:	6123      	str	r3, [r4, #16]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	3b01      	subs	r3, #1
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	607b      	str	r3, [r7, #4]
 8011d50:	f340 8084 	ble.w	8011e5c <_scanf_float+0x278>
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	3301      	adds	r3, #1
 8011d58:	603b      	str	r3, [r7, #0]
 8011d5a:	e766      	b.n	8011c2a <_scanf_float+0x46>
 8011d5c:	eb1a 0f05 	cmn.w	sl, r5
 8011d60:	f47f af70 	bne.w	8011c44 <_scanf_float+0x60>
 8011d64:	6822      	ldr	r2, [r4, #0]
 8011d66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011d6a:	6022      	str	r2, [r4, #0]
 8011d6c:	f806 3b01 	strb.w	r3, [r6], #1
 8011d70:	e7e4      	b.n	8011d3c <_scanf_float+0x158>
 8011d72:	6822      	ldr	r2, [r4, #0]
 8011d74:	0610      	lsls	r0, r2, #24
 8011d76:	f57f af65 	bpl.w	8011c44 <_scanf_float+0x60>
 8011d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011d7e:	e7f4      	b.n	8011d6a <_scanf_float+0x186>
 8011d80:	f1ba 0f00 	cmp.w	sl, #0
 8011d84:	d10e      	bne.n	8011da4 <_scanf_float+0x1c0>
 8011d86:	f1b9 0f00 	cmp.w	r9, #0
 8011d8a:	d10e      	bne.n	8011daa <_scanf_float+0x1c6>
 8011d8c:	6822      	ldr	r2, [r4, #0]
 8011d8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011d92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011d96:	d108      	bne.n	8011daa <_scanf_float+0x1c6>
 8011d98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011d9c:	6022      	str	r2, [r4, #0]
 8011d9e:	f04f 0a01 	mov.w	sl, #1
 8011da2:	e7e3      	b.n	8011d6c <_scanf_float+0x188>
 8011da4:	f1ba 0f02 	cmp.w	sl, #2
 8011da8:	d055      	beq.n	8011e56 <_scanf_float+0x272>
 8011daa:	2d01      	cmp	r5, #1
 8011dac:	d002      	beq.n	8011db4 <_scanf_float+0x1d0>
 8011dae:	2d04      	cmp	r5, #4
 8011db0:	f47f af48 	bne.w	8011c44 <_scanf_float+0x60>
 8011db4:	3501      	adds	r5, #1
 8011db6:	b2ed      	uxtb	r5, r5
 8011db8:	e7d8      	b.n	8011d6c <_scanf_float+0x188>
 8011dba:	f1ba 0f01 	cmp.w	sl, #1
 8011dbe:	f47f af41 	bne.w	8011c44 <_scanf_float+0x60>
 8011dc2:	f04f 0a02 	mov.w	sl, #2
 8011dc6:	e7d1      	b.n	8011d6c <_scanf_float+0x188>
 8011dc8:	b97d      	cbnz	r5, 8011dea <_scanf_float+0x206>
 8011dca:	f1b9 0f00 	cmp.w	r9, #0
 8011dce:	f47f af3c 	bne.w	8011c4a <_scanf_float+0x66>
 8011dd2:	6822      	ldr	r2, [r4, #0]
 8011dd4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011dd8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011ddc:	f47f af39 	bne.w	8011c52 <_scanf_float+0x6e>
 8011de0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011de4:	6022      	str	r2, [r4, #0]
 8011de6:	2501      	movs	r5, #1
 8011de8:	e7c0      	b.n	8011d6c <_scanf_float+0x188>
 8011dea:	2d03      	cmp	r5, #3
 8011dec:	d0e2      	beq.n	8011db4 <_scanf_float+0x1d0>
 8011dee:	2d05      	cmp	r5, #5
 8011df0:	e7de      	b.n	8011db0 <_scanf_float+0x1cc>
 8011df2:	2d02      	cmp	r5, #2
 8011df4:	f47f af26 	bne.w	8011c44 <_scanf_float+0x60>
 8011df8:	2503      	movs	r5, #3
 8011dfa:	e7b7      	b.n	8011d6c <_scanf_float+0x188>
 8011dfc:	2d06      	cmp	r5, #6
 8011dfe:	f47f af21 	bne.w	8011c44 <_scanf_float+0x60>
 8011e02:	2507      	movs	r5, #7
 8011e04:	e7b2      	b.n	8011d6c <_scanf_float+0x188>
 8011e06:	6822      	ldr	r2, [r4, #0]
 8011e08:	0591      	lsls	r1, r2, #22
 8011e0a:	f57f af1b 	bpl.w	8011c44 <_scanf_float+0x60>
 8011e0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011e12:	6022      	str	r2, [r4, #0]
 8011e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8011e18:	e7a8      	b.n	8011d6c <_scanf_float+0x188>
 8011e1a:	6822      	ldr	r2, [r4, #0]
 8011e1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011e20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011e24:	d006      	beq.n	8011e34 <_scanf_float+0x250>
 8011e26:	0550      	lsls	r0, r2, #21
 8011e28:	f57f af0c 	bpl.w	8011c44 <_scanf_float+0x60>
 8011e2c:	f1b9 0f00 	cmp.w	r9, #0
 8011e30:	f43f af0f 	beq.w	8011c52 <_scanf_float+0x6e>
 8011e34:	0591      	lsls	r1, r2, #22
 8011e36:	bf58      	it	pl
 8011e38:	9901      	ldrpl	r1, [sp, #4]
 8011e3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011e3e:	bf58      	it	pl
 8011e40:	eba9 0101 	subpl.w	r1, r9, r1
 8011e44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011e48:	bf58      	it	pl
 8011e4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011e4e:	6022      	str	r2, [r4, #0]
 8011e50:	f04f 0900 	mov.w	r9, #0
 8011e54:	e78a      	b.n	8011d6c <_scanf_float+0x188>
 8011e56:	f04f 0a03 	mov.w	sl, #3
 8011e5a:	e787      	b.n	8011d6c <_scanf_float+0x188>
 8011e5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011e60:	4639      	mov	r1, r7
 8011e62:	4640      	mov	r0, r8
 8011e64:	4798      	blx	r3
 8011e66:	2800      	cmp	r0, #0
 8011e68:	f43f aedf 	beq.w	8011c2a <_scanf_float+0x46>
 8011e6c:	e6ea      	b.n	8011c44 <_scanf_float+0x60>
 8011e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011e76:	463a      	mov	r2, r7
 8011e78:	4640      	mov	r0, r8
 8011e7a:	4798      	blx	r3
 8011e7c:	6923      	ldr	r3, [r4, #16]
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	6123      	str	r3, [r4, #16]
 8011e82:	e6ec      	b.n	8011c5e <_scanf_float+0x7a>
 8011e84:	1e6b      	subs	r3, r5, #1
 8011e86:	2b06      	cmp	r3, #6
 8011e88:	d825      	bhi.n	8011ed6 <_scanf_float+0x2f2>
 8011e8a:	2d02      	cmp	r5, #2
 8011e8c:	d836      	bhi.n	8011efc <_scanf_float+0x318>
 8011e8e:	455e      	cmp	r6, fp
 8011e90:	f67f aee8 	bls.w	8011c64 <_scanf_float+0x80>
 8011e94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011e9c:	463a      	mov	r2, r7
 8011e9e:	4640      	mov	r0, r8
 8011ea0:	4798      	blx	r3
 8011ea2:	6923      	ldr	r3, [r4, #16]
 8011ea4:	3b01      	subs	r3, #1
 8011ea6:	6123      	str	r3, [r4, #16]
 8011ea8:	e7f1      	b.n	8011e8e <_scanf_float+0x2aa>
 8011eaa:	9802      	ldr	r0, [sp, #8]
 8011eac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011eb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011eb4:	9002      	str	r0, [sp, #8]
 8011eb6:	463a      	mov	r2, r7
 8011eb8:	4640      	mov	r0, r8
 8011eba:	4798      	blx	r3
 8011ebc:	6923      	ldr	r3, [r4, #16]
 8011ebe:	3b01      	subs	r3, #1
 8011ec0:	6123      	str	r3, [r4, #16]
 8011ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ec6:	fa5f fa8a 	uxtb.w	sl, sl
 8011eca:	f1ba 0f02 	cmp.w	sl, #2
 8011ece:	d1ec      	bne.n	8011eaa <_scanf_float+0x2c6>
 8011ed0:	3d03      	subs	r5, #3
 8011ed2:	b2ed      	uxtb	r5, r5
 8011ed4:	1b76      	subs	r6, r6, r5
 8011ed6:	6823      	ldr	r3, [r4, #0]
 8011ed8:	05da      	lsls	r2, r3, #23
 8011eda:	d52f      	bpl.n	8011f3c <_scanf_float+0x358>
 8011edc:	055b      	lsls	r3, r3, #21
 8011ede:	d510      	bpl.n	8011f02 <_scanf_float+0x31e>
 8011ee0:	455e      	cmp	r6, fp
 8011ee2:	f67f aebf 	bls.w	8011c64 <_scanf_float+0x80>
 8011ee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011eea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011eee:	463a      	mov	r2, r7
 8011ef0:	4640      	mov	r0, r8
 8011ef2:	4798      	blx	r3
 8011ef4:	6923      	ldr	r3, [r4, #16]
 8011ef6:	3b01      	subs	r3, #1
 8011ef8:	6123      	str	r3, [r4, #16]
 8011efa:	e7f1      	b.n	8011ee0 <_scanf_float+0x2fc>
 8011efc:	46aa      	mov	sl, r5
 8011efe:	9602      	str	r6, [sp, #8]
 8011f00:	e7df      	b.n	8011ec2 <_scanf_float+0x2de>
 8011f02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011f06:	6923      	ldr	r3, [r4, #16]
 8011f08:	2965      	cmp	r1, #101	; 0x65
 8011f0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011f0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011f12:	6123      	str	r3, [r4, #16]
 8011f14:	d00c      	beq.n	8011f30 <_scanf_float+0x34c>
 8011f16:	2945      	cmp	r1, #69	; 0x45
 8011f18:	d00a      	beq.n	8011f30 <_scanf_float+0x34c>
 8011f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011f1e:	463a      	mov	r2, r7
 8011f20:	4640      	mov	r0, r8
 8011f22:	4798      	blx	r3
 8011f24:	6923      	ldr	r3, [r4, #16]
 8011f26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011f2a:	3b01      	subs	r3, #1
 8011f2c:	1eb5      	subs	r5, r6, #2
 8011f2e:	6123      	str	r3, [r4, #16]
 8011f30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011f34:	463a      	mov	r2, r7
 8011f36:	4640      	mov	r0, r8
 8011f38:	4798      	blx	r3
 8011f3a:	462e      	mov	r6, r5
 8011f3c:	6825      	ldr	r5, [r4, #0]
 8011f3e:	f015 0510 	ands.w	r5, r5, #16
 8011f42:	d158      	bne.n	8011ff6 <_scanf_float+0x412>
 8011f44:	7035      	strb	r5, [r6, #0]
 8011f46:	6823      	ldr	r3, [r4, #0]
 8011f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f50:	d11c      	bne.n	8011f8c <_scanf_float+0x3a8>
 8011f52:	9b01      	ldr	r3, [sp, #4]
 8011f54:	454b      	cmp	r3, r9
 8011f56:	eba3 0209 	sub.w	r2, r3, r9
 8011f5a:	d124      	bne.n	8011fa6 <_scanf_float+0x3c2>
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	4659      	mov	r1, fp
 8011f60:	4640      	mov	r0, r8
 8011f62:	f002 fc3d 	bl	80147e0 <_strtod_r>
 8011f66:	9b03      	ldr	r3, [sp, #12]
 8011f68:	6821      	ldr	r1, [r4, #0]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f011 0f02 	tst.w	r1, #2
 8011f70:	ec57 6b10 	vmov	r6, r7, d0
 8011f74:	f103 0204 	add.w	r2, r3, #4
 8011f78:	d020      	beq.n	8011fbc <_scanf_float+0x3d8>
 8011f7a:	9903      	ldr	r1, [sp, #12]
 8011f7c:	600a      	str	r2, [r1, #0]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	e9c3 6700 	strd	r6, r7, [r3]
 8011f84:	68e3      	ldr	r3, [r4, #12]
 8011f86:	3301      	adds	r3, #1
 8011f88:	60e3      	str	r3, [r4, #12]
 8011f8a:	e66c      	b.n	8011c66 <_scanf_float+0x82>
 8011f8c:	9b04      	ldr	r3, [sp, #16]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d0e4      	beq.n	8011f5c <_scanf_float+0x378>
 8011f92:	9905      	ldr	r1, [sp, #20]
 8011f94:	230a      	movs	r3, #10
 8011f96:	462a      	mov	r2, r5
 8011f98:	3101      	adds	r1, #1
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	f002 fca8 	bl	80148f0 <_strtol_r>
 8011fa0:	9b04      	ldr	r3, [sp, #16]
 8011fa2:	9e05      	ldr	r6, [sp, #20]
 8011fa4:	1ac2      	subs	r2, r0, r3
 8011fa6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011faa:	429e      	cmp	r6, r3
 8011fac:	bf28      	it	cs
 8011fae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011fb2:	4912      	ldr	r1, [pc, #72]	; (8011ffc <_scanf_float+0x418>)
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	f000 f8e7 	bl	8012188 <siprintf>
 8011fba:	e7cf      	b.n	8011f5c <_scanf_float+0x378>
 8011fbc:	f011 0f04 	tst.w	r1, #4
 8011fc0:	9903      	ldr	r1, [sp, #12]
 8011fc2:	600a      	str	r2, [r1, #0]
 8011fc4:	d1db      	bne.n	8011f7e <_scanf_float+0x39a>
 8011fc6:	f8d3 8000 	ldr.w	r8, [r3]
 8011fca:	ee10 2a10 	vmov	r2, s0
 8011fce:	ee10 0a10 	vmov	r0, s0
 8011fd2:	463b      	mov	r3, r7
 8011fd4:	4639      	mov	r1, r7
 8011fd6:	f7ee fdd1 	bl	8000b7c <__aeabi_dcmpun>
 8011fda:	b128      	cbz	r0, 8011fe8 <_scanf_float+0x404>
 8011fdc:	4808      	ldr	r0, [pc, #32]	; (8012000 <_scanf_float+0x41c>)
 8011fde:	f000 f9c5 	bl	801236c <nanf>
 8011fe2:	ed88 0a00 	vstr	s0, [r8]
 8011fe6:	e7cd      	b.n	8011f84 <_scanf_float+0x3a0>
 8011fe8:	4630      	mov	r0, r6
 8011fea:	4639      	mov	r1, r7
 8011fec:	f7ee fe24 	bl	8000c38 <__aeabi_d2f>
 8011ff0:	f8c8 0000 	str.w	r0, [r8]
 8011ff4:	e7c6      	b.n	8011f84 <_scanf_float+0x3a0>
 8011ff6:	2500      	movs	r5, #0
 8011ff8:	e635      	b.n	8011c66 <_scanf_float+0x82>
 8011ffa:	bf00      	nop
 8011ffc:	080187ec 	.word	0x080187ec
 8012000:	08018b7d 	.word	0x08018b7d

08012004 <std>:
 8012004:	2300      	movs	r3, #0
 8012006:	b510      	push	{r4, lr}
 8012008:	4604      	mov	r4, r0
 801200a:	e9c0 3300 	strd	r3, r3, [r0]
 801200e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012012:	6083      	str	r3, [r0, #8]
 8012014:	8181      	strh	r1, [r0, #12]
 8012016:	6643      	str	r3, [r0, #100]	; 0x64
 8012018:	81c2      	strh	r2, [r0, #14]
 801201a:	6183      	str	r3, [r0, #24]
 801201c:	4619      	mov	r1, r3
 801201e:	2208      	movs	r2, #8
 8012020:	305c      	adds	r0, #92	; 0x5c
 8012022:	f000 f914 	bl	801224e <memset>
 8012026:	4b0d      	ldr	r3, [pc, #52]	; (801205c <std+0x58>)
 8012028:	6263      	str	r3, [r4, #36]	; 0x24
 801202a:	4b0d      	ldr	r3, [pc, #52]	; (8012060 <std+0x5c>)
 801202c:	62a3      	str	r3, [r4, #40]	; 0x28
 801202e:	4b0d      	ldr	r3, [pc, #52]	; (8012064 <std+0x60>)
 8012030:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012032:	4b0d      	ldr	r3, [pc, #52]	; (8012068 <std+0x64>)
 8012034:	6323      	str	r3, [r4, #48]	; 0x30
 8012036:	4b0d      	ldr	r3, [pc, #52]	; (801206c <std+0x68>)
 8012038:	6224      	str	r4, [r4, #32]
 801203a:	429c      	cmp	r4, r3
 801203c:	d006      	beq.n	801204c <std+0x48>
 801203e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012042:	4294      	cmp	r4, r2
 8012044:	d002      	beq.n	801204c <std+0x48>
 8012046:	33d0      	adds	r3, #208	; 0xd0
 8012048:	429c      	cmp	r4, r3
 801204a:	d105      	bne.n	8012058 <std+0x54>
 801204c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012054:	f000 b978 	b.w	8012348 <__retarget_lock_init_recursive>
 8012058:	bd10      	pop	{r4, pc}
 801205a:	bf00      	nop
 801205c:	080121c9 	.word	0x080121c9
 8012060:	080121eb 	.word	0x080121eb
 8012064:	08012223 	.word	0x08012223
 8012068:	08012247 	.word	0x08012247
 801206c:	20002294 	.word	0x20002294

08012070 <stdio_exit_handler>:
 8012070:	4a02      	ldr	r2, [pc, #8]	; (801207c <stdio_exit_handler+0xc>)
 8012072:	4903      	ldr	r1, [pc, #12]	; (8012080 <stdio_exit_handler+0x10>)
 8012074:	4803      	ldr	r0, [pc, #12]	; (8012084 <stdio_exit_handler+0x14>)
 8012076:	f000 b869 	b.w	801214c <_fwalk_sglue>
 801207a:	bf00      	nop
 801207c:	2000021c 	.word	0x2000021c
 8012080:	08014cb1 	.word	0x08014cb1
 8012084:	20000228 	.word	0x20000228

08012088 <cleanup_stdio>:
 8012088:	6841      	ldr	r1, [r0, #4]
 801208a:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <cleanup_stdio+0x34>)
 801208c:	4299      	cmp	r1, r3
 801208e:	b510      	push	{r4, lr}
 8012090:	4604      	mov	r4, r0
 8012092:	d001      	beq.n	8012098 <cleanup_stdio+0x10>
 8012094:	f002 fe0c 	bl	8014cb0 <_fflush_r>
 8012098:	68a1      	ldr	r1, [r4, #8]
 801209a:	4b09      	ldr	r3, [pc, #36]	; (80120c0 <cleanup_stdio+0x38>)
 801209c:	4299      	cmp	r1, r3
 801209e:	d002      	beq.n	80120a6 <cleanup_stdio+0x1e>
 80120a0:	4620      	mov	r0, r4
 80120a2:	f002 fe05 	bl	8014cb0 <_fflush_r>
 80120a6:	68e1      	ldr	r1, [r4, #12]
 80120a8:	4b06      	ldr	r3, [pc, #24]	; (80120c4 <cleanup_stdio+0x3c>)
 80120aa:	4299      	cmp	r1, r3
 80120ac:	d004      	beq.n	80120b8 <cleanup_stdio+0x30>
 80120ae:	4620      	mov	r0, r4
 80120b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120b4:	f002 bdfc 	b.w	8014cb0 <_fflush_r>
 80120b8:	bd10      	pop	{r4, pc}
 80120ba:	bf00      	nop
 80120bc:	20002294 	.word	0x20002294
 80120c0:	200022fc 	.word	0x200022fc
 80120c4:	20002364 	.word	0x20002364

080120c8 <global_stdio_init.part.0>:
 80120c8:	b510      	push	{r4, lr}
 80120ca:	4b0b      	ldr	r3, [pc, #44]	; (80120f8 <global_stdio_init.part.0+0x30>)
 80120cc:	4c0b      	ldr	r4, [pc, #44]	; (80120fc <global_stdio_init.part.0+0x34>)
 80120ce:	4a0c      	ldr	r2, [pc, #48]	; (8012100 <global_stdio_init.part.0+0x38>)
 80120d0:	601a      	str	r2, [r3, #0]
 80120d2:	4620      	mov	r0, r4
 80120d4:	2200      	movs	r2, #0
 80120d6:	2104      	movs	r1, #4
 80120d8:	f7ff ff94 	bl	8012004 <std>
 80120dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80120e0:	2201      	movs	r2, #1
 80120e2:	2109      	movs	r1, #9
 80120e4:	f7ff ff8e 	bl	8012004 <std>
 80120e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80120ec:	2202      	movs	r2, #2
 80120ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120f2:	2112      	movs	r1, #18
 80120f4:	f7ff bf86 	b.w	8012004 <std>
 80120f8:	200023cc 	.word	0x200023cc
 80120fc:	20002294 	.word	0x20002294
 8012100:	08012071 	.word	0x08012071

08012104 <__sfp_lock_acquire>:
 8012104:	4801      	ldr	r0, [pc, #4]	; (801210c <__sfp_lock_acquire+0x8>)
 8012106:	f000 b920 	b.w	801234a <__retarget_lock_acquire_recursive>
 801210a:	bf00      	nop
 801210c:	200023d5 	.word	0x200023d5

08012110 <__sfp_lock_release>:
 8012110:	4801      	ldr	r0, [pc, #4]	; (8012118 <__sfp_lock_release+0x8>)
 8012112:	f000 b91b 	b.w	801234c <__retarget_lock_release_recursive>
 8012116:	bf00      	nop
 8012118:	200023d5 	.word	0x200023d5

0801211c <__sinit>:
 801211c:	b510      	push	{r4, lr}
 801211e:	4604      	mov	r4, r0
 8012120:	f7ff fff0 	bl	8012104 <__sfp_lock_acquire>
 8012124:	6a23      	ldr	r3, [r4, #32]
 8012126:	b11b      	cbz	r3, 8012130 <__sinit+0x14>
 8012128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801212c:	f7ff bff0 	b.w	8012110 <__sfp_lock_release>
 8012130:	4b04      	ldr	r3, [pc, #16]	; (8012144 <__sinit+0x28>)
 8012132:	6223      	str	r3, [r4, #32]
 8012134:	4b04      	ldr	r3, [pc, #16]	; (8012148 <__sinit+0x2c>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1f5      	bne.n	8012128 <__sinit+0xc>
 801213c:	f7ff ffc4 	bl	80120c8 <global_stdio_init.part.0>
 8012140:	e7f2      	b.n	8012128 <__sinit+0xc>
 8012142:	bf00      	nop
 8012144:	08012089 	.word	0x08012089
 8012148:	200023cc 	.word	0x200023cc

0801214c <_fwalk_sglue>:
 801214c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012150:	4607      	mov	r7, r0
 8012152:	4688      	mov	r8, r1
 8012154:	4614      	mov	r4, r2
 8012156:	2600      	movs	r6, #0
 8012158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801215c:	f1b9 0901 	subs.w	r9, r9, #1
 8012160:	d505      	bpl.n	801216e <_fwalk_sglue+0x22>
 8012162:	6824      	ldr	r4, [r4, #0]
 8012164:	2c00      	cmp	r4, #0
 8012166:	d1f7      	bne.n	8012158 <_fwalk_sglue+0xc>
 8012168:	4630      	mov	r0, r6
 801216a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801216e:	89ab      	ldrh	r3, [r5, #12]
 8012170:	2b01      	cmp	r3, #1
 8012172:	d907      	bls.n	8012184 <_fwalk_sglue+0x38>
 8012174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012178:	3301      	adds	r3, #1
 801217a:	d003      	beq.n	8012184 <_fwalk_sglue+0x38>
 801217c:	4629      	mov	r1, r5
 801217e:	4638      	mov	r0, r7
 8012180:	47c0      	blx	r8
 8012182:	4306      	orrs	r6, r0
 8012184:	3568      	adds	r5, #104	; 0x68
 8012186:	e7e9      	b.n	801215c <_fwalk_sglue+0x10>

08012188 <siprintf>:
 8012188:	b40e      	push	{r1, r2, r3}
 801218a:	b500      	push	{lr}
 801218c:	b09c      	sub	sp, #112	; 0x70
 801218e:	ab1d      	add	r3, sp, #116	; 0x74
 8012190:	9002      	str	r0, [sp, #8]
 8012192:	9006      	str	r0, [sp, #24]
 8012194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012198:	4809      	ldr	r0, [pc, #36]	; (80121c0 <siprintf+0x38>)
 801219a:	9107      	str	r1, [sp, #28]
 801219c:	9104      	str	r1, [sp, #16]
 801219e:	4909      	ldr	r1, [pc, #36]	; (80121c4 <siprintf+0x3c>)
 80121a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80121a4:	9105      	str	r1, [sp, #20]
 80121a6:	6800      	ldr	r0, [r0, #0]
 80121a8:	9301      	str	r3, [sp, #4]
 80121aa:	a902      	add	r1, sp, #8
 80121ac:	f002 fbfc 	bl	80149a8 <_svfiprintf_r>
 80121b0:	9b02      	ldr	r3, [sp, #8]
 80121b2:	2200      	movs	r2, #0
 80121b4:	701a      	strb	r2, [r3, #0]
 80121b6:	b01c      	add	sp, #112	; 0x70
 80121b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80121bc:	b003      	add	sp, #12
 80121be:	4770      	bx	lr
 80121c0:	20000274 	.word	0x20000274
 80121c4:	ffff0208 	.word	0xffff0208

080121c8 <__sread>:
 80121c8:	b510      	push	{r4, lr}
 80121ca:	460c      	mov	r4, r1
 80121cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121d0:	f000 f86c 	bl	80122ac <_read_r>
 80121d4:	2800      	cmp	r0, #0
 80121d6:	bfab      	itete	ge
 80121d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80121da:	89a3      	ldrhlt	r3, [r4, #12]
 80121dc:	181b      	addge	r3, r3, r0
 80121de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80121e2:	bfac      	ite	ge
 80121e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80121e6:	81a3      	strhlt	r3, [r4, #12]
 80121e8:	bd10      	pop	{r4, pc}

080121ea <__swrite>:
 80121ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ee:	461f      	mov	r7, r3
 80121f0:	898b      	ldrh	r3, [r1, #12]
 80121f2:	05db      	lsls	r3, r3, #23
 80121f4:	4605      	mov	r5, r0
 80121f6:	460c      	mov	r4, r1
 80121f8:	4616      	mov	r6, r2
 80121fa:	d505      	bpl.n	8012208 <__swrite+0x1e>
 80121fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012200:	2302      	movs	r3, #2
 8012202:	2200      	movs	r2, #0
 8012204:	f000 f840 	bl	8012288 <_lseek_r>
 8012208:	89a3      	ldrh	r3, [r4, #12]
 801220a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801220e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012212:	81a3      	strh	r3, [r4, #12]
 8012214:	4632      	mov	r2, r6
 8012216:	463b      	mov	r3, r7
 8012218:	4628      	mov	r0, r5
 801221a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801221e:	f000 b857 	b.w	80122d0 <_write_r>

08012222 <__sseek>:
 8012222:	b510      	push	{r4, lr}
 8012224:	460c      	mov	r4, r1
 8012226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801222a:	f000 f82d 	bl	8012288 <_lseek_r>
 801222e:	1c43      	adds	r3, r0, #1
 8012230:	89a3      	ldrh	r3, [r4, #12]
 8012232:	bf15      	itete	ne
 8012234:	6560      	strne	r0, [r4, #84]	; 0x54
 8012236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801223a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801223e:	81a3      	strheq	r3, [r4, #12]
 8012240:	bf18      	it	ne
 8012242:	81a3      	strhne	r3, [r4, #12]
 8012244:	bd10      	pop	{r4, pc}

08012246 <__sclose>:
 8012246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801224a:	f000 b80d 	b.w	8012268 <_close_r>

0801224e <memset>:
 801224e:	4402      	add	r2, r0
 8012250:	4603      	mov	r3, r0
 8012252:	4293      	cmp	r3, r2
 8012254:	d100      	bne.n	8012258 <memset+0xa>
 8012256:	4770      	bx	lr
 8012258:	f803 1b01 	strb.w	r1, [r3], #1
 801225c:	e7f9      	b.n	8012252 <memset+0x4>
	...

08012260 <_localeconv_r>:
 8012260:	4800      	ldr	r0, [pc, #0]	; (8012264 <_localeconv_r+0x4>)
 8012262:	4770      	bx	lr
 8012264:	20000368 	.word	0x20000368

08012268 <_close_r>:
 8012268:	b538      	push	{r3, r4, r5, lr}
 801226a:	4d06      	ldr	r5, [pc, #24]	; (8012284 <_close_r+0x1c>)
 801226c:	2300      	movs	r3, #0
 801226e:	4604      	mov	r4, r0
 8012270:	4608      	mov	r0, r1
 8012272:	602b      	str	r3, [r5, #0]
 8012274:	f7f3 fe43 	bl	8005efe <_close>
 8012278:	1c43      	adds	r3, r0, #1
 801227a:	d102      	bne.n	8012282 <_close_r+0x1a>
 801227c:	682b      	ldr	r3, [r5, #0]
 801227e:	b103      	cbz	r3, 8012282 <_close_r+0x1a>
 8012280:	6023      	str	r3, [r4, #0]
 8012282:	bd38      	pop	{r3, r4, r5, pc}
 8012284:	200023d0 	.word	0x200023d0

08012288 <_lseek_r>:
 8012288:	b538      	push	{r3, r4, r5, lr}
 801228a:	4d07      	ldr	r5, [pc, #28]	; (80122a8 <_lseek_r+0x20>)
 801228c:	4604      	mov	r4, r0
 801228e:	4608      	mov	r0, r1
 8012290:	4611      	mov	r1, r2
 8012292:	2200      	movs	r2, #0
 8012294:	602a      	str	r2, [r5, #0]
 8012296:	461a      	mov	r2, r3
 8012298:	f7f3 fe58 	bl	8005f4c <_lseek>
 801229c:	1c43      	adds	r3, r0, #1
 801229e:	d102      	bne.n	80122a6 <_lseek_r+0x1e>
 80122a0:	682b      	ldr	r3, [r5, #0]
 80122a2:	b103      	cbz	r3, 80122a6 <_lseek_r+0x1e>
 80122a4:	6023      	str	r3, [r4, #0]
 80122a6:	bd38      	pop	{r3, r4, r5, pc}
 80122a8:	200023d0 	.word	0x200023d0

080122ac <_read_r>:
 80122ac:	b538      	push	{r3, r4, r5, lr}
 80122ae:	4d07      	ldr	r5, [pc, #28]	; (80122cc <_read_r+0x20>)
 80122b0:	4604      	mov	r4, r0
 80122b2:	4608      	mov	r0, r1
 80122b4:	4611      	mov	r1, r2
 80122b6:	2200      	movs	r2, #0
 80122b8:	602a      	str	r2, [r5, #0]
 80122ba:	461a      	mov	r2, r3
 80122bc:	f7f3 fde6 	bl	8005e8c <_read>
 80122c0:	1c43      	adds	r3, r0, #1
 80122c2:	d102      	bne.n	80122ca <_read_r+0x1e>
 80122c4:	682b      	ldr	r3, [r5, #0]
 80122c6:	b103      	cbz	r3, 80122ca <_read_r+0x1e>
 80122c8:	6023      	str	r3, [r4, #0]
 80122ca:	bd38      	pop	{r3, r4, r5, pc}
 80122cc:	200023d0 	.word	0x200023d0

080122d0 <_write_r>:
 80122d0:	b538      	push	{r3, r4, r5, lr}
 80122d2:	4d07      	ldr	r5, [pc, #28]	; (80122f0 <_write_r+0x20>)
 80122d4:	4604      	mov	r4, r0
 80122d6:	4608      	mov	r0, r1
 80122d8:	4611      	mov	r1, r2
 80122da:	2200      	movs	r2, #0
 80122dc:	602a      	str	r2, [r5, #0]
 80122de:	461a      	mov	r2, r3
 80122e0:	f7f3 fdf1 	bl	8005ec6 <_write>
 80122e4:	1c43      	adds	r3, r0, #1
 80122e6:	d102      	bne.n	80122ee <_write_r+0x1e>
 80122e8:	682b      	ldr	r3, [r5, #0]
 80122ea:	b103      	cbz	r3, 80122ee <_write_r+0x1e>
 80122ec:	6023      	str	r3, [r4, #0]
 80122ee:	bd38      	pop	{r3, r4, r5, pc}
 80122f0:	200023d0 	.word	0x200023d0

080122f4 <__errno>:
 80122f4:	4b01      	ldr	r3, [pc, #4]	; (80122fc <__errno+0x8>)
 80122f6:	6818      	ldr	r0, [r3, #0]
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	20000274 	.word	0x20000274

08012300 <__libc_init_array>:
 8012300:	b570      	push	{r4, r5, r6, lr}
 8012302:	4d0d      	ldr	r5, [pc, #52]	; (8012338 <__libc_init_array+0x38>)
 8012304:	4c0d      	ldr	r4, [pc, #52]	; (801233c <__libc_init_array+0x3c>)
 8012306:	1b64      	subs	r4, r4, r5
 8012308:	10a4      	asrs	r4, r4, #2
 801230a:	2600      	movs	r6, #0
 801230c:	42a6      	cmp	r6, r4
 801230e:	d109      	bne.n	8012324 <__libc_init_array+0x24>
 8012310:	4d0b      	ldr	r5, [pc, #44]	; (8012340 <__libc_init_array+0x40>)
 8012312:	4c0c      	ldr	r4, [pc, #48]	; (8012344 <__libc_init_array+0x44>)
 8012314:	f003 fd58 	bl	8015dc8 <_init>
 8012318:	1b64      	subs	r4, r4, r5
 801231a:	10a4      	asrs	r4, r4, #2
 801231c:	2600      	movs	r6, #0
 801231e:	42a6      	cmp	r6, r4
 8012320:	d105      	bne.n	801232e <__libc_init_array+0x2e>
 8012322:	bd70      	pop	{r4, r5, r6, pc}
 8012324:	f855 3b04 	ldr.w	r3, [r5], #4
 8012328:	4798      	blx	r3
 801232a:	3601      	adds	r6, #1
 801232c:	e7ee      	b.n	801230c <__libc_init_array+0xc>
 801232e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012332:	4798      	blx	r3
 8012334:	3601      	adds	r6, #1
 8012336:	e7f2      	b.n	801231e <__libc_init_array+0x1e>
 8012338:	08018bf8 	.word	0x08018bf8
 801233c:	08018bf8 	.word	0x08018bf8
 8012340:	08018bf8 	.word	0x08018bf8
 8012344:	08018bfc 	.word	0x08018bfc

08012348 <__retarget_lock_init_recursive>:
 8012348:	4770      	bx	lr

0801234a <__retarget_lock_acquire_recursive>:
 801234a:	4770      	bx	lr

0801234c <__retarget_lock_release_recursive>:
 801234c:	4770      	bx	lr

0801234e <memcpy>:
 801234e:	440a      	add	r2, r1
 8012350:	4291      	cmp	r1, r2
 8012352:	f100 33ff 	add.w	r3, r0, #4294967295
 8012356:	d100      	bne.n	801235a <memcpy+0xc>
 8012358:	4770      	bx	lr
 801235a:	b510      	push	{r4, lr}
 801235c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012364:	4291      	cmp	r1, r2
 8012366:	d1f9      	bne.n	801235c <memcpy+0xe>
 8012368:	bd10      	pop	{r4, pc}
	...

0801236c <nanf>:
 801236c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012374 <nanf+0x8>
 8012370:	4770      	bx	lr
 8012372:	bf00      	nop
 8012374:	7fc00000 	.word	0x7fc00000

08012378 <quorem>:
 8012378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801237c:	6903      	ldr	r3, [r0, #16]
 801237e:	690c      	ldr	r4, [r1, #16]
 8012380:	42a3      	cmp	r3, r4
 8012382:	4607      	mov	r7, r0
 8012384:	db7e      	blt.n	8012484 <quorem+0x10c>
 8012386:	3c01      	subs	r4, #1
 8012388:	f101 0814 	add.w	r8, r1, #20
 801238c:	f100 0514 	add.w	r5, r0, #20
 8012390:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012394:	9301      	str	r3, [sp, #4]
 8012396:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801239a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801239e:	3301      	adds	r3, #1
 80123a0:	429a      	cmp	r2, r3
 80123a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80123a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80123aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80123ae:	d331      	bcc.n	8012414 <quorem+0x9c>
 80123b0:	f04f 0e00 	mov.w	lr, #0
 80123b4:	4640      	mov	r0, r8
 80123b6:	46ac      	mov	ip, r5
 80123b8:	46f2      	mov	sl, lr
 80123ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80123be:	b293      	uxth	r3, r2
 80123c0:	fb06 e303 	mla	r3, r6, r3, lr
 80123c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80123c8:	0c1a      	lsrs	r2, r3, #16
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	ebaa 0303 	sub.w	r3, sl, r3
 80123d0:	f8dc a000 	ldr.w	sl, [ip]
 80123d4:	fa13 f38a 	uxtah	r3, r3, sl
 80123d8:	fb06 220e 	mla	r2, r6, lr, r2
 80123dc:	9300      	str	r3, [sp, #0]
 80123de:	9b00      	ldr	r3, [sp, #0]
 80123e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80123e4:	b292      	uxth	r2, r2
 80123e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80123ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80123f2:	4581      	cmp	r9, r0
 80123f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123f8:	f84c 3b04 	str.w	r3, [ip], #4
 80123fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012400:	d2db      	bcs.n	80123ba <quorem+0x42>
 8012402:	f855 300b 	ldr.w	r3, [r5, fp]
 8012406:	b92b      	cbnz	r3, 8012414 <quorem+0x9c>
 8012408:	9b01      	ldr	r3, [sp, #4]
 801240a:	3b04      	subs	r3, #4
 801240c:	429d      	cmp	r5, r3
 801240e:	461a      	mov	r2, r3
 8012410:	d32c      	bcc.n	801246c <quorem+0xf4>
 8012412:	613c      	str	r4, [r7, #16]
 8012414:	4638      	mov	r0, r7
 8012416:	f001 f9ef 	bl	80137f8 <__mcmp>
 801241a:	2800      	cmp	r0, #0
 801241c:	db22      	blt.n	8012464 <quorem+0xec>
 801241e:	3601      	adds	r6, #1
 8012420:	4629      	mov	r1, r5
 8012422:	2000      	movs	r0, #0
 8012424:	f858 2b04 	ldr.w	r2, [r8], #4
 8012428:	f8d1 c000 	ldr.w	ip, [r1]
 801242c:	b293      	uxth	r3, r2
 801242e:	1ac3      	subs	r3, r0, r3
 8012430:	0c12      	lsrs	r2, r2, #16
 8012432:	fa13 f38c 	uxtah	r3, r3, ip
 8012436:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801243a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801243e:	b29b      	uxth	r3, r3
 8012440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012444:	45c1      	cmp	r9, r8
 8012446:	f841 3b04 	str.w	r3, [r1], #4
 801244a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801244e:	d2e9      	bcs.n	8012424 <quorem+0xac>
 8012450:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012454:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012458:	b922      	cbnz	r2, 8012464 <quorem+0xec>
 801245a:	3b04      	subs	r3, #4
 801245c:	429d      	cmp	r5, r3
 801245e:	461a      	mov	r2, r3
 8012460:	d30a      	bcc.n	8012478 <quorem+0x100>
 8012462:	613c      	str	r4, [r7, #16]
 8012464:	4630      	mov	r0, r6
 8012466:	b003      	add	sp, #12
 8012468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801246c:	6812      	ldr	r2, [r2, #0]
 801246e:	3b04      	subs	r3, #4
 8012470:	2a00      	cmp	r2, #0
 8012472:	d1ce      	bne.n	8012412 <quorem+0x9a>
 8012474:	3c01      	subs	r4, #1
 8012476:	e7c9      	b.n	801240c <quorem+0x94>
 8012478:	6812      	ldr	r2, [r2, #0]
 801247a:	3b04      	subs	r3, #4
 801247c:	2a00      	cmp	r2, #0
 801247e:	d1f0      	bne.n	8012462 <quorem+0xea>
 8012480:	3c01      	subs	r4, #1
 8012482:	e7eb      	b.n	801245c <quorem+0xe4>
 8012484:	2000      	movs	r0, #0
 8012486:	e7ee      	b.n	8012466 <quorem+0xee>

08012488 <_dtoa_r>:
 8012488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	ed2d 8b04 	vpush	{d8-d9}
 8012490:	69c5      	ldr	r5, [r0, #28]
 8012492:	b093      	sub	sp, #76	; 0x4c
 8012494:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012498:	ec57 6b10 	vmov	r6, r7, d0
 801249c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80124a0:	9107      	str	r1, [sp, #28]
 80124a2:	4604      	mov	r4, r0
 80124a4:	920a      	str	r2, [sp, #40]	; 0x28
 80124a6:	930d      	str	r3, [sp, #52]	; 0x34
 80124a8:	b975      	cbnz	r5, 80124c8 <_dtoa_r+0x40>
 80124aa:	2010      	movs	r0, #16
 80124ac:	f000 fe2a 	bl	8013104 <malloc>
 80124b0:	4602      	mov	r2, r0
 80124b2:	61e0      	str	r0, [r4, #28]
 80124b4:	b920      	cbnz	r0, 80124c0 <_dtoa_r+0x38>
 80124b6:	4bae      	ldr	r3, [pc, #696]	; (8012770 <_dtoa_r+0x2e8>)
 80124b8:	21ef      	movs	r1, #239	; 0xef
 80124ba:	48ae      	ldr	r0, [pc, #696]	; (8012774 <_dtoa_r+0x2ec>)
 80124bc:	f002 fc64 	bl	8014d88 <__assert_func>
 80124c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80124c4:	6005      	str	r5, [r0, #0]
 80124c6:	60c5      	str	r5, [r0, #12]
 80124c8:	69e3      	ldr	r3, [r4, #28]
 80124ca:	6819      	ldr	r1, [r3, #0]
 80124cc:	b151      	cbz	r1, 80124e4 <_dtoa_r+0x5c>
 80124ce:	685a      	ldr	r2, [r3, #4]
 80124d0:	604a      	str	r2, [r1, #4]
 80124d2:	2301      	movs	r3, #1
 80124d4:	4093      	lsls	r3, r2
 80124d6:	608b      	str	r3, [r1, #8]
 80124d8:	4620      	mov	r0, r4
 80124da:	f000 ff07 	bl	80132ec <_Bfree>
 80124de:	69e3      	ldr	r3, [r4, #28]
 80124e0:	2200      	movs	r2, #0
 80124e2:	601a      	str	r2, [r3, #0]
 80124e4:	1e3b      	subs	r3, r7, #0
 80124e6:	bfbb      	ittet	lt
 80124e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80124ec:	9303      	strlt	r3, [sp, #12]
 80124ee:	2300      	movge	r3, #0
 80124f0:	2201      	movlt	r2, #1
 80124f2:	bfac      	ite	ge
 80124f4:	f8c8 3000 	strge.w	r3, [r8]
 80124f8:	f8c8 2000 	strlt.w	r2, [r8]
 80124fc:	4b9e      	ldr	r3, [pc, #632]	; (8012778 <_dtoa_r+0x2f0>)
 80124fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012502:	ea33 0308 	bics.w	r3, r3, r8
 8012506:	d11b      	bne.n	8012540 <_dtoa_r+0xb8>
 8012508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801250a:	f242 730f 	movw	r3, #9999	; 0x270f
 801250e:	6013      	str	r3, [r2, #0]
 8012510:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012514:	4333      	orrs	r3, r6
 8012516:	f000 8593 	beq.w	8013040 <_dtoa_r+0xbb8>
 801251a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801251c:	b963      	cbnz	r3, 8012538 <_dtoa_r+0xb0>
 801251e:	4b97      	ldr	r3, [pc, #604]	; (801277c <_dtoa_r+0x2f4>)
 8012520:	e027      	b.n	8012572 <_dtoa_r+0xea>
 8012522:	4b97      	ldr	r3, [pc, #604]	; (8012780 <_dtoa_r+0x2f8>)
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	3308      	adds	r3, #8
 8012528:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801252a:	6013      	str	r3, [r2, #0]
 801252c:	9800      	ldr	r0, [sp, #0]
 801252e:	b013      	add	sp, #76	; 0x4c
 8012530:	ecbd 8b04 	vpop	{d8-d9}
 8012534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012538:	4b90      	ldr	r3, [pc, #576]	; (801277c <_dtoa_r+0x2f4>)
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	3303      	adds	r3, #3
 801253e:	e7f3      	b.n	8012528 <_dtoa_r+0xa0>
 8012540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012544:	2200      	movs	r2, #0
 8012546:	ec51 0b17 	vmov	r0, r1, d7
 801254a:	eeb0 8a47 	vmov.f32	s16, s14
 801254e:	eef0 8a67 	vmov.f32	s17, s15
 8012552:	2300      	movs	r3, #0
 8012554:	f7ee fae0 	bl	8000b18 <__aeabi_dcmpeq>
 8012558:	4681      	mov	r9, r0
 801255a:	b160      	cbz	r0, 8012576 <_dtoa_r+0xee>
 801255c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801255e:	2301      	movs	r3, #1
 8012560:	6013      	str	r3, [r2, #0]
 8012562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012564:	2b00      	cmp	r3, #0
 8012566:	f000 8568 	beq.w	801303a <_dtoa_r+0xbb2>
 801256a:	4b86      	ldr	r3, [pc, #536]	; (8012784 <_dtoa_r+0x2fc>)
 801256c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801256e:	6013      	str	r3, [r2, #0]
 8012570:	3b01      	subs	r3, #1
 8012572:	9300      	str	r3, [sp, #0]
 8012574:	e7da      	b.n	801252c <_dtoa_r+0xa4>
 8012576:	aa10      	add	r2, sp, #64	; 0x40
 8012578:	a911      	add	r1, sp, #68	; 0x44
 801257a:	4620      	mov	r0, r4
 801257c:	eeb0 0a48 	vmov.f32	s0, s16
 8012580:	eef0 0a68 	vmov.f32	s1, s17
 8012584:	f001 fa4e 	bl	8013a24 <__d2b>
 8012588:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801258c:	4682      	mov	sl, r0
 801258e:	2d00      	cmp	r5, #0
 8012590:	d07f      	beq.n	8012692 <_dtoa_r+0x20a>
 8012592:	ee18 3a90 	vmov	r3, s17
 8012596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801259a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801259e:	ec51 0b18 	vmov	r0, r1, d8
 80125a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80125a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80125aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80125ae:	4619      	mov	r1, r3
 80125b0:	2200      	movs	r2, #0
 80125b2:	4b75      	ldr	r3, [pc, #468]	; (8012788 <_dtoa_r+0x300>)
 80125b4:	f7ed fe90 	bl	80002d8 <__aeabi_dsub>
 80125b8:	a367      	add	r3, pc, #412	; (adr r3, 8012758 <_dtoa_r+0x2d0>)
 80125ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125be:	f7ee f843 	bl	8000648 <__aeabi_dmul>
 80125c2:	a367      	add	r3, pc, #412	; (adr r3, 8012760 <_dtoa_r+0x2d8>)
 80125c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c8:	f7ed fe88 	bl	80002dc <__adddf3>
 80125cc:	4606      	mov	r6, r0
 80125ce:	4628      	mov	r0, r5
 80125d0:	460f      	mov	r7, r1
 80125d2:	f7ed ffcf 	bl	8000574 <__aeabi_i2d>
 80125d6:	a364      	add	r3, pc, #400	; (adr r3, 8012768 <_dtoa_r+0x2e0>)
 80125d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125dc:	f7ee f834 	bl	8000648 <__aeabi_dmul>
 80125e0:	4602      	mov	r2, r0
 80125e2:	460b      	mov	r3, r1
 80125e4:	4630      	mov	r0, r6
 80125e6:	4639      	mov	r1, r7
 80125e8:	f7ed fe78 	bl	80002dc <__adddf3>
 80125ec:	4606      	mov	r6, r0
 80125ee:	460f      	mov	r7, r1
 80125f0:	f7ee fada 	bl	8000ba8 <__aeabi_d2iz>
 80125f4:	2200      	movs	r2, #0
 80125f6:	4683      	mov	fp, r0
 80125f8:	2300      	movs	r3, #0
 80125fa:	4630      	mov	r0, r6
 80125fc:	4639      	mov	r1, r7
 80125fe:	f7ee fa95 	bl	8000b2c <__aeabi_dcmplt>
 8012602:	b148      	cbz	r0, 8012618 <_dtoa_r+0x190>
 8012604:	4658      	mov	r0, fp
 8012606:	f7ed ffb5 	bl	8000574 <__aeabi_i2d>
 801260a:	4632      	mov	r2, r6
 801260c:	463b      	mov	r3, r7
 801260e:	f7ee fa83 	bl	8000b18 <__aeabi_dcmpeq>
 8012612:	b908      	cbnz	r0, 8012618 <_dtoa_r+0x190>
 8012614:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012618:	f1bb 0f16 	cmp.w	fp, #22
 801261c:	d857      	bhi.n	80126ce <_dtoa_r+0x246>
 801261e:	4b5b      	ldr	r3, [pc, #364]	; (801278c <_dtoa_r+0x304>)
 8012620:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012628:	ec51 0b18 	vmov	r0, r1, d8
 801262c:	f7ee fa7e 	bl	8000b2c <__aeabi_dcmplt>
 8012630:	2800      	cmp	r0, #0
 8012632:	d04e      	beq.n	80126d2 <_dtoa_r+0x24a>
 8012634:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012638:	2300      	movs	r3, #0
 801263a:	930c      	str	r3, [sp, #48]	; 0x30
 801263c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801263e:	1b5b      	subs	r3, r3, r5
 8012640:	1e5a      	subs	r2, r3, #1
 8012642:	bf45      	ittet	mi
 8012644:	f1c3 0301 	rsbmi	r3, r3, #1
 8012648:	9305      	strmi	r3, [sp, #20]
 801264a:	2300      	movpl	r3, #0
 801264c:	2300      	movmi	r3, #0
 801264e:	9206      	str	r2, [sp, #24]
 8012650:	bf54      	ite	pl
 8012652:	9305      	strpl	r3, [sp, #20]
 8012654:	9306      	strmi	r3, [sp, #24]
 8012656:	f1bb 0f00 	cmp.w	fp, #0
 801265a:	db3c      	blt.n	80126d6 <_dtoa_r+0x24e>
 801265c:	9b06      	ldr	r3, [sp, #24]
 801265e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012662:	445b      	add	r3, fp
 8012664:	9306      	str	r3, [sp, #24]
 8012666:	2300      	movs	r3, #0
 8012668:	9308      	str	r3, [sp, #32]
 801266a:	9b07      	ldr	r3, [sp, #28]
 801266c:	2b09      	cmp	r3, #9
 801266e:	d868      	bhi.n	8012742 <_dtoa_r+0x2ba>
 8012670:	2b05      	cmp	r3, #5
 8012672:	bfc4      	itt	gt
 8012674:	3b04      	subgt	r3, #4
 8012676:	9307      	strgt	r3, [sp, #28]
 8012678:	9b07      	ldr	r3, [sp, #28]
 801267a:	f1a3 0302 	sub.w	r3, r3, #2
 801267e:	bfcc      	ite	gt
 8012680:	2500      	movgt	r5, #0
 8012682:	2501      	movle	r5, #1
 8012684:	2b03      	cmp	r3, #3
 8012686:	f200 8085 	bhi.w	8012794 <_dtoa_r+0x30c>
 801268a:	e8df f003 	tbb	[pc, r3]
 801268e:	3b2e      	.short	0x3b2e
 8012690:	5839      	.short	0x5839
 8012692:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012696:	441d      	add	r5, r3
 8012698:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801269c:	2b20      	cmp	r3, #32
 801269e:	bfc1      	itttt	gt
 80126a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80126a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80126a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80126ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80126b0:	bfd6      	itet	le
 80126b2:	f1c3 0320 	rsble	r3, r3, #32
 80126b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80126ba:	fa06 f003 	lslle.w	r0, r6, r3
 80126be:	f7ed ff49 	bl	8000554 <__aeabi_ui2d>
 80126c2:	2201      	movs	r2, #1
 80126c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80126c8:	3d01      	subs	r5, #1
 80126ca:	920e      	str	r2, [sp, #56]	; 0x38
 80126cc:	e76f      	b.n	80125ae <_dtoa_r+0x126>
 80126ce:	2301      	movs	r3, #1
 80126d0:	e7b3      	b.n	801263a <_dtoa_r+0x1b2>
 80126d2:	900c      	str	r0, [sp, #48]	; 0x30
 80126d4:	e7b2      	b.n	801263c <_dtoa_r+0x1b4>
 80126d6:	9b05      	ldr	r3, [sp, #20]
 80126d8:	eba3 030b 	sub.w	r3, r3, fp
 80126dc:	9305      	str	r3, [sp, #20]
 80126de:	f1cb 0300 	rsb	r3, fp, #0
 80126e2:	9308      	str	r3, [sp, #32]
 80126e4:	2300      	movs	r3, #0
 80126e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80126e8:	e7bf      	b.n	801266a <_dtoa_r+0x1e2>
 80126ea:	2300      	movs	r3, #0
 80126ec:	9309      	str	r3, [sp, #36]	; 0x24
 80126ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	dc52      	bgt.n	801279a <_dtoa_r+0x312>
 80126f4:	2301      	movs	r3, #1
 80126f6:	9301      	str	r3, [sp, #4]
 80126f8:	9304      	str	r3, [sp, #16]
 80126fa:	461a      	mov	r2, r3
 80126fc:	920a      	str	r2, [sp, #40]	; 0x28
 80126fe:	e00b      	b.n	8012718 <_dtoa_r+0x290>
 8012700:	2301      	movs	r3, #1
 8012702:	e7f3      	b.n	80126ec <_dtoa_r+0x264>
 8012704:	2300      	movs	r3, #0
 8012706:	9309      	str	r3, [sp, #36]	; 0x24
 8012708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801270a:	445b      	add	r3, fp
 801270c:	9301      	str	r3, [sp, #4]
 801270e:	3301      	adds	r3, #1
 8012710:	2b01      	cmp	r3, #1
 8012712:	9304      	str	r3, [sp, #16]
 8012714:	bfb8      	it	lt
 8012716:	2301      	movlt	r3, #1
 8012718:	69e0      	ldr	r0, [r4, #28]
 801271a:	2100      	movs	r1, #0
 801271c:	2204      	movs	r2, #4
 801271e:	f102 0614 	add.w	r6, r2, #20
 8012722:	429e      	cmp	r6, r3
 8012724:	d93d      	bls.n	80127a2 <_dtoa_r+0x31a>
 8012726:	6041      	str	r1, [r0, #4]
 8012728:	4620      	mov	r0, r4
 801272a:	f000 fd9f 	bl	801326c <_Balloc>
 801272e:	9000      	str	r0, [sp, #0]
 8012730:	2800      	cmp	r0, #0
 8012732:	d139      	bne.n	80127a8 <_dtoa_r+0x320>
 8012734:	4b16      	ldr	r3, [pc, #88]	; (8012790 <_dtoa_r+0x308>)
 8012736:	4602      	mov	r2, r0
 8012738:	f240 11af 	movw	r1, #431	; 0x1af
 801273c:	e6bd      	b.n	80124ba <_dtoa_r+0x32>
 801273e:	2301      	movs	r3, #1
 8012740:	e7e1      	b.n	8012706 <_dtoa_r+0x27e>
 8012742:	2501      	movs	r5, #1
 8012744:	2300      	movs	r3, #0
 8012746:	9307      	str	r3, [sp, #28]
 8012748:	9509      	str	r5, [sp, #36]	; 0x24
 801274a:	f04f 33ff 	mov.w	r3, #4294967295
 801274e:	9301      	str	r3, [sp, #4]
 8012750:	9304      	str	r3, [sp, #16]
 8012752:	2200      	movs	r2, #0
 8012754:	2312      	movs	r3, #18
 8012756:	e7d1      	b.n	80126fc <_dtoa_r+0x274>
 8012758:	636f4361 	.word	0x636f4361
 801275c:	3fd287a7 	.word	0x3fd287a7
 8012760:	8b60c8b3 	.word	0x8b60c8b3
 8012764:	3fc68a28 	.word	0x3fc68a28
 8012768:	509f79fb 	.word	0x509f79fb
 801276c:	3fd34413 	.word	0x3fd34413
 8012770:	080187fe 	.word	0x080187fe
 8012774:	08018815 	.word	0x08018815
 8012778:	7ff00000 	.word	0x7ff00000
 801277c:	080187fa 	.word	0x080187fa
 8012780:	080187f1 	.word	0x080187f1
 8012784:	080187c9 	.word	0x080187c9
 8012788:	3ff80000 	.word	0x3ff80000
 801278c:	08018900 	.word	0x08018900
 8012790:	0801886d 	.word	0x0801886d
 8012794:	2301      	movs	r3, #1
 8012796:	9309      	str	r3, [sp, #36]	; 0x24
 8012798:	e7d7      	b.n	801274a <_dtoa_r+0x2c2>
 801279a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801279c:	9301      	str	r3, [sp, #4]
 801279e:	9304      	str	r3, [sp, #16]
 80127a0:	e7ba      	b.n	8012718 <_dtoa_r+0x290>
 80127a2:	3101      	adds	r1, #1
 80127a4:	0052      	lsls	r2, r2, #1
 80127a6:	e7ba      	b.n	801271e <_dtoa_r+0x296>
 80127a8:	69e3      	ldr	r3, [r4, #28]
 80127aa:	9a00      	ldr	r2, [sp, #0]
 80127ac:	601a      	str	r2, [r3, #0]
 80127ae:	9b04      	ldr	r3, [sp, #16]
 80127b0:	2b0e      	cmp	r3, #14
 80127b2:	f200 80a8 	bhi.w	8012906 <_dtoa_r+0x47e>
 80127b6:	2d00      	cmp	r5, #0
 80127b8:	f000 80a5 	beq.w	8012906 <_dtoa_r+0x47e>
 80127bc:	f1bb 0f00 	cmp.w	fp, #0
 80127c0:	dd38      	ble.n	8012834 <_dtoa_r+0x3ac>
 80127c2:	4bc0      	ldr	r3, [pc, #768]	; (8012ac4 <_dtoa_r+0x63c>)
 80127c4:	f00b 020f 	and.w	r2, fp, #15
 80127c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80127d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80127d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80127d8:	d019      	beq.n	801280e <_dtoa_r+0x386>
 80127da:	4bbb      	ldr	r3, [pc, #748]	; (8012ac8 <_dtoa_r+0x640>)
 80127dc:	ec51 0b18 	vmov	r0, r1, d8
 80127e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80127e4:	f7ee f85a 	bl	800089c <__aeabi_ddiv>
 80127e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127ec:	f008 080f 	and.w	r8, r8, #15
 80127f0:	2503      	movs	r5, #3
 80127f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012ac8 <_dtoa_r+0x640>
 80127f6:	f1b8 0f00 	cmp.w	r8, #0
 80127fa:	d10a      	bne.n	8012812 <_dtoa_r+0x38a>
 80127fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012800:	4632      	mov	r2, r6
 8012802:	463b      	mov	r3, r7
 8012804:	f7ee f84a 	bl	800089c <__aeabi_ddiv>
 8012808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801280c:	e02b      	b.n	8012866 <_dtoa_r+0x3de>
 801280e:	2502      	movs	r5, #2
 8012810:	e7ef      	b.n	80127f2 <_dtoa_r+0x36a>
 8012812:	f018 0f01 	tst.w	r8, #1
 8012816:	d008      	beq.n	801282a <_dtoa_r+0x3a2>
 8012818:	4630      	mov	r0, r6
 801281a:	4639      	mov	r1, r7
 801281c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012820:	f7ed ff12 	bl	8000648 <__aeabi_dmul>
 8012824:	3501      	adds	r5, #1
 8012826:	4606      	mov	r6, r0
 8012828:	460f      	mov	r7, r1
 801282a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801282e:	f109 0908 	add.w	r9, r9, #8
 8012832:	e7e0      	b.n	80127f6 <_dtoa_r+0x36e>
 8012834:	f000 809f 	beq.w	8012976 <_dtoa_r+0x4ee>
 8012838:	f1cb 0600 	rsb	r6, fp, #0
 801283c:	4ba1      	ldr	r3, [pc, #644]	; (8012ac4 <_dtoa_r+0x63c>)
 801283e:	4fa2      	ldr	r7, [pc, #648]	; (8012ac8 <_dtoa_r+0x640>)
 8012840:	f006 020f 	and.w	r2, r6, #15
 8012844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284c:	ec51 0b18 	vmov	r0, r1, d8
 8012850:	f7ed fefa 	bl	8000648 <__aeabi_dmul>
 8012854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012858:	1136      	asrs	r6, r6, #4
 801285a:	2300      	movs	r3, #0
 801285c:	2502      	movs	r5, #2
 801285e:	2e00      	cmp	r6, #0
 8012860:	d17e      	bne.n	8012960 <_dtoa_r+0x4d8>
 8012862:	2b00      	cmp	r3, #0
 8012864:	d1d0      	bne.n	8012808 <_dtoa_r+0x380>
 8012866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012868:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801286c:	2b00      	cmp	r3, #0
 801286e:	f000 8084 	beq.w	801297a <_dtoa_r+0x4f2>
 8012872:	4b96      	ldr	r3, [pc, #600]	; (8012acc <_dtoa_r+0x644>)
 8012874:	2200      	movs	r2, #0
 8012876:	4640      	mov	r0, r8
 8012878:	4649      	mov	r1, r9
 801287a:	f7ee f957 	bl	8000b2c <__aeabi_dcmplt>
 801287e:	2800      	cmp	r0, #0
 8012880:	d07b      	beq.n	801297a <_dtoa_r+0x4f2>
 8012882:	9b04      	ldr	r3, [sp, #16]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d078      	beq.n	801297a <_dtoa_r+0x4f2>
 8012888:	9b01      	ldr	r3, [sp, #4]
 801288a:	2b00      	cmp	r3, #0
 801288c:	dd39      	ble.n	8012902 <_dtoa_r+0x47a>
 801288e:	4b90      	ldr	r3, [pc, #576]	; (8012ad0 <_dtoa_r+0x648>)
 8012890:	2200      	movs	r2, #0
 8012892:	4640      	mov	r0, r8
 8012894:	4649      	mov	r1, r9
 8012896:	f7ed fed7 	bl	8000648 <__aeabi_dmul>
 801289a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801289e:	9e01      	ldr	r6, [sp, #4]
 80128a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80128a4:	3501      	adds	r5, #1
 80128a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80128aa:	4628      	mov	r0, r5
 80128ac:	f7ed fe62 	bl	8000574 <__aeabi_i2d>
 80128b0:	4642      	mov	r2, r8
 80128b2:	464b      	mov	r3, r9
 80128b4:	f7ed fec8 	bl	8000648 <__aeabi_dmul>
 80128b8:	4b86      	ldr	r3, [pc, #536]	; (8012ad4 <_dtoa_r+0x64c>)
 80128ba:	2200      	movs	r2, #0
 80128bc:	f7ed fd0e 	bl	80002dc <__adddf3>
 80128c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80128c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128c8:	9303      	str	r3, [sp, #12]
 80128ca:	2e00      	cmp	r6, #0
 80128cc:	d158      	bne.n	8012980 <_dtoa_r+0x4f8>
 80128ce:	4b82      	ldr	r3, [pc, #520]	; (8012ad8 <_dtoa_r+0x650>)
 80128d0:	2200      	movs	r2, #0
 80128d2:	4640      	mov	r0, r8
 80128d4:	4649      	mov	r1, r9
 80128d6:	f7ed fcff 	bl	80002d8 <__aeabi_dsub>
 80128da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128de:	4680      	mov	r8, r0
 80128e0:	4689      	mov	r9, r1
 80128e2:	f7ee f941 	bl	8000b68 <__aeabi_dcmpgt>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	f040 8296 	bne.w	8012e18 <_dtoa_r+0x990>
 80128ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80128f0:	4640      	mov	r0, r8
 80128f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128f6:	4649      	mov	r1, r9
 80128f8:	f7ee f918 	bl	8000b2c <__aeabi_dcmplt>
 80128fc:	2800      	cmp	r0, #0
 80128fe:	f040 8289 	bne.w	8012e14 <_dtoa_r+0x98c>
 8012902:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012908:	2b00      	cmp	r3, #0
 801290a:	f2c0 814e 	blt.w	8012baa <_dtoa_r+0x722>
 801290e:	f1bb 0f0e 	cmp.w	fp, #14
 8012912:	f300 814a 	bgt.w	8012baa <_dtoa_r+0x722>
 8012916:	4b6b      	ldr	r3, [pc, #428]	; (8012ac4 <_dtoa_r+0x63c>)
 8012918:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801291c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012922:	2b00      	cmp	r3, #0
 8012924:	f280 80dc 	bge.w	8012ae0 <_dtoa_r+0x658>
 8012928:	9b04      	ldr	r3, [sp, #16]
 801292a:	2b00      	cmp	r3, #0
 801292c:	f300 80d8 	bgt.w	8012ae0 <_dtoa_r+0x658>
 8012930:	f040 826f 	bne.w	8012e12 <_dtoa_r+0x98a>
 8012934:	4b68      	ldr	r3, [pc, #416]	; (8012ad8 <_dtoa_r+0x650>)
 8012936:	2200      	movs	r2, #0
 8012938:	4640      	mov	r0, r8
 801293a:	4649      	mov	r1, r9
 801293c:	f7ed fe84 	bl	8000648 <__aeabi_dmul>
 8012940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012944:	f7ee f906 	bl	8000b54 <__aeabi_dcmpge>
 8012948:	9e04      	ldr	r6, [sp, #16]
 801294a:	4637      	mov	r7, r6
 801294c:	2800      	cmp	r0, #0
 801294e:	f040 8245 	bne.w	8012ddc <_dtoa_r+0x954>
 8012952:	9d00      	ldr	r5, [sp, #0]
 8012954:	2331      	movs	r3, #49	; 0x31
 8012956:	f805 3b01 	strb.w	r3, [r5], #1
 801295a:	f10b 0b01 	add.w	fp, fp, #1
 801295e:	e241      	b.n	8012de4 <_dtoa_r+0x95c>
 8012960:	07f2      	lsls	r2, r6, #31
 8012962:	d505      	bpl.n	8012970 <_dtoa_r+0x4e8>
 8012964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012968:	f7ed fe6e 	bl	8000648 <__aeabi_dmul>
 801296c:	3501      	adds	r5, #1
 801296e:	2301      	movs	r3, #1
 8012970:	1076      	asrs	r6, r6, #1
 8012972:	3708      	adds	r7, #8
 8012974:	e773      	b.n	801285e <_dtoa_r+0x3d6>
 8012976:	2502      	movs	r5, #2
 8012978:	e775      	b.n	8012866 <_dtoa_r+0x3de>
 801297a:	9e04      	ldr	r6, [sp, #16]
 801297c:	465f      	mov	r7, fp
 801297e:	e792      	b.n	80128a6 <_dtoa_r+0x41e>
 8012980:	9900      	ldr	r1, [sp, #0]
 8012982:	4b50      	ldr	r3, [pc, #320]	; (8012ac4 <_dtoa_r+0x63c>)
 8012984:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012988:	4431      	add	r1, r6
 801298a:	9102      	str	r1, [sp, #8]
 801298c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801298e:	eeb0 9a47 	vmov.f32	s18, s14
 8012992:	eef0 9a67 	vmov.f32	s19, s15
 8012996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801299a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801299e:	2900      	cmp	r1, #0
 80129a0:	d044      	beq.n	8012a2c <_dtoa_r+0x5a4>
 80129a2:	494e      	ldr	r1, [pc, #312]	; (8012adc <_dtoa_r+0x654>)
 80129a4:	2000      	movs	r0, #0
 80129a6:	f7ed ff79 	bl	800089c <__aeabi_ddiv>
 80129aa:	ec53 2b19 	vmov	r2, r3, d9
 80129ae:	f7ed fc93 	bl	80002d8 <__aeabi_dsub>
 80129b2:	9d00      	ldr	r5, [sp, #0]
 80129b4:	ec41 0b19 	vmov	d9, r0, r1
 80129b8:	4649      	mov	r1, r9
 80129ba:	4640      	mov	r0, r8
 80129bc:	f7ee f8f4 	bl	8000ba8 <__aeabi_d2iz>
 80129c0:	4606      	mov	r6, r0
 80129c2:	f7ed fdd7 	bl	8000574 <__aeabi_i2d>
 80129c6:	4602      	mov	r2, r0
 80129c8:	460b      	mov	r3, r1
 80129ca:	4640      	mov	r0, r8
 80129cc:	4649      	mov	r1, r9
 80129ce:	f7ed fc83 	bl	80002d8 <__aeabi_dsub>
 80129d2:	3630      	adds	r6, #48	; 0x30
 80129d4:	f805 6b01 	strb.w	r6, [r5], #1
 80129d8:	ec53 2b19 	vmov	r2, r3, d9
 80129dc:	4680      	mov	r8, r0
 80129de:	4689      	mov	r9, r1
 80129e0:	f7ee f8a4 	bl	8000b2c <__aeabi_dcmplt>
 80129e4:	2800      	cmp	r0, #0
 80129e6:	d164      	bne.n	8012ab2 <_dtoa_r+0x62a>
 80129e8:	4642      	mov	r2, r8
 80129ea:	464b      	mov	r3, r9
 80129ec:	4937      	ldr	r1, [pc, #220]	; (8012acc <_dtoa_r+0x644>)
 80129ee:	2000      	movs	r0, #0
 80129f0:	f7ed fc72 	bl	80002d8 <__aeabi_dsub>
 80129f4:	ec53 2b19 	vmov	r2, r3, d9
 80129f8:	f7ee f898 	bl	8000b2c <__aeabi_dcmplt>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	f040 80b6 	bne.w	8012b6e <_dtoa_r+0x6e6>
 8012a02:	9b02      	ldr	r3, [sp, #8]
 8012a04:	429d      	cmp	r5, r3
 8012a06:	f43f af7c 	beq.w	8012902 <_dtoa_r+0x47a>
 8012a0a:	4b31      	ldr	r3, [pc, #196]	; (8012ad0 <_dtoa_r+0x648>)
 8012a0c:	ec51 0b19 	vmov	r0, r1, d9
 8012a10:	2200      	movs	r2, #0
 8012a12:	f7ed fe19 	bl	8000648 <__aeabi_dmul>
 8012a16:	4b2e      	ldr	r3, [pc, #184]	; (8012ad0 <_dtoa_r+0x648>)
 8012a18:	ec41 0b19 	vmov	d9, r0, r1
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	4640      	mov	r0, r8
 8012a20:	4649      	mov	r1, r9
 8012a22:	f7ed fe11 	bl	8000648 <__aeabi_dmul>
 8012a26:	4680      	mov	r8, r0
 8012a28:	4689      	mov	r9, r1
 8012a2a:	e7c5      	b.n	80129b8 <_dtoa_r+0x530>
 8012a2c:	ec51 0b17 	vmov	r0, r1, d7
 8012a30:	f7ed fe0a 	bl	8000648 <__aeabi_dmul>
 8012a34:	9b02      	ldr	r3, [sp, #8]
 8012a36:	9d00      	ldr	r5, [sp, #0]
 8012a38:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a3a:	ec41 0b19 	vmov	d9, r0, r1
 8012a3e:	4649      	mov	r1, r9
 8012a40:	4640      	mov	r0, r8
 8012a42:	f7ee f8b1 	bl	8000ba8 <__aeabi_d2iz>
 8012a46:	4606      	mov	r6, r0
 8012a48:	f7ed fd94 	bl	8000574 <__aeabi_i2d>
 8012a4c:	3630      	adds	r6, #48	; 0x30
 8012a4e:	4602      	mov	r2, r0
 8012a50:	460b      	mov	r3, r1
 8012a52:	4640      	mov	r0, r8
 8012a54:	4649      	mov	r1, r9
 8012a56:	f7ed fc3f 	bl	80002d8 <__aeabi_dsub>
 8012a5a:	f805 6b01 	strb.w	r6, [r5], #1
 8012a5e:	9b02      	ldr	r3, [sp, #8]
 8012a60:	429d      	cmp	r5, r3
 8012a62:	4680      	mov	r8, r0
 8012a64:	4689      	mov	r9, r1
 8012a66:	f04f 0200 	mov.w	r2, #0
 8012a6a:	d124      	bne.n	8012ab6 <_dtoa_r+0x62e>
 8012a6c:	4b1b      	ldr	r3, [pc, #108]	; (8012adc <_dtoa_r+0x654>)
 8012a6e:	ec51 0b19 	vmov	r0, r1, d9
 8012a72:	f7ed fc33 	bl	80002dc <__adddf3>
 8012a76:	4602      	mov	r2, r0
 8012a78:	460b      	mov	r3, r1
 8012a7a:	4640      	mov	r0, r8
 8012a7c:	4649      	mov	r1, r9
 8012a7e:	f7ee f873 	bl	8000b68 <__aeabi_dcmpgt>
 8012a82:	2800      	cmp	r0, #0
 8012a84:	d173      	bne.n	8012b6e <_dtoa_r+0x6e6>
 8012a86:	ec53 2b19 	vmov	r2, r3, d9
 8012a8a:	4914      	ldr	r1, [pc, #80]	; (8012adc <_dtoa_r+0x654>)
 8012a8c:	2000      	movs	r0, #0
 8012a8e:	f7ed fc23 	bl	80002d8 <__aeabi_dsub>
 8012a92:	4602      	mov	r2, r0
 8012a94:	460b      	mov	r3, r1
 8012a96:	4640      	mov	r0, r8
 8012a98:	4649      	mov	r1, r9
 8012a9a:	f7ee f847 	bl	8000b2c <__aeabi_dcmplt>
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	f43f af2f 	beq.w	8012902 <_dtoa_r+0x47a>
 8012aa4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012aa6:	1e6b      	subs	r3, r5, #1
 8012aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8012aaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012aae:	2b30      	cmp	r3, #48	; 0x30
 8012ab0:	d0f8      	beq.n	8012aa4 <_dtoa_r+0x61c>
 8012ab2:	46bb      	mov	fp, r7
 8012ab4:	e04a      	b.n	8012b4c <_dtoa_r+0x6c4>
 8012ab6:	4b06      	ldr	r3, [pc, #24]	; (8012ad0 <_dtoa_r+0x648>)
 8012ab8:	f7ed fdc6 	bl	8000648 <__aeabi_dmul>
 8012abc:	4680      	mov	r8, r0
 8012abe:	4689      	mov	r9, r1
 8012ac0:	e7bd      	b.n	8012a3e <_dtoa_r+0x5b6>
 8012ac2:	bf00      	nop
 8012ac4:	08018900 	.word	0x08018900
 8012ac8:	080188d8 	.word	0x080188d8
 8012acc:	3ff00000 	.word	0x3ff00000
 8012ad0:	40240000 	.word	0x40240000
 8012ad4:	401c0000 	.word	0x401c0000
 8012ad8:	40140000 	.word	0x40140000
 8012adc:	3fe00000 	.word	0x3fe00000
 8012ae0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012ae4:	9d00      	ldr	r5, [sp, #0]
 8012ae6:	4642      	mov	r2, r8
 8012ae8:	464b      	mov	r3, r9
 8012aea:	4630      	mov	r0, r6
 8012aec:	4639      	mov	r1, r7
 8012aee:	f7ed fed5 	bl	800089c <__aeabi_ddiv>
 8012af2:	f7ee f859 	bl	8000ba8 <__aeabi_d2iz>
 8012af6:	9001      	str	r0, [sp, #4]
 8012af8:	f7ed fd3c 	bl	8000574 <__aeabi_i2d>
 8012afc:	4642      	mov	r2, r8
 8012afe:	464b      	mov	r3, r9
 8012b00:	f7ed fda2 	bl	8000648 <__aeabi_dmul>
 8012b04:	4602      	mov	r2, r0
 8012b06:	460b      	mov	r3, r1
 8012b08:	4630      	mov	r0, r6
 8012b0a:	4639      	mov	r1, r7
 8012b0c:	f7ed fbe4 	bl	80002d8 <__aeabi_dsub>
 8012b10:	9e01      	ldr	r6, [sp, #4]
 8012b12:	9f04      	ldr	r7, [sp, #16]
 8012b14:	3630      	adds	r6, #48	; 0x30
 8012b16:	f805 6b01 	strb.w	r6, [r5], #1
 8012b1a:	9e00      	ldr	r6, [sp, #0]
 8012b1c:	1bae      	subs	r6, r5, r6
 8012b1e:	42b7      	cmp	r7, r6
 8012b20:	4602      	mov	r2, r0
 8012b22:	460b      	mov	r3, r1
 8012b24:	d134      	bne.n	8012b90 <_dtoa_r+0x708>
 8012b26:	f7ed fbd9 	bl	80002dc <__adddf3>
 8012b2a:	4642      	mov	r2, r8
 8012b2c:	464b      	mov	r3, r9
 8012b2e:	4606      	mov	r6, r0
 8012b30:	460f      	mov	r7, r1
 8012b32:	f7ee f819 	bl	8000b68 <__aeabi_dcmpgt>
 8012b36:	b9c8      	cbnz	r0, 8012b6c <_dtoa_r+0x6e4>
 8012b38:	4642      	mov	r2, r8
 8012b3a:	464b      	mov	r3, r9
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	4639      	mov	r1, r7
 8012b40:	f7ed ffea 	bl	8000b18 <__aeabi_dcmpeq>
 8012b44:	b110      	cbz	r0, 8012b4c <_dtoa_r+0x6c4>
 8012b46:	9b01      	ldr	r3, [sp, #4]
 8012b48:	07db      	lsls	r3, r3, #31
 8012b4a:	d40f      	bmi.n	8012b6c <_dtoa_r+0x6e4>
 8012b4c:	4651      	mov	r1, sl
 8012b4e:	4620      	mov	r0, r4
 8012b50:	f000 fbcc 	bl	80132ec <_Bfree>
 8012b54:	2300      	movs	r3, #0
 8012b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b58:	702b      	strb	r3, [r5, #0]
 8012b5a:	f10b 0301 	add.w	r3, fp, #1
 8012b5e:	6013      	str	r3, [r2, #0]
 8012b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f43f ace2 	beq.w	801252c <_dtoa_r+0xa4>
 8012b68:	601d      	str	r5, [r3, #0]
 8012b6a:	e4df      	b.n	801252c <_dtoa_r+0xa4>
 8012b6c:	465f      	mov	r7, fp
 8012b6e:	462b      	mov	r3, r5
 8012b70:	461d      	mov	r5, r3
 8012b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b76:	2a39      	cmp	r2, #57	; 0x39
 8012b78:	d106      	bne.n	8012b88 <_dtoa_r+0x700>
 8012b7a:	9a00      	ldr	r2, [sp, #0]
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d1f7      	bne.n	8012b70 <_dtoa_r+0x6e8>
 8012b80:	9900      	ldr	r1, [sp, #0]
 8012b82:	2230      	movs	r2, #48	; 0x30
 8012b84:	3701      	adds	r7, #1
 8012b86:	700a      	strb	r2, [r1, #0]
 8012b88:	781a      	ldrb	r2, [r3, #0]
 8012b8a:	3201      	adds	r2, #1
 8012b8c:	701a      	strb	r2, [r3, #0]
 8012b8e:	e790      	b.n	8012ab2 <_dtoa_r+0x62a>
 8012b90:	4ba3      	ldr	r3, [pc, #652]	; (8012e20 <_dtoa_r+0x998>)
 8012b92:	2200      	movs	r2, #0
 8012b94:	f7ed fd58 	bl	8000648 <__aeabi_dmul>
 8012b98:	2200      	movs	r2, #0
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	4606      	mov	r6, r0
 8012b9e:	460f      	mov	r7, r1
 8012ba0:	f7ed ffba 	bl	8000b18 <__aeabi_dcmpeq>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d09e      	beq.n	8012ae6 <_dtoa_r+0x65e>
 8012ba8:	e7d0      	b.n	8012b4c <_dtoa_r+0x6c4>
 8012baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bac:	2a00      	cmp	r2, #0
 8012bae:	f000 80ca 	beq.w	8012d46 <_dtoa_r+0x8be>
 8012bb2:	9a07      	ldr	r2, [sp, #28]
 8012bb4:	2a01      	cmp	r2, #1
 8012bb6:	f300 80ad 	bgt.w	8012d14 <_dtoa_r+0x88c>
 8012bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012bbc:	2a00      	cmp	r2, #0
 8012bbe:	f000 80a5 	beq.w	8012d0c <_dtoa_r+0x884>
 8012bc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012bc6:	9e08      	ldr	r6, [sp, #32]
 8012bc8:	9d05      	ldr	r5, [sp, #20]
 8012bca:	9a05      	ldr	r2, [sp, #20]
 8012bcc:	441a      	add	r2, r3
 8012bce:	9205      	str	r2, [sp, #20]
 8012bd0:	9a06      	ldr	r2, [sp, #24]
 8012bd2:	2101      	movs	r1, #1
 8012bd4:	441a      	add	r2, r3
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	9206      	str	r2, [sp, #24]
 8012bda:	f000 fc87 	bl	80134ec <__i2b>
 8012bde:	4607      	mov	r7, r0
 8012be0:	b165      	cbz	r5, 8012bfc <_dtoa_r+0x774>
 8012be2:	9b06      	ldr	r3, [sp, #24]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	dd09      	ble.n	8012bfc <_dtoa_r+0x774>
 8012be8:	42ab      	cmp	r3, r5
 8012bea:	9a05      	ldr	r2, [sp, #20]
 8012bec:	bfa8      	it	ge
 8012bee:	462b      	movge	r3, r5
 8012bf0:	1ad2      	subs	r2, r2, r3
 8012bf2:	9205      	str	r2, [sp, #20]
 8012bf4:	9a06      	ldr	r2, [sp, #24]
 8012bf6:	1aed      	subs	r5, r5, r3
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	9306      	str	r3, [sp, #24]
 8012bfc:	9b08      	ldr	r3, [sp, #32]
 8012bfe:	b1f3      	cbz	r3, 8012c3e <_dtoa_r+0x7b6>
 8012c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f000 80a3 	beq.w	8012d4e <_dtoa_r+0x8c6>
 8012c08:	2e00      	cmp	r6, #0
 8012c0a:	dd10      	ble.n	8012c2e <_dtoa_r+0x7a6>
 8012c0c:	4639      	mov	r1, r7
 8012c0e:	4632      	mov	r2, r6
 8012c10:	4620      	mov	r0, r4
 8012c12:	f000 fd2b 	bl	801366c <__pow5mult>
 8012c16:	4652      	mov	r2, sl
 8012c18:	4601      	mov	r1, r0
 8012c1a:	4607      	mov	r7, r0
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f000 fc7b 	bl	8013518 <__multiply>
 8012c22:	4651      	mov	r1, sl
 8012c24:	4680      	mov	r8, r0
 8012c26:	4620      	mov	r0, r4
 8012c28:	f000 fb60 	bl	80132ec <_Bfree>
 8012c2c:	46c2      	mov	sl, r8
 8012c2e:	9b08      	ldr	r3, [sp, #32]
 8012c30:	1b9a      	subs	r2, r3, r6
 8012c32:	d004      	beq.n	8012c3e <_dtoa_r+0x7b6>
 8012c34:	4651      	mov	r1, sl
 8012c36:	4620      	mov	r0, r4
 8012c38:	f000 fd18 	bl	801366c <__pow5mult>
 8012c3c:	4682      	mov	sl, r0
 8012c3e:	2101      	movs	r1, #1
 8012c40:	4620      	mov	r0, r4
 8012c42:	f000 fc53 	bl	80134ec <__i2b>
 8012c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	4606      	mov	r6, r0
 8012c4c:	f340 8081 	ble.w	8012d52 <_dtoa_r+0x8ca>
 8012c50:	461a      	mov	r2, r3
 8012c52:	4601      	mov	r1, r0
 8012c54:	4620      	mov	r0, r4
 8012c56:	f000 fd09 	bl	801366c <__pow5mult>
 8012c5a:	9b07      	ldr	r3, [sp, #28]
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	4606      	mov	r6, r0
 8012c60:	dd7a      	ble.n	8012d58 <_dtoa_r+0x8d0>
 8012c62:	f04f 0800 	mov.w	r8, #0
 8012c66:	6933      	ldr	r3, [r6, #16]
 8012c68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012c6c:	6918      	ldr	r0, [r3, #16]
 8012c6e:	f000 fbef 	bl	8013450 <__hi0bits>
 8012c72:	f1c0 0020 	rsb	r0, r0, #32
 8012c76:	9b06      	ldr	r3, [sp, #24]
 8012c78:	4418      	add	r0, r3
 8012c7a:	f010 001f 	ands.w	r0, r0, #31
 8012c7e:	f000 8094 	beq.w	8012daa <_dtoa_r+0x922>
 8012c82:	f1c0 0320 	rsb	r3, r0, #32
 8012c86:	2b04      	cmp	r3, #4
 8012c88:	f340 8085 	ble.w	8012d96 <_dtoa_r+0x90e>
 8012c8c:	9b05      	ldr	r3, [sp, #20]
 8012c8e:	f1c0 001c 	rsb	r0, r0, #28
 8012c92:	4403      	add	r3, r0
 8012c94:	9305      	str	r3, [sp, #20]
 8012c96:	9b06      	ldr	r3, [sp, #24]
 8012c98:	4403      	add	r3, r0
 8012c9a:	4405      	add	r5, r0
 8012c9c:	9306      	str	r3, [sp, #24]
 8012c9e:	9b05      	ldr	r3, [sp, #20]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	dd05      	ble.n	8012cb0 <_dtoa_r+0x828>
 8012ca4:	4651      	mov	r1, sl
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	4620      	mov	r0, r4
 8012caa:	f000 fd39 	bl	8013720 <__lshift>
 8012cae:	4682      	mov	sl, r0
 8012cb0:	9b06      	ldr	r3, [sp, #24]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	dd05      	ble.n	8012cc2 <_dtoa_r+0x83a>
 8012cb6:	4631      	mov	r1, r6
 8012cb8:	461a      	mov	r2, r3
 8012cba:	4620      	mov	r0, r4
 8012cbc:	f000 fd30 	bl	8013720 <__lshift>
 8012cc0:	4606      	mov	r6, r0
 8012cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d072      	beq.n	8012dae <_dtoa_r+0x926>
 8012cc8:	4631      	mov	r1, r6
 8012cca:	4650      	mov	r0, sl
 8012ccc:	f000 fd94 	bl	80137f8 <__mcmp>
 8012cd0:	2800      	cmp	r0, #0
 8012cd2:	da6c      	bge.n	8012dae <_dtoa_r+0x926>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	4651      	mov	r1, sl
 8012cd8:	220a      	movs	r2, #10
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f000 fb28 	bl	8013330 <__multadd>
 8012ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ce2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012ce6:	4682      	mov	sl, r0
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f000 81b0 	beq.w	801304e <_dtoa_r+0xbc6>
 8012cee:	2300      	movs	r3, #0
 8012cf0:	4639      	mov	r1, r7
 8012cf2:	220a      	movs	r2, #10
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	f000 fb1b 	bl	8013330 <__multadd>
 8012cfa:	9b01      	ldr	r3, [sp, #4]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	4607      	mov	r7, r0
 8012d00:	f300 8096 	bgt.w	8012e30 <_dtoa_r+0x9a8>
 8012d04:	9b07      	ldr	r3, [sp, #28]
 8012d06:	2b02      	cmp	r3, #2
 8012d08:	dc59      	bgt.n	8012dbe <_dtoa_r+0x936>
 8012d0a:	e091      	b.n	8012e30 <_dtoa_r+0x9a8>
 8012d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012d12:	e758      	b.n	8012bc6 <_dtoa_r+0x73e>
 8012d14:	9b04      	ldr	r3, [sp, #16]
 8012d16:	1e5e      	subs	r6, r3, #1
 8012d18:	9b08      	ldr	r3, [sp, #32]
 8012d1a:	42b3      	cmp	r3, r6
 8012d1c:	bfbf      	itttt	lt
 8012d1e:	9b08      	ldrlt	r3, [sp, #32]
 8012d20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012d22:	9608      	strlt	r6, [sp, #32]
 8012d24:	1af3      	sublt	r3, r6, r3
 8012d26:	bfb4      	ite	lt
 8012d28:	18d2      	addlt	r2, r2, r3
 8012d2a:	1b9e      	subge	r6, r3, r6
 8012d2c:	9b04      	ldr	r3, [sp, #16]
 8012d2e:	bfbc      	itt	lt
 8012d30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012d32:	2600      	movlt	r6, #0
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	bfb7      	itett	lt
 8012d38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012d3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012d40:	1a9d      	sublt	r5, r3, r2
 8012d42:	2300      	movlt	r3, #0
 8012d44:	e741      	b.n	8012bca <_dtoa_r+0x742>
 8012d46:	9e08      	ldr	r6, [sp, #32]
 8012d48:	9d05      	ldr	r5, [sp, #20]
 8012d4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012d4c:	e748      	b.n	8012be0 <_dtoa_r+0x758>
 8012d4e:	9a08      	ldr	r2, [sp, #32]
 8012d50:	e770      	b.n	8012c34 <_dtoa_r+0x7ac>
 8012d52:	9b07      	ldr	r3, [sp, #28]
 8012d54:	2b01      	cmp	r3, #1
 8012d56:	dc19      	bgt.n	8012d8c <_dtoa_r+0x904>
 8012d58:	9b02      	ldr	r3, [sp, #8]
 8012d5a:	b9bb      	cbnz	r3, 8012d8c <_dtoa_r+0x904>
 8012d5c:	9b03      	ldr	r3, [sp, #12]
 8012d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d62:	b99b      	cbnz	r3, 8012d8c <_dtoa_r+0x904>
 8012d64:	9b03      	ldr	r3, [sp, #12]
 8012d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d6a:	0d1b      	lsrs	r3, r3, #20
 8012d6c:	051b      	lsls	r3, r3, #20
 8012d6e:	b183      	cbz	r3, 8012d92 <_dtoa_r+0x90a>
 8012d70:	9b05      	ldr	r3, [sp, #20]
 8012d72:	3301      	adds	r3, #1
 8012d74:	9305      	str	r3, [sp, #20]
 8012d76:	9b06      	ldr	r3, [sp, #24]
 8012d78:	3301      	adds	r3, #1
 8012d7a:	9306      	str	r3, [sp, #24]
 8012d7c:	f04f 0801 	mov.w	r8, #1
 8012d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	f47f af6f 	bne.w	8012c66 <_dtoa_r+0x7de>
 8012d88:	2001      	movs	r0, #1
 8012d8a:	e774      	b.n	8012c76 <_dtoa_r+0x7ee>
 8012d8c:	f04f 0800 	mov.w	r8, #0
 8012d90:	e7f6      	b.n	8012d80 <_dtoa_r+0x8f8>
 8012d92:	4698      	mov	r8, r3
 8012d94:	e7f4      	b.n	8012d80 <_dtoa_r+0x8f8>
 8012d96:	d082      	beq.n	8012c9e <_dtoa_r+0x816>
 8012d98:	9a05      	ldr	r2, [sp, #20]
 8012d9a:	331c      	adds	r3, #28
 8012d9c:	441a      	add	r2, r3
 8012d9e:	9205      	str	r2, [sp, #20]
 8012da0:	9a06      	ldr	r2, [sp, #24]
 8012da2:	441a      	add	r2, r3
 8012da4:	441d      	add	r5, r3
 8012da6:	9206      	str	r2, [sp, #24]
 8012da8:	e779      	b.n	8012c9e <_dtoa_r+0x816>
 8012daa:	4603      	mov	r3, r0
 8012dac:	e7f4      	b.n	8012d98 <_dtoa_r+0x910>
 8012dae:	9b04      	ldr	r3, [sp, #16]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	dc37      	bgt.n	8012e24 <_dtoa_r+0x99c>
 8012db4:	9b07      	ldr	r3, [sp, #28]
 8012db6:	2b02      	cmp	r3, #2
 8012db8:	dd34      	ble.n	8012e24 <_dtoa_r+0x99c>
 8012dba:	9b04      	ldr	r3, [sp, #16]
 8012dbc:	9301      	str	r3, [sp, #4]
 8012dbe:	9b01      	ldr	r3, [sp, #4]
 8012dc0:	b963      	cbnz	r3, 8012ddc <_dtoa_r+0x954>
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	2205      	movs	r2, #5
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f000 fab2 	bl	8013330 <__multadd>
 8012dcc:	4601      	mov	r1, r0
 8012dce:	4606      	mov	r6, r0
 8012dd0:	4650      	mov	r0, sl
 8012dd2:	f000 fd11 	bl	80137f8 <__mcmp>
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	f73f adbb 	bgt.w	8012952 <_dtoa_r+0x4ca>
 8012ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dde:	9d00      	ldr	r5, [sp, #0]
 8012de0:	ea6f 0b03 	mvn.w	fp, r3
 8012de4:	f04f 0800 	mov.w	r8, #0
 8012de8:	4631      	mov	r1, r6
 8012dea:	4620      	mov	r0, r4
 8012dec:	f000 fa7e 	bl	80132ec <_Bfree>
 8012df0:	2f00      	cmp	r7, #0
 8012df2:	f43f aeab 	beq.w	8012b4c <_dtoa_r+0x6c4>
 8012df6:	f1b8 0f00 	cmp.w	r8, #0
 8012dfa:	d005      	beq.n	8012e08 <_dtoa_r+0x980>
 8012dfc:	45b8      	cmp	r8, r7
 8012dfe:	d003      	beq.n	8012e08 <_dtoa_r+0x980>
 8012e00:	4641      	mov	r1, r8
 8012e02:	4620      	mov	r0, r4
 8012e04:	f000 fa72 	bl	80132ec <_Bfree>
 8012e08:	4639      	mov	r1, r7
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f000 fa6e 	bl	80132ec <_Bfree>
 8012e10:	e69c      	b.n	8012b4c <_dtoa_r+0x6c4>
 8012e12:	2600      	movs	r6, #0
 8012e14:	4637      	mov	r7, r6
 8012e16:	e7e1      	b.n	8012ddc <_dtoa_r+0x954>
 8012e18:	46bb      	mov	fp, r7
 8012e1a:	4637      	mov	r7, r6
 8012e1c:	e599      	b.n	8012952 <_dtoa_r+0x4ca>
 8012e1e:	bf00      	nop
 8012e20:	40240000 	.word	0x40240000
 8012e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	f000 80c8 	beq.w	8012fbc <_dtoa_r+0xb34>
 8012e2c:	9b04      	ldr	r3, [sp, #16]
 8012e2e:	9301      	str	r3, [sp, #4]
 8012e30:	2d00      	cmp	r5, #0
 8012e32:	dd05      	ble.n	8012e40 <_dtoa_r+0x9b8>
 8012e34:	4639      	mov	r1, r7
 8012e36:	462a      	mov	r2, r5
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f000 fc71 	bl	8013720 <__lshift>
 8012e3e:	4607      	mov	r7, r0
 8012e40:	f1b8 0f00 	cmp.w	r8, #0
 8012e44:	d05b      	beq.n	8012efe <_dtoa_r+0xa76>
 8012e46:	6879      	ldr	r1, [r7, #4]
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 fa0f 	bl	801326c <_Balloc>
 8012e4e:	4605      	mov	r5, r0
 8012e50:	b928      	cbnz	r0, 8012e5e <_dtoa_r+0x9d6>
 8012e52:	4b83      	ldr	r3, [pc, #524]	; (8013060 <_dtoa_r+0xbd8>)
 8012e54:	4602      	mov	r2, r0
 8012e56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012e5a:	f7ff bb2e 	b.w	80124ba <_dtoa_r+0x32>
 8012e5e:	693a      	ldr	r2, [r7, #16]
 8012e60:	3202      	adds	r2, #2
 8012e62:	0092      	lsls	r2, r2, #2
 8012e64:	f107 010c 	add.w	r1, r7, #12
 8012e68:	300c      	adds	r0, #12
 8012e6a:	f7ff fa70 	bl	801234e <memcpy>
 8012e6e:	2201      	movs	r2, #1
 8012e70:	4629      	mov	r1, r5
 8012e72:	4620      	mov	r0, r4
 8012e74:	f000 fc54 	bl	8013720 <__lshift>
 8012e78:	9b00      	ldr	r3, [sp, #0]
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	9304      	str	r3, [sp, #16]
 8012e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e82:	4413      	add	r3, r2
 8012e84:	9308      	str	r3, [sp, #32]
 8012e86:	9b02      	ldr	r3, [sp, #8]
 8012e88:	f003 0301 	and.w	r3, r3, #1
 8012e8c:	46b8      	mov	r8, r7
 8012e8e:	9306      	str	r3, [sp, #24]
 8012e90:	4607      	mov	r7, r0
 8012e92:	9b04      	ldr	r3, [sp, #16]
 8012e94:	4631      	mov	r1, r6
 8012e96:	3b01      	subs	r3, #1
 8012e98:	4650      	mov	r0, sl
 8012e9a:	9301      	str	r3, [sp, #4]
 8012e9c:	f7ff fa6c 	bl	8012378 <quorem>
 8012ea0:	4641      	mov	r1, r8
 8012ea2:	9002      	str	r0, [sp, #8]
 8012ea4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012ea8:	4650      	mov	r0, sl
 8012eaa:	f000 fca5 	bl	80137f8 <__mcmp>
 8012eae:	463a      	mov	r2, r7
 8012eb0:	9005      	str	r0, [sp, #20]
 8012eb2:	4631      	mov	r1, r6
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f000 fcbb 	bl	8013830 <__mdiff>
 8012eba:	68c2      	ldr	r2, [r0, #12]
 8012ebc:	4605      	mov	r5, r0
 8012ebe:	bb02      	cbnz	r2, 8012f02 <_dtoa_r+0xa7a>
 8012ec0:	4601      	mov	r1, r0
 8012ec2:	4650      	mov	r0, sl
 8012ec4:	f000 fc98 	bl	80137f8 <__mcmp>
 8012ec8:	4602      	mov	r2, r0
 8012eca:	4629      	mov	r1, r5
 8012ecc:	4620      	mov	r0, r4
 8012ece:	9209      	str	r2, [sp, #36]	; 0x24
 8012ed0:	f000 fa0c 	bl	80132ec <_Bfree>
 8012ed4:	9b07      	ldr	r3, [sp, #28]
 8012ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ed8:	9d04      	ldr	r5, [sp, #16]
 8012eda:	ea43 0102 	orr.w	r1, r3, r2
 8012ede:	9b06      	ldr	r3, [sp, #24]
 8012ee0:	4319      	orrs	r1, r3
 8012ee2:	d110      	bne.n	8012f06 <_dtoa_r+0xa7e>
 8012ee4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012ee8:	d029      	beq.n	8012f3e <_dtoa_r+0xab6>
 8012eea:	9b05      	ldr	r3, [sp, #20]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	dd02      	ble.n	8012ef6 <_dtoa_r+0xa6e>
 8012ef0:	9b02      	ldr	r3, [sp, #8]
 8012ef2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012ef6:	9b01      	ldr	r3, [sp, #4]
 8012ef8:	f883 9000 	strb.w	r9, [r3]
 8012efc:	e774      	b.n	8012de8 <_dtoa_r+0x960>
 8012efe:	4638      	mov	r0, r7
 8012f00:	e7ba      	b.n	8012e78 <_dtoa_r+0x9f0>
 8012f02:	2201      	movs	r2, #1
 8012f04:	e7e1      	b.n	8012eca <_dtoa_r+0xa42>
 8012f06:	9b05      	ldr	r3, [sp, #20]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	db04      	blt.n	8012f16 <_dtoa_r+0xa8e>
 8012f0c:	9907      	ldr	r1, [sp, #28]
 8012f0e:	430b      	orrs	r3, r1
 8012f10:	9906      	ldr	r1, [sp, #24]
 8012f12:	430b      	orrs	r3, r1
 8012f14:	d120      	bne.n	8012f58 <_dtoa_r+0xad0>
 8012f16:	2a00      	cmp	r2, #0
 8012f18:	dded      	ble.n	8012ef6 <_dtoa_r+0xa6e>
 8012f1a:	4651      	mov	r1, sl
 8012f1c:	2201      	movs	r2, #1
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f000 fbfe 	bl	8013720 <__lshift>
 8012f24:	4631      	mov	r1, r6
 8012f26:	4682      	mov	sl, r0
 8012f28:	f000 fc66 	bl	80137f8 <__mcmp>
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	dc03      	bgt.n	8012f38 <_dtoa_r+0xab0>
 8012f30:	d1e1      	bne.n	8012ef6 <_dtoa_r+0xa6e>
 8012f32:	f019 0f01 	tst.w	r9, #1
 8012f36:	d0de      	beq.n	8012ef6 <_dtoa_r+0xa6e>
 8012f38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012f3c:	d1d8      	bne.n	8012ef0 <_dtoa_r+0xa68>
 8012f3e:	9a01      	ldr	r2, [sp, #4]
 8012f40:	2339      	movs	r3, #57	; 0x39
 8012f42:	7013      	strb	r3, [r2, #0]
 8012f44:	462b      	mov	r3, r5
 8012f46:	461d      	mov	r5, r3
 8012f48:	3b01      	subs	r3, #1
 8012f4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012f4e:	2a39      	cmp	r2, #57	; 0x39
 8012f50:	d06c      	beq.n	801302c <_dtoa_r+0xba4>
 8012f52:	3201      	adds	r2, #1
 8012f54:	701a      	strb	r2, [r3, #0]
 8012f56:	e747      	b.n	8012de8 <_dtoa_r+0x960>
 8012f58:	2a00      	cmp	r2, #0
 8012f5a:	dd07      	ble.n	8012f6c <_dtoa_r+0xae4>
 8012f5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012f60:	d0ed      	beq.n	8012f3e <_dtoa_r+0xab6>
 8012f62:	9a01      	ldr	r2, [sp, #4]
 8012f64:	f109 0301 	add.w	r3, r9, #1
 8012f68:	7013      	strb	r3, [r2, #0]
 8012f6a:	e73d      	b.n	8012de8 <_dtoa_r+0x960>
 8012f6c:	9b04      	ldr	r3, [sp, #16]
 8012f6e:	9a08      	ldr	r2, [sp, #32]
 8012f70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d043      	beq.n	8013000 <_dtoa_r+0xb78>
 8012f78:	4651      	mov	r1, sl
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	220a      	movs	r2, #10
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f000 f9d6 	bl	8013330 <__multadd>
 8012f84:	45b8      	cmp	r8, r7
 8012f86:	4682      	mov	sl, r0
 8012f88:	f04f 0300 	mov.w	r3, #0
 8012f8c:	f04f 020a 	mov.w	r2, #10
 8012f90:	4641      	mov	r1, r8
 8012f92:	4620      	mov	r0, r4
 8012f94:	d107      	bne.n	8012fa6 <_dtoa_r+0xb1e>
 8012f96:	f000 f9cb 	bl	8013330 <__multadd>
 8012f9a:	4680      	mov	r8, r0
 8012f9c:	4607      	mov	r7, r0
 8012f9e:	9b04      	ldr	r3, [sp, #16]
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	9304      	str	r3, [sp, #16]
 8012fa4:	e775      	b.n	8012e92 <_dtoa_r+0xa0a>
 8012fa6:	f000 f9c3 	bl	8013330 <__multadd>
 8012faa:	4639      	mov	r1, r7
 8012fac:	4680      	mov	r8, r0
 8012fae:	2300      	movs	r3, #0
 8012fb0:	220a      	movs	r2, #10
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f000 f9bc 	bl	8013330 <__multadd>
 8012fb8:	4607      	mov	r7, r0
 8012fba:	e7f0      	b.n	8012f9e <_dtoa_r+0xb16>
 8012fbc:	9b04      	ldr	r3, [sp, #16]
 8012fbe:	9301      	str	r3, [sp, #4]
 8012fc0:	9d00      	ldr	r5, [sp, #0]
 8012fc2:	4631      	mov	r1, r6
 8012fc4:	4650      	mov	r0, sl
 8012fc6:	f7ff f9d7 	bl	8012378 <quorem>
 8012fca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012fce:	9b00      	ldr	r3, [sp, #0]
 8012fd0:	f805 9b01 	strb.w	r9, [r5], #1
 8012fd4:	1aea      	subs	r2, r5, r3
 8012fd6:	9b01      	ldr	r3, [sp, #4]
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	dd07      	ble.n	8012fec <_dtoa_r+0xb64>
 8012fdc:	4651      	mov	r1, sl
 8012fde:	2300      	movs	r3, #0
 8012fe0:	220a      	movs	r2, #10
 8012fe2:	4620      	mov	r0, r4
 8012fe4:	f000 f9a4 	bl	8013330 <__multadd>
 8012fe8:	4682      	mov	sl, r0
 8012fea:	e7ea      	b.n	8012fc2 <_dtoa_r+0xb3a>
 8012fec:	9b01      	ldr	r3, [sp, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	bfc8      	it	gt
 8012ff2:	461d      	movgt	r5, r3
 8012ff4:	9b00      	ldr	r3, [sp, #0]
 8012ff6:	bfd8      	it	le
 8012ff8:	2501      	movle	r5, #1
 8012ffa:	441d      	add	r5, r3
 8012ffc:	f04f 0800 	mov.w	r8, #0
 8013000:	4651      	mov	r1, sl
 8013002:	2201      	movs	r2, #1
 8013004:	4620      	mov	r0, r4
 8013006:	f000 fb8b 	bl	8013720 <__lshift>
 801300a:	4631      	mov	r1, r6
 801300c:	4682      	mov	sl, r0
 801300e:	f000 fbf3 	bl	80137f8 <__mcmp>
 8013012:	2800      	cmp	r0, #0
 8013014:	dc96      	bgt.n	8012f44 <_dtoa_r+0xabc>
 8013016:	d102      	bne.n	801301e <_dtoa_r+0xb96>
 8013018:	f019 0f01 	tst.w	r9, #1
 801301c:	d192      	bne.n	8012f44 <_dtoa_r+0xabc>
 801301e:	462b      	mov	r3, r5
 8013020:	461d      	mov	r5, r3
 8013022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013026:	2a30      	cmp	r2, #48	; 0x30
 8013028:	d0fa      	beq.n	8013020 <_dtoa_r+0xb98>
 801302a:	e6dd      	b.n	8012de8 <_dtoa_r+0x960>
 801302c:	9a00      	ldr	r2, [sp, #0]
 801302e:	429a      	cmp	r2, r3
 8013030:	d189      	bne.n	8012f46 <_dtoa_r+0xabe>
 8013032:	f10b 0b01 	add.w	fp, fp, #1
 8013036:	2331      	movs	r3, #49	; 0x31
 8013038:	e796      	b.n	8012f68 <_dtoa_r+0xae0>
 801303a:	4b0a      	ldr	r3, [pc, #40]	; (8013064 <_dtoa_r+0xbdc>)
 801303c:	f7ff ba99 	b.w	8012572 <_dtoa_r+0xea>
 8013040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013042:	2b00      	cmp	r3, #0
 8013044:	f47f aa6d 	bne.w	8012522 <_dtoa_r+0x9a>
 8013048:	4b07      	ldr	r3, [pc, #28]	; (8013068 <_dtoa_r+0xbe0>)
 801304a:	f7ff ba92 	b.w	8012572 <_dtoa_r+0xea>
 801304e:	9b01      	ldr	r3, [sp, #4]
 8013050:	2b00      	cmp	r3, #0
 8013052:	dcb5      	bgt.n	8012fc0 <_dtoa_r+0xb38>
 8013054:	9b07      	ldr	r3, [sp, #28]
 8013056:	2b02      	cmp	r3, #2
 8013058:	f73f aeb1 	bgt.w	8012dbe <_dtoa_r+0x936>
 801305c:	e7b0      	b.n	8012fc0 <_dtoa_r+0xb38>
 801305e:	bf00      	nop
 8013060:	0801886d 	.word	0x0801886d
 8013064:	080187c8 	.word	0x080187c8
 8013068:	080187f1 	.word	0x080187f1

0801306c <_free_r>:
 801306c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801306e:	2900      	cmp	r1, #0
 8013070:	d044      	beq.n	80130fc <_free_r+0x90>
 8013072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013076:	9001      	str	r0, [sp, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	f1a1 0404 	sub.w	r4, r1, #4
 801307e:	bfb8      	it	lt
 8013080:	18e4      	addlt	r4, r4, r3
 8013082:	f000 f8e7 	bl	8013254 <__malloc_lock>
 8013086:	4a1e      	ldr	r2, [pc, #120]	; (8013100 <_free_r+0x94>)
 8013088:	9801      	ldr	r0, [sp, #4]
 801308a:	6813      	ldr	r3, [r2, #0]
 801308c:	b933      	cbnz	r3, 801309c <_free_r+0x30>
 801308e:	6063      	str	r3, [r4, #4]
 8013090:	6014      	str	r4, [r2, #0]
 8013092:	b003      	add	sp, #12
 8013094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013098:	f000 b8e2 	b.w	8013260 <__malloc_unlock>
 801309c:	42a3      	cmp	r3, r4
 801309e:	d908      	bls.n	80130b2 <_free_r+0x46>
 80130a0:	6825      	ldr	r5, [r4, #0]
 80130a2:	1961      	adds	r1, r4, r5
 80130a4:	428b      	cmp	r3, r1
 80130a6:	bf01      	itttt	eq
 80130a8:	6819      	ldreq	r1, [r3, #0]
 80130aa:	685b      	ldreq	r3, [r3, #4]
 80130ac:	1949      	addeq	r1, r1, r5
 80130ae:	6021      	streq	r1, [r4, #0]
 80130b0:	e7ed      	b.n	801308e <_free_r+0x22>
 80130b2:	461a      	mov	r2, r3
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	b10b      	cbz	r3, 80130bc <_free_r+0x50>
 80130b8:	42a3      	cmp	r3, r4
 80130ba:	d9fa      	bls.n	80130b2 <_free_r+0x46>
 80130bc:	6811      	ldr	r1, [r2, #0]
 80130be:	1855      	adds	r5, r2, r1
 80130c0:	42a5      	cmp	r5, r4
 80130c2:	d10b      	bne.n	80130dc <_free_r+0x70>
 80130c4:	6824      	ldr	r4, [r4, #0]
 80130c6:	4421      	add	r1, r4
 80130c8:	1854      	adds	r4, r2, r1
 80130ca:	42a3      	cmp	r3, r4
 80130cc:	6011      	str	r1, [r2, #0]
 80130ce:	d1e0      	bne.n	8013092 <_free_r+0x26>
 80130d0:	681c      	ldr	r4, [r3, #0]
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	6053      	str	r3, [r2, #4]
 80130d6:	440c      	add	r4, r1
 80130d8:	6014      	str	r4, [r2, #0]
 80130da:	e7da      	b.n	8013092 <_free_r+0x26>
 80130dc:	d902      	bls.n	80130e4 <_free_r+0x78>
 80130de:	230c      	movs	r3, #12
 80130e0:	6003      	str	r3, [r0, #0]
 80130e2:	e7d6      	b.n	8013092 <_free_r+0x26>
 80130e4:	6825      	ldr	r5, [r4, #0]
 80130e6:	1961      	adds	r1, r4, r5
 80130e8:	428b      	cmp	r3, r1
 80130ea:	bf04      	itt	eq
 80130ec:	6819      	ldreq	r1, [r3, #0]
 80130ee:	685b      	ldreq	r3, [r3, #4]
 80130f0:	6063      	str	r3, [r4, #4]
 80130f2:	bf04      	itt	eq
 80130f4:	1949      	addeq	r1, r1, r5
 80130f6:	6021      	streq	r1, [r4, #0]
 80130f8:	6054      	str	r4, [r2, #4]
 80130fa:	e7ca      	b.n	8013092 <_free_r+0x26>
 80130fc:	b003      	add	sp, #12
 80130fe:	bd30      	pop	{r4, r5, pc}
 8013100:	200023d8 	.word	0x200023d8

08013104 <malloc>:
 8013104:	4b02      	ldr	r3, [pc, #8]	; (8013110 <malloc+0xc>)
 8013106:	4601      	mov	r1, r0
 8013108:	6818      	ldr	r0, [r3, #0]
 801310a:	f000 b823 	b.w	8013154 <_malloc_r>
 801310e:	bf00      	nop
 8013110:	20000274 	.word	0x20000274

08013114 <sbrk_aligned>:
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	4e0e      	ldr	r6, [pc, #56]	; (8013150 <sbrk_aligned+0x3c>)
 8013118:	460c      	mov	r4, r1
 801311a:	6831      	ldr	r1, [r6, #0]
 801311c:	4605      	mov	r5, r0
 801311e:	b911      	cbnz	r1, 8013126 <sbrk_aligned+0x12>
 8013120:	f001 fe1a 	bl	8014d58 <_sbrk_r>
 8013124:	6030      	str	r0, [r6, #0]
 8013126:	4621      	mov	r1, r4
 8013128:	4628      	mov	r0, r5
 801312a:	f001 fe15 	bl	8014d58 <_sbrk_r>
 801312e:	1c43      	adds	r3, r0, #1
 8013130:	d00a      	beq.n	8013148 <sbrk_aligned+0x34>
 8013132:	1cc4      	adds	r4, r0, #3
 8013134:	f024 0403 	bic.w	r4, r4, #3
 8013138:	42a0      	cmp	r0, r4
 801313a:	d007      	beq.n	801314c <sbrk_aligned+0x38>
 801313c:	1a21      	subs	r1, r4, r0
 801313e:	4628      	mov	r0, r5
 8013140:	f001 fe0a 	bl	8014d58 <_sbrk_r>
 8013144:	3001      	adds	r0, #1
 8013146:	d101      	bne.n	801314c <sbrk_aligned+0x38>
 8013148:	f04f 34ff 	mov.w	r4, #4294967295
 801314c:	4620      	mov	r0, r4
 801314e:	bd70      	pop	{r4, r5, r6, pc}
 8013150:	200023dc 	.word	0x200023dc

08013154 <_malloc_r>:
 8013154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013158:	1ccd      	adds	r5, r1, #3
 801315a:	f025 0503 	bic.w	r5, r5, #3
 801315e:	3508      	adds	r5, #8
 8013160:	2d0c      	cmp	r5, #12
 8013162:	bf38      	it	cc
 8013164:	250c      	movcc	r5, #12
 8013166:	2d00      	cmp	r5, #0
 8013168:	4607      	mov	r7, r0
 801316a:	db01      	blt.n	8013170 <_malloc_r+0x1c>
 801316c:	42a9      	cmp	r1, r5
 801316e:	d905      	bls.n	801317c <_malloc_r+0x28>
 8013170:	230c      	movs	r3, #12
 8013172:	603b      	str	r3, [r7, #0]
 8013174:	2600      	movs	r6, #0
 8013176:	4630      	mov	r0, r6
 8013178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801317c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013250 <_malloc_r+0xfc>
 8013180:	f000 f868 	bl	8013254 <__malloc_lock>
 8013184:	f8d8 3000 	ldr.w	r3, [r8]
 8013188:	461c      	mov	r4, r3
 801318a:	bb5c      	cbnz	r4, 80131e4 <_malloc_r+0x90>
 801318c:	4629      	mov	r1, r5
 801318e:	4638      	mov	r0, r7
 8013190:	f7ff ffc0 	bl	8013114 <sbrk_aligned>
 8013194:	1c43      	adds	r3, r0, #1
 8013196:	4604      	mov	r4, r0
 8013198:	d155      	bne.n	8013246 <_malloc_r+0xf2>
 801319a:	f8d8 4000 	ldr.w	r4, [r8]
 801319e:	4626      	mov	r6, r4
 80131a0:	2e00      	cmp	r6, #0
 80131a2:	d145      	bne.n	8013230 <_malloc_r+0xdc>
 80131a4:	2c00      	cmp	r4, #0
 80131a6:	d048      	beq.n	801323a <_malloc_r+0xe6>
 80131a8:	6823      	ldr	r3, [r4, #0]
 80131aa:	4631      	mov	r1, r6
 80131ac:	4638      	mov	r0, r7
 80131ae:	eb04 0903 	add.w	r9, r4, r3
 80131b2:	f001 fdd1 	bl	8014d58 <_sbrk_r>
 80131b6:	4581      	cmp	r9, r0
 80131b8:	d13f      	bne.n	801323a <_malloc_r+0xe6>
 80131ba:	6821      	ldr	r1, [r4, #0]
 80131bc:	1a6d      	subs	r5, r5, r1
 80131be:	4629      	mov	r1, r5
 80131c0:	4638      	mov	r0, r7
 80131c2:	f7ff ffa7 	bl	8013114 <sbrk_aligned>
 80131c6:	3001      	adds	r0, #1
 80131c8:	d037      	beq.n	801323a <_malloc_r+0xe6>
 80131ca:	6823      	ldr	r3, [r4, #0]
 80131cc:	442b      	add	r3, r5
 80131ce:	6023      	str	r3, [r4, #0]
 80131d0:	f8d8 3000 	ldr.w	r3, [r8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d038      	beq.n	801324a <_malloc_r+0xf6>
 80131d8:	685a      	ldr	r2, [r3, #4]
 80131da:	42a2      	cmp	r2, r4
 80131dc:	d12b      	bne.n	8013236 <_malloc_r+0xe2>
 80131de:	2200      	movs	r2, #0
 80131e0:	605a      	str	r2, [r3, #4]
 80131e2:	e00f      	b.n	8013204 <_malloc_r+0xb0>
 80131e4:	6822      	ldr	r2, [r4, #0]
 80131e6:	1b52      	subs	r2, r2, r5
 80131e8:	d41f      	bmi.n	801322a <_malloc_r+0xd6>
 80131ea:	2a0b      	cmp	r2, #11
 80131ec:	d917      	bls.n	801321e <_malloc_r+0xca>
 80131ee:	1961      	adds	r1, r4, r5
 80131f0:	42a3      	cmp	r3, r4
 80131f2:	6025      	str	r5, [r4, #0]
 80131f4:	bf18      	it	ne
 80131f6:	6059      	strne	r1, [r3, #4]
 80131f8:	6863      	ldr	r3, [r4, #4]
 80131fa:	bf08      	it	eq
 80131fc:	f8c8 1000 	streq.w	r1, [r8]
 8013200:	5162      	str	r2, [r4, r5]
 8013202:	604b      	str	r3, [r1, #4]
 8013204:	4638      	mov	r0, r7
 8013206:	f104 060b 	add.w	r6, r4, #11
 801320a:	f000 f829 	bl	8013260 <__malloc_unlock>
 801320e:	f026 0607 	bic.w	r6, r6, #7
 8013212:	1d23      	adds	r3, r4, #4
 8013214:	1af2      	subs	r2, r6, r3
 8013216:	d0ae      	beq.n	8013176 <_malloc_r+0x22>
 8013218:	1b9b      	subs	r3, r3, r6
 801321a:	50a3      	str	r3, [r4, r2]
 801321c:	e7ab      	b.n	8013176 <_malloc_r+0x22>
 801321e:	42a3      	cmp	r3, r4
 8013220:	6862      	ldr	r2, [r4, #4]
 8013222:	d1dd      	bne.n	80131e0 <_malloc_r+0x8c>
 8013224:	f8c8 2000 	str.w	r2, [r8]
 8013228:	e7ec      	b.n	8013204 <_malloc_r+0xb0>
 801322a:	4623      	mov	r3, r4
 801322c:	6864      	ldr	r4, [r4, #4]
 801322e:	e7ac      	b.n	801318a <_malloc_r+0x36>
 8013230:	4634      	mov	r4, r6
 8013232:	6876      	ldr	r6, [r6, #4]
 8013234:	e7b4      	b.n	80131a0 <_malloc_r+0x4c>
 8013236:	4613      	mov	r3, r2
 8013238:	e7cc      	b.n	80131d4 <_malloc_r+0x80>
 801323a:	230c      	movs	r3, #12
 801323c:	603b      	str	r3, [r7, #0]
 801323e:	4638      	mov	r0, r7
 8013240:	f000 f80e 	bl	8013260 <__malloc_unlock>
 8013244:	e797      	b.n	8013176 <_malloc_r+0x22>
 8013246:	6025      	str	r5, [r4, #0]
 8013248:	e7dc      	b.n	8013204 <_malloc_r+0xb0>
 801324a:	605b      	str	r3, [r3, #4]
 801324c:	deff      	udf	#255	; 0xff
 801324e:	bf00      	nop
 8013250:	200023d8 	.word	0x200023d8

08013254 <__malloc_lock>:
 8013254:	4801      	ldr	r0, [pc, #4]	; (801325c <__malloc_lock+0x8>)
 8013256:	f7ff b878 	b.w	801234a <__retarget_lock_acquire_recursive>
 801325a:	bf00      	nop
 801325c:	200023d4 	.word	0x200023d4

08013260 <__malloc_unlock>:
 8013260:	4801      	ldr	r0, [pc, #4]	; (8013268 <__malloc_unlock+0x8>)
 8013262:	f7ff b873 	b.w	801234c <__retarget_lock_release_recursive>
 8013266:	bf00      	nop
 8013268:	200023d4 	.word	0x200023d4

0801326c <_Balloc>:
 801326c:	b570      	push	{r4, r5, r6, lr}
 801326e:	69c6      	ldr	r6, [r0, #28]
 8013270:	4604      	mov	r4, r0
 8013272:	460d      	mov	r5, r1
 8013274:	b976      	cbnz	r6, 8013294 <_Balloc+0x28>
 8013276:	2010      	movs	r0, #16
 8013278:	f7ff ff44 	bl	8013104 <malloc>
 801327c:	4602      	mov	r2, r0
 801327e:	61e0      	str	r0, [r4, #28]
 8013280:	b920      	cbnz	r0, 801328c <_Balloc+0x20>
 8013282:	4b18      	ldr	r3, [pc, #96]	; (80132e4 <_Balloc+0x78>)
 8013284:	4818      	ldr	r0, [pc, #96]	; (80132e8 <_Balloc+0x7c>)
 8013286:	216b      	movs	r1, #107	; 0x6b
 8013288:	f001 fd7e 	bl	8014d88 <__assert_func>
 801328c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013290:	6006      	str	r6, [r0, #0]
 8013292:	60c6      	str	r6, [r0, #12]
 8013294:	69e6      	ldr	r6, [r4, #28]
 8013296:	68f3      	ldr	r3, [r6, #12]
 8013298:	b183      	cbz	r3, 80132bc <_Balloc+0x50>
 801329a:	69e3      	ldr	r3, [r4, #28]
 801329c:	68db      	ldr	r3, [r3, #12]
 801329e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132a2:	b9b8      	cbnz	r0, 80132d4 <_Balloc+0x68>
 80132a4:	2101      	movs	r1, #1
 80132a6:	fa01 f605 	lsl.w	r6, r1, r5
 80132aa:	1d72      	adds	r2, r6, #5
 80132ac:	0092      	lsls	r2, r2, #2
 80132ae:	4620      	mov	r0, r4
 80132b0:	f001 fd88 	bl	8014dc4 <_calloc_r>
 80132b4:	b160      	cbz	r0, 80132d0 <_Balloc+0x64>
 80132b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132ba:	e00e      	b.n	80132da <_Balloc+0x6e>
 80132bc:	2221      	movs	r2, #33	; 0x21
 80132be:	2104      	movs	r1, #4
 80132c0:	4620      	mov	r0, r4
 80132c2:	f001 fd7f 	bl	8014dc4 <_calloc_r>
 80132c6:	69e3      	ldr	r3, [r4, #28]
 80132c8:	60f0      	str	r0, [r6, #12]
 80132ca:	68db      	ldr	r3, [r3, #12]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d1e4      	bne.n	801329a <_Balloc+0x2e>
 80132d0:	2000      	movs	r0, #0
 80132d2:	bd70      	pop	{r4, r5, r6, pc}
 80132d4:	6802      	ldr	r2, [r0, #0]
 80132d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80132da:	2300      	movs	r3, #0
 80132dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80132e0:	e7f7      	b.n	80132d2 <_Balloc+0x66>
 80132e2:	bf00      	nop
 80132e4:	080187fe 	.word	0x080187fe
 80132e8:	0801887e 	.word	0x0801887e

080132ec <_Bfree>:
 80132ec:	b570      	push	{r4, r5, r6, lr}
 80132ee:	69c6      	ldr	r6, [r0, #28]
 80132f0:	4605      	mov	r5, r0
 80132f2:	460c      	mov	r4, r1
 80132f4:	b976      	cbnz	r6, 8013314 <_Bfree+0x28>
 80132f6:	2010      	movs	r0, #16
 80132f8:	f7ff ff04 	bl	8013104 <malloc>
 80132fc:	4602      	mov	r2, r0
 80132fe:	61e8      	str	r0, [r5, #28]
 8013300:	b920      	cbnz	r0, 801330c <_Bfree+0x20>
 8013302:	4b09      	ldr	r3, [pc, #36]	; (8013328 <_Bfree+0x3c>)
 8013304:	4809      	ldr	r0, [pc, #36]	; (801332c <_Bfree+0x40>)
 8013306:	218f      	movs	r1, #143	; 0x8f
 8013308:	f001 fd3e 	bl	8014d88 <__assert_func>
 801330c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013310:	6006      	str	r6, [r0, #0]
 8013312:	60c6      	str	r6, [r0, #12]
 8013314:	b13c      	cbz	r4, 8013326 <_Bfree+0x3a>
 8013316:	69eb      	ldr	r3, [r5, #28]
 8013318:	6862      	ldr	r2, [r4, #4]
 801331a:	68db      	ldr	r3, [r3, #12]
 801331c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013320:	6021      	str	r1, [r4, #0]
 8013322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013326:	bd70      	pop	{r4, r5, r6, pc}
 8013328:	080187fe 	.word	0x080187fe
 801332c:	0801887e 	.word	0x0801887e

08013330 <__multadd>:
 8013330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013334:	690d      	ldr	r5, [r1, #16]
 8013336:	4607      	mov	r7, r0
 8013338:	460c      	mov	r4, r1
 801333a:	461e      	mov	r6, r3
 801333c:	f101 0c14 	add.w	ip, r1, #20
 8013340:	2000      	movs	r0, #0
 8013342:	f8dc 3000 	ldr.w	r3, [ip]
 8013346:	b299      	uxth	r1, r3
 8013348:	fb02 6101 	mla	r1, r2, r1, r6
 801334c:	0c1e      	lsrs	r6, r3, #16
 801334e:	0c0b      	lsrs	r3, r1, #16
 8013350:	fb02 3306 	mla	r3, r2, r6, r3
 8013354:	b289      	uxth	r1, r1
 8013356:	3001      	adds	r0, #1
 8013358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801335c:	4285      	cmp	r5, r0
 801335e:	f84c 1b04 	str.w	r1, [ip], #4
 8013362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013366:	dcec      	bgt.n	8013342 <__multadd+0x12>
 8013368:	b30e      	cbz	r6, 80133ae <__multadd+0x7e>
 801336a:	68a3      	ldr	r3, [r4, #8]
 801336c:	42ab      	cmp	r3, r5
 801336e:	dc19      	bgt.n	80133a4 <__multadd+0x74>
 8013370:	6861      	ldr	r1, [r4, #4]
 8013372:	4638      	mov	r0, r7
 8013374:	3101      	adds	r1, #1
 8013376:	f7ff ff79 	bl	801326c <_Balloc>
 801337a:	4680      	mov	r8, r0
 801337c:	b928      	cbnz	r0, 801338a <__multadd+0x5a>
 801337e:	4602      	mov	r2, r0
 8013380:	4b0c      	ldr	r3, [pc, #48]	; (80133b4 <__multadd+0x84>)
 8013382:	480d      	ldr	r0, [pc, #52]	; (80133b8 <__multadd+0x88>)
 8013384:	21ba      	movs	r1, #186	; 0xba
 8013386:	f001 fcff 	bl	8014d88 <__assert_func>
 801338a:	6922      	ldr	r2, [r4, #16]
 801338c:	3202      	adds	r2, #2
 801338e:	f104 010c 	add.w	r1, r4, #12
 8013392:	0092      	lsls	r2, r2, #2
 8013394:	300c      	adds	r0, #12
 8013396:	f7fe ffda 	bl	801234e <memcpy>
 801339a:	4621      	mov	r1, r4
 801339c:	4638      	mov	r0, r7
 801339e:	f7ff ffa5 	bl	80132ec <_Bfree>
 80133a2:	4644      	mov	r4, r8
 80133a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133a8:	3501      	adds	r5, #1
 80133aa:	615e      	str	r6, [r3, #20]
 80133ac:	6125      	str	r5, [r4, #16]
 80133ae:	4620      	mov	r0, r4
 80133b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b4:	0801886d 	.word	0x0801886d
 80133b8:	0801887e 	.word	0x0801887e

080133bc <__s2b>:
 80133bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133c0:	460c      	mov	r4, r1
 80133c2:	4615      	mov	r5, r2
 80133c4:	461f      	mov	r7, r3
 80133c6:	2209      	movs	r2, #9
 80133c8:	3308      	adds	r3, #8
 80133ca:	4606      	mov	r6, r0
 80133cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80133d0:	2100      	movs	r1, #0
 80133d2:	2201      	movs	r2, #1
 80133d4:	429a      	cmp	r2, r3
 80133d6:	db09      	blt.n	80133ec <__s2b+0x30>
 80133d8:	4630      	mov	r0, r6
 80133da:	f7ff ff47 	bl	801326c <_Balloc>
 80133de:	b940      	cbnz	r0, 80133f2 <__s2b+0x36>
 80133e0:	4602      	mov	r2, r0
 80133e2:	4b19      	ldr	r3, [pc, #100]	; (8013448 <__s2b+0x8c>)
 80133e4:	4819      	ldr	r0, [pc, #100]	; (801344c <__s2b+0x90>)
 80133e6:	21d3      	movs	r1, #211	; 0xd3
 80133e8:	f001 fcce 	bl	8014d88 <__assert_func>
 80133ec:	0052      	lsls	r2, r2, #1
 80133ee:	3101      	adds	r1, #1
 80133f0:	e7f0      	b.n	80133d4 <__s2b+0x18>
 80133f2:	9b08      	ldr	r3, [sp, #32]
 80133f4:	6143      	str	r3, [r0, #20]
 80133f6:	2d09      	cmp	r5, #9
 80133f8:	f04f 0301 	mov.w	r3, #1
 80133fc:	6103      	str	r3, [r0, #16]
 80133fe:	dd16      	ble.n	801342e <__s2b+0x72>
 8013400:	f104 0909 	add.w	r9, r4, #9
 8013404:	46c8      	mov	r8, r9
 8013406:	442c      	add	r4, r5
 8013408:	f818 3b01 	ldrb.w	r3, [r8], #1
 801340c:	4601      	mov	r1, r0
 801340e:	3b30      	subs	r3, #48	; 0x30
 8013410:	220a      	movs	r2, #10
 8013412:	4630      	mov	r0, r6
 8013414:	f7ff ff8c 	bl	8013330 <__multadd>
 8013418:	45a0      	cmp	r8, r4
 801341a:	d1f5      	bne.n	8013408 <__s2b+0x4c>
 801341c:	f1a5 0408 	sub.w	r4, r5, #8
 8013420:	444c      	add	r4, r9
 8013422:	1b2d      	subs	r5, r5, r4
 8013424:	1963      	adds	r3, r4, r5
 8013426:	42bb      	cmp	r3, r7
 8013428:	db04      	blt.n	8013434 <__s2b+0x78>
 801342a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801342e:	340a      	adds	r4, #10
 8013430:	2509      	movs	r5, #9
 8013432:	e7f6      	b.n	8013422 <__s2b+0x66>
 8013434:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013438:	4601      	mov	r1, r0
 801343a:	3b30      	subs	r3, #48	; 0x30
 801343c:	220a      	movs	r2, #10
 801343e:	4630      	mov	r0, r6
 8013440:	f7ff ff76 	bl	8013330 <__multadd>
 8013444:	e7ee      	b.n	8013424 <__s2b+0x68>
 8013446:	bf00      	nop
 8013448:	0801886d 	.word	0x0801886d
 801344c:	0801887e 	.word	0x0801887e

08013450 <__hi0bits>:
 8013450:	0c03      	lsrs	r3, r0, #16
 8013452:	041b      	lsls	r3, r3, #16
 8013454:	b9d3      	cbnz	r3, 801348c <__hi0bits+0x3c>
 8013456:	0400      	lsls	r0, r0, #16
 8013458:	2310      	movs	r3, #16
 801345a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801345e:	bf04      	itt	eq
 8013460:	0200      	lsleq	r0, r0, #8
 8013462:	3308      	addeq	r3, #8
 8013464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013468:	bf04      	itt	eq
 801346a:	0100      	lsleq	r0, r0, #4
 801346c:	3304      	addeq	r3, #4
 801346e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013472:	bf04      	itt	eq
 8013474:	0080      	lsleq	r0, r0, #2
 8013476:	3302      	addeq	r3, #2
 8013478:	2800      	cmp	r0, #0
 801347a:	db05      	blt.n	8013488 <__hi0bits+0x38>
 801347c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013480:	f103 0301 	add.w	r3, r3, #1
 8013484:	bf08      	it	eq
 8013486:	2320      	moveq	r3, #32
 8013488:	4618      	mov	r0, r3
 801348a:	4770      	bx	lr
 801348c:	2300      	movs	r3, #0
 801348e:	e7e4      	b.n	801345a <__hi0bits+0xa>

08013490 <__lo0bits>:
 8013490:	6803      	ldr	r3, [r0, #0]
 8013492:	f013 0207 	ands.w	r2, r3, #7
 8013496:	d00c      	beq.n	80134b2 <__lo0bits+0x22>
 8013498:	07d9      	lsls	r1, r3, #31
 801349a:	d422      	bmi.n	80134e2 <__lo0bits+0x52>
 801349c:	079a      	lsls	r2, r3, #30
 801349e:	bf49      	itett	mi
 80134a0:	085b      	lsrmi	r3, r3, #1
 80134a2:	089b      	lsrpl	r3, r3, #2
 80134a4:	6003      	strmi	r3, [r0, #0]
 80134a6:	2201      	movmi	r2, #1
 80134a8:	bf5c      	itt	pl
 80134aa:	6003      	strpl	r3, [r0, #0]
 80134ac:	2202      	movpl	r2, #2
 80134ae:	4610      	mov	r0, r2
 80134b0:	4770      	bx	lr
 80134b2:	b299      	uxth	r1, r3
 80134b4:	b909      	cbnz	r1, 80134ba <__lo0bits+0x2a>
 80134b6:	0c1b      	lsrs	r3, r3, #16
 80134b8:	2210      	movs	r2, #16
 80134ba:	b2d9      	uxtb	r1, r3
 80134bc:	b909      	cbnz	r1, 80134c2 <__lo0bits+0x32>
 80134be:	3208      	adds	r2, #8
 80134c0:	0a1b      	lsrs	r3, r3, #8
 80134c2:	0719      	lsls	r1, r3, #28
 80134c4:	bf04      	itt	eq
 80134c6:	091b      	lsreq	r3, r3, #4
 80134c8:	3204      	addeq	r2, #4
 80134ca:	0799      	lsls	r1, r3, #30
 80134cc:	bf04      	itt	eq
 80134ce:	089b      	lsreq	r3, r3, #2
 80134d0:	3202      	addeq	r2, #2
 80134d2:	07d9      	lsls	r1, r3, #31
 80134d4:	d403      	bmi.n	80134de <__lo0bits+0x4e>
 80134d6:	085b      	lsrs	r3, r3, #1
 80134d8:	f102 0201 	add.w	r2, r2, #1
 80134dc:	d003      	beq.n	80134e6 <__lo0bits+0x56>
 80134de:	6003      	str	r3, [r0, #0]
 80134e0:	e7e5      	b.n	80134ae <__lo0bits+0x1e>
 80134e2:	2200      	movs	r2, #0
 80134e4:	e7e3      	b.n	80134ae <__lo0bits+0x1e>
 80134e6:	2220      	movs	r2, #32
 80134e8:	e7e1      	b.n	80134ae <__lo0bits+0x1e>
	...

080134ec <__i2b>:
 80134ec:	b510      	push	{r4, lr}
 80134ee:	460c      	mov	r4, r1
 80134f0:	2101      	movs	r1, #1
 80134f2:	f7ff febb 	bl	801326c <_Balloc>
 80134f6:	4602      	mov	r2, r0
 80134f8:	b928      	cbnz	r0, 8013506 <__i2b+0x1a>
 80134fa:	4b05      	ldr	r3, [pc, #20]	; (8013510 <__i2b+0x24>)
 80134fc:	4805      	ldr	r0, [pc, #20]	; (8013514 <__i2b+0x28>)
 80134fe:	f240 1145 	movw	r1, #325	; 0x145
 8013502:	f001 fc41 	bl	8014d88 <__assert_func>
 8013506:	2301      	movs	r3, #1
 8013508:	6144      	str	r4, [r0, #20]
 801350a:	6103      	str	r3, [r0, #16]
 801350c:	bd10      	pop	{r4, pc}
 801350e:	bf00      	nop
 8013510:	0801886d 	.word	0x0801886d
 8013514:	0801887e 	.word	0x0801887e

08013518 <__multiply>:
 8013518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351c:	4691      	mov	r9, r2
 801351e:	690a      	ldr	r2, [r1, #16]
 8013520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013524:	429a      	cmp	r2, r3
 8013526:	bfb8      	it	lt
 8013528:	460b      	movlt	r3, r1
 801352a:	460c      	mov	r4, r1
 801352c:	bfbc      	itt	lt
 801352e:	464c      	movlt	r4, r9
 8013530:	4699      	movlt	r9, r3
 8013532:	6927      	ldr	r7, [r4, #16]
 8013534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013538:	68a3      	ldr	r3, [r4, #8]
 801353a:	6861      	ldr	r1, [r4, #4]
 801353c:	eb07 060a 	add.w	r6, r7, sl
 8013540:	42b3      	cmp	r3, r6
 8013542:	b085      	sub	sp, #20
 8013544:	bfb8      	it	lt
 8013546:	3101      	addlt	r1, #1
 8013548:	f7ff fe90 	bl	801326c <_Balloc>
 801354c:	b930      	cbnz	r0, 801355c <__multiply+0x44>
 801354e:	4602      	mov	r2, r0
 8013550:	4b44      	ldr	r3, [pc, #272]	; (8013664 <__multiply+0x14c>)
 8013552:	4845      	ldr	r0, [pc, #276]	; (8013668 <__multiply+0x150>)
 8013554:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013558:	f001 fc16 	bl	8014d88 <__assert_func>
 801355c:	f100 0514 	add.w	r5, r0, #20
 8013560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013564:	462b      	mov	r3, r5
 8013566:	2200      	movs	r2, #0
 8013568:	4543      	cmp	r3, r8
 801356a:	d321      	bcc.n	80135b0 <__multiply+0x98>
 801356c:	f104 0314 	add.w	r3, r4, #20
 8013570:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013574:	f109 0314 	add.w	r3, r9, #20
 8013578:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801357c:	9202      	str	r2, [sp, #8]
 801357e:	1b3a      	subs	r2, r7, r4
 8013580:	3a15      	subs	r2, #21
 8013582:	f022 0203 	bic.w	r2, r2, #3
 8013586:	3204      	adds	r2, #4
 8013588:	f104 0115 	add.w	r1, r4, #21
 801358c:	428f      	cmp	r7, r1
 801358e:	bf38      	it	cc
 8013590:	2204      	movcc	r2, #4
 8013592:	9201      	str	r2, [sp, #4]
 8013594:	9a02      	ldr	r2, [sp, #8]
 8013596:	9303      	str	r3, [sp, #12]
 8013598:	429a      	cmp	r2, r3
 801359a:	d80c      	bhi.n	80135b6 <__multiply+0x9e>
 801359c:	2e00      	cmp	r6, #0
 801359e:	dd03      	ble.n	80135a8 <__multiply+0x90>
 80135a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d05b      	beq.n	8013660 <__multiply+0x148>
 80135a8:	6106      	str	r6, [r0, #16]
 80135aa:	b005      	add	sp, #20
 80135ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b0:	f843 2b04 	str.w	r2, [r3], #4
 80135b4:	e7d8      	b.n	8013568 <__multiply+0x50>
 80135b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80135ba:	f1ba 0f00 	cmp.w	sl, #0
 80135be:	d024      	beq.n	801360a <__multiply+0xf2>
 80135c0:	f104 0e14 	add.w	lr, r4, #20
 80135c4:	46a9      	mov	r9, r5
 80135c6:	f04f 0c00 	mov.w	ip, #0
 80135ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80135ce:	f8d9 1000 	ldr.w	r1, [r9]
 80135d2:	fa1f fb82 	uxth.w	fp, r2
 80135d6:	b289      	uxth	r1, r1
 80135d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80135dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80135e0:	f8d9 2000 	ldr.w	r2, [r9]
 80135e4:	4461      	add	r1, ip
 80135e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80135ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80135ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80135f2:	b289      	uxth	r1, r1
 80135f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80135f8:	4577      	cmp	r7, lr
 80135fa:	f849 1b04 	str.w	r1, [r9], #4
 80135fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013602:	d8e2      	bhi.n	80135ca <__multiply+0xb2>
 8013604:	9a01      	ldr	r2, [sp, #4]
 8013606:	f845 c002 	str.w	ip, [r5, r2]
 801360a:	9a03      	ldr	r2, [sp, #12]
 801360c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013610:	3304      	adds	r3, #4
 8013612:	f1b9 0f00 	cmp.w	r9, #0
 8013616:	d021      	beq.n	801365c <__multiply+0x144>
 8013618:	6829      	ldr	r1, [r5, #0]
 801361a:	f104 0c14 	add.w	ip, r4, #20
 801361e:	46ae      	mov	lr, r5
 8013620:	f04f 0a00 	mov.w	sl, #0
 8013624:	f8bc b000 	ldrh.w	fp, [ip]
 8013628:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801362c:	fb09 220b 	mla	r2, r9, fp, r2
 8013630:	4452      	add	r2, sl
 8013632:	b289      	uxth	r1, r1
 8013634:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013638:	f84e 1b04 	str.w	r1, [lr], #4
 801363c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013640:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013644:	f8be 1000 	ldrh.w	r1, [lr]
 8013648:	fb09 110a 	mla	r1, r9, sl, r1
 801364c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013650:	4567      	cmp	r7, ip
 8013652:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013656:	d8e5      	bhi.n	8013624 <__multiply+0x10c>
 8013658:	9a01      	ldr	r2, [sp, #4]
 801365a:	50a9      	str	r1, [r5, r2]
 801365c:	3504      	adds	r5, #4
 801365e:	e799      	b.n	8013594 <__multiply+0x7c>
 8013660:	3e01      	subs	r6, #1
 8013662:	e79b      	b.n	801359c <__multiply+0x84>
 8013664:	0801886d 	.word	0x0801886d
 8013668:	0801887e 	.word	0x0801887e

0801366c <__pow5mult>:
 801366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013670:	4615      	mov	r5, r2
 8013672:	f012 0203 	ands.w	r2, r2, #3
 8013676:	4606      	mov	r6, r0
 8013678:	460f      	mov	r7, r1
 801367a:	d007      	beq.n	801368c <__pow5mult+0x20>
 801367c:	4c25      	ldr	r4, [pc, #148]	; (8013714 <__pow5mult+0xa8>)
 801367e:	3a01      	subs	r2, #1
 8013680:	2300      	movs	r3, #0
 8013682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013686:	f7ff fe53 	bl	8013330 <__multadd>
 801368a:	4607      	mov	r7, r0
 801368c:	10ad      	asrs	r5, r5, #2
 801368e:	d03d      	beq.n	801370c <__pow5mult+0xa0>
 8013690:	69f4      	ldr	r4, [r6, #28]
 8013692:	b97c      	cbnz	r4, 80136b4 <__pow5mult+0x48>
 8013694:	2010      	movs	r0, #16
 8013696:	f7ff fd35 	bl	8013104 <malloc>
 801369a:	4602      	mov	r2, r0
 801369c:	61f0      	str	r0, [r6, #28]
 801369e:	b928      	cbnz	r0, 80136ac <__pow5mult+0x40>
 80136a0:	4b1d      	ldr	r3, [pc, #116]	; (8013718 <__pow5mult+0xac>)
 80136a2:	481e      	ldr	r0, [pc, #120]	; (801371c <__pow5mult+0xb0>)
 80136a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80136a8:	f001 fb6e 	bl	8014d88 <__assert_func>
 80136ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136b0:	6004      	str	r4, [r0, #0]
 80136b2:	60c4      	str	r4, [r0, #12]
 80136b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80136b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136bc:	b94c      	cbnz	r4, 80136d2 <__pow5mult+0x66>
 80136be:	f240 2171 	movw	r1, #625	; 0x271
 80136c2:	4630      	mov	r0, r6
 80136c4:	f7ff ff12 	bl	80134ec <__i2b>
 80136c8:	2300      	movs	r3, #0
 80136ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80136ce:	4604      	mov	r4, r0
 80136d0:	6003      	str	r3, [r0, #0]
 80136d2:	f04f 0900 	mov.w	r9, #0
 80136d6:	07eb      	lsls	r3, r5, #31
 80136d8:	d50a      	bpl.n	80136f0 <__pow5mult+0x84>
 80136da:	4639      	mov	r1, r7
 80136dc:	4622      	mov	r2, r4
 80136de:	4630      	mov	r0, r6
 80136e0:	f7ff ff1a 	bl	8013518 <__multiply>
 80136e4:	4639      	mov	r1, r7
 80136e6:	4680      	mov	r8, r0
 80136e8:	4630      	mov	r0, r6
 80136ea:	f7ff fdff 	bl	80132ec <_Bfree>
 80136ee:	4647      	mov	r7, r8
 80136f0:	106d      	asrs	r5, r5, #1
 80136f2:	d00b      	beq.n	801370c <__pow5mult+0xa0>
 80136f4:	6820      	ldr	r0, [r4, #0]
 80136f6:	b938      	cbnz	r0, 8013708 <__pow5mult+0x9c>
 80136f8:	4622      	mov	r2, r4
 80136fa:	4621      	mov	r1, r4
 80136fc:	4630      	mov	r0, r6
 80136fe:	f7ff ff0b 	bl	8013518 <__multiply>
 8013702:	6020      	str	r0, [r4, #0]
 8013704:	f8c0 9000 	str.w	r9, [r0]
 8013708:	4604      	mov	r4, r0
 801370a:	e7e4      	b.n	80136d6 <__pow5mult+0x6a>
 801370c:	4638      	mov	r0, r7
 801370e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013712:	bf00      	nop
 8013714:	080189c8 	.word	0x080189c8
 8013718:	080187fe 	.word	0x080187fe
 801371c:	0801887e 	.word	0x0801887e

08013720 <__lshift>:
 8013720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013724:	460c      	mov	r4, r1
 8013726:	6849      	ldr	r1, [r1, #4]
 8013728:	6923      	ldr	r3, [r4, #16]
 801372a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801372e:	68a3      	ldr	r3, [r4, #8]
 8013730:	4607      	mov	r7, r0
 8013732:	4691      	mov	r9, r2
 8013734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013738:	f108 0601 	add.w	r6, r8, #1
 801373c:	42b3      	cmp	r3, r6
 801373e:	db0b      	blt.n	8013758 <__lshift+0x38>
 8013740:	4638      	mov	r0, r7
 8013742:	f7ff fd93 	bl	801326c <_Balloc>
 8013746:	4605      	mov	r5, r0
 8013748:	b948      	cbnz	r0, 801375e <__lshift+0x3e>
 801374a:	4602      	mov	r2, r0
 801374c:	4b28      	ldr	r3, [pc, #160]	; (80137f0 <__lshift+0xd0>)
 801374e:	4829      	ldr	r0, [pc, #164]	; (80137f4 <__lshift+0xd4>)
 8013750:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013754:	f001 fb18 	bl	8014d88 <__assert_func>
 8013758:	3101      	adds	r1, #1
 801375a:	005b      	lsls	r3, r3, #1
 801375c:	e7ee      	b.n	801373c <__lshift+0x1c>
 801375e:	2300      	movs	r3, #0
 8013760:	f100 0114 	add.w	r1, r0, #20
 8013764:	f100 0210 	add.w	r2, r0, #16
 8013768:	4618      	mov	r0, r3
 801376a:	4553      	cmp	r3, sl
 801376c:	db33      	blt.n	80137d6 <__lshift+0xb6>
 801376e:	6920      	ldr	r0, [r4, #16]
 8013770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013774:	f104 0314 	add.w	r3, r4, #20
 8013778:	f019 091f 	ands.w	r9, r9, #31
 801377c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013784:	d02b      	beq.n	80137de <__lshift+0xbe>
 8013786:	f1c9 0e20 	rsb	lr, r9, #32
 801378a:	468a      	mov	sl, r1
 801378c:	2200      	movs	r2, #0
 801378e:	6818      	ldr	r0, [r3, #0]
 8013790:	fa00 f009 	lsl.w	r0, r0, r9
 8013794:	4310      	orrs	r0, r2
 8013796:	f84a 0b04 	str.w	r0, [sl], #4
 801379a:	f853 2b04 	ldr.w	r2, [r3], #4
 801379e:	459c      	cmp	ip, r3
 80137a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80137a4:	d8f3      	bhi.n	801378e <__lshift+0x6e>
 80137a6:	ebac 0304 	sub.w	r3, ip, r4
 80137aa:	3b15      	subs	r3, #21
 80137ac:	f023 0303 	bic.w	r3, r3, #3
 80137b0:	3304      	adds	r3, #4
 80137b2:	f104 0015 	add.w	r0, r4, #21
 80137b6:	4584      	cmp	ip, r0
 80137b8:	bf38      	it	cc
 80137ba:	2304      	movcc	r3, #4
 80137bc:	50ca      	str	r2, [r1, r3]
 80137be:	b10a      	cbz	r2, 80137c4 <__lshift+0xa4>
 80137c0:	f108 0602 	add.w	r6, r8, #2
 80137c4:	3e01      	subs	r6, #1
 80137c6:	4638      	mov	r0, r7
 80137c8:	612e      	str	r6, [r5, #16]
 80137ca:	4621      	mov	r1, r4
 80137cc:	f7ff fd8e 	bl	80132ec <_Bfree>
 80137d0:	4628      	mov	r0, r5
 80137d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80137da:	3301      	adds	r3, #1
 80137dc:	e7c5      	b.n	801376a <__lshift+0x4a>
 80137de:	3904      	subs	r1, #4
 80137e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80137e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80137e8:	459c      	cmp	ip, r3
 80137ea:	d8f9      	bhi.n	80137e0 <__lshift+0xc0>
 80137ec:	e7ea      	b.n	80137c4 <__lshift+0xa4>
 80137ee:	bf00      	nop
 80137f0:	0801886d 	.word	0x0801886d
 80137f4:	0801887e 	.word	0x0801887e

080137f8 <__mcmp>:
 80137f8:	b530      	push	{r4, r5, lr}
 80137fa:	6902      	ldr	r2, [r0, #16]
 80137fc:	690c      	ldr	r4, [r1, #16]
 80137fe:	1b12      	subs	r2, r2, r4
 8013800:	d10e      	bne.n	8013820 <__mcmp+0x28>
 8013802:	f100 0314 	add.w	r3, r0, #20
 8013806:	3114      	adds	r1, #20
 8013808:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801380c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013810:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013814:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013818:	42a5      	cmp	r5, r4
 801381a:	d003      	beq.n	8013824 <__mcmp+0x2c>
 801381c:	d305      	bcc.n	801382a <__mcmp+0x32>
 801381e:	2201      	movs	r2, #1
 8013820:	4610      	mov	r0, r2
 8013822:	bd30      	pop	{r4, r5, pc}
 8013824:	4283      	cmp	r3, r0
 8013826:	d3f3      	bcc.n	8013810 <__mcmp+0x18>
 8013828:	e7fa      	b.n	8013820 <__mcmp+0x28>
 801382a:	f04f 32ff 	mov.w	r2, #4294967295
 801382e:	e7f7      	b.n	8013820 <__mcmp+0x28>

08013830 <__mdiff>:
 8013830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013834:	460c      	mov	r4, r1
 8013836:	4606      	mov	r6, r0
 8013838:	4611      	mov	r1, r2
 801383a:	4620      	mov	r0, r4
 801383c:	4690      	mov	r8, r2
 801383e:	f7ff ffdb 	bl	80137f8 <__mcmp>
 8013842:	1e05      	subs	r5, r0, #0
 8013844:	d110      	bne.n	8013868 <__mdiff+0x38>
 8013846:	4629      	mov	r1, r5
 8013848:	4630      	mov	r0, r6
 801384a:	f7ff fd0f 	bl	801326c <_Balloc>
 801384e:	b930      	cbnz	r0, 801385e <__mdiff+0x2e>
 8013850:	4b3a      	ldr	r3, [pc, #232]	; (801393c <__mdiff+0x10c>)
 8013852:	4602      	mov	r2, r0
 8013854:	f240 2137 	movw	r1, #567	; 0x237
 8013858:	4839      	ldr	r0, [pc, #228]	; (8013940 <__mdiff+0x110>)
 801385a:	f001 fa95 	bl	8014d88 <__assert_func>
 801385e:	2301      	movs	r3, #1
 8013860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013868:	bfa4      	itt	ge
 801386a:	4643      	movge	r3, r8
 801386c:	46a0      	movge	r8, r4
 801386e:	4630      	mov	r0, r6
 8013870:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013874:	bfa6      	itte	ge
 8013876:	461c      	movge	r4, r3
 8013878:	2500      	movge	r5, #0
 801387a:	2501      	movlt	r5, #1
 801387c:	f7ff fcf6 	bl	801326c <_Balloc>
 8013880:	b920      	cbnz	r0, 801388c <__mdiff+0x5c>
 8013882:	4b2e      	ldr	r3, [pc, #184]	; (801393c <__mdiff+0x10c>)
 8013884:	4602      	mov	r2, r0
 8013886:	f240 2145 	movw	r1, #581	; 0x245
 801388a:	e7e5      	b.n	8013858 <__mdiff+0x28>
 801388c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013890:	6926      	ldr	r6, [r4, #16]
 8013892:	60c5      	str	r5, [r0, #12]
 8013894:	f104 0914 	add.w	r9, r4, #20
 8013898:	f108 0514 	add.w	r5, r8, #20
 801389c:	f100 0e14 	add.w	lr, r0, #20
 80138a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80138a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80138a8:	f108 0210 	add.w	r2, r8, #16
 80138ac:	46f2      	mov	sl, lr
 80138ae:	2100      	movs	r1, #0
 80138b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80138b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80138b8:	fa11 f88b 	uxtah	r8, r1, fp
 80138bc:	b299      	uxth	r1, r3
 80138be:	0c1b      	lsrs	r3, r3, #16
 80138c0:	eba8 0801 	sub.w	r8, r8, r1
 80138c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80138c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80138cc:	fa1f f888 	uxth.w	r8, r8
 80138d0:	1419      	asrs	r1, r3, #16
 80138d2:	454e      	cmp	r6, r9
 80138d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80138d8:	f84a 3b04 	str.w	r3, [sl], #4
 80138dc:	d8e8      	bhi.n	80138b0 <__mdiff+0x80>
 80138de:	1b33      	subs	r3, r6, r4
 80138e0:	3b15      	subs	r3, #21
 80138e2:	f023 0303 	bic.w	r3, r3, #3
 80138e6:	3304      	adds	r3, #4
 80138e8:	3415      	adds	r4, #21
 80138ea:	42a6      	cmp	r6, r4
 80138ec:	bf38      	it	cc
 80138ee:	2304      	movcc	r3, #4
 80138f0:	441d      	add	r5, r3
 80138f2:	4473      	add	r3, lr
 80138f4:	469e      	mov	lr, r3
 80138f6:	462e      	mov	r6, r5
 80138f8:	4566      	cmp	r6, ip
 80138fa:	d30e      	bcc.n	801391a <__mdiff+0xea>
 80138fc:	f10c 0203 	add.w	r2, ip, #3
 8013900:	1b52      	subs	r2, r2, r5
 8013902:	f022 0203 	bic.w	r2, r2, #3
 8013906:	3d03      	subs	r5, #3
 8013908:	45ac      	cmp	ip, r5
 801390a:	bf38      	it	cc
 801390c:	2200      	movcc	r2, #0
 801390e:	4413      	add	r3, r2
 8013910:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013914:	b17a      	cbz	r2, 8013936 <__mdiff+0x106>
 8013916:	6107      	str	r7, [r0, #16]
 8013918:	e7a4      	b.n	8013864 <__mdiff+0x34>
 801391a:	f856 8b04 	ldr.w	r8, [r6], #4
 801391e:	fa11 f288 	uxtah	r2, r1, r8
 8013922:	1414      	asrs	r4, r2, #16
 8013924:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013928:	b292      	uxth	r2, r2
 801392a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801392e:	f84e 2b04 	str.w	r2, [lr], #4
 8013932:	1421      	asrs	r1, r4, #16
 8013934:	e7e0      	b.n	80138f8 <__mdiff+0xc8>
 8013936:	3f01      	subs	r7, #1
 8013938:	e7ea      	b.n	8013910 <__mdiff+0xe0>
 801393a:	bf00      	nop
 801393c:	0801886d 	.word	0x0801886d
 8013940:	0801887e 	.word	0x0801887e

08013944 <__ulp>:
 8013944:	b082      	sub	sp, #8
 8013946:	ed8d 0b00 	vstr	d0, [sp]
 801394a:	9a01      	ldr	r2, [sp, #4]
 801394c:	4b0f      	ldr	r3, [pc, #60]	; (801398c <__ulp+0x48>)
 801394e:	4013      	ands	r3, r2
 8013950:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013954:	2b00      	cmp	r3, #0
 8013956:	dc08      	bgt.n	801396a <__ulp+0x26>
 8013958:	425b      	negs	r3, r3
 801395a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801395e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013962:	da04      	bge.n	801396e <__ulp+0x2a>
 8013964:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013968:	4113      	asrs	r3, r2
 801396a:	2200      	movs	r2, #0
 801396c:	e008      	b.n	8013980 <__ulp+0x3c>
 801396e:	f1a2 0314 	sub.w	r3, r2, #20
 8013972:	2b1e      	cmp	r3, #30
 8013974:	bfda      	itte	le
 8013976:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801397a:	40da      	lsrle	r2, r3
 801397c:	2201      	movgt	r2, #1
 801397e:	2300      	movs	r3, #0
 8013980:	4619      	mov	r1, r3
 8013982:	4610      	mov	r0, r2
 8013984:	ec41 0b10 	vmov	d0, r0, r1
 8013988:	b002      	add	sp, #8
 801398a:	4770      	bx	lr
 801398c:	7ff00000 	.word	0x7ff00000

08013990 <__b2d>:
 8013990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013994:	6906      	ldr	r6, [r0, #16]
 8013996:	f100 0814 	add.w	r8, r0, #20
 801399a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801399e:	1f37      	subs	r7, r6, #4
 80139a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80139a4:	4610      	mov	r0, r2
 80139a6:	f7ff fd53 	bl	8013450 <__hi0bits>
 80139aa:	f1c0 0320 	rsb	r3, r0, #32
 80139ae:	280a      	cmp	r0, #10
 80139b0:	600b      	str	r3, [r1, #0]
 80139b2:	491b      	ldr	r1, [pc, #108]	; (8013a20 <__b2d+0x90>)
 80139b4:	dc15      	bgt.n	80139e2 <__b2d+0x52>
 80139b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80139ba:	fa22 f30c 	lsr.w	r3, r2, ip
 80139be:	45b8      	cmp	r8, r7
 80139c0:	ea43 0501 	orr.w	r5, r3, r1
 80139c4:	bf34      	ite	cc
 80139c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80139ca:	2300      	movcs	r3, #0
 80139cc:	3015      	adds	r0, #21
 80139ce:	fa02 f000 	lsl.w	r0, r2, r0
 80139d2:	fa23 f30c 	lsr.w	r3, r3, ip
 80139d6:	4303      	orrs	r3, r0
 80139d8:	461c      	mov	r4, r3
 80139da:	ec45 4b10 	vmov	d0, r4, r5
 80139de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139e2:	45b8      	cmp	r8, r7
 80139e4:	bf3a      	itte	cc
 80139e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80139ea:	f1a6 0708 	subcc.w	r7, r6, #8
 80139ee:	2300      	movcs	r3, #0
 80139f0:	380b      	subs	r0, #11
 80139f2:	d012      	beq.n	8013a1a <__b2d+0x8a>
 80139f4:	f1c0 0120 	rsb	r1, r0, #32
 80139f8:	fa23 f401 	lsr.w	r4, r3, r1
 80139fc:	4082      	lsls	r2, r0
 80139fe:	4322      	orrs	r2, r4
 8013a00:	4547      	cmp	r7, r8
 8013a02:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013a06:	bf8c      	ite	hi
 8013a08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013a0c:	2200      	movls	r2, #0
 8013a0e:	4083      	lsls	r3, r0
 8013a10:	40ca      	lsrs	r2, r1
 8013a12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013a16:	4313      	orrs	r3, r2
 8013a18:	e7de      	b.n	80139d8 <__b2d+0x48>
 8013a1a:	ea42 0501 	orr.w	r5, r2, r1
 8013a1e:	e7db      	b.n	80139d8 <__b2d+0x48>
 8013a20:	3ff00000 	.word	0x3ff00000

08013a24 <__d2b>:
 8013a24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a28:	460f      	mov	r7, r1
 8013a2a:	2101      	movs	r1, #1
 8013a2c:	ec59 8b10 	vmov	r8, r9, d0
 8013a30:	4616      	mov	r6, r2
 8013a32:	f7ff fc1b 	bl	801326c <_Balloc>
 8013a36:	4604      	mov	r4, r0
 8013a38:	b930      	cbnz	r0, 8013a48 <__d2b+0x24>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	4b24      	ldr	r3, [pc, #144]	; (8013ad0 <__d2b+0xac>)
 8013a3e:	4825      	ldr	r0, [pc, #148]	; (8013ad4 <__d2b+0xb0>)
 8013a40:	f240 310f 	movw	r1, #783	; 0x30f
 8013a44:	f001 f9a0 	bl	8014d88 <__assert_func>
 8013a48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013a4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013a50:	bb2d      	cbnz	r5, 8013a9e <__d2b+0x7a>
 8013a52:	9301      	str	r3, [sp, #4]
 8013a54:	f1b8 0300 	subs.w	r3, r8, #0
 8013a58:	d026      	beq.n	8013aa8 <__d2b+0x84>
 8013a5a:	4668      	mov	r0, sp
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	f7ff fd17 	bl	8013490 <__lo0bits>
 8013a62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013a66:	b1e8      	cbz	r0, 8013aa4 <__d2b+0x80>
 8013a68:	f1c0 0320 	rsb	r3, r0, #32
 8013a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8013a70:	430b      	orrs	r3, r1
 8013a72:	40c2      	lsrs	r2, r0
 8013a74:	6163      	str	r3, [r4, #20]
 8013a76:	9201      	str	r2, [sp, #4]
 8013a78:	9b01      	ldr	r3, [sp, #4]
 8013a7a:	61a3      	str	r3, [r4, #24]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	bf14      	ite	ne
 8013a80:	2202      	movne	r2, #2
 8013a82:	2201      	moveq	r2, #1
 8013a84:	6122      	str	r2, [r4, #16]
 8013a86:	b1bd      	cbz	r5, 8013ab8 <__d2b+0x94>
 8013a88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013a8c:	4405      	add	r5, r0
 8013a8e:	603d      	str	r5, [r7, #0]
 8013a90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013a94:	6030      	str	r0, [r6, #0]
 8013a96:	4620      	mov	r0, r4
 8013a98:	b003      	add	sp, #12
 8013a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013aa2:	e7d6      	b.n	8013a52 <__d2b+0x2e>
 8013aa4:	6161      	str	r1, [r4, #20]
 8013aa6:	e7e7      	b.n	8013a78 <__d2b+0x54>
 8013aa8:	a801      	add	r0, sp, #4
 8013aaa:	f7ff fcf1 	bl	8013490 <__lo0bits>
 8013aae:	9b01      	ldr	r3, [sp, #4]
 8013ab0:	6163      	str	r3, [r4, #20]
 8013ab2:	3020      	adds	r0, #32
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	e7e5      	b.n	8013a84 <__d2b+0x60>
 8013ab8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013abc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013ac0:	6038      	str	r0, [r7, #0]
 8013ac2:	6918      	ldr	r0, [r3, #16]
 8013ac4:	f7ff fcc4 	bl	8013450 <__hi0bits>
 8013ac8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013acc:	e7e2      	b.n	8013a94 <__d2b+0x70>
 8013ace:	bf00      	nop
 8013ad0:	0801886d 	.word	0x0801886d
 8013ad4:	0801887e 	.word	0x0801887e

08013ad8 <__ratio>:
 8013ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013adc:	4688      	mov	r8, r1
 8013ade:	4669      	mov	r1, sp
 8013ae0:	4681      	mov	r9, r0
 8013ae2:	f7ff ff55 	bl	8013990 <__b2d>
 8013ae6:	a901      	add	r1, sp, #4
 8013ae8:	4640      	mov	r0, r8
 8013aea:	ec55 4b10 	vmov	r4, r5, d0
 8013aee:	f7ff ff4f 	bl	8013990 <__b2d>
 8013af2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013af6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013afa:	eba3 0c02 	sub.w	ip, r3, r2
 8013afe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b02:	1a9b      	subs	r3, r3, r2
 8013b04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013b08:	ec51 0b10 	vmov	r0, r1, d0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	bfd6      	itet	le
 8013b10:	460a      	movle	r2, r1
 8013b12:	462a      	movgt	r2, r5
 8013b14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013b18:	468b      	mov	fp, r1
 8013b1a:	462f      	mov	r7, r5
 8013b1c:	bfd4      	ite	le
 8013b1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013b22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013b26:	4620      	mov	r0, r4
 8013b28:	ee10 2a10 	vmov	r2, s0
 8013b2c:	465b      	mov	r3, fp
 8013b2e:	4639      	mov	r1, r7
 8013b30:	f7ec feb4 	bl	800089c <__aeabi_ddiv>
 8013b34:	ec41 0b10 	vmov	d0, r0, r1
 8013b38:	b003      	add	sp, #12
 8013b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b3e <__copybits>:
 8013b3e:	3901      	subs	r1, #1
 8013b40:	b570      	push	{r4, r5, r6, lr}
 8013b42:	1149      	asrs	r1, r1, #5
 8013b44:	6914      	ldr	r4, [r2, #16]
 8013b46:	3101      	adds	r1, #1
 8013b48:	f102 0314 	add.w	r3, r2, #20
 8013b4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013b50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013b54:	1f05      	subs	r5, r0, #4
 8013b56:	42a3      	cmp	r3, r4
 8013b58:	d30c      	bcc.n	8013b74 <__copybits+0x36>
 8013b5a:	1aa3      	subs	r3, r4, r2
 8013b5c:	3b11      	subs	r3, #17
 8013b5e:	f023 0303 	bic.w	r3, r3, #3
 8013b62:	3211      	adds	r2, #17
 8013b64:	42a2      	cmp	r2, r4
 8013b66:	bf88      	it	hi
 8013b68:	2300      	movhi	r3, #0
 8013b6a:	4418      	add	r0, r3
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	4288      	cmp	r0, r1
 8013b70:	d305      	bcc.n	8013b7e <__copybits+0x40>
 8013b72:	bd70      	pop	{r4, r5, r6, pc}
 8013b74:	f853 6b04 	ldr.w	r6, [r3], #4
 8013b78:	f845 6f04 	str.w	r6, [r5, #4]!
 8013b7c:	e7eb      	b.n	8013b56 <__copybits+0x18>
 8013b7e:	f840 3b04 	str.w	r3, [r0], #4
 8013b82:	e7f4      	b.n	8013b6e <__copybits+0x30>

08013b84 <__any_on>:
 8013b84:	f100 0214 	add.w	r2, r0, #20
 8013b88:	6900      	ldr	r0, [r0, #16]
 8013b8a:	114b      	asrs	r3, r1, #5
 8013b8c:	4298      	cmp	r0, r3
 8013b8e:	b510      	push	{r4, lr}
 8013b90:	db11      	blt.n	8013bb6 <__any_on+0x32>
 8013b92:	dd0a      	ble.n	8013baa <__any_on+0x26>
 8013b94:	f011 011f 	ands.w	r1, r1, #31
 8013b98:	d007      	beq.n	8013baa <__any_on+0x26>
 8013b9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013b9e:	fa24 f001 	lsr.w	r0, r4, r1
 8013ba2:	fa00 f101 	lsl.w	r1, r0, r1
 8013ba6:	428c      	cmp	r4, r1
 8013ba8:	d10b      	bne.n	8013bc2 <__any_on+0x3e>
 8013baa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d803      	bhi.n	8013bba <__any_on+0x36>
 8013bb2:	2000      	movs	r0, #0
 8013bb4:	bd10      	pop	{r4, pc}
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	e7f7      	b.n	8013baa <__any_on+0x26>
 8013bba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013bbe:	2900      	cmp	r1, #0
 8013bc0:	d0f5      	beq.n	8013bae <__any_on+0x2a>
 8013bc2:	2001      	movs	r0, #1
 8013bc4:	e7f6      	b.n	8013bb4 <__any_on+0x30>

08013bc6 <sulp>:
 8013bc6:	b570      	push	{r4, r5, r6, lr}
 8013bc8:	4604      	mov	r4, r0
 8013bca:	460d      	mov	r5, r1
 8013bcc:	ec45 4b10 	vmov	d0, r4, r5
 8013bd0:	4616      	mov	r6, r2
 8013bd2:	f7ff feb7 	bl	8013944 <__ulp>
 8013bd6:	ec51 0b10 	vmov	r0, r1, d0
 8013bda:	b17e      	cbz	r6, 8013bfc <sulp+0x36>
 8013bdc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013be0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	dd09      	ble.n	8013bfc <sulp+0x36>
 8013be8:	051b      	lsls	r3, r3, #20
 8013bea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013bee:	2400      	movs	r4, #0
 8013bf0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013bf4:	4622      	mov	r2, r4
 8013bf6:	462b      	mov	r3, r5
 8013bf8:	f7ec fd26 	bl	8000648 <__aeabi_dmul>
 8013bfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08013c00 <_strtod_l>:
 8013c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c04:	ed2d 8b02 	vpush	{d8}
 8013c08:	b09b      	sub	sp, #108	; 0x6c
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8013c0e:	2200      	movs	r2, #0
 8013c10:	9216      	str	r2, [sp, #88]	; 0x58
 8013c12:	460d      	mov	r5, r1
 8013c14:	f04f 0800 	mov.w	r8, #0
 8013c18:	f04f 0900 	mov.w	r9, #0
 8013c1c:	460a      	mov	r2, r1
 8013c1e:	9215      	str	r2, [sp, #84]	; 0x54
 8013c20:	7811      	ldrb	r1, [r2, #0]
 8013c22:	292b      	cmp	r1, #43	; 0x2b
 8013c24:	d04c      	beq.n	8013cc0 <_strtod_l+0xc0>
 8013c26:	d83a      	bhi.n	8013c9e <_strtod_l+0x9e>
 8013c28:	290d      	cmp	r1, #13
 8013c2a:	d834      	bhi.n	8013c96 <_strtod_l+0x96>
 8013c2c:	2908      	cmp	r1, #8
 8013c2e:	d834      	bhi.n	8013c9a <_strtod_l+0x9a>
 8013c30:	2900      	cmp	r1, #0
 8013c32:	d03d      	beq.n	8013cb0 <_strtod_l+0xb0>
 8013c34:	2200      	movs	r2, #0
 8013c36:	920a      	str	r2, [sp, #40]	; 0x28
 8013c38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8013c3a:	7832      	ldrb	r2, [r6, #0]
 8013c3c:	2a30      	cmp	r2, #48	; 0x30
 8013c3e:	f040 80b4 	bne.w	8013daa <_strtod_l+0x1aa>
 8013c42:	7872      	ldrb	r2, [r6, #1]
 8013c44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013c48:	2a58      	cmp	r2, #88	; 0x58
 8013c4a:	d170      	bne.n	8013d2e <_strtod_l+0x12e>
 8013c4c:	9302      	str	r3, [sp, #8]
 8013c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c50:	9301      	str	r3, [sp, #4]
 8013c52:	ab16      	add	r3, sp, #88	; 0x58
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	4a8e      	ldr	r2, [pc, #568]	; (8013e90 <_strtod_l+0x290>)
 8013c58:	ab17      	add	r3, sp, #92	; 0x5c
 8013c5a:	a915      	add	r1, sp, #84	; 0x54
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	f001 f92f 	bl	8014ec0 <__gethex>
 8013c62:	f010 070f 	ands.w	r7, r0, #15
 8013c66:	4605      	mov	r5, r0
 8013c68:	d005      	beq.n	8013c76 <_strtod_l+0x76>
 8013c6a:	2f06      	cmp	r7, #6
 8013c6c:	d12a      	bne.n	8013cc4 <_strtod_l+0xc4>
 8013c6e:	3601      	adds	r6, #1
 8013c70:	2300      	movs	r3, #0
 8013c72:	9615      	str	r6, [sp, #84]	; 0x54
 8013c74:	930a      	str	r3, [sp, #40]	; 0x28
 8013c76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	f040 857f 	bne.w	801477c <_strtod_l+0xb7c>
 8013c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c80:	b1db      	cbz	r3, 8013cba <_strtod_l+0xba>
 8013c82:	4642      	mov	r2, r8
 8013c84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013c88:	ec43 2b10 	vmov	d0, r2, r3
 8013c8c:	b01b      	add	sp, #108	; 0x6c
 8013c8e:	ecbd 8b02 	vpop	{d8}
 8013c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c96:	2920      	cmp	r1, #32
 8013c98:	d1cc      	bne.n	8013c34 <_strtod_l+0x34>
 8013c9a:	3201      	adds	r2, #1
 8013c9c:	e7bf      	b.n	8013c1e <_strtod_l+0x1e>
 8013c9e:	292d      	cmp	r1, #45	; 0x2d
 8013ca0:	d1c8      	bne.n	8013c34 <_strtod_l+0x34>
 8013ca2:	2101      	movs	r1, #1
 8013ca4:	910a      	str	r1, [sp, #40]	; 0x28
 8013ca6:	1c51      	adds	r1, r2, #1
 8013ca8:	9115      	str	r1, [sp, #84]	; 0x54
 8013caa:	7852      	ldrb	r2, [r2, #1]
 8013cac:	2a00      	cmp	r2, #0
 8013cae:	d1c3      	bne.n	8013c38 <_strtod_l+0x38>
 8013cb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013cb2:	9515      	str	r5, [sp, #84]	; 0x54
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	f040 855f 	bne.w	8014778 <_strtod_l+0xb78>
 8013cba:	4642      	mov	r2, r8
 8013cbc:	464b      	mov	r3, r9
 8013cbe:	e7e3      	b.n	8013c88 <_strtod_l+0x88>
 8013cc0:	2100      	movs	r1, #0
 8013cc2:	e7ef      	b.n	8013ca4 <_strtod_l+0xa4>
 8013cc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013cc6:	b13a      	cbz	r2, 8013cd8 <_strtod_l+0xd8>
 8013cc8:	2135      	movs	r1, #53	; 0x35
 8013cca:	a818      	add	r0, sp, #96	; 0x60
 8013ccc:	f7ff ff37 	bl	8013b3e <__copybits>
 8013cd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	f7ff fb0a 	bl	80132ec <_Bfree>
 8013cd8:	3f01      	subs	r7, #1
 8013cda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013cdc:	2f04      	cmp	r7, #4
 8013cde:	d806      	bhi.n	8013cee <_strtod_l+0xee>
 8013ce0:	e8df f007 	tbb	[pc, r7]
 8013ce4:	201d0314 	.word	0x201d0314
 8013ce8:	14          	.byte	0x14
 8013ce9:	00          	.byte	0x00
 8013cea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8013cee:	05e9      	lsls	r1, r5, #23
 8013cf0:	bf48      	it	mi
 8013cf2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013cf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013cfa:	0d1b      	lsrs	r3, r3, #20
 8013cfc:	051b      	lsls	r3, r3, #20
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d1b9      	bne.n	8013c76 <_strtod_l+0x76>
 8013d02:	f7fe faf7 	bl	80122f4 <__errno>
 8013d06:	2322      	movs	r3, #34	; 0x22
 8013d08:	6003      	str	r3, [r0, #0]
 8013d0a:	e7b4      	b.n	8013c76 <_strtod_l+0x76>
 8013d0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8013d10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013d14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013d18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8013d1c:	e7e7      	b.n	8013cee <_strtod_l+0xee>
 8013d1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013e98 <_strtod_l+0x298>
 8013d22:	e7e4      	b.n	8013cee <_strtod_l+0xee>
 8013d24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013d28:	f04f 38ff 	mov.w	r8, #4294967295
 8013d2c:	e7df      	b.n	8013cee <_strtod_l+0xee>
 8013d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d30:	1c5a      	adds	r2, r3, #1
 8013d32:	9215      	str	r2, [sp, #84]	; 0x54
 8013d34:	785b      	ldrb	r3, [r3, #1]
 8013d36:	2b30      	cmp	r3, #48	; 0x30
 8013d38:	d0f9      	beq.n	8013d2e <_strtod_l+0x12e>
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d09b      	beq.n	8013c76 <_strtod_l+0x76>
 8013d3e:	2301      	movs	r3, #1
 8013d40:	f04f 0a00 	mov.w	sl, #0
 8013d44:	9304      	str	r3, [sp, #16]
 8013d46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013d4e:	46d3      	mov	fp, sl
 8013d50:	220a      	movs	r2, #10
 8013d52:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013d54:	7806      	ldrb	r6, [r0, #0]
 8013d56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013d5a:	b2d9      	uxtb	r1, r3
 8013d5c:	2909      	cmp	r1, #9
 8013d5e:	d926      	bls.n	8013dae <_strtod_l+0x1ae>
 8013d60:	494c      	ldr	r1, [pc, #304]	; (8013e94 <_strtod_l+0x294>)
 8013d62:	2201      	movs	r2, #1
 8013d64:	f000 ffe6 	bl	8014d34 <strncmp>
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	d030      	beq.n	8013dce <_strtod_l+0x1ce>
 8013d6c:	2000      	movs	r0, #0
 8013d6e:	4632      	mov	r2, r6
 8013d70:	9005      	str	r0, [sp, #20]
 8013d72:	465e      	mov	r6, fp
 8013d74:	4603      	mov	r3, r0
 8013d76:	2a65      	cmp	r2, #101	; 0x65
 8013d78:	d001      	beq.n	8013d7e <_strtod_l+0x17e>
 8013d7a:	2a45      	cmp	r2, #69	; 0x45
 8013d7c:	d113      	bne.n	8013da6 <_strtod_l+0x1a6>
 8013d7e:	b91e      	cbnz	r6, 8013d88 <_strtod_l+0x188>
 8013d80:	9a04      	ldr	r2, [sp, #16]
 8013d82:	4302      	orrs	r2, r0
 8013d84:	d094      	beq.n	8013cb0 <_strtod_l+0xb0>
 8013d86:	2600      	movs	r6, #0
 8013d88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013d8a:	1c6a      	adds	r2, r5, #1
 8013d8c:	9215      	str	r2, [sp, #84]	; 0x54
 8013d8e:	786a      	ldrb	r2, [r5, #1]
 8013d90:	2a2b      	cmp	r2, #43	; 0x2b
 8013d92:	d074      	beq.n	8013e7e <_strtod_l+0x27e>
 8013d94:	2a2d      	cmp	r2, #45	; 0x2d
 8013d96:	d078      	beq.n	8013e8a <_strtod_l+0x28a>
 8013d98:	f04f 0c00 	mov.w	ip, #0
 8013d9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013da0:	2909      	cmp	r1, #9
 8013da2:	d97f      	bls.n	8013ea4 <_strtod_l+0x2a4>
 8013da4:	9515      	str	r5, [sp, #84]	; 0x54
 8013da6:	2700      	movs	r7, #0
 8013da8:	e09e      	b.n	8013ee8 <_strtod_l+0x2e8>
 8013daa:	2300      	movs	r3, #0
 8013dac:	e7c8      	b.n	8013d40 <_strtod_l+0x140>
 8013dae:	f1bb 0f08 	cmp.w	fp, #8
 8013db2:	bfd8      	it	le
 8013db4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013db6:	f100 0001 	add.w	r0, r0, #1
 8013dba:	bfda      	itte	le
 8013dbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8013dc0:	9309      	strle	r3, [sp, #36]	; 0x24
 8013dc2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013dc6:	f10b 0b01 	add.w	fp, fp, #1
 8013dca:	9015      	str	r0, [sp, #84]	; 0x54
 8013dcc:	e7c1      	b.n	8013d52 <_strtod_l+0x152>
 8013dce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013dd0:	1c5a      	adds	r2, r3, #1
 8013dd2:	9215      	str	r2, [sp, #84]	; 0x54
 8013dd4:	785a      	ldrb	r2, [r3, #1]
 8013dd6:	f1bb 0f00 	cmp.w	fp, #0
 8013dda:	d037      	beq.n	8013e4c <_strtod_l+0x24c>
 8013ddc:	9005      	str	r0, [sp, #20]
 8013dde:	465e      	mov	r6, fp
 8013de0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013de4:	2b09      	cmp	r3, #9
 8013de6:	d912      	bls.n	8013e0e <_strtod_l+0x20e>
 8013de8:	2301      	movs	r3, #1
 8013dea:	e7c4      	b.n	8013d76 <_strtod_l+0x176>
 8013dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013dee:	1c5a      	adds	r2, r3, #1
 8013df0:	9215      	str	r2, [sp, #84]	; 0x54
 8013df2:	785a      	ldrb	r2, [r3, #1]
 8013df4:	3001      	adds	r0, #1
 8013df6:	2a30      	cmp	r2, #48	; 0x30
 8013df8:	d0f8      	beq.n	8013dec <_strtod_l+0x1ec>
 8013dfa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013dfe:	2b08      	cmp	r3, #8
 8013e00:	f200 84c1 	bhi.w	8014786 <_strtod_l+0xb86>
 8013e04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e06:	9005      	str	r0, [sp, #20]
 8013e08:	2000      	movs	r0, #0
 8013e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e0c:	4606      	mov	r6, r0
 8013e0e:	3a30      	subs	r2, #48	; 0x30
 8013e10:	f100 0301 	add.w	r3, r0, #1
 8013e14:	d014      	beq.n	8013e40 <_strtod_l+0x240>
 8013e16:	9905      	ldr	r1, [sp, #20]
 8013e18:	4419      	add	r1, r3
 8013e1a:	9105      	str	r1, [sp, #20]
 8013e1c:	4633      	mov	r3, r6
 8013e1e:	eb00 0c06 	add.w	ip, r0, r6
 8013e22:	210a      	movs	r1, #10
 8013e24:	4563      	cmp	r3, ip
 8013e26:	d113      	bne.n	8013e50 <_strtod_l+0x250>
 8013e28:	1833      	adds	r3, r6, r0
 8013e2a:	2b08      	cmp	r3, #8
 8013e2c:	f106 0601 	add.w	r6, r6, #1
 8013e30:	4406      	add	r6, r0
 8013e32:	dc1a      	bgt.n	8013e6a <_strtod_l+0x26a>
 8013e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e36:	230a      	movs	r3, #10
 8013e38:	fb03 2301 	mla	r3, r3, r1, r2
 8013e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8013e3e:	2300      	movs	r3, #0
 8013e40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013e42:	1c51      	adds	r1, r2, #1
 8013e44:	9115      	str	r1, [sp, #84]	; 0x54
 8013e46:	7852      	ldrb	r2, [r2, #1]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	e7c9      	b.n	8013de0 <_strtod_l+0x1e0>
 8013e4c:	4658      	mov	r0, fp
 8013e4e:	e7d2      	b.n	8013df6 <_strtod_l+0x1f6>
 8013e50:	2b08      	cmp	r3, #8
 8013e52:	f103 0301 	add.w	r3, r3, #1
 8013e56:	dc03      	bgt.n	8013e60 <_strtod_l+0x260>
 8013e58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013e5a:	434f      	muls	r7, r1
 8013e5c:	9709      	str	r7, [sp, #36]	; 0x24
 8013e5e:	e7e1      	b.n	8013e24 <_strtod_l+0x224>
 8013e60:	2b10      	cmp	r3, #16
 8013e62:	bfd8      	it	le
 8013e64:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013e68:	e7dc      	b.n	8013e24 <_strtod_l+0x224>
 8013e6a:	2e10      	cmp	r6, #16
 8013e6c:	bfdc      	itt	le
 8013e6e:	230a      	movle	r3, #10
 8013e70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013e74:	e7e3      	b.n	8013e3e <_strtod_l+0x23e>
 8013e76:	2300      	movs	r3, #0
 8013e78:	9305      	str	r3, [sp, #20]
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	e780      	b.n	8013d80 <_strtod_l+0x180>
 8013e7e:	f04f 0c00 	mov.w	ip, #0
 8013e82:	1caa      	adds	r2, r5, #2
 8013e84:	9215      	str	r2, [sp, #84]	; 0x54
 8013e86:	78aa      	ldrb	r2, [r5, #2]
 8013e88:	e788      	b.n	8013d9c <_strtod_l+0x19c>
 8013e8a:	f04f 0c01 	mov.w	ip, #1
 8013e8e:	e7f8      	b.n	8013e82 <_strtod_l+0x282>
 8013e90:	080189d8 	.word	0x080189d8
 8013e94:	080189d4 	.word	0x080189d4
 8013e98:	7ff00000 	.word	0x7ff00000
 8013e9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013e9e:	1c51      	adds	r1, r2, #1
 8013ea0:	9115      	str	r1, [sp, #84]	; 0x54
 8013ea2:	7852      	ldrb	r2, [r2, #1]
 8013ea4:	2a30      	cmp	r2, #48	; 0x30
 8013ea6:	d0f9      	beq.n	8013e9c <_strtod_l+0x29c>
 8013ea8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013eac:	2908      	cmp	r1, #8
 8013eae:	f63f af7a 	bhi.w	8013da6 <_strtod_l+0x1a6>
 8013eb2:	3a30      	subs	r2, #48	; 0x30
 8013eb4:	9208      	str	r2, [sp, #32]
 8013eb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013eb8:	920c      	str	r2, [sp, #48]	; 0x30
 8013eba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013ebc:	1c57      	adds	r7, r2, #1
 8013ebe:	9715      	str	r7, [sp, #84]	; 0x54
 8013ec0:	7852      	ldrb	r2, [r2, #1]
 8013ec2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013ec6:	f1be 0f09 	cmp.w	lr, #9
 8013eca:	d938      	bls.n	8013f3e <_strtod_l+0x33e>
 8013ecc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013ece:	1a7f      	subs	r7, r7, r1
 8013ed0:	2f08      	cmp	r7, #8
 8013ed2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013ed6:	dc03      	bgt.n	8013ee0 <_strtod_l+0x2e0>
 8013ed8:	9908      	ldr	r1, [sp, #32]
 8013eda:	428f      	cmp	r7, r1
 8013edc:	bfa8      	it	ge
 8013ede:	460f      	movge	r7, r1
 8013ee0:	f1bc 0f00 	cmp.w	ip, #0
 8013ee4:	d000      	beq.n	8013ee8 <_strtod_l+0x2e8>
 8013ee6:	427f      	negs	r7, r7
 8013ee8:	2e00      	cmp	r6, #0
 8013eea:	d14f      	bne.n	8013f8c <_strtod_l+0x38c>
 8013eec:	9904      	ldr	r1, [sp, #16]
 8013eee:	4301      	orrs	r1, r0
 8013ef0:	f47f aec1 	bne.w	8013c76 <_strtod_l+0x76>
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	f47f aedb 	bne.w	8013cb0 <_strtod_l+0xb0>
 8013efa:	2a69      	cmp	r2, #105	; 0x69
 8013efc:	d029      	beq.n	8013f52 <_strtod_l+0x352>
 8013efe:	dc26      	bgt.n	8013f4e <_strtod_l+0x34e>
 8013f00:	2a49      	cmp	r2, #73	; 0x49
 8013f02:	d026      	beq.n	8013f52 <_strtod_l+0x352>
 8013f04:	2a4e      	cmp	r2, #78	; 0x4e
 8013f06:	f47f aed3 	bne.w	8013cb0 <_strtod_l+0xb0>
 8013f0a:	499b      	ldr	r1, [pc, #620]	; (8014178 <_strtod_l+0x578>)
 8013f0c:	a815      	add	r0, sp, #84	; 0x54
 8013f0e:	f001 fa17 	bl	8015340 <__match>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	f43f aecc 	beq.w	8013cb0 <_strtod_l+0xb0>
 8013f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	2b28      	cmp	r3, #40	; 0x28
 8013f1e:	d12f      	bne.n	8013f80 <_strtod_l+0x380>
 8013f20:	4996      	ldr	r1, [pc, #600]	; (801417c <_strtod_l+0x57c>)
 8013f22:	aa18      	add	r2, sp, #96	; 0x60
 8013f24:	a815      	add	r0, sp, #84	; 0x54
 8013f26:	f001 fa1f 	bl	8015368 <__hexnan>
 8013f2a:	2805      	cmp	r0, #5
 8013f2c:	d128      	bne.n	8013f80 <_strtod_l+0x380>
 8013f2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013f34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013f38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013f3c:	e69b      	b.n	8013c76 <_strtod_l+0x76>
 8013f3e:	9f08      	ldr	r7, [sp, #32]
 8013f40:	210a      	movs	r1, #10
 8013f42:	fb01 2107 	mla	r1, r1, r7, r2
 8013f46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013f4a:	9208      	str	r2, [sp, #32]
 8013f4c:	e7b5      	b.n	8013eba <_strtod_l+0x2ba>
 8013f4e:	2a6e      	cmp	r2, #110	; 0x6e
 8013f50:	e7d9      	b.n	8013f06 <_strtod_l+0x306>
 8013f52:	498b      	ldr	r1, [pc, #556]	; (8014180 <_strtod_l+0x580>)
 8013f54:	a815      	add	r0, sp, #84	; 0x54
 8013f56:	f001 f9f3 	bl	8015340 <__match>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	f43f aea8 	beq.w	8013cb0 <_strtod_l+0xb0>
 8013f60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f62:	4988      	ldr	r1, [pc, #544]	; (8014184 <_strtod_l+0x584>)
 8013f64:	3b01      	subs	r3, #1
 8013f66:	a815      	add	r0, sp, #84	; 0x54
 8013f68:	9315      	str	r3, [sp, #84]	; 0x54
 8013f6a:	f001 f9e9 	bl	8015340 <__match>
 8013f6e:	b910      	cbnz	r0, 8013f76 <_strtod_l+0x376>
 8013f70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f72:	3301      	adds	r3, #1
 8013f74:	9315      	str	r3, [sp, #84]	; 0x54
 8013f76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014194 <_strtod_l+0x594>
 8013f7a:	f04f 0800 	mov.w	r8, #0
 8013f7e:	e67a      	b.n	8013c76 <_strtod_l+0x76>
 8013f80:	4881      	ldr	r0, [pc, #516]	; (8014188 <_strtod_l+0x588>)
 8013f82:	f000 fef9 	bl	8014d78 <nan>
 8013f86:	ec59 8b10 	vmov	r8, r9, d0
 8013f8a:	e674      	b.n	8013c76 <_strtod_l+0x76>
 8013f8c:	9b05      	ldr	r3, [sp, #20]
 8013f8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f90:	1afb      	subs	r3, r7, r3
 8013f92:	f1bb 0f00 	cmp.w	fp, #0
 8013f96:	bf08      	it	eq
 8013f98:	46b3      	moveq	fp, r6
 8013f9a:	2e10      	cmp	r6, #16
 8013f9c:	9308      	str	r3, [sp, #32]
 8013f9e:	4635      	mov	r5, r6
 8013fa0:	bfa8      	it	ge
 8013fa2:	2510      	movge	r5, #16
 8013fa4:	f7ec fad6 	bl	8000554 <__aeabi_ui2d>
 8013fa8:	2e09      	cmp	r6, #9
 8013faa:	4680      	mov	r8, r0
 8013fac:	4689      	mov	r9, r1
 8013fae:	dd13      	ble.n	8013fd8 <_strtod_l+0x3d8>
 8013fb0:	4b76      	ldr	r3, [pc, #472]	; (801418c <_strtod_l+0x58c>)
 8013fb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013fb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013fba:	f7ec fb45 	bl	8000648 <__aeabi_dmul>
 8013fbe:	4680      	mov	r8, r0
 8013fc0:	4650      	mov	r0, sl
 8013fc2:	4689      	mov	r9, r1
 8013fc4:	f7ec fac6 	bl	8000554 <__aeabi_ui2d>
 8013fc8:	4602      	mov	r2, r0
 8013fca:	460b      	mov	r3, r1
 8013fcc:	4640      	mov	r0, r8
 8013fce:	4649      	mov	r1, r9
 8013fd0:	f7ec f984 	bl	80002dc <__adddf3>
 8013fd4:	4680      	mov	r8, r0
 8013fd6:	4689      	mov	r9, r1
 8013fd8:	2e0f      	cmp	r6, #15
 8013fda:	dc38      	bgt.n	801404e <_strtod_l+0x44e>
 8013fdc:	9b08      	ldr	r3, [sp, #32]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	f43f ae49 	beq.w	8013c76 <_strtod_l+0x76>
 8013fe4:	dd24      	ble.n	8014030 <_strtod_l+0x430>
 8013fe6:	2b16      	cmp	r3, #22
 8013fe8:	dc0b      	bgt.n	8014002 <_strtod_l+0x402>
 8013fea:	4968      	ldr	r1, [pc, #416]	; (801418c <_strtod_l+0x58c>)
 8013fec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ff4:	4642      	mov	r2, r8
 8013ff6:	464b      	mov	r3, r9
 8013ff8:	f7ec fb26 	bl	8000648 <__aeabi_dmul>
 8013ffc:	4680      	mov	r8, r0
 8013ffe:	4689      	mov	r9, r1
 8014000:	e639      	b.n	8013c76 <_strtod_l+0x76>
 8014002:	9a08      	ldr	r2, [sp, #32]
 8014004:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014008:	4293      	cmp	r3, r2
 801400a:	db20      	blt.n	801404e <_strtod_l+0x44e>
 801400c:	4c5f      	ldr	r4, [pc, #380]	; (801418c <_strtod_l+0x58c>)
 801400e:	f1c6 060f 	rsb	r6, r6, #15
 8014012:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014016:	4642      	mov	r2, r8
 8014018:	464b      	mov	r3, r9
 801401a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801401e:	f7ec fb13 	bl	8000648 <__aeabi_dmul>
 8014022:	9b08      	ldr	r3, [sp, #32]
 8014024:	1b9e      	subs	r6, r3, r6
 8014026:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801402a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801402e:	e7e3      	b.n	8013ff8 <_strtod_l+0x3f8>
 8014030:	9b08      	ldr	r3, [sp, #32]
 8014032:	3316      	adds	r3, #22
 8014034:	db0b      	blt.n	801404e <_strtod_l+0x44e>
 8014036:	9b05      	ldr	r3, [sp, #20]
 8014038:	1bdf      	subs	r7, r3, r7
 801403a:	4b54      	ldr	r3, [pc, #336]	; (801418c <_strtod_l+0x58c>)
 801403c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014044:	4640      	mov	r0, r8
 8014046:	4649      	mov	r1, r9
 8014048:	f7ec fc28 	bl	800089c <__aeabi_ddiv>
 801404c:	e7d6      	b.n	8013ffc <_strtod_l+0x3fc>
 801404e:	9b08      	ldr	r3, [sp, #32]
 8014050:	1b75      	subs	r5, r6, r5
 8014052:	441d      	add	r5, r3
 8014054:	2d00      	cmp	r5, #0
 8014056:	dd70      	ble.n	801413a <_strtod_l+0x53a>
 8014058:	f015 030f 	ands.w	r3, r5, #15
 801405c:	d00a      	beq.n	8014074 <_strtod_l+0x474>
 801405e:	494b      	ldr	r1, [pc, #300]	; (801418c <_strtod_l+0x58c>)
 8014060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014064:	4642      	mov	r2, r8
 8014066:	464b      	mov	r3, r9
 8014068:	e9d1 0100 	ldrd	r0, r1, [r1]
 801406c:	f7ec faec 	bl	8000648 <__aeabi_dmul>
 8014070:	4680      	mov	r8, r0
 8014072:	4689      	mov	r9, r1
 8014074:	f035 050f 	bics.w	r5, r5, #15
 8014078:	d04d      	beq.n	8014116 <_strtod_l+0x516>
 801407a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801407e:	dd22      	ble.n	80140c6 <_strtod_l+0x4c6>
 8014080:	2500      	movs	r5, #0
 8014082:	46ab      	mov	fp, r5
 8014084:	9509      	str	r5, [sp, #36]	; 0x24
 8014086:	9505      	str	r5, [sp, #20]
 8014088:	2322      	movs	r3, #34	; 0x22
 801408a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014194 <_strtod_l+0x594>
 801408e:	6023      	str	r3, [r4, #0]
 8014090:	f04f 0800 	mov.w	r8, #0
 8014094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014096:	2b00      	cmp	r3, #0
 8014098:	f43f aded 	beq.w	8013c76 <_strtod_l+0x76>
 801409c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801409e:	4620      	mov	r0, r4
 80140a0:	f7ff f924 	bl	80132ec <_Bfree>
 80140a4:	9905      	ldr	r1, [sp, #20]
 80140a6:	4620      	mov	r0, r4
 80140a8:	f7ff f920 	bl	80132ec <_Bfree>
 80140ac:	4659      	mov	r1, fp
 80140ae:	4620      	mov	r0, r4
 80140b0:	f7ff f91c 	bl	80132ec <_Bfree>
 80140b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140b6:	4620      	mov	r0, r4
 80140b8:	f7ff f918 	bl	80132ec <_Bfree>
 80140bc:	4629      	mov	r1, r5
 80140be:	4620      	mov	r0, r4
 80140c0:	f7ff f914 	bl	80132ec <_Bfree>
 80140c4:	e5d7      	b.n	8013c76 <_strtod_l+0x76>
 80140c6:	4b32      	ldr	r3, [pc, #200]	; (8014190 <_strtod_l+0x590>)
 80140c8:	9304      	str	r3, [sp, #16]
 80140ca:	2300      	movs	r3, #0
 80140cc:	112d      	asrs	r5, r5, #4
 80140ce:	4640      	mov	r0, r8
 80140d0:	4649      	mov	r1, r9
 80140d2:	469a      	mov	sl, r3
 80140d4:	2d01      	cmp	r5, #1
 80140d6:	dc21      	bgt.n	801411c <_strtod_l+0x51c>
 80140d8:	b10b      	cbz	r3, 80140de <_strtod_l+0x4de>
 80140da:	4680      	mov	r8, r0
 80140dc:	4689      	mov	r9, r1
 80140de:	492c      	ldr	r1, [pc, #176]	; (8014190 <_strtod_l+0x590>)
 80140e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80140e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80140e8:	4642      	mov	r2, r8
 80140ea:	464b      	mov	r3, r9
 80140ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140f0:	f7ec faaa 	bl	8000648 <__aeabi_dmul>
 80140f4:	4b27      	ldr	r3, [pc, #156]	; (8014194 <_strtod_l+0x594>)
 80140f6:	460a      	mov	r2, r1
 80140f8:	400b      	ands	r3, r1
 80140fa:	4927      	ldr	r1, [pc, #156]	; (8014198 <_strtod_l+0x598>)
 80140fc:	428b      	cmp	r3, r1
 80140fe:	4680      	mov	r8, r0
 8014100:	d8be      	bhi.n	8014080 <_strtod_l+0x480>
 8014102:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014106:	428b      	cmp	r3, r1
 8014108:	bf86      	itte	hi
 801410a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801419c <_strtod_l+0x59c>
 801410e:	f04f 38ff 	movhi.w	r8, #4294967295
 8014112:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014116:	2300      	movs	r3, #0
 8014118:	9304      	str	r3, [sp, #16]
 801411a:	e07b      	b.n	8014214 <_strtod_l+0x614>
 801411c:	07ea      	lsls	r2, r5, #31
 801411e:	d505      	bpl.n	801412c <_strtod_l+0x52c>
 8014120:	9b04      	ldr	r3, [sp, #16]
 8014122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014126:	f7ec fa8f 	bl	8000648 <__aeabi_dmul>
 801412a:	2301      	movs	r3, #1
 801412c:	9a04      	ldr	r2, [sp, #16]
 801412e:	3208      	adds	r2, #8
 8014130:	f10a 0a01 	add.w	sl, sl, #1
 8014134:	106d      	asrs	r5, r5, #1
 8014136:	9204      	str	r2, [sp, #16]
 8014138:	e7cc      	b.n	80140d4 <_strtod_l+0x4d4>
 801413a:	d0ec      	beq.n	8014116 <_strtod_l+0x516>
 801413c:	426d      	negs	r5, r5
 801413e:	f015 020f 	ands.w	r2, r5, #15
 8014142:	d00a      	beq.n	801415a <_strtod_l+0x55a>
 8014144:	4b11      	ldr	r3, [pc, #68]	; (801418c <_strtod_l+0x58c>)
 8014146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801414a:	4640      	mov	r0, r8
 801414c:	4649      	mov	r1, r9
 801414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014152:	f7ec fba3 	bl	800089c <__aeabi_ddiv>
 8014156:	4680      	mov	r8, r0
 8014158:	4689      	mov	r9, r1
 801415a:	112d      	asrs	r5, r5, #4
 801415c:	d0db      	beq.n	8014116 <_strtod_l+0x516>
 801415e:	2d1f      	cmp	r5, #31
 8014160:	dd1e      	ble.n	80141a0 <_strtod_l+0x5a0>
 8014162:	2500      	movs	r5, #0
 8014164:	46ab      	mov	fp, r5
 8014166:	9509      	str	r5, [sp, #36]	; 0x24
 8014168:	9505      	str	r5, [sp, #20]
 801416a:	2322      	movs	r3, #34	; 0x22
 801416c:	f04f 0800 	mov.w	r8, #0
 8014170:	f04f 0900 	mov.w	r9, #0
 8014174:	6023      	str	r3, [r4, #0]
 8014176:	e78d      	b.n	8014094 <_strtod_l+0x494>
 8014178:	080187c5 	.word	0x080187c5
 801417c:	080189ec 	.word	0x080189ec
 8014180:	080187bd 	.word	0x080187bd
 8014184:	080187f4 	.word	0x080187f4
 8014188:	08018b7d 	.word	0x08018b7d
 801418c:	08018900 	.word	0x08018900
 8014190:	080188d8 	.word	0x080188d8
 8014194:	7ff00000 	.word	0x7ff00000
 8014198:	7ca00000 	.word	0x7ca00000
 801419c:	7fefffff 	.word	0x7fefffff
 80141a0:	f015 0310 	ands.w	r3, r5, #16
 80141a4:	bf18      	it	ne
 80141a6:	236a      	movne	r3, #106	; 0x6a
 80141a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801454c <_strtod_l+0x94c>
 80141ac:	9304      	str	r3, [sp, #16]
 80141ae:	4640      	mov	r0, r8
 80141b0:	4649      	mov	r1, r9
 80141b2:	2300      	movs	r3, #0
 80141b4:	07ea      	lsls	r2, r5, #31
 80141b6:	d504      	bpl.n	80141c2 <_strtod_l+0x5c2>
 80141b8:	e9da 2300 	ldrd	r2, r3, [sl]
 80141bc:	f7ec fa44 	bl	8000648 <__aeabi_dmul>
 80141c0:	2301      	movs	r3, #1
 80141c2:	106d      	asrs	r5, r5, #1
 80141c4:	f10a 0a08 	add.w	sl, sl, #8
 80141c8:	d1f4      	bne.n	80141b4 <_strtod_l+0x5b4>
 80141ca:	b10b      	cbz	r3, 80141d0 <_strtod_l+0x5d0>
 80141cc:	4680      	mov	r8, r0
 80141ce:	4689      	mov	r9, r1
 80141d0:	9b04      	ldr	r3, [sp, #16]
 80141d2:	b1bb      	cbz	r3, 8014204 <_strtod_l+0x604>
 80141d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80141d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80141dc:	2b00      	cmp	r3, #0
 80141de:	4649      	mov	r1, r9
 80141e0:	dd10      	ble.n	8014204 <_strtod_l+0x604>
 80141e2:	2b1f      	cmp	r3, #31
 80141e4:	f340 811e 	ble.w	8014424 <_strtod_l+0x824>
 80141e8:	2b34      	cmp	r3, #52	; 0x34
 80141ea:	bfde      	ittt	le
 80141ec:	f04f 33ff 	movle.w	r3, #4294967295
 80141f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80141f4:	4093      	lslle	r3, r2
 80141f6:	f04f 0800 	mov.w	r8, #0
 80141fa:	bfcc      	ite	gt
 80141fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014200:	ea03 0901 	andle.w	r9, r3, r1
 8014204:	2200      	movs	r2, #0
 8014206:	2300      	movs	r3, #0
 8014208:	4640      	mov	r0, r8
 801420a:	4649      	mov	r1, r9
 801420c:	f7ec fc84 	bl	8000b18 <__aeabi_dcmpeq>
 8014210:	2800      	cmp	r0, #0
 8014212:	d1a6      	bne.n	8014162 <_strtod_l+0x562>
 8014214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014216:	9300      	str	r3, [sp, #0]
 8014218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801421a:	4633      	mov	r3, r6
 801421c:	465a      	mov	r2, fp
 801421e:	4620      	mov	r0, r4
 8014220:	f7ff f8cc 	bl	80133bc <__s2b>
 8014224:	9009      	str	r0, [sp, #36]	; 0x24
 8014226:	2800      	cmp	r0, #0
 8014228:	f43f af2a 	beq.w	8014080 <_strtod_l+0x480>
 801422c:	9a08      	ldr	r2, [sp, #32]
 801422e:	9b05      	ldr	r3, [sp, #20]
 8014230:	2a00      	cmp	r2, #0
 8014232:	eba3 0307 	sub.w	r3, r3, r7
 8014236:	bfa8      	it	ge
 8014238:	2300      	movge	r3, #0
 801423a:	930c      	str	r3, [sp, #48]	; 0x30
 801423c:	2500      	movs	r5, #0
 801423e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014242:	9312      	str	r3, [sp, #72]	; 0x48
 8014244:	46ab      	mov	fp, r5
 8014246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014248:	4620      	mov	r0, r4
 801424a:	6859      	ldr	r1, [r3, #4]
 801424c:	f7ff f80e 	bl	801326c <_Balloc>
 8014250:	9005      	str	r0, [sp, #20]
 8014252:	2800      	cmp	r0, #0
 8014254:	f43f af18 	beq.w	8014088 <_strtod_l+0x488>
 8014258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801425a:	691a      	ldr	r2, [r3, #16]
 801425c:	3202      	adds	r2, #2
 801425e:	f103 010c 	add.w	r1, r3, #12
 8014262:	0092      	lsls	r2, r2, #2
 8014264:	300c      	adds	r0, #12
 8014266:	f7fe f872 	bl	801234e <memcpy>
 801426a:	ec49 8b10 	vmov	d0, r8, r9
 801426e:	aa18      	add	r2, sp, #96	; 0x60
 8014270:	a917      	add	r1, sp, #92	; 0x5c
 8014272:	4620      	mov	r0, r4
 8014274:	f7ff fbd6 	bl	8013a24 <__d2b>
 8014278:	ec49 8b18 	vmov	d8, r8, r9
 801427c:	9016      	str	r0, [sp, #88]	; 0x58
 801427e:	2800      	cmp	r0, #0
 8014280:	f43f af02 	beq.w	8014088 <_strtod_l+0x488>
 8014284:	2101      	movs	r1, #1
 8014286:	4620      	mov	r0, r4
 8014288:	f7ff f930 	bl	80134ec <__i2b>
 801428c:	4683      	mov	fp, r0
 801428e:	2800      	cmp	r0, #0
 8014290:	f43f aefa 	beq.w	8014088 <_strtod_l+0x488>
 8014294:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014296:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014298:	2e00      	cmp	r6, #0
 801429a:	bfab      	itete	ge
 801429c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801429e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80142a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80142a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80142a6:	bfac      	ite	ge
 80142a8:	eb06 0a03 	addge.w	sl, r6, r3
 80142ac:	1b9f      	sublt	r7, r3, r6
 80142ae:	9b04      	ldr	r3, [sp, #16]
 80142b0:	1af6      	subs	r6, r6, r3
 80142b2:	4416      	add	r6, r2
 80142b4:	4ba0      	ldr	r3, [pc, #640]	; (8014538 <_strtod_l+0x938>)
 80142b6:	3e01      	subs	r6, #1
 80142b8:	429e      	cmp	r6, r3
 80142ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80142be:	f280 80c4 	bge.w	801444a <_strtod_l+0x84a>
 80142c2:	1b9b      	subs	r3, r3, r6
 80142c4:	2b1f      	cmp	r3, #31
 80142c6:	eba2 0203 	sub.w	r2, r2, r3
 80142ca:	f04f 0101 	mov.w	r1, #1
 80142ce:	f300 80b0 	bgt.w	8014432 <_strtod_l+0x832>
 80142d2:	fa01 f303 	lsl.w	r3, r1, r3
 80142d6:	930e      	str	r3, [sp, #56]	; 0x38
 80142d8:	2300      	movs	r3, #0
 80142da:	930d      	str	r3, [sp, #52]	; 0x34
 80142dc:	eb0a 0602 	add.w	r6, sl, r2
 80142e0:	9b04      	ldr	r3, [sp, #16]
 80142e2:	45b2      	cmp	sl, r6
 80142e4:	4417      	add	r7, r2
 80142e6:	441f      	add	r7, r3
 80142e8:	4653      	mov	r3, sl
 80142ea:	bfa8      	it	ge
 80142ec:	4633      	movge	r3, r6
 80142ee:	42bb      	cmp	r3, r7
 80142f0:	bfa8      	it	ge
 80142f2:	463b      	movge	r3, r7
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	bfc2      	ittt	gt
 80142f8:	1af6      	subgt	r6, r6, r3
 80142fa:	1aff      	subgt	r7, r7, r3
 80142fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8014300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014302:	2b00      	cmp	r3, #0
 8014304:	dd17      	ble.n	8014336 <_strtod_l+0x736>
 8014306:	4659      	mov	r1, fp
 8014308:	461a      	mov	r2, r3
 801430a:	4620      	mov	r0, r4
 801430c:	f7ff f9ae 	bl	801366c <__pow5mult>
 8014310:	4683      	mov	fp, r0
 8014312:	2800      	cmp	r0, #0
 8014314:	f43f aeb8 	beq.w	8014088 <_strtod_l+0x488>
 8014318:	4601      	mov	r1, r0
 801431a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801431c:	4620      	mov	r0, r4
 801431e:	f7ff f8fb 	bl	8013518 <__multiply>
 8014322:	900b      	str	r0, [sp, #44]	; 0x2c
 8014324:	2800      	cmp	r0, #0
 8014326:	f43f aeaf 	beq.w	8014088 <_strtod_l+0x488>
 801432a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801432c:	4620      	mov	r0, r4
 801432e:	f7fe ffdd 	bl	80132ec <_Bfree>
 8014332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014334:	9316      	str	r3, [sp, #88]	; 0x58
 8014336:	2e00      	cmp	r6, #0
 8014338:	f300 808c 	bgt.w	8014454 <_strtod_l+0x854>
 801433c:	9b08      	ldr	r3, [sp, #32]
 801433e:	2b00      	cmp	r3, #0
 8014340:	dd08      	ble.n	8014354 <_strtod_l+0x754>
 8014342:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014344:	9905      	ldr	r1, [sp, #20]
 8014346:	4620      	mov	r0, r4
 8014348:	f7ff f990 	bl	801366c <__pow5mult>
 801434c:	9005      	str	r0, [sp, #20]
 801434e:	2800      	cmp	r0, #0
 8014350:	f43f ae9a 	beq.w	8014088 <_strtod_l+0x488>
 8014354:	2f00      	cmp	r7, #0
 8014356:	dd08      	ble.n	801436a <_strtod_l+0x76a>
 8014358:	9905      	ldr	r1, [sp, #20]
 801435a:	463a      	mov	r2, r7
 801435c:	4620      	mov	r0, r4
 801435e:	f7ff f9df 	bl	8013720 <__lshift>
 8014362:	9005      	str	r0, [sp, #20]
 8014364:	2800      	cmp	r0, #0
 8014366:	f43f ae8f 	beq.w	8014088 <_strtod_l+0x488>
 801436a:	f1ba 0f00 	cmp.w	sl, #0
 801436e:	dd08      	ble.n	8014382 <_strtod_l+0x782>
 8014370:	4659      	mov	r1, fp
 8014372:	4652      	mov	r2, sl
 8014374:	4620      	mov	r0, r4
 8014376:	f7ff f9d3 	bl	8013720 <__lshift>
 801437a:	4683      	mov	fp, r0
 801437c:	2800      	cmp	r0, #0
 801437e:	f43f ae83 	beq.w	8014088 <_strtod_l+0x488>
 8014382:	9a05      	ldr	r2, [sp, #20]
 8014384:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014386:	4620      	mov	r0, r4
 8014388:	f7ff fa52 	bl	8013830 <__mdiff>
 801438c:	4605      	mov	r5, r0
 801438e:	2800      	cmp	r0, #0
 8014390:	f43f ae7a 	beq.w	8014088 <_strtod_l+0x488>
 8014394:	68c3      	ldr	r3, [r0, #12]
 8014396:	930b      	str	r3, [sp, #44]	; 0x2c
 8014398:	2300      	movs	r3, #0
 801439a:	60c3      	str	r3, [r0, #12]
 801439c:	4659      	mov	r1, fp
 801439e:	f7ff fa2b 	bl	80137f8 <__mcmp>
 80143a2:	2800      	cmp	r0, #0
 80143a4:	da60      	bge.n	8014468 <_strtod_l+0x868>
 80143a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143a8:	ea53 0308 	orrs.w	r3, r3, r8
 80143ac:	f040 8084 	bne.w	80144b8 <_strtod_l+0x8b8>
 80143b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d17f      	bne.n	80144b8 <_strtod_l+0x8b8>
 80143b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80143bc:	0d1b      	lsrs	r3, r3, #20
 80143be:	051b      	lsls	r3, r3, #20
 80143c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80143c4:	d978      	bls.n	80144b8 <_strtod_l+0x8b8>
 80143c6:	696b      	ldr	r3, [r5, #20]
 80143c8:	b913      	cbnz	r3, 80143d0 <_strtod_l+0x7d0>
 80143ca:	692b      	ldr	r3, [r5, #16]
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	dd73      	ble.n	80144b8 <_strtod_l+0x8b8>
 80143d0:	4629      	mov	r1, r5
 80143d2:	2201      	movs	r2, #1
 80143d4:	4620      	mov	r0, r4
 80143d6:	f7ff f9a3 	bl	8013720 <__lshift>
 80143da:	4659      	mov	r1, fp
 80143dc:	4605      	mov	r5, r0
 80143de:	f7ff fa0b 	bl	80137f8 <__mcmp>
 80143e2:	2800      	cmp	r0, #0
 80143e4:	dd68      	ble.n	80144b8 <_strtod_l+0x8b8>
 80143e6:	9904      	ldr	r1, [sp, #16]
 80143e8:	4a54      	ldr	r2, [pc, #336]	; (801453c <_strtod_l+0x93c>)
 80143ea:	464b      	mov	r3, r9
 80143ec:	2900      	cmp	r1, #0
 80143ee:	f000 8084 	beq.w	80144fa <_strtod_l+0x8fa>
 80143f2:	ea02 0109 	and.w	r1, r2, r9
 80143f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80143fa:	dc7e      	bgt.n	80144fa <_strtod_l+0x8fa>
 80143fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014400:	f77f aeb3 	ble.w	801416a <_strtod_l+0x56a>
 8014404:	4b4e      	ldr	r3, [pc, #312]	; (8014540 <_strtod_l+0x940>)
 8014406:	4640      	mov	r0, r8
 8014408:	4649      	mov	r1, r9
 801440a:	2200      	movs	r2, #0
 801440c:	f7ec f91c 	bl	8000648 <__aeabi_dmul>
 8014410:	4b4a      	ldr	r3, [pc, #296]	; (801453c <_strtod_l+0x93c>)
 8014412:	400b      	ands	r3, r1
 8014414:	4680      	mov	r8, r0
 8014416:	4689      	mov	r9, r1
 8014418:	2b00      	cmp	r3, #0
 801441a:	f47f ae3f 	bne.w	801409c <_strtod_l+0x49c>
 801441e:	2322      	movs	r3, #34	; 0x22
 8014420:	6023      	str	r3, [r4, #0]
 8014422:	e63b      	b.n	801409c <_strtod_l+0x49c>
 8014424:	f04f 32ff 	mov.w	r2, #4294967295
 8014428:	fa02 f303 	lsl.w	r3, r2, r3
 801442c:	ea03 0808 	and.w	r8, r3, r8
 8014430:	e6e8      	b.n	8014204 <_strtod_l+0x604>
 8014432:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014436:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801443a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801443e:	36e2      	adds	r6, #226	; 0xe2
 8014440:	fa01 f306 	lsl.w	r3, r1, r6
 8014444:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8014448:	e748      	b.n	80142dc <_strtod_l+0x6dc>
 801444a:	2100      	movs	r1, #0
 801444c:	2301      	movs	r3, #1
 801444e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8014452:	e743      	b.n	80142dc <_strtod_l+0x6dc>
 8014454:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014456:	4632      	mov	r2, r6
 8014458:	4620      	mov	r0, r4
 801445a:	f7ff f961 	bl	8013720 <__lshift>
 801445e:	9016      	str	r0, [sp, #88]	; 0x58
 8014460:	2800      	cmp	r0, #0
 8014462:	f47f af6b 	bne.w	801433c <_strtod_l+0x73c>
 8014466:	e60f      	b.n	8014088 <_strtod_l+0x488>
 8014468:	46ca      	mov	sl, r9
 801446a:	d171      	bne.n	8014550 <_strtod_l+0x950>
 801446c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801446e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014472:	b352      	cbz	r2, 80144ca <_strtod_l+0x8ca>
 8014474:	4a33      	ldr	r2, [pc, #204]	; (8014544 <_strtod_l+0x944>)
 8014476:	4293      	cmp	r3, r2
 8014478:	d12a      	bne.n	80144d0 <_strtod_l+0x8d0>
 801447a:	9b04      	ldr	r3, [sp, #16]
 801447c:	4641      	mov	r1, r8
 801447e:	b1fb      	cbz	r3, 80144c0 <_strtod_l+0x8c0>
 8014480:	4b2e      	ldr	r3, [pc, #184]	; (801453c <_strtod_l+0x93c>)
 8014482:	ea09 0303 	and.w	r3, r9, r3
 8014486:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801448a:	f04f 32ff 	mov.w	r2, #4294967295
 801448e:	d81a      	bhi.n	80144c6 <_strtod_l+0x8c6>
 8014490:	0d1b      	lsrs	r3, r3, #20
 8014492:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014496:	fa02 f303 	lsl.w	r3, r2, r3
 801449a:	4299      	cmp	r1, r3
 801449c:	d118      	bne.n	80144d0 <_strtod_l+0x8d0>
 801449e:	4b2a      	ldr	r3, [pc, #168]	; (8014548 <_strtod_l+0x948>)
 80144a0:	459a      	cmp	sl, r3
 80144a2:	d102      	bne.n	80144aa <_strtod_l+0x8aa>
 80144a4:	3101      	adds	r1, #1
 80144a6:	f43f adef 	beq.w	8014088 <_strtod_l+0x488>
 80144aa:	4b24      	ldr	r3, [pc, #144]	; (801453c <_strtod_l+0x93c>)
 80144ac:	ea0a 0303 	and.w	r3, sl, r3
 80144b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80144b4:	f04f 0800 	mov.w	r8, #0
 80144b8:	9b04      	ldr	r3, [sp, #16]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d1a2      	bne.n	8014404 <_strtod_l+0x804>
 80144be:	e5ed      	b.n	801409c <_strtod_l+0x49c>
 80144c0:	f04f 33ff 	mov.w	r3, #4294967295
 80144c4:	e7e9      	b.n	801449a <_strtod_l+0x89a>
 80144c6:	4613      	mov	r3, r2
 80144c8:	e7e7      	b.n	801449a <_strtod_l+0x89a>
 80144ca:	ea53 0308 	orrs.w	r3, r3, r8
 80144ce:	d08a      	beq.n	80143e6 <_strtod_l+0x7e6>
 80144d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144d2:	b1e3      	cbz	r3, 801450e <_strtod_l+0x90e>
 80144d4:	ea13 0f0a 	tst.w	r3, sl
 80144d8:	d0ee      	beq.n	80144b8 <_strtod_l+0x8b8>
 80144da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144dc:	9a04      	ldr	r2, [sp, #16]
 80144de:	4640      	mov	r0, r8
 80144e0:	4649      	mov	r1, r9
 80144e2:	b1c3      	cbz	r3, 8014516 <_strtod_l+0x916>
 80144e4:	f7ff fb6f 	bl	8013bc6 <sulp>
 80144e8:	4602      	mov	r2, r0
 80144ea:	460b      	mov	r3, r1
 80144ec:	ec51 0b18 	vmov	r0, r1, d8
 80144f0:	f7eb fef4 	bl	80002dc <__adddf3>
 80144f4:	4680      	mov	r8, r0
 80144f6:	4689      	mov	r9, r1
 80144f8:	e7de      	b.n	80144b8 <_strtod_l+0x8b8>
 80144fa:	4013      	ands	r3, r2
 80144fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014500:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014504:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014508:	f04f 38ff 	mov.w	r8, #4294967295
 801450c:	e7d4      	b.n	80144b8 <_strtod_l+0x8b8>
 801450e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014510:	ea13 0f08 	tst.w	r3, r8
 8014514:	e7e0      	b.n	80144d8 <_strtod_l+0x8d8>
 8014516:	f7ff fb56 	bl	8013bc6 <sulp>
 801451a:	4602      	mov	r2, r0
 801451c:	460b      	mov	r3, r1
 801451e:	ec51 0b18 	vmov	r0, r1, d8
 8014522:	f7eb fed9 	bl	80002d8 <__aeabi_dsub>
 8014526:	2200      	movs	r2, #0
 8014528:	2300      	movs	r3, #0
 801452a:	4680      	mov	r8, r0
 801452c:	4689      	mov	r9, r1
 801452e:	f7ec faf3 	bl	8000b18 <__aeabi_dcmpeq>
 8014532:	2800      	cmp	r0, #0
 8014534:	d0c0      	beq.n	80144b8 <_strtod_l+0x8b8>
 8014536:	e618      	b.n	801416a <_strtod_l+0x56a>
 8014538:	fffffc02 	.word	0xfffffc02
 801453c:	7ff00000 	.word	0x7ff00000
 8014540:	39500000 	.word	0x39500000
 8014544:	000fffff 	.word	0x000fffff
 8014548:	7fefffff 	.word	0x7fefffff
 801454c:	08018a00 	.word	0x08018a00
 8014550:	4659      	mov	r1, fp
 8014552:	4628      	mov	r0, r5
 8014554:	f7ff fac0 	bl	8013ad8 <__ratio>
 8014558:	ec57 6b10 	vmov	r6, r7, d0
 801455c:	ee10 0a10 	vmov	r0, s0
 8014560:	2200      	movs	r2, #0
 8014562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014566:	4639      	mov	r1, r7
 8014568:	f7ec faea 	bl	8000b40 <__aeabi_dcmple>
 801456c:	2800      	cmp	r0, #0
 801456e:	d071      	beq.n	8014654 <_strtod_l+0xa54>
 8014570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014572:	2b00      	cmp	r3, #0
 8014574:	d17c      	bne.n	8014670 <_strtod_l+0xa70>
 8014576:	f1b8 0f00 	cmp.w	r8, #0
 801457a:	d15a      	bne.n	8014632 <_strtod_l+0xa32>
 801457c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014580:	2b00      	cmp	r3, #0
 8014582:	d15d      	bne.n	8014640 <_strtod_l+0xa40>
 8014584:	4b90      	ldr	r3, [pc, #576]	; (80147c8 <_strtod_l+0xbc8>)
 8014586:	2200      	movs	r2, #0
 8014588:	4630      	mov	r0, r6
 801458a:	4639      	mov	r1, r7
 801458c:	f7ec face 	bl	8000b2c <__aeabi_dcmplt>
 8014590:	2800      	cmp	r0, #0
 8014592:	d15c      	bne.n	801464e <_strtod_l+0xa4e>
 8014594:	4630      	mov	r0, r6
 8014596:	4639      	mov	r1, r7
 8014598:	4b8c      	ldr	r3, [pc, #560]	; (80147cc <_strtod_l+0xbcc>)
 801459a:	2200      	movs	r2, #0
 801459c:	f7ec f854 	bl	8000648 <__aeabi_dmul>
 80145a0:	4606      	mov	r6, r0
 80145a2:	460f      	mov	r7, r1
 80145a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80145a8:	9606      	str	r6, [sp, #24]
 80145aa:	9307      	str	r3, [sp, #28]
 80145ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80145b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80145b4:	4b86      	ldr	r3, [pc, #536]	; (80147d0 <_strtod_l+0xbd0>)
 80145b6:	ea0a 0303 	and.w	r3, sl, r3
 80145ba:	930d      	str	r3, [sp, #52]	; 0x34
 80145bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145be:	4b85      	ldr	r3, [pc, #532]	; (80147d4 <_strtod_l+0xbd4>)
 80145c0:	429a      	cmp	r2, r3
 80145c2:	f040 8090 	bne.w	80146e6 <_strtod_l+0xae6>
 80145c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80145ca:	ec49 8b10 	vmov	d0, r8, r9
 80145ce:	f7ff f9b9 	bl	8013944 <__ulp>
 80145d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80145d6:	ec51 0b10 	vmov	r0, r1, d0
 80145da:	f7ec f835 	bl	8000648 <__aeabi_dmul>
 80145de:	4642      	mov	r2, r8
 80145e0:	464b      	mov	r3, r9
 80145e2:	f7eb fe7b 	bl	80002dc <__adddf3>
 80145e6:	460b      	mov	r3, r1
 80145e8:	4979      	ldr	r1, [pc, #484]	; (80147d0 <_strtod_l+0xbd0>)
 80145ea:	4a7b      	ldr	r2, [pc, #492]	; (80147d8 <_strtod_l+0xbd8>)
 80145ec:	4019      	ands	r1, r3
 80145ee:	4291      	cmp	r1, r2
 80145f0:	4680      	mov	r8, r0
 80145f2:	d944      	bls.n	801467e <_strtod_l+0xa7e>
 80145f4:	ee18 2a90 	vmov	r2, s17
 80145f8:	4b78      	ldr	r3, [pc, #480]	; (80147dc <_strtod_l+0xbdc>)
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d104      	bne.n	8014608 <_strtod_l+0xa08>
 80145fe:	ee18 3a10 	vmov	r3, s16
 8014602:	3301      	adds	r3, #1
 8014604:	f43f ad40 	beq.w	8014088 <_strtod_l+0x488>
 8014608:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80147dc <_strtod_l+0xbdc>
 801460c:	f04f 38ff 	mov.w	r8, #4294967295
 8014610:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014612:	4620      	mov	r0, r4
 8014614:	f7fe fe6a 	bl	80132ec <_Bfree>
 8014618:	9905      	ldr	r1, [sp, #20]
 801461a:	4620      	mov	r0, r4
 801461c:	f7fe fe66 	bl	80132ec <_Bfree>
 8014620:	4659      	mov	r1, fp
 8014622:	4620      	mov	r0, r4
 8014624:	f7fe fe62 	bl	80132ec <_Bfree>
 8014628:	4629      	mov	r1, r5
 801462a:	4620      	mov	r0, r4
 801462c:	f7fe fe5e 	bl	80132ec <_Bfree>
 8014630:	e609      	b.n	8014246 <_strtod_l+0x646>
 8014632:	f1b8 0f01 	cmp.w	r8, #1
 8014636:	d103      	bne.n	8014640 <_strtod_l+0xa40>
 8014638:	f1b9 0f00 	cmp.w	r9, #0
 801463c:	f43f ad95 	beq.w	801416a <_strtod_l+0x56a>
 8014640:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014798 <_strtod_l+0xb98>
 8014644:	4f60      	ldr	r7, [pc, #384]	; (80147c8 <_strtod_l+0xbc8>)
 8014646:	ed8d 7b06 	vstr	d7, [sp, #24]
 801464a:	2600      	movs	r6, #0
 801464c:	e7ae      	b.n	80145ac <_strtod_l+0x9ac>
 801464e:	4f5f      	ldr	r7, [pc, #380]	; (80147cc <_strtod_l+0xbcc>)
 8014650:	2600      	movs	r6, #0
 8014652:	e7a7      	b.n	80145a4 <_strtod_l+0x9a4>
 8014654:	4b5d      	ldr	r3, [pc, #372]	; (80147cc <_strtod_l+0xbcc>)
 8014656:	4630      	mov	r0, r6
 8014658:	4639      	mov	r1, r7
 801465a:	2200      	movs	r2, #0
 801465c:	f7eb fff4 	bl	8000648 <__aeabi_dmul>
 8014660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014662:	4606      	mov	r6, r0
 8014664:	460f      	mov	r7, r1
 8014666:	2b00      	cmp	r3, #0
 8014668:	d09c      	beq.n	80145a4 <_strtod_l+0x9a4>
 801466a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801466e:	e79d      	b.n	80145ac <_strtod_l+0x9ac>
 8014670:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80147a0 <_strtod_l+0xba0>
 8014674:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014678:	ec57 6b17 	vmov	r6, r7, d7
 801467c:	e796      	b.n	80145ac <_strtod_l+0x9ac>
 801467e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014682:	9b04      	ldr	r3, [sp, #16]
 8014684:	46ca      	mov	sl, r9
 8014686:	2b00      	cmp	r3, #0
 8014688:	d1c2      	bne.n	8014610 <_strtod_l+0xa10>
 801468a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801468e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014690:	0d1b      	lsrs	r3, r3, #20
 8014692:	051b      	lsls	r3, r3, #20
 8014694:	429a      	cmp	r2, r3
 8014696:	d1bb      	bne.n	8014610 <_strtod_l+0xa10>
 8014698:	4630      	mov	r0, r6
 801469a:	4639      	mov	r1, r7
 801469c:	f7ec fb34 	bl	8000d08 <__aeabi_d2lz>
 80146a0:	f7eb ffa4 	bl	80005ec <__aeabi_l2d>
 80146a4:	4602      	mov	r2, r0
 80146a6:	460b      	mov	r3, r1
 80146a8:	4630      	mov	r0, r6
 80146aa:	4639      	mov	r1, r7
 80146ac:	f7eb fe14 	bl	80002d8 <__aeabi_dsub>
 80146b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80146b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80146b6:	ea43 0308 	orr.w	r3, r3, r8
 80146ba:	4313      	orrs	r3, r2
 80146bc:	4606      	mov	r6, r0
 80146be:	460f      	mov	r7, r1
 80146c0:	d054      	beq.n	801476c <_strtod_l+0xb6c>
 80146c2:	a339      	add	r3, pc, #228	; (adr r3, 80147a8 <_strtod_l+0xba8>)
 80146c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c8:	f7ec fa30 	bl	8000b2c <__aeabi_dcmplt>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	f47f ace5 	bne.w	801409c <_strtod_l+0x49c>
 80146d2:	a337      	add	r3, pc, #220	; (adr r3, 80147b0 <_strtod_l+0xbb0>)
 80146d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d8:	4630      	mov	r0, r6
 80146da:	4639      	mov	r1, r7
 80146dc:	f7ec fa44 	bl	8000b68 <__aeabi_dcmpgt>
 80146e0:	2800      	cmp	r0, #0
 80146e2:	d095      	beq.n	8014610 <_strtod_l+0xa10>
 80146e4:	e4da      	b.n	801409c <_strtod_l+0x49c>
 80146e6:	9b04      	ldr	r3, [sp, #16]
 80146e8:	b333      	cbz	r3, 8014738 <_strtod_l+0xb38>
 80146ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80146ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80146f0:	d822      	bhi.n	8014738 <_strtod_l+0xb38>
 80146f2:	a331      	add	r3, pc, #196	; (adr r3, 80147b8 <_strtod_l+0xbb8>)
 80146f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f8:	4630      	mov	r0, r6
 80146fa:	4639      	mov	r1, r7
 80146fc:	f7ec fa20 	bl	8000b40 <__aeabi_dcmple>
 8014700:	b1a0      	cbz	r0, 801472c <_strtod_l+0xb2c>
 8014702:	4639      	mov	r1, r7
 8014704:	4630      	mov	r0, r6
 8014706:	f7ec fa77 	bl	8000bf8 <__aeabi_d2uiz>
 801470a:	2801      	cmp	r0, #1
 801470c:	bf38      	it	cc
 801470e:	2001      	movcc	r0, #1
 8014710:	f7eb ff20 	bl	8000554 <__aeabi_ui2d>
 8014714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014716:	4606      	mov	r6, r0
 8014718:	460f      	mov	r7, r1
 801471a:	bb23      	cbnz	r3, 8014766 <_strtod_l+0xb66>
 801471c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014720:	9010      	str	r0, [sp, #64]	; 0x40
 8014722:	9311      	str	r3, [sp, #68]	; 0x44
 8014724:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014728:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801472c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801472e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014730:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014734:	1a9b      	subs	r3, r3, r2
 8014736:	930f      	str	r3, [sp, #60]	; 0x3c
 8014738:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801473c:	eeb0 0a48 	vmov.f32	s0, s16
 8014740:	eef0 0a68 	vmov.f32	s1, s17
 8014744:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014748:	f7ff f8fc 	bl	8013944 <__ulp>
 801474c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014750:	ec53 2b10 	vmov	r2, r3, d0
 8014754:	f7eb ff78 	bl	8000648 <__aeabi_dmul>
 8014758:	ec53 2b18 	vmov	r2, r3, d8
 801475c:	f7eb fdbe 	bl	80002dc <__adddf3>
 8014760:	4680      	mov	r8, r0
 8014762:	4689      	mov	r9, r1
 8014764:	e78d      	b.n	8014682 <_strtod_l+0xa82>
 8014766:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801476a:	e7db      	b.n	8014724 <_strtod_l+0xb24>
 801476c:	a314      	add	r3, pc, #80	; (adr r3, 80147c0 <_strtod_l+0xbc0>)
 801476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014772:	f7ec f9db 	bl	8000b2c <__aeabi_dcmplt>
 8014776:	e7b3      	b.n	80146e0 <_strtod_l+0xae0>
 8014778:	2300      	movs	r3, #0
 801477a:	930a      	str	r3, [sp, #40]	; 0x28
 801477c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801477e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014780:	6013      	str	r3, [r2, #0]
 8014782:	f7ff ba7c 	b.w	8013c7e <_strtod_l+0x7e>
 8014786:	2a65      	cmp	r2, #101	; 0x65
 8014788:	f43f ab75 	beq.w	8013e76 <_strtod_l+0x276>
 801478c:	2a45      	cmp	r2, #69	; 0x45
 801478e:	f43f ab72 	beq.w	8013e76 <_strtod_l+0x276>
 8014792:	2301      	movs	r3, #1
 8014794:	f7ff bbaa 	b.w	8013eec <_strtod_l+0x2ec>
 8014798:	00000000 	.word	0x00000000
 801479c:	bff00000 	.word	0xbff00000
 80147a0:	00000000 	.word	0x00000000
 80147a4:	3ff00000 	.word	0x3ff00000
 80147a8:	94a03595 	.word	0x94a03595
 80147ac:	3fdfffff 	.word	0x3fdfffff
 80147b0:	35afe535 	.word	0x35afe535
 80147b4:	3fe00000 	.word	0x3fe00000
 80147b8:	ffc00000 	.word	0xffc00000
 80147bc:	41dfffff 	.word	0x41dfffff
 80147c0:	94a03595 	.word	0x94a03595
 80147c4:	3fcfffff 	.word	0x3fcfffff
 80147c8:	3ff00000 	.word	0x3ff00000
 80147cc:	3fe00000 	.word	0x3fe00000
 80147d0:	7ff00000 	.word	0x7ff00000
 80147d4:	7fe00000 	.word	0x7fe00000
 80147d8:	7c9fffff 	.word	0x7c9fffff
 80147dc:	7fefffff 	.word	0x7fefffff

080147e0 <_strtod_r>:
 80147e0:	4b01      	ldr	r3, [pc, #4]	; (80147e8 <_strtod_r+0x8>)
 80147e2:	f7ff ba0d 	b.w	8013c00 <_strtod_l>
 80147e6:	bf00      	nop
 80147e8:	20000278 	.word	0x20000278

080147ec <_strtol_l.constprop.0>:
 80147ec:	2b01      	cmp	r3, #1
 80147ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147f2:	d001      	beq.n	80147f8 <_strtol_l.constprop.0+0xc>
 80147f4:	2b24      	cmp	r3, #36	; 0x24
 80147f6:	d906      	bls.n	8014806 <_strtol_l.constprop.0+0x1a>
 80147f8:	f7fd fd7c 	bl	80122f4 <__errno>
 80147fc:	2316      	movs	r3, #22
 80147fe:	6003      	str	r3, [r0, #0]
 8014800:	2000      	movs	r0, #0
 8014802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014806:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80148ec <_strtol_l.constprop.0+0x100>
 801480a:	460d      	mov	r5, r1
 801480c:	462e      	mov	r6, r5
 801480e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014812:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014816:	f017 0708 	ands.w	r7, r7, #8
 801481a:	d1f7      	bne.n	801480c <_strtol_l.constprop.0+0x20>
 801481c:	2c2d      	cmp	r4, #45	; 0x2d
 801481e:	d132      	bne.n	8014886 <_strtol_l.constprop.0+0x9a>
 8014820:	782c      	ldrb	r4, [r5, #0]
 8014822:	2701      	movs	r7, #1
 8014824:	1cb5      	adds	r5, r6, #2
 8014826:	2b00      	cmp	r3, #0
 8014828:	d05b      	beq.n	80148e2 <_strtol_l.constprop.0+0xf6>
 801482a:	2b10      	cmp	r3, #16
 801482c:	d109      	bne.n	8014842 <_strtol_l.constprop.0+0x56>
 801482e:	2c30      	cmp	r4, #48	; 0x30
 8014830:	d107      	bne.n	8014842 <_strtol_l.constprop.0+0x56>
 8014832:	782c      	ldrb	r4, [r5, #0]
 8014834:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014838:	2c58      	cmp	r4, #88	; 0x58
 801483a:	d14d      	bne.n	80148d8 <_strtol_l.constprop.0+0xec>
 801483c:	786c      	ldrb	r4, [r5, #1]
 801483e:	2310      	movs	r3, #16
 8014840:	3502      	adds	r5, #2
 8014842:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014846:	f108 38ff 	add.w	r8, r8, #4294967295
 801484a:	f04f 0e00 	mov.w	lr, #0
 801484e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014852:	4676      	mov	r6, lr
 8014854:	fb03 8a19 	mls	sl, r3, r9, r8
 8014858:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801485c:	f1bc 0f09 	cmp.w	ip, #9
 8014860:	d816      	bhi.n	8014890 <_strtol_l.constprop.0+0xa4>
 8014862:	4664      	mov	r4, ip
 8014864:	42a3      	cmp	r3, r4
 8014866:	dd24      	ble.n	80148b2 <_strtol_l.constprop.0+0xc6>
 8014868:	f1be 3fff 	cmp.w	lr, #4294967295
 801486c:	d008      	beq.n	8014880 <_strtol_l.constprop.0+0x94>
 801486e:	45b1      	cmp	r9, r6
 8014870:	d31c      	bcc.n	80148ac <_strtol_l.constprop.0+0xc0>
 8014872:	d101      	bne.n	8014878 <_strtol_l.constprop.0+0x8c>
 8014874:	45a2      	cmp	sl, r4
 8014876:	db19      	blt.n	80148ac <_strtol_l.constprop.0+0xc0>
 8014878:	fb06 4603 	mla	r6, r6, r3, r4
 801487c:	f04f 0e01 	mov.w	lr, #1
 8014880:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014884:	e7e8      	b.n	8014858 <_strtol_l.constprop.0+0x6c>
 8014886:	2c2b      	cmp	r4, #43	; 0x2b
 8014888:	bf04      	itt	eq
 801488a:	782c      	ldrbeq	r4, [r5, #0]
 801488c:	1cb5      	addeq	r5, r6, #2
 801488e:	e7ca      	b.n	8014826 <_strtol_l.constprop.0+0x3a>
 8014890:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014894:	f1bc 0f19 	cmp.w	ip, #25
 8014898:	d801      	bhi.n	801489e <_strtol_l.constprop.0+0xb2>
 801489a:	3c37      	subs	r4, #55	; 0x37
 801489c:	e7e2      	b.n	8014864 <_strtol_l.constprop.0+0x78>
 801489e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80148a2:	f1bc 0f19 	cmp.w	ip, #25
 80148a6:	d804      	bhi.n	80148b2 <_strtol_l.constprop.0+0xc6>
 80148a8:	3c57      	subs	r4, #87	; 0x57
 80148aa:	e7db      	b.n	8014864 <_strtol_l.constprop.0+0x78>
 80148ac:	f04f 3eff 	mov.w	lr, #4294967295
 80148b0:	e7e6      	b.n	8014880 <_strtol_l.constprop.0+0x94>
 80148b2:	f1be 3fff 	cmp.w	lr, #4294967295
 80148b6:	d105      	bne.n	80148c4 <_strtol_l.constprop.0+0xd8>
 80148b8:	2322      	movs	r3, #34	; 0x22
 80148ba:	6003      	str	r3, [r0, #0]
 80148bc:	4646      	mov	r6, r8
 80148be:	b942      	cbnz	r2, 80148d2 <_strtol_l.constprop.0+0xe6>
 80148c0:	4630      	mov	r0, r6
 80148c2:	e79e      	b.n	8014802 <_strtol_l.constprop.0+0x16>
 80148c4:	b107      	cbz	r7, 80148c8 <_strtol_l.constprop.0+0xdc>
 80148c6:	4276      	negs	r6, r6
 80148c8:	2a00      	cmp	r2, #0
 80148ca:	d0f9      	beq.n	80148c0 <_strtol_l.constprop.0+0xd4>
 80148cc:	f1be 0f00 	cmp.w	lr, #0
 80148d0:	d000      	beq.n	80148d4 <_strtol_l.constprop.0+0xe8>
 80148d2:	1e69      	subs	r1, r5, #1
 80148d4:	6011      	str	r1, [r2, #0]
 80148d6:	e7f3      	b.n	80148c0 <_strtol_l.constprop.0+0xd4>
 80148d8:	2430      	movs	r4, #48	; 0x30
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d1b1      	bne.n	8014842 <_strtol_l.constprop.0+0x56>
 80148de:	2308      	movs	r3, #8
 80148e0:	e7af      	b.n	8014842 <_strtol_l.constprop.0+0x56>
 80148e2:	2c30      	cmp	r4, #48	; 0x30
 80148e4:	d0a5      	beq.n	8014832 <_strtol_l.constprop.0+0x46>
 80148e6:	230a      	movs	r3, #10
 80148e8:	e7ab      	b.n	8014842 <_strtol_l.constprop.0+0x56>
 80148ea:	bf00      	nop
 80148ec:	08018a29 	.word	0x08018a29

080148f0 <_strtol_r>:
 80148f0:	f7ff bf7c 	b.w	80147ec <_strtol_l.constprop.0>

080148f4 <__ssputs_r>:
 80148f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148f8:	688e      	ldr	r6, [r1, #8]
 80148fa:	461f      	mov	r7, r3
 80148fc:	42be      	cmp	r6, r7
 80148fe:	680b      	ldr	r3, [r1, #0]
 8014900:	4682      	mov	sl, r0
 8014902:	460c      	mov	r4, r1
 8014904:	4690      	mov	r8, r2
 8014906:	d82c      	bhi.n	8014962 <__ssputs_r+0x6e>
 8014908:	898a      	ldrh	r2, [r1, #12]
 801490a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801490e:	d026      	beq.n	801495e <__ssputs_r+0x6a>
 8014910:	6965      	ldr	r5, [r4, #20]
 8014912:	6909      	ldr	r1, [r1, #16]
 8014914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014918:	eba3 0901 	sub.w	r9, r3, r1
 801491c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014920:	1c7b      	adds	r3, r7, #1
 8014922:	444b      	add	r3, r9
 8014924:	106d      	asrs	r5, r5, #1
 8014926:	429d      	cmp	r5, r3
 8014928:	bf38      	it	cc
 801492a:	461d      	movcc	r5, r3
 801492c:	0553      	lsls	r3, r2, #21
 801492e:	d527      	bpl.n	8014980 <__ssputs_r+0x8c>
 8014930:	4629      	mov	r1, r5
 8014932:	f7fe fc0f 	bl	8013154 <_malloc_r>
 8014936:	4606      	mov	r6, r0
 8014938:	b360      	cbz	r0, 8014994 <__ssputs_r+0xa0>
 801493a:	6921      	ldr	r1, [r4, #16]
 801493c:	464a      	mov	r2, r9
 801493e:	f7fd fd06 	bl	801234e <memcpy>
 8014942:	89a3      	ldrh	r3, [r4, #12]
 8014944:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801494c:	81a3      	strh	r3, [r4, #12]
 801494e:	6126      	str	r6, [r4, #16]
 8014950:	6165      	str	r5, [r4, #20]
 8014952:	444e      	add	r6, r9
 8014954:	eba5 0509 	sub.w	r5, r5, r9
 8014958:	6026      	str	r6, [r4, #0]
 801495a:	60a5      	str	r5, [r4, #8]
 801495c:	463e      	mov	r6, r7
 801495e:	42be      	cmp	r6, r7
 8014960:	d900      	bls.n	8014964 <__ssputs_r+0x70>
 8014962:	463e      	mov	r6, r7
 8014964:	6820      	ldr	r0, [r4, #0]
 8014966:	4632      	mov	r2, r6
 8014968:	4641      	mov	r1, r8
 801496a:	f000 f9c9 	bl	8014d00 <memmove>
 801496e:	68a3      	ldr	r3, [r4, #8]
 8014970:	1b9b      	subs	r3, r3, r6
 8014972:	60a3      	str	r3, [r4, #8]
 8014974:	6823      	ldr	r3, [r4, #0]
 8014976:	4433      	add	r3, r6
 8014978:	6023      	str	r3, [r4, #0]
 801497a:	2000      	movs	r0, #0
 801497c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014980:	462a      	mov	r2, r5
 8014982:	f000 fd9e 	bl	80154c2 <_realloc_r>
 8014986:	4606      	mov	r6, r0
 8014988:	2800      	cmp	r0, #0
 801498a:	d1e0      	bne.n	801494e <__ssputs_r+0x5a>
 801498c:	6921      	ldr	r1, [r4, #16]
 801498e:	4650      	mov	r0, sl
 8014990:	f7fe fb6c 	bl	801306c <_free_r>
 8014994:	230c      	movs	r3, #12
 8014996:	f8ca 3000 	str.w	r3, [sl]
 801499a:	89a3      	ldrh	r3, [r4, #12]
 801499c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149a0:	81a3      	strh	r3, [r4, #12]
 80149a2:	f04f 30ff 	mov.w	r0, #4294967295
 80149a6:	e7e9      	b.n	801497c <__ssputs_r+0x88>

080149a8 <_svfiprintf_r>:
 80149a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ac:	4698      	mov	r8, r3
 80149ae:	898b      	ldrh	r3, [r1, #12]
 80149b0:	061b      	lsls	r3, r3, #24
 80149b2:	b09d      	sub	sp, #116	; 0x74
 80149b4:	4607      	mov	r7, r0
 80149b6:	460d      	mov	r5, r1
 80149b8:	4614      	mov	r4, r2
 80149ba:	d50e      	bpl.n	80149da <_svfiprintf_r+0x32>
 80149bc:	690b      	ldr	r3, [r1, #16]
 80149be:	b963      	cbnz	r3, 80149da <_svfiprintf_r+0x32>
 80149c0:	2140      	movs	r1, #64	; 0x40
 80149c2:	f7fe fbc7 	bl	8013154 <_malloc_r>
 80149c6:	6028      	str	r0, [r5, #0]
 80149c8:	6128      	str	r0, [r5, #16]
 80149ca:	b920      	cbnz	r0, 80149d6 <_svfiprintf_r+0x2e>
 80149cc:	230c      	movs	r3, #12
 80149ce:	603b      	str	r3, [r7, #0]
 80149d0:	f04f 30ff 	mov.w	r0, #4294967295
 80149d4:	e0d0      	b.n	8014b78 <_svfiprintf_r+0x1d0>
 80149d6:	2340      	movs	r3, #64	; 0x40
 80149d8:	616b      	str	r3, [r5, #20]
 80149da:	2300      	movs	r3, #0
 80149dc:	9309      	str	r3, [sp, #36]	; 0x24
 80149de:	2320      	movs	r3, #32
 80149e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80149e8:	2330      	movs	r3, #48	; 0x30
 80149ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014b90 <_svfiprintf_r+0x1e8>
 80149ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149f2:	f04f 0901 	mov.w	r9, #1
 80149f6:	4623      	mov	r3, r4
 80149f8:	469a      	mov	sl, r3
 80149fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149fe:	b10a      	cbz	r2, 8014a04 <_svfiprintf_r+0x5c>
 8014a00:	2a25      	cmp	r2, #37	; 0x25
 8014a02:	d1f9      	bne.n	80149f8 <_svfiprintf_r+0x50>
 8014a04:	ebba 0b04 	subs.w	fp, sl, r4
 8014a08:	d00b      	beq.n	8014a22 <_svfiprintf_r+0x7a>
 8014a0a:	465b      	mov	r3, fp
 8014a0c:	4622      	mov	r2, r4
 8014a0e:	4629      	mov	r1, r5
 8014a10:	4638      	mov	r0, r7
 8014a12:	f7ff ff6f 	bl	80148f4 <__ssputs_r>
 8014a16:	3001      	adds	r0, #1
 8014a18:	f000 80a9 	beq.w	8014b6e <_svfiprintf_r+0x1c6>
 8014a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a1e:	445a      	add	r2, fp
 8014a20:	9209      	str	r2, [sp, #36]	; 0x24
 8014a22:	f89a 3000 	ldrb.w	r3, [sl]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	f000 80a1 	beq.w	8014b6e <_svfiprintf_r+0x1c6>
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8014a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a36:	f10a 0a01 	add.w	sl, sl, #1
 8014a3a:	9304      	str	r3, [sp, #16]
 8014a3c:	9307      	str	r3, [sp, #28]
 8014a3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a42:	931a      	str	r3, [sp, #104]	; 0x68
 8014a44:	4654      	mov	r4, sl
 8014a46:	2205      	movs	r2, #5
 8014a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a4c:	4850      	ldr	r0, [pc, #320]	; (8014b90 <_svfiprintf_r+0x1e8>)
 8014a4e:	f7eb fbe7 	bl	8000220 <memchr>
 8014a52:	9a04      	ldr	r2, [sp, #16]
 8014a54:	b9d8      	cbnz	r0, 8014a8e <_svfiprintf_r+0xe6>
 8014a56:	06d0      	lsls	r0, r2, #27
 8014a58:	bf44      	itt	mi
 8014a5a:	2320      	movmi	r3, #32
 8014a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a60:	0711      	lsls	r1, r2, #28
 8014a62:	bf44      	itt	mi
 8014a64:	232b      	movmi	r3, #43	; 0x2b
 8014a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8014a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8014a70:	d015      	beq.n	8014a9e <_svfiprintf_r+0xf6>
 8014a72:	9a07      	ldr	r2, [sp, #28]
 8014a74:	4654      	mov	r4, sl
 8014a76:	2000      	movs	r0, #0
 8014a78:	f04f 0c0a 	mov.w	ip, #10
 8014a7c:	4621      	mov	r1, r4
 8014a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a82:	3b30      	subs	r3, #48	; 0x30
 8014a84:	2b09      	cmp	r3, #9
 8014a86:	d94d      	bls.n	8014b24 <_svfiprintf_r+0x17c>
 8014a88:	b1b0      	cbz	r0, 8014ab8 <_svfiprintf_r+0x110>
 8014a8a:	9207      	str	r2, [sp, #28]
 8014a8c:	e014      	b.n	8014ab8 <_svfiprintf_r+0x110>
 8014a8e:	eba0 0308 	sub.w	r3, r0, r8
 8014a92:	fa09 f303 	lsl.w	r3, r9, r3
 8014a96:	4313      	orrs	r3, r2
 8014a98:	9304      	str	r3, [sp, #16]
 8014a9a:	46a2      	mov	sl, r4
 8014a9c:	e7d2      	b.n	8014a44 <_svfiprintf_r+0x9c>
 8014a9e:	9b03      	ldr	r3, [sp, #12]
 8014aa0:	1d19      	adds	r1, r3, #4
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	9103      	str	r1, [sp, #12]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	bfbb      	ittet	lt
 8014aaa:	425b      	neglt	r3, r3
 8014aac:	f042 0202 	orrlt.w	r2, r2, #2
 8014ab0:	9307      	strge	r3, [sp, #28]
 8014ab2:	9307      	strlt	r3, [sp, #28]
 8014ab4:	bfb8      	it	lt
 8014ab6:	9204      	strlt	r2, [sp, #16]
 8014ab8:	7823      	ldrb	r3, [r4, #0]
 8014aba:	2b2e      	cmp	r3, #46	; 0x2e
 8014abc:	d10c      	bne.n	8014ad8 <_svfiprintf_r+0x130>
 8014abe:	7863      	ldrb	r3, [r4, #1]
 8014ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8014ac2:	d134      	bne.n	8014b2e <_svfiprintf_r+0x186>
 8014ac4:	9b03      	ldr	r3, [sp, #12]
 8014ac6:	1d1a      	adds	r2, r3, #4
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	9203      	str	r2, [sp, #12]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	bfb8      	it	lt
 8014ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ad4:	3402      	adds	r4, #2
 8014ad6:	9305      	str	r3, [sp, #20]
 8014ad8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014ba0 <_svfiprintf_r+0x1f8>
 8014adc:	7821      	ldrb	r1, [r4, #0]
 8014ade:	2203      	movs	r2, #3
 8014ae0:	4650      	mov	r0, sl
 8014ae2:	f7eb fb9d 	bl	8000220 <memchr>
 8014ae6:	b138      	cbz	r0, 8014af8 <_svfiprintf_r+0x150>
 8014ae8:	9b04      	ldr	r3, [sp, #16]
 8014aea:	eba0 000a 	sub.w	r0, r0, sl
 8014aee:	2240      	movs	r2, #64	; 0x40
 8014af0:	4082      	lsls	r2, r0
 8014af2:	4313      	orrs	r3, r2
 8014af4:	3401      	adds	r4, #1
 8014af6:	9304      	str	r3, [sp, #16]
 8014af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014afc:	4825      	ldr	r0, [pc, #148]	; (8014b94 <_svfiprintf_r+0x1ec>)
 8014afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b02:	2206      	movs	r2, #6
 8014b04:	f7eb fb8c 	bl	8000220 <memchr>
 8014b08:	2800      	cmp	r0, #0
 8014b0a:	d038      	beq.n	8014b7e <_svfiprintf_r+0x1d6>
 8014b0c:	4b22      	ldr	r3, [pc, #136]	; (8014b98 <_svfiprintf_r+0x1f0>)
 8014b0e:	bb1b      	cbnz	r3, 8014b58 <_svfiprintf_r+0x1b0>
 8014b10:	9b03      	ldr	r3, [sp, #12]
 8014b12:	3307      	adds	r3, #7
 8014b14:	f023 0307 	bic.w	r3, r3, #7
 8014b18:	3308      	adds	r3, #8
 8014b1a:	9303      	str	r3, [sp, #12]
 8014b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b1e:	4433      	add	r3, r6
 8014b20:	9309      	str	r3, [sp, #36]	; 0x24
 8014b22:	e768      	b.n	80149f6 <_svfiprintf_r+0x4e>
 8014b24:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b28:	460c      	mov	r4, r1
 8014b2a:	2001      	movs	r0, #1
 8014b2c:	e7a6      	b.n	8014a7c <_svfiprintf_r+0xd4>
 8014b2e:	2300      	movs	r3, #0
 8014b30:	3401      	adds	r4, #1
 8014b32:	9305      	str	r3, [sp, #20]
 8014b34:	4619      	mov	r1, r3
 8014b36:	f04f 0c0a 	mov.w	ip, #10
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b40:	3a30      	subs	r2, #48	; 0x30
 8014b42:	2a09      	cmp	r2, #9
 8014b44:	d903      	bls.n	8014b4e <_svfiprintf_r+0x1a6>
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d0c6      	beq.n	8014ad8 <_svfiprintf_r+0x130>
 8014b4a:	9105      	str	r1, [sp, #20]
 8014b4c:	e7c4      	b.n	8014ad8 <_svfiprintf_r+0x130>
 8014b4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b52:	4604      	mov	r4, r0
 8014b54:	2301      	movs	r3, #1
 8014b56:	e7f0      	b.n	8014b3a <_svfiprintf_r+0x192>
 8014b58:	ab03      	add	r3, sp, #12
 8014b5a:	9300      	str	r3, [sp, #0]
 8014b5c:	462a      	mov	r2, r5
 8014b5e:	4b0f      	ldr	r3, [pc, #60]	; (8014b9c <_svfiprintf_r+0x1f4>)
 8014b60:	a904      	add	r1, sp, #16
 8014b62:	4638      	mov	r0, r7
 8014b64:	f7fc fc78 	bl	8011458 <_printf_float>
 8014b68:	1c42      	adds	r2, r0, #1
 8014b6a:	4606      	mov	r6, r0
 8014b6c:	d1d6      	bne.n	8014b1c <_svfiprintf_r+0x174>
 8014b6e:	89ab      	ldrh	r3, [r5, #12]
 8014b70:	065b      	lsls	r3, r3, #25
 8014b72:	f53f af2d 	bmi.w	80149d0 <_svfiprintf_r+0x28>
 8014b76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b78:	b01d      	add	sp, #116	; 0x74
 8014b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7e:	ab03      	add	r3, sp, #12
 8014b80:	9300      	str	r3, [sp, #0]
 8014b82:	462a      	mov	r2, r5
 8014b84:	4b05      	ldr	r3, [pc, #20]	; (8014b9c <_svfiprintf_r+0x1f4>)
 8014b86:	a904      	add	r1, sp, #16
 8014b88:	4638      	mov	r0, r7
 8014b8a:	f7fc ff09 	bl	80119a0 <_printf_i>
 8014b8e:	e7eb      	b.n	8014b68 <_svfiprintf_r+0x1c0>
 8014b90:	08018b29 	.word	0x08018b29
 8014b94:	08018b33 	.word	0x08018b33
 8014b98:	08011459 	.word	0x08011459
 8014b9c:	080148f5 	.word	0x080148f5
 8014ba0:	08018b2f 	.word	0x08018b2f

08014ba4 <__sflush_r>:
 8014ba4:	898a      	ldrh	r2, [r1, #12]
 8014ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014baa:	4605      	mov	r5, r0
 8014bac:	0710      	lsls	r0, r2, #28
 8014bae:	460c      	mov	r4, r1
 8014bb0:	d458      	bmi.n	8014c64 <__sflush_r+0xc0>
 8014bb2:	684b      	ldr	r3, [r1, #4]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	dc05      	bgt.n	8014bc4 <__sflush_r+0x20>
 8014bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	dc02      	bgt.n	8014bc4 <__sflush_r+0x20>
 8014bbe:	2000      	movs	r0, #0
 8014bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014bc6:	2e00      	cmp	r6, #0
 8014bc8:	d0f9      	beq.n	8014bbe <__sflush_r+0x1a>
 8014bca:	2300      	movs	r3, #0
 8014bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014bd0:	682f      	ldr	r7, [r5, #0]
 8014bd2:	6a21      	ldr	r1, [r4, #32]
 8014bd4:	602b      	str	r3, [r5, #0]
 8014bd6:	d032      	beq.n	8014c3e <__sflush_r+0x9a>
 8014bd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014bda:	89a3      	ldrh	r3, [r4, #12]
 8014bdc:	075a      	lsls	r2, r3, #29
 8014bde:	d505      	bpl.n	8014bec <__sflush_r+0x48>
 8014be0:	6863      	ldr	r3, [r4, #4]
 8014be2:	1ac0      	subs	r0, r0, r3
 8014be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014be6:	b10b      	cbz	r3, 8014bec <__sflush_r+0x48>
 8014be8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014bea:	1ac0      	subs	r0, r0, r3
 8014bec:	2300      	movs	r3, #0
 8014bee:	4602      	mov	r2, r0
 8014bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014bf2:	6a21      	ldr	r1, [r4, #32]
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	47b0      	blx	r6
 8014bf8:	1c43      	adds	r3, r0, #1
 8014bfa:	89a3      	ldrh	r3, [r4, #12]
 8014bfc:	d106      	bne.n	8014c0c <__sflush_r+0x68>
 8014bfe:	6829      	ldr	r1, [r5, #0]
 8014c00:	291d      	cmp	r1, #29
 8014c02:	d82b      	bhi.n	8014c5c <__sflush_r+0xb8>
 8014c04:	4a29      	ldr	r2, [pc, #164]	; (8014cac <__sflush_r+0x108>)
 8014c06:	410a      	asrs	r2, r1
 8014c08:	07d6      	lsls	r6, r2, #31
 8014c0a:	d427      	bmi.n	8014c5c <__sflush_r+0xb8>
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	6062      	str	r2, [r4, #4]
 8014c10:	04d9      	lsls	r1, r3, #19
 8014c12:	6922      	ldr	r2, [r4, #16]
 8014c14:	6022      	str	r2, [r4, #0]
 8014c16:	d504      	bpl.n	8014c22 <__sflush_r+0x7e>
 8014c18:	1c42      	adds	r2, r0, #1
 8014c1a:	d101      	bne.n	8014c20 <__sflush_r+0x7c>
 8014c1c:	682b      	ldr	r3, [r5, #0]
 8014c1e:	b903      	cbnz	r3, 8014c22 <__sflush_r+0x7e>
 8014c20:	6560      	str	r0, [r4, #84]	; 0x54
 8014c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c24:	602f      	str	r7, [r5, #0]
 8014c26:	2900      	cmp	r1, #0
 8014c28:	d0c9      	beq.n	8014bbe <__sflush_r+0x1a>
 8014c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c2e:	4299      	cmp	r1, r3
 8014c30:	d002      	beq.n	8014c38 <__sflush_r+0x94>
 8014c32:	4628      	mov	r0, r5
 8014c34:	f7fe fa1a 	bl	801306c <_free_r>
 8014c38:	2000      	movs	r0, #0
 8014c3a:	6360      	str	r0, [r4, #52]	; 0x34
 8014c3c:	e7c0      	b.n	8014bc0 <__sflush_r+0x1c>
 8014c3e:	2301      	movs	r3, #1
 8014c40:	4628      	mov	r0, r5
 8014c42:	47b0      	blx	r6
 8014c44:	1c41      	adds	r1, r0, #1
 8014c46:	d1c8      	bne.n	8014bda <__sflush_r+0x36>
 8014c48:	682b      	ldr	r3, [r5, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d0c5      	beq.n	8014bda <__sflush_r+0x36>
 8014c4e:	2b1d      	cmp	r3, #29
 8014c50:	d001      	beq.n	8014c56 <__sflush_r+0xb2>
 8014c52:	2b16      	cmp	r3, #22
 8014c54:	d101      	bne.n	8014c5a <__sflush_r+0xb6>
 8014c56:	602f      	str	r7, [r5, #0]
 8014c58:	e7b1      	b.n	8014bbe <__sflush_r+0x1a>
 8014c5a:	89a3      	ldrh	r3, [r4, #12]
 8014c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c60:	81a3      	strh	r3, [r4, #12]
 8014c62:	e7ad      	b.n	8014bc0 <__sflush_r+0x1c>
 8014c64:	690f      	ldr	r7, [r1, #16]
 8014c66:	2f00      	cmp	r7, #0
 8014c68:	d0a9      	beq.n	8014bbe <__sflush_r+0x1a>
 8014c6a:	0793      	lsls	r3, r2, #30
 8014c6c:	680e      	ldr	r6, [r1, #0]
 8014c6e:	bf08      	it	eq
 8014c70:	694b      	ldreq	r3, [r1, #20]
 8014c72:	600f      	str	r7, [r1, #0]
 8014c74:	bf18      	it	ne
 8014c76:	2300      	movne	r3, #0
 8014c78:	eba6 0807 	sub.w	r8, r6, r7
 8014c7c:	608b      	str	r3, [r1, #8]
 8014c7e:	f1b8 0f00 	cmp.w	r8, #0
 8014c82:	dd9c      	ble.n	8014bbe <__sflush_r+0x1a>
 8014c84:	6a21      	ldr	r1, [r4, #32]
 8014c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014c88:	4643      	mov	r3, r8
 8014c8a:	463a      	mov	r2, r7
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	47b0      	blx	r6
 8014c90:	2800      	cmp	r0, #0
 8014c92:	dc06      	bgt.n	8014ca2 <__sflush_r+0xfe>
 8014c94:	89a3      	ldrh	r3, [r4, #12]
 8014c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c9a:	81a3      	strh	r3, [r4, #12]
 8014c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca0:	e78e      	b.n	8014bc0 <__sflush_r+0x1c>
 8014ca2:	4407      	add	r7, r0
 8014ca4:	eba8 0800 	sub.w	r8, r8, r0
 8014ca8:	e7e9      	b.n	8014c7e <__sflush_r+0xda>
 8014caa:	bf00      	nop
 8014cac:	dfbffffe 	.word	0xdfbffffe

08014cb0 <_fflush_r>:
 8014cb0:	b538      	push	{r3, r4, r5, lr}
 8014cb2:	690b      	ldr	r3, [r1, #16]
 8014cb4:	4605      	mov	r5, r0
 8014cb6:	460c      	mov	r4, r1
 8014cb8:	b913      	cbnz	r3, 8014cc0 <_fflush_r+0x10>
 8014cba:	2500      	movs	r5, #0
 8014cbc:	4628      	mov	r0, r5
 8014cbe:	bd38      	pop	{r3, r4, r5, pc}
 8014cc0:	b118      	cbz	r0, 8014cca <_fflush_r+0x1a>
 8014cc2:	6a03      	ldr	r3, [r0, #32]
 8014cc4:	b90b      	cbnz	r3, 8014cca <_fflush_r+0x1a>
 8014cc6:	f7fd fa29 	bl	801211c <__sinit>
 8014cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d0f3      	beq.n	8014cba <_fflush_r+0xa>
 8014cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014cd4:	07d0      	lsls	r0, r2, #31
 8014cd6:	d404      	bmi.n	8014ce2 <_fflush_r+0x32>
 8014cd8:	0599      	lsls	r1, r3, #22
 8014cda:	d402      	bmi.n	8014ce2 <_fflush_r+0x32>
 8014cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cde:	f7fd fb34 	bl	801234a <__retarget_lock_acquire_recursive>
 8014ce2:	4628      	mov	r0, r5
 8014ce4:	4621      	mov	r1, r4
 8014ce6:	f7ff ff5d 	bl	8014ba4 <__sflush_r>
 8014cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014cec:	07da      	lsls	r2, r3, #31
 8014cee:	4605      	mov	r5, r0
 8014cf0:	d4e4      	bmi.n	8014cbc <_fflush_r+0xc>
 8014cf2:	89a3      	ldrh	r3, [r4, #12]
 8014cf4:	059b      	lsls	r3, r3, #22
 8014cf6:	d4e1      	bmi.n	8014cbc <_fflush_r+0xc>
 8014cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cfa:	f7fd fb27 	bl	801234c <__retarget_lock_release_recursive>
 8014cfe:	e7dd      	b.n	8014cbc <_fflush_r+0xc>

08014d00 <memmove>:
 8014d00:	4288      	cmp	r0, r1
 8014d02:	b510      	push	{r4, lr}
 8014d04:	eb01 0402 	add.w	r4, r1, r2
 8014d08:	d902      	bls.n	8014d10 <memmove+0x10>
 8014d0a:	4284      	cmp	r4, r0
 8014d0c:	4623      	mov	r3, r4
 8014d0e:	d807      	bhi.n	8014d20 <memmove+0x20>
 8014d10:	1e43      	subs	r3, r0, #1
 8014d12:	42a1      	cmp	r1, r4
 8014d14:	d008      	beq.n	8014d28 <memmove+0x28>
 8014d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d1e:	e7f8      	b.n	8014d12 <memmove+0x12>
 8014d20:	4402      	add	r2, r0
 8014d22:	4601      	mov	r1, r0
 8014d24:	428a      	cmp	r2, r1
 8014d26:	d100      	bne.n	8014d2a <memmove+0x2a>
 8014d28:	bd10      	pop	{r4, pc}
 8014d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d32:	e7f7      	b.n	8014d24 <memmove+0x24>

08014d34 <strncmp>:
 8014d34:	b510      	push	{r4, lr}
 8014d36:	b16a      	cbz	r2, 8014d54 <strncmp+0x20>
 8014d38:	3901      	subs	r1, #1
 8014d3a:	1884      	adds	r4, r0, r2
 8014d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d103      	bne.n	8014d50 <strncmp+0x1c>
 8014d48:	42a0      	cmp	r0, r4
 8014d4a:	d001      	beq.n	8014d50 <strncmp+0x1c>
 8014d4c:	2a00      	cmp	r2, #0
 8014d4e:	d1f5      	bne.n	8014d3c <strncmp+0x8>
 8014d50:	1ad0      	subs	r0, r2, r3
 8014d52:	bd10      	pop	{r4, pc}
 8014d54:	4610      	mov	r0, r2
 8014d56:	e7fc      	b.n	8014d52 <strncmp+0x1e>

08014d58 <_sbrk_r>:
 8014d58:	b538      	push	{r3, r4, r5, lr}
 8014d5a:	4d06      	ldr	r5, [pc, #24]	; (8014d74 <_sbrk_r+0x1c>)
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	4604      	mov	r4, r0
 8014d60:	4608      	mov	r0, r1
 8014d62:	602b      	str	r3, [r5, #0]
 8014d64:	f7f1 f900 	bl	8005f68 <_sbrk>
 8014d68:	1c43      	adds	r3, r0, #1
 8014d6a:	d102      	bne.n	8014d72 <_sbrk_r+0x1a>
 8014d6c:	682b      	ldr	r3, [r5, #0]
 8014d6e:	b103      	cbz	r3, 8014d72 <_sbrk_r+0x1a>
 8014d70:	6023      	str	r3, [r4, #0]
 8014d72:	bd38      	pop	{r3, r4, r5, pc}
 8014d74:	200023d0 	.word	0x200023d0

08014d78 <nan>:
 8014d78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014d80 <nan+0x8>
 8014d7c:	4770      	bx	lr
 8014d7e:	bf00      	nop
 8014d80:	00000000 	.word	0x00000000
 8014d84:	7ff80000 	.word	0x7ff80000

08014d88 <__assert_func>:
 8014d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d8a:	4614      	mov	r4, r2
 8014d8c:	461a      	mov	r2, r3
 8014d8e:	4b09      	ldr	r3, [pc, #36]	; (8014db4 <__assert_func+0x2c>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	4605      	mov	r5, r0
 8014d94:	68d8      	ldr	r0, [r3, #12]
 8014d96:	b14c      	cbz	r4, 8014dac <__assert_func+0x24>
 8014d98:	4b07      	ldr	r3, [pc, #28]	; (8014db8 <__assert_func+0x30>)
 8014d9a:	9100      	str	r1, [sp, #0]
 8014d9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014da0:	4906      	ldr	r1, [pc, #24]	; (8014dbc <__assert_func+0x34>)
 8014da2:	462b      	mov	r3, r5
 8014da4:	f000 fbca 	bl	801553c <fiprintf>
 8014da8:	f000 fbda 	bl	8015560 <abort>
 8014dac:	4b04      	ldr	r3, [pc, #16]	; (8014dc0 <__assert_func+0x38>)
 8014dae:	461c      	mov	r4, r3
 8014db0:	e7f3      	b.n	8014d9a <__assert_func+0x12>
 8014db2:	bf00      	nop
 8014db4:	20000274 	.word	0x20000274
 8014db8:	08018b42 	.word	0x08018b42
 8014dbc:	08018b4f 	.word	0x08018b4f
 8014dc0:	08018b7d 	.word	0x08018b7d

08014dc4 <_calloc_r>:
 8014dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014dc6:	fba1 2402 	umull	r2, r4, r1, r2
 8014dca:	b94c      	cbnz	r4, 8014de0 <_calloc_r+0x1c>
 8014dcc:	4611      	mov	r1, r2
 8014dce:	9201      	str	r2, [sp, #4]
 8014dd0:	f7fe f9c0 	bl	8013154 <_malloc_r>
 8014dd4:	9a01      	ldr	r2, [sp, #4]
 8014dd6:	4605      	mov	r5, r0
 8014dd8:	b930      	cbnz	r0, 8014de8 <_calloc_r+0x24>
 8014dda:	4628      	mov	r0, r5
 8014ddc:	b003      	add	sp, #12
 8014dde:	bd30      	pop	{r4, r5, pc}
 8014de0:	220c      	movs	r2, #12
 8014de2:	6002      	str	r2, [r0, #0]
 8014de4:	2500      	movs	r5, #0
 8014de6:	e7f8      	b.n	8014dda <_calloc_r+0x16>
 8014de8:	4621      	mov	r1, r4
 8014dea:	f7fd fa30 	bl	801224e <memset>
 8014dee:	e7f4      	b.n	8014dda <_calloc_r+0x16>

08014df0 <rshift>:
 8014df0:	6903      	ldr	r3, [r0, #16]
 8014df2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014df6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dfa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014dfe:	f100 0414 	add.w	r4, r0, #20
 8014e02:	dd45      	ble.n	8014e90 <rshift+0xa0>
 8014e04:	f011 011f 	ands.w	r1, r1, #31
 8014e08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014e0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014e10:	d10c      	bne.n	8014e2c <rshift+0x3c>
 8014e12:	f100 0710 	add.w	r7, r0, #16
 8014e16:	4629      	mov	r1, r5
 8014e18:	42b1      	cmp	r1, r6
 8014e1a:	d334      	bcc.n	8014e86 <rshift+0x96>
 8014e1c:	1a9b      	subs	r3, r3, r2
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	1eea      	subs	r2, r5, #3
 8014e22:	4296      	cmp	r6, r2
 8014e24:	bf38      	it	cc
 8014e26:	2300      	movcc	r3, #0
 8014e28:	4423      	add	r3, r4
 8014e2a:	e015      	b.n	8014e58 <rshift+0x68>
 8014e2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014e30:	f1c1 0820 	rsb	r8, r1, #32
 8014e34:	40cf      	lsrs	r7, r1
 8014e36:	f105 0e04 	add.w	lr, r5, #4
 8014e3a:	46a1      	mov	r9, r4
 8014e3c:	4576      	cmp	r6, lr
 8014e3e:	46f4      	mov	ip, lr
 8014e40:	d815      	bhi.n	8014e6e <rshift+0x7e>
 8014e42:	1a9a      	subs	r2, r3, r2
 8014e44:	0092      	lsls	r2, r2, #2
 8014e46:	3a04      	subs	r2, #4
 8014e48:	3501      	adds	r5, #1
 8014e4a:	42ae      	cmp	r6, r5
 8014e4c:	bf38      	it	cc
 8014e4e:	2200      	movcc	r2, #0
 8014e50:	18a3      	adds	r3, r4, r2
 8014e52:	50a7      	str	r7, [r4, r2]
 8014e54:	b107      	cbz	r7, 8014e58 <rshift+0x68>
 8014e56:	3304      	adds	r3, #4
 8014e58:	1b1a      	subs	r2, r3, r4
 8014e5a:	42a3      	cmp	r3, r4
 8014e5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014e60:	bf08      	it	eq
 8014e62:	2300      	moveq	r3, #0
 8014e64:	6102      	str	r2, [r0, #16]
 8014e66:	bf08      	it	eq
 8014e68:	6143      	streq	r3, [r0, #20]
 8014e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e6e:	f8dc c000 	ldr.w	ip, [ip]
 8014e72:	fa0c fc08 	lsl.w	ip, ip, r8
 8014e76:	ea4c 0707 	orr.w	r7, ip, r7
 8014e7a:	f849 7b04 	str.w	r7, [r9], #4
 8014e7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014e82:	40cf      	lsrs	r7, r1
 8014e84:	e7da      	b.n	8014e3c <rshift+0x4c>
 8014e86:	f851 cb04 	ldr.w	ip, [r1], #4
 8014e8a:	f847 cf04 	str.w	ip, [r7, #4]!
 8014e8e:	e7c3      	b.n	8014e18 <rshift+0x28>
 8014e90:	4623      	mov	r3, r4
 8014e92:	e7e1      	b.n	8014e58 <rshift+0x68>

08014e94 <__hexdig_fun>:
 8014e94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014e98:	2b09      	cmp	r3, #9
 8014e9a:	d802      	bhi.n	8014ea2 <__hexdig_fun+0xe>
 8014e9c:	3820      	subs	r0, #32
 8014e9e:	b2c0      	uxtb	r0, r0
 8014ea0:	4770      	bx	lr
 8014ea2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014ea6:	2b05      	cmp	r3, #5
 8014ea8:	d801      	bhi.n	8014eae <__hexdig_fun+0x1a>
 8014eaa:	3847      	subs	r0, #71	; 0x47
 8014eac:	e7f7      	b.n	8014e9e <__hexdig_fun+0xa>
 8014eae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014eb2:	2b05      	cmp	r3, #5
 8014eb4:	d801      	bhi.n	8014eba <__hexdig_fun+0x26>
 8014eb6:	3827      	subs	r0, #39	; 0x27
 8014eb8:	e7f1      	b.n	8014e9e <__hexdig_fun+0xa>
 8014eba:	2000      	movs	r0, #0
 8014ebc:	4770      	bx	lr
	...

08014ec0 <__gethex>:
 8014ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec4:	4617      	mov	r7, r2
 8014ec6:	680a      	ldr	r2, [r1, #0]
 8014ec8:	b085      	sub	sp, #20
 8014eca:	f102 0b02 	add.w	fp, r2, #2
 8014ece:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014ed2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014ed6:	4681      	mov	r9, r0
 8014ed8:	468a      	mov	sl, r1
 8014eda:	9302      	str	r3, [sp, #8]
 8014edc:	32fe      	adds	r2, #254	; 0xfe
 8014ede:	eb02 030b 	add.w	r3, r2, fp
 8014ee2:	46d8      	mov	r8, fp
 8014ee4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014ee8:	9301      	str	r3, [sp, #4]
 8014eea:	2830      	cmp	r0, #48	; 0x30
 8014eec:	d0f7      	beq.n	8014ede <__gethex+0x1e>
 8014eee:	f7ff ffd1 	bl	8014e94 <__hexdig_fun>
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	2800      	cmp	r0, #0
 8014ef6:	d138      	bne.n	8014f6a <__gethex+0xaa>
 8014ef8:	49a7      	ldr	r1, [pc, #668]	; (8015198 <__gethex+0x2d8>)
 8014efa:	2201      	movs	r2, #1
 8014efc:	4640      	mov	r0, r8
 8014efe:	f7ff ff19 	bl	8014d34 <strncmp>
 8014f02:	4606      	mov	r6, r0
 8014f04:	2800      	cmp	r0, #0
 8014f06:	d169      	bne.n	8014fdc <__gethex+0x11c>
 8014f08:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014f0c:	465d      	mov	r5, fp
 8014f0e:	f7ff ffc1 	bl	8014e94 <__hexdig_fun>
 8014f12:	2800      	cmp	r0, #0
 8014f14:	d064      	beq.n	8014fe0 <__gethex+0x120>
 8014f16:	465a      	mov	r2, fp
 8014f18:	7810      	ldrb	r0, [r2, #0]
 8014f1a:	2830      	cmp	r0, #48	; 0x30
 8014f1c:	4690      	mov	r8, r2
 8014f1e:	f102 0201 	add.w	r2, r2, #1
 8014f22:	d0f9      	beq.n	8014f18 <__gethex+0x58>
 8014f24:	f7ff ffb6 	bl	8014e94 <__hexdig_fun>
 8014f28:	2301      	movs	r3, #1
 8014f2a:	fab0 f480 	clz	r4, r0
 8014f2e:	0964      	lsrs	r4, r4, #5
 8014f30:	465e      	mov	r6, fp
 8014f32:	9301      	str	r3, [sp, #4]
 8014f34:	4642      	mov	r2, r8
 8014f36:	4615      	mov	r5, r2
 8014f38:	3201      	adds	r2, #1
 8014f3a:	7828      	ldrb	r0, [r5, #0]
 8014f3c:	f7ff ffaa 	bl	8014e94 <__hexdig_fun>
 8014f40:	2800      	cmp	r0, #0
 8014f42:	d1f8      	bne.n	8014f36 <__gethex+0x76>
 8014f44:	4994      	ldr	r1, [pc, #592]	; (8015198 <__gethex+0x2d8>)
 8014f46:	2201      	movs	r2, #1
 8014f48:	4628      	mov	r0, r5
 8014f4a:	f7ff fef3 	bl	8014d34 <strncmp>
 8014f4e:	b978      	cbnz	r0, 8014f70 <__gethex+0xb0>
 8014f50:	b946      	cbnz	r6, 8014f64 <__gethex+0xa4>
 8014f52:	1c6e      	adds	r6, r5, #1
 8014f54:	4632      	mov	r2, r6
 8014f56:	4615      	mov	r5, r2
 8014f58:	3201      	adds	r2, #1
 8014f5a:	7828      	ldrb	r0, [r5, #0]
 8014f5c:	f7ff ff9a 	bl	8014e94 <__hexdig_fun>
 8014f60:	2800      	cmp	r0, #0
 8014f62:	d1f8      	bne.n	8014f56 <__gethex+0x96>
 8014f64:	1b73      	subs	r3, r6, r5
 8014f66:	009e      	lsls	r6, r3, #2
 8014f68:	e004      	b.n	8014f74 <__gethex+0xb4>
 8014f6a:	2400      	movs	r4, #0
 8014f6c:	4626      	mov	r6, r4
 8014f6e:	e7e1      	b.n	8014f34 <__gethex+0x74>
 8014f70:	2e00      	cmp	r6, #0
 8014f72:	d1f7      	bne.n	8014f64 <__gethex+0xa4>
 8014f74:	782b      	ldrb	r3, [r5, #0]
 8014f76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014f7a:	2b50      	cmp	r3, #80	; 0x50
 8014f7c:	d13d      	bne.n	8014ffa <__gethex+0x13a>
 8014f7e:	786b      	ldrb	r3, [r5, #1]
 8014f80:	2b2b      	cmp	r3, #43	; 0x2b
 8014f82:	d02f      	beq.n	8014fe4 <__gethex+0x124>
 8014f84:	2b2d      	cmp	r3, #45	; 0x2d
 8014f86:	d031      	beq.n	8014fec <__gethex+0x12c>
 8014f88:	1c69      	adds	r1, r5, #1
 8014f8a:	f04f 0b00 	mov.w	fp, #0
 8014f8e:	7808      	ldrb	r0, [r1, #0]
 8014f90:	f7ff ff80 	bl	8014e94 <__hexdig_fun>
 8014f94:	1e42      	subs	r2, r0, #1
 8014f96:	b2d2      	uxtb	r2, r2
 8014f98:	2a18      	cmp	r2, #24
 8014f9a:	d82e      	bhi.n	8014ffa <__gethex+0x13a>
 8014f9c:	f1a0 0210 	sub.w	r2, r0, #16
 8014fa0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014fa4:	f7ff ff76 	bl	8014e94 <__hexdig_fun>
 8014fa8:	f100 3cff 	add.w	ip, r0, #4294967295
 8014fac:	fa5f fc8c 	uxtb.w	ip, ip
 8014fb0:	f1bc 0f18 	cmp.w	ip, #24
 8014fb4:	d91d      	bls.n	8014ff2 <__gethex+0x132>
 8014fb6:	f1bb 0f00 	cmp.w	fp, #0
 8014fba:	d000      	beq.n	8014fbe <__gethex+0xfe>
 8014fbc:	4252      	negs	r2, r2
 8014fbe:	4416      	add	r6, r2
 8014fc0:	f8ca 1000 	str.w	r1, [sl]
 8014fc4:	b1dc      	cbz	r4, 8014ffe <__gethex+0x13e>
 8014fc6:	9b01      	ldr	r3, [sp, #4]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	bf14      	ite	ne
 8014fcc:	f04f 0800 	movne.w	r8, #0
 8014fd0:	f04f 0806 	moveq.w	r8, #6
 8014fd4:	4640      	mov	r0, r8
 8014fd6:	b005      	add	sp, #20
 8014fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fdc:	4645      	mov	r5, r8
 8014fde:	4626      	mov	r6, r4
 8014fe0:	2401      	movs	r4, #1
 8014fe2:	e7c7      	b.n	8014f74 <__gethex+0xb4>
 8014fe4:	f04f 0b00 	mov.w	fp, #0
 8014fe8:	1ca9      	adds	r1, r5, #2
 8014fea:	e7d0      	b.n	8014f8e <__gethex+0xce>
 8014fec:	f04f 0b01 	mov.w	fp, #1
 8014ff0:	e7fa      	b.n	8014fe8 <__gethex+0x128>
 8014ff2:	230a      	movs	r3, #10
 8014ff4:	fb03 0002 	mla	r0, r3, r2, r0
 8014ff8:	e7d0      	b.n	8014f9c <__gethex+0xdc>
 8014ffa:	4629      	mov	r1, r5
 8014ffc:	e7e0      	b.n	8014fc0 <__gethex+0x100>
 8014ffe:	eba5 0308 	sub.w	r3, r5, r8
 8015002:	3b01      	subs	r3, #1
 8015004:	4621      	mov	r1, r4
 8015006:	2b07      	cmp	r3, #7
 8015008:	dc0a      	bgt.n	8015020 <__gethex+0x160>
 801500a:	4648      	mov	r0, r9
 801500c:	f7fe f92e 	bl	801326c <_Balloc>
 8015010:	4604      	mov	r4, r0
 8015012:	b940      	cbnz	r0, 8015026 <__gethex+0x166>
 8015014:	4b61      	ldr	r3, [pc, #388]	; (801519c <__gethex+0x2dc>)
 8015016:	4602      	mov	r2, r0
 8015018:	21e4      	movs	r1, #228	; 0xe4
 801501a:	4861      	ldr	r0, [pc, #388]	; (80151a0 <__gethex+0x2e0>)
 801501c:	f7ff feb4 	bl	8014d88 <__assert_func>
 8015020:	3101      	adds	r1, #1
 8015022:	105b      	asrs	r3, r3, #1
 8015024:	e7ef      	b.n	8015006 <__gethex+0x146>
 8015026:	f100 0a14 	add.w	sl, r0, #20
 801502a:	2300      	movs	r3, #0
 801502c:	495a      	ldr	r1, [pc, #360]	; (8015198 <__gethex+0x2d8>)
 801502e:	f8cd a004 	str.w	sl, [sp, #4]
 8015032:	469b      	mov	fp, r3
 8015034:	45a8      	cmp	r8, r5
 8015036:	d342      	bcc.n	80150be <__gethex+0x1fe>
 8015038:	9801      	ldr	r0, [sp, #4]
 801503a:	f840 bb04 	str.w	fp, [r0], #4
 801503e:	eba0 000a 	sub.w	r0, r0, sl
 8015042:	1080      	asrs	r0, r0, #2
 8015044:	6120      	str	r0, [r4, #16]
 8015046:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801504a:	4658      	mov	r0, fp
 801504c:	f7fe fa00 	bl	8013450 <__hi0bits>
 8015050:	683d      	ldr	r5, [r7, #0]
 8015052:	eba8 0000 	sub.w	r0, r8, r0
 8015056:	42a8      	cmp	r0, r5
 8015058:	dd59      	ble.n	801510e <__gethex+0x24e>
 801505a:	eba0 0805 	sub.w	r8, r0, r5
 801505e:	4641      	mov	r1, r8
 8015060:	4620      	mov	r0, r4
 8015062:	f7fe fd8f 	bl	8013b84 <__any_on>
 8015066:	4683      	mov	fp, r0
 8015068:	b1b8      	cbz	r0, 801509a <__gethex+0x1da>
 801506a:	f108 33ff 	add.w	r3, r8, #4294967295
 801506e:	1159      	asrs	r1, r3, #5
 8015070:	f003 021f 	and.w	r2, r3, #31
 8015074:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015078:	f04f 0b01 	mov.w	fp, #1
 801507c:	fa0b f202 	lsl.w	r2, fp, r2
 8015080:	420a      	tst	r2, r1
 8015082:	d00a      	beq.n	801509a <__gethex+0x1da>
 8015084:	455b      	cmp	r3, fp
 8015086:	dd06      	ble.n	8015096 <__gethex+0x1d6>
 8015088:	f1a8 0102 	sub.w	r1, r8, #2
 801508c:	4620      	mov	r0, r4
 801508e:	f7fe fd79 	bl	8013b84 <__any_on>
 8015092:	2800      	cmp	r0, #0
 8015094:	d138      	bne.n	8015108 <__gethex+0x248>
 8015096:	f04f 0b02 	mov.w	fp, #2
 801509a:	4641      	mov	r1, r8
 801509c:	4620      	mov	r0, r4
 801509e:	f7ff fea7 	bl	8014df0 <rshift>
 80150a2:	4446      	add	r6, r8
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	42b3      	cmp	r3, r6
 80150a8:	da41      	bge.n	801512e <__gethex+0x26e>
 80150aa:	4621      	mov	r1, r4
 80150ac:	4648      	mov	r0, r9
 80150ae:	f7fe f91d 	bl	80132ec <_Bfree>
 80150b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150b4:	2300      	movs	r3, #0
 80150b6:	6013      	str	r3, [r2, #0]
 80150b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80150bc:	e78a      	b.n	8014fd4 <__gethex+0x114>
 80150be:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80150c2:	2a2e      	cmp	r2, #46	; 0x2e
 80150c4:	d014      	beq.n	80150f0 <__gethex+0x230>
 80150c6:	2b20      	cmp	r3, #32
 80150c8:	d106      	bne.n	80150d8 <__gethex+0x218>
 80150ca:	9b01      	ldr	r3, [sp, #4]
 80150cc:	f843 bb04 	str.w	fp, [r3], #4
 80150d0:	f04f 0b00 	mov.w	fp, #0
 80150d4:	9301      	str	r3, [sp, #4]
 80150d6:	465b      	mov	r3, fp
 80150d8:	7828      	ldrb	r0, [r5, #0]
 80150da:	9303      	str	r3, [sp, #12]
 80150dc:	f7ff feda 	bl	8014e94 <__hexdig_fun>
 80150e0:	9b03      	ldr	r3, [sp, #12]
 80150e2:	f000 000f 	and.w	r0, r0, #15
 80150e6:	4098      	lsls	r0, r3
 80150e8:	ea4b 0b00 	orr.w	fp, fp, r0
 80150ec:	3304      	adds	r3, #4
 80150ee:	e7a1      	b.n	8015034 <__gethex+0x174>
 80150f0:	45a8      	cmp	r8, r5
 80150f2:	d8e8      	bhi.n	80150c6 <__gethex+0x206>
 80150f4:	2201      	movs	r2, #1
 80150f6:	4628      	mov	r0, r5
 80150f8:	9303      	str	r3, [sp, #12]
 80150fa:	f7ff fe1b 	bl	8014d34 <strncmp>
 80150fe:	4926      	ldr	r1, [pc, #152]	; (8015198 <__gethex+0x2d8>)
 8015100:	9b03      	ldr	r3, [sp, #12]
 8015102:	2800      	cmp	r0, #0
 8015104:	d1df      	bne.n	80150c6 <__gethex+0x206>
 8015106:	e795      	b.n	8015034 <__gethex+0x174>
 8015108:	f04f 0b03 	mov.w	fp, #3
 801510c:	e7c5      	b.n	801509a <__gethex+0x1da>
 801510e:	da0b      	bge.n	8015128 <__gethex+0x268>
 8015110:	eba5 0800 	sub.w	r8, r5, r0
 8015114:	4621      	mov	r1, r4
 8015116:	4642      	mov	r2, r8
 8015118:	4648      	mov	r0, r9
 801511a:	f7fe fb01 	bl	8013720 <__lshift>
 801511e:	eba6 0608 	sub.w	r6, r6, r8
 8015122:	4604      	mov	r4, r0
 8015124:	f100 0a14 	add.w	sl, r0, #20
 8015128:	f04f 0b00 	mov.w	fp, #0
 801512c:	e7ba      	b.n	80150a4 <__gethex+0x1e4>
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	42b3      	cmp	r3, r6
 8015132:	dd73      	ble.n	801521c <__gethex+0x35c>
 8015134:	1b9e      	subs	r6, r3, r6
 8015136:	42b5      	cmp	r5, r6
 8015138:	dc34      	bgt.n	80151a4 <__gethex+0x2e4>
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2b02      	cmp	r3, #2
 801513e:	d023      	beq.n	8015188 <__gethex+0x2c8>
 8015140:	2b03      	cmp	r3, #3
 8015142:	d025      	beq.n	8015190 <__gethex+0x2d0>
 8015144:	2b01      	cmp	r3, #1
 8015146:	d115      	bne.n	8015174 <__gethex+0x2b4>
 8015148:	42b5      	cmp	r5, r6
 801514a:	d113      	bne.n	8015174 <__gethex+0x2b4>
 801514c:	2d01      	cmp	r5, #1
 801514e:	d10b      	bne.n	8015168 <__gethex+0x2a8>
 8015150:	9a02      	ldr	r2, [sp, #8]
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	6013      	str	r3, [r2, #0]
 8015156:	2301      	movs	r3, #1
 8015158:	6123      	str	r3, [r4, #16]
 801515a:	f8ca 3000 	str.w	r3, [sl]
 801515e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015160:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015164:	601c      	str	r4, [r3, #0]
 8015166:	e735      	b.n	8014fd4 <__gethex+0x114>
 8015168:	1e69      	subs	r1, r5, #1
 801516a:	4620      	mov	r0, r4
 801516c:	f7fe fd0a 	bl	8013b84 <__any_on>
 8015170:	2800      	cmp	r0, #0
 8015172:	d1ed      	bne.n	8015150 <__gethex+0x290>
 8015174:	4621      	mov	r1, r4
 8015176:	4648      	mov	r0, r9
 8015178:	f7fe f8b8 	bl	80132ec <_Bfree>
 801517c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801517e:	2300      	movs	r3, #0
 8015180:	6013      	str	r3, [r2, #0]
 8015182:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015186:	e725      	b.n	8014fd4 <__gethex+0x114>
 8015188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801518a:	2b00      	cmp	r3, #0
 801518c:	d1f2      	bne.n	8015174 <__gethex+0x2b4>
 801518e:	e7df      	b.n	8015150 <__gethex+0x290>
 8015190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015192:	2b00      	cmp	r3, #0
 8015194:	d1dc      	bne.n	8015150 <__gethex+0x290>
 8015196:	e7ed      	b.n	8015174 <__gethex+0x2b4>
 8015198:	080189d4 	.word	0x080189d4
 801519c:	0801886d 	.word	0x0801886d
 80151a0:	08018b7e 	.word	0x08018b7e
 80151a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80151a8:	f1bb 0f00 	cmp.w	fp, #0
 80151ac:	d133      	bne.n	8015216 <__gethex+0x356>
 80151ae:	f1b8 0f00 	cmp.w	r8, #0
 80151b2:	d004      	beq.n	80151be <__gethex+0x2fe>
 80151b4:	4641      	mov	r1, r8
 80151b6:	4620      	mov	r0, r4
 80151b8:	f7fe fce4 	bl	8013b84 <__any_on>
 80151bc:	4683      	mov	fp, r0
 80151be:	ea4f 1268 	mov.w	r2, r8, asr #5
 80151c2:	2301      	movs	r3, #1
 80151c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80151c8:	f008 081f 	and.w	r8, r8, #31
 80151cc:	fa03 f308 	lsl.w	r3, r3, r8
 80151d0:	4213      	tst	r3, r2
 80151d2:	4631      	mov	r1, r6
 80151d4:	4620      	mov	r0, r4
 80151d6:	bf18      	it	ne
 80151d8:	f04b 0b02 	orrne.w	fp, fp, #2
 80151dc:	1bad      	subs	r5, r5, r6
 80151de:	f7ff fe07 	bl	8014df0 <rshift>
 80151e2:	687e      	ldr	r6, [r7, #4]
 80151e4:	f04f 0802 	mov.w	r8, #2
 80151e8:	f1bb 0f00 	cmp.w	fp, #0
 80151ec:	d04a      	beq.n	8015284 <__gethex+0x3c4>
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	2b02      	cmp	r3, #2
 80151f2:	d016      	beq.n	8015222 <__gethex+0x362>
 80151f4:	2b03      	cmp	r3, #3
 80151f6:	d018      	beq.n	801522a <__gethex+0x36a>
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d109      	bne.n	8015210 <__gethex+0x350>
 80151fc:	f01b 0f02 	tst.w	fp, #2
 8015200:	d006      	beq.n	8015210 <__gethex+0x350>
 8015202:	f8da 3000 	ldr.w	r3, [sl]
 8015206:	ea4b 0b03 	orr.w	fp, fp, r3
 801520a:	f01b 0f01 	tst.w	fp, #1
 801520e:	d10f      	bne.n	8015230 <__gethex+0x370>
 8015210:	f048 0810 	orr.w	r8, r8, #16
 8015214:	e036      	b.n	8015284 <__gethex+0x3c4>
 8015216:	f04f 0b01 	mov.w	fp, #1
 801521a:	e7d0      	b.n	80151be <__gethex+0x2fe>
 801521c:	f04f 0801 	mov.w	r8, #1
 8015220:	e7e2      	b.n	80151e8 <__gethex+0x328>
 8015222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015224:	f1c3 0301 	rsb	r3, r3, #1
 8015228:	930f      	str	r3, [sp, #60]	; 0x3c
 801522a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801522c:	2b00      	cmp	r3, #0
 801522e:	d0ef      	beq.n	8015210 <__gethex+0x350>
 8015230:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015234:	f104 0214 	add.w	r2, r4, #20
 8015238:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801523c:	9301      	str	r3, [sp, #4]
 801523e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8015242:	2300      	movs	r3, #0
 8015244:	4694      	mov	ip, r2
 8015246:	f852 1b04 	ldr.w	r1, [r2], #4
 801524a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801524e:	d01e      	beq.n	801528e <__gethex+0x3ce>
 8015250:	3101      	adds	r1, #1
 8015252:	f8cc 1000 	str.w	r1, [ip]
 8015256:	f1b8 0f02 	cmp.w	r8, #2
 801525a:	f104 0214 	add.w	r2, r4, #20
 801525e:	d13d      	bne.n	80152dc <__gethex+0x41c>
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	3b01      	subs	r3, #1
 8015264:	42ab      	cmp	r3, r5
 8015266:	d10b      	bne.n	8015280 <__gethex+0x3c0>
 8015268:	1169      	asrs	r1, r5, #5
 801526a:	2301      	movs	r3, #1
 801526c:	f005 051f 	and.w	r5, r5, #31
 8015270:	fa03 f505 	lsl.w	r5, r3, r5
 8015274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015278:	421d      	tst	r5, r3
 801527a:	bf18      	it	ne
 801527c:	f04f 0801 	movne.w	r8, #1
 8015280:	f048 0820 	orr.w	r8, r8, #32
 8015284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015286:	601c      	str	r4, [r3, #0]
 8015288:	9b02      	ldr	r3, [sp, #8]
 801528a:	601e      	str	r6, [r3, #0]
 801528c:	e6a2      	b.n	8014fd4 <__gethex+0x114>
 801528e:	4290      	cmp	r0, r2
 8015290:	f842 3c04 	str.w	r3, [r2, #-4]
 8015294:	d8d6      	bhi.n	8015244 <__gethex+0x384>
 8015296:	68a2      	ldr	r2, [r4, #8]
 8015298:	4593      	cmp	fp, r2
 801529a:	db17      	blt.n	80152cc <__gethex+0x40c>
 801529c:	6861      	ldr	r1, [r4, #4]
 801529e:	4648      	mov	r0, r9
 80152a0:	3101      	adds	r1, #1
 80152a2:	f7fd ffe3 	bl	801326c <_Balloc>
 80152a6:	4682      	mov	sl, r0
 80152a8:	b918      	cbnz	r0, 80152b2 <__gethex+0x3f2>
 80152aa:	4b1b      	ldr	r3, [pc, #108]	; (8015318 <__gethex+0x458>)
 80152ac:	4602      	mov	r2, r0
 80152ae:	2184      	movs	r1, #132	; 0x84
 80152b0:	e6b3      	b.n	801501a <__gethex+0x15a>
 80152b2:	6922      	ldr	r2, [r4, #16]
 80152b4:	3202      	adds	r2, #2
 80152b6:	f104 010c 	add.w	r1, r4, #12
 80152ba:	0092      	lsls	r2, r2, #2
 80152bc:	300c      	adds	r0, #12
 80152be:	f7fd f846 	bl	801234e <memcpy>
 80152c2:	4621      	mov	r1, r4
 80152c4:	4648      	mov	r0, r9
 80152c6:	f7fe f811 	bl	80132ec <_Bfree>
 80152ca:	4654      	mov	r4, sl
 80152cc:	6922      	ldr	r2, [r4, #16]
 80152ce:	1c51      	adds	r1, r2, #1
 80152d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80152d4:	6121      	str	r1, [r4, #16]
 80152d6:	2101      	movs	r1, #1
 80152d8:	6151      	str	r1, [r2, #20]
 80152da:	e7bc      	b.n	8015256 <__gethex+0x396>
 80152dc:	6921      	ldr	r1, [r4, #16]
 80152de:	4559      	cmp	r1, fp
 80152e0:	dd0b      	ble.n	80152fa <__gethex+0x43a>
 80152e2:	2101      	movs	r1, #1
 80152e4:	4620      	mov	r0, r4
 80152e6:	f7ff fd83 	bl	8014df0 <rshift>
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	3601      	adds	r6, #1
 80152ee:	42b3      	cmp	r3, r6
 80152f0:	f6ff aedb 	blt.w	80150aa <__gethex+0x1ea>
 80152f4:	f04f 0801 	mov.w	r8, #1
 80152f8:	e7c2      	b.n	8015280 <__gethex+0x3c0>
 80152fa:	f015 051f 	ands.w	r5, r5, #31
 80152fe:	d0f9      	beq.n	80152f4 <__gethex+0x434>
 8015300:	9b01      	ldr	r3, [sp, #4]
 8015302:	441a      	add	r2, r3
 8015304:	f1c5 0520 	rsb	r5, r5, #32
 8015308:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801530c:	f7fe f8a0 	bl	8013450 <__hi0bits>
 8015310:	42a8      	cmp	r0, r5
 8015312:	dbe6      	blt.n	80152e2 <__gethex+0x422>
 8015314:	e7ee      	b.n	80152f4 <__gethex+0x434>
 8015316:	bf00      	nop
 8015318:	0801886d 	.word	0x0801886d

0801531c <L_shift>:
 801531c:	f1c2 0208 	rsb	r2, r2, #8
 8015320:	0092      	lsls	r2, r2, #2
 8015322:	b570      	push	{r4, r5, r6, lr}
 8015324:	f1c2 0620 	rsb	r6, r2, #32
 8015328:	6843      	ldr	r3, [r0, #4]
 801532a:	6804      	ldr	r4, [r0, #0]
 801532c:	fa03 f506 	lsl.w	r5, r3, r6
 8015330:	432c      	orrs	r4, r5
 8015332:	40d3      	lsrs	r3, r2
 8015334:	6004      	str	r4, [r0, #0]
 8015336:	f840 3f04 	str.w	r3, [r0, #4]!
 801533a:	4288      	cmp	r0, r1
 801533c:	d3f4      	bcc.n	8015328 <L_shift+0xc>
 801533e:	bd70      	pop	{r4, r5, r6, pc}

08015340 <__match>:
 8015340:	b530      	push	{r4, r5, lr}
 8015342:	6803      	ldr	r3, [r0, #0]
 8015344:	3301      	adds	r3, #1
 8015346:	f811 4b01 	ldrb.w	r4, [r1], #1
 801534a:	b914      	cbnz	r4, 8015352 <__match+0x12>
 801534c:	6003      	str	r3, [r0, #0]
 801534e:	2001      	movs	r0, #1
 8015350:	bd30      	pop	{r4, r5, pc}
 8015352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015356:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801535a:	2d19      	cmp	r5, #25
 801535c:	bf98      	it	ls
 801535e:	3220      	addls	r2, #32
 8015360:	42a2      	cmp	r2, r4
 8015362:	d0f0      	beq.n	8015346 <__match+0x6>
 8015364:	2000      	movs	r0, #0
 8015366:	e7f3      	b.n	8015350 <__match+0x10>

08015368 <__hexnan>:
 8015368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801536c:	680b      	ldr	r3, [r1, #0]
 801536e:	6801      	ldr	r1, [r0, #0]
 8015370:	115e      	asrs	r6, r3, #5
 8015372:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015376:	f013 031f 	ands.w	r3, r3, #31
 801537a:	b087      	sub	sp, #28
 801537c:	bf18      	it	ne
 801537e:	3604      	addne	r6, #4
 8015380:	2500      	movs	r5, #0
 8015382:	1f37      	subs	r7, r6, #4
 8015384:	4682      	mov	sl, r0
 8015386:	4690      	mov	r8, r2
 8015388:	9301      	str	r3, [sp, #4]
 801538a:	f846 5c04 	str.w	r5, [r6, #-4]
 801538e:	46b9      	mov	r9, r7
 8015390:	463c      	mov	r4, r7
 8015392:	9502      	str	r5, [sp, #8]
 8015394:	46ab      	mov	fp, r5
 8015396:	784a      	ldrb	r2, [r1, #1]
 8015398:	1c4b      	adds	r3, r1, #1
 801539a:	9303      	str	r3, [sp, #12]
 801539c:	b342      	cbz	r2, 80153f0 <__hexnan+0x88>
 801539e:	4610      	mov	r0, r2
 80153a0:	9105      	str	r1, [sp, #20]
 80153a2:	9204      	str	r2, [sp, #16]
 80153a4:	f7ff fd76 	bl	8014e94 <__hexdig_fun>
 80153a8:	2800      	cmp	r0, #0
 80153aa:	d14f      	bne.n	801544c <__hexnan+0xe4>
 80153ac:	9a04      	ldr	r2, [sp, #16]
 80153ae:	9905      	ldr	r1, [sp, #20]
 80153b0:	2a20      	cmp	r2, #32
 80153b2:	d818      	bhi.n	80153e6 <__hexnan+0x7e>
 80153b4:	9b02      	ldr	r3, [sp, #8]
 80153b6:	459b      	cmp	fp, r3
 80153b8:	dd13      	ble.n	80153e2 <__hexnan+0x7a>
 80153ba:	454c      	cmp	r4, r9
 80153bc:	d206      	bcs.n	80153cc <__hexnan+0x64>
 80153be:	2d07      	cmp	r5, #7
 80153c0:	dc04      	bgt.n	80153cc <__hexnan+0x64>
 80153c2:	462a      	mov	r2, r5
 80153c4:	4649      	mov	r1, r9
 80153c6:	4620      	mov	r0, r4
 80153c8:	f7ff ffa8 	bl	801531c <L_shift>
 80153cc:	4544      	cmp	r4, r8
 80153ce:	d950      	bls.n	8015472 <__hexnan+0x10a>
 80153d0:	2300      	movs	r3, #0
 80153d2:	f1a4 0904 	sub.w	r9, r4, #4
 80153d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80153da:	f8cd b008 	str.w	fp, [sp, #8]
 80153de:	464c      	mov	r4, r9
 80153e0:	461d      	mov	r5, r3
 80153e2:	9903      	ldr	r1, [sp, #12]
 80153e4:	e7d7      	b.n	8015396 <__hexnan+0x2e>
 80153e6:	2a29      	cmp	r2, #41	; 0x29
 80153e8:	d155      	bne.n	8015496 <__hexnan+0x12e>
 80153ea:	3102      	adds	r1, #2
 80153ec:	f8ca 1000 	str.w	r1, [sl]
 80153f0:	f1bb 0f00 	cmp.w	fp, #0
 80153f4:	d04f      	beq.n	8015496 <__hexnan+0x12e>
 80153f6:	454c      	cmp	r4, r9
 80153f8:	d206      	bcs.n	8015408 <__hexnan+0xa0>
 80153fa:	2d07      	cmp	r5, #7
 80153fc:	dc04      	bgt.n	8015408 <__hexnan+0xa0>
 80153fe:	462a      	mov	r2, r5
 8015400:	4649      	mov	r1, r9
 8015402:	4620      	mov	r0, r4
 8015404:	f7ff ff8a 	bl	801531c <L_shift>
 8015408:	4544      	cmp	r4, r8
 801540a:	d934      	bls.n	8015476 <__hexnan+0x10e>
 801540c:	f1a8 0204 	sub.w	r2, r8, #4
 8015410:	4623      	mov	r3, r4
 8015412:	f853 1b04 	ldr.w	r1, [r3], #4
 8015416:	f842 1f04 	str.w	r1, [r2, #4]!
 801541a:	429f      	cmp	r7, r3
 801541c:	d2f9      	bcs.n	8015412 <__hexnan+0xaa>
 801541e:	1b3b      	subs	r3, r7, r4
 8015420:	f023 0303 	bic.w	r3, r3, #3
 8015424:	3304      	adds	r3, #4
 8015426:	3e03      	subs	r6, #3
 8015428:	3401      	adds	r4, #1
 801542a:	42a6      	cmp	r6, r4
 801542c:	bf38      	it	cc
 801542e:	2304      	movcc	r3, #4
 8015430:	4443      	add	r3, r8
 8015432:	2200      	movs	r2, #0
 8015434:	f843 2b04 	str.w	r2, [r3], #4
 8015438:	429f      	cmp	r7, r3
 801543a:	d2fb      	bcs.n	8015434 <__hexnan+0xcc>
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	b91b      	cbnz	r3, 8015448 <__hexnan+0xe0>
 8015440:	4547      	cmp	r7, r8
 8015442:	d126      	bne.n	8015492 <__hexnan+0x12a>
 8015444:	2301      	movs	r3, #1
 8015446:	603b      	str	r3, [r7, #0]
 8015448:	2005      	movs	r0, #5
 801544a:	e025      	b.n	8015498 <__hexnan+0x130>
 801544c:	3501      	adds	r5, #1
 801544e:	2d08      	cmp	r5, #8
 8015450:	f10b 0b01 	add.w	fp, fp, #1
 8015454:	dd06      	ble.n	8015464 <__hexnan+0xfc>
 8015456:	4544      	cmp	r4, r8
 8015458:	d9c3      	bls.n	80153e2 <__hexnan+0x7a>
 801545a:	2300      	movs	r3, #0
 801545c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015460:	2501      	movs	r5, #1
 8015462:	3c04      	subs	r4, #4
 8015464:	6822      	ldr	r2, [r4, #0]
 8015466:	f000 000f 	and.w	r0, r0, #15
 801546a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801546e:	6020      	str	r0, [r4, #0]
 8015470:	e7b7      	b.n	80153e2 <__hexnan+0x7a>
 8015472:	2508      	movs	r5, #8
 8015474:	e7b5      	b.n	80153e2 <__hexnan+0x7a>
 8015476:	9b01      	ldr	r3, [sp, #4]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d0df      	beq.n	801543c <__hexnan+0xd4>
 801547c:	f1c3 0320 	rsb	r3, r3, #32
 8015480:	f04f 32ff 	mov.w	r2, #4294967295
 8015484:	40da      	lsrs	r2, r3
 8015486:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801548a:	4013      	ands	r3, r2
 801548c:	f846 3c04 	str.w	r3, [r6, #-4]
 8015490:	e7d4      	b.n	801543c <__hexnan+0xd4>
 8015492:	3f04      	subs	r7, #4
 8015494:	e7d2      	b.n	801543c <__hexnan+0xd4>
 8015496:	2004      	movs	r0, #4
 8015498:	b007      	add	sp, #28
 801549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801549e <__ascii_mbtowc>:
 801549e:	b082      	sub	sp, #8
 80154a0:	b901      	cbnz	r1, 80154a4 <__ascii_mbtowc+0x6>
 80154a2:	a901      	add	r1, sp, #4
 80154a4:	b142      	cbz	r2, 80154b8 <__ascii_mbtowc+0x1a>
 80154a6:	b14b      	cbz	r3, 80154bc <__ascii_mbtowc+0x1e>
 80154a8:	7813      	ldrb	r3, [r2, #0]
 80154aa:	600b      	str	r3, [r1, #0]
 80154ac:	7812      	ldrb	r2, [r2, #0]
 80154ae:	1e10      	subs	r0, r2, #0
 80154b0:	bf18      	it	ne
 80154b2:	2001      	movne	r0, #1
 80154b4:	b002      	add	sp, #8
 80154b6:	4770      	bx	lr
 80154b8:	4610      	mov	r0, r2
 80154ba:	e7fb      	b.n	80154b4 <__ascii_mbtowc+0x16>
 80154bc:	f06f 0001 	mvn.w	r0, #1
 80154c0:	e7f8      	b.n	80154b4 <__ascii_mbtowc+0x16>

080154c2 <_realloc_r>:
 80154c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154c6:	4680      	mov	r8, r0
 80154c8:	4614      	mov	r4, r2
 80154ca:	460e      	mov	r6, r1
 80154cc:	b921      	cbnz	r1, 80154d8 <_realloc_r+0x16>
 80154ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154d2:	4611      	mov	r1, r2
 80154d4:	f7fd be3e 	b.w	8013154 <_malloc_r>
 80154d8:	b92a      	cbnz	r2, 80154e6 <_realloc_r+0x24>
 80154da:	f7fd fdc7 	bl	801306c <_free_r>
 80154de:	4625      	mov	r5, r4
 80154e0:	4628      	mov	r0, r5
 80154e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154e6:	f000 f842 	bl	801556e <_malloc_usable_size_r>
 80154ea:	4284      	cmp	r4, r0
 80154ec:	4607      	mov	r7, r0
 80154ee:	d802      	bhi.n	80154f6 <_realloc_r+0x34>
 80154f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80154f4:	d812      	bhi.n	801551c <_realloc_r+0x5a>
 80154f6:	4621      	mov	r1, r4
 80154f8:	4640      	mov	r0, r8
 80154fa:	f7fd fe2b 	bl	8013154 <_malloc_r>
 80154fe:	4605      	mov	r5, r0
 8015500:	2800      	cmp	r0, #0
 8015502:	d0ed      	beq.n	80154e0 <_realloc_r+0x1e>
 8015504:	42bc      	cmp	r4, r7
 8015506:	4622      	mov	r2, r4
 8015508:	4631      	mov	r1, r6
 801550a:	bf28      	it	cs
 801550c:	463a      	movcs	r2, r7
 801550e:	f7fc ff1e 	bl	801234e <memcpy>
 8015512:	4631      	mov	r1, r6
 8015514:	4640      	mov	r0, r8
 8015516:	f7fd fda9 	bl	801306c <_free_r>
 801551a:	e7e1      	b.n	80154e0 <_realloc_r+0x1e>
 801551c:	4635      	mov	r5, r6
 801551e:	e7df      	b.n	80154e0 <_realloc_r+0x1e>

08015520 <__ascii_wctomb>:
 8015520:	b149      	cbz	r1, 8015536 <__ascii_wctomb+0x16>
 8015522:	2aff      	cmp	r2, #255	; 0xff
 8015524:	bf85      	ittet	hi
 8015526:	238a      	movhi	r3, #138	; 0x8a
 8015528:	6003      	strhi	r3, [r0, #0]
 801552a:	700a      	strbls	r2, [r1, #0]
 801552c:	f04f 30ff 	movhi.w	r0, #4294967295
 8015530:	bf98      	it	ls
 8015532:	2001      	movls	r0, #1
 8015534:	4770      	bx	lr
 8015536:	4608      	mov	r0, r1
 8015538:	4770      	bx	lr
	...

0801553c <fiprintf>:
 801553c:	b40e      	push	{r1, r2, r3}
 801553e:	b503      	push	{r0, r1, lr}
 8015540:	4601      	mov	r1, r0
 8015542:	ab03      	add	r3, sp, #12
 8015544:	4805      	ldr	r0, [pc, #20]	; (801555c <fiprintf+0x20>)
 8015546:	f853 2b04 	ldr.w	r2, [r3], #4
 801554a:	6800      	ldr	r0, [r0, #0]
 801554c:	9301      	str	r3, [sp, #4]
 801554e:	f000 f83f 	bl	80155d0 <_vfiprintf_r>
 8015552:	b002      	add	sp, #8
 8015554:	f85d eb04 	ldr.w	lr, [sp], #4
 8015558:	b003      	add	sp, #12
 801555a:	4770      	bx	lr
 801555c:	20000274 	.word	0x20000274

08015560 <abort>:
 8015560:	b508      	push	{r3, lr}
 8015562:	2006      	movs	r0, #6
 8015564:	f000 fa0c 	bl	8015980 <raise>
 8015568:	2001      	movs	r0, #1
 801556a:	f7f0 fc85 	bl	8005e78 <_exit>

0801556e <_malloc_usable_size_r>:
 801556e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015572:	1f18      	subs	r0, r3, #4
 8015574:	2b00      	cmp	r3, #0
 8015576:	bfbc      	itt	lt
 8015578:	580b      	ldrlt	r3, [r1, r0]
 801557a:	18c0      	addlt	r0, r0, r3
 801557c:	4770      	bx	lr

0801557e <__sfputc_r>:
 801557e:	6893      	ldr	r3, [r2, #8]
 8015580:	3b01      	subs	r3, #1
 8015582:	2b00      	cmp	r3, #0
 8015584:	b410      	push	{r4}
 8015586:	6093      	str	r3, [r2, #8]
 8015588:	da08      	bge.n	801559c <__sfputc_r+0x1e>
 801558a:	6994      	ldr	r4, [r2, #24]
 801558c:	42a3      	cmp	r3, r4
 801558e:	db01      	blt.n	8015594 <__sfputc_r+0x16>
 8015590:	290a      	cmp	r1, #10
 8015592:	d103      	bne.n	801559c <__sfputc_r+0x1e>
 8015594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015598:	f000 b934 	b.w	8015804 <__swbuf_r>
 801559c:	6813      	ldr	r3, [r2, #0]
 801559e:	1c58      	adds	r0, r3, #1
 80155a0:	6010      	str	r0, [r2, #0]
 80155a2:	7019      	strb	r1, [r3, #0]
 80155a4:	4608      	mov	r0, r1
 80155a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155aa:	4770      	bx	lr

080155ac <__sfputs_r>:
 80155ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ae:	4606      	mov	r6, r0
 80155b0:	460f      	mov	r7, r1
 80155b2:	4614      	mov	r4, r2
 80155b4:	18d5      	adds	r5, r2, r3
 80155b6:	42ac      	cmp	r4, r5
 80155b8:	d101      	bne.n	80155be <__sfputs_r+0x12>
 80155ba:	2000      	movs	r0, #0
 80155bc:	e007      	b.n	80155ce <__sfputs_r+0x22>
 80155be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155c2:	463a      	mov	r2, r7
 80155c4:	4630      	mov	r0, r6
 80155c6:	f7ff ffda 	bl	801557e <__sfputc_r>
 80155ca:	1c43      	adds	r3, r0, #1
 80155cc:	d1f3      	bne.n	80155b6 <__sfputs_r+0xa>
 80155ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080155d0 <_vfiprintf_r>:
 80155d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d4:	460d      	mov	r5, r1
 80155d6:	b09d      	sub	sp, #116	; 0x74
 80155d8:	4614      	mov	r4, r2
 80155da:	4698      	mov	r8, r3
 80155dc:	4606      	mov	r6, r0
 80155de:	b118      	cbz	r0, 80155e8 <_vfiprintf_r+0x18>
 80155e0:	6a03      	ldr	r3, [r0, #32]
 80155e2:	b90b      	cbnz	r3, 80155e8 <_vfiprintf_r+0x18>
 80155e4:	f7fc fd9a 	bl	801211c <__sinit>
 80155e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80155ea:	07d9      	lsls	r1, r3, #31
 80155ec:	d405      	bmi.n	80155fa <_vfiprintf_r+0x2a>
 80155ee:	89ab      	ldrh	r3, [r5, #12]
 80155f0:	059a      	lsls	r2, r3, #22
 80155f2:	d402      	bmi.n	80155fa <_vfiprintf_r+0x2a>
 80155f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155f6:	f7fc fea8 	bl	801234a <__retarget_lock_acquire_recursive>
 80155fa:	89ab      	ldrh	r3, [r5, #12]
 80155fc:	071b      	lsls	r3, r3, #28
 80155fe:	d501      	bpl.n	8015604 <_vfiprintf_r+0x34>
 8015600:	692b      	ldr	r3, [r5, #16]
 8015602:	b99b      	cbnz	r3, 801562c <_vfiprintf_r+0x5c>
 8015604:	4629      	mov	r1, r5
 8015606:	4630      	mov	r0, r6
 8015608:	f000 f93a 	bl	8015880 <__swsetup_r>
 801560c:	b170      	cbz	r0, 801562c <_vfiprintf_r+0x5c>
 801560e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015610:	07dc      	lsls	r4, r3, #31
 8015612:	d504      	bpl.n	801561e <_vfiprintf_r+0x4e>
 8015614:	f04f 30ff 	mov.w	r0, #4294967295
 8015618:	b01d      	add	sp, #116	; 0x74
 801561a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801561e:	89ab      	ldrh	r3, [r5, #12]
 8015620:	0598      	lsls	r0, r3, #22
 8015622:	d4f7      	bmi.n	8015614 <_vfiprintf_r+0x44>
 8015624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015626:	f7fc fe91 	bl	801234c <__retarget_lock_release_recursive>
 801562a:	e7f3      	b.n	8015614 <_vfiprintf_r+0x44>
 801562c:	2300      	movs	r3, #0
 801562e:	9309      	str	r3, [sp, #36]	; 0x24
 8015630:	2320      	movs	r3, #32
 8015632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015636:	f8cd 800c 	str.w	r8, [sp, #12]
 801563a:	2330      	movs	r3, #48	; 0x30
 801563c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80157f0 <_vfiprintf_r+0x220>
 8015640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015644:	f04f 0901 	mov.w	r9, #1
 8015648:	4623      	mov	r3, r4
 801564a:	469a      	mov	sl, r3
 801564c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015650:	b10a      	cbz	r2, 8015656 <_vfiprintf_r+0x86>
 8015652:	2a25      	cmp	r2, #37	; 0x25
 8015654:	d1f9      	bne.n	801564a <_vfiprintf_r+0x7a>
 8015656:	ebba 0b04 	subs.w	fp, sl, r4
 801565a:	d00b      	beq.n	8015674 <_vfiprintf_r+0xa4>
 801565c:	465b      	mov	r3, fp
 801565e:	4622      	mov	r2, r4
 8015660:	4629      	mov	r1, r5
 8015662:	4630      	mov	r0, r6
 8015664:	f7ff ffa2 	bl	80155ac <__sfputs_r>
 8015668:	3001      	adds	r0, #1
 801566a:	f000 80a9 	beq.w	80157c0 <_vfiprintf_r+0x1f0>
 801566e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015670:	445a      	add	r2, fp
 8015672:	9209      	str	r2, [sp, #36]	; 0x24
 8015674:	f89a 3000 	ldrb.w	r3, [sl]
 8015678:	2b00      	cmp	r3, #0
 801567a:	f000 80a1 	beq.w	80157c0 <_vfiprintf_r+0x1f0>
 801567e:	2300      	movs	r3, #0
 8015680:	f04f 32ff 	mov.w	r2, #4294967295
 8015684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015688:	f10a 0a01 	add.w	sl, sl, #1
 801568c:	9304      	str	r3, [sp, #16]
 801568e:	9307      	str	r3, [sp, #28]
 8015690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015694:	931a      	str	r3, [sp, #104]	; 0x68
 8015696:	4654      	mov	r4, sl
 8015698:	2205      	movs	r2, #5
 801569a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801569e:	4854      	ldr	r0, [pc, #336]	; (80157f0 <_vfiprintf_r+0x220>)
 80156a0:	f7ea fdbe 	bl	8000220 <memchr>
 80156a4:	9a04      	ldr	r2, [sp, #16]
 80156a6:	b9d8      	cbnz	r0, 80156e0 <_vfiprintf_r+0x110>
 80156a8:	06d1      	lsls	r1, r2, #27
 80156aa:	bf44      	itt	mi
 80156ac:	2320      	movmi	r3, #32
 80156ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156b2:	0713      	lsls	r3, r2, #28
 80156b4:	bf44      	itt	mi
 80156b6:	232b      	movmi	r3, #43	; 0x2b
 80156b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156bc:	f89a 3000 	ldrb.w	r3, [sl]
 80156c0:	2b2a      	cmp	r3, #42	; 0x2a
 80156c2:	d015      	beq.n	80156f0 <_vfiprintf_r+0x120>
 80156c4:	9a07      	ldr	r2, [sp, #28]
 80156c6:	4654      	mov	r4, sl
 80156c8:	2000      	movs	r0, #0
 80156ca:	f04f 0c0a 	mov.w	ip, #10
 80156ce:	4621      	mov	r1, r4
 80156d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156d4:	3b30      	subs	r3, #48	; 0x30
 80156d6:	2b09      	cmp	r3, #9
 80156d8:	d94d      	bls.n	8015776 <_vfiprintf_r+0x1a6>
 80156da:	b1b0      	cbz	r0, 801570a <_vfiprintf_r+0x13a>
 80156dc:	9207      	str	r2, [sp, #28]
 80156de:	e014      	b.n	801570a <_vfiprintf_r+0x13a>
 80156e0:	eba0 0308 	sub.w	r3, r0, r8
 80156e4:	fa09 f303 	lsl.w	r3, r9, r3
 80156e8:	4313      	orrs	r3, r2
 80156ea:	9304      	str	r3, [sp, #16]
 80156ec:	46a2      	mov	sl, r4
 80156ee:	e7d2      	b.n	8015696 <_vfiprintf_r+0xc6>
 80156f0:	9b03      	ldr	r3, [sp, #12]
 80156f2:	1d19      	adds	r1, r3, #4
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	9103      	str	r1, [sp, #12]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	bfbb      	ittet	lt
 80156fc:	425b      	neglt	r3, r3
 80156fe:	f042 0202 	orrlt.w	r2, r2, #2
 8015702:	9307      	strge	r3, [sp, #28]
 8015704:	9307      	strlt	r3, [sp, #28]
 8015706:	bfb8      	it	lt
 8015708:	9204      	strlt	r2, [sp, #16]
 801570a:	7823      	ldrb	r3, [r4, #0]
 801570c:	2b2e      	cmp	r3, #46	; 0x2e
 801570e:	d10c      	bne.n	801572a <_vfiprintf_r+0x15a>
 8015710:	7863      	ldrb	r3, [r4, #1]
 8015712:	2b2a      	cmp	r3, #42	; 0x2a
 8015714:	d134      	bne.n	8015780 <_vfiprintf_r+0x1b0>
 8015716:	9b03      	ldr	r3, [sp, #12]
 8015718:	1d1a      	adds	r2, r3, #4
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	9203      	str	r2, [sp, #12]
 801571e:	2b00      	cmp	r3, #0
 8015720:	bfb8      	it	lt
 8015722:	f04f 33ff 	movlt.w	r3, #4294967295
 8015726:	3402      	adds	r4, #2
 8015728:	9305      	str	r3, [sp, #20]
 801572a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015800 <_vfiprintf_r+0x230>
 801572e:	7821      	ldrb	r1, [r4, #0]
 8015730:	2203      	movs	r2, #3
 8015732:	4650      	mov	r0, sl
 8015734:	f7ea fd74 	bl	8000220 <memchr>
 8015738:	b138      	cbz	r0, 801574a <_vfiprintf_r+0x17a>
 801573a:	9b04      	ldr	r3, [sp, #16]
 801573c:	eba0 000a 	sub.w	r0, r0, sl
 8015740:	2240      	movs	r2, #64	; 0x40
 8015742:	4082      	lsls	r2, r0
 8015744:	4313      	orrs	r3, r2
 8015746:	3401      	adds	r4, #1
 8015748:	9304      	str	r3, [sp, #16]
 801574a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801574e:	4829      	ldr	r0, [pc, #164]	; (80157f4 <_vfiprintf_r+0x224>)
 8015750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015754:	2206      	movs	r2, #6
 8015756:	f7ea fd63 	bl	8000220 <memchr>
 801575a:	2800      	cmp	r0, #0
 801575c:	d03f      	beq.n	80157de <_vfiprintf_r+0x20e>
 801575e:	4b26      	ldr	r3, [pc, #152]	; (80157f8 <_vfiprintf_r+0x228>)
 8015760:	bb1b      	cbnz	r3, 80157aa <_vfiprintf_r+0x1da>
 8015762:	9b03      	ldr	r3, [sp, #12]
 8015764:	3307      	adds	r3, #7
 8015766:	f023 0307 	bic.w	r3, r3, #7
 801576a:	3308      	adds	r3, #8
 801576c:	9303      	str	r3, [sp, #12]
 801576e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015770:	443b      	add	r3, r7
 8015772:	9309      	str	r3, [sp, #36]	; 0x24
 8015774:	e768      	b.n	8015648 <_vfiprintf_r+0x78>
 8015776:	fb0c 3202 	mla	r2, ip, r2, r3
 801577a:	460c      	mov	r4, r1
 801577c:	2001      	movs	r0, #1
 801577e:	e7a6      	b.n	80156ce <_vfiprintf_r+0xfe>
 8015780:	2300      	movs	r3, #0
 8015782:	3401      	adds	r4, #1
 8015784:	9305      	str	r3, [sp, #20]
 8015786:	4619      	mov	r1, r3
 8015788:	f04f 0c0a 	mov.w	ip, #10
 801578c:	4620      	mov	r0, r4
 801578e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015792:	3a30      	subs	r2, #48	; 0x30
 8015794:	2a09      	cmp	r2, #9
 8015796:	d903      	bls.n	80157a0 <_vfiprintf_r+0x1d0>
 8015798:	2b00      	cmp	r3, #0
 801579a:	d0c6      	beq.n	801572a <_vfiprintf_r+0x15a>
 801579c:	9105      	str	r1, [sp, #20]
 801579e:	e7c4      	b.n	801572a <_vfiprintf_r+0x15a>
 80157a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80157a4:	4604      	mov	r4, r0
 80157a6:	2301      	movs	r3, #1
 80157a8:	e7f0      	b.n	801578c <_vfiprintf_r+0x1bc>
 80157aa:	ab03      	add	r3, sp, #12
 80157ac:	9300      	str	r3, [sp, #0]
 80157ae:	462a      	mov	r2, r5
 80157b0:	4b12      	ldr	r3, [pc, #72]	; (80157fc <_vfiprintf_r+0x22c>)
 80157b2:	a904      	add	r1, sp, #16
 80157b4:	4630      	mov	r0, r6
 80157b6:	f7fb fe4f 	bl	8011458 <_printf_float>
 80157ba:	4607      	mov	r7, r0
 80157bc:	1c78      	adds	r0, r7, #1
 80157be:	d1d6      	bne.n	801576e <_vfiprintf_r+0x19e>
 80157c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157c2:	07d9      	lsls	r1, r3, #31
 80157c4:	d405      	bmi.n	80157d2 <_vfiprintf_r+0x202>
 80157c6:	89ab      	ldrh	r3, [r5, #12]
 80157c8:	059a      	lsls	r2, r3, #22
 80157ca:	d402      	bmi.n	80157d2 <_vfiprintf_r+0x202>
 80157cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80157ce:	f7fc fdbd 	bl	801234c <__retarget_lock_release_recursive>
 80157d2:	89ab      	ldrh	r3, [r5, #12]
 80157d4:	065b      	lsls	r3, r3, #25
 80157d6:	f53f af1d 	bmi.w	8015614 <_vfiprintf_r+0x44>
 80157da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157dc:	e71c      	b.n	8015618 <_vfiprintf_r+0x48>
 80157de:	ab03      	add	r3, sp, #12
 80157e0:	9300      	str	r3, [sp, #0]
 80157e2:	462a      	mov	r2, r5
 80157e4:	4b05      	ldr	r3, [pc, #20]	; (80157fc <_vfiprintf_r+0x22c>)
 80157e6:	a904      	add	r1, sp, #16
 80157e8:	4630      	mov	r0, r6
 80157ea:	f7fc f8d9 	bl	80119a0 <_printf_i>
 80157ee:	e7e4      	b.n	80157ba <_vfiprintf_r+0x1ea>
 80157f0:	08018b29 	.word	0x08018b29
 80157f4:	08018b33 	.word	0x08018b33
 80157f8:	08011459 	.word	0x08011459
 80157fc:	080155ad 	.word	0x080155ad
 8015800:	08018b2f 	.word	0x08018b2f

08015804 <__swbuf_r>:
 8015804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015806:	460e      	mov	r6, r1
 8015808:	4614      	mov	r4, r2
 801580a:	4605      	mov	r5, r0
 801580c:	b118      	cbz	r0, 8015816 <__swbuf_r+0x12>
 801580e:	6a03      	ldr	r3, [r0, #32]
 8015810:	b90b      	cbnz	r3, 8015816 <__swbuf_r+0x12>
 8015812:	f7fc fc83 	bl	801211c <__sinit>
 8015816:	69a3      	ldr	r3, [r4, #24]
 8015818:	60a3      	str	r3, [r4, #8]
 801581a:	89a3      	ldrh	r3, [r4, #12]
 801581c:	071a      	lsls	r2, r3, #28
 801581e:	d525      	bpl.n	801586c <__swbuf_r+0x68>
 8015820:	6923      	ldr	r3, [r4, #16]
 8015822:	b31b      	cbz	r3, 801586c <__swbuf_r+0x68>
 8015824:	6823      	ldr	r3, [r4, #0]
 8015826:	6922      	ldr	r2, [r4, #16]
 8015828:	1a98      	subs	r0, r3, r2
 801582a:	6963      	ldr	r3, [r4, #20]
 801582c:	b2f6      	uxtb	r6, r6
 801582e:	4283      	cmp	r3, r0
 8015830:	4637      	mov	r7, r6
 8015832:	dc04      	bgt.n	801583e <__swbuf_r+0x3a>
 8015834:	4621      	mov	r1, r4
 8015836:	4628      	mov	r0, r5
 8015838:	f7ff fa3a 	bl	8014cb0 <_fflush_r>
 801583c:	b9e0      	cbnz	r0, 8015878 <__swbuf_r+0x74>
 801583e:	68a3      	ldr	r3, [r4, #8]
 8015840:	3b01      	subs	r3, #1
 8015842:	60a3      	str	r3, [r4, #8]
 8015844:	6823      	ldr	r3, [r4, #0]
 8015846:	1c5a      	adds	r2, r3, #1
 8015848:	6022      	str	r2, [r4, #0]
 801584a:	701e      	strb	r6, [r3, #0]
 801584c:	6962      	ldr	r2, [r4, #20]
 801584e:	1c43      	adds	r3, r0, #1
 8015850:	429a      	cmp	r2, r3
 8015852:	d004      	beq.n	801585e <__swbuf_r+0x5a>
 8015854:	89a3      	ldrh	r3, [r4, #12]
 8015856:	07db      	lsls	r3, r3, #31
 8015858:	d506      	bpl.n	8015868 <__swbuf_r+0x64>
 801585a:	2e0a      	cmp	r6, #10
 801585c:	d104      	bne.n	8015868 <__swbuf_r+0x64>
 801585e:	4621      	mov	r1, r4
 8015860:	4628      	mov	r0, r5
 8015862:	f7ff fa25 	bl	8014cb0 <_fflush_r>
 8015866:	b938      	cbnz	r0, 8015878 <__swbuf_r+0x74>
 8015868:	4638      	mov	r0, r7
 801586a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801586c:	4621      	mov	r1, r4
 801586e:	4628      	mov	r0, r5
 8015870:	f000 f806 	bl	8015880 <__swsetup_r>
 8015874:	2800      	cmp	r0, #0
 8015876:	d0d5      	beq.n	8015824 <__swbuf_r+0x20>
 8015878:	f04f 37ff 	mov.w	r7, #4294967295
 801587c:	e7f4      	b.n	8015868 <__swbuf_r+0x64>
	...

08015880 <__swsetup_r>:
 8015880:	b538      	push	{r3, r4, r5, lr}
 8015882:	4b2a      	ldr	r3, [pc, #168]	; (801592c <__swsetup_r+0xac>)
 8015884:	4605      	mov	r5, r0
 8015886:	6818      	ldr	r0, [r3, #0]
 8015888:	460c      	mov	r4, r1
 801588a:	b118      	cbz	r0, 8015894 <__swsetup_r+0x14>
 801588c:	6a03      	ldr	r3, [r0, #32]
 801588e:	b90b      	cbnz	r3, 8015894 <__swsetup_r+0x14>
 8015890:	f7fc fc44 	bl	801211c <__sinit>
 8015894:	89a3      	ldrh	r3, [r4, #12]
 8015896:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801589a:	0718      	lsls	r0, r3, #28
 801589c:	d422      	bmi.n	80158e4 <__swsetup_r+0x64>
 801589e:	06d9      	lsls	r1, r3, #27
 80158a0:	d407      	bmi.n	80158b2 <__swsetup_r+0x32>
 80158a2:	2309      	movs	r3, #9
 80158a4:	602b      	str	r3, [r5, #0]
 80158a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80158aa:	81a3      	strh	r3, [r4, #12]
 80158ac:	f04f 30ff 	mov.w	r0, #4294967295
 80158b0:	e034      	b.n	801591c <__swsetup_r+0x9c>
 80158b2:	0758      	lsls	r0, r3, #29
 80158b4:	d512      	bpl.n	80158dc <__swsetup_r+0x5c>
 80158b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158b8:	b141      	cbz	r1, 80158cc <__swsetup_r+0x4c>
 80158ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158be:	4299      	cmp	r1, r3
 80158c0:	d002      	beq.n	80158c8 <__swsetup_r+0x48>
 80158c2:	4628      	mov	r0, r5
 80158c4:	f7fd fbd2 	bl	801306c <_free_r>
 80158c8:	2300      	movs	r3, #0
 80158ca:	6363      	str	r3, [r4, #52]	; 0x34
 80158cc:	89a3      	ldrh	r3, [r4, #12]
 80158ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80158d2:	81a3      	strh	r3, [r4, #12]
 80158d4:	2300      	movs	r3, #0
 80158d6:	6063      	str	r3, [r4, #4]
 80158d8:	6923      	ldr	r3, [r4, #16]
 80158da:	6023      	str	r3, [r4, #0]
 80158dc:	89a3      	ldrh	r3, [r4, #12]
 80158de:	f043 0308 	orr.w	r3, r3, #8
 80158e2:	81a3      	strh	r3, [r4, #12]
 80158e4:	6923      	ldr	r3, [r4, #16]
 80158e6:	b94b      	cbnz	r3, 80158fc <__swsetup_r+0x7c>
 80158e8:	89a3      	ldrh	r3, [r4, #12]
 80158ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80158ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80158f2:	d003      	beq.n	80158fc <__swsetup_r+0x7c>
 80158f4:	4621      	mov	r1, r4
 80158f6:	4628      	mov	r0, r5
 80158f8:	f000 f884 	bl	8015a04 <__smakebuf_r>
 80158fc:	89a0      	ldrh	r0, [r4, #12]
 80158fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015902:	f010 0301 	ands.w	r3, r0, #1
 8015906:	d00a      	beq.n	801591e <__swsetup_r+0x9e>
 8015908:	2300      	movs	r3, #0
 801590a:	60a3      	str	r3, [r4, #8]
 801590c:	6963      	ldr	r3, [r4, #20]
 801590e:	425b      	negs	r3, r3
 8015910:	61a3      	str	r3, [r4, #24]
 8015912:	6923      	ldr	r3, [r4, #16]
 8015914:	b943      	cbnz	r3, 8015928 <__swsetup_r+0xa8>
 8015916:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801591a:	d1c4      	bne.n	80158a6 <__swsetup_r+0x26>
 801591c:	bd38      	pop	{r3, r4, r5, pc}
 801591e:	0781      	lsls	r1, r0, #30
 8015920:	bf58      	it	pl
 8015922:	6963      	ldrpl	r3, [r4, #20]
 8015924:	60a3      	str	r3, [r4, #8]
 8015926:	e7f4      	b.n	8015912 <__swsetup_r+0x92>
 8015928:	2000      	movs	r0, #0
 801592a:	e7f7      	b.n	801591c <__swsetup_r+0x9c>
 801592c:	20000274 	.word	0x20000274

08015930 <_raise_r>:
 8015930:	291f      	cmp	r1, #31
 8015932:	b538      	push	{r3, r4, r5, lr}
 8015934:	4604      	mov	r4, r0
 8015936:	460d      	mov	r5, r1
 8015938:	d904      	bls.n	8015944 <_raise_r+0x14>
 801593a:	2316      	movs	r3, #22
 801593c:	6003      	str	r3, [r0, #0]
 801593e:	f04f 30ff 	mov.w	r0, #4294967295
 8015942:	bd38      	pop	{r3, r4, r5, pc}
 8015944:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015946:	b112      	cbz	r2, 801594e <_raise_r+0x1e>
 8015948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801594c:	b94b      	cbnz	r3, 8015962 <_raise_r+0x32>
 801594e:	4620      	mov	r0, r4
 8015950:	f000 f830 	bl	80159b4 <_getpid_r>
 8015954:	462a      	mov	r2, r5
 8015956:	4601      	mov	r1, r0
 8015958:	4620      	mov	r0, r4
 801595a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801595e:	f000 b817 	b.w	8015990 <_kill_r>
 8015962:	2b01      	cmp	r3, #1
 8015964:	d00a      	beq.n	801597c <_raise_r+0x4c>
 8015966:	1c59      	adds	r1, r3, #1
 8015968:	d103      	bne.n	8015972 <_raise_r+0x42>
 801596a:	2316      	movs	r3, #22
 801596c:	6003      	str	r3, [r0, #0]
 801596e:	2001      	movs	r0, #1
 8015970:	e7e7      	b.n	8015942 <_raise_r+0x12>
 8015972:	2400      	movs	r4, #0
 8015974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015978:	4628      	mov	r0, r5
 801597a:	4798      	blx	r3
 801597c:	2000      	movs	r0, #0
 801597e:	e7e0      	b.n	8015942 <_raise_r+0x12>

08015980 <raise>:
 8015980:	4b02      	ldr	r3, [pc, #8]	; (801598c <raise+0xc>)
 8015982:	4601      	mov	r1, r0
 8015984:	6818      	ldr	r0, [r3, #0]
 8015986:	f7ff bfd3 	b.w	8015930 <_raise_r>
 801598a:	bf00      	nop
 801598c:	20000274 	.word	0x20000274

08015990 <_kill_r>:
 8015990:	b538      	push	{r3, r4, r5, lr}
 8015992:	4d07      	ldr	r5, [pc, #28]	; (80159b0 <_kill_r+0x20>)
 8015994:	2300      	movs	r3, #0
 8015996:	4604      	mov	r4, r0
 8015998:	4608      	mov	r0, r1
 801599a:	4611      	mov	r1, r2
 801599c:	602b      	str	r3, [r5, #0]
 801599e:	f7f0 fa5b 	bl	8005e58 <_kill>
 80159a2:	1c43      	adds	r3, r0, #1
 80159a4:	d102      	bne.n	80159ac <_kill_r+0x1c>
 80159a6:	682b      	ldr	r3, [r5, #0]
 80159a8:	b103      	cbz	r3, 80159ac <_kill_r+0x1c>
 80159aa:	6023      	str	r3, [r4, #0]
 80159ac:	bd38      	pop	{r3, r4, r5, pc}
 80159ae:	bf00      	nop
 80159b0:	200023d0 	.word	0x200023d0

080159b4 <_getpid_r>:
 80159b4:	f7f0 ba48 	b.w	8005e48 <_getpid>

080159b8 <__swhatbuf_r>:
 80159b8:	b570      	push	{r4, r5, r6, lr}
 80159ba:	460c      	mov	r4, r1
 80159bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159c0:	2900      	cmp	r1, #0
 80159c2:	b096      	sub	sp, #88	; 0x58
 80159c4:	4615      	mov	r5, r2
 80159c6:	461e      	mov	r6, r3
 80159c8:	da0d      	bge.n	80159e6 <__swhatbuf_r+0x2e>
 80159ca:	89a3      	ldrh	r3, [r4, #12]
 80159cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80159d0:	f04f 0100 	mov.w	r1, #0
 80159d4:	bf0c      	ite	eq
 80159d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80159da:	2340      	movne	r3, #64	; 0x40
 80159dc:	2000      	movs	r0, #0
 80159de:	6031      	str	r1, [r6, #0]
 80159e0:	602b      	str	r3, [r5, #0]
 80159e2:	b016      	add	sp, #88	; 0x58
 80159e4:	bd70      	pop	{r4, r5, r6, pc}
 80159e6:	466a      	mov	r2, sp
 80159e8:	f000 f848 	bl	8015a7c <_fstat_r>
 80159ec:	2800      	cmp	r0, #0
 80159ee:	dbec      	blt.n	80159ca <__swhatbuf_r+0x12>
 80159f0:	9901      	ldr	r1, [sp, #4]
 80159f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80159f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80159fa:	4259      	negs	r1, r3
 80159fc:	4159      	adcs	r1, r3
 80159fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a02:	e7eb      	b.n	80159dc <__swhatbuf_r+0x24>

08015a04 <__smakebuf_r>:
 8015a04:	898b      	ldrh	r3, [r1, #12]
 8015a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a08:	079d      	lsls	r5, r3, #30
 8015a0a:	4606      	mov	r6, r0
 8015a0c:	460c      	mov	r4, r1
 8015a0e:	d507      	bpl.n	8015a20 <__smakebuf_r+0x1c>
 8015a10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015a14:	6023      	str	r3, [r4, #0]
 8015a16:	6123      	str	r3, [r4, #16]
 8015a18:	2301      	movs	r3, #1
 8015a1a:	6163      	str	r3, [r4, #20]
 8015a1c:	b002      	add	sp, #8
 8015a1e:	bd70      	pop	{r4, r5, r6, pc}
 8015a20:	ab01      	add	r3, sp, #4
 8015a22:	466a      	mov	r2, sp
 8015a24:	f7ff ffc8 	bl	80159b8 <__swhatbuf_r>
 8015a28:	9900      	ldr	r1, [sp, #0]
 8015a2a:	4605      	mov	r5, r0
 8015a2c:	4630      	mov	r0, r6
 8015a2e:	f7fd fb91 	bl	8013154 <_malloc_r>
 8015a32:	b948      	cbnz	r0, 8015a48 <__smakebuf_r+0x44>
 8015a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a38:	059a      	lsls	r2, r3, #22
 8015a3a:	d4ef      	bmi.n	8015a1c <__smakebuf_r+0x18>
 8015a3c:	f023 0303 	bic.w	r3, r3, #3
 8015a40:	f043 0302 	orr.w	r3, r3, #2
 8015a44:	81a3      	strh	r3, [r4, #12]
 8015a46:	e7e3      	b.n	8015a10 <__smakebuf_r+0xc>
 8015a48:	89a3      	ldrh	r3, [r4, #12]
 8015a4a:	6020      	str	r0, [r4, #0]
 8015a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a50:	81a3      	strh	r3, [r4, #12]
 8015a52:	9b00      	ldr	r3, [sp, #0]
 8015a54:	6163      	str	r3, [r4, #20]
 8015a56:	9b01      	ldr	r3, [sp, #4]
 8015a58:	6120      	str	r0, [r4, #16]
 8015a5a:	b15b      	cbz	r3, 8015a74 <__smakebuf_r+0x70>
 8015a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a60:	4630      	mov	r0, r6
 8015a62:	f000 f81d 	bl	8015aa0 <_isatty_r>
 8015a66:	b128      	cbz	r0, 8015a74 <__smakebuf_r+0x70>
 8015a68:	89a3      	ldrh	r3, [r4, #12]
 8015a6a:	f023 0303 	bic.w	r3, r3, #3
 8015a6e:	f043 0301 	orr.w	r3, r3, #1
 8015a72:	81a3      	strh	r3, [r4, #12]
 8015a74:	89a3      	ldrh	r3, [r4, #12]
 8015a76:	431d      	orrs	r5, r3
 8015a78:	81a5      	strh	r5, [r4, #12]
 8015a7a:	e7cf      	b.n	8015a1c <__smakebuf_r+0x18>

08015a7c <_fstat_r>:
 8015a7c:	b538      	push	{r3, r4, r5, lr}
 8015a7e:	4d07      	ldr	r5, [pc, #28]	; (8015a9c <_fstat_r+0x20>)
 8015a80:	2300      	movs	r3, #0
 8015a82:	4604      	mov	r4, r0
 8015a84:	4608      	mov	r0, r1
 8015a86:	4611      	mov	r1, r2
 8015a88:	602b      	str	r3, [r5, #0]
 8015a8a:	f7f0 fa44 	bl	8005f16 <_fstat>
 8015a8e:	1c43      	adds	r3, r0, #1
 8015a90:	d102      	bne.n	8015a98 <_fstat_r+0x1c>
 8015a92:	682b      	ldr	r3, [r5, #0]
 8015a94:	b103      	cbz	r3, 8015a98 <_fstat_r+0x1c>
 8015a96:	6023      	str	r3, [r4, #0]
 8015a98:	bd38      	pop	{r3, r4, r5, pc}
 8015a9a:	bf00      	nop
 8015a9c:	200023d0 	.word	0x200023d0

08015aa0 <_isatty_r>:
 8015aa0:	b538      	push	{r3, r4, r5, lr}
 8015aa2:	4d06      	ldr	r5, [pc, #24]	; (8015abc <_isatty_r+0x1c>)
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	4608      	mov	r0, r1
 8015aaa:	602b      	str	r3, [r5, #0]
 8015aac:	f7f0 fa43 	bl	8005f36 <_isatty>
 8015ab0:	1c43      	adds	r3, r0, #1
 8015ab2:	d102      	bne.n	8015aba <_isatty_r+0x1a>
 8015ab4:	682b      	ldr	r3, [r5, #0]
 8015ab6:	b103      	cbz	r3, 8015aba <_isatty_r+0x1a>
 8015ab8:	6023      	str	r3, [r4, #0]
 8015aba:	bd38      	pop	{r3, r4, r5, pc}
 8015abc:	200023d0 	.word	0x200023d0

08015ac0 <fmod>:
 8015ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ac2:	ed2d 8b02 	vpush	{d8}
 8015ac6:	ec57 6b10 	vmov	r6, r7, d0
 8015aca:	ec55 4b11 	vmov	r4, r5, d1
 8015ace:	f000 f86d 	bl	8015bac <__ieee754_fmod>
 8015ad2:	4622      	mov	r2, r4
 8015ad4:	462b      	mov	r3, r5
 8015ad6:	4630      	mov	r0, r6
 8015ad8:	4639      	mov	r1, r7
 8015ada:	eeb0 8a40 	vmov.f32	s16, s0
 8015ade:	eef0 8a60 	vmov.f32	s17, s1
 8015ae2:	f7eb f84b 	bl	8000b7c <__aeabi_dcmpun>
 8015ae6:	b990      	cbnz	r0, 8015b0e <fmod+0x4e>
 8015ae8:	2200      	movs	r2, #0
 8015aea:	2300      	movs	r3, #0
 8015aec:	4620      	mov	r0, r4
 8015aee:	4629      	mov	r1, r5
 8015af0:	f7eb f812 	bl	8000b18 <__aeabi_dcmpeq>
 8015af4:	b158      	cbz	r0, 8015b0e <fmod+0x4e>
 8015af6:	f7fc fbfd 	bl	80122f4 <__errno>
 8015afa:	2321      	movs	r3, #33	; 0x21
 8015afc:	6003      	str	r3, [r0, #0]
 8015afe:	2200      	movs	r2, #0
 8015b00:	2300      	movs	r3, #0
 8015b02:	4610      	mov	r0, r2
 8015b04:	4619      	mov	r1, r3
 8015b06:	f7ea fec9 	bl	800089c <__aeabi_ddiv>
 8015b0a:	ec41 0b18 	vmov	d8, r0, r1
 8015b0e:	eeb0 0a48 	vmov.f32	s0, s16
 8015b12:	eef0 0a68 	vmov.f32	s1, s17
 8015b16:	ecbd 8b02 	vpop	{d8}
 8015b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015b1c <round>:
 8015b1c:	ec53 2b10 	vmov	r2, r3, d0
 8015b20:	b570      	push	{r4, r5, r6, lr}
 8015b22:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8015b26:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8015b2a:	2813      	cmp	r0, #19
 8015b2c:	ee10 5a10 	vmov	r5, s0
 8015b30:	4619      	mov	r1, r3
 8015b32:	dc18      	bgt.n	8015b66 <round+0x4a>
 8015b34:	2800      	cmp	r0, #0
 8015b36:	da09      	bge.n	8015b4c <round+0x30>
 8015b38:	3001      	adds	r0, #1
 8015b3a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8015b3e:	d103      	bne.n	8015b48 <round+0x2c>
 8015b40:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8015b44:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8015b48:	2300      	movs	r3, #0
 8015b4a:	e02a      	b.n	8015ba2 <round+0x86>
 8015b4c:	4c16      	ldr	r4, [pc, #88]	; (8015ba8 <round+0x8c>)
 8015b4e:	4104      	asrs	r4, r0
 8015b50:	ea03 0604 	and.w	r6, r3, r4
 8015b54:	4316      	orrs	r6, r2
 8015b56:	d011      	beq.n	8015b7c <round+0x60>
 8015b58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015b5c:	4103      	asrs	r3, r0
 8015b5e:	440b      	add	r3, r1
 8015b60:	ea23 0104 	bic.w	r1, r3, r4
 8015b64:	e7f0      	b.n	8015b48 <round+0x2c>
 8015b66:	2833      	cmp	r0, #51	; 0x33
 8015b68:	dd0b      	ble.n	8015b82 <round+0x66>
 8015b6a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015b6e:	d105      	bne.n	8015b7c <round+0x60>
 8015b70:	ee10 0a10 	vmov	r0, s0
 8015b74:	f7ea fbb2 	bl	80002dc <__adddf3>
 8015b78:	4602      	mov	r2, r0
 8015b7a:	460b      	mov	r3, r1
 8015b7c:	ec43 2b10 	vmov	d0, r2, r3
 8015b80:	bd70      	pop	{r4, r5, r6, pc}
 8015b82:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8015b86:	f04f 34ff 	mov.w	r4, #4294967295
 8015b8a:	40f4      	lsrs	r4, r6
 8015b8c:	4214      	tst	r4, r2
 8015b8e:	d0f5      	beq.n	8015b7c <round+0x60>
 8015b90:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8015b94:	2301      	movs	r3, #1
 8015b96:	4083      	lsls	r3, r0
 8015b98:	195b      	adds	r3, r3, r5
 8015b9a:	bf28      	it	cs
 8015b9c:	3101      	addcs	r1, #1
 8015b9e:	ea23 0304 	bic.w	r3, r3, r4
 8015ba2:	461a      	mov	r2, r3
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	e7e9      	b.n	8015b7c <round+0x60>
 8015ba8:	000fffff 	.word	0x000fffff

08015bac <__ieee754_fmod>:
 8015bac:	ec53 2b11 	vmov	r2, r3, d1
 8015bb0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8015bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bb8:	ea5c 0402 	orrs.w	r4, ip, r2
 8015bbc:	ec51 0b10 	vmov	r0, r1, d0
 8015bc0:	ee11 7a10 	vmov	r7, s2
 8015bc4:	ee11 ea10 	vmov	lr, s2
 8015bc8:	461e      	mov	r6, r3
 8015bca:	d00c      	beq.n	8015be6 <__ieee754_fmod+0x3a>
 8015bcc:	4c78      	ldr	r4, [pc, #480]	; (8015db0 <__ieee754_fmod+0x204>)
 8015bce:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8015bd2:	45a0      	cmp	r8, r4
 8015bd4:	4689      	mov	r9, r1
 8015bd6:	dc06      	bgt.n	8015be6 <__ieee754_fmod+0x3a>
 8015bd8:	4254      	negs	r4, r2
 8015bda:	4d76      	ldr	r5, [pc, #472]	; (8015db4 <__ieee754_fmod+0x208>)
 8015bdc:	4314      	orrs	r4, r2
 8015bde:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8015be2:	42ac      	cmp	r4, r5
 8015be4:	d909      	bls.n	8015bfa <__ieee754_fmod+0x4e>
 8015be6:	f7ea fd2f 	bl	8000648 <__aeabi_dmul>
 8015bea:	4602      	mov	r2, r0
 8015bec:	460b      	mov	r3, r1
 8015bee:	f7ea fe55 	bl	800089c <__aeabi_ddiv>
 8015bf2:	ec41 0b10 	vmov	d0, r0, r1
 8015bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bfa:	45e0      	cmp	r8, ip
 8015bfc:	ee10 aa10 	vmov	sl, s0
 8015c00:	ee10 4a10 	vmov	r4, s0
 8015c04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8015c08:	dc09      	bgt.n	8015c1e <__ieee754_fmod+0x72>
 8015c0a:	dbf2      	blt.n	8015bf2 <__ieee754_fmod+0x46>
 8015c0c:	4290      	cmp	r0, r2
 8015c0e:	d3f0      	bcc.n	8015bf2 <__ieee754_fmod+0x46>
 8015c10:	d105      	bne.n	8015c1e <__ieee754_fmod+0x72>
 8015c12:	4b69      	ldr	r3, [pc, #420]	; (8015db8 <__ieee754_fmod+0x20c>)
 8015c14:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8015c18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c1c:	e7e9      	b.n	8015bf2 <__ieee754_fmod+0x46>
 8015c1e:	4a65      	ldr	r2, [pc, #404]	; (8015db4 <__ieee754_fmod+0x208>)
 8015c20:	ea19 0f02 	tst.w	r9, r2
 8015c24:	d148      	bne.n	8015cb8 <__ieee754_fmod+0x10c>
 8015c26:	f1b8 0f00 	cmp.w	r8, #0
 8015c2a:	d13d      	bne.n	8015ca8 <__ieee754_fmod+0xfc>
 8015c2c:	4963      	ldr	r1, [pc, #396]	; (8015dbc <__ieee754_fmod+0x210>)
 8015c2e:	4653      	mov	r3, sl
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	dc36      	bgt.n	8015ca2 <__ieee754_fmod+0xf6>
 8015c34:	4216      	tst	r6, r2
 8015c36:	d14f      	bne.n	8015cd8 <__ieee754_fmod+0x12c>
 8015c38:	f1bc 0f00 	cmp.w	ip, #0
 8015c3c:	d144      	bne.n	8015cc8 <__ieee754_fmod+0x11c>
 8015c3e:	4a5f      	ldr	r2, [pc, #380]	; (8015dbc <__ieee754_fmod+0x210>)
 8015c40:	463b      	mov	r3, r7
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	dc3d      	bgt.n	8015cc2 <__ieee754_fmod+0x116>
 8015c46:	485e      	ldr	r0, [pc, #376]	; (8015dc0 <__ieee754_fmod+0x214>)
 8015c48:	4281      	cmp	r1, r0
 8015c4a:	db4a      	blt.n	8015ce2 <__ieee754_fmod+0x136>
 8015c4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c54:	485a      	ldr	r0, [pc, #360]	; (8015dc0 <__ieee754_fmod+0x214>)
 8015c56:	4282      	cmp	r2, r0
 8015c58:	db57      	blt.n	8015d0a <__ieee754_fmod+0x15e>
 8015c5a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8015c5e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8015c62:	1a89      	subs	r1, r1, r2
 8015c64:	1b98      	subs	r0, r3, r6
 8015c66:	eba4 070e 	sub.w	r7, r4, lr
 8015c6a:	2900      	cmp	r1, #0
 8015c6c:	d162      	bne.n	8015d34 <__ieee754_fmod+0x188>
 8015c6e:	4574      	cmp	r4, lr
 8015c70:	bf38      	it	cc
 8015c72:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8015c76:	2800      	cmp	r0, #0
 8015c78:	bfa4      	itt	ge
 8015c7a:	463c      	movge	r4, r7
 8015c7c:	4603      	movge	r3, r0
 8015c7e:	ea53 0104 	orrs.w	r1, r3, r4
 8015c82:	d0c6      	beq.n	8015c12 <__ieee754_fmod+0x66>
 8015c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015c88:	db69      	blt.n	8015d5e <__ieee754_fmod+0x1b2>
 8015c8a:	494d      	ldr	r1, [pc, #308]	; (8015dc0 <__ieee754_fmod+0x214>)
 8015c8c:	428a      	cmp	r2, r1
 8015c8e:	db6c      	blt.n	8015d6a <__ieee754_fmod+0x1be>
 8015c90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015c94:	432b      	orrs	r3, r5
 8015c96:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8015c9a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	e7a7      	b.n	8015bf2 <__ieee754_fmod+0x46>
 8015ca2:	3901      	subs	r1, #1
 8015ca4:	005b      	lsls	r3, r3, #1
 8015ca6:	e7c3      	b.n	8015c30 <__ieee754_fmod+0x84>
 8015ca8:	4945      	ldr	r1, [pc, #276]	; (8015dc0 <__ieee754_fmod+0x214>)
 8015caa:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	ddc0      	ble.n	8015c34 <__ieee754_fmod+0x88>
 8015cb2:	3901      	subs	r1, #1
 8015cb4:	005b      	lsls	r3, r3, #1
 8015cb6:	e7fa      	b.n	8015cae <__ieee754_fmod+0x102>
 8015cb8:	ea4f 5128 	mov.w	r1, r8, asr #20
 8015cbc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015cc0:	e7b8      	b.n	8015c34 <__ieee754_fmod+0x88>
 8015cc2:	3a01      	subs	r2, #1
 8015cc4:	005b      	lsls	r3, r3, #1
 8015cc6:	e7bc      	b.n	8015c42 <__ieee754_fmod+0x96>
 8015cc8:	4a3d      	ldr	r2, [pc, #244]	; (8015dc0 <__ieee754_fmod+0x214>)
 8015cca:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	ddb9      	ble.n	8015c46 <__ieee754_fmod+0x9a>
 8015cd2:	3a01      	subs	r2, #1
 8015cd4:	005b      	lsls	r3, r3, #1
 8015cd6:	e7fa      	b.n	8015cce <__ieee754_fmod+0x122>
 8015cd8:	ea4f 522c 	mov.w	r2, ip, asr #20
 8015cdc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015ce0:	e7b1      	b.n	8015c46 <__ieee754_fmod+0x9a>
 8015ce2:	1a40      	subs	r0, r0, r1
 8015ce4:	281f      	cmp	r0, #31
 8015ce6:	dc0a      	bgt.n	8015cfe <__ieee754_fmod+0x152>
 8015ce8:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8015cec:	fa08 f800 	lsl.w	r8, r8, r0
 8015cf0:	fa2a f303 	lsr.w	r3, sl, r3
 8015cf4:	ea43 0308 	orr.w	r3, r3, r8
 8015cf8:	fa0a f400 	lsl.w	r4, sl, r0
 8015cfc:	e7aa      	b.n	8015c54 <__ieee754_fmod+0xa8>
 8015cfe:	4b31      	ldr	r3, [pc, #196]	; (8015dc4 <__ieee754_fmod+0x218>)
 8015d00:	1a5b      	subs	r3, r3, r1
 8015d02:	fa0a f303 	lsl.w	r3, sl, r3
 8015d06:	2400      	movs	r4, #0
 8015d08:	e7a4      	b.n	8015c54 <__ieee754_fmod+0xa8>
 8015d0a:	1a80      	subs	r0, r0, r2
 8015d0c:	281f      	cmp	r0, #31
 8015d0e:	dc0a      	bgt.n	8015d26 <__ieee754_fmod+0x17a>
 8015d10:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8015d14:	fa0c fc00 	lsl.w	ip, ip, r0
 8015d18:	fa27 f606 	lsr.w	r6, r7, r6
 8015d1c:	ea46 060c 	orr.w	r6, r6, ip
 8015d20:	fa07 fe00 	lsl.w	lr, r7, r0
 8015d24:	e79d      	b.n	8015c62 <__ieee754_fmod+0xb6>
 8015d26:	4e27      	ldr	r6, [pc, #156]	; (8015dc4 <__ieee754_fmod+0x218>)
 8015d28:	1ab6      	subs	r6, r6, r2
 8015d2a:	fa07 f606 	lsl.w	r6, r7, r6
 8015d2e:	f04f 0e00 	mov.w	lr, #0
 8015d32:	e796      	b.n	8015c62 <__ieee754_fmod+0xb6>
 8015d34:	4574      	cmp	r4, lr
 8015d36:	bf38      	it	cc
 8015d38:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8015d3c:	2800      	cmp	r0, #0
 8015d3e:	da05      	bge.n	8015d4c <__ieee754_fmod+0x1a0>
 8015d40:	0fe0      	lsrs	r0, r4, #31
 8015d42:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015d46:	0064      	lsls	r4, r4, #1
 8015d48:	3901      	subs	r1, #1
 8015d4a:	e78b      	b.n	8015c64 <__ieee754_fmod+0xb8>
 8015d4c:	ea50 0307 	orrs.w	r3, r0, r7
 8015d50:	f43f af5f 	beq.w	8015c12 <__ieee754_fmod+0x66>
 8015d54:	0ffb      	lsrs	r3, r7, #31
 8015d56:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015d5a:	007c      	lsls	r4, r7, #1
 8015d5c:	e7f4      	b.n	8015d48 <__ieee754_fmod+0x19c>
 8015d5e:	0fe1      	lsrs	r1, r4, #31
 8015d60:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8015d64:	0064      	lsls	r4, r4, #1
 8015d66:	3a01      	subs	r2, #1
 8015d68:	e78c      	b.n	8015c84 <__ieee754_fmod+0xd8>
 8015d6a:	1a89      	subs	r1, r1, r2
 8015d6c:	2914      	cmp	r1, #20
 8015d6e:	dc0a      	bgt.n	8015d86 <__ieee754_fmod+0x1da>
 8015d70:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015d74:	fa03 f202 	lsl.w	r2, r3, r2
 8015d78:	40cc      	lsrs	r4, r1
 8015d7a:	4322      	orrs	r2, r4
 8015d7c:	410b      	asrs	r3, r1
 8015d7e:	ea43 0105 	orr.w	r1, r3, r5
 8015d82:	4610      	mov	r0, r2
 8015d84:	e735      	b.n	8015bf2 <__ieee754_fmod+0x46>
 8015d86:	291f      	cmp	r1, #31
 8015d88:	dc07      	bgt.n	8015d9a <__ieee754_fmod+0x1ee>
 8015d8a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015d8e:	40cc      	lsrs	r4, r1
 8015d90:	fa03 f202 	lsl.w	r2, r3, r2
 8015d94:	4322      	orrs	r2, r4
 8015d96:	462b      	mov	r3, r5
 8015d98:	e7f1      	b.n	8015d7e <__ieee754_fmod+0x1d2>
 8015d9a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8015d9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015da2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8015da6:	32e2      	adds	r2, #226	; 0xe2
 8015da8:	fa43 f202 	asr.w	r2, r3, r2
 8015dac:	e7f3      	b.n	8015d96 <__ieee754_fmod+0x1ea>
 8015dae:	bf00      	nop
 8015db0:	7fefffff 	.word	0x7fefffff
 8015db4:	7ff00000 	.word	0x7ff00000
 8015db8:	08018be0 	.word	0x08018be0
 8015dbc:	fffffbed 	.word	0xfffffbed
 8015dc0:	fffffc02 	.word	0xfffffc02
 8015dc4:	fffffbe2 	.word	0xfffffbe2

08015dc8 <_init>:
 8015dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dca:	bf00      	nop
 8015dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015dce:	bc08      	pop	{r3}
 8015dd0:	469e      	mov	lr, r3
 8015dd2:	4770      	bx	lr

08015dd4 <_fini>:
 8015dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dd6:	bf00      	nop
 8015dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015dda:	bc08      	pop	{r3}
 8015ddc:	469e      	mov	lr, r3
 8015dde:	4770      	bx	lr
