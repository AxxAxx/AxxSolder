
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d98  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca0  08018f78  08018f78  00028f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bc18  0801bc18  0003050c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bc18  0801bc18  0002bc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bc20  0801bc20  0003050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bc20  0801bc20  0002bc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bc24  0801bc24  0002bc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000050c  20000000  0801bc28  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b00  20000510  0801c134  00030510  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003010  0801c134  00033010  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003050c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003053c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f5c4  00000000  00000000  0003057f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065cb  00000000  00000000  0005fb43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029a0  00000000  00000000  00066110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fe6  00000000  00000000  00068ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028958  00000000  00000000  0006aa96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000354e5  00000000  00000000  000933ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee6c9  00000000  00000000  000c88d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c390  00000000  00000000  001b6f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c332c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000510 	.word	0x20000510
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018f60 	.word	0x08018f60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000514 	.word	0x20000514
 800021c:	08018f60 	.word	0x08018f60

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000fe2:	0adb      	lsrs	r3, r3, #11
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <FlashCheckCRC>:

bool FlashCheckCRC()
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <FlashCheckCRC+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <FlashCheckCRC+0x70>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3308      	adds	r3, #8
 800101c:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <FlashCheckCRC+0x70>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <FlashCheckCRC+0x74>)
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <FlashCheckCRC+0x78>)
 8001028:	f007 fc0c 	bl	8008844 <HAL_CRC_Calculate>
 800102c:	4603      	mov	r3, r0
 800102e:	2200      	movs	r2, #0
 8001030:	461c      	mov	r4, r3
 8001032:	4615      	mov	r5, r2
 8001034:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800103e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800104a:	4299      	cmp	r1, r3
 800104c:	bf08      	it	eq
 800104e:	4290      	cmpeq	r0, r2
 8001050:	d101      	bne.n	8001056 <FlashCheckCRC+0x66>
	{
		return true;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <FlashCheckCRC+0x68>
	}
	return false;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	0801f000 	.word	0x0801f000
 8001068:	200017d8 	.word	0x200017d8

0800106c <FlashReadToBuf>:


bool FlashReadToBuf()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
	int i = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <FlashReadToBuf+0x88>)
 8001078:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 800107a:	f7ff ffb9 	bl	8000ff0 <FlashCheckCRC>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d031      	beq.n	80010e8 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8001084:	e025      	b.n	80010d2 <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e013      	b.n	80010c0 <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4413      	add	r3, r2
 800109e:	461a      	mov	r2, r3
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d208      	bcs.n	80010ba <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	1d39      	adds	r1, r7, #4
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	440a      	add	r2, r1
 80010b4:	7811      	ldrb	r1, [r2, #0]
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <FlashReadToBuf+0x90>)
 80010b8:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	dde8      	ble.n	8001098 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	3308      	adds	r3, #8
 80010ca:	613b      	str	r3, [r7, #16]
			i = i + 8;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3308      	adds	r3, #8
 80010d0:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d203      	bcs.n	80010e4 <FlashReadToBuf+0x78>
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <FlashReadToBuf+0x94>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d3d0      	bcc.n	8001086 <FlashReadToBuf+0x1a>
		}
		return true;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <FlashReadToBuf+0x7e>
	}
	return false;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0801f000 	.word	0x0801f000
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000530 	.word	0x20000530
 8001100:	0801ffff 	.word	0x0801ffff

08001104 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 800110c:	f7ff ffae 	bl	800106c <FlashReadToBuf>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d013      	beq.n	800113e <FlashRead+0x3a>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <FlashRead+0x44>)
 800111a:	4614      	mov	r4, r2
 800111c:	469c      	mov	ip, r3
 800111e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001122:	4665      	mov	r5, ip
 8001124:	4626      	mov	r6, r4
 8001126:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001128:	6028      	str	r0, [r5, #0]
 800112a:	6069      	str	r1, [r5, #4]
 800112c:	60aa      	str	r2, [r5, #8]
 800112e:	60eb      	str	r3, [r5, #12]
 8001130:	3410      	adds	r4, #16
 8001132:	f10c 0c10 	add.w	ip, ip, #16
 8001136:	4574      	cmp	r4, lr
 8001138:	d1f3      	bne.n	8001122 <FlashRead+0x1e>
		return true;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <FlashRead+0x3c>
	}
	return false;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	20000530 	.word	0x20000530

0800114c <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 800114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001150:	b08d      	sub	sp, #52	; 0x34
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <FlashWrite+0x188>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 800116c:	4b5a      	ldr	r3, [pc, #360]	; (80012d8 <FlashWrite+0x18c>)
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 8001184:	f7ff ff72 	bl	800106c <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <FlashWrite+0x190>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	461c      	mov	r4, r3
 800118e:	4616      	mov	r6, r2
 8001190:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8001194:	4635      	mov	r5, r6
 8001196:	4623      	mov	r3, r4
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	3410      	adds	r4, #16
 80011a4:	3610      	adds	r6, #16
 80011a6:	4564      	cmp	r4, ip
 80011a8:	d1f4      	bne.n	8001194 <FlashWrite+0x48>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <FlashWrite+0x194>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	494a      	ldr	r1, [pc, #296]	; (80012dc <FlashWrite+0x190>)
 80011b2:	484c      	ldr	r0, [pc, #304]	; (80012e4 <FlashWrite+0x198>)
 80011b4:	f007 fb46 	bl	8008844 <HAL_CRC_Calculate>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2200      	movs	r2, #0
 80011bc:	4698      	mov	r8, r3
 80011be:	4691      	mov	r9, r2
 80011c0:	e9c7 8906 	strd	r8, r9, [r7, #24]

	HAL_FLASH_Unlock();
 80011c4:	f007 ffcc 	bl	8009160 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011c8:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <FlashWrite+0x19c>)
 80011ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ce:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 80011d0:	4846      	ldr	r0, [pc, #280]	; (80012ec <FlashWrite+0x1a0>)
 80011d2:	f7ff feff 	bl	8000fd4 <GetPage>
 80011d6:	4604      	mov	r4, r0
 80011d8:	483f      	ldr	r0, [pc, #252]	; (80012d8 <FlashWrite+0x18c>)
 80011da:	f7ff fefb 	bl	8000fd4 <GetPage>
 80011de:	4603      	mov	r3, r0
 80011e0:	1ae3      	subs	r3, r4, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <FlashWrite+0x1a4>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80011ec:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <FlashWrite+0x1a4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 80011f2:	4839      	ldr	r0, [pc, #228]	; (80012d8 <FlashWrite+0x18c>)
 80011f4:	f7ff feee 	bl	8000fd4 <GetPage>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <FlashWrite+0x1a4>)
 80011fc:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 80011fe:	4a3c      	ldr	r2, [pc, #240]	; (80012f0 <FlashWrite+0x1a4>)
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4839      	ldr	r0, [pc, #228]	; (80012f0 <FlashWrite+0x1a4>)
 800120c:	f008 f894 	bl	8009338 <HAL_FLASHEx_Erase>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d152      	bne.n	80012bc <FlashWrite+0x170>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 8001216:	e04b      	b.n	80012b0 <FlashWrite+0x164>
		{
			for (int j = 0; j < 8; j++)
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
 800121c:	e01b      	b.n	8001256 <FlashWrite+0x10a>
			{
				if (j + i < bufLength)
 800121e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	4413      	add	r3, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <FlashWrite+0x194>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d20a      	bcs.n	8001244 <FlashWrite+0xf8>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 800122e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	441a      	add	r2, r3
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	f107 0108 	add.w	r1, r7, #8
 800123a:	440b      	add	r3, r1
 800123c:	4927      	ldr	r1, [pc, #156]	; (80012dc <FlashWrite+0x190>)
 800123e:	5c8a      	ldrb	r2, [r1, r2]
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e005      	b.n	8001250 <FlashWrite+0x104>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	f107 0208 	add.w	r2, r7, #8
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3301      	adds	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	2b07      	cmp	r3, #7
 800125a:	dde0      	ble.n	800121e <FlashWrite+0xd2>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 800125c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <FlashWrite+0x194>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d20f      	bcs.n	8001286 <FlashWrite+0x13a>
 8001266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800126a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800126c:	2000      	movs	r0, #0
 800126e:	f007 ff0b 	bl	8009088 <HAL_FLASH_Program>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d106      	bne.n	8001286 <FlashWrite+0x13a>
			{
				Address = Address + 8;
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	3308      	adds	r3, #8
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	3308      	adds	r3, #8
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001284:	e014      	b.n	80012b0 <FlashWrite+0x164>
			}
			else if (i >= bufLength)
 8001286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <FlashWrite+0x194>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d314      	bcc.n	80012ba <FlashWrite+0x16e>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 8001290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001296:	2000      	movs	r0, #0
 8001298:	f007 fef6 	bl	8009088 <HAL_FLASH_Program>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <FlashWrite+0x164>
				{
					HAL_FLASH_Lock();
 80012a2:	f007 ff7f 	bl	80091a4 <HAL_FLASH_Lock>
					flashWriting = 0;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <FlashWrite+0x188>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
					return true;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e00b      	b.n	80012c8 <FlashWrite+0x17c>
		while (Address < FLASH_USER_END_ADDR)
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <FlashWrite+0x1a0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d3af      	bcc.n	8001218 <FlashWrite+0xcc>
 80012b8:	e000      	b.n	80012bc <FlashWrite+0x170>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012ba:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80012bc:	f007 ff72 	bl	80091a4 <HAL_FLASH_Lock>

	flashWriting = 0;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <FlashWrite+0x188>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	return false;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3734      	adds	r7, #52	; 0x34
 80012cc:	46bd      	mov	sp, r7
 80012ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012d2:	bf00      	nop
 80012d4:	2000052c 	.word	0x2000052c
 80012d8:	0801f000 	.word	0x0801f000
 80012dc:	20000530 	.word	0x20000530
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200017d8 	.word	0x200017d8
 80012e8:	40022000 	.word	0x40022000
 80012ec:	0801ffff 	.word	0x0801ffff
 80012f0:	20000570 	.word	0x20000570

080012f4 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80012fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8001302:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800130e:	f7ff fc0d 	bl	8000b2c <__aeabi_dcmplt>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <clamp+0x2a>
 8001318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800131c:	e001      	b.n	8001322 <clamp+0x2e>
 800131e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001322:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800132a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800132e:	f7ff fc1b 	bl	8000b68 <__aeabi_dcmpgt>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <clamp+0x4a>
 8001338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800133c:	e001      	b.n	8001342 <clamp+0x4e>
 800133e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001342:	ec43 2b17 	vmov	d7, r2, r3
}
 8001346:	eeb0 0a47 	vmov.f32	s0, s14
 800134a:	eef0 0a67 	vmov.f32	s1, s15
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <get_mcu_temp>:
        number *= x;

    return(number);
}

void get_mcu_temp(){
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	//Index 3 is MCU temp
	sensor_values.mcu_temperature = ((666 * VSENSE) - V30) / Avg_Slope + 25; // formula from datasheet
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <get_mcu_temp+0x14>)
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <get_mcu_temp+0x18>)
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	20000028 	.word	0x20000028
 800136c:	c280be00 	.word	0xc280be00

08001370 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
	/*if(color ==C_BLACK){
		color = 0b0010100100000101;
	}*/
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	02db      	lsls	r3, r3, #11
 800137e:	b21a      	sxth	r2, r3
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	b29b      	uxth	r3, r3
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <change_state>:

void change_state(mainstates new_state){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <change_state+0x28>)
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <change_state+0x2c>)
 80013ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	active_state = new_state;
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <change_state+0x28>)
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	7013      	strb	r3, [r2, #0]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000015 	.word	0x20000015
 80013c8:	20000028 	.word	0x20000028

080013cc <get_mean_ADC_reading>:

/* Returns the average of the ADC_buffer vector */
float get_mean_ADC_reading(uint16_t *adc_buffer , uint8_t adc_buffer_len){
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
	ADC_filter_mean = 0;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <get_mean_ADC_reading+0x70>)
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e013      	b.n	800140e <get_mean_ADC_reading+0x42>
		ADC_filter_mean += adc_buffer[n];
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <get_mean_ADC_reading+0x70>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <get_mean_ADC_reading+0x70>)
 8001404:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	3301      	adds	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	429a      	cmp	r2, r3
 8001414:	d3e7      	bcc.n	80013e6 <get_mean_ADC_reading+0x1a>
	}
	return ADC_filter_mean/adc_buffer_len;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <get_mean_ADC_reading+0x70>)
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001426:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800142a:	eef0 7a66 	vmov.f32	s15, s13
}
 800142e:	eeb0 0a67 	vmov.f32	s0, s15
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	200005e8 	.word	0x200005e8

08001440 <get_bus_voltage>:

void get_bus_voltage(){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(ADC2_BUF_VIN, ADC2_BUF_VIN_LEN), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001444:	210a      	movs	r1, #10
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <get_bus_voltage+0x50>)
 8001448:	f7ff ffc0 	bl	80013cc <get_mean_ADC_reading>
 800144c:	eef0 7a40 	vmov.f32	s15, s0
 8001450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001454:	490f      	ldr	r1, [pc, #60]	; (8001494 <get_bus_voltage+0x54>)
 8001456:	ee17 0a90 	vmov	r0, s15
 800145a:	f002 fca3 	bl	8003da4 <Moving_Average_Compute>
 800145e:	ec51 0b10 	vmov	r0, r1, d0
 8001462:	a309      	add	r3, pc, #36	; (adr r3, 8001488 <get_bus_voltage+0x48>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8ee 	bl	8000648 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fbe0 	bl	8000c38 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <get_bus_voltage+0x58>)
 800147c:	6113      	str	r3, [r2, #16]
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	f3af 8000 	nop.w
 8001488:	ada68bd9 	.word	0xada68bd9
 800148c:	3f813656 	.word	0x3f813656
 8001490:	200005ec 	.word	0x200005ec
 8001494:	20000990 	.word	0x20000990
 8001498:	20000028 	.word	0x20000028
 800149c:	00000000 	.word	0x00000000

080014a0 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(thermocouple_temperature_raw, &thermocouple_temperature_filter_struct); /* Moving average filter */
 80014a6:	4b72      	ldr	r3, [pc, #456]	; (8001670 <get_thermocouple_temperature+0x1d0>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b0:	4970      	ldr	r1, [pc, #448]	; (8001674 <get_thermocouple_temperature+0x1d4>)
 80014b2:	ee17 0a90 	vmov	r0, s15
 80014b6:	f002 fc75 	bl	8003da4 <Moving_Average_Compute>
 80014ba:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 80014be:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <get_thermocouple_temperature+0x1d8>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d12e      	bne.n	8001524 <get_thermocouple_temperature+0x84>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X2_T210 + TC_COMPENSATION_X0_T210;
 80014c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014ce:	f7ff f8bb 	bl	8000648 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	a357      	add	r3, pc, #348	; (adr r3, 8001638 <get_thermocouple_temperature+0x198>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8b2 	bl	8000648 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4614      	mov	r4, r2
 80014ea:	461d      	mov	r5, r3
 80014ec:	a352      	add	r3, pc, #328	; (adr r3, 8001638 <get_thermocouple_temperature+0x198>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f6:	f7ff f8a7 	bl	8000648 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7fe feeb 	bl	80002dc <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	a34c      	add	r3, pc, #304	; (adr r3, 8001640 <get_thermocouple_temperature+0x1a0>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7fe fee2 	bl	80002dc <__adddf3>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4957      	ldr	r1, [pc, #348]	; (800167c <get_thermocouple_temperature+0x1dc>)
 800151e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001522:	e064      	b.n	80015ee <get_thermocouple_temperature+0x14e>
	}
	else if(handle == T245){
 8001524:	4b54      	ldr	r3, [pc, #336]	; (8001678 <get_thermocouple_temperature+0x1d8>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d12e      	bne.n	800158a <get_thermocouple_temperature+0xea>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800152c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001534:	f7ff f888 	bl	8000648 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	a341      	add	r3, pc, #260	; (adr r3, 8001648 <get_thermocouple_temperature+0x1a8>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f87f 	bl	8000648 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4614      	mov	r4, r2
 8001550:	461d      	mov	r5, r3
 8001552:	a33f      	add	r3, pc, #252	; (adr r3, 8001650 <get_thermocouple_temperature+0x1b0>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800155c:	f7ff f874 	bl	8000648 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4620      	mov	r0, r4
 8001566:	4629      	mov	r1, r5
 8001568:	f7fe feb8 	bl	80002dc <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	a338      	add	r3, pc, #224	; (adr r3, 8001658 <get_thermocouple_temperature+0x1b8>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe feaf 	bl	80002dc <__adddf3>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	493e      	ldr	r1, [pc, #248]	; (800167c <get_thermocouple_temperature+0x1dc>)
 8001584:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001588:	e031      	b.n	80015ee <get_thermocouple_temperature+0x14e>
	}
	else if(handle == T115){
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <get_thermocouple_temperature+0x1d8>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d12d      	bne.n	80015ee <get_thermocouple_temperature+0x14e>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T115 + TC_temp*TC_COMPENSATION_X2_T115 + TC_COMPENSATION_X0_T115;
 8001592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800159a:	f7ff f855 	bl	8000648 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	a324      	add	r3, pc, #144	; (adr r3, 8001638 <get_thermocouple_temperature+0x198>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f84c 	bl	8000648 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4614      	mov	r4, r2
 80015b6:	461d      	mov	r5, r3
 80015b8:	a31f      	add	r3, pc, #124	; (adr r3, 8001638 <get_thermocouple_temperature+0x198>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015c2:	f7ff f841 	bl	8000648 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fe85 	bl	80002dc <__adddf3>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	a319      	add	r3, pc, #100	; (adr r3, 8001640 <get_thermocouple_temperature+0x1a0>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fe7c 	bl	80002dc <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4924      	ldr	r1, [pc, #144]	; (800167c <get_thermocouple_temperature+0x1dc>)
 80015ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <get_thermocouple_temperature+0x1dc>)
 80015f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <get_thermocouple_temperature+0x1e0>)
 80015f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015fa:	f7fe fe6f 	bl	80002dc <__adddf3>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	491e      	ldr	r1, [pc, #120]	; (800167c <get_thermocouple_temperature+0x1dc>)
 8001604:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <get_thermocouple_temperature+0x1dc>)
 800160a:	ed93 7b02 	vldr	d7, [r3, #8]
 800160e:	ed9f 2b14 	vldr	d2, [pc, #80]	; 8001660 <get_thermocouple_temperature+0x1c0>
 8001612:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001668 <get_thermocouple_temperature+0x1c8>
 8001616:	eeb0 0a47 	vmov.f32	s0, s14
 800161a:	eef0 0a67 	vmov.f32	s1, s15
 800161e:	f7ff fe69 	bl	80012f4 <clamp>
 8001622:	eeb0 7a40 	vmov.f32	s14, s0
 8001626:	eef0 7a60 	vmov.f32	s15, s1
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <get_thermocouple_temperature+0x1dc>)
 800162c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bdb0      	pop	{r4, r5, r7, pc}
 8001638:	77c4dab0 	.word	0x77c4dab0
 800163c:	bed98561 	.word	0xbed98561
 8001640:	d797deed 	.word	0xd797deed
 8001644:	40396624 	.word	0x40396624
 8001648:	82fead10 	.word	0x82fead10
 800164c:	3ea7dc92 	.word	0x3ea7dc92
 8001650:	c53ce03f 	.word	0xc53ce03f
 8001654:	3fbd94aa 	.word	0x3fbd94aa
 8001658:	34da2134 	.word	0x34da2134
 800165c:	403a2648 	.word	0x403a2648
 8001660:	00000000 	.word	0x00000000
 8001664:	408f3800 	.word	0x408f3800
	...
 8001670:	20000600 	.word	0x20000600
 8001674:	20000664 	.word	0x20000664
 8001678:	20000580 	.word	0x20000580
 800167c:	20000028 	.word	0x20000028
 8001680:	20000608 	.word	0x20000608
 8001684:	00000000 	.word	0x00000000

08001688 <settings_menue>:

void get_current(){
	sensor_values.heater_current = current_raw * CURRENT_COMPENSATION;
}

void settings_menue(){
 8001688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800168c:	b08d      	sub	sp, #52	; 0x34
 800168e:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001690:	2120      	movs	r1, #32
 8001692:	48c5      	ldr	r0, [pc, #788]	; (80019a8 <settings_menue+0x320>)
 8001694:	f008 f8f6 	bl	8009884 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b01      	cmp	r3, #1
 800169c:	f040 82cc 	bne.w	8001c38 <settings_menue+0x5b0>
		LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80016a0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80016a4:	f7ff fe64 	bl	8001370 <RGB_to_BRG>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461c      	mov	r4, r3
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff fe5f 	bl	8001370 <RGB_to_BRG>
 80016b2:	4603      	mov	r3, r0
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	9400      	str	r4, [sp, #0]
 80016b8:	4bbc      	ldr	r3, [pc, #752]	; (80019ac <settings_menue+0x324>)
 80016ba:	4abd      	ldr	r2, [pc, #756]	; (80019b0 <settings_menue+0x328>)
 80016bc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80016c0:	2000      	movs	r0, #0
 80016c2:	f004 f8f5 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80016c6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80016ca:	f7ff fe51 	bl	8001370 <RGB_to_BRG>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461c      	mov	r4, r3
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff fe4c 	bl	8001370 <RGB_to_BRG>
 80016d8:	4603      	mov	r3, r0
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	9400      	str	r4, [sp, #0]
 80016de:	4bb3      	ldr	r3, [pc, #716]	; (80019ac <settings_menue+0x324>)
 80016e0:	4ab4      	ldr	r2, [pc, #720]	; (80019b4 <settings_menue+0x32c>)
 80016e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80016e6:	2096      	movs	r0, #150	; 0x96
 80016e8:	f004 f8e2 	bl	80058b0 <LCD_PutStr>

		TIM2->CNT = 1000;
 80016ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8001710:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001714:	f7ff fe2c 	bl	8001370 <RGB_to_BRG>
 8001718:	4603      	mov	r3, r0
 800171a:	461c      	mov	r4, r3
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fe27 	bl	8001370 <RGB_to_BRG>
 8001722:	4603      	mov	r3, r0
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	9400      	str	r4, [sp, #0]
 8001728:	4ba0      	ldr	r3, [pc, #640]	; (80019ac <settings_menue+0x324>)
 800172a:	4aa3      	ldr	r2, [pc, #652]	; (80019b8 <settings_menue+0x330>)
 800172c:	210c      	movs	r1, #12
 800172e:	203c      	movs	r0, #60	; 0x3c
 8001730:	f004 f8be 	bl	80058b0 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001734:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001738:	f7ff fe1a 	bl	8001370 <RGB_to_BRG>
 800173c:	4603      	mov	r3, r0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2328      	movs	r3, #40	; 0x28
 8001742:	22f0      	movs	r2, #240	; 0xf0
 8001744:	2128      	movs	r1, #40	; 0x28
 8001746:	2000      	movs	r0, #0
 8001748:	f004 f874 	bl	8005834 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 800174c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001750:	f7ff fe0e 	bl	8001370 <RGB_to_BRG>
 8001754:	4603      	mov	r3, r0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2329      	movs	r3, #41	; 0x29
 800175a:	22f0      	movs	r2, #240	; 0xf0
 800175c:	2129      	movs	r1, #41	; 0x29
 800175e:	2000      	movs	r0, #0
 8001760:	f004 f868 	bl	8005834 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001764:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001768:	f7ff fe02 	bl	8001370 <RGB_to_BRG>
 800176c:	4603      	mov	r3, r0
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	232a      	movs	r3, #42	; 0x2a
 8001772:	22f0      	movs	r2, #240	; 0xf0
 8001774:	212a      	movs	r1, #42	; 0x2a
 8001776:	2000      	movs	r0, #0
 8001778:	f004 f85c 	bl	8005834 <LCD_DrawLine>

		HAL_Delay(500);
 800177c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001780:	f004 f9b0 	bl	8005ae4 <HAL_Delay>
		while(menu_active == 1){
 8001784:	e254      	b.n	8001c30 <settings_menue+0x5a8>
			if(menue_level == 0){
 8001786:	8c3b      	ldrh	r3, [r7, #32]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d120      	bne.n	80017ce <settings_menue+0x146>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 800178c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fede 	bl	8000554 <__aeabi_ui2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	ed9f 2b7c 	vldr	d2, [pc, #496]	; 8001990 <settings_menue+0x308>
 80017a0:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8001998 <settings_menue+0x310>
 80017a4:	ec43 2b10 	vmov	d0, r2, r3
 80017a8:	f7ff fda4 	bl	80012f4 <clamp>
 80017ac:	ec53 2b10 	vmov	r2, r3, d0
 80017b0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff fa1e 	bl	8000bf8 <__aeabi_d2uiz>
 80017bc:	4603      	mov	r3, r0
 80017be:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 80017c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80017ca:	085b      	lsrs	r3, r3, #1
 80017cc:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 80017ce:	8c3b      	ldrh	r3, [r7, #32]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	f040 808e 	bne.w	80018f2 <settings_menue+0x26a>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 80017d6:	69b8      	ldr	r0, [r7, #24]
 80017d8:	f7fe fede 	bl	8000598 <__aeabi_f2d>
 80017dc:	4604      	mov	r4, r0
 80017de:	460d      	mov	r5, r1
 80017e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe feb4 	bl	8000554 <__aeabi_ui2d>
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b72      	ldr	r3, [pc, #456]	; (80019bc <settings_menue+0x334>)
 80017f2:	f7fe fd71 	bl	80002d8 <__aeabi_dsub>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fa1b 	bl	8000c38 <__aeabi_d2f>
 8001802:	4603      	mov	r3, r0
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fec7 	bl	8000598 <__aeabi_f2d>
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001812:	f7ff f843 	bl	800089c <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4620      	mov	r0, r4
 800181c:	4629      	mov	r1, r5
 800181e:	f7fe fd5d 	bl	80002dc <__adddf3>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4690      	mov	r8, r2
 8001828:	4699      	mov	r9, r3
 800182a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001834:	ee17 0a90 	vmov	r0, s15
 8001838:	f7fe feae 	bl	8000598 <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001842:	00c9      	lsls	r1, r1, #3
 8001844:	485e      	ldr	r0, [pc, #376]	; (80019c0 <settings_menue+0x338>)
 8001846:	180c      	adds	r4, r1, r0
 8001848:	4640      	mov	r0, r8
 800184a:	4649      	mov	r1, r9
 800184c:	f7fe fd44 	bl	80002d8 <__aeabi_dsub>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	e9c4 2300 	strd	r2, r3, [r4]
				if (menu_cursor_position == 5){
 8001858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800185a:	2b05      	cmp	r3, #5
 800185c:	d12c      	bne.n	80018b8 <settings_menue+0x230>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 800185e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4a57      	ldr	r2, [pc, #348]	; (80019c0 <settings_menue+0x338>)
 8001864:	4413      	add	r3, r2
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f99b 	bl	8000ba8 <__aeabi_d2iz>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bfb8      	it	lt
 8001878:	425b      	neglt	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe7a 	bl	8000574 <__aeabi_i2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	ed9f 1b46 	vldr	d1, [pc, #280]	; 80019a0 <settings_menue+0x318>
 8001888:	ec43 2b10 	vmov	d0, r2, r3
 800188c:	f017 f9e4 	bl	8018c58 <fmod>
 8001890:	eeb0 7a40 	vmov.f32	s14, s0
 8001894:	eef0 7a60 	vmov.f32	s15, s1
 8001898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4a48      	ldr	r2, [pc, #288]	; (80019c0 <settings_menue+0x338>)
 800189e:	189c      	adds	r4, r3, r2
 80018a0:	eeb0 0a47 	vmov.f32	s0, s14
 80018a4:	eef0 0a67 	vmov.f32	s1, s15
 80018a8:	f017 fa04 	bl	8018cb4 <round>
 80018ac:	eeb0 7a40 	vmov.f32	s14, s0
 80018b0:	eef0 7a60 	vmov.f32	s15, s1
 80018b4:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 80018b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d019      	beq.n	80018f2 <settings_menue+0x26a>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 80018be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <settings_menue+0x338>)
 80018c4:	4413      	add	r3, r2
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f96b 	bl	8000ba8 <__aeabi_d2iz>
 80018d2:	4603      	mov	r3, r0
 80018d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4937      	ldr	r1, [pc, #220]	; (80019c0 <settings_menue+0x338>)
 80018e2:	185c      	adds	r4, r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7fe fe45 	bl	8000574 <__aeabi_i2d>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 80018f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018f4:	2b0a      	cmp	r3, #10
 80018f6:	d906      	bls.n	8001906 <settings_menue+0x27e>
							menu_cursor_position = menu_length-1;
 80018f8:	230a      	movs	r3, #10
 80018fa:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 80018fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001900:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 7){
 8001906:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001908:	2b06      	cmp	r3, #6
 800190a:	d903      	bls.n	8001914 <settings_menue+0x28c>
				menue_start = menu_cursor_position-7;
 800190c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800190e:	3b07      	subs	r3, #7
 8001910:	847b      	strh	r3, [r7, #34]	; 0x22
 8001912:	e001      	b.n	8001918 <settings_menue+0x290>
			}
			else{
				menue_start = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001918:	2120      	movs	r1, #32
 800191a:	4823      	ldr	r0, [pc, #140]	; (80019a8 <settings_menue+0x320>)
 800191c:	f007 ffb2 	bl	8009884 <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b01      	cmp	r3, #1
 8001924:	d127      	bne.n	8001976 <settings_menue+0x2ee>
 8001926:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001928:	2b07      	cmp	r3, #7
 800192a:	d824      	bhi.n	8001976 <settings_menue+0x2ee>
				if(menue_level == 0){
 800192c:	8c3b      	ldrh	r3, [r7, #32]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <settings_menue+0x2c6>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001932:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <settings_menue+0x338>)
 8001938:	4413      	add	r3, r2
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f979 	bl	8000c38 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 800194a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800194c:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 800194e:	8c3b      	ldrh	r3, [r7, #32]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d106      	bne.n	8001962 <settings_menue+0x2da>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001956:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800195a:	005a      	lsls	r2, r3, #1
 800195c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001962:	8c3b      	ldrh	r3, [r7, #32]
 8001964:	3b01      	subs	r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	bfb8      	it	lt
 800196a:	425b      	neglt	r3, r3
 800196c:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 800196e:	20c8      	movs	r0, #200	; 0xc8
 8001970:	f004 f8b8 	bl	8005ae4 <HAL_Delay>
 8001974:	e04e      	b.n	8001a14 <settings_menue+0x38c>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001976:	2120      	movs	r1, #32
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <settings_menue+0x320>)
 800197a:	f007 ff83 	bl	8009884 <HAL_GPIO_ReadPin>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d11f      	bne.n	80019c4 <settings_menue+0x33c>
 8001984:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001986:	2b0a      	cmp	r3, #10
 8001988:	d11c      	bne.n	80019c4 <settings_menue+0x33c>
				menu_active = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	83fb      	strh	r3, [r7, #30]
 800198e:	e041      	b.n	8001a14 <settings_menue+0x38c>
 8001990:	00000000 	.word	0x00000000
 8001994:	412e8480 	.word	0x412e8480
 8001998:	00000000 	.word	0x00000000
 800199c:	408f4000 	.word	0x408f4000
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40000000 	.word	0x40000000
 80019a8:	48000400 	.word	0x48000400
 80019ac:	0801a130 	.word	0x0801a130
 80019b0:	08018f78 	.word	0x08018f78
 80019b4:	08018f84 	.word	0x08018f84
 80019b8:	08018f8c 	.word	0x08018f8c
 80019bc:	408f4000 	.word	0x408f4000
 80019c0:	20000608 	.word	0x20000608
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 80019c4:	2120      	movs	r1, #32
 80019c6:	48a2      	ldr	r0, [pc, #648]	; (8001c50 <settings_menue+0x5c8>)
 80019c8:	f007 ff5c 	bl	8009884 <HAL_GPIO_ReadPin>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <settings_menue+0x35c>
 80019d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019d4:	2b09      	cmp	r3, #9
 80019d6:	d105      	bne.n	80019e4 <settings_menue+0x35c>
				menu_active = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 80019dc:	489d      	ldr	r0, [pc, #628]	; (8001c54 <settings_menue+0x5cc>)
 80019de:	f7ff fbb5 	bl	800114c <FlashWrite>
 80019e2:	e017      	b.n	8001a14 <settings_menue+0x38c>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 80019e4:	2120      	movs	r1, #32
 80019e6:	489a      	ldr	r0, [pc, #616]	; (8001c50 <settings_menue+0x5c8>)
 80019e8:	f007 ff4c 	bl	8009884 <HAL_GPIO_ReadPin>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d110      	bne.n	8001a14 <settings_menue+0x38c>
 80019f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d10d      	bne.n	8001a14 <settings_menue+0x38c>
				flash_values = default_flash_values;
 80019f8:	4a96      	ldr	r2, [pc, #600]	; (8001c54 <settings_menue+0x5cc>)
 80019fa:	4b97      	ldr	r3, [pc, #604]	; (8001c58 <settings_menue+0x5d0>)
 80019fc:	4614      	mov	r4, r2
 80019fe:	461d      	mov	r5, r3
 8001a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}

			for(int i = menue_start;i<=menue_start+7;i++){
 8001a14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e104      	b.n	8001c24 <settings_menue+0x59c>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001a1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d12b      	bne.n	8001a7a <settings_menue+0x3f2>
 8001a22:	8c3b      	ldrh	r3, [r7, #32]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d128      	bne.n	8001a7a <settings_menue+0x3f2>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001a28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	461a      	mov	r2, r3
 8001a38:	0091      	lsls	r1, r2, #2
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4413      	add	r3, r2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	332d      	adds	r3, #45	; 0x2d
 8001a44:	b29c      	uxth	r4, r3
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4a82      	ldr	r2, [pc, #520]	; (8001c5c <settings_menue+0x5d4>)
 8001a52:	189d      	adds	r5, r3, r2
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fc8b 	bl	8001370 <RGB_to_BRG>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461e      	mov	r6, r3
 8001a5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a62:	f7ff fc85 	bl	8001370 <RGB_to_BRG>
 8001a66:	4603      	mov	r3, r0
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	9600      	str	r6, [sp, #0]
 8001a6c:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <settings_menue+0x5d8>)
 8001a6e:	462a      	mov	r2, r5
 8001a70:	4621      	mov	r1, r4
 8001a72:	2005      	movs	r0, #5
 8001a74:	f003 ff1c 	bl	80058b0 <LCD_PutStr>
 8001a78:	e027      	b.n	8001aca <settings_menue+0x442>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001a7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	0091      	lsls	r1, r2, #2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4413      	add	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	332d      	adds	r3, #45	; 0x2d
 8001a96:	b29c      	uxth	r4, r3
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <settings_menue+0x5d4>)
 8001aa4:	189d      	adds	r5, r3, r2
 8001aa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001aaa:	f7ff fc61 	bl	8001370 <RGB_to_BRG>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461e      	mov	r6, r3
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff fc5c 	bl	8001370 <RGB_to_BRG>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	9600      	str	r6, [sp, #0]
 8001abe:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <settings_menue+0x5d8>)
 8001ac0:	462a      	mov	r2, r5
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	2005      	movs	r0, #5
 8001ac6:	f003 fef3 	bl	80058b0 <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001aca:	463b      	mov	r3, r7
 8001acc:	2214      	movs	r2, #20
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f014 ffc6 	bl	8016a62 <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <settings_menue+0x5cc>)
 8001adc:	4413      	add	r3, r2
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	4638      	mov	r0, r7
 8001ae4:	495f      	ldr	r1, [pc, #380]	; (8001c64 <settings_menue+0x5dc>)
 8001ae6:	f014 ff59 	bl	801699c <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4a59      	ldr	r2, [pc, #356]	; (8001c54 <settings_menue+0x5cc>)
 8001af0:	4413      	add	r3, r2
 8001af2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <settings_menue+0x5e0>)
 8001afc:	f7ff f816 	bl	8000b2c <__aeabi_dcmplt>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <settings_menue+0x490>
					str[1] = 32;
 8001b06:	2320      	movs	r3, #32
 8001b08:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001b12:	2320      	movs	r3, #32
 8001b14:	713b      	strb	r3, [r7, #4]
 8001b16:	e011      	b.n	8001b3c <settings_menue+0x4b4>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <settings_menue+0x5cc>)
 8001b1e:	4413      	add	r3, r2
 8001b20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b24:	a348      	add	r3, pc, #288	; (adr r3, 8001c48 <settings_menue+0x5c0>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe ffff 	bl	8000b2c <__aeabi_dcmplt>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <settings_menue+0x4b4>
					str[2] = 32;
 8001b34:	2320      	movs	r3, #32
 8001b36:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	dc49      	bgt.n	8001bd6 <settings_menue+0x54e>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001b42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d124      	bne.n	8001b94 <settings_menue+0x50c>
 8001b4a:	8c3b      	ldrh	r3, [r7, #32]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d121      	bne.n	8001b94 <settings_menue+0x50c>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001b50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	0091      	lsls	r1, r2, #2
 8001b62:	461a      	mov	r2, r3
 8001b64:	460b      	mov	r3, r1
 8001b66:	4413      	add	r3, r2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	332d      	adds	r3, #45	; 0x2d
 8001b6c:	b29c      	uxth	r4, r3
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff fbfe 	bl	8001370 <RGB_to_BRG>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461d      	mov	r5, r3
 8001b78:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b7c:	f7ff fbf8 	bl	8001370 <RGB_to_BRG>
 8001b80:	4603      	mov	r3, r0
 8001b82:	463a      	mov	r2, r7
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	9500      	str	r5, [sp, #0]
 8001b88:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <settings_menue+0x5d8>)
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	20c8      	movs	r0, #200	; 0xc8
 8001b8e:	f003 fe8f 	bl	80058b0 <LCD_PutStr>
 8001b92:	e020      	b.n	8001bd6 <settings_menue+0x54e>
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	0091      	lsls	r1, r2, #2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	332d      	adds	r3, #45	; 0x2d
 8001bb0:	b29c      	uxth	r4, r3
 8001bb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bb6:	f7ff fbdb 	bl	8001370 <RGB_to_BRG>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fbd6 	bl	8001370 <RGB_to_BRG>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	463a      	mov	r2, r7
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	9500      	str	r5, [sp, #0]
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <settings_menue+0x5d8>)
 8001bce:	4621      	mov	r1, r4
 8001bd0:	20c8      	movs	r0, #200	; 0xc8
 8001bd2:	f003 fe6d 	bl	80058b0 <LCD_PutStr>

					}
				}
				if(i >= menu_length-3){
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b07      	cmp	r3, #7
 8001bda:	dd20      	ble.n	8001c1e <settings_menue+0x596>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001bdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	461a      	mov	r2, r3
 8001bec:	0091      	lsls	r1, r2, #2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	332d      	adds	r3, #45	; 0x2d
 8001bf8:	b29c      	uxth	r4, r3
 8001bfa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bfe:	f7ff fbb7 	bl	8001370 <RGB_to_BRG>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461d      	mov	r5, r3
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fbb2 	bl	8001370 <RGB_to_BRG>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	9500      	str	r5, [sp, #0]
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <settings_menue+0x5d8>)
 8001c14:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <settings_menue+0x5e4>)
 8001c16:	4621      	mov	r1, r4
 8001c18:	20c8      	movs	r0, #200	; 0xc8
 8001c1a:	f003 fe49 	bl	80058b0 <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+7;i++){
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c26:	3307      	adds	r3, #7
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	f77f aef5 	ble.w	8001a1a <settings_menue+0x392>
		while(menu_active == 1){
 8001c30:	8bfb      	ldrh	r3, [r7, #30]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f43f ada7 	beq.w	8001786 <settings_menue+0xfe>
				}

			}
		}
	}
}
 8001c38:	bf00      	nop
 8001c3a:	372c      	adds	r7, #44	; 0x2c
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c42:	bf00      	nop
 8001c44:	f3af 8000 	nop.w
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	4058e000 	.word	0x4058e000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	20000608 	.word	0x20000608
 8001c58:	20000070 	.word	0x20000070
 8001c5c:	200000b0 	.word	0x200000b0
 8001c60:	0801a130 	.word	0x0801a130
 8001c64:	08018f98 	.word	0x08018f98
 8001c68:	40230000 	.word	0x40230000
 8001c6c:	08018fa0 	.word	0x08018fa0

08001c70 <update_display>:

void update_display(){
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 8001c76:	2228      	movs	r2, #40	; 0x28
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4869      	ldr	r0, [pc, #420]	; (8001e20 <update_display+0x1b0>)
 8001c7c:	f014 fef1 	bl	8016a62 <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001c80:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <update_display+0x1b4>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	4968      	ldr	r1, [pc, #416]	; (8001e28 <update_display+0x1b8>)
 8001c88:	4865      	ldr	r0, [pc, #404]	; (8001e20 <update_display+0x1b0>)
 8001c8a:	f014 fe87 	bl	801699c <siprintf>
	if(sensor_values.set_temperature < 99.5){
 8001c8e:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <update_display+0x1b4>)
 8001c90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c94:	a360      	add	r3, pc, #384	; (adr r3, 8001e18 <update_display+0x1a8>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe ff47 	bl	8000b2c <__aeabi_dcmplt>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <update_display+0x40>
		buffer[2] = 32;
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <update_display+0x1b0>)
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <update_display+0x1b0>)
 8001cac:	2220      	movs	r2, #32
 8001cae:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(10, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001cb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cb4:	f7ff fb5c 	bl	8001370 <RGB_to_BRG>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461c      	mov	r4, r3
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff fb57 	bl	8001370 <RGB_to_BRG>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	9400      	str	r4, [sp, #0]
 8001cc8:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <update_display+0x1bc>)
 8001cca:	4a55      	ldr	r2, [pc, #340]	; (8001e20 <update_display+0x1b0>)
 8001ccc:	214b      	movs	r1, #75	; 0x4b
 8001cce:	200a      	movs	r0, #10
 8001cd0:	f003 fdee 	bl	80058b0 <LCD_PutStr>

	if(0){//sensor_values.heater_current < 0.1){
	  	LCD_PutStr(10, 165, "---", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 8001cd4:	2228      	movs	r2, #40	; 0x28
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4851      	ldr	r0, [pc, #324]	; (8001e20 <update_display+0x1b0>)
 8001cda:	f014 fec2 	bl	8016a62 <memset>
		sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8001cde:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <update_display+0x1b4>)
 8001ce0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ce4:	4950      	ldr	r1, [pc, #320]	; (8001e28 <update_display+0x1b8>)
 8001ce6:	484e      	ldr	r0, [pc, #312]	; (8001e20 <update_display+0x1b0>)
 8001ce8:	f014 fe58 	bl	801699c <siprintf>
		if(sensor_values.thermocouple_temperature < 99.5){
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <update_display+0x1b4>)
 8001cee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cf2:	a349      	add	r3, pc, #292	; (adr r3, 8001e18 <update_display+0x1a8>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe ff18 	bl	8000b2c <__aeabi_dcmplt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <update_display+0x9e>
			buffer[2] = 32;
 8001d02:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <update_display+0x1b0>)
 8001d04:	2220      	movs	r2, #32
 8001d06:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001d08:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <update_display+0x1b0>)
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	70da      	strb	r2, [r3, #3]
		}
	  	LCD_PutStr(10, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d12:	f7ff fb2d 	bl	8001370 <RGB_to_BRG>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461c      	mov	r4, r3
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff fb28 	bl	8001370 <RGB_to_BRG>
 8001d20:	4603      	mov	r3, r0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	9400      	str	r4, [sp, #0]
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <update_display+0x1bc>)
 8001d28:	4a3d      	ldr	r2, [pc, #244]	; (8001e20 <update_display+0x1b0>)
 8001d2a:	21a5      	movs	r1, #165	; 0xa5
 8001d2c:	200a      	movs	r0, #10
 8001d2e:	f003 fdbf 	bl	80058b0 <LCD_PutStr>
	}

	memset(&buffer, '\0', sizeof(buffer));
 8001d32:	2228      	movs	r2, #40	; 0x28
 8001d34:	2100      	movs	r1, #0
 8001d36:	483a      	ldr	r0, [pc, #232]	; (8001e20 <update_display+0x1b0>)
 8001d38:	f014 fe93 	bl	8016a62 <memset>
	sprintf(buffer, "%.1f V", sensor_values.bus_voltage);
 8001d3c:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <update_display+0x1b4>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fc29 	bl	8000598 <__aeabi_f2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4939      	ldr	r1, [pc, #228]	; (8001e30 <update_display+0x1c0>)
 8001d4c:	4834      	ldr	r0, [pc, #208]	; (8001e20 <update_display+0x1b0>)
 8001d4e:	f014 fe25 	bl	801699c <siprintf>
	LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d56:	f7ff fb0b 	bl	8001370 <RGB_to_BRG>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461c      	mov	r4, r3
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff fb06 	bl	8001370 <RGB_to_BRG>
 8001d64:	4603      	mov	r3, r0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	9400      	str	r4, [sp, #0]
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <update_display+0x1c4>)
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	; (8001e20 <update_display+0x1b0>)
 8001d6e:	21ff      	movs	r1, #255	; 0xff
 8001d70:	2064      	movs	r0, #100	; 0x64
 8001d72:	f003 fd9d 	bl	80058b0 <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 8001d76:	2228      	movs	r2, #40	; 0x28
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4829      	ldr	r0, [pc, #164]	; (8001e20 <update_display+0x1b0>)
 8001d7c:	f014 fe71 	bl	8016a62 <memset>
	sprintf(buffer, "%.1f deg C", sensor_values.mcu_temperature);
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <update_display+0x1b4>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fc07 	bl	8000598 <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	492a      	ldr	r1, [pc, #168]	; (8001e38 <update_display+0x1c8>)
 8001d90:	4823      	ldr	r0, [pc, #140]	; (8001e20 <update_display+0x1b0>)
 8001d92:	f014 fe03 	bl	801699c <siprintf>
	LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d9a:	f7ff fae9 	bl	8001370 <RGB_to_BRG>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461c      	mov	r4, r3
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7ff fae4 	bl	8001370 <RGB_to_BRG>
 8001da8:	4603      	mov	r3, r0
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	9400      	str	r4, [sp, #0]
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <update_display+0x1c4>)
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <update_display+0x1b0>)
 8001db2:	f240 1113 	movw	r1, #275	; 0x113
 8001db6:	2064      	movs	r0, #100	; 0x64
 8001db8:	f003 fd7a 	bl	80058b0 <LCD_PutStr>

	if(handle == T210){
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <update_display+0x1cc>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d112      	bne.n	8001dea <update_display+0x17a>
		LCD_PutStr(100, 235, "T210", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001dc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dc8:	f7ff fad2 	bl	8001370 <RGB_to_BRG>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461c      	mov	r4, r3
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff facd 	bl	8001370 <RGB_to_BRG>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	9400      	str	r4, [sp, #0]
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <update_display+0x1c4>)
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <update_display+0x1d0>)
 8001de0:	21eb      	movs	r1, #235	; 0xeb
 8001de2:	2064      	movs	r0, #100	; 0x64
 8001de4:	f003 fd64 	bl	80058b0 <LCD_PutStr>
 8001de8:	e044      	b.n	8001e74 <update_display+0x204>
	}
	else if(handle == T245){
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <update_display+0x1cc>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d12a      	bne.n	8001e48 <update_display+0x1d8>
		LCD_PutStr(100, 235, "T245", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001df2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001df6:	f7ff fabb 	bl	8001370 <RGB_to_BRG>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461c      	mov	r4, r3
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fab6 	bl	8001370 <RGB_to_BRG>
 8001e04:	4603      	mov	r3, r0
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	9400      	str	r4, [sp, #0]
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <update_display+0x1c4>)
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <update_display+0x1d4>)
 8001e0e:	21eb      	movs	r1, #235	; 0xeb
 8001e10:	2064      	movs	r0, #100	; 0x64
 8001e12:	f003 fd4d 	bl	80058b0 <LCD_PutStr>
 8001e16:	e02d      	b.n	8001e74 <update_display+0x204>
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	4058e000 	.word	0x4058e000
 8001e20:	200005c0 	.word	0x200005c0
 8001e24:	20000028 	.word	0x20000028
 8001e28:	08018fa8 	.word	0x08018fa8
 8001e2c:	0801b0a8 	.word	0x0801b0a8
 8001e30:	08018fac 	.word	0x08018fac
 8001e34:	08019160 	.word	0x08019160
 8001e38:	08018fb4 	.word	0x08018fb4
 8001e3c:	20000580 	.word	0x20000580
 8001e40:	08018fc0 	.word	0x08018fc0
 8001e44:	08018fc8 	.word	0x08018fc8
	}
	else if(handle == T115){
 8001e48:	4ba8      	ldr	r3, [pc, #672]	; (80020ec <update_display+0x47c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d111      	bne.n	8001e74 <update_display+0x204>
		LCD_PutStr(100, 235, "T115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e54:	f7ff fa8c 	bl	8001370 <RGB_to_BRG>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461c      	mov	r4, r3
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff fa87 	bl	8001370 <RGB_to_BRG>
 8001e62:	4603      	mov	r3, r0
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	9400      	str	r4, [sp, #0]
 8001e68:	4ba1      	ldr	r3, [pc, #644]	; (80020f0 <update_display+0x480>)
 8001e6a:	4aa2      	ldr	r2, [pc, #648]	; (80020f4 <update_display+0x484>)
 8001e6c:	21eb      	movs	r1, #235	; 0xeb
 8001e6e:	2064      	movs	r0, #100	; 0x64
 8001e70:	f003 fd1e 	bl	80058b0 <LCD_PutStr>
	}

	if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && state_written_to_LCD == 0){
 8001e74:	4ba0      	ldr	r3, [pc, #640]	; (80020f8 <update_display+0x488>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d008      	beq.n	8001e8e <update_display+0x21e>
 8001e7c:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <update_display+0x488>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d004      	beq.n	8001e8e <update_display+0x21e>
 8001e84:	4b9c      	ldr	r3, [pc, #624]	; (80020f8 <update_display+0x488>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	f040 8095 	bne.w	8001fb8 <update_display+0x348>
 8001e8e:	4b9b      	ldr	r3, [pc, #620]	; (80020fc <update_display+0x48c>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 8090 	bne.w	8001fb8 <update_display+0x348>
		UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 8001e98:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001e9c:	f7ff fa68 	bl	8001370 <RGB_to_BRG>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8001ea8:	22e6      	movs	r2, #230	; 0xe6
 8001eaa:	2137      	movs	r1, #55	; 0x37
 8001eac:	20d2      	movs	r0, #210	; 0xd2
 8001eae:	f010 f8f1 	bl	8012094 <UG_FillFrame>
		LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fa5c 	bl	8001370 <RGB_to_BRG>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461c      	mov	r4, r3
 8001ebc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001ec0:	f7ff fa56 	bl	8001370 <RGB_to_BRG>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	9400      	str	r4, [sp, #0]
 8001eca:	4b8d      	ldr	r3, [pc, #564]	; (8002100 <update_display+0x490>)
 8001ecc:	4a8d      	ldr	r2, [pc, #564]	; (8002104 <update_display+0x494>)
 8001ece:	213a      	movs	r1, #58	; 0x3a
 8001ed0:	20d6      	movs	r0, #214	; 0xd6
 8001ed2:	f003 fced 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff fa4a 	bl	8001370 <RGB_to_BRG>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461c      	mov	r4, r3
 8001ee0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001ee4:	f7ff fa44 	bl	8001370 <RGB_to_BRG>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	9400      	str	r4, [sp, #0]
 8001eee:	4b84      	ldr	r3, [pc, #528]	; (8002100 <update_display+0x490>)
 8001ef0:	4a85      	ldr	r2, [pc, #532]	; (8002108 <update_display+0x498>)
 8001ef2:	215c      	movs	r1, #92	; 0x5c
 8001ef4:	20d8      	movs	r0, #216	; 0xd8
 8001ef6:	f003 fcdb 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff fa38 	bl	8001370 <RGB_to_BRG>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461c      	mov	r4, r3
 8001f04:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001f08:	f7ff fa32 	bl	8001370 <RGB_to_BRG>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	9400      	str	r4, [sp, #0]
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <update_display+0x490>)
 8001f14:	4a7b      	ldr	r2, [pc, #492]	; (8002104 <update_display+0x494>)
 8001f16:	217e      	movs	r1, #126	; 0x7e
 8001f18:	20d6      	movs	r0, #214	; 0xd6
 8001f1a:	f003 fcc9 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff fa26 	bl	8001370 <RGB_to_BRG>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461c      	mov	r4, r3
 8001f28:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001f2c:	f7ff fa20 	bl	8001370 <RGB_to_BRG>
 8001f30:	4603      	mov	r3, r0
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	9400      	str	r4, [sp, #0]
 8001f36:	4b72      	ldr	r3, [pc, #456]	; (8002100 <update_display+0x490>)
 8001f38:	4a73      	ldr	r2, [pc, #460]	; (8002108 <update_display+0x498>)
 8001f3a:	21a1      	movs	r1, #161	; 0xa1
 8001f3c:	20d8      	movs	r0, #216	; 0xd8
 8001f3e:	f003 fcb7 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff fa14 	bl	8001370 <RGB_to_BRG>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001f50:	f7ff fa0e 	bl	8001370 <RGB_to_BRG>
 8001f54:	4603      	mov	r3, r0
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	9400      	str	r4, [sp, #0]
 8001f5a:	4b69      	ldr	r3, [pc, #420]	; (8002100 <update_display+0x490>)
 8001f5c:	4a69      	ldr	r2, [pc, #420]	; (8002104 <update_display+0x494>)
 8001f5e:	21c2      	movs	r1, #194	; 0xc2
 8001f60:	20d6      	movs	r0, #214	; 0xd6
 8001f62:	f003 fca5 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff fa02 	bl	8001370 <RGB_to_BRG>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461c      	mov	r4, r3
 8001f70:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001f74:	f7ff f9fc 	bl	8001370 <RGB_to_BRG>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	9400      	str	r4, [sp, #0]
 8001f7e:	4b60      	ldr	r3, [pc, #384]	; (8002100 <update_display+0x490>)
 8001f80:	4a61      	ldr	r2, [pc, #388]	; (8002108 <update_display+0x498>)
 8001f82:	21e4      	movs	r1, #228	; 0xe4
 8001f84:	20d8      	movs	r0, #216	; 0xd8
 8001f86:	f003 fc93 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff f9f0 	bl	8001370 <RGB_to_BRG>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461c      	mov	r4, r3
 8001f94:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001f98:	f7ff f9ea 	bl	8001370 <RGB_to_BRG>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	9400      	str	r4, [sp, #0]
 8001fa2:	4b57      	ldr	r3, [pc, #348]	; (8002100 <update_display+0x490>)
 8001fa4:	4a57      	ldr	r2, [pc, #348]	; (8002104 <update_display+0x494>)
 8001fa6:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001faa:	20d6      	movs	r0, #214	; 0xd6
 8001fac:	f003 fc80 	bl	80058b0 <LCD_PutStr>

		state_written_to_LCD = 1;
 8001fb0:	4b52      	ldr	r3, [pc, #328]	; (80020fc <update_display+0x48c>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e120      	b.n	80021fa <update_display+0x58a>

	}
	else if((active_state == STANDBY) && state_written_to_LCD == 0){
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <update_display+0x488>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 80b3 	bne.w	8002128 <update_display+0x4b8>
 8001fc2:	4b4e      	ldr	r3, [pc, #312]	; (80020fc <update_display+0x48c>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 80ae 	bne.w	8002128 <update_display+0x4b8>
		UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 8001fcc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001fd0:	f7ff f9ce 	bl	8001370 <RGB_to_BRG>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8001fdc:	22e6      	movs	r2, #230	; 0xe6
 8001fde:	2137      	movs	r1, #55	; 0x37
 8001fe0:	20d2      	movs	r0, #210	; 0xd2
 8001fe2:	f010 f857 	bl	8012094 <UG_FillFrame>
		LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff f9c2 	bl	8001370 <RGB_to_BRG>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461c      	mov	r4, r3
 8001ff0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001ff4:	f7ff f9bc 	bl	8001370 <RGB_to_BRG>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	9400      	str	r4, [sp, #0]
 8001ffe:	4b40      	ldr	r3, [pc, #256]	; (8002100 <update_display+0x490>)
 8002000:	4a42      	ldr	r2, [pc, #264]	; (800210c <update_display+0x49c>)
 8002002:	213a      	movs	r1, #58	; 0x3a
 8002004:	20d6      	movs	r0, #214	; 0xd6
 8002006:	f003 fc53 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff f9b0 	bl	8001370 <RGB_to_BRG>
 8002010:	4603      	mov	r3, r0
 8002012:	461c      	mov	r4, r3
 8002014:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002018:	f7ff f9aa 	bl	8001370 <RGB_to_BRG>
 800201c:	4603      	mov	r3, r0
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	9400      	str	r4, [sp, #0]
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <update_display+0x490>)
 8002024:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <update_display+0x4a0>)
 8002026:	215c      	movs	r1, #92	; 0x5c
 8002028:	20d6      	movs	r0, #214	; 0xd6
 800202a:	f003 fc41 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff f99e 	bl	8001370 <RGB_to_BRG>
 8002034:	4603      	mov	r3, r0
 8002036:	461c      	mov	r4, r3
 8002038:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800203c:	f7ff f998 	bl	8001370 <RGB_to_BRG>
 8002040:	4603      	mov	r3, r0
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	9400      	str	r4, [sp, #0]
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <update_display+0x490>)
 8002048:	4a32      	ldr	r2, [pc, #200]	; (8002114 <update_display+0x4a4>)
 800204a:	217e      	movs	r1, #126	; 0x7e
 800204c:	20d6      	movs	r0, #214	; 0xd6
 800204e:	f003 fc2f 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002052:	2000      	movs	r0, #0
 8002054:	f7ff f98c 	bl	8001370 <RGB_to_BRG>
 8002058:	4603      	mov	r3, r0
 800205a:	461c      	mov	r4, r3
 800205c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002060:	f7ff f986 	bl	8001370 <RGB_to_BRG>
 8002064:	4603      	mov	r3, r0
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	9400      	str	r4, [sp, #0]
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <update_display+0x490>)
 800206c:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <update_display+0x4a8>)
 800206e:	21a1      	movs	r1, #161	; 0xa1
 8002070:	20d6      	movs	r0, #214	; 0xd6
 8002072:	f003 fc1d 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff f97a 	bl	8001370 <RGB_to_BRG>
 800207c:	4603      	mov	r3, r0
 800207e:	461c      	mov	r4, r3
 8002080:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002084:	f7ff f974 	bl	8001370 <RGB_to_BRG>
 8002088:	4603      	mov	r3, r0
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	9400      	str	r4, [sp, #0]
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <update_display+0x490>)
 8002090:	4a22      	ldr	r2, [pc, #136]	; (800211c <update_display+0x4ac>)
 8002092:	21c2      	movs	r1, #194	; 0xc2
 8002094:	20d6      	movs	r0, #214	; 0xd6
 8002096:	f003 fc0b 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff f968 	bl	8001370 <RGB_to_BRG>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461c      	mov	r4, r3
 80020a4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80020a8:	f7ff f962 	bl	8001370 <RGB_to_BRG>
 80020ac:	4603      	mov	r3, r0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	9400      	str	r4, [sp, #0]
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <update_display+0x490>)
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <update_display+0x4b0>)
 80020b6:	21e4      	movs	r1, #228	; 0xe4
 80020b8:	20d6      	movs	r0, #214	; 0xd6
 80020ba:	f003 fbf9 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff f956 	bl	8001370 <RGB_to_BRG>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461c      	mov	r4, r3
 80020c8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80020cc:	f7ff f950 	bl	8001370 <RGB_to_BRG>
 80020d0:	4603      	mov	r3, r0
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	9400      	str	r4, [sp, #0]
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <update_display+0x490>)
 80020d8:	4a12      	ldr	r2, [pc, #72]	; (8002124 <update_display+0x4b4>)
 80020da:	f44f 7183 	mov.w	r1, #262	; 0x106
 80020de:	20d6      	movs	r0, #214	; 0xd6
 80020e0:	f003 fbe6 	bl	80058b0 <LCD_PutStr>
		state_written_to_LCD = 1;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <update_display+0x48c>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e086      	b.n	80021fa <update_display+0x58a>
 80020ec:	20000580 	.word	0x20000580
 80020f0:	08019160 	.word	0x08019160
 80020f4:	08018fd0 	.word	0x08018fd0
 80020f8:	20000015 	.word	0x20000015
 80020fc:	200005a3 	.word	0x200005a3
 8002100:	0801a130 	.word	0x0801a130
 8002104:	08018fd8 	.word	0x08018fd8
 8002108:	08018fdc 	.word	0x08018fdc
 800210c:	08018fe0 	.word	0x08018fe0
 8002110:	08018fe4 	.word	0x08018fe4
 8002114:	08018fe8 	.word	0x08018fe8
 8002118:	08018fec 	.word	0x08018fec
 800211c:	08018ff0 	.word	0x08018ff0
 8002120:	08018ff4 	.word	0x08018ff4
 8002124:	08018ff8 	.word	0x08018ff8
	}
	else if(active_state == RUN){
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <update_display+0x5a8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d164      	bne.n	80021fa <update_display+0x58a>
		state_written_to_LCD = 0;
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <update_display+0x5ac>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <update_display+0x5b0>)
 8002138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	4b38      	ldr	r3, [pc, #224]	; (8002224 <update_display+0x5b4>)
 8002142:	f7fe fbab 	bl	800089c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	4b35      	ldr	r3, [pc, #212]	; (8002228 <update_display+0x5b8>)
 8002154:	f7fe fa78 	bl	8000648 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	a12a      	add	r1, pc, #168	; (adr r1, 8002208 <update_display+0x598>)
 800215e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002162:	f7fe f8b9 	bl	80002d8 <__aeabi_dsub>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe fd1b 	bl	8000ba8 <__aeabi_d2iz>
 8002172:	4603      	mov	r3, r0
 8002174:	b21c      	sxth	r4, r3
 8002176:	f248 607e 	movw	r0, #34430	; 0x867e
 800217a:	f7ff f8f9 	bl	8001370 <RGB_to_BRG>
 800217e:	4603      	mov	r3, r0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	f240 131f 	movw	r3, #287	; 0x11f
 8002186:	22e6      	movs	r2, #230	; 0xe6
 8002188:	4621      	mov	r1, r4
 800218a:	20d2      	movs	r0, #210	; 0xd2
 800218c:	f00f ff82 	bl	8012094 <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <update_display+0x5b0>)
 8002192:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <update_display+0x5b4>)
 800219c:	f7fe fb7e 	bl	800089c <__aeabi_ddiv>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	a319      	add	r3, pc, #100	; (adr r3, 8002210 <update_display+0x5a0>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe fa4b 	bl	8000648 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	a114      	add	r1, pc, #80	; (adr r1, 8002208 <update_display+0x598>)
 80021b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021bc:	f7fe f88c 	bl	80002d8 <__aeabi_dsub>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <update_display+0x5bc>)
 80021ce:	f7fe f883 	bl	80002d8 <__aeabi_dsub>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fce5 	bl	8000ba8 <__aeabi_d2iz>
 80021de:	4603      	mov	r3, r0
 80021e0:	b21c      	sxth	r4, r3
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7ff f8c4 	bl	8001370 <RGB_to_BRG>
 80021e8:	4603      	mov	r3, r0
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4623      	mov	r3, r4
 80021ee:	22e6      	movs	r2, #230	; 0xe6
 80021f0:	2137      	movs	r1, #55	; 0x37
 80021f2:	20d2      	movs	r0, #210	; 0xd2
 80021f4:	f00f ff4e 	bl	8012094 <UG_FillFrame>
	}
}
 80021f8:	e7ff      	b.n	80021fa <update_display+0x58a>
 80021fa:	bf00      	nop
 80021fc:	3704      	adds	r7, #4
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	f3af 8000 	nop.w
 8002208:	00000000 	.word	0x00000000
 800220c:	4071f000 	.word	0x4071f000
 8002210:	00000000 	.word	0x00000000
 8002214:	406ce000 	.word	0x406ce000
 8002218:	20000015 	.word	0x20000015
 800221c:	200005a3 	.word	0x200005a3
 8002220:	20000648 	.word	0x20000648
 8002224:	407f4000 	.word	0x407f4000
 8002228:	406d0000 	.word	0x406d0000
 800222c:	3ff00000 	.word	0x3ff00000

08002230 <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b083      	sub	sp, #12
 8002234:	af02      	add	r7, sp, #8
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff f89a 	bl	8001370 <RGB_to_BRG>
 800223c:	4603      	mov	r3, r0
 800223e:	4618      	mov	r0, r3
 8002240:	f00f ff04 	bl	801204c <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002244:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002248:	f7ff f892 	bl	8001370 <RGB_to_BRG>
 800224c:	4603      	mov	r3, r0
 800224e:	461c      	mov	r4, r3
 8002250:	2000      	movs	r0, #0
 8002252:	f7ff f88d 	bl	8001370 <RGB_to_BRG>
 8002256:	4603      	mov	r3, r0
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	9400      	str	r4, [sp, #0]
 800225c:	4bc3      	ldr	r3, [pc, #780]	; (800256c <LCD_draw_main_screen+0x33c>)
 800225e:	4ac4      	ldr	r2, [pc, #784]	; (8002570 <LCD_draw_main_screen+0x340>)
 8002260:	210c      	movs	r1, #12
 8002262:	2035      	movs	r0, #53	; 0x35
 8002264:	f003 fb24 	bl	80058b0 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8002268:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800226c:	f7ff f880 	bl	8001370 <RGB_to_BRG>
 8002270:	4603      	mov	r3, r0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2328      	movs	r3, #40	; 0x28
 8002276:	22f0      	movs	r2, #240	; 0xf0
 8002278:	2128      	movs	r1, #40	; 0x28
 800227a:	2000      	movs	r0, #0
 800227c:	f003 fada 	bl	8005834 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002280:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002284:	f7ff f874 	bl	8001370 <RGB_to_BRG>
 8002288:	4603      	mov	r3, r0
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2329      	movs	r3, #41	; 0x29
 800228e:	22f0      	movs	r2, #240	; 0xf0
 8002290:	2129      	movs	r1, #41	; 0x29
 8002292:	2000      	movs	r0, #0
 8002294:	f003 face 	bl	8005834 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002298:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800229c:	f7ff f868 	bl	8001370 <RGB_to_BRG>
 80022a0:	4603      	mov	r3, r0
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	232a      	movs	r3, #42	; 0x2a
 80022a6:	22f0      	movs	r2, #240	; 0xf0
 80022a8:	212a      	movs	r1, #42	; 0x2a
 80022aa:	2000      	movs	r0, #0
 80022ac:	f003 fac2 	bl	8005834 <LCD_DrawLine>


		LCD_PutStr(10, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80022b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022b4:	f7ff f85c 	bl	8001370 <RGB_to_BRG>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461c      	mov	r4, r3
 80022bc:	2000      	movs	r0, #0
 80022be:	f7ff f857 	bl	8001370 <RGB_to_BRG>
 80022c2:	4603      	mov	r3, r0
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	9400      	str	r4, [sp, #0]
 80022c8:	4baa      	ldr	r3, [pc, #680]	; (8002574 <LCD_draw_main_screen+0x344>)
 80022ca:	4aab      	ldr	r2, [pc, #684]	; (8002578 <LCD_draw_main_screen+0x348>)
 80022cc:	2132      	movs	r1, #50	; 0x32
 80022ce:	200a      	movs	r0, #10
 80022d0:	f003 faee 	bl	80058b0 <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 80022d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022d8:	f7ff f84a 	bl	8001370 <RGB_to_BRG>
 80022dc:	4603      	mov	r3, r0
 80022de:	2205      	movs	r2, #5
 80022e0:	2155      	movs	r1, #85	; 0x55
 80022e2:	2078      	movs	r0, #120	; 0x78
 80022e4:	f00f ff90 	bl	8012208 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 80022e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022ec:	f7ff f840 	bl	8001370 <RGB_to_BRG>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2204      	movs	r2, #4
 80022f4:	2155      	movs	r1, #85	; 0x55
 80022f6:	2078      	movs	r0, #120	; 0x78
 80022f8:	f00f ff86 	bl	8012208 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 80022fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002300:	f7ff f836 	bl	8001370 <RGB_to_BRG>
 8002304:	4603      	mov	r3, r0
 8002306:	2203      	movs	r2, #3
 8002308:	2155      	movs	r1, #85	; 0x55
 800230a:	2078      	movs	r0, #120	; 0x78
 800230c:	f00f ff7c 	bl	8012208 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002310:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002314:	f7ff f82c 	bl	8001370 <RGB_to_BRG>
 8002318:	4603      	mov	r3, r0
 800231a:	461c      	mov	r4, r3
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff f827 	bl	8001370 <RGB_to_BRG>
 8002322:	4603      	mov	r3, r0
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	9400      	str	r4, [sp, #0]
 8002328:	4b94      	ldr	r3, [pc, #592]	; (800257c <LCD_draw_main_screen+0x34c>)
 800232a:	4a95      	ldr	r2, [pc, #596]	; (8002580 <LCD_draw_main_screen+0x350>)
 800232c:	214b      	movs	r1, #75	; 0x4b
 800232e:	2082      	movs	r0, #130	; 0x82
 8002330:	f003 fabe 	bl	80058b0 <LCD_PutStr>


		LCD_PutStr(10, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002334:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002338:	f7ff f81a 	bl	8001370 <RGB_to_BRG>
 800233c:	4603      	mov	r3, r0
 800233e:	461c      	mov	r4, r3
 8002340:	2000      	movs	r0, #0
 8002342:	f7ff f815 	bl	8001370 <RGB_to_BRG>
 8002346:	4603      	mov	r3, r0
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	9400      	str	r4, [sp, #0]
 800234c:	4b89      	ldr	r3, [pc, #548]	; (8002574 <LCD_draw_main_screen+0x344>)
 800234e:	4a8d      	ldr	r2, [pc, #564]	; (8002584 <LCD_draw_main_screen+0x354>)
 8002350:	218c      	movs	r1, #140	; 0x8c
 8002352:	200a      	movs	r0, #10
 8002354:	f003 faac 	bl	80058b0 <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 8002358:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800235c:	f7ff f808 	bl	8001370 <RGB_to_BRG>
 8002360:	4603      	mov	r3, r0
 8002362:	2205      	movs	r2, #5
 8002364:	21af      	movs	r1, #175	; 0xaf
 8002366:	2078      	movs	r0, #120	; 0x78
 8002368:	f00f ff4e 	bl	8012208 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 800236c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002370:	f7fe fffe 	bl	8001370 <RGB_to_BRG>
 8002374:	4603      	mov	r3, r0
 8002376:	2204      	movs	r2, #4
 8002378:	21af      	movs	r1, #175	; 0xaf
 800237a:	2078      	movs	r0, #120	; 0x78
 800237c:	f00f ff44 	bl	8012208 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 8002380:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002384:	f7fe fff4 	bl	8001370 <RGB_to_BRG>
 8002388:	4603      	mov	r3, r0
 800238a:	2203      	movs	r2, #3
 800238c:	21af      	movs	r1, #175	; 0xaf
 800238e:	2078      	movs	r0, #120	; 0x78
 8002390:	f00f ff3a 	bl	8012208 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002394:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002398:	f7fe ffea 	bl	8001370 <RGB_to_BRG>
 800239c:	4603      	mov	r3, r0
 800239e:	461c      	mov	r4, r3
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe ffe5 	bl	8001370 <RGB_to_BRG>
 80023a6:	4603      	mov	r3, r0
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	9400      	str	r4, [sp, #0]
 80023ac:	4b73      	ldr	r3, [pc, #460]	; (800257c <LCD_draw_main_screen+0x34c>)
 80023ae:	4a74      	ldr	r2, [pc, #464]	; (8002580 <LCD_draw_main_screen+0x350>)
 80023b0:	21a5      	movs	r1, #165	; 0xa5
 80023b2:	2082      	movs	r0, #130	; 0x82
 80023b4:	f003 fa7c 	bl	80058b0 <LCD_PutStr>

		UG_DrawFrame(4, 136, 179, 220, RGB_to_BRG(C_WHITE));
 80023b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023bc:	f7fe ffd8 	bl	8001370 <RGB_to_BRG>
 80023c0:	4603      	mov	r3, r0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	23dc      	movs	r3, #220	; 0xdc
 80023c6:	22b3      	movs	r2, #179	; 0xb3
 80023c8:	2188      	movs	r1, #136	; 0x88
 80023ca:	2004      	movs	r0, #4
 80023cc:	f00f fed4 	bl	8012178 <UG_DrawFrame>
		UG_DrawFrame(3, 135, 180, 221, RGB_to_BRG(C_WHITE));
 80023d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023d4:	f7fe ffcc 	bl	8001370 <RGB_to_BRG>
 80023d8:	4603      	mov	r3, r0
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	23dd      	movs	r3, #221	; 0xdd
 80023de:	22b4      	movs	r2, #180	; 0xb4
 80023e0:	2187      	movs	r1, #135	; 0x87
 80023e2:	2003      	movs	r0, #3
 80023e4:	f00f fec8 	bl	8012178 <UG_DrawFrame>

		LCD_PutStr(2, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80023e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023ec:	f7fe ffc0 	bl	8001370 <RGB_to_BRG>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461c      	mov	r4, r3
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7fe ffbb 	bl	8001370 <RGB_to_BRG>
 80023fa:	4603      	mov	r3, r0
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	9400      	str	r4, [sp, #0]
 8002400:	4b61      	ldr	r3, [pc, #388]	; (8002588 <LCD_draw_main_screen+0x358>)
 8002402:	4a62      	ldr	r2, [pc, #392]	; (800258c <LCD_draw_main_screen+0x35c>)
 8002404:	21eb      	movs	r1, #235	; 0xeb
 8002406:	2002      	movs	r0, #2
 8002408:	f003 fa52 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(2, 255, "Input voltage:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800240c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002410:	f7fe ffae 	bl	8001370 <RGB_to_BRG>
 8002414:	4603      	mov	r3, r0
 8002416:	461c      	mov	r4, r3
 8002418:	2000      	movs	r0, #0
 800241a:	f7fe ffa9 	bl	8001370 <RGB_to_BRG>
 800241e:	4603      	mov	r3, r0
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	9400      	str	r4, [sp, #0]
 8002424:	4b58      	ldr	r3, [pc, #352]	; (8002588 <LCD_draw_main_screen+0x358>)
 8002426:	4a5a      	ldr	r2, [pc, #360]	; (8002590 <LCD_draw_main_screen+0x360>)
 8002428:	21ff      	movs	r1, #255	; 0xff
 800242a:	2002      	movs	r0, #2
 800242c:	f003 fa40 	bl	80058b0 <LCD_PutStr>
		LCD_PutStr(2, 275, "MCU temp:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002430:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002434:	f7fe ff9c 	bl	8001370 <RGB_to_BRG>
 8002438:	4603      	mov	r3, r0
 800243a:	461c      	mov	r4, r3
 800243c:	2000      	movs	r0, #0
 800243e:	f7fe ff97 	bl	8001370 <RGB_to_BRG>
 8002442:	4603      	mov	r3, r0
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	9400      	str	r4, [sp, #0]
 8002448:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <LCD_draw_main_screen+0x358>)
 800244a:	4a52      	ldr	r2, [pc, #328]	; (8002594 <LCD_draw_main_screen+0x364>)
 800244c:	f240 1113 	movw	r1, #275	; 0x113
 8002450:	2002      	movs	r0, #2
 8002452:	f003 fa2d 	bl	80058b0 <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002456:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 800245a:	f7fe ff89 	bl	8001370 <RGB_to_BRG>
 800245e:	4603      	mov	r3, r0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002466:	22f0      	movs	r2, #240	; 0xf0
 8002468:	f44f 7194 	mov.w	r1, #296	; 0x128
 800246c:	2002      	movs	r0, #2
 800246e:	f00f ffb1 	bl	80123d4 <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002472:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002476:	f7fe ff7b 	bl	8001370 <RGB_to_BRG>
 800247a:	4603      	mov	r3, r0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f240 1329 	movw	r3, #297	; 0x129
 8002482:	22f0      	movs	r2, #240	; 0xf0
 8002484:	f240 1129 	movw	r1, #297	; 0x129
 8002488:	2002      	movs	r0, #2
 800248a:	f00f ffa3 	bl	80123d4 <UG_DrawLine>


		LCD_PutStr(2, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 800248e:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002492:	f7fe ff6d 	bl	8001370 <RGB_to_BRG>
 8002496:	4603      	mov	r3, r0
 8002498:	461c      	mov	r4, r3
 800249a:	2000      	movs	r0, #0
 800249c:	f7fe ff68 	bl	8001370 <RGB_to_BRG>
 80024a0:	4603      	mov	r3, r0
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	9400      	str	r4, [sp, #0]
 80024a6:	4b33      	ldr	r3, [pc, #204]	; (8002574 <LCD_draw_main_screen+0x344>)
 80024a8:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <LCD_draw_main_screen+0x368>)
 80024aa:	f240 112d 	movw	r1, #301	; 0x12d
 80024ae:	2002      	movs	r0, #2
 80024b0:	f003 f9fe 	bl	80058b0 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 80024b4:	2228      	movs	r2, #40	; 0x28
 80024b6:	2100      	movs	r1, #0
 80024b8:	4838      	ldr	r0, [pc, #224]	; (800259c <LCD_draw_main_screen+0x36c>)
 80024ba:	f014 fad2 	bl	8016a62 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <LCD_draw_main_screen+0x370>)
 80024c0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80024c4:	4937      	ldr	r1, [pc, #220]	; (80025a4 <LCD_draw_main_screen+0x374>)
 80024c6:	4835      	ldr	r0, [pc, #212]	; (800259c <LCD_draw_main_screen+0x36c>)
 80024c8:	f014 fa68 	bl	801699c <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 80024cc:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80024d0:	f7fe ff4e 	bl	8001370 <RGB_to_BRG>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461c      	mov	r4, r3
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe ff49 	bl	8001370 <RGB_to_BRG>
 80024de:	4603      	mov	r3, r0
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	9400      	str	r4, [sp, #0]
 80024e4:	4b23      	ldr	r3, [pc, #140]	; (8002574 <LCD_draw_main_screen+0x344>)
 80024e6:	4a2d      	ldr	r2, [pc, #180]	; (800259c <LCD_draw_main_screen+0x36c>)
 80024e8:	f240 112d 	movw	r1, #301	; 0x12d
 80024ec:	2082      	movs	r0, #130	; 0x82
 80024ee:	f003 f9df 	bl	80058b0 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 80024f2:	2228      	movs	r2, #40	; 0x28
 80024f4:	2100      	movs	r1, #0
 80024f6:	4829      	ldr	r0, [pc, #164]	; (800259c <LCD_draw_main_screen+0x36c>)
 80024f8:	f014 fab3 	bl	8016a62 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <LCD_draw_main_screen+0x370>)
 80024fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002502:	4928      	ldr	r1, [pc, #160]	; (80025a4 <LCD_draw_main_screen+0x374>)
 8002504:	4825      	ldr	r0, [pc, #148]	; (800259c <LCD_draw_main_screen+0x36c>)
 8002506:	f014 fa49 	bl	801699c <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 800250a:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 800250e:	f7fe ff2f 	bl	8001370 <RGB_to_BRG>
 8002512:	4603      	mov	r3, r0
 8002514:	461c      	mov	r4, r3
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe ff2a 	bl	8001370 <RGB_to_BRG>
 800251c:	4603      	mov	r3, r0
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	9400      	str	r4, [sp, #0]
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <LCD_draw_main_screen+0x344>)
 8002524:	4a1d      	ldr	r2, [pc, #116]	; (800259c <LCD_draw_main_screen+0x36c>)
 8002526:	f240 112d 	movw	r1, #301	; 0x12d
 800252a:	20be      	movs	r0, #190	; 0xbe
 800252c:	f003 f9c0 	bl	80058b0 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 8002530:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002534:	f7fe ff1c 	bl	8001370 <RGB_to_BRG>
 8002538:	4603      	mov	r3, r0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	f240 1321 	movw	r3, #289	; 0x121
 8002540:	22e8      	movs	r2, #232	; 0xe8
 8002542:	2135      	movs	r1, #53	; 0x35
 8002544:	20d0      	movs	r0, #208	; 0xd0
 8002546:	f00f fe17 	bl	8012178 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 800254a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800254e:	f7fe ff0f 	bl	8001370 <RGB_to_BRG>
 8002552:	4603      	mov	r3, r0
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f44f 7390 	mov.w	r3, #288	; 0x120
 800255a:	22e7      	movs	r2, #231	; 0xe7
 800255c:	2136      	movs	r1, #54	; 0x36
 800255e:	20d1      	movs	r0, #209	; 0xd1
 8002560:	f00f fe0a 	bl	8012178 <UG_DrawFrame>
}
 8002564:	bf00      	nop
 8002566:	3704      	adds	r7, #4
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	08019efc 	.word	0x08019efc
 8002570:	08018ffc 	.word	0x08018ffc
 8002574:	0801a130 	.word	0x0801a130
 8002578:	08019008 	.word	0x08019008
 800257c:	0801afc8 	.word	0x0801afc8
 8002580:	08019014 	.word	0x08019014
 8002584:	08019018 	.word	0x08019018
 8002588:	08019160 	.word	0x08019160
 800258c:	08019024 	.word	0x08019024
 8002590:	08019034 	.word	0x08019034
 8002594:	08019044 	.word	0x08019044
 8002598:	08019050 	.word	0x08019050
 800259c:	200005c0 	.word	0x200005c0
 80025a0:	20000608 	.word	0x20000608
 80025a4:	08018f98 	.word	0x08018f98

080025a8 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 80025a8:	b598      	push	{r3, r4, r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 80025ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ffce 	bl	8000554 <__aeabi_ui2d>
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <get_set_temperature+0x68>)
 80025ba:	ed93 7b00 	vldr	d7, [r3]
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <get_set_temperature+0x6c>)
 80025c0:	ed93 6b00 	vldr	d6, [r3]
 80025c4:	eeb0 2a46 	vmov.f32	s4, s12
 80025c8:	eef0 2a66 	vmov.f32	s5, s13
 80025cc:	eeb0 1a47 	vmov.f32	s2, s14
 80025d0:	eef0 1a67 	vmov.f32	s3, s15
 80025d4:	ec41 0b10 	vmov	d0, r0, r1
 80025d8:	f7fe fe8c 	bl	80012f4 <clamp>
 80025dc:	ec53 2b10 	vmov	r2, r3, d0
 80025e0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7fe fb06 	bl	8000bf8 <__aeabi_d2uiz>
 80025ec:	4603      	mov	r3, r0
 80025ee:	6263      	str	r3, [r4, #36]	; 0x24
	sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 80025f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ffb9 	bl	8000574 <__aeabi_i2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4904      	ldr	r1, [pc, #16]	; (8002618 <get_set_temperature+0x70>)
 8002608:	e9c1 2300 	strd	r2, r3, [r1]
}
 800260c:	bf00      	nop
 800260e:	bd98      	pop	{r3, r4, r7, pc}
 8002610:	20000018 	.word	0x20000018
 8002614:	20000020 	.word	0x20000020
 8002618:	20000028 	.word	0x20000028

0800261c <beep>:

/* Beep the buzzer */
void beep(){
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <beep+0x30>)
 8002622:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <beep+0x34>)
 800262c:	f7fe fa74 	bl	8000b18 <__aeabi_dcmpeq>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d100      	bne.n	8002638 <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 8002636:	e006      	b.n	8002646 <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8002638:	2104      	movs	r1, #4
 800263a:	4806      	ldr	r0, [pc, #24]	; (8002654 <beep+0x38>)
 800263c:	f00a fdfe 	bl	800d23c <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 8002640:	4805      	ldr	r0, [pc, #20]	; (8002658 <beep+0x3c>)
 8002642:	f00a fd0b 	bl	800d05c <HAL_TIM_Base_Start_IT>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000608 	.word	0x20000608
 8002650:	3ff00000 	.word	0x3ff00000
 8002654:	200019ac 	.word	0x200019ac
 8002658:	20001adc 	.word	0x20001adc
 800265c:	00000000 	.word	0x00000000

08002660 <check_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void check_emergency_shutdown(){
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8002664:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <check_emergency_shutdown+0xb8>)
 8002666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <check_emergency_shutdown+0x20>
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <check_emergency_shutdown+0xbc>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8002676:	f003 fa29 	bl	8005acc <HAL_GetTick>
 800267a:	4603      	mov	r3, r0
 800267c:	4a28      	ldr	r2, [pc, #160]	; (8002720 <check_emergency_shutdown+0xc0>)
 800267e:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <check_emergency_shutdown+0xb8>)
 8002682:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	f7fe fa43 	bl	8000b18 <__aeabi_dcmpeq>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d024      	beq.n	80026e2 <check_emergency_shutdown+0x82>
 8002698:	f003 fa18 	bl	8005acc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <check_emergency_shutdown+0xc0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff55 	bl	8000554 <__aeabi_ui2d>
 80026aa:	4604      	mov	r4, r0
 80026ac:	460d      	mov	r5, r1
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <check_emergency_shutdown+0xc4>)
 80026b0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80026b4:	a316      	add	r3, pc, #88	; (adr r3, 8002710 <check_emergency_shutdown+0xb0>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	f7fd ffc5 	bl	8000648 <__aeabi_dmul>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4620      	mov	r0, r4
 80026c4:	4629      	mov	r1, r5
 80026c6:	f7fe fa45 	bl	8000b54 <__aeabi_dcmpge>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <check_emergency_shutdown+0x82>
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <check_emergency_shutdown+0xbc>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <check_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 80026d8:	2003      	movs	r0, #3
 80026da:	f7fe fe5f 	bl	800139c <change_state>
		beep();
 80026de:	f7ff ff9d 	bl	800261c <beep>
	}

	/* Function to set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <check_emergency_shutdown+0xb8>)
 80026e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <check_emergency_shutdown+0xc8>)
 80026ee:	f7fe fa3b 	bl	8000b68 <__aeabi_dcmpgt>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d100      	bne.n	80026fa <check_emergency_shutdown+0x9a>
		change_state(EMERGENCY_SLEEP);
		beep();
	}
}
 80026f8:	e008      	b.n	800270c <check_emergency_shutdown+0xac>
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <check_emergency_shutdown+0xbc>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d104      	bne.n	800270c <check_emergency_shutdown+0xac>
		change_state(EMERGENCY_SLEEP);
 8002702:	2003      	movs	r0, #3
 8002704:	f7fe fe4a 	bl	800139c <change_state>
		beep();
 8002708:	f7ff ff88 	bl	800261c <beep>
}
 800270c:	bf00      	nop
 800270e:	bdb0      	pop	{r4, r5, r7, pc}
 8002710:	00000000 	.word	0x00000000
 8002714:	40ed4c00 	.word	0x40ed4c00
 8002718:	20000028 	.word	0x20000028
 800271c:	20000015 	.word	0x20000015
 8002720:	20000594 	.word	0x20000594
 8002724:	20000608 	.word	0x20000608
 8002728:	407e0000 	.word	0x407e0000

0800272c <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 800272c:	b598      	push	{r3, r4, r7, lr}
 800272e:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <handle_button_status+0x98>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d11e      	bne.n	8002776 <handle_button_status+0x4a>
		SW_1_pressed = 0;
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <handle_button_status+0x98>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <handle_button_status+0x9c>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <handle_button_status+0x22>
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <handle_button_status+0x9c>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d103      	bne.n	8002756 <handle_button_status+0x2a>
			change_state(HALTED);
 800274e:	2004      	movs	r0, #4
 8002750:	f7fe fe24 	bl	800139c <change_state>
 8002754:	e00a      	b.n	800276c <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <handle_button_status+0x9c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b04      	cmp	r3, #4
 800275c:	d003      	beq.n	8002766 <handle_button_status+0x3a>
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <handle_button_status+0x9c>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d102      	bne.n	800276c <handle_button_status+0x40>
			change_state(RUN);
 8002766:	2000      	movs	r0, #0
 8002768:	f7fe fe18 	bl	800139c <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 800276c:	f003 f9ae 	bl	8005acc <HAL_GetTick>
 8002770:	4603      	mov	r3, r0
 8002772:	4a16      	ldr	r2, [pc, #88]	; (80027cc <handle_button_status+0xa0>)
 8002774:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <handle_button_status+0xa4>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10d      	bne.n	800279a <handle_button_status+0x6e>
		SW_2_pressed = 0;
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <handle_button_status+0xa4>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <handle_button_status+0xa8>)
 8002786:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800278a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe fa31 	bl	8000bf8 <__aeabi_d2uiz>
 8002796:	4603      	mov	r3, r0
 8002798:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <handle_button_status+0xac>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d10d      	bne.n	80027be <handle_button_status+0x92>
		SW_3_pressed = 0;
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <handle_button_status+0xac>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <handle_button_status+0xa8>)
 80027aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027ae:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fe fa1f 	bl	8000bf8 <__aeabi_d2uiz>
 80027ba:	4603      	mov	r3, r0
 80027bc:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 80027be:	bf00      	nop
 80027c0:	bd98      	pop	{r3, r4, r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200005a0 	.word	0x200005a0
 80027c8:	20000015 	.word	0x20000015
 80027cc:	20000590 	.word	0x20000590
 80027d0:	200005a1 	.word	0x200005a1
 80027d4:	20000608 	.word	0x20000608
 80027d8:	200005a2 	.word	0x200005a2
 80027dc:	00000000 	.word	0x00000000

080027e0 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 80027e6:	2140      	movs	r1, #64	; 0x40
 80027e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ec:	f007 f84a 	bl	8009884 <HAL_GPIO_ReadPin>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <get_stand_status+0x1c>
		stand_status = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	71fb      	strb	r3, [r7, #7]
 80027fa:	e001      	b.n	8002800 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4937      	ldr	r1, [pc, #220]	; (80028e0 <get_stand_status+0x100>)
 8002804:	4618      	mov	r0, r3
 8002806:	f001 facd 	bl	8003da4 <Moving_Average_Compute>
 800280a:	eeb0 7a40 	vmov.f32	s14, s0
 800280e:	eef0 7a60 	vmov.f32	s15, s1
 8002812:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <get_stand_status+0x104>)
 8002814:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand > 0.5){
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <get_stand_status+0x104>)
 800281a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <get_stand_status+0x108>)
 8002824:	f7fe f9a0 	bl	8000b68 <__aeabi_dcmpgt>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d039      	beq.n	80028a2 <get_stand_status+0xc2>
		if(active_state == RUN){
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <get_stand_status+0x10c>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d107      	bne.n	8002846 <get_stand_status+0x66>
			change_state(STANDBY);
 8002836:	2001      	movs	r0, #1
 8002838:	f7fe fdb0 	bl	800139c <change_state>
			previous_standby_millis = HAL_GetTick();
 800283c:	f003 f946 	bl	8005acc <HAL_GetTick>
 8002840:	4603      	mov	r3, r0
 8002842:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <get_stand_status+0x110>)
 8002844:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 8002846:	f003 f941 	bl	8005acc <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <get_stand_status+0x110>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe7e 	bl	8000554 <__aeabi_ui2d>
 8002858:	4604      	mov	r4, r0
 800285a:	460d      	mov	r5, r1
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <get_stand_status+0x114>)
 800285e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002862:	a31d      	add	r3, pc, #116	; (adr r3, 80028d8 <get_stand_status+0xf8>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd feee 	bl	8000648 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4620      	mov	r0, r4
 8002872:	4629      	mov	r1, r5
 8002874:	f7fe f96e 	bl	8000b54 <__aeabi_dcmpge>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <get_stand_status+0xac>
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <get_stand_status+0x10c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d102      	bne.n	800288c <get_stand_status+0xac>
			change_state(SLEEP);
 8002886:	2002      	movs	r0, #2
 8002888:	f7fe fd88 	bl	800139c <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <get_stand_status+0x10c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d003      	beq.n	800289c <get_stand_status+0xbc>
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <get_stand_status+0x10c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d102      	bne.n	80028a2 <get_stand_status+0xc2>
			change_state(SLEEP);
 800289c:	2002      	movs	r0, #2
 800289e:	f7fe fd7d 	bl	800139c <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.5){
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <get_stand_status+0x104>)
 80028a4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <get_stand_status+0x108>)
 80028ae:	f7fe f93d 	bl	8000b2c <__aeabi_dcmplt>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d100      	bne.n	80028ba <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY)){
			change_state(RUN);
		}
	}
}
 80028b8:	e00a      	b.n	80028d0 <get_stand_status+0xf0>
		if((active_state == SLEEP) || (active_state == STANDBY)){
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <get_stand_status+0x10c>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d003      	beq.n	80028ca <get_stand_status+0xea>
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <get_stand_status+0x10c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <get_stand_status+0xf0>
			change_state(RUN);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe fd66 	bl	800139c <change_state>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bdb0      	pop	{r4, r5, r7, pc}
 80028d8:	00000000 	.word	0x00000000
 80028dc:	40ed4c00 	.word	0x40ed4c00
 80028e0:	20000cbc 	.word	0x20000cbc
 80028e4:	20000028 	.word	0x20000028
 80028e8:	3fe00000 	.word	0x3fe00000
 80028ec:	20000015 	.word	0x20000015
 80028f0:	20000598 	.word	0x20000598
 80028f4:	20000608 	.word	0x20000608

080028f8 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOB, HANDLE_INP_1_Pin) == 0){
 80028fe:	2110      	movs	r1, #16
 8002900:	4837      	ldr	r0, [pc, #220]	; (80029e0 <get_handle_type+0xe8>)
 8002902:	f006 ffbf 	bl	8009884 <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <get_handle_type+0x1a>
		handle_status = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	71fb      	strb	r3, [r7, #7]
 8002910:	e001      	b.n	8002916 <get_handle_type+0x1e>
	}
	else{
		handle_status = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle_sense = Moving_Average_Compute(handle_status, &handle_sense_filterStruct); /* Moving average filter */
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	4932      	ldr	r1, [pc, #200]	; (80029e4 <get_handle_type+0xec>)
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fa42 	bl	8003da4 <Moving_Average_Compute>
 8002920:	eeb0 7a40 	vmov.f32	s14, s0
 8002924:	eef0 7a60 	vmov.f32	s15, s1
 8002928:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <get_handle_type+0xf0>)
 800292a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	/* If the handle_sense is high -> T210 handle is detected */
	if(sensor_values.handle_sense > 0.5){
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <get_handle_type+0xf0>)
 8002930:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <get_handle_type+0xf4>)
 800293a:	f7fe f915 	bl	8000b68 <__aeabi_dcmpgt>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d018      	beq.n	8002976 <get_handle_type+0x7e>
		handle = T210;
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <get_handle_type+0xf8>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <get_handle_type+0xf0>)
 800294c:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <get_handle_type+0xfc>)
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
		Kp = 10;
 8002950:	4929      	ldr	r1, [pc, #164]	; (80029f8 <get_handle_type+0x100>)
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	4b29      	ldr	r3, [pc, #164]	; (80029fc <get_handle_type+0x104>)
 8002958:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 800295c:	4928      	ldr	r1, [pc, #160]	; (8002a00 <get_handle_type+0x108>)
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <get_handle_type+0x10c>)
 8002964:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8002968:	4927      	ldr	r1, [pc, #156]	; (8002a08 <get_handle_type+0x110>)
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <get_handle_type+0x114>)
 8002970:	e9c1 2300 	strd	r2, r3, [r1]
 8002974:	e018      	b.n	80029a8 <get_handle_type+0xb0>
	}
	/* If the handle_sense is low -> T245 Handle */
	else{
		handle = T245;
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <get_handle_type+0xf8>)
 8002978:	2202      	movs	r2, #2
 800297a:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 800297c:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <get_handle_type+0xf0>)
 800297e:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <get_handle_type+0x118>)
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
		Kp = 8;
 8002982:	491d      	ldr	r1, [pc, #116]	; (80029f8 <get_handle_type+0x100>)
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <get_handle_type+0x11c>)
 800298a:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 800298e:	491c      	ldr	r1, [pc, #112]	; (8002a00 <get_handle_type+0x108>)
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <get_handle_type+0x120>)
 8002996:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 2;
 800299a:	491b      	ldr	r1, [pc, #108]	; (8002a08 <get_handle_type+0x110>)
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029a4:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <get_handle_type+0x100>)
 80029aa:	ed93 7b00 	vldr	d7, [r3]
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <get_handle_type+0x108>)
 80029b0:	ed93 6b00 	vldr	d6, [r3]
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <get_handle_type+0x110>)
 80029b6:	ed93 5b00 	vldr	d5, [r3]
 80029ba:	eeb0 2a45 	vmov.f32	s4, s10
 80029be:	eef0 2a65 	vmov.f32	s5, s11
 80029c2:	eeb0 1a46 	vmov.f32	s2, s12
 80029c6:	eef0 1a66 	vmov.f32	s3, s13
 80029ca:	eeb0 0a47 	vmov.f32	s0, s14
 80029ce:	eef0 0a67 	vmov.f32	s1, s15
 80029d2:	4812      	ldr	r0, [pc, #72]	; (8002a1c <get_handle_type+0x124>)
 80029d4:	f001 fcbf 	bl	8004356 <PID_SetTunings>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	48000400 	.word	0x48000400
 80029e4:	20000fe8 	.word	0x20000fe8
 80029e8:	20000028 	.word	0x20000028
 80029ec:	3fe00000 	.word	0x3fe00000
 80029f0:	20000580 	.word	0x20000580
 80029f4:	42700000 	.word	0x42700000
 80029f8:	200005a8 	.word	0x200005a8
 80029fc:	40240000 	.word	0x40240000
 8002a00:	200005b0 	.word	0x200005b0
 8002a04:	403e0000 	.word	0x403e0000
 8002a08:	200005b8 	.word	0x200005b8
 8002a0c:	3fd00000 	.word	0x3fd00000
 8002a10:	42f00000 	.word	0x42f00000
 8002a14:	40200000 	.word	0x40200000
 8002a18:	40080000 	.word	0x40080000
 8002a1c:	20001bc0 	.word	0x20001bc0

08002a20 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d007      	beq.n	8002a40 <HAL_GPIO_EXTI_Callback+0x20>
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_EXTI_Callback+0x20>
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3e:	d109      	bne.n	8002a54 <HAL_GPIO_EXTI_Callback+0x34>
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_GPIO_EXTI_Callback+0x34>
		HAL_TIM_Base_Start_IT(&htim7);
 8002a48:	4805      	ldr	r0, [pc, #20]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x40>)
 8002a4a:	f00a fb07 	bl	800d05c <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 8002a4e:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
    }
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000014 	.word	0x20000014
 8002a60:	200019f8 	.word	0x200019f8

08002a64 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7f1b      	ldrb	r3, [r3, #28]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d003      	beq.n	8002a7c <HAL_TIM_IC_CaptureCallback+0x18>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7f1b      	ldrb	r3, [r3, #28]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 8002a7c:	f7ff fdce 	bl	800261c <beep>
	}
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <set_heater_duty+0x48>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.2);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd69 	bl	8000574 <__aeabi_i2d>
 8002aa2:	a309      	add	r3, pc, #36	; (adr r3, 8002ac8 <set_heater_duty+0x40>)
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f7fd fdce 	bl	8000648 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <set_heater_duty+0x48>)
 8002ab2:	680c      	ldr	r4, [r1, #0]
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe f89e 	bl	8000bf8 <__aeabi_d2uiz>
 8002abc:	4603      	mov	r3, r0
 8002abe:	6363      	str	r3, [r4, #52]	; 0x34

}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd90      	pop	{r4, r7, pc}
 8002ac8:	9999999a 	.word	0x9999999a
 8002acc:	3fc99999 	.word	0x3fc99999
 8002ad0:	20001914 	.word	0x20001914
 8002ad4:	00000000 	.word	0x00000000

08002ad8 <heater_on>:

/* Disable the duty cycle of timer controlling the heater */
void heater_on(){
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8002adc:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <heater_on+0xa0>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd59 	bl	8000598 <__aeabi_f2d>
 8002ae6:	a31e      	add	r3, pc, #120	; (adr r3, 8002b60 <heater_on+0x88>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fdac 	bl	8000648 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <heater_on+0xa0>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd4b 	bl	8000598 <__aeabi_f2d>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4620      	mov	r0, r4
 8002b08:	4629      	mov	r1, r5
 8002b0a:	f7fd fec7 	bl	800089c <__aeabi_ddiv>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <heater_on+0xa4>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fd94 	bl	8000648 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4916      	ldr	r1, [pc, #88]	; (8002b80 <heater_on+0xa8>)
 8002b26:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <heater_on+0xa8>)
 8002b2c:	ed93 7b00 	vldr	d7, [r3]
 8002b30:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8002b68 <heater_on+0x90>
 8002b34:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002b70 <heater_on+0x98>
 8002b38:	eeb0 0a47 	vmov.f32	s0, s14
 8002b3c:	eef0 0a67 	vmov.f32	s1, s15
 8002b40:	f7fe fbd8 	bl	80012f4 <clamp>
 8002b44:	ec53 2b10 	vmov	r2, r3, d0
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f7fe f854 	bl	8000bf8 <__aeabi_d2uiz>
 8002b50:	4603      	mov	r3, r0
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff97 	bl	8002a88 <set_heater_duty>
}
 8002b5a:	bf00      	nop
 8002b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	a5e353f8 	.word	0xa5e353f8
 8002b64:	3fc0c49b 	.word	0x3fc0c49b
 8002b68:	00000000 	.word	0x00000000
 8002b6c:	407f4000 	.word	0x407f4000
	...
 8002b78:	20000028 	.word	0x20000028
 8002b7c:	20000648 	.word	0x20000648
 8002b80:	20000658 	.word	0x20000658

08002b84 <heater_off>:

/* Disable the duty cycle of timer controlling the heater */
void heater_off(){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
	set_heater_duty(0);//clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7ff ff7d 	bl	8002a88 <set_heater_duty>
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_TIM_PWM_PulseFinishedCallback>:


// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	if((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && (current_measurement_requested)){
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d115      	bne.n	8002bd0 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7f1b      	ldrb	r3, [r3, #28]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d111      	bne.n	8002bd0 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
		current_measurement_requested = 0;
 8002bb4:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, USR_3_Pin, GPIO_PIN_SET);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4813      	ldr	r0, [pc, #76]	; (8002c14 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8002bc6:	f006 fe75 	bl	80098b4 <HAL_GPIO_WritePin>
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002bca:	4813      	ldr	r0, [pc, #76]	; (8002c18 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002bcc:	f004 fdfc 	bl	80077c8 <HAL_ADCEx_InjectedStart_IT>
	}

  // Check which version of the timer triggered this callback and toggle LED
  if ((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) && (thermocouple_measurement_requested)){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d112      	bne.n	8002bfe <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7f1b      	ldrb	r3, [r3, #28]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d10e      	bne.n	8002bfe <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
	  thermocouple_measurement_done = 0;
 8002be8:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
	  thermocouple_measurement_requested = 0;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
	  heater_off();
 8002bf4:	f7ff ffc6 	bl	8002b84 <heater_off>
	  HAL_TIM_Base_Start_IT(&htim16);
 8002bf8:	480a      	ldr	r0, [pc, #40]	; (8002c24 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8002bfa:	f00a fa2f 	bl	800d05c <HAL_TIM_Base_Start_IT>

  }
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20001914 	.word	0x20001914
 8002c0c:	20000660 	.word	0x20000660
 8002c10:	2000018c 	.word	0x2000018c
 8002c14:	48000400 	.word	0x48000400
 8002c18:	20001640 	.word	0x20001640
 8002c1c:	20000661 	.word	0x20000661
 8002c20:	2000018d 	.word	0x2000018d
 8002c24:	20001a90 	.word	0x20001a90

08002c28 <HAL_TIM_PeriodElapsedCallback>:

// Callback:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	/* Button Debounce timer (50 ms)*/
	if (htim == &htim16){
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a30      	ldr	r2, [pc, #192]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10a      	bne.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_TIM_Base_Stop_IT(&htim16);
 8002c38:	482e      	ldr	r0, [pc, #184]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c3a:	f00a fa79 	bl	800d130 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOB, USR_2_Pin, GPIO_PIN_SET);
 8002c3e:	2201      	movs	r2, #1
 8002c40:	2101      	movs	r1, #1
 8002c42:	482d      	ldr	r0, [pc, #180]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002c44:	f006 fe36 	bl	80098b4 <HAL_GPIO_WritePin>
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002c48:	482c      	ldr	r0, [pc, #176]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002c4a:	f004 fdbd 	bl	80077c8 <HAL_ADCEx_InjectedStart_IT>
	}

	/* Beep length timer */
	if (htim == &htim17){
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2b      	ldr	r2, [pc, #172]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d106      	bne.n	8002c64 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_TIM_Base_Stop_IT(&htim17);
 8002c56:	482a      	ldr	r0, [pc, #168]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002c58:	f00a fa6a 	bl	800d130 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	4829      	ldr	r0, [pc, #164]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002c60:	f00a fc38 	bl	800d4d4 <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim7 && SW_ready == 0)){
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a28      	ldr	r2, [pc, #160]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d13e      	bne.n	8002cea <HAL_TIM_PeriodElapsedCallback+0xc2>
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d13a      	bne.n	8002cea <HAL_TIM_PeriodElapsedCallback+0xc2>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8002c74:	2120      	movs	r1, #32
 8002c76:	4820      	ldr	r0, [pc, #128]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002c78:	f006 fe04 	bl	8009884 <HAL_GPIO_ReadPin>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d10b      	bne.n	8002c9a <HAL_TIM_PeriodElapsedCallback+0x72>
			SW_ready = 1;
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
			beep();
 8002c8e:	f7ff fcc5 	bl	800261c <beep>
			HAL_TIM_Base_Stop_IT(&htim7);
 8002c92:	481d      	ldr	r0, [pc, #116]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002c94:	f00a fa4c 	bl	800d130 <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim7);
		}
	}
}
 8002c98:	e027      	b.n	8002cea <HAL_TIM_PeriodElapsedCallback+0xc2>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8002c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca2:	f006 fdef 	bl	8009884 <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d10b      	bne.n	8002cc4 <HAL_TIM_PeriodElapsedCallback+0x9c>
			SW_ready = 1;
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8002cb2:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
			beep();
 8002cb8:	f7ff fcb0 	bl	800261c <beep>
			HAL_TIM_Base_Stop_IT(&htim7);
 8002cbc:	4812      	ldr	r0, [pc, #72]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002cbe:	f00a fa37 	bl	800d130 <HAL_TIM_Base_Stop_IT>
}
 8002cc2:	e012      	b.n	8002cea <HAL_TIM_PeriodElapsedCallback+0xc2>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8002cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cc8:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002cca:	f006 fddb 	bl	8009884 <HAL_GPIO_ReadPin>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10a      	bne.n	8002cea <HAL_TIM_PeriodElapsedCallback+0xc2>
			SW_ready = 1;
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
			beep();
 8002ce0:	f7ff fc9c 	bl	800261c <beep>
			HAL_TIM_Base_Stop_IT(&htim7);
 8002ce4:	4808      	ldr	r0, [pc, #32]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002ce6:	f00a fa23 	bl	800d130 <HAL_TIM_Base_Stop_IT>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20001a90 	.word	0x20001a90
 8002cf8:	48000400 	.word	0x48000400
 8002cfc:	20001640 	.word	0x20001640
 8002d00:	20001adc 	.word	0x20001adc
 8002d04:	200019ac 	.word	0x200019ac
 8002d08:	200019f8 	.word	0x200019f8
 8002d0c:	20000014 	.word	0x20000014
 8002d10:	200005a0 	.word	0x200005a0
 8002d14:	200005a1 	.word	0x200005a1
 8002d18:	200005a2 	.word	0x200005a2

08002d1c <HAL_ADCEx_InjectedConvCpltCallback>:




void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	if(thermocouple_measurement_done == 0){
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_ADCEx_InjectedConvCpltCallback+0x78>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d115      	bne.n	8002d58 <HAL_ADCEx_InjectedConvCpltCallback+0x3c>
		thermocouple_temperature_raw = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2); // Read The Injected Channel Result
 8002d2c:	f240 110f 	movw	r1, #271	; 0x10f
 8002d30:	4819      	ldr	r0, [pc, #100]	; (8002d98 <HAL_ADCEx_InjectedConvCpltCallback+0x7c>)
 8002d32:	f004 fe2f 	bl	8007994 <HAL_ADCEx_InjectedGetValue>
 8002d36:	ee07 0a90 	vmov	s15, r0
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_ADCEx_InjectedConvCpltCallback+0x80>)
 8002d40:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, USR_2_Pin, GPIO_PIN_RESET);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2101      	movs	r1, #1
 8002d48:	4815      	ldr	r0, [pc, #84]	; (8002da0 <HAL_ADCEx_InjectedConvCpltCallback+0x84>)
 8002d4a:	f006 fdb3 	bl	80098b4 <HAL_GPIO_WritePin>
		heater_on();
 8002d4e:	f7ff fec3 	bl	8002ad8 <heater_on>
		thermocouple_measurement_done = 1;
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_ADCEx_InjectedConvCpltCallback+0x78>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
	}

	if(current_measurement_done == 0){
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d114      	bne.n	8002d8a <HAL_ADCEx_InjectedConvCpltCallback+0x6e>
		current_raw = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1); // Read The Injected Channel Result
 8002d60:	2109      	movs	r1, #9
 8002d62:	480d      	ldr	r0, [pc, #52]	; (8002d98 <HAL_ADCEx_InjectedConvCpltCallback+0x7c>)
 8002d64:	f004 fe16 	bl	8007994 <HAL_ADCEx_InjectedGetValue>
 8002d68:	ee07 0a90 	vmov	s15, r0
 8002d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d70:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 8002d72:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, USR_3_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4809      	ldr	r0, [pc, #36]	; (8002da0 <HAL_ADCEx_InjectedConvCpltCallback+0x84>)
 8002d7c:	f006 fd9a 	bl	80098b4 <HAL_GPIO_WritePin>
		heater_on();
 8002d80:	f7ff feaa 	bl	8002ad8 <heater_on>
		current_measurement_done = 1;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
	}
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000018d 	.word	0x2000018d
 8002d98:	20001640 	.word	0x20001640
 8002d9c:	20000600 	.word	0x20000600
 8002da0:	48000400 	.word	0x48000400
 8002da4:	2000018c 	.word	0x2000018c
 8002da8:	20000604 	.word	0x20000604
 8002dac:	00000000 	.word	0x00000000

08002db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db4:	ed2d 8b06 	vpush	{d8-d10}
 8002db8:	b090      	sub	sp, #64	; 0x40
 8002dba:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dbc:	f002 fe22 	bl	8005a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dc0:	f000 fa2c 	bl	800321c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dc4:	f000 ff02 	bl	8003bcc <MX_GPIO_Init>
  MX_DMA_Init();
 8002dc8:	f000 fec6 	bl	8003b58 <MX_DMA_Init>
  MX_ADC1_Init();
 8002dcc:	f000 fa74 	bl	80032b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002dd0:	f000 fb4a 	bl	8003468 <MX_ADC2_Init>
  MX_CRC_Init();
 8002dd4:	f000 fbae 	bl	8003534 <MX_CRC_Init>
  MX_TIM1_Init();
 8002dd8:	f000 fc4c 	bl	8003674 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002ddc:	f000 fcea 	bl	80037b4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002de0:	f000 fd3c 	bl	800385c <MX_TIM4_Init>
  MX_TIM16_Init();
 8002de4:	f000 fe0c 	bl	8003a00 <MX_TIM16_Init>
  MX_SPI2_Init();
 8002de8:	f000 fc06 	bl	80035f8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8002dec:	f000 fbc4 	bl	8003578 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8002df0:	f012 fba2 	bl	8015538 <MX_USB_Device_Init>
  MX_TIM17_Init();
 8002df4:	f000 fe34 	bl	8003a60 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002df8:	f000 fe62 	bl	8003ac0 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8002dfc:	f000 fd88 	bl	8003910 <MX_TIM7_Init>
  MX_TIM8_Init();
 8002e00:	f000 fdbe 	bl	8003980 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

	 set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7ff fe3f 	bl	8002a88 <set_heater_duty>
	 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8002e0a:	2108      	movs	r1, #8
 8002e0c:	4886      	ldr	r0, [pc, #536]	; (8003028 <main+0x278>)
 8002e0e:	f00b fc19 	bl	800e644 <HAL_TIMEx_PWMN_Start_IT>

	 HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8002e12:	213c      	movs	r1, #60	; 0x3c
 8002e14:	4885      	ldr	r0, [pc, #532]	; (800302c <main+0x27c>)
 8002e16:	f00a fd37 	bl	800d888 <HAL_TIM_Encoder_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4882      	ldr	r0, [pc, #520]	; (8003028 <main+0x278>)
 8002e1e:	f00a fa0d 	bl	800d23c <HAL_TIM_PWM_Start_IT>
	 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 8002e22:	4b83      	ldr	r3, [pc, #524]	; (8003030 <main+0x280>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2205      	movs	r2, #5
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38


	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002e2a:	217f      	movs	r1, #127	; 0x7f
 8002e2c:	4881      	ldr	r0, [pc, #516]	; (8003034 <main+0x284>)
 8002e2e:	f004 fc69 	bl	8007704 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2_BUF_VIN, (uint32_t)ADC2_BUF_VIN_LEN);	//Start ADC DMA mode
 8002e32:	220a      	movs	r2, #10
 8002e34:	4980      	ldr	r1, [pc, #512]	; (8003038 <main+0x288>)
 8002e36:	487f      	ldr	r0, [pc, #508]	; (8003034 <main+0x284>)
 8002e38:	f003 fa60 	bl	80062fc <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002e3c:	217f      	movs	r1, #127	; 0x7f
 8002e3e:	487f      	ldr	r0, [pc, #508]	; (800303c <main+0x28c>)
 8002e40:	f004 fc60 	bl	8007704 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002e44:	487d      	ldr	r0, [pc, #500]	; (800303c <main+0x28c>)
 8002e46:	f004 fcbf 	bl	80077c8 <HAL_ADCEx_InjectedStart_IT>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,40);
 8002e4a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8003040 <main+0x290>
 8002e4e:	487d      	ldr	r0, [pc, #500]	; (8003044 <main+0x294>)
 8002e50:	f000 ff77 	bl	8003d42 <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,50);
 8002e54:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8003048 <main+0x298>
 8002e58:	487c      	ldr	r0, [pc, #496]	; (800304c <main+0x29c>)
 8002e5a:	f000 ff72 	bl	8003d42 <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 8002e5e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002e62:	487b      	ldr	r0, [pc, #492]	; (8003050 <main+0x2a0>)
 8002e64:	f000 ff6d 	bl	8003d42 <Moving_Average_Init>
	Moving_Average_Init(&handle_sense_filterStruct,20);
 8002e68:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002e6c:	4879      	ldr	r0, [pc, #484]	; (8003054 <main+0x2a4>)
 8002e6e:	f000 ff68 	bl	8003d42 <Moving_Average_Init>
	Moving_Average_Init(&enc_button_sense_filterStruct,5);
 8002e72:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002e76:	4878      	ldr	r0, [pc, #480]	; (8003058 <main+0x2a8>)
 8002e78:	f000 ff63 	bl	8003d42 <Moving_Average_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 8002e7c:	20c8      	movs	r0, #200	; 0xc8
 8002e7e:	f002 fe31 	bl	8005ae4 <HAL_Delay>
	LCD_init();
 8002e82:	f002 fd53 	bl	800592c <LCD_init>

	/* Init and fill filter structures with initial values */
	for (int i = 0; i<200;i++){
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	e00e      	b.n	8002eaa <main+0xfa>
		get_bus_voltage();
 8002e8c:	f7fe fad8 	bl	8001440 <get_bus_voltage>
		get_thermocouple_temperature();
 8002e90:	f7fe fb06 	bl	80014a0 <get_thermocouple_temperature>
		get_handle_type();
 8002e94:	f7ff fd30 	bl	80028f8 <get_handle_type>
		get_stand_status();
 8002e98:	f7ff fca2 	bl	80027e0 <get_stand_status>
		handle_button_status();
 8002e9c:	f7ff fc46 	bl	800272c <handle_button_status>
		get_mcu_temp();
 8002ea0:	f7fe fa58 	bl	8001354 <get_mcu_temp>
	for (int i = 0; i<200;i++){
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2bc7      	cmp	r3, #199	; 0xc7
 8002eae:	dded      	ble.n	8002e8c <main+0xdc>
	}

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8002eb0:	f7fe f89e 	bl	8000ff0 <FlashCheckCRC>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f083 0301 	eor.w	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <main+0x116>
  	    	FlashWrite(&default_flash_values);
 8002ec0:	4866      	ldr	r0, [pc, #408]	; (800305c <main+0x2ac>)
 8002ec2:	f7fe f943 	bl	800114c <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 8002ec6:	4866      	ldr	r0, [pc, #408]	; (8003060 <main+0x2b0>)
 8002ec8:	f7fe f91c 	bl	8001104 <FlashRead>

  		/* Set startup state */
  	    change_state(HALTED);
 8002ecc:	2004      	movs	r0, #4
 8002ece:	f7fe fa65 	bl	800139c <change_state>

  		settings_menue();
 8002ed2:	f7fe fbd9 	bl	8001688 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8002ed6:	4b62      	ldr	r3, [pc, #392]	; (8003060 <main+0x2b0>)
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f7fd fe88 	bl	8000bf8 <__aeabi_d2uiz>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8002eec:	4b5d      	ldr	r3, [pc, #372]	; (8003064 <main+0x2b4>)
 8002eee:	ed93 7b00 	vldr	d7, [r3]
 8002ef2:	4b5d      	ldr	r3, [pc, #372]	; (8003068 <main+0x2b8>)
 8002ef4:	ed93 6b00 	vldr	d6, [r3]
 8002ef8:	4b5c      	ldr	r3, [pc, #368]	; (800306c <main+0x2bc>)
 8002efa:	ed93 5b00 	vldr	d5, [r3]
 8002efe:	2300      	movs	r3, #0
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2301      	movs	r3, #1
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	eeb0 2a45 	vmov.f32	s4, s10
 8002f0a:	eef0 2a65 	vmov.f32	s5, s11
 8002f0e:	eeb0 1a46 	vmov.f32	s2, s12
 8002f12:	eef0 1a66 	vmov.f32	s3, s13
 8002f16:	eeb0 0a47 	vmov.f32	s0, s14
 8002f1a:	eef0 0a67 	vmov.f32	s1, s15
 8002f1e:	4b54      	ldr	r3, [pc, #336]	; (8003070 <main+0x2c0>)
 8002f20:	4a54      	ldr	r2, [pc, #336]	; (8003074 <main+0x2c4>)
 8002f22:	4955      	ldr	r1, [pc, #340]	; (8003078 <main+0x2c8>)
 8002f24:	4855      	ldr	r0, [pc, #340]	; (800307c <main+0x2cc>)
 8002f26:	f000 ffd7 	bl	8003ed8 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4853      	ldr	r0, [pc, #332]	; (800307c <main+0x2cc>)
 8002f2e:	f001 f966 	bl	80041fe <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8002f32:	4b53      	ldr	r3, [pc, #332]	; (8003080 <main+0x2d0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4850      	ldr	r0, [pc, #320]	; (800307c <main+0x2cc>)
 8002f3c:	f001 fb0e 	bl	800455c <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 8002f40:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8003008 <main+0x258>
 8002f44:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8003010 <main+0x260>
 8002f48:	484c      	ldr	r0, [pc, #304]	; (800307c <main+0x2cc>)
 8002f4a:	f001 f976 	bl	800423a <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, PID_MIN_LIMIT, PID_MAX_LIMIT); 	// Set max and min I limit
 8002f4e:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8003018 <main+0x268>
 8002f52:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8003020 <main+0x270>
 8002f56:	4849      	ldr	r0, [pc, #292]	; (800307c <main+0x2cc>)
 8002f58:	f001 f9dd 	bl	8004316 <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 8002f5c:	f7ff f968 	bl	8002230 <LCD_draw_main_screen>

  		/* Start-up beep */
  		beep();
 8002f60:	f7ff fb5c 	bl	800261c <beep>
  		HAL_Delay(100);
 8002f64:	2064      	movs	r0, #100	; 0x64
 8002f66:	f002 fdbd 	bl	8005ae4 <HAL_Delay>
  		beep();
 8002f6a:	f7ff fb57 	bl	800261c <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update >= interval_sensor_update){
 8002f6e:	f002 fdad 	bl	8005acc <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <main+0x2d4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1ad2      	subs	r2, r2, r3
 8002f7a:	4b43      	ldr	r3, [pc, #268]	; (8003088 <main+0x2d8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d310      	bcc.n	8002fa4 <main+0x1f4>
  	  			check_emergency_shutdown();
 8002f82:	f7ff fb6d 	bl	8002660 <check_emergency_shutdown>
  				get_stand_status();
 8002f86:	f7ff fc2b 	bl	80027e0 <get_stand_status>
  				get_bus_voltage();
 8002f8a:	f7fe fa59 	bl	8001440 <get_bus_voltage>
  				get_handle_type();
 8002f8e:	f7ff fcb3 	bl	80028f8 <get_handle_type>
  				handle_button_status();
 8002f92:	f7ff fbcb 	bl	800272c <handle_button_status>
  				get_set_temperature();
 8002f96:	f7ff fb07 	bl	80025a8 <get_set_temperature>
  				previous_sensor_update = HAL_GetTick();
 8002f9a:	f002 fd97 	bl	8005acc <HAL_GetTick>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4a38      	ldr	r2, [pc, #224]	; (8003084 <main+0x2d4>)
 8002fa2:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <main+0x2dc>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d87b      	bhi.n	80030a4 <main+0x2f4>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <main+0x204>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002fe7 	.word	0x08002fe7
 8002fbc:	08002ff5 	.word	0x08002ff5
 8002fc0:	08002fc9 	.word	0x08002fc9
 8002fc4:	08003095 	.word	0x08003095
  				case EMERGENCY_SLEEP: {
  					PID_setpoint = 0;
 8002fc8:	4929      	ldr	r1, [pc, #164]	; (8003070 <main+0x2c0>)
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002fd6:	e065      	b.n	80030a4 <main+0x2f4>
  				}
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <main+0x2e0>)
 8002fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fde:	4924      	ldr	r1, [pc, #144]	; (8003070 <main+0x2c0>)
 8002fe0:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002fe4:	e05e      	b.n	80030a4 <main+0x2f4>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <main+0x2b0>)
 8002fe8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fec:	4920      	ldr	r1, [pc, #128]	; (8003070 <main+0x2c0>)
 8002fee:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002ff2:	e057      	b.n	80030a4 <main+0x2f4>
  				}
  				case SLEEP: {
  					PID_setpoint = 0;
 8002ff4:	491e      	ldr	r1, [pc, #120]	; (8003070 <main+0x2c0>)
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003002:	e04f      	b.n	80030a4 <main+0x2f4>
 8003004:	f3af 8000 	nop.w
 8003008:	00000000 	.word	0x00000000
 800300c:	407f4000 	.word	0x407f4000
	...
 800301c:	4062c000 	.word	0x4062c000
 8003020:	00000000 	.word	0x00000000
 8003024:	c062c000 	.word	0xc062c000
 8003028:	20001914 	.word	0x20001914
 800302c:	20001960 	.word	0x20001960
 8003030:	200019ac 	.word	0x200019ac
 8003034:	200016ac 	.word	0x200016ac
 8003038:	200005ec 	.word	0x200005ec
 800303c:	20001640 	.word	0x20001640
 8003040:	42200000 	.word	0x42200000
 8003044:	20000664 	.word	0x20000664
 8003048:	42480000 	.word	0x42480000
 800304c:	20000990 	.word	0x20000990
 8003050:	20000cbc 	.word	0x20000cbc
 8003054:	20000fe8 	.word	0x20000fe8
 8003058:	20001314 	.word	0x20001314
 800305c:	20000070 	.word	0x20000070
 8003060:	20000608 	.word	0x20000608
 8003064:	200005a8 	.word	0x200005a8
 8003068:	200005b0 	.word	0x200005b0
 800306c:	200005b8 	.word	0x200005b8
 8003070:	20000650 	.word	0x20000650
 8003074:	20000648 	.word	0x20000648
 8003078:	20000030 	.word	0x20000030
 800307c:	20001bc0 	.word	0x20001bc0
 8003080:	2000000c 	.word	0x2000000c
 8003084:	2000059c 	.word	0x2000059c
 8003088:	20000010 	.word	0x20000010
 800308c:	20000015 	.word	0x20000015
 8003090:	20000028 	.word	0x20000028
  				}
  				case HALTED: {
  					PID_setpoint = 0;
 8003094:	4952      	ldr	r1, [pc, #328]	; (80031e0 <main+0x430>)
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80030a2:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Calculate PID output */
  			if(HAL_GetTick() - previous_PID_update >= interval_PID_update){
 80030a4:	f002 fd12 	bl	8005acc <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b4e      	ldr	r3, [pc, #312]	; (80031e4 <main+0x434>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <main+0x438>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d30c      	bcc.n	80030d2 <main+0x322>
  				thermocouple_measurement_requested = 1;
 80030b8:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <main+0x43c>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
  				get_thermocouple_temperature();
 80030be:	f7fe f9ef 	bl	80014a0 <get_thermocouple_temperature>
  				/* Compute PID */
  				PID_Compute(&TPID);
 80030c2:	484b      	ldr	r0, [pc, #300]	; (80031f0 <main+0x440>)
 80030c4:	f000 ff54 	bl	8003f70 <PID_Compute>
  				previous_PID_update = HAL_GetTick();
 80030c8:	f002 fd00 	bl	8005acc <HAL_GetTick>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4a45      	ldr	r2, [pc, #276]	; (80031e4 <main+0x434>)
 80030d0:	6013      	str	r3, [r2, #0]
  			}

  			/* Send debug information over serial */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 80030d2:	f002 fcfb 	bl	8005acc <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b46      	ldr	r3, [pc, #280]	; (80031f4 <main+0x444>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	1ad2      	subs	r2, r2, r3
 80030de:	4b46      	ldr	r3, [pc, #280]	; (80031f8 <main+0x448>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d368      	bcc.n	80031b8 <main+0x408>
  				memset(&buffer, '\0', sizeof(buffer));
 80030e6:	2228      	movs	r2, #40	; 0x28
 80030e8:	2100      	movs	r1, #0
 80030ea:	4844      	ldr	r0, [pc, #272]	; (80031fc <main+0x44c>)
 80030ec:	f013 fcb9 	bl	8016a62 <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 80030f0:	4b43      	ldr	r3, [pc, #268]	; (8003200 <main+0x450>)
 80030f2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 80030f6:	4b42      	ldr	r3, [pc, #264]	; (8003200 <main+0x450>)
 80030f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030fc:	4b41      	ldr	r3, [pc, #260]	; (8003204 <main+0x454>)
 80030fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	4b40      	ldr	r3, [pc, #256]	; (8003208 <main+0x458>)
 8003108:	f7fd fbc8 	bl	800089c <__aeabi_ddiv>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	ec43 2b19 	vmov	d9, r2, r3
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8003114:	4836      	ldr	r0, [pc, #216]	; (80031f0 <main+0x440>)
 8003116:	f001 fa65 	bl	80045e4 <PID_GetPpart>
 800311a:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <main+0x458>)
 8003124:	f7fd fbba 	bl	800089c <__aeabi_ddiv>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8003130:	482f      	ldr	r0, [pc, #188]	; (80031f0 <main+0x440>)
 8003132:	f001 fa69 	bl	8004608 <PID_GetIpart>
 8003136:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	4b32      	ldr	r3, [pc, #200]	; (8003208 <main+0x458>)
 8003140:	f7fd fbac 	bl	800089c <__aeabi_ddiv>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 800314c:	4828      	ldr	r0, [pc, #160]	; (80031f0 <main+0x440>)
 800314e:	f001 fa6d 	bl	800462c <PID_GetDpart>
 8003152:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <main+0x458>)
 800315c:	f7fd fb9e 	bl	800089c <__aeabi_ddiv>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4690      	mov	r8, r2
 8003166:	4699      	mov	r9, r3
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <main+0x450>)
 800316a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800316e:	4b27      	ldr	r3, [pc, #156]	; (800320c <main+0x45c>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003178:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800317c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003180:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003184:	ed8d ab04 	vstr	d10, [sp, #16]
 8003188:	ed8d 9b02 	vstr	d9, [sp, #8]
 800318c:	e9cd 4500 	strd	r4, r5, [sp]
 8003190:	4652      	mov	r2, sl
 8003192:	465b      	mov	r3, fp
 8003194:	491e      	ldr	r1, [pc, #120]	; (8003210 <main+0x460>)
 8003196:	4819      	ldr	r0, [pc, #100]	; (80031fc <main+0x44c>)
 8003198:	f013 fc00 	bl	801699c <siprintf>
  						sensor_values.in_stand, duty_cycle);
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 800319c:	4817      	ldr	r0, [pc, #92]	; (80031fc <main+0x44c>)
 800319e:	f7fd f88f 	bl	80002c0 <strlen>
 80031a2:	4603      	mov	r3, r0
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4619      	mov	r1, r3
 80031a8:	4814      	ldr	r0, [pc, #80]	; (80031fc <main+0x44c>)
 80031aa:	f012 fa83 	bl	80156b4 <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 80031ae:	f002 fc8d 	bl	8005acc <HAL_GetTick>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4a0f      	ldr	r2, [pc, #60]	; (80031f4 <main+0x444>)
 80031b6:	6013      	str	r3, [r2, #0]
  					previous_check_for_valid_heater_update = HAL_GetTick();
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 80031b8:	f002 fc88 	bl	8005acc <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <main+0x464>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1ad2      	subs	r2, r2, r3
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <main+0x468>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f4ff aed0 	bcc.w	8002f6e <main+0x1be>
  				update_display();
 80031ce:	f7fe fd4f 	bl	8001c70 <update_display>
  				previous_millis_display = HAL_GetTick();
 80031d2:	f002 fc7b 	bl	8005acc <HAL_GetTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <main+0x464>)
 80031da:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update >= interval_sensor_update){
 80031dc:	e6c7      	b.n	8002f6e <main+0x1be>
 80031de:	bf00      	nop
 80031e0:	20000650 	.word	0x20000650
 80031e4:	2000058c 	.word	0x2000058c
 80031e8:	2000000c 	.word	0x2000000c
 80031ec:	20000661 	.word	0x20000661
 80031f0:	20001bc0 	.word	0x20001bc0
 80031f4:	20000588 	.word	0x20000588
 80031f8:	20000008 	.word	0x20000008
 80031fc:	200005c0 	.word	0x200005c0
 8003200:	20000028 	.word	0x20000028
 8003204:	20000648 	.word	0x20000648
 8003208:	40240000 	.word	0x40240000
 800320c:	20000658 	.word	0x20000658
 8003210:	08019058 	.word	0x08019058
 8003214:	20000584 	.word	0x20000584
 8003218:	20000004 	.word	0x20000004

0800321c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b094      	sub	sp, #80	; 0x50
 8003220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003222:	f107 0318 	add.w	r3, r7, #24
 8003226:	2238      	movs	r2, #56	; 0x38
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f013 fc19 	bl	8016a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800323e:	2000      	movs	r0, #0
 8003240:	f008 f9ce 	bl	800b5e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8003244:	2322      	movs	r3, #34	; 0x22
 8003246:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800324e:	2340      	movs	r3, #64	; 0x40
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003252:	2301      	movs	r3, #1
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003256:	2302      	movs	r3, #2
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800325a:	2302      	movs	r3, #2
 800325c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800325e:	2304      	movs	r3, #4
 8003260:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003262:	2355      	movs	r3, #85	; 0x55
 8003264:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003266:	2302      	movs	r3, #2
 8003268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800326a:	2302      	movs	r3, #2
 800326c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800326e:	2302      	movs	r3, #2
 8003270:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003272:	f107 0318 	add.w	r3, r7, #24
 8003276:	4618      	mov	r0, r3
 8003278:	f008 fa66 	bl	800b748 <HAL_RCC_OscConfig>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003282:	f000 fd59 	bl	8003d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003286:	230f      	movs	r3, #15
 8003288:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800328a:	2303      	movs	r3, #3
 800328c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	2104      	movs	r1, #4
 800329e:	4618      	mov	r0, r3
 80032a0:	f008 fd64 	bl	800bd6c <HAL_RCC_ClockConfig>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80032aa:	f000 fd45 	bl	8003d38 <Error_Handler>
  }
}
 80032ae:	bf00      	nop
 80032b0:	3750      	adds	r7, #80	; 0x50
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b09a      	sub	sp, #104	; 0x68
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80032be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80032ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032ce:	2220      	movs	r2, #32
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f013 fbc5 	bl	8016a62 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80032d8:	463b      	mov	r3, r7
 80032da:	223c      	movs	r2, #60	; 0x3c
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f013 fbbf 	bl	8016a62 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80032e4:	4b5c      	ldr	r3, [pc, #368]	; (8003458 <MX_ADC1_Init+0x1a0>)
 80032e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80032ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032ec:	4b5a      	ldr	r3, [pc, #360]	; (8003458 <MX_ADC1_Init+0x1a0>)
 80032ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80032f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032f4:	4b58      	ldr	r3, [pc, #352]	; (8003458 <MX_ADC1_Init+0x1a0>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <MX_ADC1_Init+0x1a0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003300:	4b55      	ldr	r3, [pc, #340]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003306:	4b54      	ldr	r3, [pc, #336]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003308:	2201      	movs	r2, #1
 800330a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800330c:	4b52      	ldr	r3, [pc, #328]	; (8003458 <MX_ADC1_Init+0x1a0>)
 800330e:	2204      	movs	r2, #4
 8003310:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003312:	4b51      	ldr	r3, [pc, #324]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003318:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <MX_ADC1_Init+0x1a0>)
 800331a:	2200      	movs	r2, #0
 800331c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800331e:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003320:	2202      	movs	r2, #2
 8003322:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003324:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800332c:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <MX_ADC1_Init+0x1a0>)
 800332e:	2200      	movs	r2, #0
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003338:	4b47      	ldr	r3, [pc, #284]	; (8003458 <MX_ADC1_Init+0x1a0>)
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003340:	4b45      	ldr	r3, [pc, #276]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003342:	2200      	movs	r2, #0
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003346:	4b44      	ldr	r3, [pc, #272]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800334e:	4842      	ldr	r0, [pc, #264]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003350:	f002 fe50 	bl	8005ff4 <HAL_ADC_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800335a:	f000 fced 	bl	8003d38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800335e:	2300      	movs	r3, #0
 8003360:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003362:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003366:	4619      	mov	r1, r3
 8003368:	483b      	ldr	r0, [pc, #236]	; (8003458 <MX_ADC1_Init+0x1a0>)
 800336a:	f005 f853 	bl	8008414 <HAL_ADCEx_MultiModeConfigChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8003374:	f000 fce0 	bl	8003d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003378:	4b38      	ldr	r3, [pc, #224]	; (800345c <MX_ADC1_Init+0x1a4>)
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800337c:	2306      	movs	r3, #6
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8003380:	2302      	movs	r3, #2
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003384:	237f      	movs	r3, #127	; 0x7f
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003388:	2304      	movs	r3, #4
 800338a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003390:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003394:	4619      	mov	r1, r3
 8003396:	4830      	ldr	r0, [pc, #192]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003398:	f003 faa6 	bl	80068e8 <HAL_ADC_ConfigChannel>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80033a2:	f000 fcc9 	bl	8003d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80033a6:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <MX_ADC1_Init+0x1a8>)
 80033a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80033aa:	230c      	movs	r3, #12
 80033ac:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033b2:	4619      	mov	r1, r3
 80033b4:	4828      	ldr	r0, [pc, #160]	; (8003458 <MX_ADC1_Init+0x1a0>)
 80033b6:	f003 fa97 	bl	80068e8 <HAL_ADC_ConfigChannel>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80033c0:	f000 fcba 	bl	8003d38 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80033c4:	4b25      	ldr	r3, [pc, #148]	; (800345c <MX_ADC1_Init+0x1a4>)
 80033c6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80033c8:	2309      	movs	r3, #9
 80033ca:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80033cc:	2306      	movs	r3, #6
 80033ce:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80033d0:	237f      	movs	r3, #127	; 0x7f
 80033d2:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80033d4:	2304      	movs	r3, #4
 80033d6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80033dc:	2303      	movs	r3, #3
 80033de:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003400:	463b      	mov	r3, r7
 8003402:	4619      	mov	r1, r3
 8003404:	4814      	ldr	r0, [pc, #80]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003406:	f004 fb25 	bl	8007a54 <HAL_ADCEx_InjectedConfigChannel>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8003410:	f000 fc92 	bl	8003d38 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <MX_ADC1_Init+0x1a8>)
 8003416:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8003418:	f240 130f 	movw	r3, #271	; 0x10f
 800341c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800341e:	463b      	mov	r3, r7
 8003420:	4619      	mov	r1, r3
 8003422:	480d      	ldr	r0, [pc, #52]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003424:	f004 fb16 	bl	8007a54 <HAL_ADCEx_InjectedConfigChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800342e:	f000 fc83 	bl	8003d38 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <MX_ADC1_Init+0x1ac>)
 8003434:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8003436:	f240 2315 	movw	r3, #533	; 0x215
 800343a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800343c:	463b      	mov	r3, r7
 800343e:	4619      	mov	r1, r3
 8003440:	4805      	ldr	r0, [pc, #20]	; (8003458 <MX_ADC1_Init+0x1a0>)
 8003442:	f004 fb07 	bl	8007a54 <HAL_ADCEx_InjectedConfigChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 800344c:	f000 fc74 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003450:	bf00      	nop
 8003452:	3768      	adds	r7, #104	; 0x68
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20001640 	.word	0x20001640
 800345c:	0c900008 	.word	0x0c900008
 8003460:	10c00010 	.word	0x10c00010
 8003464:	c3210000 	.word	0xc3210000

08003468 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800346e:	463b      	mov	r3, r7
 8003470:	2220      	movs	r2, #32
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f013 faf4 	bl	8016a62 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800347a:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <MX_ADC2_Init+0xc0>)
 800347c:	4a2b      	ldr	r2, [pc, #172]	; (800352c <MX_ADC2_Init+0xc4>)
 800347e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003480:	4b29      	ldr	r3, [pc, #164]	; (8003528 <MX_ADC2_Init+0xc0>)
 8003482:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003486:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <MX_ADC2_Init+0xc0>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800348e:	4b26      	ldr	r3, [pc, #152]	; (8003528 <MX_ADC2_Init+0xc0>)
 8003490:	2200      	movs	r2, #0
 8003492:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <MX_ADC2_Init+0xc0>)
 8003496:	2200      	movs	r2, #0
 8003498:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <MX_ADC2_Init+0xc0>)
 800349c:	2200      	movs	r2, #0
 800349e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034a0:	4b21      	ldr	r3, [pc, #132]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034a2:	2204      	movs	r2, #4
 80034a4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80034ac:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034c6:	4b18      	ldr	r3, [pc, #96]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034d4:	4b14      	ldr	r3, [pc, #80]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80034e2:	4811      	ldr	r0, [pc, #68]	; (8003528 <MX_ADC2_Init+0xc0>)
 80034e4:	f002 fd86 	bl	8005ff4 <HAL_ADC_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80034ee:	f000 fc23 	bl	8003d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <MX_ADC2_Init+0xc8>)
 80034f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034f6:	2306      	movs	r3, #6
 80034f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80034fa:	2304      	movs	r3, #4
 80034fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034fe:	237f      	movs	r3, #127	; 0x7f
 8003500:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003502:	2304      	movs	r3, #4
 8003504:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800350a:	463b      	mov	r3, r7
 800350c:	4619      	mov	r1, r3
 800350e:	4806      	ldr	r0, [pc, #24]	; (8003528 <MX_ADC2_Init+0xc0>)
 8003510:	f003 f9ea 	bl	80068e8 <HAL_ADC_ConfigChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800351a:	f000 fc0d 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800351e:	bf00      	nop
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200016ac 	.word	0x200016ac
 800352c:	50000100 	.word	0x50000100
 8003530:	2a000400 	.word	0x2a000400

08003534 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <MX_CRC_Init+0x3c>)
 800353a:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <MX_CRC_Init+0x40>)
 800353c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <MX_CRC_Init+0x3c>)
 8003540:	2200      	movs	r2, #0
 8003542:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <MX_CRC_Init+0x3c>)
 8003546:	2200      	movs	r2, #0
 8003548:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <MX_CRC_Init+0x3c>)
 800354c:	2200      	movs	r2, #0
 800354e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <MX_CRC_Init+0x3c>)
 8003552:	2200      	movs	r2, #0
 8003554:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <MX_CRC_Init+0x3c>)
 8003558:	2201      	movs	r2, #1
 800355a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800355c:	4804      	ldr	r0, [pc, #16]	; (8003570 <MX_CRC_Init+0x3c>)
 800355e:	f005 f90d 	bl	800877c <HAL_CRC_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003568:	f000 fbe6 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200017d8 	.word	0x200017d8
 8003574:	40023000 	.word	0x40023000

08003578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <MX_I2C1_Init+0x74>)
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <MX_I2C1_Init+0x78>)
 8003580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8003582:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <MX_I2C1_Init+0x74>)
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <MX_I2C1_Init+0x7c>)
 8003586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <MX_I2C1_Init+0x74>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <MX_I2C1_Init+0x74>)
 8003590:	2201      	movs	r2, #1
 8003592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <MX_I2C1_Init+0x74>)
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <MX_I2C1_Init+0x74>)
 800359c:	2200      	movs	r2, #0
 800359e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <MX_I2C1_Init+0x74>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <MX_I2C1_Init+0x74>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <MX_I2C1_Init+0x74>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035b2:	480e      	ldr	r0, [pc, #56]	; (80035ec <MX_I2C1_Init+0x74>)
 80035b4:	f006 f9ae 	bl	8009914 <HAL_I2C_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80035be:	f000 fbbb 	bl	8003d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035c2:	2100      	movs	r1, #0
 80035c4:	4809      	ldr	r0, [pc, #36]	; (80035ec <MX_I2C1_Init+0x74>)
 80035c6:	f006 fa40 	bl	8009a4a <HAL_I2CEx_ConfigAnalogFilter>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80035d0:	f000 fbb2 	bl	8003d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80035d4:	2100      	movs	r1, #0
 80035d6:	4805      	ldr	r0, [pc, #20]	; (80035ec <MX_I2C1_Init+0x74>)
 80035d8:	f006 fa82 	bl	8009ae0 <HAL_I2CEx_ConfigDigitalFilter>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80035e2:	f000 fba9 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200017fc 	.word	0x200017fc
 80035f0:	40005400 	.word	0x40005400
 80035f4:	30a0a7fb 	.word	0x30a0a7fb

080035f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <MX_SPI2_Init+0x74>)
 80035fe:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <MX_SPI2_Init+0x78>)
 8003600:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <MX_SPI2_Init+0x74>)
 8003604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003608:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800360a:	4b18      	ldr	r3, [pc, #96]	; (800366c <MX_SPI2_Init+0x74>)
 800360c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003610:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <MX_SPI2_Init+0x74>)
 8003614:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003618:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <MX_SPI2_Init+0x74>)
 800361c:	2200      	movs	r2, #0
 800361e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003620:	4b12      	ldr	r3, [pc, #72]	; (800366c <MX_SPI2_Init+0x74>)
 8003622:	2200      	movs	r2, #0
 8003624:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <MX_SPI2_Init+0x74>)
 8003628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <MX_SPI2_Init+0x74>)
 8003630:	2210      	movs	r2, #16
 8003632:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <MX_SPI2_Init+0x74>)
 8003636:	2200      	movs	r2, #0
 8003638:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800363a:	4b0c      	ldr	r3, [pc, #48]	; (800366c <MX_SPI2_Init+0x74>)
 800363c:	2200      	movs	r2, #0
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <MX_SPI2_Init+0x74>)
 8003642:	2200      	movs	r2, #0
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <MX_SPI2_Init+0x74>)
 8003648:	2207      	movs	r2, #7
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <MX_SPI2_Init+0x74>)
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <MX_SPI2_Init+0x74>)
 8003654:	2208      	movs	r2, #8
 8003656:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003658:	4804      	ldr	r0, [pc, #16]	; (800366c <MX_SPI2_Init+0x74>)
 800365a:	f008 ff93 	bl	800c584 <HAL_SPI_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8003664:	f000 fb68 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20001850 	.word	0x20001850
 8003670:	40003800 	.word	0x40003800

08003674 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b098      	sub	sp, #96	; 0x60
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800367a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003686:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	611a      	str	r2, [r3, #16]
 8003696:	615a      	str	r2, [r3, #20]
 8003698:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	2234      	movs	r2, #52	; 0x34
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f013 f9de 	bl	8016a62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036a6:	4b41      	ldr	r3, [pc, #260]	; (80037ac <MX_TIM1_Init+0x138>)
 80036a8:	4a41      	ldr	r2, [pc, #260]	; (80037b0 <MX_TIM1_Init+0x13c>)
 80036aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 80036ac:	4b3f      	ldr	r3, [pc, #252]	; (80037ac <MX_TIM1_Init+0x138>)
 80036ae:	2213      	movs	r2, #19
 80036b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b2:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <MX_TIM1_Init+0x138>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80036b8:	4b3c      	ldr	r3, [pc, #240]	; (80037ac <MX_TIM1_Init+0x138>)
 80036ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c0:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <MX_TIM1_Init+0x138>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036c6:	4b39      	ldr	r3, [pc, #228]	; (80037ac <MX_TIM1_Init+0x138>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <MX_TIM1_Init+0x138>)
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036d2:	4836      	ldr	r0, [pc, #216]	; (80037ac <MX_TIM1_Init+0x138>)
 80036d4:	f009 fd5b 	bl	800d18e <HAL_TIM_PWM_Init>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80036de:	f000 fb2b 	bl	8003d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036f2:	4619      	mov	r1, r3
 80036f4:	482d      	ldr	r0, [pc, #180]	; (80037ac <MX_TIM1_Init+0x138>)
 80036f6:	f00b f8ad 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003700:	f000 fb1a 	bl	8003d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003704:	2360      	movs	r3, #96	; 0x60
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800370c:	2300      	movs	r3, #0
 800370e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003710:	2300      	movs	r3, #0
 8003712:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003714:	2300      	movs	r3, #0
 8003716:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003718:	2300      	movs	r3, #0
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800371c:	2300      	movs	r3, #0
 800371e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003720:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003724:	2200      	movs	r2, #0
 8003726:	4619      	mov	r1, r3
 8003728:	4820      	ldr	r0, [pc, #128]	; (80037ac <MX_TIM1_Init+0x138>)
 800372a:	f00a faab 	bl	800dc84 <HAL_TIM_PWM_ConfigChannel>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003734:	f000 fb00 	bl	8003d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800373c:	2208      	movs	r2, #8
 800373e:	4619      	mov	r1, r3
 8003740:	481a      	ldr	r0, [pc, #104]	; (80037ac <MX_TIM1_Init+0x138>)
 8003742:	f00a fa9f 	bl	800dc84 <HAL_TIM_PWM_ConfigChannel>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800374c:	f000 faf4 	bl	8003d38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003768:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003780:	2300      	movs	r3, #0
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003784:	2300      	movs	r3, #0
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003788:	1d3b      	adds	r3, r7, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4807      	ldr	r0, [pc, #28]	; (80037ac <MX_TIM1_Init+0x138>)
 800378e:	f00b f8e3 	bl	800e958 <HAL_TIMEx_ConfigBreakDeadTime>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003798:	f000 face 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800379c:	4803      	ldr	r0, [pc, #12]	; (80037ac <MX_TIM1_Init+0x138>)
 800379e:	f001 facf 	bl	8004d40 <HAL_TIM_MspPostInit>

}
 80037a2:	bf00      	nop
 80037a4:	3760      	adds	r7, #96	; 0x60
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20001914 	.word	0x20001914
 80037b0:	40012c00 	.word	0x40012c00

080037b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08c      	sub	sp, #48	; 0x30
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037ba:	f107 030c 	add.w	r3, r7, #12
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f013 f94d 	bl	8016a62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c8:	463b      	mov	r3, r7
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037d2:	4b21      	ldr	r3, [pc, #132]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80037da:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037fa:	2303      	movs	r3, #3
 80037fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80037fe:	2302      	movs	r3, #2
 8003800:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003802:	2301      	movs	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800380a:	230a      	movs	r3, #10
 800380c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800380e:	2300      	movs	r3, #0
 8003810:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003812:	2301      	movs	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003816:	2300      	movs	r3, #0
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800381a:	230a      	movs	r3, #10
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800381e:	f107 030c 	add.w	r3, r7, #12
 8003822:	4619      	mov	r1, r3
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <MX_TIM2_Init+0xa4>)
 8003826:	f009 ff89 	bl	800d73c <HAL_TIM_Encoder_Init>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003830:	f000 fa82 	bl	8003d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003834:	2300      	movs	r3, #0
 8003836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800383c:	463b      	mov	r3, r7
 800383e:	4619      	mov	r1, r3
 8003840:	4805      	ldr	r0, [pc, #20]	; (8003858 <MX_TIM2_Init+0xa4>)
 8003842:	f00b f807 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800384c:	f000 fa74 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003850:	bf00      	nop
 8003852:	3730      	adds	r7, #48	; 0x30
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20001960 	.word	0x20001960

0800385c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800386e:	463b      	mov	r3, r7
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
 800387c:	615a      	str	r2, [r3, #20]
 800387e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003880:	4b21      	ldr	r3, [pc, #132]	; (8003908 <MX_TIM4_Init+0xac>)
 8003882:	4a22      	ldr	r2, [pc, #136]	; (800390c <MX_TIM4_Init+0xb0>)
 8003884:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <MX_TIM4_Init+0xac>)
 8003888:	f242 720f 	movw	r2, #9999	; 0x270f
 800388c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800388e:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <MX_TIM4_Init+0xac>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8003894:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <MX_TIM4_Init+0xac>)
 8003896:	220a      	movs	r2, #10
 8003898:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800389a:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <MX_TIM4_Init+0xac>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <MX_TIM4_Init+0xac>)
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80038a6:	4818      	ldr	r0, [pc, #96]	; (8003908 <MX_TIM4_Init+0xac>)
 80038a8:	f009 fc71 	bl	800d18e <HAL_TIM_PWM_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80038b2:	f000 fa41 	bl	8003d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	4619      	mov	r1, r3
 80038c4:	4810      	ldr	r0, [pc, #64]	; (8003908 <MX_TIM4_Init+0xac>)
 80038c6:	f00a ffc5 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80038d0:	f000 fa32 	bl	8003d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038d4:	2360      	movs	r3, #96	; 0x60
 80038d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038e4:	463b      	mov	r3, r7
 80038e6:	2204      	movs	r2, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4807      	ldr	r0, [pc, #28]	; (8003908 <MX_TIM4_Init+0xac>)
 80038ec:	f00a f9ca 	bl	800dc84 <HAL_TIM_PWM_ConfigChannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80038f6:	f000 fa1f 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80038fa:	4803      	ldr	r0, [pc, #12]	; (8003908 <MX_TIM4_Init+0xac>)
 80038fc:	f001 fa20 	bl	8004d40 <HAL_TIM_MspPostInit>

}
 8003900:	bf00      	nop
 8003902:	3728      	adds	r7, #40	; 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200019ac 	.word	0x200019ac
 800390c:	40000800 	.word	0x40000800

08003910 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003920:	4b15      	ldr	r3, [pc, #84]	; (8003978 <MX_TIM7_Init+0x68>)
 8003922:	4a16      	ldr	r2, [pc, #88]	; (800397c <MX_TIM7_Init+0x6c>)
 8003924:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17000-1;
 8003926:	4b14      	ldr	r3, [pc, #80]	; (8003978 <MX_TIM7_Init+0x68>)
 8003928:	f244 2267 	movw	r2, #16999	; 0x4267
 800392c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <MX_TIM7_Init+0x68>)
 8003930:	2200      	movs	r2, #0
 8003932:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8003934:	4b10      	ldr	r3, [pc, #64]	; (8003978 <MX_TIM7_Init+0x68>)
 8003936:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800393a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800393c:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <MX_TIM7_Init+0x68>)
 800393e:	2200      	movs	r2, #0
 8003940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003942:	480d      	ldr	r0, [pc, #52]	; (8003978 <MX_TIM7_Init+0x68>)
 8003944:	f009 fb32 	bl	800cfac <HAL_TIM_Base_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800394e:	f000 f9f3 	bl	8003d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4806      	ldr	r0, [pc, #24]	; (8003978 <MX_TIM7_Init+0x68>)
 8003960:	f00a ff78 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800396a:	f000 f9e5 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200019f8 	.word	0x200019f8
 800397c:	40001400 	.word	0x40001400

08003980 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <MX_TIM8_Init+0x78>)
 8003992:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <MX_TIM8_Init+0x7c>)
 8003994:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <MX_TIM8_Init+0x78>)
 8003998:	2200      	movs	r2, #0
 800399a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <MX_TIM8_Init+0x78>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <MX_TIM8_Init+0x78>)
 80039a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <MX_TIM8_Init+0x78>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <MX_TIM8_Init+0x78>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <MX_TIM8_Init+0x78>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 80039bc:	2108      	movs	r1, #8
 80039be:	480e      	ldr	r0, [pc, #56]	; (80039f8 <MX_TIM8_Init+0x78>)
 80039c0:	f009 fe6c 	bl	800d69c <HAL_TIM_OnePulse_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 80039ca:	f000 f9b5 	bl	8003d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4806      	ldr	r0, [pc, #24]	; (80039f8 <MX_TIM8_Init+0x78>)
 80039e0:	f00a ff38 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80039ea:	f000 f9a5 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20001a44 	.word	0x20001a44
 80039fc:	40013400 	.word	0x40013400

08003a00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <MX_TIM16_Init+0x58>)
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <MX_TIM16_Init+0x5c>)
 8003a08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <MX_TIM16_Init+0x58>)
 8003a0c:	f244 2267 	movw	r2, #16999	; 0x4267
 8003a10:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <MX_TIM16_Init+0x58>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4;
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <MX_TIM16_Init+0x58>)
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <MX_TIM16_Init+0x58>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <MX_TIM16_Init+0x58>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <MX_TIM16_Init+0x58>)
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003a30:	4809      	ldr	r0, [pc, #36]	; (8003a58 <MX_TIM16_Init+0x58>)
 8003a32:	f009 fabb 	bl	800cfac <HAL_TIM_Base_Init>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003a3c:	f000 f97c 	bl	8003d38 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003a40:	2108      	movs	r1, #8
 8003a42:	4805      	ldr	r0, [pc, #20]	; (8003a58 <MX_TIM16_Init+0x58>)
 8003a44:	f009 fe2a 	bl	800d69c <HAL_TIM_OnePulse_Init>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003a4e:	f000 f973 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20001a90 	.word	0x20001a90
 8003a5c:	40014400 	.word	0x40014400

08003a60 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MX_TIM17_Init+0x58>)
 8003a66:	4a15      	ldr	r2, [pc, #84]	; (8003abc <MX_TIM17_Init+0x5c>)
 8003a68:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <MX_TIM17_Init+0x58>)
 8003a6c:	f244 2267 	movw	r2, #16999	; 0x4267
 8003a70:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_TIM17_Init+0x58>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <MX_TIM17_Init+0x58>)
 8003a7a:	2231      	movs	r2, #49	; 0x31
 8003a7c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_TIM17_Init+0x58>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <MX_TIM17_Init+0x58>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <MX_TIM17_Init+0x58>)
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003a90:	4809      	ldr	r0, [pc, #36]	; (8003ab8 <MX_TIM17_Init+0x58>)
 8003a92:	f009 fa8b 	bl	800cfac <HAL_TIM_Base_Init>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8003a9c:	f000 f94c 	bl	8003d38 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8003aa0:	2108      	movs	r1, #8
 8003aa2:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <MX_TIM17_Init+0x58>)
 8003aa4:	f009 fdfa 	bl	800d69c <HAL_TIM_OnePulse_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8003aae:	f000 f943 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20001adc 	.word	0x20001adc
 8003abc:	40014800 	.word	0x40014800

08003ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ac6:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <MX_USART1_UART_Init+0x94>)
 8003ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003aca:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aea:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af0:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003b08:	4811      	ldr	r0, [pc, #68]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b0a:	f00b f81c 	bl	800eb46 <HAL_HalfDuplex_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b14:	f000 f910 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b18:	2100      	movs	r1, #0
 8003b1a:	480d      	ldr	r0, [pc, #52]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b1c:	f00b fd90 	bl	800f640 <HAL_UARTEx_SetTxFifoThreshold>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003b26:	f000 f907 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4808      	ldr	r0, [pc, #32]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b2e:	f00b fdc5 	bl	800f6bc <HAL_UARTEx_SetRxFifoThreshold>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003b38:	f000 f8fe 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b3c:	4804      	ldr	r0, [pc, #16]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b3e:	f00b fd46 	bl	800f5ce <HAL_UARTEx_DisableFifoMode>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003b48:	f000 f8f6 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20001b28 	.word	0x20001b28
 8003b54:	40013800 	.word	0x40013800

08003b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b5e:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <MX_DMA_Init+0x70>)
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <MX_DMA_Init+0x70>)
 8003b64:	f043 0304 	orr.w	r3, r3, #4
 8003b68:	6493      	str	r3, [r2, #72]	; 0x48
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <MX_DMA_Init+0x70>)
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <MX_DMA_Init+0x70>)
 8003b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7a:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <MX_DMA_Init+0x70>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6493      	str	r3, [r2, #72]	; 0x48
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <MX_DMA_Init+0x70>)
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2100      	movs	r1, #0
 8003b92:	200b      	movs	r0, #11
 8003b94:	f004 fdbd 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b98:	200b      	movs	r0, #11
 8003b9a:	f004 fdd4 	bl	8008746 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2105      	movs	r1, #5
 8003ba2:	200c      	movs	r0, #12
 8003ba4:	f004 fdb5 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003ba8:	200c      	movs	r0, #12
 8003baa:	f004 fdcc 	bl	8008746 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2105      	movs	r1, #5
 8003bb2:	200d      	movs	r0, #13
 8003bb4:	f004 fdad 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003bb8:	200d      	movs	r0, #13
 8003bba:	f004 fdc4 	bl	8008746 <HAL_NVIC_EnableIRQ>

}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000

08003bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be2:	4b52      	ldr	r3, [pc, #328]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	4a51      	ldr	r2, [pc, #324]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bee:	4b4f      	ldr	r3, [pc, #316]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bfa:	4b4c      	ldr	r3, [pc, #304]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	4a4b      	ldr	r2, [pc, #300]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003c00:	f043 0320 	orr.w	r3, r3, #32
 8003c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c06:	4b49      	ldr	r3, [pc, #292]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c12:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	4a45      	ldr	r2, [pc, #276]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c1e:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	4b40      	ldr	r3, [pc, #256]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	4a3f      	ldr	r2, [pc, #252]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <MX_GPIO_Init+0x160>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8003c42:	2200      	movs	r2, #0
 8003c44:	2102      	movs	r1, #2
 8003c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4a:	f005 fe33 	bl	80098b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f645 4107 	movw	r1, #23559	; 0x5c07
 8003c54:	4836      	ldr	r0, [pc, #216]	; (8003d30 <MX_GPIO_Init+0x164>)
 8003c56:	f005 fe2d 	bl	80098b4 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8003c5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4831      	ldr	r0, [pc, #196]	; (8003d34 <MX_GPIO_Init+0x168>)
 8003c70:	f005 fc86 	bl	8009580 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8003c74:	2302      	movs	r3, #2
 8003c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c80:	2300      	movs	r3, #0
 8003c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c8e:	f005 fc77 	bl	8009580 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8003c92:	2370      	movs	r3, #112	; 0x70
 8003c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9e:	f107 0314 	add.w	r3, r7, #20
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca8:	f005 fc6a 	bl	8009580 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8003cac:	f645 4307 	movw	r3, #23559	; 0x5c07
 8003cb0:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cbe:	f107 0314 	add.w	r3, r7, #20
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	481a      	ldr	r0, [pc, #104]	; (8003d30 <MX_GPIO_Init+0x164>)
 8003cc6:	f005 fc5b 	bl	8009580 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8003cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8003cda:	f107 0314 	add.w	r3, r7, #20
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce4:	f005 fc4c 	bl	8009580 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8003ce8:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	480c      	ldr	r0, [pc, #48]	; (8003d30 <MX_GPIO_Init+0x164>)
 8003d00:	f005 fc3e 	bl	8009580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d04:	2200      	movs	r2, #0
 8003d06:	2100      	movs	r1, #0
 8003d08:	2017      	movs	r0, #23
 8003d0a:	f004 fd02 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d0e:	2017      	movs	r0, #23
 8003d10:	f004 fd19 	bl	8008746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d14:	2200      	movs	r2, #0
 8003d16:	2100      	movs	r1, #0
 8003d18:	2028      	movs	r0, #40	; 0x28
 8003d1a:	f004 fcfa 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d1e:	2028      	movs	r0, #40	; 0x28
 8003d20:	f004 fd11 	bl	8008746 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d24:	bf00      	nop
 8003d26:	3728      	adds	r7, #40	; 0x28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	48000400 	.word	0x48000400
 8003d34:	48000800 	.word	0x48000800

08003d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d3c:	b672      	cpsid	i
}
 8003d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d40:	e7fe      	b.n	8003d40 <Error_Handler+0x8>

08003d42 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e008      	b.n	8003d7c <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	2200      	movs	r2, #0
 8003d74:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	d4e9      	bmi.n	8003d6a <Moving_Average_Init+0x28>
	}
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	441a      	add	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003dca:	6839      	ldr	r1, [r7, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	1ad2      	subs	r2, r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	edd3 7a00 	vldr	s15, [r3]
 8003dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0e:	d507      	bpl.n	8003e20 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8003e1e:	e003      	b.n	8003e28 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	edd3 7a00 	vldr	s15, [r3]
 8003e3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e40:	ee16 0a90 	vmov	r0, s13
 8003e44:	f7fc fba8 	bl	8000598 <__aeabi_f2d>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003e50:	eeb0 0a47 	vmov.f32	s0, s14
 8003e54:	eef0 0a67 	vmov.f32	s1, s15
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003e8e:	f7fc fe6b 	bl	8000b68 <__aeabi_dcmpgt>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8003ea4:	e011      	b.n	8003eca <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003eb2:	f7fc fe3b 	bl	8000b2c <__aeabi_dcmplt>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d100      	bne.n	8003ebe <PID_Init+0x60>
}
 8003ebc:	e005      	b.n	8003eca <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	0000      	movs	r0, r0
 8003ed4:	0000      	movs	r0, r0
	...

08003ed8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6278      	str	r0, [r7, #36]	; 0x24
 8003ee0:	6239      	str	r1, [r7, #32]
 8003ee2:	61fa      	str	r2, [r7, #28]
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	ed87 0b04 	vstr	d0, [r7, #16]
 8003eea:	ed87 1b02 	vstr	d1, [r7, #8]
 8003eee:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	6a3a      	ldr	r2, [r7, #32]
 8003efc:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	2200      	movs	r2, #0
 8003f08:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8003f0a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003f60 <PID+0x88>
 8003f0e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003f68 <PID+0x90>
 8003f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f14:	f000 f991 	bl	800423a <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	2264      	movs	r2, #100	; 0x64
 8003f1c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8003f1e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f22:	4619      	mov	r1, r3
 8003f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f26:	f000 fad9 	bl	80044dc <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8003f2a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f2e:	4619      	mov	r1, r3
 8003f30:	ed97 2b00 	vldr	d2, [r7]
 8003f34:	ed97 1b02 	vldr	d1, [r7, #8]
 8003f38:	ed97 0b04 	vldr	d0, [r7, #16]
 8003f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f3e:	f000 fa25 	bl	800438c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003f42:	f001 fdc3 	bl	8005acc <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	1ad2      	subs	r2, r2, r3
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	605a      	str	r2, [r3, #4]

}
 8003f52:	bf00      	nop
 8003f54:	3728      	adds	r7, #40	; 0x28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	f3af 8000 	nop.w
 8003f60:	00000000 	.word	0x00000000
 8003f64:	406fe000 	.word	0x406fe000
	...

08003f70 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b08c      	sub	sp, #48	; 0x30
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	785b      	ldrb	r3, [r3, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <PID_Compute+0x16>
	{
		return _FALSE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e136      	b.n	80041f4 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003f86:	f001 fda1 	bl	8005acc <HAL_GetTick>
 8003f8a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	6a3a      	ldr	r2, [r7, #32]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d204      	bcs.n	8003faa <PID_Compute+0x3a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8124 	beq.w	80041f2 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc2:	f7fc f989 	bl	80002d8 <__aeabi_dsub>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003fd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003fd8:	f7fc f97e 	bl	80002d8 <__aeabi_dsub>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003ff0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ff4:	f7fc fb28 	bl	8000648 <__aeabi_dmul>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4650      	mov	r0, sl
 8003ffe:	4659      	mov	r1, fp
 8004000:	f7fc f96c 	bl	80002dc <__adddf3>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800401a:	f7fc fda5 	bl	8000b68 <__aeabi_dcmpgt>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d006      	beq.n	8004032 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004030:	e010      	b.n	8004054 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800403e:	f7fc fd75 	bl	8000b2c <__aeabi_dcmplt>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d114      	bne.n	8004092 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004078:	f7fc fae6 	bl	8000648 <__aeabi_dmul>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4650      	mov	r0, sl
 8004082:	4659      	mov	r1, fp
 8004084:	f7fc f928 	bl	80002d8 <__aeabi_dsub>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800409e:	f7fc fd63 	bl	8000b68 <__aeabi_dcmpgt>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d006      	beq.n	80040b6 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80040b4:	e010      	b.n	80040d8 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80040c2:	f7fc fd33 	bl	8000b2c <__aeabi_dcmplt>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80040de:	4690      	mov	r8, r2
 80040e0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80040e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e8:	4640      	mov	r0, r8
 80040ea:	4649      	mov	r1, r9
 80040ec:	f7fc faac 	bl	8000648 <__aeabi_dmul>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d017      	beq.n	8004132 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004108:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800410c:	f7fc fa9c 	bl	8000648 <__aeabi_dmul>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800411e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004122:	f7fc fa91 	bl	8000648 <__aeabi_dmul>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004130:	e005      	b.n	800413e <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800414a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800414e:	f7fc fa7b 	bl	8000648 <__aeabi_dmul>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4640      	mov	r0, r8
 8004158:	4649      	mov	r1, r9
 800415a:	f7fc f8bd 	bl	80002d8 <__aeabi_dsub>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004166:	f7fc f8b9 	bl	80002dc <__adddf3>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004178:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800417c:	f7fc fcf4 	bl	8000b68 <__aeabi_dcmpgt>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800418c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004190:	e00e      	b.n	80041b0 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004198:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800419c:	f7fc fcc6 	bl	8000b2c <__aeabi_dcmplt>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80041ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80041b6:	4614      	mov	r4, r2
 80041b8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80041bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c0:	4620      	mov	r0, r4
 80041c2:	4629      	mov	r1, r5
 80041c4:	f7fc fa40 	bl	8000648 <__aeabi_dmul>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80041d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041da:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 80041f2:	2300      	movs	r3, #0
	}

}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3730      	adds	r7, #48	; 0x30
 80041f8:	46bd      	mov	sp, r7
 80041fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041fe <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	2b01      	cmp	r3, #1
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <PID_SetMode+0x2e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fe19 	bl	8003e5e <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	705a      	strb	r2, [r3, #1]

}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	6178      	str	r0, [r7, #20]
 8004242:	ed87 0b02 	vstr	d0, [r7, #8]
 8004246:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800424a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800424e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004252:	f7fc fc7f 	bl	8000b54 <__aeabi_dcmpge>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d158      	bne.n	800430e <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800425c:	6979      	ldr	r1, [r7, #20]
 800425e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004262:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800426c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	785b      	ldrb	r3, [r3, #1]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d04b      	beq.n	8004310 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004286:	f7fc fc6f 	bl	8000b68 <__aeabi_dcmpgt>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800429a:	e9c1 2300 	strd	r2, r3, [r1]
 800429e:	e012      	b.n	80042c6 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80042ae:	f7fc fc3d 	bl	8000b2c <__aeabi_dcmplt>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80042c2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80042d2:	f7fc fc49 	bl	8000b68 <__aeabi_dcmpgt>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d006      	beq.n	80042ea <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80042e2:	6979      	ldr	r1, [r7, #20]
 80042e4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80042e8:	e012      	b.n	8004310 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80042f6:	f7fc fc19 	bl	8000b2c <__aeabi_dcmplt>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004306:	6979      	ldr	r1, [r7, #20]
 8004308:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800430c:	e000      	b.n	8004310 <PID_SetOutputLimits+0xd6>
		return;
 800430e:	bf00      	nop
		}
		else { }

	}

}
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af00      	add	r7, sp, #0
 800431c:	6178      	str	r0, [r7, #20]
 800431e:	ed87 0b02 	vstr	d0, [r7, #8]
 8004322:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8004326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800432e:	f7fc fc11 	bl	8000b54 <__aeabi_dcmpge>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8004338:	6979      	ldr	r1, [r7, #20]
 800433a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800433e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8004342:	6979      	ldr	r1, [r7, #20]
 8004344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004348:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800434c:	e000      	b.n	8004350 <PID_SetILimits+0x3a>
		return;
 800434e:	bf00      	nop
}
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b088      	sub	sp, #32
 800435a:	af00      	add	r7, sp, #0
 800435c:	61f8      	str	r0, [r7, #28]
 800435e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004362:	ed87 1b02 	vstr	d1, [r7, #8]
 8004366:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	789b      	ldrb	r3, [r3, #2]
 800436e:	4619      	mov	r1, r3
 8004370:	ed97 2b00 	vldr	d2, [r7]
 8004374:	ed97 1b02 	vldr	d1, [r7, #8]
 8004378:	ed97 0b04 	vldr	d0, [r7, #16]
 800437c:	69f8      	ldr	r0, [r7, #28]
 800437e:	f000 f805 	bl	800438c <PID_SetTunings2>
}
 8004382:	bf00      	nop
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	61f8      	str	r0, [r7, #28]
 8004394:	ed87 0b04 	vstr	d0, [r7, #16]
 8004398:	ed87 1b02 	vstr	d1, [r7, #8]
 800439c:	ed87 2b00 	vstr	d2, [r7]
 80043a0:	460b      	mov	r3, r1
 80043a2:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043b0:	f7fc fbbc 	bl	8000b2c <__aeabi_dcmplt>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f040 8089 	bne.w	80044ce <PID_SetTunings2+0x142>
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043c8:	f7fc fbb0 	bl	8000b2c <__aeabi_dcmplt>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d17d      	bne.n	80044ce <PID_SetTunings2+0x142>
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043de:	f7fc fba5 	bl	8000b2c <__aeabi_dcmplt>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d172      	bne.n	80044ce <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	7efa      	ldrb	r2, [r7, #27]
 80043ec:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80043ee:	7efb      	ldrb	r3, [r7, #27]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8004400:	69f9      	ldr	r1, [r7, #28]
 8004402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004406:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800440a:	69f9      	ldr	r1, [r7, #28]
 800440c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004410:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8004414:	69f9      	ldr	r1, [r7, #28]
 8004416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800441a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc f896 	bl	8000554 <__aeabi_ui2d>
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <PID_SetTunings2+0x14c>)
 800442e:	f7fc fa35 	bl	800089c <__aeabi_ddiv>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800443a:	69f9      	ldr	r1, [r7, #28]
 800443c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004440:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8004444:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004448:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800444c:	f7fc f8fc 	bl	8000648 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	69f9      	ldr	r1, [r7, #28]
 8004456:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800445a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800445e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004462:	f7fc fa1b 	bl	800089c <__aeabi_ddiv>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	69f9      	ldr	r1, [r7, #28]
 800446c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	78db      	ldrb	r3, [r3, #3]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d12b      	bne.n	80044d0 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800447e:	f04f 0000 	mov.w	r0, #0
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	f7fb ff27 	bl	80002d8 <__aeabi_dsub>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	69f9      	ldr	r1, [r7, #28]
 8004490:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800449a:	f04f 0000 	mov.w	r0, #0
 800449e:	f04f 0100 	mov.w	r1, #0
 80044a2:	f7fb ff19 	bl	80002d8 <__aeabi_dsub>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	69f9      	ldr	r1, [r7, #28]
 80044ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80044b6:	f04f 0000 	mov.w	r0, #0
 80044ba:	f04f 0100 	mov.w	r1, #0
 80044be:	f7fb ff0b 	bl	80002d8 <__aeabi_dsub>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80044cc:	e000      	b.n	80044d0 <PID_SetTunings2+0x144>
		return;
 80044ce:	bf00      	nop

	}

}
 80044d0:	3728      	adds	r7, #40	; 0x28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	408f4000 	.word	0x408f4000

080044dc <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d02e      	beq.n	800454e <PID_SetControllerDirection+0x72>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	78db      	ldrb	r3, [r3, #3]
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d029      	beq.n	800454e <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	f7fb fee6 	bl	80002d8 <__aeabi_dsub>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800451c:	f04f 0000 	mov.w	r0, #0
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	f7fb fed8 	bl	80002d8 <__aeabi_dsub>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004538:	f04f 0000 	mov.w	r0, #0
 800453c:	f04f 0100 	mov.w	r1, #0
 8004540:	f7fb feca 	bl	80002d8 <__aeabi_dsub>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	70da      	strb	r2, [r3, #3]

}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 800455c:	b5b0      	push	{r4, r5, r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	dd01      	ble.n	8004572 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 800456e:	2301      	movs	r3, #1
 8004570:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	dd2e      	ble.n	80045dc <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f7fb fff8 	bl	8000574 <__aeabi_i2d>
 8004584:	4604      	mov	r4, r0
 8004586:	460d      	mov	r5, r1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4618      	mov	r0, r3
 800458e:	f7fb ffe1 	bl	8000554 <__aeabi_ui2d>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4620      	mov	r0, r4
 8004598:	4629      	mov	r1, r5
 800459a:	f7fc f97f 	bl	800089c <__aeabi_ddiv>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80045ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045b0:	f7fc f84a 	bl	8000648 <__aeabi_dmul>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80045c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045c8:	f7fc f968 	bl	800089c <__aeabi_ddiv>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	68f9      	ldr	r1, [r7, #12]
 80045d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	609a      	str	r2, [r3, #8]

	}

}
 80045dc:	bf00      	nop
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bdb0      	pop	{r4, r5, r7, pc}

080045e4 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80045f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80045f6:	eeb0 0a47 	vmov.f32	s0, s14
 80045fa:	eef0 0a67 	vmov.f32	s1, s15
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004616:	ec43 2b17 	vmov	d7, r2, r3
}
 800461a:	eeb0 0a47 	vmov.f32	s0, s14
 800461e:	eef0 0a67 	vmov.f32	s1, s15
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800463a:	ec43 2b17 	vmov	d7, r2, r3
}
 800463e:	eeb0 0a47 	vmov.f32	s0, s14
 8004642:	eef0 0a67 	vmov.f32	s1, s15
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004656:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <HAL_MspInit+0x44>)
 8004658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465a:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <HAL_MspInit+0x44>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6613      	str	r3, [r2, #96]	; 0x60
 8004662:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_MspInit+0x44>)
 8004664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_MspInit+0x44>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	4a08      	ldr	r2, [pc, #32]	; (8004694 <HAL_MspInit+0x44>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6593      	str	r3, [r2, #88]	; 0x58
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_MspInit+0x44>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004686:	f007 f84f 	bl	800b728 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000

08004698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b09c      	sub	sp, #112	; 0x70
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046b0:	f107 0318 	add.w	r3, r7, #24
 80046b4:	2244      	movs	r2, #68	; 0x44
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f012 f9d2 	bl	8016a62 <memset>
  if(hadc->Instance==ADC1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046c6:	d171      	bne.n	80047ac <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80046c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80046ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80046d2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046d4:	f107 0318 	add.w	r3, r7, #24
 80046d8:	4618      	mov	r0, r3
 80046da:	f007 fd63 	bl	800c1a4 <HAL_RCCEx_PeriphCLKConfig>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80046e4:	f7ff fb28 	bl	8003d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80046e8:	4b6d      	ldr	r3, [pc, #436]	; (80048a0 <HAL_ADC_MspInit+0x208>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	4a6c      	ldr	r2, [pc, #432]	; (80048a0 <HAL_ADC_MspInit+0x208>)
 80046f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80046f2:	4b6b      	ldr	r3, [pc, #428]	; (80048a0 <HAL_ADC_MspInit+0x208>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10b      	bne.n	8004712 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80046fa:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	4a69      	ldr	r2, [pc, #420]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 8004700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004706:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 8004708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004712:	4b64      	ldr	r3, [pc, #400]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 8004714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004716:	4a63      	ldr	r2, [pc, #396]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800471e:	4b61      	ldr	r3, [pc, #388]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|THERMOCOUPLE_Pin;
 800472a:	230c      	movs	r3, #12
 800472c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800472e:	2303      	movs	r3, #3
 8004730:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004736:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800473a:	4619      	mov	r1, r3
 800473c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004740:	f004 ff1e 	bl	8009580 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8004744:	4b58      	ldr	r3, [pc, #352]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 8004746:	4a59      	ldr	r2, [pc, #356]	; (80048ac <HAL_ADC_MspInit+0x214>)
 8004748:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800474a:	4b57      	ldr	r3, [pc, #348]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 800474c:	2205      	movs	r2, #5
 800474e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004750:	4b55      	ldr	r3, [pc, #340]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004756:	4b54      	ldr	r3, [pc, #336]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 8004758:	2200      	movs	r2, #0
 800475a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800475c:	4b52      	ldr	r3, [pc, #328]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 800475e:	2280      	movs	r2, #128	; 0x80
 8004760:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004762:	4b51      	ldr	r3, [pc, #324]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 8004764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004768:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800476a:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 800476c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004770:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004772:	4b4d      	ldr	r3, [pc, #308]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 8004774:	2220      	movs	r2, #32
 8004776:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004778:	4b4b      	ldr	r3, [pc, #300]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 800477a:	2200      	movs	r2, #0
 800477c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800477e:	484a      	ldr	r0, [pc, #296]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 8004780:	f004 fa02 	bl	8008b88 <HAL_DMA_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800478a:	f7ff fad5 	bl	8003d38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a45      	ldr	r2, [pc, #276]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
 8004794:	4a44      	ldr	r2, [pc, #272]	; (80048a8 <HAL_ADC_MspInit+0x210>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 800479a:	2200      	movs	r2, #0
 800479c:	210a      	movs	r1, #10
 800479e:	2012      	movs	r0, #18
 80047a0:	f003 ffb7 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80047a4:	2012      	movs	r0, #18
 80047a6:	f003 ffce 	bl	8008746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80047aa:	e074      	b.n	8004896 <HAL_ADC_MspInit+0x1fe>
  else if(hadc->Instance==ADC2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a3f      	ldr	r2, [pc, #252]	; (80048b0 <HAL_ADC_MspInit+0x218>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d16f      	bne.n	8004896 <HAL_ADC_MspInit+0x1fe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80047bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80047c0:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047c2:	f107 0318 	add.w	r3, r7, #24
 80047c6:	4618      	mov	r0, r3
 80047c8:	f007 fcec 	bl	800c1a4 <HAL_RCCEx_PeriphCLKConfig>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 80047d2:	f7ff fab1 	bl	8003d38 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80047d6:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <HAL_ADC_MspInit+0x208>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3301      	adds	r3, #1
 80047dc:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <HAL_ADC_MspInit+0x208>)
 80047de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80047e0:	4b2f      	ldr	r3, [pc, #188]	; (80048a0 <HAL_ADC_MspInit+0x208>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10b      	bne.n	8004800 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80047e8:	4b2e      	ldr	r3, [pc, #184]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 80047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ec:	4a2d      	ldr	r2, [pc, #180]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 80047ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047f4:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 80047f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004800:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 8004802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004804:	4a27      	ldr	r2, [pc, #156]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 8004806:	f043 0320 	orr.w	r3, r3, #32
 800480a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <HAL_ADC_MspInit+0x20c>)
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_Pin;
 8004818:	2302      	movs	r3, #2
 800481a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800481c:	2303      	movs	r3, #3
 800481e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004820:	2300      	movs	r3, #0
 8004822:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);
 8004824:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004828:	4619      	mov	r1, r3
 800482a:	4822      	ldr	r0, [pc, #136]	; (80048b4 <HAL_ADC_MspInit+0x21c>)
 800482c:	f004 fea8 	bl	8009580 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 8004832:	4a22      	ldr	r2, [pc, #136]	; (80048bc <HAL_ADC_MspInit+0x224>)
 8004834:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004836:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 8004838:	2224      	movs	r2, #36	; 0x24
 800483a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800483c:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 800483e:	2200      	movs	r2, #0
 8004840:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004842:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 8004844:	2200      	movs	r2, #0
 8004846:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004848:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800484e:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 8004850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004854:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004856:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 8004858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800485c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 8004860:	2220      	movs	r2, #32
 8004862:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 8004866:	2200      	movs	r2, #0
 8004868:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800486a:	4813      	ldr	r0, [pc, #76]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 800486c:	f004 f98c 	bl	8008b88 <HAL_DMA_Init>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_ADC_MspInit+0x1e2>
      Error_Handler();
 8004876:	f7ff fa5f 	bl	8003d38 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
 8004880:	4a0d      	ldr	r2, [pc, #52]	; (80048b8 <HAL_ADC_MspInit+0x220>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	210a      	movs	r1, #10
 800488a:	2012      	movs	r0, #18
 800488c:	f003 ff41 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004890:	2012      	movs	r0, #18
 8004892:	f003 ff58 	bl	8008746 <HAL_NVIC_EnableIRQ>
}
 8004896:	bf00      	nop
 8004898:	3770      	adds	r7, #112	; 0x70
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20001c58 	.word	0x20001c58
 80048a4:	40021000 	.word	0x40021000
 80048a8:	20001718 	.word	0x20001718
 80048ac:	40020030 	.word	0x40020030
 80048b0:	50000100 	.word	0x50000100
 80048b4:	48001400 	.word	0x48001400
 80048b8:	20001778 	.word	0x20001778
 80048bc:	4002001c 	.word	0x4002001c

080048c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <HAL_CRC_MspInit+0x38>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10b      	bne.n	80048ea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <HAL_CRC_MspInit+0x3c>)
 80048d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <HAL_CRC_MspInit+0x3c>)
 80048d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048dc:	6493      	str	r3, [r2, #72]	; 0x48
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_CRC_MspInit+0x3c>)
 80048e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40023000 	.word	0x40023000
 80048fc:	40021000 	.word	0x40021000

08004900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b09c      	sub	sp, #112	; 0x70
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004908:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004918:	f107 0318 	add.w	r3, r7, #24
 800491c:	2244      	movs	r2, #68	; 0x44
 800491e:	2100      	movs	r1, #0
 8004920:	4618      	mov	r0, r3
 8004922:	f012 f89e 	bl	8016a62 <memset>
  if(hi2c->Instance==I2C1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2e      	ldr	r2, [pc, #184]	; (80049e4 <HAL_I2C_MspInit+0xe4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d154      	bne.n	80049da <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004930:	2340      	movs	r3, #64	; 0x40
 8004932:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004934:	2300      	movs	r3, #0
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004938:	f107 0318 	add.w	r3, r7, #24
 800493c:	4618      	mov	r0, r3
 800493e:	f007 fc31 	bl	800c1a4 <HAL_RCCEx_PeriphCLKConfig>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004948:	f7ff f9f6 	bl	8003d38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494c:	4b26      	ldr	r3, [pc, #152]	; (80049e8 <HAL_I2C_MspInit+0xe8>)
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004950:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <HAL_I2C_MspInit+0xe8>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004958:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <HAL_I2C_MspInit+0xe8>)
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004964:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <HAL_I2C_MspInit+0xe8>)
 8004966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004968:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <HAL_I2C_MspInit+0xe8>)
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <HAL_I2C_MspInit+0xe8>)
 8004972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800497c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004980:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004982:	2312      	movs	r3, #18
 8004984:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004986:	2300      	movs	r3, #0
 8004988:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498a:	2300      	movs	r3, #0
 800498c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800498e:	2304      	movs	r3, #4
 8004990:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004992:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004996:	4619      	mov	r1, r3
 8004998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800499c:	f004 fdf0 	bl	8009580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80049a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049a6:	2312      	movs	r3, #18
 80049a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ae:	2300      	movs	r3, #0
 80049b0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049b2:	2304      	movs	r3, #4
 80049b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049ba:	4619      	mov	r1, r3
 80049bc:	480b      	ldr	r0, [pc, #44]	; (80049ec <HAL_I2C_MspInit+0xec>)
 80049be:	f004 fddf 	bl	8009580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_I2C_MspInit+0xe8>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <HAL_I2C_MspInit+0xe8>)
 80049c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049cc:	6593      	str	r3, [r2, #88]	; 0x58
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_I2C_MspInit+0xe8>)
 80049d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049da:	bf00      	nop
 80049dc:	3770      	adds	r7, #112	; 0x70
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40005400 	.word	0x40005400
 80049e8:	40021000 	.word	0x40021000
 80049ec:	48000400 	.word	0x48000400

080049f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f8:	f107 0314 	add.w	r3, r7, #20
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <HAL_SPI_MspInit+0xd0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d151      	bne.n	8004ab6 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004a12:	4b2c      	ldr	r3, [pc, #176]	; (8004ac4 <HAL_SPI_MspInit+0xd4>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	4a2b      	ldr	r2, [pc, #172]	; (8004ac4 <HAL_SPI_MspInit+0xd4>)
 8004a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a1e:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_SPI_MspInit+0xd4>)
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2a:	4b26      	ldr	r3, [pc, #152]	; (8004ac4 <HAL_SPI_MspInit+0xd4>)
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2e:	4a25      	ldr	r2, [pc, #148]	; (8004ac4 <HAL_SPI_MspInit+0xd4>)
 8004a30:	f043 0302 	orr.w	r3, r3, #2
 8004a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a36:	4b23      	ldr	r3, [pc, #140]	; (8004ac4 <HAL_SPI_MspInit+0xd4>)
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004a42:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a50:	2300      	movs	r3, #0
 8004a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a54:	2305      	movs	r3, #5
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a58:	f107 0314 	add.w	r3, r7, #20
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	481a      	ldr	r0, [pc, #104]	; (8004ac8 <HAL_SPI_MspInit+0xd8>)
 8004a60:	f004 fd8e 	bl	8009580 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a66:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <HAL_SPI_MspInit+0xe0>)
 8004a68:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a6c:	220d      	movs	r2, #13
 8004a6e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a70:	4b16      	ldr	r3, [pc, #88]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a72:	2210      	movs	r2, #16
 8004a74:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a76:	4b15      	ldr	r3, [pc, #84]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a7c:	4b13      	ldr	r3, [pc, #76]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a7e:	2280      	movs	r2, #128	; 0x80
 8004a80:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a82:	4b12      	ldr	r3, [pc, #72]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004a8e:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a9a:	480c      	ldr	r0, [pc, #48]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004a9c:	f004 f874 	bl	8008b88 <HAL_DMA_Init>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004aa6:	f7ff f947 	bl	8003d38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a07      	ldr	r2, [pc, #28]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54
 8004ab0:	4a06      	ldr	r2, [pc, #24]	; (8004acc <HAL_SPI_MspInit+0xdc>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004ab6:	bf00      	nop
 8004ab8:	3728      	adds	r7, #40	; 0x28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40003800 	.word	0x40003800
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	48000400 	.word	0x48000400
 8004acc:	200018b4 	.word	0x200018b4
 8004ad0:	40020008 	.word	0x40020008

08004ad4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <HAL_TIM_PWM_MspInit+0x98>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d12c      	bne.n	8004b40 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <HAL_TIM_PWM_MspInit+0x9c>)
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <HAL_TIM_PWM_MspInit+0x9c>)
 8004aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004af0:	6613      	str	r3, [r2, #96]	; 0x60
 8004af2:	4b1f      	ldr	r3, [pc, #124]	; (8004b70 <HAL_TIM_PWM_MspInit+0x9c>)
 8004af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004afe:	2200      	movs	r2, #0
 8004b00:	2100      	movs	r1, #0
 8004b02:	2018      	movs	r0, #24
 8004b04:	f003 fe05 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004b08:	2018      	movs	r0, #24
 8004b0a:	f003 fe1c 	bl	8008746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	2019      	movs	r0, #25
 8004b14:	f003 fdfd 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004b18:	2019      	movs	r0, #25
 8004b1a:	f003 fe14 	bl	8008746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2100      	movs	r1, #0
 8004b22:	201a      	movs	r0, #26
 8004b24:	f003 fdf5 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004b28:	201a      	movs	r0, #26
 8004b2a:	f003 fe0c 	bl	8008746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2100      	movs	r1, #0
 8004b32:	201b      	movs	r0, #27
 8004b34:	f003 fded 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004b38:	201b      	movs	r0, #27
 8004b3a:	f003 fe04 	bl	8008746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004b3e:	e010      	b.n	8004b62 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <HAL_TIM_PWM_MspInit+0xa0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d10b      	bne.n	8004b62 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_TIM_PWM_MspInit+0x9c>)
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <HAL_TIM_PWM_MspInit+0x9c>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	6593      	str	r3, [r2, #88]	; 0x58
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_TIM_PWM_MspInit+0x9c>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40000800 	.word	0x40000800

08004b78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b80:	f107 0314 	add.w	r3, r7, #20
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	60da      	str	r2, [r3, #12]
 8004b8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d14c      	bne.n	8004c34 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b9a:	4b28      	ldr	r3, [pc, #160]	; (8004c3c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	4a27      	ldr	r2, [pc, #156]	; (8004c3c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ba6:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bb2:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bca:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bd6:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8004be2:	2301      	movs	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be6:	2302      	movs	r3, #2
 8004be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c00:	f004 fcbe 	bl	8009580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8004c04:	2308      	movs	r3, #8
 8004c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c10:	2300      	movs	r3, #0
 8004c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c14:	2301      	movs	r3, #1
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4808      	ldr	r0, [pc, #32]	; (8004c40 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004c20:	f004 fcae 	bl	8009580 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004c24:	2200      	movs	r2, #0
 8004c26:	2100      	movs	r1, #0
 8004c28:	201c      	movs	r0, #28
 8004c2a:	f003 fd72 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c2e:	201c      	movs	r0, #28
 8004c30:	f003 fd89 	bl	8008746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004c34:	bf00      	nop
 8004c36:	3728      	adds	r7, #40	; 0x28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	48000400 	.word	0x48000400

08004c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <HAL_TIM_Base_MspInit+0xac>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d114      	bne.n	8004c80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004c56:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	6593      	str	r3, [r2, #88]	; 0x58
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	2037      	movs	r0, #55	; 0x37
 8004c74:	f003 fd4d 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004c78:	2037      	movs	r0, #55	; 0x37
 8004c7a:	f003 fd64 	bl	8008746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004c7e:	e032      	b.n	8004ce6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_TIM_Base_MspInit+0xb4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d114      	bne.n	8004cb4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8004c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c8e:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8004c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c94:	6613      	str	r3, [r2, #96]	; 0x60
 8004c96:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8004c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	2019      	movs	r0, #25
 8004ca8:	f003 fd33 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004cac:	2019      	movs	r0, #25
 8004cae:	f003 fd4a 	bl	8008746 <HAL_NVIC_EnableIRQ>
}
 8004cb2:	e018      	b.n	8004ce6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a10      	ldr	r2, [pc, #64]	; (8004cfc <HAL_TIM_Base_MspInit+0xb8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d113      	bne.n	8004ce6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8004cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_TIM_Base_MspInit+0xb0>)
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2100      	movs	r1, #0
 8004cda:	201a      	movs	r0, #26
 8004cdc:	f003 fd19 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004ce0:	201a      	movs	r0, #26
 8004ce2:	f003 fd30 	bl	8008746 <HAL_NVIC_EnableIRQ>
}
 8004ce6:	bf00      	nop
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40001400 	.word	0x40001400
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40014400 	.word	0x40014400
 8004cfc:	40014800 	.word	0x40014800

08004d00 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <HAL_TIM_OnePulse_MspInit+0x38>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d10b      	bne.n	8004d2a <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d16:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004d18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40021000 	.word	0x40021000

08004d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d48:	f107 0314 	add.w	r3, r7, #20
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a22      	ldr	r2, [pc, #136]	; (8004de8 <HAL_TIM_MspPostInit+0xa8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d11c      	bne.n	8004d9c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <HAL_TIM_MspPostInit+0xac>)
 8004d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d66:	4a21      	ldr	r2, [pc, #132]	; (8004dec <HAL_TIM_MspPostInit+0xac>)
 8004d68:	f043 0320 	orr.w	r3, r3, #32
 8004d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d6e:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <HAL_TIM_MspPostInit+0xac>)
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d86:	2300      	movs	r3, #0
 8004d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d8a:	2306      	movs	r3, #6
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8004d8e:	f107 0314 	add.w	r3, r7, #20
 8004d92:	4619      	mov	r1, r3
 8004d94:	4816      	ldr	r0, [pc, #88]	; (8004df0 <HAL_TIM_MspPostInit+0xb0>)
 8004d96:	f004 fbf3 	bl	8009580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004d9a:	e020      	b.n	8004dde <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <HAL_TIM_MspPostInit+0xb4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d11b      	bne.n	8004dde <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da6:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_TIM_MspPostInit+0xac>)
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	4a10      	ldr	r2, [pc, #64]	; (8004dec <HAL_TIM_MspPostInit+0xac>)
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004db2:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <HAL_TIM_MspPostInit+0xac>)
 8004db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004dce:	2302      	movs	r3, #2
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004dd2:	f107 0314 	add.w	r3, r7, #20
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4807      	ldr	r0, [pc, #28]	; (8004df8 <HAL_TIM_MspPostInit+0xb8>)
 8004dda:	f004 fbd1 	bl	8009580 <HAL_GPIO_Init>
}
 8004dde:	bf00      	nop
 8004de0:	3728      	adds	r7, #40	; 0x28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40021000 	.word	0x40021000
 8004df0:	48001400 	.word	0x48001400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	48000400 	.word	0x48000400

08004dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b09a      	sub	sp, #104	; 0x68
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e14:	f107 0310 	add.w	r3, r7, #16
 8004e18:	2244      	movs	r2, #68	; 0x44
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f011 fe20 	bl	8016a62 <memset>
  if(huart->Instance==USART1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <HAL_UART_MspInit+0xa8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d137      	bne.n	8004e9c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e34:	f107 0310 	add.w	r3, r7, #16
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f007 f9b3 	bl	800c1a4 <HAL_RCCEx_PeriphCLKConfig>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004e44:	f7fe ff78 	bl	8003d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e48:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <HAL_UART_MspInit+0xac>)
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4c:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <HAL_UART_MspInit+0xac>)
 8004e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e52:	6613      	str	r3, [r2, #96]	; 0x60
 8004e54:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <HAL_UART_MspInit+0xac>)
 8004e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e60:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <HAL_UART_MspInit+0xac>)
 8004e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e64:	4a10      	ldr	r2, [pc, #64]	; (8004ea8 <HAL_UART_MspInit+0xac>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <HAL_UART_MspInit+0xac>)
 8004e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e7c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e7e:	2312      	movs	r3, #18
 8004e80:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e86:	2300      	movs	r3, #0
 8004e88:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e8a:	2307      	movs	r3, #7
 8004e8c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e92:	4619      	mov	r1, r3
 8004e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e98:	f004 fb72 	bl	8009580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004e9c:	bf00      	nop
 8004e9e:	3768      	adds	r7, #104	; 0x68
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40013800 	.word	0x40013800
 8004ea8:	40021000 	.word	0x40021000

08004eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004eb0:	e7fe      	b.n	8004eb0 <NMI_Handler+0x4>

08004eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eb6:	e7fe      	b.n	8004eb6 <HardFault_Handler+0x4>

08004eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ebc:	e7fe      	b.n	8004ebc <MemManage_Handler+0x4>

08004ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ec2:	e7fe      	b.n	8004ec2 <BusFault_Handler+0x4>

08004ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ec8:	e7fe      	b.n	8004ec8 <UsageFault_Handler+0x4>

08004eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ef8:	f000 fdd6 	bl	8005aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004efc:	bf00      	nop
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <DMA1_Channel1_IRQHandler+0x10>)
 8004f06:	f003 ff62 	bl	8008dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f0a:	bf00      	nop
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200018b4 	.word	0x200018b4

08004f14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004f18:	4802      	ldr	r0, [pc, #8]	; (8004f24 <DMA1_Channel2_IRQHandler+0x10>)
 8004f1a:	f003 ff58 	bl	8008dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20001778 	.word	0x20001778

08004f28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f2c:	4802      	ldr	r0, [pc, #8]	; (8004f38 <DMA1_Channel3_IRQHandler+0x10>)
 8004f2e:	f003 ff4e 	bl	8008dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20001718 	.word	0x20001718

08004f3c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004f40:	4803      	ldr	r0, [pc, #12]	; (8004f50 <ADC1_2_IRQHandler+0x14>)
 8004f42:	f001 fa8f 	bl	8006464 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004f46:	4803      	ldr	r0, [pc, #12]	; (8004f54 <ADC1_2_IRQHandler+0x18>)
 8004f48:	f001 fa8c 	bl	8006464 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004f4c:	bf00      	nop
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20001640 	.word	0x20001640
 8004f54:	200016ac 	.word	0x200016ac

08004f58 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004f5c:	4802      	ldr	r0, [pc, #8]	; (8004f68 <USB_LP_IRQHandler+0x10>)
 8004f5e:	f004 fefb 	bl	8009d58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	200029c8 	.word	0x200029c8

08004f6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8004f70:	2020      	movs	r0, #32
 8004f72:	f004 fcb7 	bl	80098e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 8004f76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f7a:	f004 fcb3 	bl	80098e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f88:	4802      	ldr	r0, [pc, #8]	; (8004f94 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8004f8a:	f008 fd2b 	bl	800d9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20001914 	.word	0x20001914

08004f98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f9c:	4803      	ldr	r0, [pc, #12]	; (8004fac <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004f9e:	f008 fd21 	bl	800d9e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004fa2:	4803      	ldr	r0, [pc, #12]	; (8004fb0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004fa4:	f008 fd1e 	bl	800d9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004fa8:	bf00      	nop
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20001914 	.word	0x20001914
 8004fb0:	20001a90 	.word	0x20001a90

08004fb4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fb8:	4803      	ldr	r0, [pc, #12]	; (8004fc8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8004fba:	f008 fd13 	bl	800d9e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8004fbe:	4803      	ldr	r0, [pc, #12]	; (8004fcc <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004fc0:	f008 fd10 	bl	800d9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20001914 	.word	0x20001914
 8004fcc:	20001adc 	.word	0x20001adc

08004fd0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fd4:	4802      	ldr	r0, [pc, #8]	; (8004fe0 <TIM1_CC_IRQHandler+0x10>)
 8004fd6:	f008 fd05 	bl	800d9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004fda:	bf00      	nop
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20001914 	.word	0x20001914

08004fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fe8:	4802      	ldr	r0, [pc, #8]	; (8004ff4 <TIM2_IRQHandler+0x10>)
 8004fea:	f008 fcfb 	bl	800d9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20001960 	.word	0x20001960

08004ff8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8004ffc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005000:	f004 fc70 	bl	80098e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}

08005008 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800500c:	4802      	ldr	r0, [pc, #8]	; (8005018 <TIM7_IRQHandler+0x10>)
 800500e:	f008 fce9 	bl	800d9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200019f8 	.word	0x200019f8

0800501c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return 1;
 8005020:	2301      	movs	r3, #1
}
 8005022:	4618      	mov	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <_kill>:

int _kill(int pid, int sig)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005036:	f011 fd67 	bl	8016b08 <__errno>
 800503a:	4603      	mov	r3, r0
 800503c:	2216      	movs	r2, #22
 800503e:	601a      	str	r2, [r3, #0]
  return -1;
 8005040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <_exit>:

void _exit (int status)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005054:	f04f 31ff 	mov.w	r1, #4294967295
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff ffe7 	bl	800502c <_kill>
  while (1) {}    /* Make sure we hang here */
 800505e:	e7fe      	b.n	800505e <_exit+0x12>

08005060 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e00a      	b.n	8005088 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005072:	f3af 8000 	nop.w
 8005076:	4601      	mov	r1, r0
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	60ba      	str	r2, [r7, #8]
 800507e:	b2ca      	uxtb	r2, r1
 8005080:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	3301      	adds	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	dbf0      	blt.n	8005072 <_read+0x12>
  }

  return len;
 8005090:	687b      	ldr	r3, [r7, #4]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e009      	b.n	80050c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	60ba      	str	r2, [r7, #8]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	3301      	adds	r3, #1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	dbf1      	blt.n	80050ac <_write+0x12>
  }
  return len;
 80050c8:	687b      	ldr	r3, [r7, #4]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <_close>:

int _close(int file)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050fa:	605a      	str	r2, [r3, #4]
  return 0;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <_isatty>:

int _isatty(int file)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005112:	2301      	movs	r3, #1
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005144:	4a14      	ldr	r2, [pc, #80]	; (8005198 <_sbrk+0x5c>)
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <_sbrk+0x60>)
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005150:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <_sbrk+0x64>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <_sbrk+0x64>)
 800515a:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <_sbrk+0x68>)
 800515c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800515e:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <_sbrk+0x64>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	429a      	cmp	r2, r3
 800516a:	d207      	bcs.n	800517c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800516c:	f011 fccc 	bl	8016b08 <__errno>
 8005170:	4603      	mov	r3, r0
 8005172:	220c      	movs	r2, #12
 8005174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	e009      	b.n	8005190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800517c:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <_sbrk+0x64>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005182:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <_sbrk+0x64>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4413      	add	r3, r2
 800518a:	4a05      	ldr	r2, [pc, #20]	; (80051a0 <_sbrk+0x64>)
 800518c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800518e:	68fb      	ldr	r3, [r7, #12]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20008000 	.word	0x20008000
 800519c:	00000400 	.word	0x00000400
 80051a0:	20001c5c 	.word	0x20001c5c
 80051a4:	20003010 	.word	0x20003010

080051a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <SystemInit+0x20>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	4a05      	ldr	r2, [pc, #20]	; (80051c8 <SystemInit+0x20>)
 80051b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051bc:	bf00      	nop
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	e000ed00 	.word	0xe000ed00

080051cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051cc:	480d      	ldr	r0, [pc, #52]	; (8005204 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80051d0:	f7ff ffea 	bl	80051a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051d4:	480c      	ldr	r0, [pc, #48]	; (8005208 <LoopForever+0x6>)
  ldr r1, =_edata
 80051d6:	490d      	ldr	r1, [pc, #52]	; (800520c <LoopForever+0xa>)
  ldr r2, =_sidata
 80051d8:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <LoopForever+0xe>)
  movs r3, #0
 80051da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80051dc:	e002      	b.n	80051e4 <LoopCopyDataInit>

080051de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051e2:	3304      	adds	r3, #4

080051e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051e8:	d3f9      	bcc.n	80051de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051ea:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80051ec:	4c0a      	ldr	r4, [pc, #40]	; (8005218 <LoopForever+0x16>)
  movs r3, #0
 80051ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051f0:	e001      	b.n	80051f6 <LoopFillZerobss>

080051f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051f4:	3204      	adds	r2, #4

080051f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051f8:	d3fb      	bcc.n	80051f2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80051fa:	f011 fc8b 	bl	8016b14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80051fe:	f7fd fdd7 	bl	8002db0 <main>

08005202 <LoopForever>:

LoopForever:
    b LoopForever
 8005202:	e7fe      	b.n	8005202 <LoopForever>
  ldr   r0, =_estack
 8005204:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800520c:	2000050c 	.word	0x2000050c
  ldr r2, =_sidata
 8005210:	0801bc28 	.word	0x0801bc28
  ldr r2, =_sbss
 8005214:	20000510 	.word	0x20000510
  ldr r4, =_ebss
 8005218:	20003010 	.word	0x20003010

0800521c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800521c:	e7fe      	b.n	800521c <COMP1_2_3_IRQHandler>
	...

08005220 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800522a:	4b12      	ldr	r3, [pc, #72]	; (8005274 <setSPI_Size+0x54>)
 800522c:	f993 3000 	ldrsb.w	r3, [r3]
 8005230:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005234:	429a      	cmp	r2, r3
 8005236:	d017      	beq.n	8005268 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <setSPI_Size+0x58>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <setSPI_Size+0x58>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005246:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8005248:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <setSPI_Size+0x54>)
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800524e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d104      	bne.n	8005260 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8005256:	4b08      	ldr	r3, [pc, #32]	; (8005278 <setSPI_Size+0x58>)
 8005258:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800525c:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 800525e:	e003      	b.n	8005268 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <setSPI_Size+0x58>)
 8005262:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005266:	60da      	str	r2, [r3, #12]
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	20000194 	.word	0x20000194
 8005278:	20001850 	.word	0x20001850

0800527c <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	460a      	mov	r2, r1
 8005286:	71fb      	strb	r3, [r7, #7]
 8005288:	4613      	mov	r3, r2
 800528a:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 800528c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ffc5 	bl	8005220 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8005296:	4b3c      	ldr	r3, [pc, #240]	; (8005388 <setDMAMemMode+0x10c>)
 8005298:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800529c:	461a      	mov	r2, r3
 800529e:	79bb      	ldrb	r3, [r7, #6]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d106      	bne.n	80052b2 <setDMAMemMode+0x36>
 80052a4:	4b38      	ldr	r3, [pc, #224]	; (8005388 <setDMAMemMode+0x10c>)
 80052a6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80052aa:	461a      	mov	r2, r3
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d066      	beq.n	8005380 <setDMAMemMode+0x104>
    config.dma_sz =size;
 80052b2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80052b6:	4b34      	ldr	r3, [pc, #208]	; (8005388 <setDMAMemMode+0x10c>)
 80052b8:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80052ba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80052be:	4b32      	ldr	r3, [pc, #200]	; (8005388 <setDMAMemMode+0x10c>)
 80052c0:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 80052c2:	4b32      	ldr	r3, [pc, #200]	; (800538c <setDMAMemMode+0x110>)
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b30      	ldr	r3, [pc, #192]	; (800538c <setDMAMemMode+0x110>)
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 80052d6:	bf00      	nop
 80052d8:	4b2c      	ldr	r3, [pc, #176]	; (800538c <setDMAMemMode+0x110>)
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f7      	bne.n	80052d8 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10e      	bne.n	800530c <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <setDMAMemMode+0x110>)
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	2280      	movs	r2, #128	; 0x80
 80052f4:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 80052f6:	4b25      	ldr	r3, [pc, #148]	; (800538c <setDMAMemMode+0x110>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b23      	ldr	r3, [pc, #140]	; (800538c <setDMAMemMode+0x110>)
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e00d      	b.n	8005328 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 800530c:	4b1f      	ldr	r3, [pc, #124]	; (800538c <setDMAMemMode+0x110>)
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	2200      	movs	r2, #0
 8005312:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8005314:	4b1d      	ldr	r3, [pc, #116]	; (800538c <setDMAMemMode+0x110>)
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <setDMAMemMode+0x110>)
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005326:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 8005328:	79bb      	ldrb	r3, [r7, #6]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d116      	bne.n	800535c <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <setDMAMemMode+0x110>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005336:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005338:	4b14      	ldr	r3, [pc, #80]	; (800538c <setDMAMemMode+0x110>)
 800533a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005340:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <setDMAMemMode+0x110>)
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800534e:	4b0f      	ldr	r3, [pc, #60]	; (800538c <setDMAMemMode+0x110>)
 8005350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8005358:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 800535a:	e011      	b.n	8005380 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800535c:	4b0b      	ldr	r3, [pc, #44]	; (800538c <setDMAMemMode+0x110>)
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	2200      	movs	r2, #0
 8005362:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005364:	4b09      	ldr	r3, [pc, #36]	; (800538c <setDMAMemMode+0x110>)
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	2200      	movs	r2, #0
 800536a:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <setDMAMemMode+0x110>)
 800536e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <setDMAMemMode+0x110>)
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800537e:	601a      	str	r2, [r3, #0]
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000194 	.word	0x20000194
 800538c:	20001850 	.word	0x20001850

08005390 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 800539c:	2000      	movs	r0, #0
 800539e:	f7ff ff3f 	bl	8005220 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 80053a2:	2200      	movs	r2, #0
 80053a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053a8:	4815      	ldr	r0, [pc, #84]	; (8005400 <LCD_WriteCommand+0x70>)
 80053aa:	f004 fa83 	bl	80098b4 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80053ae:	2200      	movs	r2, #0
 80053b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053b4:	4812      	ldr	r0, [pc, #72]	; (8005400 <LCD_WriteCommand+0x70>)
 80053b6:	f004 fa7d 	bl	80098b4 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295
 80053be:	2201      	movs	r2, #1
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4810      	ldr	r0, [pc, #64]	; (8005404 <LCD_WriteCommand+0x74>)
 80053c4:	f007 f989 	bl	800c6da <HAL_SPI_Transmit>
  if(argc){
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00e      	beq.n	80053ec <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80053ce:	2201      	movs	r2, #1
 80053d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053d4:	480a      	ldr	r0, [pc, #40]	; (8005400 <LCD_WriteCommand+0x70>)
 80053d6:	f004 fa6d 	bl	80098b4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	1c59      	adds	r1, r3, #1
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	4807      	ldr	r0, [pc, #28]	; (8005404 <LCD_WriteCommand+0x74>)
 80053e8:	f007 f977 	bl	800c6da <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80053ec:	2201      	movs	r2, #1
 80053ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053f2:	4803      	ldr	r0, [pc, #12]	; (8005400 <LCD_WriteCommand+0x70>)
 80053f4:	f004 fa5e 	bl	80098b4 <HAL_GPIO_WritePin>
#endif
}
 80053f8:	bf00      	nop
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	48000400 	.word	0x48000400
 8005404:	20001850 	.word	0x20001850

08005408 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005412:	2201      	movs	r2, #1
 8005414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005418:	4830      	ldr	r0, [pc, #192]	; (80054dc <LCD_WriteData+0xd4>)
 800541a:	f004 fa4b 	bl	80098b4 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800541e:	2200      	movs	r2, #0
 8005420:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005424:	482d      	ldr	r0, [pc, #180]	; (80054dc <LCD_WriteData+0xd4>)
 8005426:	f004 fa45 	bl	80098b4 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800542a:	e049      	b.n	80054c0 <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005432:	4293      	cmp	r3, r2
 8005434:	bf28      	it	cs
 8005436:	4613      	movcs	r3, r2
 8005438:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b20      	cmp	r3, #32
 800543e:	d924      	bls.n	800548a <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	461a      	mov	r2, r3
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4826      	ldr	r0, [pc, #152]	; (80054e0 <LCD_WriteData+0xd8>)
 8005448:	f007 fabc 	bl	800c9c4 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 800544c:	bf00      	nop
 800544e:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <LCD_WriteData+0xd8>)
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	4618      	mov	r0, r3
 8005454:	f003 fd6a 	bl	8008f2c <HAL_DMA_GetState>
 8005458:	4603      	mov	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d1f7      	bne.n	800544e <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 800545e:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <LCD_WriteData+0xdc>)
 8005460:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d127      	bne.n	80054b8 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8005468:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <LCD_WriteData+0xdc>)
 800546a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d104      	bne.n	800547c <LCD_WriteData+0x74>
          buff += chunk_size;
 8005472:	89fb      	ldrh	r3, [r7, #14]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4413      	add	r3, r2
 8005478:	607b      	str	r3, [r7, #4]
 800547a:	e01d      	b.n	80054b8 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 800547c:	89fb      	ldrh	r3, [r7, #14]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	e016      	b.n	80054b8 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800548a:	89fa      	ldrh	r2, [r7, #14]
 800548c:	f04f 33ff 	mov.w	r3, #4294967295
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	4813      	ldr	r0, [pc, #76]	; (80054e0 <LCD_WriteData+0xd8>)
 8005494:	f007 f921 	bl	800c6da <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8005498:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <LCD_WriteData+0xdc>)
 800549a:	f993 3000 	ldrsb.w	r3, [r3]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d104      	bne.n	80054ac <LCD_WriteData+0xa4>
        buff += chunk_size;
 80054a2:	89fb      	ldrh	r3, [r7, #14]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	607b      	str	r3, [r7, #4]
 80054aa:	e005      	b.n	80054b8 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 80054ac:	89fb      	ldrh	r3, [r7, #14]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	461a      	mov	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1b2      	bne.n	800542c <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80054c6:	2201      	movs	r2, #1
 80054c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054cc:	4803      	ldr	r0, [pc, #12]	; (80054dc <LCD_WriteData+0xd4>)
 80054ce:	f004 f9f1 	bl	80098b4 <HAL_GPIO_WritePin>
#endif
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	48000400 	.word	0x48000400
 80054e0:	20001850 	.word	0x20001850
 80054e4:	20000194 	.word	0x20000194

080054e8 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b08b      	sub	sp, #44	; 0x2c
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	461a      	mov	r2, r3
 80054f6:	4623      	mov	r3, r4
 80054f8:	80fb      	strh	r3, [r7, #6]
 80054fa:	4603      	mov	r3, r0
 80054fc:	80bb      	strh	r3, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	807b      	strh	r3, [r7, #2]
 8005502:	4613      	mov	r3, r2
 8005504:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	84fb      	strh	r3, [r7, #38]	; 0x26
 800550a:	887b      	ldrh	r3, [r7, #2]
 800550c:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800550e:	88bb      	ldrh	r3, [r7, #4]
 8005510:	847b      	strh	r3, [r7, #34]	; 0x22
 8005512:	883b      	ldrh	r3, [r7, #0]
 8005514:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8005516:	232a      	movs	r3, #42	; 0x2a
 8005518:	763b      	strb	r3, [r7, #24]
 800551a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800551e:	121b      	asrs	r3, r3, #8
 8005520:	b21b      	sxth	r3, r3
 8005522:	b2db      	uxtb	r3, r3
 8005524:	767b      	strb	r3, [r7, #25]
 8005526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005528:	b2db      	uxtb	r3, r3
 800552a:	76bb      	strb	r3, [r7, #26]
 800552c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005530:	121b      	asrs	r3, r3, #8
 8005532:	b21b      	sxth	r3, r3
 8005534:	b2db      	uxtb	r3, r3
 8005536:	76fb      	strb	r3, [r7, #27]
 8005538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800553a:	b2db      	uxtb	r3, r3
 800553c:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800553e:	f107 0318 	add.w	r3, r7, #24
 8005542:	2104      	movs	r1, #4
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff ff23 	bl	8005390 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800554a:	232b      	movs	r3, #43	; 0x2b
 800554c:	743b      	strb	r3, [r7, #16]
 800554e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005552:	121b      	asrs	r3, r3, #8
 8005554:	b21b      	sxth	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	747b      	strb	r3, [r7, #17]
 800555a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800555c:	b2db      	uxtb	r3, r3
 800555e:	74bb      	strb	r3, [r7, #18]
 8005560:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005564:	121b      	asrs	r3, r3, #8
 8005566:	b21b      	sxth	r3, r3
 8005568:	b2db      	uxtb	r3, r3
 800556a:	74fb      	strb	r3, [r7, #19]
 800556c:	8c3b      	ldrh	r3, [r7, #32]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005572:	f107 0310 	add.w	r3, r7, #16
 8005576:	2104      	movs	r1, #4
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ff09 	bl	8005390 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800557e:	232c      	movs	r3, #44	; 0x2c
 8005580:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ff01 	bl	8005390 <LCD_WriteCommand>
  }
}
 800558e:	bf00      	nop
 8005590:	372c      	adds	r7, #44	; 0x2c
 8005592:	46bd      	mov	sp, r7
 8005594:	bd90      	pop	{r4, r7, pc}
	...

08005598 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	80fb      	strh	r3, [r7, #6]
 80055a2:	460b      	mov	r3, r1
 80055a4:	80bb      	strh	r3, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80055aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	db39      	blt.n	8005626 <LCD_DrawPixel+0x8e>
 80055b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b6:	2bef      	cmp	r3, #239	; 0xef
 80055b8:	dc35      	bgt.n	8005626 <LCD_DrawPixel+0x8e>
 80055ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	db31      	blt.n	8005626 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80055c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80055ca:	da2c      	bge.n	8005626 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80055cc:	887b      	ldrh	r3, [r7, #2]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	733b      	strb	r3, [r7, #12]
 80055d6:	887b      	ldrh	r3, [r7, #2]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80055dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80055e8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80055ec:	f7ff ff7c 	bl	80054e8 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80055f0:	2201      	movs	r2, #1
 80055f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055f6:	480e      	ldr	r0, [pc, #56]	; (8005630 <LCD_DrawPixel+0x98>)
 80055f8:	f004 f95c 	bl	80098b4 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80055fc:	2200      	movs	r2, #0
 80055fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005602:	480b      	ldr	r0, [pc, #44]	; (8005630 <LCD_DrawPixel+0x98>)
 8005604:	f004 f956 	bl	80098b4 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8005608:	f107 010c 	add.w	r1, r7, #12
 800560c:	f04f 33ff 	mov.w	r3, #4294967295
 8005610:	2202      	movs	r2, #2
 8005612:	4808      	ldr	r0, [pc, #32]	; (8005634 <LCD_DrawPixel+0x9c>)
 8005614:	f007 f861 	bl	800c6da <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005618:	2201      	movs	r2, #1
 800561a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800561e:	4804      	ldr	r0, [pc, #16]	; (8005630 <LCD_DrawPixel+0x98>)
 8005620:	f004 f948 	bl	80098b4 <HAL_GPIO_WritePin>
 8005624:	e000      	b.n	8005628 <LCD_DrawPixel+0x90>
    return;
 8005626:	bf00      	nop
#endif
}
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	48000400 	.word	0x48000400
 8005634:	20001850 	.word	0x20001850

08005638 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8005638:	b580      	push	{r7, lr}
 800563a:	b094      	sub	sp, #80	; 0x50
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b20      	cmp	r3, #32
 8005648:	d905      	bls.n	8005656 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 800564a:	1cbb      	adds	r3, r7, #2
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff feda 	bl	8005408 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8005654:	e026      	b.n	80056a4 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8005656:	2300      	movs	r3, #0
 8005658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800565a:	e009      	b.n	8005670 <LCD_FillPixels+0x38>
      fill[t]=color;
 800565c:	887a      	ldrh	r2, [r7, #2]
 800565e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	3350      	adds	r3, #80	; 0x50
 8005664:	443b      	add	r3, r7
 8005666:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 800566a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566c:	3301      	adds	r3, #1
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b20      	cmp	r3, #32
 8005674:	bf28      	it	cs
 8005676:	2320      	movcs	r3, #32
 8005678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800567a:	429a      	cmp	r2, r3
 800567c:	d3ee      	bcc.n	800565c <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 800567e:	e00e      	b.n	800569e <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b20      	cmp	r3, #32
 8005684:	bf28      	it	cs
 8005686:	2320      	movcs	r3, #32
 8005688:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff feb9 	bl	8005408 <LCD_WriteData>
      pixels-=sz;
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ed      	bne.n	8005680 <LCD_FillPixels+0x48>
}
 80056a4:	bf00      	nop
 80056a6:	3750      	adds	r7, #80	; 0x50
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80056ac:	b590      	push	{r4, r7, lr}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4604      	mov	r4, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	4611      	mov	r1, r2
 80056b8:	461a      	mov	r2, r3
 80056ba:	4623      	mov	r3, r4
 80056bc:	80fb      	strh	r3, [r7, #6]
 80056be:	4603      	mov	r3, r0
 80056c0:	80bb      	strh	r3, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	807b      	strh	r3, [r7, #2]
 80056c6:	4613      	mov	r3, r2
 80056c8:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80056ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d105      	bne.n	80056e0 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80056d4:	2100      	movs	r1, #0
 80056d6:	2001      	movs	r0, #1
 80056d8:	f7ff fdd0 	bl	800527c <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	e014      	b.n	800570a <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80056e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80056e4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056e8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056ec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80056f0:	f7ff fefa 	bl	80054e8 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80056f4:	2101      	movs	r1, #1
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7ff fdc0 	bl	800527c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80056fc:	2201      	movs	r2, #1
 80056fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005702:	4804      	ldr	r0, [pc, #16]	; (8005714 <LCD_FillArea+0x68>)
 8005704:	f004 f8d6 	bl	80098b4 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8005708:	4b03      	ldr	r3, [pc, #12]	; (8005718 <LCD_FillArea+0x6c>)
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	bd90      	pop	{r4, r7, pc}
 8005712:	bf00      	nop
 8005714:	48000400 	.word	0x48000400
 8005718:	08005639 	.word	0x08005639

0800571c <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	4604      	mov	r4, r0
 8005724:	4608      	mov	r0, r1
 8005726:	4611      	mov	r1, r2
 8005728:	461a      	mov	r2, r3
 800572a:	4623      	mov	r3, r4
 800572c:	80fb      	strh	r3, [r7, #6]
 800572e:	4603      	mov	r3, r0
 8005730:	80bb      	strh	r3, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	807b      	strh	r3, [r7, #2]
 8005736:	4613      	mov	r3, r2
 8005738:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800573a:	887a      	ldrh	r2, [r7, #2]
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	3301      	adds	r3, #1
 8005742:	4619      	mov	r1, r3
 8005744:	883a      	ldrh	r2, [r7, #0]
 8005746:	88bb      	ldrh	r3, [r7, #4]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	3301      	adds	r3, #1
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8005752:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005756:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800575a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800575e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005762:	f7ff fec1 	bl	80054e8 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005766:	2101      	movs	r1, #1
 8005768:	2000      	movs	r0, #0
 800576a:	f7ff fd87 	bl	800527c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 800576e:	8c3b      	ldrh	r3, [r7, #32]
 8005770:	4619      	mov	r1, r3
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7ff ff60 	bl	8005638 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8005778:	2100      	movs	r1, #0
 800577a:	2001      	movs	r0, #1
 800577c:	f7ff fd7e 	bl	800527c <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bd90      	pop	{r4, r7, pc}

0800578a <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800578a:	b590      	push	{r4, r7, lr}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	4603      	mov	r3, r0
 8005792:	603a      	str	r2, [r7, #0]
 8005794:	80fb      	strh	r3, [r7, #6]
 8005796:	460b      	mov	r3, r1
 8005798:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	889b      	ldrh	r3, [r3, #4]
 800579e:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	88db      	ldrh	r3, [r3, #6]
 80057a4:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	2bef      	cmp	r3, #239	; 0xef
 80057aa:	d839      	bhi.n	8005820 <LCD_DrawImage+0x96>
 80057ac:	88bb      	ldrh	r3, [r7, #4]
 80057ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80057b2:	d235      	bcs.n	8005820 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	89fb      	ldrh	r3, [r7, #14]
 80057b8:	4413      	add	r3, r2
 80057ba:	2bf0      	cmp	r3, #240	; 0xf0
 80057bc:	dc32      	bgt.n	8005824 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80057be:	88ba      	ldrh	r2, [r7, #4]
 80057c0:	89bb      	ldrh	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80057c8:	dc2e      	bgt.n	8005828 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	7a1b      	ldrb	r3, [r3, #8]
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d12c      	bne.n	800582c <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80057d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80057d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	89fb      	ldrh	r3, [r7, #14]
 80057de:	4413      	add	r3, r2
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	b21c      	sxth	r4, r3
 80057e8:	88ba      	ldrh	r2, [r7, #4]
 80057ea:	89bb      	ldrh	r3, [r7, #12]
 80057ec:	4413      	add	r3, r2
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	b21b      	sxth	r3, r3
 80057f6:	4622      	mov	r2, r4
 80057f8:	f7ff fe76 	bl	80054e8 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80057fc:	2101      	movs	r1, #1
 80057fe:	2001      	movs	r0, #1
 8005800:	f7ff fd3c 	bl	800527c <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	89fb      	ldrh	r3, [r7, #14]
 800580a:	89ba      	ldrh	r2, [r7, #12]
 800580c:	fb02 f303 	mul.w	r3, r2, r3
 8005810:	4619      	mov	r1, r3
 8005812:	f7ff fdf9 	bl	8005408 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005816:	2100      	movs	r1, #0
 8005818:	2001      	movs	r0, #1
 800581a:	f7ff fd2f 	bl	800527c <setDMAMemMode>
 800581e:	e006      	b.n	800582e <LCD_DrawImage+0xa4>
    return;
 8005820:	bf00      	nop
 8005822:	e004      	b.n	800582e <LCD_DrawImage+0xa4>
    return;
 8005824:	bf00      	nop
 8005826:	e002      	b.n	800582e <LCD_DrawImage+0xa4>
    return;
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <LCD_DrawImage+0xa4>
    return;
 800582c:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	bd90      	pop	{r4, r7, pc}

08005834 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8005834:	b590      	push	{r4, r7, lr}
 8005836:	b087      	sub	sp, #28
 8005838:	af02      	add	r7, sp, #8
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	461a      	mov	r2, r3
 8005842:	4623      	mov	r3, r4
 8005844:	80fb      	strh	r3, [r7, #6]
 8005846:	4603      	mov	r3, r0
 8005848:	80bb      	strh	r3, [r7, #4]
 800584a:	460b      	mov	r3, r1
 800584c:	807b      	strh	r3, [r7, #2]
 800584e:	4613      	mov	r3, r2
 8005850:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	887b      	ldrh	r3, [r7, #2]
 8005856:	429a      	cmp	r2, r3
 8005858:	d10a      	bne.n	8005870 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 800585a:	88ba      	ldrh	r2, [r7, #4]
 800585c:	883b      	ldrh	r3, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d918      	bls.n	8005894 <LCD_DrawLine+0x60>
 8005862:	88bb      	ldrh	r3, [r7, #4]
 8005864:	81bb      	strh	r3, [r7, #12]
 8005866:	883b      	ldrh	r3, [r7, #0]
 8005868:	80bb      	strh	r3, [r7, #4]
 800586a:	89bb      	ldrh	r3, [r7, #12]
 800586c:	803b      	strh	r3, [r7, #0]
 800586e:	e011      	b.n	8005894 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8005870:	88ba      	ldrh	r2, [r7, #4]
 8005872:	883b      	ldrh	r3, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d10a      	bne.n	800588e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	887b      	ldrh	r3, [r7, #2]
 800587c:	429a      	cmp	r2, r3
 800587e:	d909      	bls.n	8005894 <LCD_DrawLine+0x60>
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	81fb      	strh	r3, [r7, #14]
 8005884:	887b      	ldrh	r3, [r7, #2]
 8005886:	80fb      	strh	r3, [r7, #6]
 8005888:	89fb      	ldrh	r3, [r7, #14]
 800588a:	807b      	strh	r3, [r7, #2]
 800588c:	e002      	b.n	8005894 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800588e:	f04f 33ff 	mov.w	r3, #4294967295
 8005892:	e009      	b.n	80058a8 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8005894:	883c      	ldrh	r4, [r7, #0]
 8005896:	887a      	ldrh	r2, [r7, #2]
 8005898:	88b9      	ldrh	r1, [r7, #4]
 800589a:	88f8      	ldrh	r0, [r7, #6]
 800589c:	8c3b      	ldrh	r3, [r7, #32]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	4623      	mov	r3, r4
 80058a2:	f7ff ff3b 	bl	800571c <LCD_Fill>
  return UG_RESULT_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd90      	pop	{r4, r7, pc}

080058b0 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60ba      	str	r2, [r7, #8]
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	4603      	mov	r3, r0
 80058bc:	81fb      	strh	r3, [r7, #14]
 80058be:	460b      	mov	r3, r1
 80058c0:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f00c fbb2 	bl	801202c <UG_FontSelect>
  UG_SetForecolor(color);
 80058c8:	8b3b      	ldrh	r3, [r7, #24]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f00c fefa 	bl	80126c4 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80058d0:	8bbb      	ldrh	r3, [r7, #28]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f00c ff08 	bl	80126e8 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 80058d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058dc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f00c fe56 	bl	8012594 <UG_PutString>
}
 80058e8:	bf00      	nop
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <LCD_setPower+0x14>
 8005900:	2329      	movs	r3, #41	; 0x29
 8005902:	e000      	b.n	8005906 <LCD_setPower+0x16>
 8005904:	2328      	movs	r3, #40	; 0x28
 8005906:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005908:	f107 030c 	add.w	r3, r7, #12
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fd3e 	bl	8005390 <LCD_WriteCommand>
}
 8005914:	bf00      	nop
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <LCD_Update>:

static void LCD_Update(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005920:	2100      	movs	r1, #0
 8005922:	2001      	movs	r0, #1
 8005924:	f7ff fcaa 	bl	800527c <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}

0800592c <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005932:	2201      	movs	r2, #1
 8005934:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005938:	482a      	ldr	r0, [pc, #168]	; (80059e4 <LCD_init+0xb8>)
 800593a:	f003 ffbb 	bl	80098b4 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 800593e:	2200      	movs	r2, #0
 8005940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005944:	4827      	ldr	r0, [pc, #156]	; (80059e4 <LCD_init+0xb8>)
 8005946:	f003 ffb5 	bl	80098b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800594a:	2001      	movs	r0, #1
 800594c:	f000 f8ca 	bl	8005ae4 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 8005950:	2201      	movs	r2, #1
 8005952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005956:	4823      	ldr	r0, [pc, #140]	; (80059e4 <LCD_init+0xb8>)
 8005958:	f003 ffac 	bl	80098b4 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800595c:	20c8      	movs	r0, #200	; 0xc8
 800595e:	f000 f8c1 	bl	8005ae4 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8005962:	4921      	ldr	r1, [pc, #132]	; (80059e8 <LCD_init+0xbc>)
 8005964:	4821      	ldr	r0, [pc, #132]	; (80059ec <LCD_init+0xc0>)
 8005966:	f00c fac7 	bl	8011ef8 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 800596a:	4921      	ldr	r1, [pc, #132]	; (80059f0 <LCD_init+0xc4>)
 800596c:	2000      	movs	r0, #0
 800596e:	f00d ff51 	bl	8013814 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8005972:	4920      	ldr	r1, [pc, #128]	; (80059f4 <LCD_init+0xc8>)
 8005974:	2001      	movs	r0, #1
 8005976:	f00d ff4d 	bl	8013814 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 800597a:	491f      	ldr	r1, [pc, #124]	; (80059f8 <LCD_init+0xcc>)
 800597c:	2002      	movs	r0, #2
 800597e:	f00d ff49 	bl	8013814 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8005982:	491e      	ldr	r1, [pc, #120]	; (80059fc <LCD_init+0xd0>)
 8005984:	2003      	movs	r0, #3
 8005986:	f00d ff45 	bl	8013814 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800598a:	2000      	movs	r0, #0
 800598c:	f00c febe 	bl	801270c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8005990:	2000      	movs	r0, #0
 8005992:	f00c fecf 	bl	8012734 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005996:	2300      	movs	r3, #0
 8005998:	80fb      	strh	r3, [r7, #6]
 800599a:	e013      	b.n	80059c4 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 800599c:	88fb      	ldrh	r3, [r7, #6]
 800599e:	3301      	adds	r3, #1
 80059a0:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <LCD_init+0xd4>)
 80059a2:	441a      	add	r2, r3
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	4916      	ldr	r1, [pc, #88]	; (8005a00 <LCD_init+0xd4>)
 80059a8:	5ccb      	ldrb	r3, [r1, r3]
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f7ff fcef 	bl	8005390 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <LCD_init+0xd4>)
 80059b6:	5cd3      	ldrb	r3, [r2, r3]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	4413      	add	r3, r2
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3302      	adds	r3, #2
 80059c2:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	2b4b      	cmp	r3, #75	; 0x4b
 80059c8:	d9e8      	bls.n	800599c <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 80059ca:	2000      	movs	r0, #0
 80059cc:	f00c fb3e 	bl	801204c <UG_FillScreen>
  LCD_setPower(ENABLE);
 80059d0:	2001      	movs	r0, #1
 80059d2:	f7ff ff8d 	bl	80058f0 <LCD_setPower>
  UG_Update();
 80059d6:	f00d ff3f 	bl	8013858 <UG_Update>
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	48000400 	.word	0x48000400
 80059e8:	20000198 	.word	0x20000198
 80059ec:	20001c60 	.word	0x20001c60
 80059f0:	08005835 	.word	0x08005835
 80059f4:	0800571d 	.word	0x0800571d
 80059f8:	080056ad 	.word	0x080056ad
 80059fc:	0800578b 	.word	0x0800578b
 8005a00:	080190ec 	.word	0x080190ec

08005a04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a0e:	2003      	movs	r0, #3
 8005a10:	f002 fe74 	bl	80086fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a14:	200f      	movs	r0, #15
 8005a16:	f000 f80d 	bl	8005a34 <HAL_InitTick>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	71fb      	strb	r3, [r7, #7]
 8005a24:	e001      	b.n	8005a2a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a26:	f7fe fe13 	bl	8004650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a2a:	79fb      	ldrb	r3, [r7, #7]

}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005a40:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <HAL_InitTick+0x68>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d022      	beq.n	8005a8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <HAL_InitTick+0x6c>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <HAL_InitTick+0x68>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f002 fe80 	bl	8008762 <HAL_SYSTICK_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10f      	bne.n	8005a88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b0f      	cmp	r3, #15
 8005a6c:	d809      	bhi.n	8005a82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a6e:	2200      	movs	r2, #0
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	f04f 30ff 	mov.w	r0, #4294967295
 8005a76:	f002 fe4c 	bl	8008712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <HAL_InitTick+0x70>)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	e007      	b.n	8005a92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	73fb      	strb	r3, [r7, #15]
 8005a86:	e004      	b.n	8005a92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
 8005a8c:	e001      	b.n	8005a92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	200001a8 	.word	0x200001a8
 8005aa0:	20000190 	.word	0x20000190
 8005aa4:	200001a4 	.word	0x200001a4

08005aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_IncTick+0x1c>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <HAL_IncTick+0x20>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	4a03      	ldr	r2, [pc, #12]	; (8005ac4 <HAL_IncTick+0x1c>)
 8005ab8:	6013      	str	r3, [r2, #0]
}
 8005aba:	bf00      	nop
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	20001cd4 	.word	0x20001cd4
 8005ac8:	200001a8 	.word	0x200001a8

08005acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return uwTick;
 8005ad0:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <HAL_GetTick+0x14>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20001cd4 	.word	0x20001cd4

08005ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005aec:	f7ff ffee 	bl	8005acc <HAL_GetTick>
 8005af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d004      	beq.n	8005b08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005afe:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_Delay+0x40>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b08:	bf00      	nop
 8005b0a:	f7ff ffdf 	bl	8005acc <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d8f7      	bhi.n	8005b0a <HAL_Delay+0x26>
  {
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	200001a8 	.word	0x200001a8

08005b28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	609a      	str	r2, [r3, #8]
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3360      	adds	r3, #96	; 0x60
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <LL_ADC_SetOffset+0x44>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005bc8:	bf00      	nop
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	03fff000 	.word	0x03fff000

08005bd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3360      	adds	r3, #96	; 0x60
 8005be6:	461a      	mov	r2, r3
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3360      	adds	r3, #96	; 0x60
 8005c14:	461a      	mov	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b087      	sub	sp, #28
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3360      	adds	r3, #96	; 0x60
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3360      	adds	r3, #96	; 0x60
 8005c80:	461a      	mov	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	615a      	str	r2, [r3, #20]
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b087      	sub	sp, #28
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3330      	adds	r3, #48	; 0x30
 8005d02:	461a      	mov	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	0a1b      	lsrs	r3, r3, #8
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	f003 030c 	and.w	r3, r3, #12
 8005d0e:	4413      	add	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	211f      	movs	r1, #31
 8005d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d22:	43db      	mvns	r3, r3
 8005d24:	401a      	ands	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	0e9b      	lsrs	r3, r3, #26
 8005d2a:	f003 011f 	and.w	r1, r3, #31
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	fa01 f303 	lsl.w	r3, r1, r3
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d56:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	461a      	mov	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	0e5b      	lsrs	r3, r3, #25
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	4413      	add	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	0d1b      	lsrs	r3, r3, #20
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2107      	movs	r1, #7
 8005d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	401a      	ands	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	0d1b      	lsrs	r3, r3, #20
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	fa01 f303 	lsl.w	r3, r1, r3
 8005db4:	431a      	orrs	r2, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de0:	43db      	mvns	r3, r3
 8005de2:	401a      	ands	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f003 0318 	and.w	r3, r3, #24
 8005dea:	4908      	ldr	r1, [pc, #32]	; (8005e0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8005dec:	40d9      	lsrs	r1, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	400b      	ands	r3, r1
 8005df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df6:	431a      	orrs	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	0007ffff 	.word	0x0007ffff

08005e10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005e58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6093      	str	r3, [r2, #8]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e80:	d101      	bne.n	8005e86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005ea4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ed0:	d101      	bne.n	8005ed6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ef8:	f043 0201 	orr.w	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f20:	f043 0202 	orr.w	r2, r3, #2
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <LL_ADC_IsEnabled+0x18>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <LL_ADC_IsEnabled+0x1a>
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d101      	bne.n	8005f72 <LL_ADC_IsDisableOngoing+0x18>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <LL_ADC_IsDisableOngoing+0x1a>
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f94:	f043 0204 	orr.w	r2, r3, #4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d101      	bne.n	8005fc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d101      	bne.n	8005fe6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b089      	sub	sp, #36	; 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e167      	b.n	80062de <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d109      	bne.n	8006030 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fe fb3b 	bl	8004698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff ff19 	bl	8005e6c <LL_ADC_IsDeepPowerDownEnabled>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff feff 	bl	8005e48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff ff34 	bl	8005ebc <LL_ADC_IsInternalRegulatorEnabled>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d115      	bne.n	8006086 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff ff18 	bl	8005e94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006064:	4ba0      	ldr	r3, [pc, #640]	; (80062e8 <HAL_ADC_Init+0x2f4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	099b      	lsrs	r3, r3, #6
 800606a:	4aa0      	ldr	r2, [pc, #640]	; (80062ec <HAL_ADC_Init+0x2f8>)
 800606c:	fba2 2303 	umull	r2, r3, r2, r3
 8006070:	099b      	lsrs	r3, r3, #6
 8006072:	3301      	adds	r3, #1
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006078:	e002      	b.n	8006080 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3b01      	subs	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f9      	bne.n	800607a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff ff16 	bl	8005ebc <LL_ADC_IsInternalRegulatorEnabled>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10d      	bne.n	80060b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609a:	f043 0210 	orr.w	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a6:	f043 0201 	orr.w	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff ff76 	bl	8005fa8 <LL_ADC_REG_IsConversionOngoing>
 80060bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 8100 	bne.w	80062cc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f040 80fc 	bne.w	80062cc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80060dc:	f043 0202 	orr.w	r2, r3, #2
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff ff23 	bl	8005f34 <LL_ADC_IsEnabled>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d111      	bne.n	8006118 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80060f8:	f7ff ff1c 	bl	8005f34 <LL_ADC_IsEnabled>
 80060fc:	4604      	mov	r4, r0
 80060fe:	487c      	ldr	r0, [pc, #496]	; (80062f0 <HAL_ADC_Init+0x2fc>)
 8006100:	f7ff ff18 	bl	8005f34 <LL_ADC_IsEnabled>
 8006104:	4603      	mov	r3, r0
 8006106:	4323      	orrs	r3, r4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d105      	bne.n	8006118 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	4619      	mov	r1, r3
 8006112:	4878      	ldr	r0, [pc, #480]	; (80062f4 <HAL_ADC_Init+0x300>)
 8006114:	f7ff fd08 	bl	8005b28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	7f5b      	ldrb	r3, [r3, #29]
 800611c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006122:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006128:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800612e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006136:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006138:	4313      	orrs	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006142:	2b01      	cmp	r3, #1
 8006144:	d106      	bne.n	8006154 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	3b01      	subs	r3, #1
 800614c:	045b      	lsls	r3, r3, #17
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d009      	beq.n	8006170 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4313      	orrs	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	4b60      	ldr	r3, [pc, #384]	; (80062f8 <HAL_ADC_Init+0x304>)
 8006178:	4013      	ands	r3, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	69b9      	ldr	r1, [r7, #24]
 8006180:	430b      	orrs	r3, r1
 8006182:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff ff15 	bl	8005fce <LL_ADC_INJ_IsConversionOngoing>
 80061a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d16d      	bne.n	8006288 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d16a      	bne.n	8006288 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80061b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80061c0:	4313      	orrs	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ce:	f023 0302 	bic.w	r3, r3, #2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	69b9      	ldr	r1, [r7, #24]
 80061d8:	430b      	orrs	r3, r1
 80061da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d017      	beq.n	8006214 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80061f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80061fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6911      	ldr	r1, [r2, #16]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	430b      	orrs	r3, r1
 800620e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006212:	e013      	b.n	800623c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006222:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006238:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006242:	2b01      	cmp	r3, #1
 8006244:	d118      	bne.n	8006278 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006250:	f023 0304 	bic.w	r3, r3, #4
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800625c:	4311      	orrs	r1, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006262:	4311      	orrs	r1, r2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006268:	430a      	orrs	r2, r1
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	611a      	str	r2, [r3, #16]
 8006276:	e007      	b.n	8006288 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0201 	bic.w	r2, r2, #1
 8006286:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d10c      	bne.n	80062aa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	f023 010f 	bic.w	r1, r3, #15
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
 80062a8:	e007      	b.n	80062ba <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 020f 	bic.w	r2, r2, #15
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80062ca:	e007      	b.n	80062dc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	f043 0210 	orr.w	r2, r3, #16
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80062dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3724      	adds	r7, #36	; 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd90      	pop	{r4, r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000190 	.word	0x20000190
 80062ec:	053e2d63 	.word	0x053e2d63
 80062f0:	50000100 	.word	0x50000100
 80062f4:	50000300 	.word	0x50000300
 80062f8:	fff04007 	.word	0xfff04007

080062fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006308:	4851      	ldr	r0, [pc, #324]	; (8006450 <HAL_ADC_Start_DMA+0x154>)
 800630a:	f7ff fd81 	bl	8005e10 <LL_ADC_GetMultimode>
 800630e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff fe47 	bl	8005fa8 <LL_ADC_REG_IsConversionOngoing>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 808f 	bne.w	8006440 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_ADC_Start_DMA+0x34>
 800632c:	2302      	movs	r3, #2
 800632e:	e08a      	b.n	8006446 <HAL_ADC_Start_DMA+0x14a>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b05      	cmp	r3, #5
 8006342:	d002      	beq.n	800634a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b09      	cmp	r3, #9
 8006348:	d173      	bne.n	8006432 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 febc 	bl	80070c8 <ADC_Enable>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d166      	bne.n	8006428 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a38      	ldr	r2, [pc, #224]	; (8006454 <HAL_ADC_Start_DMA+0x158>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d002      	beq.n	800637e <HAL_ADC_Start_DMA+0x82>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	e001      	b.n	8006382 <HAL_ADC_Start_DMA+0x86>
 800637e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	4293      	cmp	r3, r2
 8006388:	d002      	beq.n	8006390 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d105      	bne.n	800639c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006394:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ac:	f023 0206 	bic.w	r2, r3, #6
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	661a      	str	r2, [r3, #96]	; 0x60
 80063b4:	e002      	b.n	80063bc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c0:	4a25      	ldr	r2, [pc, #148]	; (8006458 <HAL_ADC_Start_DMA+0x15c>)
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c8:	4a24      	ldr	r2, [pc, #144]	; (800645c <HAL_ADC_Start_DMA+0x160>)
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d0:	4a23      	ldr	r2, [pc, #140]	; (8006460 <HAL_ADC_Start_DMA+0x164>)
 80063d2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	221c      	movs	r2, #28
 80063da:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0210 	orr.w	r2, r2, #16
 80063f2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3340      	adds	r3, #64	; 0x40
 800640e:	4619      	mov	r1, r3
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f002 fc60 	bl	8008cd8 <HAL_DMA_Start_IT>
 8006418:	4603      	mov	r3, r0
 800641a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fdad 	bl	8005f80 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006426:	e00d      	b.n	8006444 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006430:	e008      	b.n	8006444 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800643e:	e001      	b.n	8006444 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006440:	2302      	movs	r3, #2
 8006442:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006444:	7dfb      	ldrb	r3, [r7, #23]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	50000300 	.word	0x50000300
 8006454:	50000100 	.word	0x50000100
 8006458:	08007293 	.word	0x08007293
 800645c:	0800736b 	.word	0x0800736b
 8006460:	08007387 	.word	0x08007387

08006464 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	; 0x28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800646c:	2300      	movs	r3, #0
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006480:	4883      	ldr	r0, [pc, #524]	; (8006690 <HAL_ADC_IRQHandler+0x22c>)
 8006482:	f7ff fcc5 	bl	8005e10 <LL_ADC_GetMultimode>
 8006486:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d017      	beq.n	80064c2 <HAL_ADC_IRQHandler+0x5e>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d012      	beq.n	80064c2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d105      	bne.n	80064b4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 fac3 	bl	8007a40 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2202      	movs	r2, #2
 80064c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <HAL_ADC_IRQHandler+0x72>
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8085 	beq.w	80065ec <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d07f      	beq.n	80065ec <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fbdf 	bl	8005ccc <LL_ADC_REG_IsTriggerSourceSWStart>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d064      	beq.n	80065de <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a5e      	ldr	r2, [pc, #376]	; (8006694 <HAL_ADC_IRQHandler+0x230>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d002      	beq.n	8006524 <HAL_ADC_IRQHandler+0xc0>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	e001      	b.n	8006528 <HAL_ADC_IRQHandler+0xc4>
 8006524:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	4293      	cmp	r3, r2
 800652e:	d008      	beq.n	8006542 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b05      	cmp	r3, #5
 800653a:	d002      	beq.n	8006542 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b09      	cmp	r3, #9
 8006540:	d104      	bne.n	800654c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	623b      	str	r3, [r7, #32]
 800654a:	e00d      	b.n	8006568 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a50      	ldr	r2, [pc, #320]	; (8006694 <HAL_ADC_IRQHandler+0x230>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d002      	beq.n	800655c <HAL_ADC_IRQHandler+0xf8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	e001      	b.n	8006560 <HAL_ADC_IRQHandler+0xfc>
 800655c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006560:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d135      	bne.n	80065de <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b08      	cmp	r3, #8
 800657e:	d12e      	bne.n	80065de <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fd0f 	bl	8005fa8 <LL_ADC_REG_IsConversionOngoing>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d11a      	bne.n	80065c6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 020c 	bic.w	r2, r2, #12
 800659e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d112      	bne.n	80065de <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	f043 0201 	orr.w	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80065c4:	e00b      	b.n	80065de <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ca:	f043 0210 	orr.w	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d6:	f043 0201 	orr.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f95a 	bl	8006898 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	220c      	movs	r2, #12
 80065ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <HAL_ADC_IRQHandler+0x19c>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10b      	bne.n	8006618 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 809e 	beq.w	8006748 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8098 	beq.w	8006748 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d105      	bne.n	8006630 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006628:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fb88 	bl	8005d4a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800663a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fb43 	bl	8005ccc <LL_ADC_REG_IsTriggerSourceSWStart>
 8006646:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a11      	ldr	r2, [pc, #68]	; (8006694 <HAL_ADC_IRQHandler+0x230>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d002      	beq.n	8006658 <HAL_ADC_IRQHandler+0x1f4>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	e001      	b.n	800665c <HAL_ADC_IRQHandler+0x1f8>
 8006658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	4293      	cmp	r3, r2
 8006662:	d008      	beq.n	8006676 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b06      	cmp	r3, #6
 800666e:	d002      	beq.n	8006676 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b07      	cmp	r3, #7
 8006674:	d104      	bne.n	8006680 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	e011      	b.n	80066a4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a03      	ldr	r2, [pc, #12]	; (8006694 <HAL_ADC_IRQHandler+0x230>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d006      	beq.n	8006698 <HAL_ADC_IRQHandler+0x234>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	e005      	b.n	800669c <HAL_ADC_IRQHandler+0x238>
 8006690:	50000300 	.word	0x50000300
 8006694:	50000100 	.word	0x50000100
 8006698:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800669c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d047      	beq.n	800673a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <HAL_ADC_IRQHandler+0x260>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d03f      	beq.n	800673a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d13a      	bne.n	800673a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d133      	bne.n	800673a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d12e      	bne.n	800673a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff fc74 	bl	8005fce <LL_ADC_INJ_IsConversionOngoing>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d11a      	bne.n	8006722 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066fa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006700:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006710:	2b00      	cmp	r3, #0
 8006712:	d112      	bne.n	800673a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006718:	f043 0201 	orr.w	r2, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006720:	e00b      	b.n	800673a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006726:	f043 0210 	orr.w	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006732:	f043 0201 	orr.w	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fc faee 	bl	8002d1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2260      	movs	r2, #96	; 0x60
 8006746:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d011      	beq.n	8006776 <HAL_ADC_IRQHandler+0x312>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00c      	beq.n	8006776 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006760:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8a9 	bl	80068c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2280      	movs	r2, #128	; 0x80
 8006774:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d012      	beq.n	80067a6 <HAL_ADC_IRQHandler+0x342>
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00d      	beq.n	80067a6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 f93e 	bl	8007a18 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <HAL_ADC_IRQHandler+0x372>
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00d      	beq.n	80067d6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 f930 	bl	8007a2c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d036      	beq.n	800684e <HAL_ADC_IRQHandler+0x3ea>
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d031      	beq.n	800684e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80067f2:	2301      	movs	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
 80067f6:	e014      	b.n	8006822 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d008      	beq.n	8006810 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80067fe:	4825      	ldr	r0, [pc, #148]	; (8006894 <HAL_ADC_IRQHandler+0x430>)
 8006800:	f7ff fb14 	bl	8005e2c <LL_ADC_GetMultiDMATransfer>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00b      	beq.n	8006822 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800680a:	2301      	movs	r3, #1
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
 800680e:	e008      	b.n	8006822 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800681e:	2301      	movs	r3, #1
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	2b01      	cmp	r3, #1
 8006826:	d10e      	bne.n	8006846 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006838:	f043 0202 	orr.w	r2, r3, #2
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f847 	bl	80068d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2210      	movs	r2, #16
 800684c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006854:	2b00      	cmp	r3, #0
 8006856:	d018      	beq.n	800688a <HAL_ADC_IRQHandler+0x426>
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685e:	2b00      	cmp	r3, #0
 8006860:	d013      	beq.n	800688a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006866:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006872:	f043 0208 	orr.w	r2, r3, #8
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006882:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 f8bd 	bl	8007a04 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800688a:	bf00      	nop
 800688c:	3728      	adds	r7, #40	; 0x28
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	50000300 	.word	0x50000300

08006898 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b0b6      	sub	sp, #216	; 0xd8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_ADC_ConfigChannel+0x22>
 8006906:	2302      	movs	r3, #2
 8006908:	e3c8      	b.n	800709c <HAL_ADC_ConfigChannel+0x7b4>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fb46 	bl	8005fa8 <LL_ADC_REG_IsConversionOngoing>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 83ad 	bne.w	800707e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	6859      	ldr	r1, [r3, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	f7ff f9de 	bl	8005cf2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff fb34 	bl	8005fa8 <LL_ADC_REG_IsConversionOngoing>
 8006940:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fb40 	bl	8005fce <LL_ADC_INJ_IsConversionOngoing>
 800694e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006952:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 81d9 	bne.w	8006d0e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800695c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006960:	2b00      	cmp	r3, #0
 8006962:	f040 81d4 	bne.w	8006d0e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800696e:	d10f      	bne.n	8006990 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2200      	movs	r2, #0
 800697a:	4619      	mov	r1, r3
 800697c:	f7ff f9f8 	bl	8005d70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff f98c 	bl	8005ca6 <LL_ADC_SetSamplingTimeCommonConfig>
 800698e:	e00e      	b.n	80069ae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	6819      	ldr	r1, [r3, #0]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	461a      	mov	r2, r3
 800699e:	f7ff f9e7 	bl	8005d70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2100      	movs	r1, #0
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff f97c 	bl	8005ca6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695a      	ldr	r2, [r3, #20]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	08db      	lsrs	r3, r3, #3
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d022      	beq.n	8006a16 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	6919      	ldr	r1, [r3, #16]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069e0:	f7ff f8d6 	bl	8005b90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6919      	ldr	r1, [r3, #16]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	461a      	mov	r2, r3
 80069f2:	f7ff f922 	bl	8005c3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d102      	bne.n	8006a0c <HAL_ADC_ConfigChannel+0x124>
 8006a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a0a:	e000      	b.n	8006a0e <HAL_ADC_ConfigChannel+0x126>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f7ff f92e 	bl	8005c70 <LL_ADC_SetOffsetSaturation>
 8006a14:	e17b      	b.n	8006d0e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff f8db 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <HAL_ADC_ConfigChannel+0x15a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff f8d0 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	0e9b      	lsrs	r3, r3, #26
 8006a3c:	f003 021f 	and.w	r2, r3, #31
 8006a40:	e01e      	b.n	8006a80 <HAL_ADC_ConfigChannel+0x198>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2100      	movs	r1, #0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff f8c5 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a58:	fa93 f3a3 	rbit	r3, r3
 8006a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006a68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006a70:	2320      	movs	r3, #32
 8006a72:	e004      	b.n	8006a7e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a78:	fab3 f383 	clz	r3, r3
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <HAL_ADC_ConfigChannel+0x1b0>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	0e9b      	lsrs	r3, r3, #26
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	e018      	b.n	8006aca <HAL_ADC_ConfigChannel+0x1e2>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006aa4:	fa93 f3a3 	rbit	r3, r3
 8006aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006abc:	2320      	movs	r3, #32
 8006abe:	e004      	b.n	8006aca <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006ac0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ac4:	fab3 f383 	clz	r3, r3
 8006ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d106      	bne.n	8006adc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff f894 	bl	8005c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff f878 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <HAL_ADC_ConfigChannel+0x220>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2101      	movs	r1, #1
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff f86d 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006afe:	4603      	mov	r3, r0
 8006b00:	0e9b      	lsrs	r3, r3, #26
 8006b02:	f003 021f 	and.w	r2, r3, #31
 8006b06:	e01e      	b.n	8006b46 <HAL_ADC_ConfigChannel+0x25e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff f862 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b1e:	fa93 f3a3 	rbit	r3, r3
 8006b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006b36:	2320      	movs	r3, #32
 8006b38:	e004      	b.n	8006b44 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8006b3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b3e:	fab3 f383 	clz	r3, r3
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d105      	bne.n	8006b5e <HAL_ADC_ConfigChannel+0x276>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	0e9b      	lsrs	r3, r3, #26
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	e018      	b.n	8006b90 <HAL_ADC_ConfigChannel+0x2a8>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b6a:	fa93 f3a3 	rbit	r3, r3
 8006b6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8006b82:	2320      	movs	r3, #32
 8006b84:	e004      	b.n	8006b90 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006b86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b8a:	fab3 f383 	clz	r3, r3
 8006b8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d106      	bne.n	8006ba2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff f831 	bl	8005c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2102      	movs	r1, #2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff f815 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <HAL_ADC_ConfigChannel+0x2e6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2102      	movs	r1, #2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff f80a 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	0e9b      	lsrs	r3, r3, #26
 8006bc8:	f003 021f 	and.w	r2, r3, #31
 8006bcc:	e01e      	b.n	8006c0c <HAL_ADC_ConfigChannel+0x324>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2102      	movs	r1, #2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fe ffff 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006be4:	fa93 f3a3 	rbit	r3, r3
 8006be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006bec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006bf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006bfc:	2320      	movs	r3, #32
 8006bfe:	e004      	b.n	8006c0a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c04:	fab3 f383 	clz	r3, r3
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d105      	bne.n	8006c24 <HAL_ADC_ConfigChannel+0x33c>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	0e9b      	lsrs	r3, r3, #26
 8006c1e:	f003 031f 	and.w	r3, r3, #31
 8006c22:	e016      	b.n	8006c52 <HAL_ADC_ConfigChannel+0x36a>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c30:	fa93 f3a3 	rbit	r3, r3
 8006c34:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006c44:	2320      	movs	r3, #32
 8006c46:	e004      	b.n	8006c52 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c4c:	fab3 f383 	clz	r3, r3
 8006c50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d106      	bne.n	8006c64 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe ffd0 	bl	8005c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2103      	movs	r1, #3
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe ffb4 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <HAL_ADC_ConfigChannel+0x3a8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2103      	movs	r1, #3
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe ffa9 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006c86:	4603      	mov	r3, r0
 8006c88:	0e9b      	lsrs	r3, r3, #26
 8006c8a:	f003 021f 	and.w	r2, r3, #31
 8006c8e:	e017      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x3d8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2103      	movs	r1, #3
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe ff9e 	bl	8005bd8 <LL_ADC_GetOffsetChannel>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca2:	fa93 f3a3 	rbit	r3, r3
 8006ca6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006caa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8006cb2:	2320      	movs	r3, #32
 8006cb4:	e003      	b.n	8006cbe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8006cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb8:	fab3 f383 	clz	r3, r3
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <HAL_ADC_ConfigChannel+0x3f0>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	0e9b      	lsrs	r3, r3, #26
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	e011      	b.n	8006cfc <HAL_ADC_ConfigChannel+0x414>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ce0:	fa93 f3a3 	rbit	r3, r3
 8006ce4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	e003      	b.n	8006cfc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf6:	fab3 f383 	clz	r3, r3
 8006cfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d106      	bne.n	8006d0e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2200      	movs	r2, #0
 8006d06:	2103      	movs	r1, #3
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe ff7b 	bl	8005c04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff f90e 	bl	8005f34 <LL_ADC_IsEnabled>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f040 8140 	bne.w	8006fa0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	6819      	ldr	r1, [r3, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f7ff f84b 	bl	8005dc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	4a8f      	ldr	r2, [pc, #572]	; (8006f74 <HAL_ADC_ConfigChannel+0x68c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	f040 8131 	bne.w	8006fa0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <HAL_ADC_ConfigChannel+0x47e>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	0e9b      	lsrs	r3, r3, #26
 8006d54:	3301      	adds	r3, #1
 8006d56:	f003 031f 	and.w	r3, r3, #31
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	bf94      	ite	ls
 8006d5e:	2301      	movls	r3, #1
 8006d60:	2300      	movhi	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	e019      	b.n	8006d9a <HAL_ADC_ConfigChannel+0x4b2>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d6e:	fa93 f3a3 	rbit	r3, r3
 8006d72:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d76:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006d7e:	2320      	movs	r3, #32
 8006d80:	e003      	b.n	8006d8a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d84:	fab3 f383 	clz	r3, r3
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	2b09      	cmp	r3, #9
 8006d92:	bf94      	ite	ls
 8006d94:	2301      	movls	r3, #1
 8006d96:	2300      	movhi	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d079      	beq.n	8006e92 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d107      	bne.n	8006dba <HAL_ADC_ConfigChannel+0x4d2>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	0e9b      	lsrs	r3, r3, #26
 8006db0:	3301      	adds	r3, #1
 8006db2:	069b      	lsls	r3, r3, #26
 8006db4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006db8:	e015      	b.n	8006de6 <HAL_ADC_ConfigChannel+0x4fe>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc2:	fa93 f3a3 	rbit	r3, r3
 8006dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006dd2:	2320      	movs	r3, #32
 8006dd4:	e003      	b.n	8006dde <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd8:	fab3 f383 	clz	r3, r3
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	3301      	adds	r3, #1
 8006de0:	069b      	lsls	r3, r3, #26
 8006de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <HAL_ADC_ConfigChannel+0x51e>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	0e9b      	lsrs	r3, r3, #26
 8006df8:	3301      	adds	r3, #1
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2101      	movs	r1, #1
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	e017      	b.n	8006e36 <HAL_ADC_ConfigChannel+0x54e>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0e:	fa93 f3a3 	rbit	r3, r3
 8006e12:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006e1e:	2320      	movs	r3, #32
 8006e20:	e003      	b.n	8006e2a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e24:	fab3 f383 	clz	r3, r3
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	2101      	movs	r1, #1
 8006e32:	fa01 f303 	lsl.w	r3, r1, r3
 8006e36:	ea42 0103 	orr.w	r1, r2, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10a      	bne.n	8006e5c <HAL_ADC_ConfigChannel+0x574>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	0e9b      	lsrs	r3, r3, #26
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	f003 021f 	and.w	r2, r3, #31
 8006e52:	4613      	mov	r3, r2
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	4413      	add	r3, r2
 8006e58:	051b      	lsls	r3, r3, #20
 8006e5a:	e018      	b.n	8006e8e <HAL_ADC_ConfigChannel+0x5a6>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	fa93 f3a3 	rbit	r3, r3
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006e74:	2320      	movs	r3, #32
 8006e76:	e003      	b.n	8006e80 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	fab3 f383 	clz	r3, r3
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	3301      	adds	r3, #1
 8006e82:	f003 021f 	and.w	r2, r3, #31
 8006e86:	4613      	mov	r3, r2
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	e081      	b.n	8006f96 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <HAL_ADC_ConfigChannel+0x5c6>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	0e9b      	lsrs	r3, r3, #26
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	069b      	lsls	r3, r3, #26
 8006ea8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eac:	e015      	b.n	8006eda <HAL_ADC_ConfigChannel+0x5f2>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	fa93 f3a3 	rbit	r3, r3
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006ec6:	2320      	movs	r3, #32
 8006ec8:	e003      	b.n	8006ed2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	fab3 f383 	clz	r3, r3
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	069b      	lsls	r3, r3, #26
 8006ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d109      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x612>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	0e9b      	lsrs	r3, r3, #26
 8006eec:	3301      	adds	r3, #1
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef8:	e017      	b.n	8006f2a <HAL_ADC_ConfigChannel+0x642>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	fa93 f3a3 	rbit	r3, r3
 8006f06:	61fb      	str	r3, [r7, #28]
  return result;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006f12:	2320      	movs	r3, #32
 8006f14:	e003      	b.n	8006f1e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	fab3 f383 	clz	r3, r3
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	3301      	adds	r3, #1
 8006f20:	f003 031f 	and.w	r3, r3, #31
 8006f24:	2101      	movs	r1, #1
 8006f26:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2a:	ea42 0103 	orr.w	r1, r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10d      	bne.n	8006f56 <HAL_ADC_ConfigChannel+0x66e>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	0e9b      	lsrs	r3, r3, #26
 8006f40:	3301      	adds	r3, #1
 8006f42:	f003 021f 	and.w	r2, r3, #31
 8006f46:	4613      	mov	r3, r2
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3b1e      	subs	r3, #30
 8006f4e:	051b      	lsls	r3, r3, #20
 8006f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f54:	e01e      	b.n	8006f94 <HAL_ADC_ConfigChannel+0x6ac>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	fa93 f3a3 	rbit	r3, r3
 8006f62:	613b      	str	r3, [r7, #16]
  return result;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006f6e:	2320      	movs	r3, #32
 8006f70:	e006      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x698>
 8006f72:	bf00      	nop
 8006f74:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	fab3 f383 	clz	r3, r3
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	3301      	adds	r3, #1
 8006f82:	f003 021f 	and.w	r2, r3, #31
 8006f86:	4613      	mov	r3, r2
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3b1e      	subs	r3, #30
 8006f8e:	051b      	lsls	r3, r3, #20
 8006f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f94:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f7fe fee8 	bl	8005d70 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	4b3f      	ldr	r3, [pc, #252]	; (80070a4 <HAL_ADC_ConfigChannel+0x7bc>)
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d071      	beq.n	8007090 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006fac:	483e      	ldr	r0, [pc, #248]	; (80070a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8006fae:	f7fe fde1 	bl	8005b74 <LL_ADC_GetCommonPathInternalCh>
 8006fb2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a3c      	ldr	r2, [pc, #240]	; (80070ac <HAL_ADC_ConfigChannel+0x7c4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d004      	beq.n	8006fca <HAL_ADC_ConfigChannel+0x6e2>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a3a      	ldr	r2, [pc, #232]	; (80070b0 <HAL_ADC_ConfigChannel+0x7c8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d127      	bne.n	800701a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d121      	bne.n	800701a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fde:	d157      	bne.n	8007090 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fe4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fe8:	4619      	mov	r1, r3
 8006fea:	482f      	ldr	r0, [pc, #188]	; (80070a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8006fec:	f7fe fdaf 	bl	8005b4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ff0:	4b30      	ldr	r3, [pc, #192]	; (80070b4 <HAL_ADC_ConfigChannel+0x7cc>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	099b      	lsrs	r3, r3, #6
 8006ff6:	4a30      	ldr	r2, [pc, #192]	; (80070b8 <HAL_ADC_ConfigChannel+0x7d0>)
 8006ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffc:	099b      	lsrs	r3, r3, #6
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	4613      	mov	r3, r2
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800700a:	e002      	b.n	8007012 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3b01      	subs	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f9      	bne.n	800700c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007018:	e03a      	b.n	8007090 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a27      	ldr	r2, [pc, #156]	; (80070bc <HAL_ADC_ConfigChannel+0x7d4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d113      	bne.n	800704c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10d      	bne.n	800704c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a22      	ldr	r2, [pc, #136]	; (80070c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d02a      	beq.n	8007090 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800703a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800703e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007042:	4619      	mov	r1, r3
 8007044:	4818      	ldr	r0, [pc, #96]	; (80070a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8007046:	f7fe fd82 	bl	8005b4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800704a:	e021      	b.n	8007090 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d11c      	bne.n	8007090 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007056:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800705a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d116      	bne.n	8007090 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d011      	beq.n	8007090 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800706c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007074:	4619      	mov	r1, r3
 8007076:	480c      	ldr	r0, [pc, #48]	; (80070a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8007078:	f7fe fd69 	bl	8005b4e <LL_ADC_SetCommonPathInternalCh>
 800707c:	e008      	b.n	8007090 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007098:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800709c:	4618      	mov	r0, r3
 800709e:	37d8      	adds	r7, #216	; 0xd8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	80080000 	.word	0x80080000
 80070a8:	50000300 	.word	0x50000300
 80070ac:	c3210000 	.word	0xc3210000
 80070b0:	90c00010 	.word	0x90c00010
 80070b4:	20000190 	.word	0x20000190
 80070b8:	053e2d63 	.word	0x053e2d63
 80070bc:	c7520000 	.word	0xc7520000
 80070c0:	50000100 	.word	0x50000100
 80070c4:	cb840000 	.word	0xcb840000

080070c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe ff2b 	bl	8005f34 <LL_ADC_IsEnabled>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d169      	bne.n	80071b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	4b36      	ldr	r3, [pc, #216]	; (80071c4 <ADC_Enable+0xfc>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00d      	beq.n	800710e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f6:	f043 0210 	orr.w	r2, r3, #16
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e055      	b.n	80071ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fee6 	bl	8005ee4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007118:	482b      	ldr	r0, [pc, #172]	; (80071c8 <ADC_Enable+0x100>)
 800711a:	f7fe fd2b 	bl	8005b74 <LL_ADC_GetCommonPathInternalCh>
 800711e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007124:	2b00      	cmp	r3, #0
 8007126:	d013      	beq.n	8007150 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007128:	4b28      	ldr	r3, [pc, #160]	; (80071cc <ADC_Enable+0x104>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	099b      	lsrs	r3, r3, #6
 800712e:	4a28      	ldr	r2, [pc, #160]	; (80071d0 <ADC_Enable+0x108>)
 8007130:	fba2 2303 	umull	r2, r3, r2, r3
 8007134:	099b      	lsrs	r3, r3, #6
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	4613      	mov	r3, r2
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007142:	e002      	b.n	800714a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3b01      	subs	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f9      	bne.n	8007144 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007150:	f7fe fcbc 	bl	8005acc <HAL_GetTick>
 8007154:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007156:	e028      	b.n	80071aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fee9 	bl	8005f34 <LL_ADC_IsEnabled>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d104      	bne.n	8007172 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe feb9 	bl	8005ee4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007172:	f7fe fcab 	bl	8005acc <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d914      	bls.n	80071aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b01      	cmp	r3, #1
 800718c:	d00d      	beq.n	80071aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007192:	f043 0210 	orr.w	r2, r3, #16
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e007      	b.n	80071ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d1cf      	bne.n	8007158 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	8000003f 	.word	0x8000003f
 80071c8:	50000300 	.word	0x50000300
 80071cc:	20000190 	.word	0x20000190
 80071d0:	053e2d63 	.word	0x053e2d63

080071d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fe feba 	bl	8005f5a <LL_ADC_IsDisableOngoing>
 80071e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fe fea1 	bl	8005f34 <LL_ADC_IsEnabled>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d047      	beq.n	8007288 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d144      	bne.n	8007288 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 030d 	and.w	r3, r3, #13
 8007208:	2b01      	cmp	r3, #1
 800720a:	d10c      	bne.n	8007226 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fe7b 	bl	8005f0c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2203      	movs	r2, #3
 800721c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800721e:	f7fe fc55 	bl	8005acc <HAL_GetTick>
 8007222:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007224:	e029      	b.n	800727a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722a:	f043 0210 	orr.w	r2, r3, #16
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007236:	f043 0201 	orr.w	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e023      	b.n	800728a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007242:	f7fe fc43 	bl	8005acc <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d914      	bls.n	800727a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00d      	beq.n	800727a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007262:	f043 0210 	orr.w	r2, r3, #16
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726e:	f043 0201 	orr.w	r2, r3, #1
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e007      	b.n	800728a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1dc      	bne.n	8007242 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d14b      	bne.n	8007344 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d021      	beq.n	800730a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fcfe 	bl	8005ccc <LL_ADC_REG_IsTriggerSourceSWStart>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d032      	beq.n	800733c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d12b      	bne.n	800733c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d11f      	bne.n	800733c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007300:	f043 0201 	orr.w	r2, r3, #1
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	65da      	str	r2, [r3, #92]	; 0x5c
 8007308:	e018      	b.n	800733c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d111      	bne.n	800733c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d105      	bne.n	800733c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007334:	f043 0201 	orr.w	r2, r3, #1
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff faab 	bl	8006898 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007342:	e00e      	b.n	8007362 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fabf 	bl	80068d4 <HAL_ADC_ErrorCallback>
}
 8007356:	e004      	b.n	8007362 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
}
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f7ff fa97 	bl	80068ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007398:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a4:	f043 0204 	orr.w	r2, r3, #4
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7ff fa91 	bl	80068d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <LL_ADC_SetCommonPathInternalCh>:
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	609a      	str	r2, [r3, #8]
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <LL_ADC_GetCommonPathInternalCh>:
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <LL_ADC_SetOffset>:
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3360      	adds	r3, #96	; 0x60
 800740e:	461a      	mov	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	4b08      	ldr	r3, [pc, #32]	; (8007440 <LL_ADC_SetOffset+0x44>)
 800741e:	4013      	ands	r3, r2
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	601a      	str	r2, [r3, #0]
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	03fff000 	.word	0x03fff000

08007444 <LL_ADC_GetOffsetChannel>:
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3360      	adds	r3, #96	; 0x60
 8007452:	461a      	mov	r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <LL_ADC_SetOffsetState>:
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3360      	adds	r3, #96	; 0x60
 8007480:	461a      	mov	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	431a      	orrs	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	601a      	str	r2, [r3, #0]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <LL_ADC_SetOffsetSign>:
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3360      	adds	r3, #96	; 0x60
 80074b6:	461a      	mov	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	601a      	str	r2, [r3, #0]
}
 80074d0:	bf00      	nop
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <LL_ADC_SetOffsetSaturation>:
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3360      	adds	r3, #96	; 0x60
 80074ec:	461a      	mov	r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	431a      	orrs	r2, r3
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	601a      	str	r2, [r3, #0]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	615a      	str	r2, [r3, #20]
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <LL_ADC_INJ_GetTrigAuto>:
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <LL_ADC_SetChannelSamplingTime>:
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3314      	adds	r3, #20
 8007564:	461a      	mov	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	0e5b      	lsrs	r3, r3, #25
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	4413      	add	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	0d1b      	lsrs	r3, r3, #20
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	2107      	movs	r1, #7
 8007582:	fa01 f303 	lsl.w	r3, r1, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	401a      	ands	r2, r3
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	0d1b      	lsrs	r3, r3, #20
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	fa01 f303 	lsl.w	r3, r1, r3
 8007598:	431a      	orrs	r2, r3
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	601a      	str	r2, [r3, #0]
}
 800759e:	bf00      	nop
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <LL_ADC_SetChannelSingleDiff>:
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075c4:	43db      	mvns	r3, r3
 80075c6:	401a      	ands	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f003 0318 	and.w	r3, r3, #24
 80075ce:	4908      	ldr	r1, [pc, #32]	; (80075f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80075d0:	40d9      	lsrs	r1, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	400b      	ands	r3, r1
 80075d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075da:	431a      	orrs	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80075e2:	bf00      	nop
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	0007ffff 	.word	0x0007ffff

080075f4 <LL_ADC_GetMultimode>:
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 031f 	and.w	r3, r3, #31
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <LL_ADC_IsEnabled>:
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <LL_ADC_IsEnabled+0x18>
 8007624:	2301      	movs	r3, #1
 8007626:	e000      	b.n	800762a <LL_ADC_IsEnabled+0x1a>
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <LL_ADC_StartCalibration>:
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007652:	4313      	orrs	r3, r2
 8007654:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	609a      	str	r2, [r3, #8]
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <LL_ADC_IsCalibrationOnGoing>:
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800767c:	d101      	bne.n	8007682 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <LL_ADC_REG_IsConversionOngoing>:
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d101      	bne.n	80076a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <LL_ADC_INJ_StartConversion>:
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80076ca:	f043 0208 	orr.w	r2, r3, #8
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	609a      	str	r2, [r3, #8]
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <LL_ADC_INJ_IsConversionOngoing>:
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 0308 	and.w	r3, r3, #8
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d101      	bne.n	80076f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800770e:	2300      	movs	r3, #0
 8007710:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_ADCEx_Calibration_Start+0x1c>
 800771c:	2302      	movs	r3, #2
 800771e:	e04d      	b.n	80077bc <HAL_ADCEx_Calibration_Start+0xb8>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff fd53 	bl	80071d4 <ADC_Disable>
 800772e:	4603      	mov	r3, r0
 8007730:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d136      	bne.n	80077a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800773c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007740:	f023 0302 	bic.w	r3, r3, #2
 8007744:	f043 0202 	orr.w	r2, r3, #2
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff ff6f 	bl	8007636 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007758:	e014      	b.n	8007784 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	3301      	adds	r3, #1
 800775e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d90d      	bls.n	8007784 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776c:	f023 0312 	bic.w	r3, r3, #18
 8007770:	f043 0210 	orr.w	r2, r3, #16
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e01b      	b.n	80077bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff ff6d 	bl	8007668 <LL_ADC_IsCalibrationOnGoing>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e2      	bne.n	800775a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007798:	f023 0303 	bic.w	r3, r3, #3
 800779c:	f043 0201 	orr.w	r2, r3, #1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80077a4:	e005      	b.n	80077b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077aa:	f043 0210 	orr.w	r2, r3, #16
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	0004de01 	.word	0x0004de01

080077c8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077d0:	486e      	ldr	r0, [pc, #440]	; (800798c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80077d2:	f7ff ff0f 	bl	80075f4 <LL_ADC_GetMultimode>
 80077d6:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff ff7e 	bl	80076de <LL_ADC_INJ_IsConversionOngoing>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80077e8:	2302      	movs	r3, #2
 80077ea:	e0ca      	b.n	8007982 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077f6:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d107      	bne.n	800781c <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007810:	f043 0220 	orr.w	r2, r3, #32
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e0b2      	b.n	8007982 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <HAL_ADCEx_InjectedStart_IT+0x62>
 8007826:	2302      	movs	r3, #2
 8007828:	e0ab      	b.n	8007982 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff fc48 	bl	80070c8 <ADC_Enable>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f040 809a 	bne.w	8007978 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784c:	2b00      	cmp	r3, #0
 800784e:	d006      	beq.n	800785e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007854:	f023 0208 	bic.w	r2, r3, #8
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	661a      	str	r2, [r3, #96]	; 0x60
 800785c:	e002      	b.n	8007864 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007868:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a44      	ldr	r2, [pc, #272]	; (8007990 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d002      	beq.n	8007888 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	e001      	b.n	800788c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8007888:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	4293      	cmp	r3, r2
 8007892:	d002      	beq.n	800789a <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d105      	bne.n	80078a6 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2260      	movs	r2, #96	; 0x60
 80078ac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078d2:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d110      	bne.n	80078fe <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0220 	bic.w	r2, r2, #32
 80078ea:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078fa:	605a      	str	r2, [r3, #4]
          break;
 80078fc:	e010      	b.n	8007920 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800790c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f042 0220 	orr.w	r2, r2, #32
 800791c:	605a      	str	r2, [r3, #4]
          break;
 800791e:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1a      	ldr	r2, [pc, #104]	; (8007990 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d002      	beq.n	8007930 <HAL_ADCEx_InjectedStart_IT+0x168>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	e001      	b.n	8007934 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8007930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6812      	ldr	r2, [r2, #0]
 8007938:	4293      	cmp	r3, r2
 800793a:	d008      	beq.n	800794e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b06      	cmp	r3, #6
 8007946:	d002      	beq.n	800794e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b07      	cmp	r3, #7
 800794c:	d10d      	bne.n	800796a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff fdf0 	bl	8007538 <LL_ADC_INJ_GetTrigAuto>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d110      	bne.n	8007980 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fea7 	bl	80076b6 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8007968:	e00a      	b.n	8007980 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	65da      	str	r2, [r3, #92]	; 0x5c
 8007976:	e003      	b.n	8007980 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	50000300 	.word	0x50000300
 8007990:	50000100 	.word	0x50000100

08007994 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(const ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	f240 321b 	movw	r2, #795	; 0x31b
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00e      	beq.n	80079c6 <HAL_ADCEx_InjectedGetValue+0x32>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 80079ae:	d21c      	bcs.n	80079ea <HAL_ADCEx_InjectedGetValue+0x56>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f240 120f 	movw	r2, #271	; 0x10f
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d011      	beq.n	80079de <HAL_ADCEx_InjectedGetValue+0x4a>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	f240 2215 	movw	r2, #533	; 0x215
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d006      	beq.n	80079d2 <HAL_ADCEx_InjectedGetValue+0x3e>
 80079c4:	e011      	b.n	80079ea <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ce:	60fb      	str	r3, [r7, #12]
      break;
 80079d0:	e011      	b.n	80079f6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079da:	60fb      	str	r3, [r7, #12]
      break;
 80079dc:	e00b      	b.n	80079f6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e6:	60fb      	str	r3, [r7, #12]
      break;
 80079e8:	e005      	b.n	80079f6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f2:	60fb      	str	r3, [r7, #12]
      break;
 80079f4:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 80079f6:	68fb      	ldr	r3, [r7, #12]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b0b6      	sub	sp, #216	; 0xd8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d102      	bne.n	8007a7e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	f000 bcb5 	b.w	80083e8 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d130      	bne.n	8007af8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2b09      	cmp	r3, #9
 8007a9c:	d179      	bne.n	8007b92 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d010      	beq.n	8007ac8 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	0e9b      	lsrs	r3, r3, #26
 8007aac:	025b      	lsls	r3, r3, #9
 8007aae:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007aba:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ac6:	e007      	b.n	8007ad8 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	0e9b      	lsrs	r3, r3, #26
 8007ace:	025b      	lsls	r3, r3, #9
 8007ad0:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8007ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ade:	4b84      	ldr	r3, [pc, #528]	; (8007cf0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6812      	ldr	r2, [r2, #0]
 8007ae6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007aea:	430b      	orrs	r3, r1
 8007aec:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007af4:	665a      	str	r2, [r3, #100]	; 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007af6:	e04c      	b.n	8007b92 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d11d      	bne.n	8007b3c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	6a1a      	ldr	r2, [r3, #32]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00d      	beq.n	8007b32 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b20:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007b24:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b30:	e004      	b.n	8007b3c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	0e9b      	lsrs	r3, r3, #26
 8007b42:	f003 021f 	and.w	r2, r3, #31
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f003 031f 	and.w	r3, r3, #31
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b60:	1e5a      	subs	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b82:	4b5b      	ldr	r3, [pc, #364]	; (8007cf0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff fda1 	bl	80076de <LL_ADC_INJ_IsConversionOngoing>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d124      	bne.n	8007bec <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d112      	bne.n	8007bd2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007bbc:	055a      	lsls	r2, r3, #21
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bc4:	051b      	lsls	r3, r3, #20
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	60da      	str	r2, [r3, #12]
 8007bd0:	e00c      	b.n	8007bec <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007be2:	055a      	lsls	r2, r3, #21
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff fd4d 	bl	8007690 <LL_ADC_REG_IsConversionOngoing>
 8007bf6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff fd6d 	bl	80076de <LL_ADC_INJ_IsConversionOngoing>
 8007c04:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 822e 	bne.w	800806e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f040 8229 	bne.w	800806e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d116      	bne.n	8007c5a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d108      	bne.n	8007c48 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007c44:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007c46:	e01f      	b.n	8007c88 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007c56:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007c58:	e016      	b.n	8007c88 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d109      	bne.n	8007c78 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c68:	f043 0220 	orr.w	r2, r3, #32
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007c76:	e007      	b.n	8007c88 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007c86:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d110      	bne.n	8007cb4 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0202 	orr.w	r2, r2, #2
 8007cb0:	611a      	str	r2, [r3, #16]
 8007cb2:	e007      	b.n	8007cc4 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0202 	bic.w	r2, r2, #2
 8007cc2:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ccc:	d112      	bne.n	8007cf4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f7ff fc3b 	bl	8007554 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fc13 	bl	8007512 <LL_ADC_SetSamplingTimeCommonConfig>
 8007cec:	e011      	b.n	8007d12 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8007cee:	bf00      	nop
 8007cf0:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8007d00:	461a      	mov	r2, r3
 8007d02:	f7ff fc27 	bl	8007554 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff fc00 	bl	8007512 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	695a      	ldr	r2, [r3, #20]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	08db      	lsrs	r3, r3, #3
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d022      	beq.n	8007d7a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	6919      	ldr	r1, [r3, #16]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d44:	f7ff fb5a 	bl	80073fc <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	6919      	ldr	r1, [r3, #16]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	461a      	mov	r2, r3
 8007d56:	f7ff fba6 	bl	80074a6 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d102      	bne.n	8007d70 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8007d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d6e:	e000      	b.n	8007d72 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8007d70:	2300      	movs	r3, #0
 8007d72:	461a      	mov	r2, r3
 8007d74:	f7ff fbb2 	bl	80074dc <LL_ADC_SetOffsetSaturation>
 8007d78:	e179      	b.n	800806e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2100      	movs	r1, #0
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff fb5f 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2100      	movs	r1, #0
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff fb54 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	0e9b      	lsrs	r3, r3, #26
 8007da0:	f003 021f 	and.w	r2, r3, #31
 8007da4:	e01e      	b.n	8007de4 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff fb49 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007db8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dbc:	fa93 f3a3 	rbit	r3, r3
 8007dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8007dc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8007dcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8007dd4:	2320      	movs	r3, #32
 8007dd6:	e004      	b.n	8007de2 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8007dd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ddc:	fab3 f383 	clz	r3, r3
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	0e9b      	lsrs	r3, r3, #26
 8007df6:	f003 031f 	and.w	r3, r3, #31
 8007dfa:	e018      	b.n	8007e2e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e08:	fa93 f3a3 	rbit	r3, r3
 8007e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8007e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8007e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8007e20:	2320      	movs	r3, #32
 8007e22:	e004      	b.n	8007e2e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8007e24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e28:	fab3 f383 	clz	r3, r3
 8007e2c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d106      	bne.n	8007e40 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff fb18 	bl	8007470 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2101      	movs	r1, #1
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fafc 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10a      	bne.n	8007e6c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff faf1 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007e62:	4603      	mov	r3, r0
 8007e64:	0e9b      	lsrs	r3, r3, #26
 8007e66:	f003 021f 	and.w	r2, r3, #31
 8007e6a:	e01e      	b.n	8007eaa <HAL_ADCEx_InjectedConfigChannel+0x456>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2101      	movs	r1, #1
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fae6 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e82:	fa93 f3a3 	rbit	r3, r3
 8007e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8007e8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8007e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8007e9a:	2320      	movs	r3, #32
 8007e9c:	e004      	b.n	8007ea8 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8007e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ea2:	fab3 f383 	clz	r3, r3
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	0e9b      	lsrs	r3, r3, #26
 8007ebc:	f003 031f 	and.w	r3, r3, #31
 8007ec0:	e018      	b.n	8007ef4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ece:	fa93 f3a3 	rbit	r3, r3
 8007ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8007ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007eda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8007ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8007ee6:	2320      	movs	r3, #32
 8007ee8:	e004      	b.n	8007ef4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8007eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eee:	fab3 f383 	clz	r3, r3
 8007ef2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d106      	bne.n	8007f06 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2200      	movs	r2, #0
 8007efe:	2101      	movs	r1, #1
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff fab5 	bl	8007470 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2102      	movs	r1, #2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fa99 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2102      	movs	r1, #2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fa8e 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	0e9b      	lsrs	r3, r3, #26
 8007f2c:	f003 021f 	and.w	r2, r3, #31
 8007f30:	e01e      	b.n	8007f70 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2102      	movs	r1, #2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff fa83 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f48:	fa93 f3a3 	rbit	r3, r3
 8007f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8007f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8007f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8007f60:	2320      	movs	r3, #32
 8007f62:	e004      	b.n	8007f6e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8007f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f68:	fab3 f383 	clz	r3, r3
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	0e9b      	lsrs	r3, r3, #26
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	e014      	b.n	8007fb2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f90:	fa93 f3a3 	rbit	r3, r3
 8007f94:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8007f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8007fa4:	2320      	movs	r3, #32
 8007fa6:	e004      	b.n	8007fb2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8007fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fac:	fab3 f383 	clz	r3, r3
 8007fb0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d106      	bne.n	8007fc4 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fa56 	bl	8007470 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2103      	movs	r1, #3
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7ff fa3a 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2103      	movs	r1, #3
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff fa2f 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	0e9b      	lsrs	r3, r3, #26
 8007fea:	f003 021f 	and.w	r2, r3, #31
 8007fee:	e017      	b.n	8008020 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2103      	movs	r1, #3
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fa24 	bl	8007444 <LL_ADC_GetOffsetChannel>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008002:	fa93 f3a3 	rbit	r3, r3
 8008006:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800800c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8008012:	2320      	movs	r3, #32
 8008014:	e003      	b.n	800801e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8008016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008018:	fab3 f383 	clz	r3, r3
 800801c:	b2db      	uxtb	r3, r3
 800801e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008028:	2b00      	cmp	r3, #0
 800802a:	d105      	bne.n	8008038 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	0e9b      	lsrs	r3, r3, #26
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	e011      	b.n	800805c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800803e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008040:	fa93 f3a3 	rbit	r3, r3
 8008044:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008048:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800804a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8008050:	2320      	movs	r3, #32
 8008052:	e003      	b.n	800805c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8008054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008056:	fab3 f383 	clz	r3, r3
 800805a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800805c:	429a      	cmp	r2, r3
 800805e:	d106      	bne.n	800806e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2200      	movs	r2, #0
 8008066:	2103      	movs	r1, #3
 8008068:	4618      	mov	r0, r3
 800806a:	f7ff fa01 	bl	8007470 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff facc 	bl	8007610 <LL_ADC_IsEnabled>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	f040 8140 	bne.w	8008300 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	6819      	ldr	r1, [r3, #0]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	461a      	mov	r2, r3
 800808e:	f7ff fa8d 	bl	80075ac <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	4a8f      	ldr	r2, [pc, #572]	; (80082d4 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8008098:	4293      	cmp	r3, r2
 800809a:	f040 8131 	bne.w	8008300 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10b      	bne.n	80080c6 <HAL_ADCEx_InjectedConfigChannel+0x672>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	0e9b      	lsrs	r3, r3, #26
 80080b4:	3301      	adds	r3, #1
 80080b6:	f003 031f 	and.w	r3, r3, #31
 80080ba:	2b09      	cmp	r3, #9
 80080bc:	bf94      	ite	ls
 80080be:	2301      	movls	r3, #1
 80080c0:	2300      	movhi	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	e019      	b.n	80080fa <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080ce:	fa93 f3a3 	rbit	r3, r3
 80080d2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80080d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80080d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80080de:	2320      	movs	r3, #32
 80080e0:	e003      	b.n	80080ea <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80080e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080e4:	fab3 f383 	clz	r3, r3
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	3301      	adds	r3, #1
 80080ec:	f003 031f 	and.w	r3, r3, #31
 80080f0:	2b09      	cmp	r3, #9
 80080f2:	bf94      	ite	ls
 80080f4:	2301      	movls	r3, #1
 80080f6:	2300      	movhi	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d079      	beq.n	80081f2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008106:	2b00      	cmp	r3, #0
 8008108:	d107      	bne.n	800811a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	0e9b      	lsrs	r3, r3, #26
 8008110:	3301      	adds	r3, #1
 8008112:	069b      	lsls	r3, r3, #26
 8008114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008118:	e015      	b.n	8008146 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008122:	fa93 f3a3 	rbit	r3, r3
 8008126:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8008128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800812a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800812c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8008132:	2320      	movs	r3, #32
 8008134:	e003      	b.n	800813e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8008136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008138:	fab3 f383 	clz	r3, r3
 800813c:	b2db      	uxtb	r3, r3
 800813e:	3301      	adds	r3, #1
 8008140:	069b      	lsls	r3, r3, #26
 8008142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	0e9b      	lsrs	r3, r3, #26
 8008158:	3301      	adds	r3, #1
 800815a:	f003 031f 	and.w	r3, r3, #31
 800815e:	2101      	movs	r1, #1
 8008160:	fa01 f303 	lsl.w	r3, r1, r3
 8008164:	e017      	b.n	8008196 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800816c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816e:	fa93 f3a3 	rbit	r3, r3
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008176:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8008178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800817e:	2320      	movs	r3, #32
 8008180:	e003      	b.n	800818a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8008182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008184:	fab3 f383 	clz	r3, r3
 8008188:	b2db      	uxtb	r3, r3
 800818a:	3301      	adds	r3, #1
 800818c:	f003 031f 	and.w	r3, r3, #31
 8008190:	2101      	movs	r1, #1
 8008192:	fa01 f303 	lsl.w	r3, r1, r3
 8008196:	ea42 0103 	orr.w	r1, r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <HAL_ADCEx_InjectedConfigChannel+0x768>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	0e9b      	lsrs	r3, r3, #26
 80081ac:	3301      	adds	r3, #1
 80081ae:	f003 021f 	and.w	r2, r3, #31
 80081b2:	4613      	mov	r3, r2
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	4413      	add	r3, r2
 80081b8:	051b      	lsls	r3, r3, #20
 80081ba:	e018      	b.n	80081ee <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c4:	fa93 f3a3 	rbit	r3, r3
 80081c8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80081d4:	2320      	movs	r3, #32
 80081d6:	e003      	b.n	80081e0 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	fab3 f383 	clz	r3, r3
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	3301      	adds	r3, #1
 80081e2:	f003 021f 	and.w	r2, r3, #31
 80081e6:	4613      	mov	r3, r2
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	4413      	add	r3, r2
 80081ec:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081ee:	430b      	orrs	r3, r1
 80081f0:	e081      	b.n	80082f6 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d107      	bne.n	800820e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	0e9b      	lsrs	r3, r3, #26
 8008204:	3301      	adds	r3, #1
 8008206:	069b      	lsls	r3, r3, #26
 8008208:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800820c:	e015      	b.n	800823a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	fa93 f3a3 	rbit	r3, r3
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8008226:	2320      	movs	r3, #32
 8008228:	e003      	b.n	8008232 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	fab3 f383 	clz	r3, r3
 8008230:	b2db      	uxtb	r3, r3
 8008232:	3301      	adds	r3, #1
 8008234:	069b      	lsls	r3, r3, #26
 8008236:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008242:	2b00      	cmp	r3, #0
 8008244:	d109      	bne.n	800825a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	0e9b      	lsrs	r3, r3, #26
 800824c:	3301      	adds	r3, #1
 800824e:	f003 031f 	and.w	r3, r3, #31
 8008252:	2101      	movs	r1, #1
 8008254:	fa01 f303 	lsl.w	r3, r1, r3
 8008258:	e017      	b.n	800828a <HAL_ADCEx_InjectedConfigChannel+0x836>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	fa93 f3a3 	rbit	r3, r3
 8008266:	61bb      	str	r3, [r7, #24]
  return result;
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8008272:	2320      	movs	r3, #32
 8008274:	e003      	b.n	800827e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	fab3 f383 	clz	r3, r3
 800827c:	b2db      	uxtb	r3, r3
 800827e:	3301      	adds	r3, #1
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	2101      	movs	r1, #1
 8008286:	fa01 f303 	lsl.w	r3, r1, r3
 800828a:	ea42 0103 	orr.w	r1, r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	0e9b      	lsrs	r3, r3, #26
 80082a0:	3301      	adds	r3, #1
 80082a2:	f003 021f 	and.w	r2, r3, #31
 80082a6:	4613      	mov	r3, r2
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	4413      	add	r3, r2
 80082ac:	3b1e      	subs	r3, #30
 80082ae:	051b      	lsls	r3, r3, #20
 80082b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082b4:	e01e      	b.n	80082f4 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	fa93 f3a3 	rbit	r3, r3
 80082c2:	60fb      	str	r3, [r7, #12]
  return result;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d104      	bne.n	80082d8 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 80082ce:	2320      	movs	r3, #32
 80082d0:	e006      	b.n	80082e0 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 80082d2:	bf00      	nop
 80082d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	fab3 f383 	clz	r3, r3
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	3301      	adds	r3, #1
 80082e2:	f003 021f 	and.w	r2, r3, #31
 80082e6:	4613      	mov	r3, r2
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	4413      	add	r3, r2
 80082ec:	3b1e      	subs	r3, #30
 80082ee:	051b      	lsls	r3, r3, #20
 80082f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082f4:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082fa:	4619      	mov	r1, r3
 80082fc:	f7ff f92a 	bl	8007554 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	4b3a      	ldr	r3, [pc, #232]	; (80083f0 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8008306:	4013      	ands	r3, r2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d067      	beq.n	80083dc <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800830c:	4839      	ldr	r0, [pc, #228]	; (80083f4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800830e:	f7ff f867 	bl	80073e0 <LL_ADC_GetCommonPathInternalCh>
 8008312:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a37      	ldr	r2, [pc, #220]	; (80083f8 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d004      	beq.n	800832a <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a35      	ldr	r2, [pc, #212]	; (80083fc <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d127      	bne.n	800837a <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800832a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800832e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d121      	bne.n	800837a <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800833e:	d14d      	bne.n	80083dc <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008348:	4619      	mov	r1, r3
 800834a:	482a      	ldr	r0, [pc, #168]	; (80083f4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800834c:	f7ff f835 	bl	80073ba <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8008350:	4b2b      	ldr	r3, [pc, #172]	; (8008400 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	099b      	lsrs	r3, r3, #6
 8008356:	4a2b      	ldr	r2, [pc, #172]	; (8008404 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8008358:	fba2 2303 	umull	r2, r3, r2, r3
 800835c:	099a      	lsrs	r2, r3, #6
 800835e:	4613      	mov	r3, r2
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8008368:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800836a:	e002      	b.n	8008372 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	3b01      	subs	r3, #1
 8008370:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1f9      	bne.n	800836c <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008378:	e030      	b.n	80083dc <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a22      	ldr	r2, [pc, #136]	; (8008408 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d113      	bne.n	80083ac <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10d      	bne.n	80083ac <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a1d      	ldr	r2, [pc, #116]	; (800840c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d020      	beq.n	80083dc <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800839a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800839e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083a2:	4619      	mov	r1, r3
 80083a4:	4813      	ldr	r0, [pc, #76]	; (80083f4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80083a6:	f7ff f808 	bl	80073ba <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083aa:	e017      	b.n	80083dc <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a17      	ldr	r2, [pc, #92]	; (8008410 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d112      	bne.n	80083dc <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80083b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10c      	bne.n	80083dc <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a11      	ldr	r2, [pc, #68]	; (800840c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80083cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083d4:	4619      	mov	r1, r3
 80083d6:	4807      	ldr	r0, [pc, #28]	; (80083f4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80083d8:	f7fe ffef 	bl	80073ba <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80083e4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	37d8      	adds	r7, #216	; 0xd8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	80080000 	.word	0x80080000
 80083f4:	50000300 	.word	0x50000300
 80083f8:	c3210000 	.word	0xc3210000
 80083fc:	90c00010 	.word	0x90c00010
 8008400:	20000190 	.word	0x20000190
 8008404:	053e2d63 	.word	0x053e2d63
 8008408:	c7520000 	.word	0xc7520000
 800840c:	50000100 	.word	0x50000100
 8008410:	cb840000 	.word	0xcb840000

08008414 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b0a1      	sub	sp, #132	; 0x84
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800842e:	2302      	movs	r3, #2
 8008430:	e08b      	b.n	800854a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800843a:	2300      	movs	r3, #0
 800843c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800843e:	2300      	movs	r3, #0
 8008440:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800844a:	d102      	bne.n	8008452 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800844c:	4b41      	ldr	r3, [pc, #260]	; (8008554 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800844e:	60bb      	str	r3, [r7, #8]
 8008450:	e001      	b.n	8008456 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008452:	2300      	movs	r3, #0
 8008454:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10b      	bne.n	8008474 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008460:	f043 0220 	orr.w	r2, r3, #32
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e06a      	b.n	800854a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff f90a 	bl	8007690 <LL_ADC_REG_IsConversionOngoing>
 800847c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff f904 	bl	8007690 <LL_ADC_REG_IsConversionOngoing>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d14c      	bne.n	8008528 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800848e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008490:	2b00      	cmp	r3, #0
 8008492:	d149      	bne.n	8008528 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008494:	4b30      	ldr	r3, [pc, #192]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8008496:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d028      	beq.n	80084f2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80084a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	6859      	ldr	r1, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084b2:	035b      	lsls	r3, r3, #13
 80084b4:	430b      	orrs	r3, r1
 80084b6:	431a      	orrs	r2, r3
 80084b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80084bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80084c0:	f7ff f8a6 	bl	8007610 <LL_ADC_IsEnabled>
 80084c4:	4604      	mov	r4, r0
 80084c6:	4823      	ldr	r0, [pc, #140]	; (8008554 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80084c8:	f7ff f8a2 	bl	8007610 <LL_ADC_IsEnabled>
 80084cc:	4603      	mov	r3, r0
 80084ce:	4323      	orrs	r3, r4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d133      	bne.n	800853c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80084d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80084dc:	f023 030f 	bic.w	r3, r3, #15
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	6811      	ldr	r1, [r2, #0]
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	6892      	ldr	r2, [r2, #8]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	431a      	orrs	r2, r3
 80084ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80084f0:	e024      	b.n	800853c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80084f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80084fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008502:	f7ff f885 	bl	8007610 <LL_ADC_IsEnabled>
 8008506:	4604      	mov	r4, r0
 8008508:	4812      	ldr	r0, [pc, #72]	; (8008554 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800850a:	f7ff f881 	bl	8007610 <LL_ADC_IsEnabled>
 800850e:	4603      	mov	r3, r0
 8008510:	4323      	orrs	r3, r4
 8008512:	2b00      	cmp	r3, #0
 8008514:	d112      	bne.n	800853c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800851e:	f023 030f 	bic.w	r3, r3, #15
 8008522:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008524:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008526:	e009      	b.n	800853c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852c:	f043 0220 	orr.w	r2, r3, #32
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800853a:	e000      	b.n	800853e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800853c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008546:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800854a:	4618      	mov	r0, r3
 800854c:	3784      	adds	r7, #132	; 0x84
 800854e:	46bd      	mov	sp, r7
 8008550:	bd90      	pop	{r4, r7, pc}
 8008552:	bf00      	nop
 8008554:	50000100 	.word	0x50000100
 8008558:	50000300 	.word	0x50000300

0800855c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800856c:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <__NVIC_SetPriorityGrouping+0x44>)
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008578:	4013      	ands	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800858c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800858e:	4a04      	ldr	r2, [pc, #16]	; (80085a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	60d3      	str	r3, [r2, #12]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	e000ed00 	.word	0xe000ed00

080085a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085a8:	4b04      	ldr	r3, [pc, #16]	; (80085bc <__NVIC_GetPriorityGrouping+0x18>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	f003 0307 	and.w	r3, r3, #7
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	e000ed00 	.word	0xe000ed00

080085c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	db0b      	blt.n	80085ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	f003 021f 	and.w	r2, r3, #31
 80085d8:	4907      	ldr	r1, [pc, #28]	; (80085f8 <__NVIC_EnableIRQ+0x38>)
 80085da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	2001      	movs	r0, #1
 80085e2:	fa00 f202 	lsl.w	r2, r0, r2
 80085e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	e000e100 	.word	0xe000e100

080085fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800860c:	2b00      	cmp	r3, #0
 800860e:	db0a      	blt.n	8008626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	490c      	ldr	r1, [pc, #48]	; (8008648 <__NVIC_SetPriority+0x4c>)
 8008616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800861a:	0112      	lsls	r2, r2, #4
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	440b      	add	r3, r1
 8008620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008624:	e00a      	b.n	800863c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	b2da      	uxtb	r2, r3
 800862a:	4908      	ldr	r1, [pc, #32]	; (800864c <__NVIC_SetPriority+0x50>)
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	3b04      	subs	r3, #4
 8008634:	0112      	lsls	r2, r2, #4
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	440b      	add	r3, r1
 800863a:	761a      	strb	r2, [r3, #24]
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	e000e100 	.word	0xe000e100
 800864c:	e000ed00 	.word	0xe000ed00

08008650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008650:	b480      	push	{r7}
 8008652:	b089      	sub	sp, #36	; 0x24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	f1c3 0307 	rsb	r3, r3, #7
 800866a:	2b04      	cmp	r3, #4
 800866c:	bf28      	it	cs
 800866e:	2304      	movcs	r3, #4
 8008670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3304      	adds	r3, #4
 8008676:	2b06      	cmp	r3, #6
 8008678:	d902      	bls.n	8008680 <NVIC_EncodePriority+0x30>
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	3b03      	subs	r3, #3
 800867e:	e000      	b.n	8008682 <NVIC_EncodePriority+0x32>
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008684:	f04f 32ff 	mov.w	r2, #4294967295
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	43da      	mvns	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	401a      	ands	r2, r3
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008698:	f04f 31ff 	mov.w	r1, #4294967295
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	fa01 f303 	lsl.w	r3, r1, r3
 80086a2:	43d9      	mvns	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086a8:	4313      	orrs	r3, r2
         );
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3724      	adds	r7, #36	; 0x24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086c8:	d301      	bcc.n	80086ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086ca:	2301      	movs	r3, #1
 80086cc:	e00f      	b.n	80086ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086ce:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <SysTick_Config+0x40>)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086d6:	210f      	movs	r1, #15
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	f7ff ff8e 	bl	80085fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <SysTick_Config+0x40>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086e6:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <SysTick_Config+0x40>)
 80086e8:	2207      	movs	r2, #7
 80086ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	e000e010 	.word	0xe000e010

080086fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff29 	bl	800855c <__NVIC_SetPriorityGrouping>
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b086      	sub	sp, #24
 8008716:	af00      	add	r7, sp, #0
 8008718:	4603      	mov	r3, r0
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008720:	f7ff ff40 	bl	80085a4 <__NVIC_GetPriorityGrouping>
 8008724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	68b9      	ldr	r1, [r7, #8]
 800872a:	6978      	ldr	r0, [r7, #20]
 800872c:	f7ff ff90 	bl	8008650 <NVIC_EncodePriority>
 8008730:	4602      	mov	r2, r0
 8008732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff ff5f 	bl	80085fc <__NVIC_SetPriority>
}
 800873e:	bf00      	nop
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	4603      	mov	r3, r0
 800874e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff ff33 	bl	80085c0 <__NVIC_EnableIRQ>
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff ffa4 	bl	80086b8 <SysTick_Config>
 8008770:	4603      	mov	r3, r0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e054      	b.n	8008838 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	7f5b      	ldrb	r3, [r3, #29]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	d105      	bne.n	80087a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7fc f88e 	bl	80048c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	791b      	ldrb	r3, [r3, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10c      	bne.n	80087cc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a22      	ldr	r2, [pc, #136]	; (8008840 <HAL_CRC_Init+0xc4>)
 80087b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 0218 	bic.w	r2, r2, #24
 80087c8:	609a      	str	r2, [r3, #8]
 80087ca:	e00c      	b.n	80087e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6899      	ldr	r1, [r3, #8]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	461a      	mov	r2, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f948 	bl	8008a6c <HAL_CRCEx_Polynomial_Set>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e028      	b.n	8008838 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	795b      	ldrb	r3, [r3, #5]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d105      	bne.n	80087fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f04f 32ff 	mov.w	r2, #4294967295
 80087f6:	611a      	str	r2, [r3, #16]
 80087f8:	e004      	b.n	8008804 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	6912      	ldr	r2, [r2, #16]
 8008802:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695a      	ldr	r2, [r3, #20]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	04c11db7 	.word	0x04c11db7

08008844 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2202      	movs	r2, #2
 8008858:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0201 	orr.w	r2, r2, #1
 8008868:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	2b03      	cmp	r3, #3
 8008870:	d006      	beq.n	8008880 <HAL_CRC_Calculate+0x3c>
 8008872:	2b03      	cmp	r3, #3
 8008874:	d829      	bhi.n	80088ca <HAL_CRC_Calculate+0x86>
 8008876:	2b01      	cmp	r3, #1
 8008878:	d019      	beq.n	80088ae <HAL_CRC_Calculate+0x6a>
 800887a:	2b02      	cmp	r3, #2
 800887c:	d01e      	beq.n	80088bc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800887e:	e024      	b.n	80088ca <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	e00a      	b.n	800889c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	441a      	add	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6812      	ldr	r2, [r2, #0]
 8008894:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	3301      	adds	r3, #1
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d3f0      	bcc.n	8008886 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	613b      	str	r3, [r7, #16]
      break;
 80088ac:	e00e      	b.n	80088cc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 f812 	bl	80088dc <CRC_Handle_8>
 80088b8:	6138      	str	r0, [r7, #16]
      break;
 80088ba:	e007      	b.n	80088cc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	68b9      	ldr	r1, [r7, #8]
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 f899 	bl	80089f8 <CRC_Handle_16>
 80088c6:	6138      	str	r0, [r7, #16]
      break;
 80088c8:	e000      	b.n	80088cc <HAL_CRC_Calculate+0x88>
      break;
 80088ca:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80088d2:	693b      	ldr	r3, [r7, #16]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80088dc:	b480      	push	{r7}
 80088de:	b089      	sub	sp, #36	; 0x24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80088e8:	2300      	movs	r3, #0
 80088ea:	61fb      	str	r3, [r7, #28]
 80088ec:	e023      	b.n	8008936 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	4413      	add	r3, r2
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	3301      	adds	r3, #1
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	440b      	add	r3, r1
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008908:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	3302      	adds	r3, #2
 8008910:	68b9      	ldr	r1, [r7, #8]
 8008912:	440b      	add	r3, r1
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008918:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	3303      	adds	r3, #3
 8008920:	68b9      	ldr	r1, [r7, #8]
 8008922:	440b      	add	r3, r1
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800892c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800892e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	3301      	adds	r3, #1
 8008934:	61fb      	str	r3, [r7, #28]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	089b      	lsrs	r3, r3, #2
 800893a:	69fa      	ldr	r2, [r7, #28]
 800893c:	429a      	cmp	r2, r3
 800893e:	d3d6      	bcc.n	80088ee <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d04d      	beq.n	80089e6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f003 0303 	and.w	r3, r3, #3
 8008950:	2b01      	cmp	r3, #1
 8008952:	d107      	bne.n	8008964 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	4413      	add	r3, r2
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d116      	bne.n	800899c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4413      	add	r3, r2
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	b21a      	sxth	r2, r3
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	3301      	adds	r3, #1
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	440b      	add	r3, r1
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	b21b      	sxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b21b      	sxth	r3, r3
 800898e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	8b7a      	ldrh	r2, [r7, #26]
 800899a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d11f      	bne.n	80089e6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	4413      	add	r3, r2
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	b21a      	sxth	r2, r3
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	3301      	adds	r3, #1
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	440b      	add	r3, r1
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	b21b      	sxth	r3, r3
 80089c2:	4313      	orrs	r3, r2
 80089c4:	b21b      	sxth	r3, r3
 80089c6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	8b7a      	ldrh	r2, [r7, #26]
 80089d2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	3302      	adds	r3, #2
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	4413      	add	r3, r2
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	6812      	ldr	r2, [r2, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3724      	adds	r7, #36	; 0x24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008a04:	2300      	movs	r3, #0
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	e013      	b.n	8008a32 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	041a      	lsls	r2, r3, #16
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	3302      	adds	r3, #2
 8008a1c:	68b9      	ldr	r1, [r7, #8]
 8008a1e:	440b      	add	r3, r1
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	4619      	mov	r1, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	085b      	lsrs	r3, r3, #1
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d3e6      	bcc.n	8008a0a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d009      	beq.n	8008a5a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	4413      	add	r3, r2
 8008a54:	881a      	ldrh	r2, [r3, #0]
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008a7c:	231f      	movs	r3, #31
 8008a7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d102      	bne.n	8008a90 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	75fb      	strb	r3, [r7, #23]
 8008a8e:	e063      	b.n	8008b58 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008a90:	bf00      	nop
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	1e5a      	subs	r2, r3, #1
 8008a96:	613a      	str	r2, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d009      	beq.n	8008ab0 <HAL_CRCEx_Polynomial_Set+0x44>
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f003 031f 	and.w	r3, r3, #31
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0f0      	beq.n	8008a92 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b18      	cmp	r3, #24
 8008ab4:	d846      	bhi.n	8008b44 <HAL_CRCEx_Polynomial_Set+0xd8>
 8008ab6:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <HAL_CRCEx_Polynomial_Set+0x50>)
 8008ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abc:	08008b4b 	.word	0x08008b4b
 8008ac0:	08008b45 	.word	0x08008b45
 8008ac4:	08008b45 	.word	0x08008b45
 8008ac8:	08008b45 	.word	0x08008b45
 8008acc:	08008b45 	.word	0x08008b45
 8008ad0:	08008b45 	.word	0x08008b45
 8008ad4:	08008b45 	.word	0x08008b45
 8008ad8:	08008b45 	.word	0x08008b45
 8008adc:	08008b39 	.word	0x08008b39
 8008ae0:	08008b45 	.word	0x08008b45
 8008ae4:	08008b45 	.word	0x08008b45
 8008ae8:	08008b45 	.word	0x08008b45
 8008aec:	08008b45 	.word	0x08008b45
 8008af0:	08008b45 	.word	0x08008b45
 8008af4:	08008b45 	.word	0x08008b45
 8008af8:	08008b45 	.word	0x08008b45
 8008afc:	08008b2d 	.word	0x08008b2d
 8008b00:	08008b45 	.word	0x08008b45
 8008b04:	08008b45 	.word	0x08008b45
 8008b08:	08008b45 	.word	0x08008b45
 8008b0c:	08008b45 	.word	0x08008b45
 8008b10:	08008b45 	.word	0x08008b45
 8008b14:	08008b45 	.word	0x08008b45
 8008b18:	08008b45 	.word	0x08008b45
 8008b1c:	08008b21 	.word	0x08008b21
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2b06      	cmp	r3, #6
 8008b24:	d913      	bls.n	8008b4e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008b2a:	e010      	b.n	8008b4e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	2b07      	cmp	r3, #7
 8008b30:	d90f      	bls.n	8008b52 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008b36:	e00c      	b.n	8008b52 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	2b0f      	cmp	r3, #15
 8008b3c:	d90b      	bls.n	8008b56 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008b42:	e008      	b.n	8008b56 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
        break;
 8008b48:	e006      	b.n	8008b58 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b4a:	bf00      	nop
 8008b4c:	e004      	b.n	8008b58 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b4e:	bf00      	nop
 8008b50:	e002      	b.n	8008b58 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b52:	bf00      	nop
 8008b54:	e000      	b.n	8008b58 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b56:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10d      	bne.n	8008b7a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f023 0118 	bic.w	r1, r3, #24
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e08d      	b.n	8008cb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4b47      	ldr	r3, [pc, #284]	; (8008cc0 <HAL_DMA_Init+0x138>)
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d80f      	bhi.n	8008bc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	4b45      	ldr	r3, [pc, #276]	; (8008cc4 <HAL_DMA_Init+0x13c>)
 8008bae:	4413      	add	r3, r2
 8008bb0:	4a45      	ldr	r2, [pc, #276]	; (8008cc8 <HAL_DMA_Init+0x140>)
 8008bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb6:	091b      	lsrs	r3, r3, #4
 8008bb8:	009a      	lsls	r2, r3, #2
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a42      	ldr	r2, [pc, #264]	; (8008ccc <HAL_DMA_Init+0x144>)
 8008bc2:	641a      	str	r2, [r3, #64]	; 0x40
 8008bc4:	e00e      	b.n	8008be4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4b40      	ldr	r3, [pc, #256]	; (8008cd0 <HAL_DMA_Init+0x148>)
 8008bce:	4413      	add	r3, r2
 8008bd0:	4a3d      	ldr	r2, [pc, #244]	; (8008cc8 <HAL_DMA_Init+0x140>)
 8008bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd6:	091b      	lsrs	r3, r3, #4
 8008bd8:	009a      	lsls	r2, r3, #2
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a3c      	ldr	r2, [pc, #240]	; (8008cd4 <HAL_DMA_Init+0x14c>)
 8008be2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f9c4 	bl	8008fc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c44:	d102      	bne.n	8008c4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c54:	b2d2      	uxtb	r2, r2
 8008c56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008c60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d010      	beq.n	8008c8c <HAL_DMA_Init+0x104>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d80c      	bhi.n	8008c8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f9e4 	bl	8009040 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008c88:	605a      	str	r2, [r3, #4]
 8008c8a:	e008      	b.n	8008c9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	40020407 	.word	0x40020407
 8008cc4:	bffdfff8 	.word	0xbffdfff8
 8008cc8:	cccccccd 	.word	0xcccccccd
 8008ccc:	40020000 	.word	0x40020000
 8008cd0:	bffdfbf8 	.word	0xbffdfbf8
 8008cd4:	40020400 	.word	0x40020400

08008cd8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_DMA_Start_IT+0x20>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e066      	b.n	8008dc6 <HAL_DMA_Start_IT+0xee>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d155      	bne.n	8008db8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0201 	bic.w	r2, r2, #1
 8008d28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	68b9      	ldr	r1, [r7, #8]
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f909 	bl	8008f48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d008      	beq.n	8008d50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 020e 	orr.w	r2, r2, #14
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	e00f      	b.n	8008d70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0204 	bic.w	r2, r2, #4
 8008d5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 020a 	orr.w	r2, r2, #10
 8008d6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d007      	beq.n	8008da6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008da4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f042 0201 	orr.w	r2, r2, #1
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	e005      	b.n	8008dc4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	f003 031f 	and.w	r3, r3, #31
 8008dee:	2204      	movs	r2, #4
 8008df0:	409a      	lsls	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4013      	ands	r3, r2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d026      	beq.n	8008e48 <HAL_DMA_IRQHandler+0x7a>
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d021      	beq.n	8008e48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d107      	bne.n	8008e22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0204 	bic.w	r2, r2, #4
 8008e20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e26:	f003 021f 	and.w	r2, r3, #31
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	2104      	movs	r1, #4
 8008e30:	fa01 f202 	lsl.w	r2, r1, r2
 8008e34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d071      	beq.n	8008f22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008e46:	e06c      	b.n	8008f22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4c:	f003 031f 	and.w	r3, r3, #31
 8008e50:	2202      	movs	r2, #2
 8008e52:	409a      	lsls	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4013      	ands	r3, r2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d02e      	beq.n	8008eba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d029      	beq.n	8008eba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 020a 	bic.w	r2, r2, #10
 8008e82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e90:	f003 021f 	and.w	r2, r3, #31
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e98:	2102      	movs	r1, #2
 8008e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8008e9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d038      	beq.n	8008f22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008eb8:	e033      	b.n	8008f22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ebe:	f003 031f 	and.w	r3, r3, #31
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	409a      	lsls	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d02a      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f003 0308 	and.w	r3, r3, #8
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d025      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 020e 	bic.w	r2, r2, #14
 8008ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eec:	f003 021f 	and.w	r2, r3, #31
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8008efa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008f22:	bf00      	nop
 8008f24:	bf00      	nop
}
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008f3a:	b2db      	uxtb	r3, r3
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008f5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008f70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f76:	f003 021f 	and.w	r2, r3, #31
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	2101      	movs	r1, #1
 8008f80:	fa01 f202 	lsl.w	r2, r1, r2
 8008f84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d108      	bne.n	8008fa8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008fa6:	e007      	b.n	8008fb8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	60da      	str	r2, [r3, #12]
}
 8008fb8:	bf00      	nop
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4b16      	ldr	r3, [pc, #88]	; (800902c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d802      	bhi.n	8008fde <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008fd8:	4b15      	ldr	r3, [pc, #84]	; (8009030 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	e001      	b.n	8008fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8008fde:	4b15      	ldr	r3, [pc, #84]	; (8009034 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008fe0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	3b08      	subs	r3, #8
 8008fee:	4a12      	ldr	r2, [pc, #72]	; (8009038 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	091b      	lsrs	r3, r3, #4
 8008ff6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffc:	089b      	lsrs	r3, r3, #2
 8008ffe:	009a      	lsls	r2, r3, #2
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	4413      	add	r3, r2
 8009004:	461a      	mov	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a0b      	ldr	r2, [pc, #44]	; (800903c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800900e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f003 031f 	and.w	r3, r3, #31
 8009016:	2201      	movs	r2, #1
 8009018:	409a      	lsls	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800901e:	bf00      	nop
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	40020407 	.word	0x40020407
 8009030:	40020800 	.word	0x40020800
 8009034:	40020820 	.word	0x40020820
 8009038:	cccccccd 	.word	0xcccccccd
 800903c:	40020880 	.word	0x40020880

08009040 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009054:	4413      	add	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	461a      	mov	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a08      	ldr	r2, [pc, #32]	; (8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009062:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3b01      	subs	r3, #1
 8009068:	f003 031f 	and.w	r3, r3, #31
 800906c:	2201      	movs	r2, #1
 800906e:	409a      	lsls	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009074:	bf00      	nop
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	1000823f 	.word	0x1000823f
 8009084:	40020940 	.word	0x40020940

08009088 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800909a:	4b2f      	ldr	r3, [pc, #188]	; (8009158 <HAL_FLASH_Program+0xd0>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d101      	bne.n	80090a6 <HAL_FLASH_Program+0x1e>
 80090a2:	2302      	movs	r3, #2
 80090a4:	e053      	b.n	800914e <HAL_FLASH_Program+0xc6>
 80090a6:	4b2c      	ldr	r3, [pc, #176]	; (8009158 <HAL_FLASH_Program+0xd0>)
 80090a8:	2201      	movs	r2, #1
 80090aa:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80090b0:	f000 f892 	bl	80091d8 <FLASH_WaitForLastOperation>
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d143      	bne.n	8009146 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80090be:	4b26      	ldr	r3, [pc, #152]	; (8009158 <HAL_FLASH_Program+0xd0>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80090c4:	4b25      	ldr	r3, [pc, #148]	; (800915c <HAL_FLASH_Program+0xd4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d009      	beq.n	80090e4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80090d0:	4b22      	ldr	r3, [pc, #136]	; (800915c <HAL_FLASH_Program+0xd4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a21      	ldr	r2, [pc, #132]	; (800915c <HAL_FLASH_Program+0xd4>)
 80090d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090da:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80090dc:	4b1e      	ldr	r3, [pc, #120]	; (8009158 <HAL_FLASH_Program+0xd0>)
 80090de:	2202      	movs	r2, #2
 80090e0:	771a      	strb	r2, [r3, #28]
 80090e2:	e002      	b.n	80090ea <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80090e4:	4b1c      	ldr	r3, [pc, #112]	; (8009158 <HAL_FLASH_Program+0xd0>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d107      	bne.n	8009100 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80090f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f4:	68b8      	ldr	r0, [r7, #8]
 80090f6:	f000 f8c3 	bl	8009280 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80090fa:	2301      	movs	r3, #1
 80090fc:	613b      	str	r3, [r7, #16]
 80090fe:	e010      	b.n	8009122 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d002      	beq.n	800910c <HAL_FLASH_Program+0x84>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d10a      	bne.n	8009122 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	4619      	mov	r1, r3
 8009110:	68b8      	ldr	r0, [r7, #8]
 8009112:	f000 f8db 	bl	80092cc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b02      	cmp	r3, #2
 800911a:	d102      	bne.n	8009122 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800911c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009120:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009122:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009126:	f000 f857 	bl	80091d8 <FLASH_WaitForLastOperation>
 800912a:	4603      	mov	r3, r0
 800912c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d006      	beq.n	8009142 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <HAL_FLASH_Program+0xd4>)
 8009136:	695a      	ldr	r2, [r3, #20]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	43db      	mvns	r3, r3
 800913c:	4907      	ldr	r1, [pc, #28]	; (800915c <HAL_FLASH_Program+0xd4>)
 800913e:	4013      	ands	r3, r2
 8009140:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009142:	f000 f9d3 	bl	80094ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009146:	4b04      	ldr	r3, [pc, #16]	; (8009158 <HAL_FLASH_Program+0xd0>)
 8009148:	2200      	movs	r2, #0
 800914a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800914c:	7dfb      	ldrb	r3, [r7, #23]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200001ac 	.word	0x200001ac
 800915c:	40022000 	.word	0x40022000

08009160 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800916a:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <HAL_FLASH_Unlock+0x38>)
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	da0b      	bge.n	800918a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <HAL_FLASH_Unlock+0x38>)
 8009174:	4a09      	ldr	r2, [pc, #36]	; (800919c <HAL_FLASH_Unlock+0x3c>)
 8009176:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009178:	4b07      	ldr	r3, [pc, #28]	; (8009198 <HAL_FLASH_Unlock+0x38>)
 800917a:	4a09      	ldr	r2, [pc, #36]	; (80091a0 <HAL_FLASH_Unlock+0x40>)
 800917c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <HAL_FLASH_Unlock+0x38>)
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	da01      	bge.n	800918a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800918a:	79fb      	ldrb	r3, [r7, #7]
}
 800918c:	4618      	mov	r0, r3
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	40022000 	.word	0x40022000
 800919c:	45670123 	.word	0x45670123
 80091a0:	cdef89ab 	.word	0xcdef89ab

080091a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80091ae:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <HAL_FLASH_Lock+0x30>)
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	4a08      	ldr	r2, [pc, #32]	; (80091d4 <HAL_FLASH_Lock+0x30>)
 80091b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091b8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80091ba:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <HAL_FLASH_Lock+0x30>)
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	da01      	bge.n	80091c6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80091c6:	79fb      	ldrb	r3, [r7, #7]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	40022000 	.word	0x40022000

080091d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80091e0:	f7fc fc74 	bl	8005acc <HAL_GetTick>
 80091e4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80091e6:	e009      	b.n	80091fc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80091e8:	f7fc fc70 	bl	8005acc <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d201      	bcs.n	80091fc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e038      	b.n	800926e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80091fc:	4b1e      	ldr	r3, [pc, #120]	; (8009278 <FLASH_WaitForLastOperation+0xa0>)
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009208:	d0ee      	beq.n	80091e8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800920a:	4b1b      	ldr	r3, [pc, #108]	; (8009278 <FLASH_WaitForLastOperation+0xa0>)
 800920c:	691a      	ldr	r2, [r3, #16]
 800920e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8009212:	4013      	ands	r3, r2
 8009214:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01e      	beq.n	800925a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800921c:	4b17      	ldr	r3, [pc, #92]	; (800927c <FLASH_WaitForLastOperation+0xa4>)
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	4313      	orrs	r3, r2
 8009224:	4a15      	ldr	r2, [pc, #84]	; (800927c <FLASH_WaitForLastOperation+0xa4>)
 8009226:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d007      	beq.n	8009242 <FLASH_WaitForLastOperation+0x6a>
 8009232:	4b11      	ldr	r3, [pc, #68]	; (8009278 <FLASH_WaitForLastOperation+0xa0>)
 8009234:	699a      	ldr	r2, [r3, #24]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800923c:	490e      	ldr	r1, [pc, #56]	; (8009278 <FLASH_WaitForLastOperation+0xa0>)
 800923e:	4313      	orrs	r3, r2
 8009240:	618b      	str	r3, [r1, #24]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <FLASH_WaitForLastOperation+0x7e>
 800924c:	4a0a      	ldr	r2, [pc, #40]	; (8009278 <FLASH_WaitForLastOperation+0xa0>)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009254:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e009      	b.n	800926e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800925a:	4b07      	ldr	r3, [pc, #28]	; (8009278 <FLASH_WaitForLastOperation+0xa0>)
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b01      	cmp	r3, #1
 8009264:	d102      	bne.n	800926c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009266:	4b04      	ldr	r3, [pc, #16]	; (8009278 <FLASH_WaitForLastOperation+0xa0>)
 8009268:	2201      	movs	r2, #1
 800926a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	40022000 	.word	0x40022000
 800927c:	200001ac 	.word	0x200001ac

08009280 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800928c:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <FLASH_Program_DoubleWord+0x48>)
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	4a0d      	ldr	r2, [pc, #52]	; (80092c8 <FLASH_Program_DoubleWord+0x48>)
 8009292:	f043 0301 	orr.w	r3, r3, #1
 8009296:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800929e:	f3bf 8f6f 	isb	sy
}
 80092a2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80092a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092a8:	f04f 0200 	mov.w	r2, #0
 80092ac:	f04f 0300 	mov.w	r3, #0
 80092b0:	000a      	movs	r2, r1
 80092b2:	2300      	movs	r3, #0
 80092b4:	68f9      	ldr	r1, [r7, #12]
 80092b6:	3104      	adds	r1, #4
 80092b8:	4613      	mov	r3, r2
 80092ba:	600b      	str	r3, [r1, #0]
}
 80092bc:	bf00      	nop
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	40022000 	.word	0x40022000

080092cc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b089      	sub	sp, #36	; 0x24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80092d6:	2340      	movs	r3, #64	; 0x40
 80092d8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80092e2:	4b14      	ldr	r3, [pc, #80]	; (8009334 <FLASH_Program_Fast+0x68>)
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	4a13      	ldr	r2, [pc, #76]	; (8009334 <FLASH_Program_Fast+0x68>)
 80092e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ee:	f3ef 8310 	mrs	r3, PRIMASK
 80092f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80092f4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80092f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80092f8:	b672      	cpsid	i
}
 80092fa:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	3304      	adds	r3, #4
 8009308:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	3304      	adds	r3, #4
 800930e:	617b      	str	r3, [r7, #20]
    row_index--;
 8009310:	7ffb      	ldrb	r3, [r7, #31]
 8009312:	3b01      	subs	r3, #1
 8009314:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8009316:	7ffb      	ldrb	r3, [r7, #31]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1ef      	bne.n	80092fc <FLASH_Program_Fast+0x30>
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f383 8810 	msr	PRIMASK, r3
}
 8009326:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009328:	bf00      	nop
 800932a:	3724      	adds	r7, #36	; 0x24
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	40022000 	.word	0x40022000

08009338 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009342:	4b47      	ldr	r3, [pc, #284]	; (8009460 <HAL_FLASHEx_Erase+0x128>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d101      	bne.n	800934e <HAL_FLASHEx_Erase+0x16>
 800934a:	2302      	movs	r3, #2
 800934c:	e083      	b.n	8009456 <HAL_FLASHEx_Erase+0x11e>
 800934e:	4b44      	ldr	r3, [pc, #272]	; (8009460 <HAL_FLASHEx_Erase+0x128>)
 8009350:	2201      	movs	r2, #1
 8009352:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009358:	f7ff ff3e 	bl	80091d8 <FLASH_WaitForLastOperation>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d173      	bne.n	800944e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009366:	4b3e      	ldr	r3, [pc, #248]	; (8009460 <HAL_FLASHEx_Erase+0x128>)
 8009368:	2200      	movs	r2, #0
 800936a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800936c:	4b3d      	ldr	r3, [pc, #244]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009374:	2b00      	cmp	r3, #0
 8009376:	d013      	beq.n	80093a0 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009378:	4b3a      	ldr	r3, [pc, #232]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009380:	2b00      	cmp	r3, #0
 8009382:	d009      	beq.n	8009398 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009384:	4b37      	ldr	r3, [pc, #220]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a36      	ldr	r2, [pc, #216]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 800938a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800938e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009390:	4b33      	ldr	r3, [pc, #204]	; (8009460 <HAL_FLASHEx_Erase+0x128>)
 8009392:	2203      	movs	r2, #3
 8009394:	771a      	strb	r2, [r3, #28]
 8009396:	e016      	b.n	80093c6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009398:	4b31      	ldr	r3, [pc, #196]	; (8009460 <HAL_FLASHEx_Erase+0x128>)
 800939a:	2201      	movs	r2, #1
 800939c:	771a      	strb	r2, [r3, #28]
 800939e:	e012      	b.n	80093c6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80093a0:	4b30      	ldr	r3, [pc, #192]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d009      	beq.n	80093c0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80093ac:	4b2d      	ldr	r3, [pc, #180]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a2c      	ldr	r2, [pc, #176]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 80093b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093b6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80093b8:	4b29      	ldr	r3, [pc, #164]	; (8009460 <HAL_FLASHEx_Erase+0x128>)
 80093ba:	2202      	movs	r2, #2
 80093bc:	771a      	strb	r2, [r3, #28]
 80093be:	e002      	b.n	80093c6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80093c0:	4b27      	ldr	r3, [pc, #156]	; (8009460 <HAL_FLASHEx_Erase+0x128>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d111      	bne.n	80093f2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f848 	bl	8009468 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093dc:	f7ff fefc 	bl	80091d8 <FLASH_WaitForLastOperation>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80093e4:	4b1f      	ldr	r3, [pc, #124]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	4a1e      	ldr	r2, [pc, #120]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 80093ea:	f023 0304 	bic.w	r3, r3, #4
 80093ee:	6153      	str	r3, [r2, #20]
 80093f0:	e02b      	b.n	800944a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	f04f 32ff 	mov.w	r2, #4294967295
 80093f8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	60bb      	str	r3, [r7, #8]
 8009400:	e01b      	b.n	800943a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	4619      	mov	r1, r3
 8009408:	68b8      	ldr	r0, [r7, #8]
 800940a:	f000 f84b 	bl	80094a4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800940e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009412:	f7ff fee1 	bl	80091d8 <FLASH_WaitForLastOperation>
 8009416:	4603      	mov	r3, r0
 8009418:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800941a:	4b12      	ldr	r3, [pc, #72]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	4a11      	ldr	r2, [pc, #68]	; (8009464 <HAL_FLASHEx_Erase+0x12c>)
 8009420:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8009424:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	601a      	str	r2, [r3, #0]
          break;
 8009432:	e00a      	b.n	800944a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	3301      	adds	r3, #1
 8009438:	60bb      	str	r3, [r7, #8]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	4413      	add	r3, r2
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	429a      	cmp	r2, r3
 8009448:	d3db      	bcc.n	8009402 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800944a:	f000 f84f 	bl	80094ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800944e:	4b04      	ldr	r3, [pc, #16]	; (8009460 <HAL_FLASHEx_Erase+0x128>)
 8009450:	2200      	movs	r2, #0
 8009452:	701a      	strb	r2, [r3, #0]

  return status;
 8009454:	7bfb      	ldrb	r3, [r7, #15]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	200001ac 	.word	0x200001ac
 8009464:	40022000 	.word	0x40022000

08009468 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800947a:	4b09      	ldr	r3, [pc, #36]	; (80094a0 <FLASH_MassErase+0x38>)
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	4a08      	ldr	r2, [pc, #32]	; (80094a0 <FLASH_MassErase+0x38>)
 8009480:	f043 0304 	orr.w	r3, r3, #4
 8009484:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009486:	4b06      	ldr	r3, [pc, #24]	; (80094a0 <FLASH_MassErase+0x38>)
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	4a05      	ldr	r2, [pc, #20]	; (80094a0 <FLASH_MassErase+0x38>)
 800948c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009490:	6153      	str	r3, [r2, #20]
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	40022000 	.word	0x40022000

080094a4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80094ae:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <FLASH_PageErase+0x44>)
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80094be:	490a      	ldr	r1, [pc, #40]	; (80094e8 <FLASH_PageErase+0x44>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80094c4:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <FLASH_PageErase+0x44>)
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	4a07      	ldr	r2, [pc, #28]	; (80094e8 <FLASH_PageErase+0x44>)
 80094ca:	f043 0302 	orr.w	r3, r3, #2
 80094ce:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <FLASH_PageErase+0x44>)
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	4a04      	ldr	r2, [pc, #16]	; (80094e8 <FLASH_PageErase+0x44>)
 80094d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094da:	6153      	str	r3, [r2, #20]
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	40022000 	.word	0x40022000

080094ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80094f2:	4b21      	ldr	r3, [pc, #132]	; (8009578 <FLASH_FlushCaches+0x8c>)
 80094f4:	7f1b      	ldrb	r3, [r3, #28]
 80094f6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d002      	beq.n	8009504 <FLASH_FlushCaches+0x18>
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	2b03      	cmp	r3, #3
 8009502:	d117      	bne.n	8009534 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009504:	4b1d      	ldr	r3, [pc, #116]	; (800957c <FLASH_FlushCaches+0x90>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a1c      	ldr	r2, [pc, #112]	; (800957c <FLASH_FlushCaches+0x90>)
 800950a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800950e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009510:	4b1a      	ldr	r3, [pc, #104]	; (800957c <FLASH_FlushCaches+0x90>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a19      	ldr	r2, [pc, #100]	; (800957c <FLASH_FlushCaches+0x90>)
 8009516:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	4b17      	ldr	r3, [pc, #92]	; (800957c <FLASH_FlushCaches+0x90>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a16      	ldr	r2, [pc, #88]	; (800957c <FLASH_FlushCaches+0x90>)
 8009522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009526:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009528:	4b14      	ldr	r3, [pc, #80]	; (800957c <FLASH_FlushCaches+0x90>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a13      	ldr	r2, [pc, #76]	; (800957c <FLASH_FlushCaches+0x90>)
 800952e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009532:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d002      	beq.n	8009540 <FLASH_FlushCaches+0x54>
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	2b03      	cmp	r3, #3
 800953e:	d111      	bne.n	8009564 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009540:	4b0e      	ldr	r3, [pc, #56]	; (800957c <FLASH_FlushCaches+0x90>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a0d      	ldr	r2, [pc, #52]	; (800957c <FLASH_FlushCaches+0x90>)
 8009546:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	4b0b      	ldr	r3, [pc, #44]	; (800957c <FLASH_FlushCaches+0x90>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a0a      	ldr	r2, [pc, #40]	; (800957c <FLASH_FlushCaches+0x90>)
 8009552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009556:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009558:	4b08      	ldr	r3, [pc, #32]	; (800957c <FLASH_FlushCaches+0x90>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a07      	ldr	r2, [pc, #28]	; (800957c <FLASH_FlushCaches+0x90>)
 800955e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009562:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009564:	4b04      	ldr	r3, [pc, #16]	; (8009578 <FLASH_FlushCaches+0x8c>)
 8009566:	2200      	movs	r2, #0
 8009568:	771a      	strb	r2, [r3, #28]
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	200001ac 	.word	0x200001ac
 800957c:	40022000 	.word	0x40022000

08009580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800958a:	2300      	movs	r3, #0
 800958c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800958e:	e15a      	b.n	8009846 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	2101      	movs	r1, #1
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	fa01 f303 	lsl.w	r3, r1, r3
 800959c:	4013      	ands	r3, r2
 800959e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 814c 	beq.w	8009840 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f003 0303 	and.w	r3, r3, #3
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d005      	beq.n	80095c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d130      	bne.n	8009622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	2203      	movs	r2, #3
 80095cc:	fa02 f303 	lsl.w	r3, r2, r3
 80095d0:	43db      	mvns	r3, r3
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	4013      	ands	r3, r2
 80095d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	68da      	ldr	r2, [r3, #12]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	fa02 f303 	lsl.w	r3, r2, r3
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80095f6:	2201      	movs	r2, #1
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	fa02 f303 	lsl.w	r3, r2, r3
 80095fe:	43db      	mvns	r3, r3
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4013      	ands	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	091b      	lsrs	r3, r3, #4
 800960c:	f003 0201 	and.w	r2, r3, #1
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	fa02 f303 	lsl.w	r3, r2, r3
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	4313      	orrs	r3, r2
 800961a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	2b03      	cmp	r3, #3
 800962c:	d017      	beq.n	800965e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	2203      	movs	r2, #3
 800963a:	fa02 f303 	lsl.w	r3, r2, r3
 800963e:	43db      	mvns	r3, r3
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	4013      	ands	r3, r2
 8009644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	fa02 f303 	lsl.w	r3, r2, r3
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	4313      	orrs	r3, r2
 8009656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f003 0303 	and.w	r3, r3, #3
 8009666:	2b02      	cmp	r3, #2
 8009668:	d123      	bne.n	80096b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	08da      	lsrs	r2, r3, #3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3208      	adds	r2, #8
 8009672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	220f      	movs	r2, #15
 8009682:	fa02 f303 	lsl.w	r3, r2, r3
 8009686:	43db      	mvns	r3, r3
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	4013      	ands	r3, r2
 800968c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	691a      	ldr	r2, [r3, #16]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f003 0307 	and.w	r3, r3, #7
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	fa02 f303 	lsl.w	r3, r2, r3
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	08da      	lsrs	r2, r3, #3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3208      	adds	r2, #8
 80096ac:	6939      	ldr	r1, [r7, #16]
 80096ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	005b      	lsls	r3, r3, #1
 80096bc:	2203      	movs	r2, #3
 80096be:	fa02 f303 	lsl.w	r3, r2, r3
 80096c2:	43db      	mvns	r3, r3
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	4013      	ands	r3, r2
 80096c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f003 0203 	and.w	r2, r3, #3
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	fa02 f303 	lsl.w	r3, r2, r3
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	4313      	orrs	r3, r2
 80096de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 80a6 	beq.w	8009840 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096f4:	4b5b      	ldr	r3, [pc, #364]	; (8009864 <HAL_GPIO_Init+0x2e4>)
 80096f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096f8:	4a5a      	ldr	r2, [pc, #360]	; (8009864 <HAL_GPIO_Init+0x2e4>)
 80096fa:	f043 0301 	orr.w	r3, r3, #1
 80096fe:	6613      	str	r3, [r2, #96]	; 0x60
 8009700:	4b58      	ldr	r3, [pc, #352]	; (8009864 <HAL_GPIO_Init+0x2e4>)
 8009702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	60bb      	str	r3, [r7, #8]
 800970a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800970c:	4a56      	ldr	r2, [pc, #344]	; (8009868 <HAL_GPIO_Init+0x2e8>)
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	089b      	lsrs	r3, r3, #2
 8009712:	3302      	adds	r3, #2
 8009714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009718:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	220f      	movs	r2, #15
 8009724:	fa02 f303 	lsl.w	r3, r2, r3
 8009728:	43db      	mvns	r3, r3
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	4013      	ands	r3, r2
 800972e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009736:	d01f      	beq.n	8009778 <HAL_GPIO_Init+0x1f8>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a4c      	ldr	r2, [pc, #304]	; (800986c <HAL_GPIO_Init+0x2ec>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d019      	beq.n	8009774 <HAL_GPIO_Init+0x1f4>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a4b      	ldr	r2, [pc, #300]	; (8009870 <HAL_GPIO_Init+0x2f0>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d013      	beq.n	8009770 <HAL_GPIO_Init+0x1f0>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a4a      	ldr	r2, [pc, #296]	; (8009874 <HAL_GPIO_Init+0x2f4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d00d      	beq.n	800976c <HAL_GPIO_Init+0x1ec>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a49      	ldr	r2, [pc, #292]	; (8009878 <HAL_GPIO_Init+0x2f8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d007      	beq.n	8009768 <HAL_GPIO_Init+0x1e8>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a48      	ldr	r2, [pc, #288]	; (800987c <HAL_GPIO_Init+0x2fc>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d101      	bne.n	8009764 <HAL_GPIO_Init+0x1e4>
 8009760:	2305      	movs	r3, #5
 8009762:	e00a      	b.n	800977a <HAL_GPIO_Init+0x1fa>
 8009764:	2306      	movs	r3, #6
 8009766:	e008      	b.n	800977a <HAL_GPIO_Init+0x1fa>
 8009768:	2304      	movs	r3, #4
 800976a:	e006      	b.n	800977a <HAL_GPIO_Init+0x1fa>
 800976c:	2303      	movs	r3, #3
 800976e:	e004      	b.n	800977a <HAL_GPIO_Init+0x1fa>
 8009770:	2302      	movs	r3, #2
 8009772:	e002      	b.n	800977a <HAL_GPIO_Init+0x1fa>
 8009774:	2301      	movs	r3, #1
 8009776:	e000      	b.n	800977a <HAL_GPIO_Init+0x1fa>
 8009778:	2300      	movs	r3, #0
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	f002 0203 	and.w	r2, r2, #3
 8009780:	0092      	lsls	r2, r2, #2
 8009782:	4093      	lsls	r3, r2
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4313      	orrs	r3, r2
 8009788:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800978a:	4937      	ldr	r1, [pc, #220]	; (8009868 <HAL_GPIO_Init+0x2e8>)
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	089b      	lsrs	r3, r3, #2
 8009790:	3302      	adds	r3, #2
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009798:	4b39      	ldr	r3, [pc, #228]	; (8009880 <HAL_GPIO_Init+0x300>)
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	43db      	mvns	r3, r3
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	4013      	ands	r3, r2
 80097a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d003      	beq.n	80097bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80097bc:	4a30      	ldr	r2, [pc, #192]	; (8009880 <HAL_GPIO_Init+0x300>)
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80097c2:	4b2f      	ldr	r3, [pc, #188]	; (8009880 <HAL_GPIO_Init+0x300>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	43db      	mvns	r3, r3
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4013      	ands	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80097e6:	4a26      	ldr	r2, [pc, #152]	; (8009880 <HAL_GPIO_Init+0x300>)
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80097ec:	4b24      	ldr	r3, [pc, #144]	; (8009880 <HAL_GPIO_Init+0x300>)
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	43db      	mvns	r3, r3
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	4013      	ands	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4313      	orrs	r3, r2
 800980e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009810:	4a1b      	ldr	r2, [pc, #108]	; (8009880 <HAL_GPIO_Init+0x300>)
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009816:	4b1a      	ldr	r3, [pc, #104]	; (8009880 <HAL_GPIO_Init+0x300>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	43db      	mvns	r3, r3
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4013      	ands	r3, r2
 8009824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800983a:	4a11      	ldr	r2, [pc, #68]	; (8009880 <HAL_GPIO_Init+0x300>)
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	3301      	adds	r3, #1
 8009844:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	fa22 f303 	lsr.w	r3, r2, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	f47f ae9d 	bne.w	8009590 <HAL_GPIO_Init+0x10>
  }
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	371c      	adds	r7, #28
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	40021000 	.word	0x40021000
 8009868:	40010000 	.word	0x40010000
 800986c:	48000400 	.word	0x48000400
 8009870:	48000800 	.word	0x48000800
 8009874:	48000c00 	.word	0x48000c00
 8009878:	48001000 	.word	0x48001000
 800987c:	48001400 	.word	0x48001400
 8009880:	40010400 	.word	0x40010400

08009884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	691a      	ldr	r2, [r3, #16]
 8009894:	887b      	ldrh	r3, [r7, #2]
 8009896:	4013      	ands	r3, r2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800989c:	2301      	movs	r3, #1
 800989e:	73fb      	strb	r3, [r7, #15]
 80098a0:	e001      	b.n	80098a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	807b      	strh	r3, [r7, #2]
 80098c0:	4613      	mov	r3, r2
 80098c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80098c4:	787b      	ldrb	r3, [r7, #1]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80098ca:	887a      	ldrh	r2, [r7, #2]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80098d0:	e002      	b.n	80098d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80098d2:	887a      	ldrh	r2, [r7, #2]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80098ee:	4b08      	ldr	r3, [pc, #32]	; (8009910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098f0:	695a      	ldr	r2, [r3, #20]
 80098f2:	88fb      	ldrh	r3, [r7, #6]
 80098f4:	4013      	ands	r3, r2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d006      	beq.n	8009908 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80098fa:	4a05      	ldr	r2, [pc, #20]	; (8009910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098fc:	88fb      	ldrh	r3, [r7, #6]
 80098fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009900:	88fb      	ldrh	r3, [r7, #6]
 8009902:	4618      	mov	r0, r3
 8009904:	f7f9 f88c 	bl	8002a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8009908:	bf00      	nop
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	40010400 	.word	0x40010400

08009914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e08d      	b.n	8009a42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d106      	bne.n	8009940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fa ffe0 	bl	8004900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2224      	movs	r2, #36	; 0x24
 8009944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0201 	bic.w	r2, r2, #1
 8009956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009964:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009974:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d107      	bne.n	800998e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	689a      	ldr	r2, [r3, #8]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800998a:	609a      	str	r2, [r3, #8]
 800998c:	e006      	b.n	800999c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689a      	ldr	r2, [r3, #8]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800999a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d108      	bne.n	80099b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099b2:	605a      	str	r2, [r3, #4]
 80099b4:	e007      	b.n	80099c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	6812      	ldr	r2, [r2, #0]
 80099d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80099d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80099e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	691a      	ldr	r2, [r3, #16]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	69d9      	ldr	r1, [r3, #28]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a1a      	ldr	r2, [r3, #32]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f042 0201 	orr.w	r2, r2, #1
 8009a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d138      	bne.n	8009ad2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d101      	bne.n	8009a6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	e032      	b.n	8009ad4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2224      	movs	r2, #36	; 0x24
 8009a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 0201 	bic.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6819      	ldr	r1, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f042 0201 	orr.w	r2, r2, #1
 8009abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e000      	b.n	8009ad4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ad2:	2302      	movs	r3, #2
  }
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d139      	bne.n	8009b6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d101      	bne.n	8009b04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b00:	2302      	movs	r3, #2
 8009b02:	e033      	b.n	8009b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2224      	movs	r2, #36	; 0x24
 8009b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 0201 	bic.w	r2, r2, #1
 8009b22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	021b      	lsls	r3, r3, #8
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f042 0201 	orr.w	r2, r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	e000      	b.n	8009b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b6a:	2302      	movs	r3, #2
  }
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e0c0      	b.n	8009d0c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f00b fed0 	bl	8015944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2203      	movs	r2, #3
 8009ba8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f005 fe26 	bl	800f802 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]
 8009bba:	e03e      	b.n	8009c3a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009bbc:	7bfa      	ldrb	r2, [r7, #15]
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	440b      	add	r3, r1
 8009bca:	3311      	adds	r3, #17
 8009bcc:	2201      	movs	r2, #1
 8009bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009bd0:	7bfa      	ldrb	r2, [r7, #15]
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	440b      	add	r3, r1
 8009bde:	3310      	adds	r3, #16
 8009be0:	7bfa      	ldrb	r2, [r7, #15]
 8009be2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009be4:	7bfa      	ldrb	r2, [r7, #15]
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	440b      	add	r3, r1
 8009bf2:	3313      	adds	r3, #19
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009bf8:	7bfa      	ldrb	r2, [r7, #15]
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	440b      	add	r3, r1
 8009c06:	3320      	adds	r3, #32
 8009c08:	2200      	movs	r2, #0
 8009c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009c0c:	7bfa      	ldrb	r2, [r7, #15]
 8009c0e:	6879      	ldr	r1, [r7, #4]
 8009c10:	4613      	mov	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	440b      	add	r3, r1
 8009c1a:	3324      	adds	r3, #36	; 0x24
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	1c5a      	adds	r2, r3, #1
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	440b      	add	r3, r1
 8009c30:	2200      	movs	r2, #0
 8009c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	3301      	adds	r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	791b      	ldrb	r3, [r3, #4]
 8009c3e:	7bfa      	ldrb	r2, [r7, #15]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d3bb      	bcc.n	8009bbc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c44:	2300      	movs	r3, #0
 8009c46:	73fb      	strb	r3, [r7, #15]
 8009c48:	e044      	b.n	8009cd4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009c4a:	7bfa      	ldrb	r2, [r7, #15]
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	00db      	lsls	r3, r3, #3
 8009c56:	440b      	add	r3, r1
 8009c58:	f203 1351 	addw	r3, r3, #337	; 0x151
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009c60:	7bfa      	ldrb	r2, [r7, #15]
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	4613      	mov	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	440b      	add	r3, r1
 8009c6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c72:	7bfa      	ldrb	r2, [r7, #15]
 8009c74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009c76:	7bfa      	ldrb	r2, [r7, #15]
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	440b      	add	r3, r1
 8009c84:	f203 1353 	addw	r3, r3, #339	; 0x153
 8009c88:	2200      	movs	r2, #0
 8009c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009c8c:	7bfa      	ldrb	r2, [r7, #15]
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	440b      	add	r3, r1
 8009c9a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009ca2:	7bfa      	ldrb	r2, [r7, #15]
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	00db      	lsls	r3, r3, #3
 8009cae:	440b      	add	r3, r1
 8009cb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009cb8:	7bfa      	ldrb	r2, [r7, #15]
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	440b      	add	r3, r1
 8009cc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	791b      	ldrb	r3, [r3, #4]
 8009cd8:	7bfa      	ldrb	r2, [r7, #15]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d3b5      	bcc.n	8009c4a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009cea:	f005 fda5 	bl	800f838 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	7a9b      	ldrb	r3, [r3, #10]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d102      	bne.n	8009d0a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 fc41 	bl	800b58c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d101      	bne.n	8009d2a <HAL_PCD_Start+0x16>
 8009d26:	2302      	movs	r3, #2
 8009d28:	e012      	b.n	8009d50 <HAL_PCD_Start+0x3c>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f005 fd4c 	bl	800f7d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f008 f80c 	bl	8011d5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f008 f811 	bl	8011d8c <USB_ReadInterrupts>
 8009d6a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fb04 	bl	800a384 <PCD_EP_ISR_Handler>

    return;
 8009d7c:	e110      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d013      	beq.n	8009db0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d9a:	b292      	uxth	r2, r2
 8009d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f00b fe60 	bl	8015a66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009da6:	2100      	movs	r1, #0
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f8fc 	bl	8009fa6 <HAL_PCD_SetAddress>

    return;
 8009dae:	e0f7      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00c      	beq.n	8009dd4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009dcc:	b292      	uxth	r2, r2
 8009dce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009dd2:	e0e5      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00c      	beq.n	8009df8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009df0:	b292      	uxth	r2, r2
 8009df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009df6:	e0d3      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d034      	beq.n	8009e6c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 0204 	bic.w	r2, r2, #4
 8009e14:	b292      	uxth	r2, r2
 8009e16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f022 0208 	bic.w	r2, r2, #8
 8009e2c:	b292      	uxth	r2, r2
 8009e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d107      	bne.n	8009e4c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009e44:	2100      	movs	r1, #0
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f00c f800 	bl	8015e4c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f00b fe43 	bl	8015ad8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e64:	b292      	uxth	r2, r2
 8009e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009e6a:	e099      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d027      	beq.n	8009ec6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f042 0208 	orr.w	r2, r2, #8
 8009e88:	b292      	uxth	r2, r2
 8009e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ea0:	b292      	uxth	r2, r2
 8009ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f042 0204 	orr.w	r2, r2, #4
 8009eb8:	b292      	uxth	r2, r2
 8009eba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f00b fdf0 	bl	8015aa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009ec4:	e06c      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d040      	beq.n	8009f52 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ee2:	b292      	uxth	r2, r2
 8009ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d12b      	bne.n	8009f4a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f042 0204 	orr.w	r2, r2, #4
 8009f04:	b292      	uxth	r2, r2
 8009f06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f042 0208 	orr.w	r2, r2, #8
 8009f1c:	b292      	uxth	r2, r2
 8009f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	089b      	lsrs	r3, r3, #2
 8009f36:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009f40:	2101      	movs	r1, #1
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f00b ff82 	bl	8015e4c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009f48:	e02a      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f00b fdaa 	bl	8015aa4 <HAL_PCD_SuspendCallback>
    return;
 8009f50:	e026      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00f      	beq.n	8009f7c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009f6e:	b292      	uxth	r2, r2
 8009f70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f00b fd68 	bl	8015a4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009f7a:	e011      	b.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00c      	beq.n	8009fa0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f98:	b292      	uxth	r2, r2
 8009f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009f9e:	bf00      	nop
  }
}
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_PCD_SetAddress+0x1a>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e012      	b.n	8009fe6 <HAL_PCD_SetAddress+0x40>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	78fa      	ldrb	r2, [r7, #3]
 8009fcc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	78fa      	ldrb	r2, [r7, #3]
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f007 fead 	bl	8011d36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	70fb      	strb	r3, [r7, #3]
 800a000:	460b      	mov	r3, r1
 800a002:	803b      	strh	r3, [r7, #0]
 800a004:	4613      	mov	r3, r2
 800a006:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a00c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a010:	2b00      	cmp	r3, #0
 800a012:	da0e      	bge.n	800a032 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	f003 0207 	and.w	r2, r3, #7
 800a01a:	4613      	mov	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	3310      	adds	r3, #16
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	4413      	add	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2201      	movs	r2, #1
 800a02e:	705a      	strb	r2, [r3, #1]
 800a030:	e00e      	b.n	800a050 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	f003 0207 	and.w	r2, r3, #7
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	4413      	add	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a050:	78fb      	ldrb	r3, [r7, #3]
 800a052:	f003 0307 	and.w	r3, r3, #7
 800a056:	b2da      	uxtb	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a05c:	883a      	ldrh	r2, [r7, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	78ba      	ldrb	r2, [r7, #2]
 800a066:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a068:	78bb      	ldrb	r3, [r7, #2]
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d102      	bne.n	800a074 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d101      	bne.n	800a082 <HAL_PCD_EP_Open+0x94>
 800a07e:	2302      	movs	r3, #2
 800a080:	e00e      	b.n	800a0a0 <HAL_PCD_EP_Open+0xb2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68f9      	ldr	r1, [r7, #12]
 800a090:	4618      	mov	r0, r3
 800a092:	f005 fbef 	bl	800f874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800a09e:	7afb      	ldrb	r3, [r7, #11]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a0b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	da0e      	bge.n	800a0da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0bc:	78fb      	ldrb	r3, [r7, #3]
 800a0be:	f003 0207 	and.w	r2, r3, #7
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	00db      	lsls	r3, r3, #3
 800a0ca:	3310      	adds	r3, #16
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	705a      	strb	r2, [r3, #1]
 800a0d8:	e00e      	b.n	800a0f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0da:	78fb      	ldrb	r3, [r7, #3]
 800a0dc:	f003 0207 	and.w	r2, r3, #7
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	f003 0307 	and.w	r3, r3, #7
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d101      	bne.n	800a112 <HAL_PCD_EP_Close+0x6a>
 800a10e:	2302      	movs	r3, #2
 800a110:	e00e      	b.n	800a130 <HAL_PCD_EP_Close+0x88>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68f9      	ldr	r1, [r7, #12]
 800a120:	4618      	mov	r0, r3
 800a122:	f005 ff6b 	bl	800fffc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	607a      	str	r2, [r7, #4]
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	460b      	mov	r3, r1
 800a146:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	f003 0207 	and.w	r2, r3, #7
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	4413      	add	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	2200      	movs	r2, #0
 800a170:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2200      	movs	r2, #0
 800a176:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a178:	7afb      	ldrb	r3, [r7, #11]
 800a17a:	f003 0307 	and.w	r3, r3, #7
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6979      	ldr	r1, [r7, #20]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f006 f923 	bl	80103d6 <USB_EPStartXfer>

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a1a6:	78fb      	ldrb	r3, [r7, #3]
 800a1a8:	f003 0207 	and.w	r2, r3, #7
 800a1ac:	6879      	ldr	r1, [r7, #4]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	440b      	add	r3, r1
 800a1b8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800a1bc:	681b      	ldr	r3, [r3, #0]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b086      	sub	sp, #24
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1da:	7afb      	ldrb	r3, [r7, #11]
 800a1dc:	f003 0207 	and.w	r2, r3, #7
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	3310      	adds	r3, #16
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2200      	movs	r2, #0
 800a20e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2201      	movs	r2, #1
 800a214:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a216:	7afb      	ldrb	r3, [r7, #11]
 800a218:	f003 0307 	and.w	r3, r3, #7
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6979      	ldr	r1, [r7, #20]
 800a228:	4618      	mov	r0, r3
 800a22a:	f006 f8d4 	bl	80103d6 <USB_EPStartXfer>

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	7912      	ldrb	r2, [r2, #4]
 800a24e:	4293      	cmp	r3, r2
 800a250:	d901      	bls.n	800a256 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e03e      	b.n	800a2d4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	da0e      	bge.n	800a27c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	f003 0207 	and.w	r2, r3, #7
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	3310      	adds	r3, #16
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2201      	movs	r2, #1
 800a278:	705a      	strb	r2, [r3, #1]
 800a27a:	e00c      	b.n	800a296 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a27c:	78fa      	ldrb	r2, [r7, #3]
 800a27e:	4613      	mov	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	4413      	add	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2201      	movs	r2, #1
 800a29a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a29c:	78fb      	ldrb	r3, [r7, #3]
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_PCD_EP_SetStall+0x7e>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e00e      	b.n	800a2d4 <HAL_PCD_EP_SetStall+0x9c>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f007 fc37 	bl	8011b38 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a2e8:	78fb      	ldrb	r3, [r7, #3]
 800a2ea:	f003 030f 	and.w	r3, r3, #15
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	7912      	ldrb	r2, [r2, #4]
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d901      	bls.n	800a2fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e040      	b.n	800a37c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a2fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	da0e      	bge.n	800a320 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a302:	78fb      	ldrb	r3, [r7, #3]
 800a304:	f003 0207 	and.w	r2, r3, #7
 800a308:	4613      	mov	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	3310      	adds	r3, #16
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	4413      	add	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2201      	movs	r2, #1
 800a31c:	705a      	strb	r2, [r3, #1]
 800a31e:	e00e      	b.n	800a33e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	f003 0207 	and.w	r2, r3, #7
 800a326:	4613      	mov	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	00db      	lsls	r3, r3, #3
 800a32e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	4413      	add	r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a356:	2b01      	cmp	r3, #1
 800a358:	d101      	bne.n	800a35e <HAL_PCD_EP_ClrStall+0x82>
 800a35a:	2302      	movs	r3, #2
 800a35c:	e00e      	b.n	800a37c <HAL_PCD_EP_ClrStall+0xa0>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f007 fc34 	bl	8011bda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b096      	sub	sp, #88	; 0x58
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a38c:	e3ae      	b.n	800aaec <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a396:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a39a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	f003 030f 	and.w	r3, r3, #15
 800a3a4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800a3a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f040 8170 	bne.w	800a692 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a3b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a3b6:	f003 0310 	and.w	r3, r3, #16
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d14d      	bne.n	800a45a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a3ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ce:	81fb      	strh	r3, [r7, #14]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	89fb      	ldrh	r3, [r7, #14]
 800a3d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3310      	adds	r3, #16
 800a3e6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	4413      	add	r3, r2
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	4413      	add	r3, r2
 800a402:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a40c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a40e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a412:	695a      	ldr	r2, [r3, #20]
 800a414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	441a      	add	r2, r3
 800a41a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a41c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a41e:	2100      	movs	r1, #0
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f00b faf8 	bl	8015a16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	7b1b      	ldrb	r3, [r3, #12]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 835d 	beq.w	800aaec <PCD_EP_ISR_Handler+0x768>
 800a432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	f040 8358 	bne.w	800aaec <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	7b1b      	ldrb	r3, [r3, #12]
 800a440:	b2db      	uxtb	r3, r3
 800a442:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a446:	b2da      	uxtb	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	b292      	uxth	r2, r2
 800a44e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	731a      	strb	r2, [r3, #12]
 800a458:	e348      	b.n	800aaec <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a460:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a46c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a474:	2b00      	cmp	r3, #0
 800a476:	d032      	beq.n	800a4de <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a480:	b29b      	uxth	r3, r3
 800a482:	461a      	mov	r2, r3
 800a484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	4413      	add	r3, r2
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	6812      	ldr	r2, [r2, #0]
 800a490:	4413      	add	r3, r2
 800a492:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a49c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a49e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800a4aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a4ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4b0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	f007 fcbc 	bl	8011e30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	823b      	strh	r3, [r7, #16]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	8a3a      	ldrh	r2, [r7, #16]
 800a4ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a4d2:	b292      	uxth	r2, r2
 800a4d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f00b fa70 	bl	80159bc <HAL_PCD_SetupStageCallback>
 800a4dc:	e306      	b.n	800aaec <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a4de:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f280 8302 	bge.w	800aaec <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	83fb      	strh	r3, [r7, #30]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	8bfa      	ldrh	r2, [r7, #30]
 800a4fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a502:	b292      	uxth	r2, r2
 800a504:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a50e:	b29b      	uxth	r3, r3
 800a510:	461a      	mov	r2, r3
 800a512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	4413      	add	r3, r2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	6812      	ldr	r2, [r2, #0]
 800a51e:	4413      	add	r3, r2
 800a520:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a524:	881b      	ldrh	r3, [r3, #0]
 800a526:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a52c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a52e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d019      	beq.n	800a56a <PCD_EP_ISR_Handler+0x1e6>
 800a536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d015      	beq.n	800a56a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a544:	6959      	ldr	r1, [r3, #20]
 800a546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a548:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a54a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a54c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a54e:	b29b      	uxth	r3, r3
 800a550:	f007 fc6e 	bl	8011e30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a556:	695a      	ldr	r2, [r3, #20]
 800a558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	441a      	add	r2, r3
 800a55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a560:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a562:	2100      	movs	r1, #0
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f00b fa3b 	bl	80159e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a574:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f040 82b5 	bne.w	800aaec <PCD_EP_ISR_Handler+0x768>
 800a582:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a586:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a58a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a58e:	f000 82ad 	beq.w	800aaec <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	61bb      	str	r3, [r7, #24]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	61bb      	str	r3, [r7, #24]
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	881b      	ldrh	r3, [r3, #0]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	801a      	strh	r2, [r3, #0]
 800a5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	2b3e      	cmp	r3, #62	; 0x3e
 800a5c8:	d91d      	bls.n	800a606 <PCD_EP_ISR_Handler+0x282>
 800a5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	095b      	lsrs	r3, r3, #5
 800a5d0:	647b      	str	r3, [r7, #68]	; 0x44
 800a5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	f003 031f 	and.w	r3, r3, #31
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d102      	bne.n	800a5e4 <PCD_EP_ISR_Handler+0x260>
 800a5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	881b      	ldrh	r3, [r3, #0]
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	029b      	lsls	r3, r3, #10
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	e026      	b.n	800a654 <PCD_EP_ISR_Handler+0x2d0>
 800a606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10a      	bne.n	800a624 <PCD_EP_ISR_Handler+0x2a0>
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	b29b      	uxth	r3, r3
 800a614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	801a      	strh	r2, [r3, #0]
 800a622:	e017      	b.n	800a654 <PCD_EP_ISR_Handler+0x2d0>
 800a624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	085b      	lsrs	r3, r3, #1
 800a62a:	647b      	str	r3, [r7, #68]	; 0x44
 800a62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	2b00      	cmp	r3, #0
 800a636:	d002      	beq.n	800a63e <PCD_EP_ISR_Handler+0x2ba>
 800a638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a63a:	3301      	adds	r3, #1
 800a63c:	647b      	str	r3, [r7, #68]	; 0x44
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	b29a      	uxth	r2, r3
 800a644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a646:	b29b      	uxth	r3, r3
 800a648:	029b      	lsls	r3, r3, #10
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	4313      	orrs	r3, r2
 800a64e:	b29a      	uxth	r2, r3
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a664:	827b      	strh	r3, [r7, #18]
 800a666:	8a7b      	ldrh	r3, [r7, #18]
 800a668:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a66c:	827b      	strh	r3, [r7, #18]
 800a66e:	8a7b      	ldrh	r3, [r7, #18]
 800a670:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a674:	827b      	strh	r3, [r7, #18]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	8a7b      	ldrh	r3, [r7, #18]
 800a67c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	8013      	strh	r3, [r2, #0]
 800a690:	e22c      	b.n	800aaec <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a6a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f280 80f6 	bge.w	800a89c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	881b      	ldrh	r3, [r3, #0]
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a6de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6e2:	b292      	uxth	r2, r2
 800a6e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a6e6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a6fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6fe:	7b1b      	ldrb	r3, [r3, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d123      	bne.n	800a74c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	461a      	mov	r2, r3
 800a710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	00db      	lsls	r3, r3, #3
 800a716:	4413      	add	r3, r2
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	6812      	ldr	r2, [r2, #0]
 800a71c:	4413      	add	r3, r2
 800a71e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a728:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a72c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 808e 	beq.w	800a852 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a73c:	6959      	ldr	r1, [r3, #20]
 800a73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a740:	88da      	ldrh	r2, [r3, #6]
 800a742:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a746:	f007 fb73 	bl	8011e30 <USB_ReadPMA>
 800a74a:	e082      	b.n	800a852 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a74c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a74e:	78db      	ldrb	r3, [r3, #3]
 800a750:	2b02      	cmp	r3, #2
 800a752:	d10a      	bne.n	800a76a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a754:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a758:	461a      	mov	r2, r3
 800a75a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f9d3 	bl	800ab08 <HAL_PCD_EP_DB_Receive>
 800a762:	4603      	mov	r3, r0
 800a764:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a768:	e073      	b.n	800a852 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	881b      	ldrh	r3, [r3, #0]
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a784:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	461a      	mov	r2, r3
 800a78e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	441a      	add	r2, r3
 800a796:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a79a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a79e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d022      	beq.n	800a80e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	00db      	lsls	r3, r3, #3
 800a7da:	4413      	add	r3, r2
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	6812      	ldr	r2, [r2, #0]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a7f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d02c      	beq.n	800a852 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7fe:	6959      	ldr	r1, [r3, #20]
 800a800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a802:	891a      	ldrh	r2, [r3, #8]
 800a804:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a808:	f007 fb12 	bl	8011e30 <USB_ReadPMA>
 800a80c:	e021      	b.n	800a852 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a816:	b29b      	uxth	r3, r3
 800a818:	461a      	mov	r2, r3
 800a81a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	4413      	add	r3, r2
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	6812      	ldr	r2, [r2, #0]
 800a826:	4413      	add	r3, r2
 800a828:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a832:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a836:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a844:	6959      	ldr	r1, [r3, #20]
 800a846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a848:	895a      	ldrh	r2, [r3, #10]
 800a84a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a84e:	f007 faef 	bl	8011e30 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a854:	69da      	ldr	r2, [r3, #28]
 800a856:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a85a:	441a      	add	r2, r3
 800a85c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a85e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a862:	695a      	ldr	r2, [r3, #20]
 800a864:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a868:	441a      	add	r2, r3
 800a86a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a86c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a86e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <PCD_EP_ISR_Handler+0x4fe>
 800a876:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a87a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d206      	bcs.n	800a890 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f00b f8a9 	bl	80159e0 <HAL_PCD_DataOutStageCallback>
 800a88e:	e005      	b.n	800a89c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a896:	4618      	mov	r0, r3
 800a898:	f005 fd9d 	bl	80103d6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a89c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a8a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 8121 	beq.w	800aaec <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800a8aa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	3310      	adds	r3, #16
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a8d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	441a      	add	r2, r3
 800a8ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a8ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a8fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8fc:	78db      	ldrb	r3, [r3, #3]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	f040 80a2 	bne.w	800aa48 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800a904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a906:	2200      	movs	r2, #0
 800a908:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a90c:	7b1b      	ldrb	r3, [r3, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 8093 	beq.w	800aa3a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a914:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d046      	beq.n	800a9ae <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a922:	785b      	ldrb	r3, [r3, #1]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d126      	bne.n	800a976 <PCD_EP_ISR_Handler+0x5f2>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	627b      	str	r3, [r7, #36]	; 0x24
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a936:	b29b      	uxth	r3, r3
 800a938:	461a      	mov	r2, r3
 800a93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93c:	4413      	add	r3, r2
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24
 800a940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	00da      	lsls	r2, r3, #3
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	4413      	add	r3, r2
 800a94a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a94e:	623b      	str	r3, [r7, #32]
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	b29b      	uxth	r3, r3
 800a956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	801a      	strh	r2, [r3, #0]
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b29b      	uxth	r3, r3
 800a966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a96a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a96e:	b29a      	uxth	r2, r3
 800a970:	6a3b      	ldr	r3, [r7, #32]
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	e061      	b.n	800aa3a <PCD_EP_ISR_Handler+0x6b6>
 800a976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a978:	785b      	ldrb	r3, [r3, #1]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d15d      	bne.n	800aa3a <PCD_EP_ISR_Handler+0x6b6>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	461a      	mov	r2, r3
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	4413      	add	r3, r2
 800a994:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	00da      	lsls	r2, r3, #3
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	4413      	add	r3, r2
 800a9a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	801a      	strh	r2, [r3, #0]
 800a9ac:	e045      	b.n	800aa3a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9b6:	785b      	ldrb	r3, [r3, #1]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d126      	bne.n	800aa0a <PCD_EP_ISR_Handler+0x686>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d0:	4413      	add	r3, r2
 800a9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	00da      	lsls	r2, r3, #3
 800a9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9dc:	4413      	add	r3, r2
 800a9de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9e2:	633b      	str	r3, [r7, #48]	; 0x30
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	801a      	strh	r2, [r3, #0]
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	801a      	strh	r2, [r3, #0]
 800aa08:	e017      	b.n	800aa3a <PCD_EP_ISR_Handler+0x6b6>
 800aa0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d113      	bne.n	800aa3a <PCD_EP_ISR_Handler+0x6b6>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa20:	4413      	add	r3, r2
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	00da      	lsls	r2, r3, #3
 800aa2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa32:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	2200      	movs	r2, #0
 800aa38:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aa3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f00a ffe8 	bl	8015a16 <HAL_PCD_DataInStageCallback>
 800aa46:	e051      	b.n	800aaec <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800aa48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aa4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d144      	bne.n	800aade <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	461a      	mov	r2, r3
 800aa60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	4413      	add	r3, r2
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6812      	ldr	r2, [r2, #0]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800aa7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa7e:	699a      	ldr	r2, [r3, #24]
 800aa80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d907      	bls.n	800aa98 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800aa88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa8a:	699a      	ldr	r2, [r3, #24]
 800aa8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aa90:	1ad2      	subs	r2, r2, r3
 800aa92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa94:	619a      	str	r2, [r3, #24]
 800aa96:	e002      	b.n	800aa9e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800aa98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800aa9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aaa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f00a ffb2 	bl	8015a16 <HAL_PCD_DataInStageCallback>
 800aab2:	e01b      	b.n	800aaec <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800aab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aab6:	695a      	ldr	r2, [r3, #20]
 800aab8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aabc:	441a      	add	r2, r3
 800aabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800aac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac4:	69da      	ldr	r2, [r3, #28]
 800aac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aaca:	441a      	add	r2, r3
 800aacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aace:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aad6:	4618      	mov	r0, r3
 800aad8:	f005 fc7d 	bl	80103d6 <USB_EPStartXfer>
 800aadc:	e006      	b.n	800aaec <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800aade:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aae2:	461a      	mov	r2, r3
 800aae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f917 	bl	800ad1a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	b21b      	sxth	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f6ff ac48 	blt.w	800a38e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3758      	adds	r7, #88	; 0x58
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	4613      	mov	r3, r2
 800ab14:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ab16:	88fb      	ldrh	r3, [r7, #6]
 800ab18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d07c      	beq.n	800ac1a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	00db      	lsls	r3, r3, #3
 800ab32:	4413      	add	r3, r2
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	6812      	ldr	r2, [r2, #0]
 800ab38:	4413      	add	r3, r2
 800ab3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab3e:	881b      	ldrh	r3, [r3, #0]
 800ab40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	699a      	ldr	r2, [r3, #24]
 800ab4a:	8b7b      	ldrh	r3, [r7, #26]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d306      	bcc.n	800ab5e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	699a      	ldr	r2, [r3, #24]
 800ab54:	8b7b      	ldrh	r3, [r7, #26]
 800ab56:	1ad2      	subs	r2, r2, r3
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	619a      	str	r2, [r3, #24]
 800ab5c:	e002      	b.n	800ab64 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2200      	movs	r2, #0
 800ab62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d123      	bne.n	800abb4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	461a      	mov	r2, r3
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	881b      	ldrh	r3, [r3, #0]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab86:	833b      	strh	r3, [r7, #24]
 800ab88:	8b3b      	ldrh	r3, [r7, #24]
 800ab8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab8e:	833b      	strh	r3, [r7, #24]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	461a      	mov	r2, r3
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	441a      	add	r2, r3
 800ab9e:	8b3b      	ldrh	r3, [r7, #24]
 800aba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800abb4:	88fb      	ldrh	r3, [r7, #6]
 800abb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d01f      	beq.n	800abfe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	881b      	ldrh	r3, [r3, #0]
 800abce:	b29b      	uxth	r3, r3
 800abd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd8:	82fb      	strh	r3, [r7, #22]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	441a      	add	r2, r3
 800abe8:	8afb      	ldrh	r3, [r7, #22]
 800abea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800abfe:	8b7b      	ldrh	r3, [r7, #26]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 8085 	beq.w	800ad10 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	6959      	ldr	r1, [r3, #20]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	891a      	ldrh	r2, [r3, #8]
 800ac12:	8b7b      	ldrh	r3, [r7, #26]
 800ac14:	f007 f90c 	bl	8011e30 <USB_ReadPMA>
 800ac18:	e07a      	b.n	800ad10 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	461a      	mov	r2, r3
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	4413      	add	r3, r2
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	6812      	ldr	r2, [r2, #0]
 800ac32:	4413      	add	r3, r2
 800ac34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	699a      	ldr	r2, [r3, #24]
 800ac44:	8b7b      	ldrh	r3, [r7, #26]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d306      	bcc.n	800ac58 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	699a      	ldr	r2, [r3, #24]
 800ac4e:	8b7b      	ldrh	r3, [r7, #26]
 800ac50:	1ad2      	subs	r2, r2, r3
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	619a      	str	r2, [r3, #24]
 800ac56:	e002      	b.n	800ac5e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d123      	bne.n	800acae <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac80:	83fb      	strh	r3, [r7, #30]
 800ac82:	8bfb      	ldrh	r3, [r7, #30]
 800ac84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac88:	83fb      	strh	r3, [r7, #30]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	441a      	add	r2, r3
 800ac98:	8bfb      	ldrh	r3, [r7, #30]
 800ac9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acaa:	b29b      	uxth	r3, r3
 800acac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800acae:	88fb      	ldrh	r3, [r7, #6]
 800acb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d11f      	bne.n	800acf8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	b29b      	uxth	r3, r3
 800acca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd2:	83bb      	strh	r3, [r7, #28]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	441a      	add	r2, r3
 800ace2:	8bbb      	ldrh	r3, [r7, #28]
 800ace4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800acf8:	8b7b      	ldrh	r3, [r7, #26]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d008      	beq.n	800ad10 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	6959      	ldr	r1, [r3, #20]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	895a      	ldrh	r2, [r3, #10]
 800ad0a:	8b7b      	ldrh	r3, [r7, #26]
 800ad0c:	f007 f890 	bl	8011e30 <USB_ReadPMA>
    }
  }

  return count;
 800ad10:	8b7b      	ldrh	r3, [r7, #26]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3720      	adds	r7, #32
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b0a4      	sub	sp, #144	; 0x90
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	60b9      	str	r1, [r7, #8]
 800ad24:	4613      	mov	r3, r2
 800ad26:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ad28:	88fb      	ldrh	r3, [r7, #6]
 800ad2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 81db 	beq.w	800b0ea <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	461a      	mov	r2, r3
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	4413      	add	r3, r2
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	6812      	ldr	r2, [r2, #0]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad58:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	699a      	ldr	r2, [r3, #24]
 800ad60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d907      	bls.n	800ad78 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	699a      	ldr	r2, [r3, #24]
 800ad6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ad70:	1ad2      	subs	r2, r2, r3
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	619a      	str	r2, [r3, #24]
 800ad76:	e002      	b.n	800ad7e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f040 80b9 	bne.w	800aefa <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	785b      	ldrb	r3, [r3, #1]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d126      	bne.n	800adde <HAL_PCD_EP_DB_Transmit+0xc4>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	461a      	mov	r2, r3
 800ada2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada4:	4413      	add	r3, r2
 800ada6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	00da      	lsls	r2, r3, #3
 800adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb0:	4413      	add	r3, r2
 800adb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800adb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	801a      	strh	r2, [r3, #0]
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	b29b      	uxth	r3, r3
 800adce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800add2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800add6:	b29a      	uxth	r2, r3
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	801a      	strh	r2, [r3, #0]
 800addc:	e01a      	b.n	800ae14 <HAL_PCD_EP_DB_Transmit+0xfa>
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	785b      	ldrb	r3, [r3, #1]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d116      	bne.n	800ae14 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	637b      	str	r3, [r7, #52]	; 0x34
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	461a      	mov	r2, r3
 800adf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adfa:	4413      	add	r3, r2
 800adfc:	637b      	str	r3, [r7, #52]	; 0x34
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	00da      	lsls	r2, r3, #3
 800ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae06:	4413      	add	r3, r2
 800ae08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae0c:	633b      	str	r3, [r7, #48]	; 0x30
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	2200      	movs	r2, #0
 800ae12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	627b      	str	r3, [r7, #36]	; 0x24
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	785b      	ldrb	r3, [r3, #1]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d126      	bne.n	800ae70 <HAL_PCD_EP_DB_Transmit+0x156>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	61fb      	str	r3, [r7, #28]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	461a      	mov	r2, r3
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	4413      	add	r3, r2
 800ae38:	61fb      	str	r3, [r7, #28]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	00da      	lsls	r2, r3, #3
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	4413      	add	r3, r2
 800ae44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae48:	61bb      	str	r3, [r7, #24]
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	801a      	strh	r2, [r3, #0]
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	801a      	strh	r2, [r3, #0]
 800ae6e:	e017      	b.n	800aea0 <HAL_PCD_EP_DB_Transmit+0x186>
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	785b      	ldrb	r3, [r3, #1]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d113      	bne.n	800aea0 <HAL_PCD_EP_DB_Transmit+0x186>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	461a      	mov	r2, r3
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	4413      	add	r3, r2
 800ae88:	627b      	str	r3, [r7, #36]	; 0x24
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	00da      	lsls	r2, r3, #3
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	4413      	add	r3, r2
 800ae94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae98:	623b      	str	r3, [r7, #32]
 800ae9a:	6a3b      	ldr	r3, [r7, #32]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	4619      	mov	r1, r3
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f00a fdb5 	bl	8015a16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800aeac:	88fb      	ldrh	r3, [r7, #6]
 800aeae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 82fa 	beq.w	800b4ac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	881b      	ldrh	r3, [r3, #0]
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aed2:	82fb      	strh	r3, [r7, #22]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	461a      	mov	r2, r3
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	441a      	add	r2, r3
 800aee2:	8afb      	ldrh	r3, [r7, #22]
 800aee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	8013      	strh	r3, [r2, #0]
 800aef8:	e2d8      	b.n	800b4ac <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800aefa:	88fb      	ldrh	r3, [r7, #6]
 800aefc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d021      	beq.n	800af48 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	461a      	mov	r2, r3
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	b29b      	uxth	r3, r3
 800af16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	441a      	add	r2, r3
 800af30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800af34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af44:	b29b      	uxth	r3, r3
 800af46:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800af4e:	2b01      	cmp	r3, #1
 800af50:	f040 82ac 	bne.w	800b4ac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	695a      	ldr	r2, [r3, #20]
 800af58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800af5c:	441a      	add	r2, r3
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	69da      	ldr	r2, [r3, #28]
 800af66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800af6a:	441a      	add	r2, r3
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6a1a      	ldr	r2, [r3, #32]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d30b      	bcc.n	800af94 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	6a1a      	ldr	r2, [r3, #32]
 800af88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af8c:	1ad2      	subs	r2, r2, r3
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	621a      	str	r2, [r3, #32]
 800af92:	e017      	b.n	800afc4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d108      	bne.n	800afae <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800af9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800afa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800afac:	e00a      	b.n	800afc4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2200      	movs	r2, #0
 800afc2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d165      	bne.n	800b098 <HAL_PCD_EP_DB_Transmit+0x37e>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afda:	b29b      	uxth	r3, r3
 800afdc:	461a      	mov	r2, r3
 800afde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe0:	4413      	add	r3, r2
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	00da      	lsls	r2, r3, #3
 800afea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afec:	4413      	add	r3, r2
 800afee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aff2:	63bb      	str	r3, [r7, #56]	; 0x38
 800aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff6:	881b      	ldrh	r3, [r3, #0]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800affe:	b29a      	uxth	r2, r3
 800b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b002:	801a      	strh	r2, [r3, #0]
 800b004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b008:	2b3e      	cmp	r3, #62	; 0x3e
 800b00a:	d91d      	bls.n	800b048 <HAL_PCD_EP_DB_Transmit+0x32e>
 800b00c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b010:	095b      	lsrs	r3, r3, #5
 800b012:	64bb      	str	r3, [r7, #72]	; 0x48
 800b014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b018:	f003 031f 	and.w	r3, r3, #31
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d102      	bne.n	800b026 <HAL_PCD_EP_DB_Transmit+0x30c>
 800b020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b022:	3b01      	subs	r3, #1
 800b024:	64bb      	str	r3, [r7, #72]	; 0x48
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b02e:	b29b      	uxth	r3, r3
 800b030:	029b      	lsls	r3, r3, #10
 800b032:	b29b      	uxth	r3, r3
 800b034:	4313      	orrs	r3, r2
 800b036:	b29b      	uxth	r3, r3
 800b038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b03c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b040:	b29a      	uxth	r2, r3
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	801a      	strh	r2, [r3, #0]
 800b046:	e044      	b.n	800b0d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10a      	bne.n	800b066 <HAL_PCD_EP_DB_Transmit+0x34c>
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	b29b      	uxth	r3, r3
 800b056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b05a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b05e:	b29a      	uxth	r2, r3
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	801a      	strh	r2, [r3, #0]
 800b064:	e035      	b.n	800b0d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b06a:	085b      	lsrs	r3, r3, #1
 800b06c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b06e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <HAL_PCD_EP_DB_Transmit+0x366>
 800b07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b07c:	3301      	adds	r3, #1
 800b07e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	881b      	ldrh	r3, [r3, #0]
 800b084:	b29a      	uxth	r2, r3
 800b086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b088:	b29b      	uxth	r3, r3
 800b08a:	029b      	lsls	r3, r3, #10
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	4313      	orrs	r3, r2
 800b090:	b29a      	uxth	r2, r3
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	801a      	strh	r2, [r3, #0]
 800b096:	e01c      	b.n	800b0d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	785b      	ldrb	r3, [r3, #1]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d118      	bne.n	800b0d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	647b      	str	r3, [r7, #68]	; 0x44
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0b4:	4413      	add	r3, r2
 800b0b6:	647b      	str	r3, [r7, #68]	; 0x44
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	00da      	lsls	r2, r3, #3
 800b0be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0c6:	643b      	str	r3, [r7, #64]	; 0x40
 800b0c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	6959      	ldr	r1, [r3, #20]
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	891a      	ldrh	r2, [r3, #8]
 800b0de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	f006 fe62 	bl	8011dac <USB_WritePMA>
 800b0e8:	e1e0      	b.n	800b4ac <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	4413      	add	r3, r2
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	6812      	ldr	r2, [r2, #0]
 800b102:	4413      	add	r3, r2
 800b104:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b10e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	699a      	ldr	r2, [r3, #24]
 800b116:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d307      	bcc.n	800b12e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	699a      	ldr	r2, [r3, #24]
 800b122:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b126:	1ad2      	subs	r2, r2, r3
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	619a      	str	r2, [r3, #24]
 800b12c:	e002      	b.n	800b134 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2200      	movs	r2, #0
 800b132:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f040 80c0 	bne.w	800b2be <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d126      	bne.n	800b194 <HAL_PCD_EP_DB_Transmit+0x47a>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b154:	b29b      	uxth	r3, r3
 800b156:	461a      	mov	r2, r3
 800b158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b15a:	4413      	add	r3, r2
 800b15c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	00da      	lsls	r2, r3, #3
 800b164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b166:	4413      	add	r3, r2
 800b168:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b16c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b16e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	b29b      	uxth	r3, r3
 800b174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b178:	b29a      	uxth	r2, r3
 800b17a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b17c:	801a      	strh	r2, [r3, #0]
 800b17e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	b29b      	uxth	r3, r3
 800b184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b190:	801a      	strh	r2, [r3, #0]
 800b192:	e01a      	b.n	800b1ca <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	785b      	ldrb	r3, [r3, #1]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d116      	bne.n	800b1ca <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	667b      	str	r3, [r7, #100]	; 0x64
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1b0:	4413      	add	r3, r2
 800b1b2:	667b      	str	r3, [r7, #100]	; 0x64
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	00da      	lsls	r2, r3, #3
 800b1ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1bc:	4413      	add	r3, r2
 800b1be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1c2:	663b      	str	r3, [r7, #96]	; 0x60
 800b1c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	677b      	str	r3, [r7, #116]	; 0x74
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	785b      	ldrb	r3, [r3, #1]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d12b      	bne.n	800b230 <HAL_PCD_EP_DB_Transmit+0x516>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ec:	4413      	add	r3, r2
 800b1ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	00da      	lsls	r2, r3, #3
 800b1f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	b29b      	uxth	r3, r3
 800b20a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b20e:	b29a      	uxth	r2, r3
 800b210:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b214:	801a      	strh	r2, [r3, #0]
 800b216:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b226:	b29a      	uxth	r2, r3
 800b228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b22c:	801a      	strh	r2, [r3, #0]
 800b22e:	e017      	b.n	800b260 <HAL_PCD_EP_DB_Transmit+0x546>
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	785b      	ldrb	r3, [r3, #1]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d113      	bne.n	800b260 <HAL_PCD_EP_DB_Transmit+0x546>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b240:	b29b      	uxth	r3, r3
 800b242:	461a      	mov	r2, r3
 800b244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b246:	4413      	add	r3, r2
 800b248:	677b      	str	r3, [r7, #116]	; 0x74
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	00da      	lsls	r2, r3, #3
 800b250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b252:	4413      	add	r3, r2
 800b254:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b258:	673b      	str	r3, [r7, #112]	; 0x70
 800b25a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b25c:	2200      	movs	r2, #0
 800b25e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	4619      	mov	r1, r3
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f00a fbd5 	bl	8015a16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b26c:	88fb      	ldrh	r3, [r7, #6]
 800b26e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b272:	2b00      	cmp	r3, #0
 800b274:	f040 811a 	bne.w	800b4ac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b292:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	441a      	add	r2, r3
 800b2a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b2a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	8013      	strh	r3, [r2, #0]
 800b2bc:	e0f6      	b.n	800b4ac <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b2be:	88fb      	ldrh	r3, [r7, #6]
 800b2c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d121      	bne.n	800b30c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	441a      	add	r2, r3
 800b2f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b2f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b308:	b29b      	uxth	r3, r3
 800b30a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b312:	2b01      	cmp	r3, #1
 800b314:	f040 80ca 	bne.w	800b4ac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	695a      	ldr	r2, [r3, #20]
 800b31c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b320:	441a      	add	r2, r3
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	69da      	ldr	r2, [r3, #28]
 800b32a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b32e:	441a      	add	r2, r3
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	6a1a      	ldr	r2, [r3, #32]
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d30b      	bcc.n	800b358 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	6a1a      	ldr	r2, [r3, #32]
 800b34c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b350:	1ad2      	subs	r2, r2, r3
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	621a      	str	r2, [r3, #32]
 800b356:	e017      	b.n	800b388 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d108      	bne.n	800b372 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800b360:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b370:	e00a      	b.n	800b388 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2200      	movs	r2, #0
 800b37e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	657b      	str	r3, [r7, #84]	; 0x54
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	785b      	ldrb	r3, [r3, #1]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d165      	bne.n	800b462 <HAL_PCD_EP_DB_Transmit+0x748>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3aa:	4413      	add	r3, r2
 800b3ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	00da      	lsls	r2, r3, #3
 800b3b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3cc:	801a      	strh	r2, [r3, #0]
 800b3ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3d2:	2b3e      	cmp	r3, #62	; 0x3e
 800b3d4:	d91d      	bls.n	800b412 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800b3d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3da:	095b      	lsrs	r3, r3, #5
 800b3dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3e2:	f003 031f 	and.w	r3, r3, #31
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d102      	bne.n	800b3f0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800b3ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3f2:	881b      	ldrh	r3, [r3, #0]
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	029b      	lsls	r3, r3, #10
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	4313      	orrs	r3, r2
 800b400:	b29b      	uxth	r3, r3
 800b402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b40e:	801a      	strh	r2, [r3, #0]
 800b410:	e041      	b.n	800b496 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10a      	bne.n	800b430 <HAL_PCD_EP_DB_Transmit+0x716>
 800b41a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	b29b      	uxth	r3, r3
 800b420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b428:	b29a      	uxth	r2, r3
 800b42a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b42c:	801a      	strh	r2, [r3, #0]
 800b42e:	e032      	b.n	800b496 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b434:	085b      	lsrs	r3, r3, #1
 800b436:	66bb      	str	r3, [r7, #104]	; 0x68
 800b438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	2b00      	cmp	r3, #0
 800b442:	d002      	beq.n	800b44a <HAL_PCD_EP_DB_Transmit+0x730>
 800b444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b446:	3301      	adds	r3, #1
 800b448:	66bb      	str	r3, [r7, #104]	; 0x68
 800b44a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	b29a      	uxth	r2, r3
 800b450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b452:	b29b      	uxth	r3, r3
 800b454:	029b      	lsls	r3, r3, #10
 800b456:	b29b      	uxth	r3, r3
 800b458:	4313      	orrs	r3, r2
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b45e:	801a      	strh	r2, [r3, #0]
 800b460:	e019      	b.n	800b496 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	785b      	ldrb	r3, [r3, #1]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d115      	bne.n	800b496 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b472:	b29b      	uxth	r3, r3
 800b474:	461a      	mov	r2, r3
 800b476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b478:	4413      	add	r3, r2
 800b47a:	657b      	str	r3, [r7, #84]	; 0x54
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	00da      	lsls	r2, r3, #3
 800b482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b484:	4413      	add	r3, r2
 800b486:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b48a:	653b      	str	r3, [r7, #80]	; 0x50
 800b48c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b490:	b29a      	uxth	r2, r3
 800b492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b494:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	6959      	ldr	r1, [r3, #20]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	895a      	ldrh	r2, [r3, #10]
 800b4a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	f006 fc80 	bl	8011dac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4c6:	82bb      	strh	r3, [r7, #20]
 800b4c8:	8abb      	ldrh	r3, [r7, #20]
 800b4ca:	f083 0310 	eor.w	r3, r3, #16
 800b4ce:	82bb      	strh	r3, [r7, #20]
 800b4d0:	8abb      	ldrh	r3, [r7, #20]
 800b4d2:	f083 0320 	eor.w	r3, r3, #32
 800b4d6:	82bb      	strh	r3, [r7, #20]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	441a      	add	r2, r3
 800b4e6:	8abb      	ldrh	r3, [r7, #20]
 800b4e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3790      	adds	r7, #144	; 0x90
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b506:	b480      	push	{r7}
 800b508:	b087      	sub	sp, #28
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	607b      	str	r3, [r7, #4]
 800b510:	460b      	mov	r3, r1
 800b512:	817b      	strh	r3, [r7, #10]
 800b514:	4613      	mov	r3, r2
 800b516:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b518:	897b      	ldrh	r3, [r7, #10]
 800b51a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b51e:	b29b      	uxth	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00b      	beq.n	800b53c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b524:	897b      	ldrh	r3, [r7, #10]
 800b526:	f003 0207 	and.w	r2, r3, #7
 800b52a:	4613      	mov	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4413      	add	r3, r2
 800b530:	00db      	lsls	r3, r3, #3
 800b532:	3310      	adds	r3, #16
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	4413      	add	r3, r2
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	e009      	b.n	800b550 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b53c:	897a      	ldrh	r2, [r7, #10]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	00db      	lsls	r3, r3, #3
 800b546:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b550:	893b      	ldrh	r3, [r7, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d107      	bne.n	800b566 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2200      	movs	r2, #0
 800b55a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	b29a      	uxth	r2, r3
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	80da      	strh	r2, [r3, #6]
 800b564:	e00b      	b.n	800b57e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2201      	movs	r2, #1
 800b56a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	b29a      	uxth	r2, r3
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	0c1b      	lsrs	r3, r3, #16
 800b578:	b29a      	uxth	r2, r3
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	371c      	adds	r7, #28
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	f043 0301 	orr.w	r3, r3, #1
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	f043 0302 	orr.w	r3, r3, #2
 800b5ca:	b29a      	uxth	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d141      	bne.n	800b672 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b5ee:	4b4b      	ldr	r3, [pc, #300]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b5f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5fa:	d131      	bne.n	800b660 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b5fc:	4b47      	ldr	r3, [pc, #284]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b602:	4a46      	ldr	r2, [pc, #280]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b60c:	4b43      	ldr	r3, [pc, #268]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b614:	4a41      	ldr	r2, [pc, #260]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b61a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b61c:	4b40      	ldr	r3, [pc, #256]	; (800b720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2232      	movs	r2, #50	; 0x32
 800b622:	fb02 f303 	mul.w	r3, r2, r3
 800b626:	4a3f      	ldr	r2, [pc, #252]	; (800b724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b628:	fba2 2303 	umull	r2, r3, r2, r3
 800b62c:	0c9b      	lsrs	r3, r3, #18
 800b62e:	3301      	adds	r3, #1
 800b630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b632:	e002      	b.n	800b63a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3b01      	subs	r3, #1
 800b638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b63a:	4b38      	ldr	r3, [pc, #224]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b646:	d102      	bne.n	800b64e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1f2      	bne.n	800b634 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b64e:	4b33      	ldr	r3, [pc, #204]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b65a:	d158      	bne.n	800b70e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e057      	b.n	800b710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b660:	4b2e      	ldr	r3, [pc, #184]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b666:	4a2d      	ldr	r2, [pc, #180]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b66c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b670:	e04d      	b.n	800b70e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b678:	d141      	bne.n	800b6fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b67a:	4b28      	ldr	r3, [pc, #160]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b686:	d131      	bne.n	800b6ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b688:	4b24      	ldr	r3, [pc, #144]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b68e:	4a23      	ldr	r2, [pc, #140]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b698:	4b20      	ldr	r3, [pc, #128]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b6a0:	4a1e      	ldr	r2, [pc, #120]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b6a8:	4b1d      	ldr	r3, [pc, #116]	; (800b720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2232      	movs	r2, #50	; 0x32
 800b6ae:	fb02 f303 	mul.w	r3, r2, r3
 800b6b2:	4a1c      	ldr	r2, [pc, #112]	; (800b724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b8:	0c9b      	lsrs	r3, r3, #18
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b6be:	e002      	b.n	800b6c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b6c6:	4b15      	ldr	r3, [pc, #84]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6d2:	d102      	bne.n	800b6da <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1f2      	bne.n	800b6c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b6da:	4b10      	ldr	r3, [pc, #64]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6e6:	d112      	bne.n	800b70e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e011      	b.n	800b710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b6ec:	4b0b      	ldr	r3, [pc, #44]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6f2:	4a0a      	ldr	r2, [pc, #40]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b6fc:	e007      	b.n	800b70e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b6fe:	4b07      	ldr	r3, [pc, #28]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b706:	4a05      	ldr	r2, [pc, #20]	; (800b71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b70c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	40007000 	.word	0x40007000
 800b720:	20000190 	.word	0x20000190
 800b724:	431bde83 	.word	0x431bde83

0800b728 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b728:	b480      	push	{r7}
 800b72a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b72c:	4b05      	ldr	r3, [pc, #20]	; (800b744 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	4a04      	ldr	r2, [pc, #16]	; (800b744 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b736:	6093      	str	r3, [r2, #8]
}
 800b738:	bf00      	nop
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	40007000 	.word	0x40007000

0800b748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b088      	sub	sp, #32
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e2fe      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d075      	beq.n	800b852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b766:	4b97      	ldr	r3, [pc, #604]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f003 030c 	and.w	r3, r3, #12
 800b76e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b770:	4b94      	ldr	r3, [pc, #592]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	f003 0303 	and.w	r3, r3, #3
 800b778:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	2b0c      	cmp	r3, #12
 800b77e:	d102      	bne.n	800b786 <HAL_RCC_OscConfig+0x3e>
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	2b03      	cmp	r3, #3
 800b784:	d002      	beq.n	800b78c <HAL_RCC_OscConfig+0x44>
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	2b08      	cmp	r3, #8
 800b78a:	d10b      	bne.n	800b7a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b78c:	4b8d      	ldr	r3, [pc, #564]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d05b      	beq.n	800b850 <HAL_RCC_OscConfig+0x108>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d157      	bne.n	800b850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e2d9      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7ac:	d106      	bne.n	800b7bc <HAL_RCC_OscConfig+0x74>
 800b7ae:	4b85      	ldr	r3, [pc, #532]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a84      	ldr	r2, [pc, #528]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7b8:	6013      	str	r3, [r2, #0]
 800b7ba:	e01d      	b.n	800b7f8 <HAL_RCC_OscConfig+0xb0>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7c4:	d10c      	bne.n	800b7e0 <HAL_RCC_OscConfig+0x98>
 800b7c6:	4b7f      	ldr	r3, [pc, #508]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a7e      	ldr	r2, [pc, #504]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7d0:	6013      	str	r3, [r2, #0]
 800b7d2:	4b7c      	ldr	r3, [pc, #496]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a7b      	ldr	r2, [pc, #492]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	e00b      	b.n	800b7f8 <HAL_RCC_OscConfig+0xb0>
 800b7e0:	4b78      	ldr	r3, [pc, #480]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a77      	ldr	r2, [pc, #476]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7ea:	6013      	str	r3, [r2, #0]
 800b7ec:	4b75      	ldr	r3, [pc, #468]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a74      	ldr	r2, [pc, #464]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b7f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d013      	beq.n	800b828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b800:	f7fa f964 	bl	8005acc <HAL_GetTick>
 800b804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b806:	e008      	b.n	800b81a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b808:	f7fa f960 	bl	8005acc <HAL_GetTick>
 800b80c:	4602      	mov	r2, r0
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	2b64      	cmp	r3, #100	; 0x64
 800b814:	d901      	bls.n	800b81a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e29e      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b81a:	4b6a      	ldr	r3, [pc, #424]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b822:	2b00      	cmp	r3, #0
 800b824:	d0f0      	beq.n	800b808 <HAL_RCC_OscConfig+0xc0>
 800b826:	e014      	b.n	800b852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b828:	f7fa f950 	bl	8005acc <HAL_GetTick>
 800b82c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b82e:	e008      	b.n	800b842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b830:	f7fa f94c 	bl	8005acc <HAL_GetTick>
 800b834:	4602      	mov	r2, r0
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	2b64      	cmp	r3, #100	; 0x64
 800b83c:	d901      	bls.n	800b842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b83e:	2303      	movs	r3, #3
 800b840:	e28a      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b842:	4b60      	ldr	r3, [pc, #384]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1f0      	bne.n	800b830 <HAL_RCC_OscConfig+0xe8>
 800b84e:	e000      	b.n	800b852 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 0302 	and.w	r3, r3, #2
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d075      	beq.n	800b94a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b85e:	4b59      	ldr	r3, [pc, #356]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f003 030c 	and.w	r3, r3, #12
 800b866:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b868:	4b56      	ldr	r3, [pc, #344]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	f003 0303 	and.w	r3, r3, #3
 800b870:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	2b0c      	cmp	r3, #12
 800b876:	d102      	bne.n	800b87e <HAL_RCC_OscConfig+0x136>
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d002      	beq.n	800b884 <HAL_RCC_OscConfig+0x13c>
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	2b04      	cmp	r3, #4
 800b882:	d11f      	bne.n	800b8c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b884:	4b4f      	ldr	r3, [pc, #316]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d005      	beq.n	800b89c <HAL_RCC_OscConfig+0x154>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e25d      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b89c:	4b49      	ldr	r3, [pc, #292]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	061b      	lsls	r3, r3, #24
 800b8aa:	4946      	ldr	r1, [pc, #280]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b8b0:	4b45      	ldr	r3, [pc, #276]	; (800b9c8 <HAL_RCC_OscConfig+0x280>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fa f8bd 	bl	8005a34 <HAL_InitTick>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d043      	beq.n	800b948 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e249      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d023      	beq.n	800b914 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b8cc:	4b3d      	ldr	r3, [pc, #244]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a3c      	ldr	r2, [pc, #240]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b8d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d8:	f7fa f8f8 	bl	8005acc <HAL_GetTick>
 800b8dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8de:	e008      	b.n	800b8f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8e0:	f7fa f8f4 	bl	8005acc <HAL_GetTick>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d901      	bls.n	800b8f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e232      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8f2:	4b34      	ldr	r3, [pc, #208]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0f0      	beq.n	800b8e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8fe:	4b31      	ldr	r3, [pc, #196]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	061b      	lsls	r3, r3, #24
 800b90c:	492d      	ldr	r1, [pc, #180]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b90e:	4313      	orrs	r3, r2
 800b910:	604b      	str	r3, [r1, #4]
 800b912:	e01a      	b.n	800b94a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b914:	4b2b      	ldr	r3, [pc, #172]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a2a      	ldr	r2, [pc, #168]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b91a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b91e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b920:	f7fa f8d4 	bl	8005acc <HAL_GetTick>
 800b924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b926:	e008      	b.n	800b93a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b928:	f7fa f8d0 	bl	8005acc <HAL_GetTick>
 800b92c:	4602      	mov	r2, r0
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	2b02      	cmp	r3, #2
 800b934:	d901      	bls.n	800b93a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b936:	2303      	movs	r3, #3
 800b938:	e20e      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b93a:	4b22      	ldr	r3, [pc, #136]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1f0      	bne.n	800b928 <HAL_RCC_OscConfig+0x1e0>
 800b946:	e000      	b.n	800b94a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b948:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 0308 	and.w	r3, r3, #8
 800b952:	2b00      	cmp	r3, #0
 800b954:	d041      	beq.n	800b9da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d01c      	beq.n	800b998 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b95e:	4b19      	ldr	r3, [pc, #100]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b964:	4a17      	ldr	r2, [pc, #92]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b966:	f043 0301 	orr.w	r3, r3, #1
 800b96a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b96e:	f7fa f8ad 	bl	8005acc <HAL_GetTick>
 800b972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b974:	e008      	b.n	800b988 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b976:	f7fa f8a9 	bl	8005acc <HAL_GetTick>
 800b97a:	4602      	mov	r2, r0
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	2b02      	cmp	r3, #2
 800b982:	d901      	bls.n	800b988 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e1e7      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b988:	4b0e      	ldr	r3, [pc, #56]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b98a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b98e:	f003 0302 	and.w	r3, r3, #2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d0ef      	beq.n	800b976 <HAL_RCC_OscConfig+0x22e>
 800b996:	e020      	b.n	800b9da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b998:	4b0a      	ldr	r3, [pc, #40]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b99a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b99e:	4a09      	ldr	r2, [pc, #36]	; (800b9c4 <HAL_RCC_OscConfig+0x27c>)
 800b9a0:	f023 0301 	bic.w	r3, r3, #1
 800b9a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9a8:	f7fa f890 	bl	8005acc <HAL_GetTick>
 800b9ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9ae:	e00d      	b.n	800b9cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9b0:	f7fa f88c 	bl	8005acc <HAL_GetTick>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d906      	bls.n	800b9cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	e1ca      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
 800b9c2:	bf00      	nop
 800b9c4:	40021000 	.word	0x40021000
 800b9c8:	200001a4 	.word	0x200001a4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9cc:	4b8c      	ldr	r3, [pc, #560]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800b9ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9d2:	f003 0302 	and.w	r3, r3, #2
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1ea      	bne.n	800b9b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 0304 	and.w	r3, r3, #4
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f000 80a6 	beq.w	800bb34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b9ec:	4b84      	ldr	r3, [pc, #528]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800b9ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d101      	bne.n	800b9fc <HAL_RCC_OscConfig+0x2b4>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e000      	b.n	800b9fe <HAL_RCC_OscConfig+0x2b6>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00d      	beq.n	800ba1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba02:	4b7f      	ldr	r3, [pc, #508]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800ba04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba06:	4a7e      	ldr	r2, [pc, #504]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800ba08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba0c:	6593      	str	r3, [r2, #88]	; 0x58
 800ba0e:	4b7c      	ldr	r3, [pc, #496]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800ba10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba16:	60fb      	str	r3, [r7, #12]
 800ba18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba1e:	4b79      	ldr	r3, [pc, #484]	; (800bc04 <HAL_RCC_OscConfig+0x4bc>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d118      	bne.n	800ba5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba2a:	4b76      	ldr	r3, [pc, #472]	; (800bc04 <HAL_RCC_OscConfig+0x4bc>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a75      	ldr	r2, [pc, #468]	; (800bc04 <HAL_RCC_OscConfig+0x4bc>)
 800ba30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba36:	f7fa f849 	bl	8005acc <HAL_GetTick>
 800ba3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba3c:	e008      	b.n	800ba50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba3e:	f7fa f845 	bl	8005acc <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d901      	bls.n	800ba50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e183      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba50:	4b6c      	ldr	r3, [pc, #432]	; (800bc04 <HAL_RCC_OscConfig+0x4bc>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d0f0      	beq.n	800ba3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d108      	bne.n	800ba76 <HAL_RCC_OscConfig+0x32e>
 800ba64:	4b66      	ldr	r3, [pc, #408]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800ba66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba6a:	4a65      	ldr	r2, [pc, #404]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800ba6c:	f043 0301 	orr.w	r3, r3, #1
 800ba70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba74:	e024      	b.n	800bac0 <HAL_RCC_OscConfig+0x378>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	2b05      	cmp	r3, #5
 800ba7c:	d110      	bne.n	800baa0 <HAL_RCC_OscConfig+0x358>
 800ba7e:	4b60      	ldr	r3, [pc, #384]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800ba80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba84:	4a5e      	ldr	r2, [pc, #376]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800ba86:	f043 0304 	orr.w	r3, r3, #4
 800ba8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba8e:	4b5c      	ldr	r3, [pc, #368]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800ba90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba94:	4a5a      	ldr	r2, [pc, #360]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800ba96:	f043 0301 	orr.w	r3, r3, #1
 800ba9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba9e:	e00f      	b.n	800bac0 <HAL_RCC_OscConfig+0x378>
 800baa0:	4b57      	ldr	r3, [pc, #348]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800baa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baa6:	4a56      	ldr	r2, [pc, #344]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800baa8:	f023 0301 	bic.w	r3, r3, #1
 800baac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bab0:	4b53      	ldr	r3, [pc, #332]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bab6:	4a52      	ldr	r2, [pc, #328]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bab8:	f023 0304 	bic.w	r3, r3, #4
 800babc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d016      	beq.n	800baf6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bac8:	f7fa f800 	bl	8005acc <HAL_GetTick>
 800bacc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bace:	e00a      	b.n	800bae6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bad0:	f7f9 fffc 	bl	8005acc <HAL_GetTick>
 800bad4:	4602      	mov	r2, r0
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	f241 3288 	movw	r2, #5000	; 0x1388
 800bade:	4293      	cmp	r3, r2
 800bae0:	d901      	bls.n	800bae6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800bae2:	2303      	movs	r3, #3
 800bae4:	e138      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bae6:	4b46      	ldr	r3, [pc, #280]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d0ed      	beq.n	800bad0 <HAL_RCC_OscConfig+0x388>
 800baf4:	e015      	b.n	800bb22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baf6:	f7f9 ffe9 	bl	8005acc <HAL_GetTick>
 800bafa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bafc:	e00a      	b.n	800bb14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bafe:	f7f9 ffe5 	bl	8005acc <HAL_GetTick>
 800bb02:	4602      	mov	r2, r0
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d901      	bls.n	800bb14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bb10:	2303      	movs	r3, #3
 800bb12:	e121      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb14:	4b3a      	ldr	r3, [pc, #232]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bb16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb1a:	f003 0302 	and.w	r3, r3, #2
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1ed      	bne.n	800bafe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bb22:	7ffb      	ldrb	r3, [r7, #31]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d105      	bne.n	800bb34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb28:	4b35      	ldr	r3, [pc, #212]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bb2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb2c:	4a34      	ldr	r2, [pc, #208]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bb2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d03c      	beq.n	800bbba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d01c      	beq.n	800bb82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bb48:	4b2d      	ldr	r3, [pc, #180]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bb4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb4e:	4a2c      	ldr	r2, [pc, #176]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bb50:	f043 0301 	orr.w	r3, r3, #1
 800bb54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb58:	f7f9 ffb8 	bl	8005acc <HAL_GetTick>
 800bb5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb5e:	e008      	b.n	800bb72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb60:	f7f9 ffb4 	bl	8005acc <HAL_GetTick>
 800bb64:	4602      	mov	r2, r0
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d901      	bls.n	800bb72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e0f2      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb72:	4b23      	ldr	r3, [pc, #140]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bb74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb78:	f003 0302 	and.w	r3, r3, #2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0ef      	beq.n	800bb60 <HAL_RCC_OscConfig+0x418>
 800bb80:	e01b      	b.n	800bbba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bb82:	4b1f      	ldr	r3, [pc, #124]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bb84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb88:	4a1d      	ldr	r2, [pc, #116]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bb8a:	f023 0301 	bic.w	r3, r3, #1
 800bb8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb92:	f7f9 ff9b 	bl	8005acc <HAL_GetTick>
 800bb96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bb98:	e008      	b.n	800bbac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb9a:	f7f9 ff97 	bl	8005acc <HAL_GetTick>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d901      	bls.n	800bbac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e0d5      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bbac:	4b14      	ldr	r3, [pc, #80]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bbae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbb2:	f003 0302 	and.w	r3, r3, #2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1ef      	bne.n	800bb9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	69db      	ldr	r3, [r3, #28]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f000 80c9 	beq.w	800bd56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bbc4:	4b0e      	ldr	r3, [pc, #56]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	f003 030c 	and.w	r3, r3, #12
 800bbcc:	2b0c      	cmp	r3, #12
 800bbce:	f000 8083 	beq.w	800bcd8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d15e      	bne.n	800bc98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbda:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a08      	ldr	r2, [pc, #32]	; (800bc00 <HAL_RCC_OscConfig+0x4b8>)
 800bbe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbe6:	f7f9 ff71 	bl	8005acc <HAL_GetTick>
 800bbea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bbec:	e00c      	b.n	800bc08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbee:	f7f9 ff6d 	bl	8005acc <HAL_GetTick>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d905      	bls.n	800bc08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e0ab      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
 800bc00:	40021000 	.word	0x40021000
 800bc04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc08:	4b55      	ldr	r3, [pc, #340]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1ec      	bne.n	800bbee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc14:	4b52      	ldr	r3, [pc, #328]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc16:	68da      	ldr	r2, [r3, #12]
 800bc18:	4b52      	ldr	r3, [pc, #328]	; (800bd64 <HAL_RCC_OscConfig+0x61c>)
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	6a11      	ldr	r1, [r2, #32]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc24:	3a01      	subs	r2, #1
 800bc26:	0112      	lsls	r2, r2, #4
 800bc28:	4311      	orrs	r1, r2
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800bc2e:	0212      	lsls	r2, r2, #8
 800bc30:	4311      	orrs	r1, r2
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc36:	0852      	lsrs	r2, r2, #1
 800bc38:	3a01      	subs	r2, #1
 800bc3a:	0552      	lsls	r2, r2, #21
 800bc3c:	4311      	orrs	r1, r2
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bc42:	0852      	lsrs	r2, r2, #1
 800bc44:	3a01      	subs	r2, #1
 800bc46:	0652      	lsls	r2, r2, #25
 800bc48:	4311      	orrs	r1, r2
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bc4e:	06d2      	lsls	r2, r2, #27
 800bc50:	430a      	orrs	r2, r1
 800bc52:	4943      	ldr	r1, [pc, #268]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc54:	4313      	orrs	r3, r2
 800bc56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc58:	4b41      	ldr	r3, [pc, #260]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a40      	ldr	r2, [pc, #256]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bc64:	4b3e      	ldr	r3, [pc, #248]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	4a3d      	ldr	r2, [pc, #244]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc70:	f7f9 ff2c 	bl	8005acc <HAL_GetTick>
 800bc74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc76:	e008      	b.n	800bc8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc78:	f7f9 ff28 	bl	8005acc <HAL_GetTick>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d901      	bls.n	800bc8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800bc86:	2303      	movs	r3, #3
 800bc88:	e066      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc8a:	4b35      	ldr	r3, [pc, #212]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d0f0      	beq.n	800bc78 <HAL_RCC_OscConfig+0x530>
 800bc96:	e05e      	b.n	800bd56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc98:	4b31      	ldr	r3, [pc, #196]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a30      	ldr	r2, [pc, #192]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bc9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bca4:	f7f9 ff12 	bl	8005acc <HAL_GetTick>
 800bca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bcaa:	e008      	b.n	800bcbe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcac:	f7f9 ff0e 	bl	8005acc <HAL_GetTick>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d901      	bls.n	800bcbe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e04c      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bcbe:	4b28      	ldr	r3, [pc, #160]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1f0      	bne.n	800bcac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bcca:	4b25      	ldr	r3, [pc, #148]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bccc:	68da      	ldr	r2, [r3, #12]
 800bcce:	4924      	ldr	r1, [pc, #144]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bcd0:	4b25      	ldr	r3, [pc, #148]	; (800bd68 <HAL_RCC_OscConfig+0x620>)
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	60cb      	str	r3, [r1, #12]
 800bcd6:	e03e      	b.n	800bd56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	69db      	ldr	r3, [r3, #28]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d101      	bne.n	800bce4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e039      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800bce4:	4b1e      	ldr	r3, [pc, #120]	; (800bd60 <HAL_RCC_OscConfig+0x618>)
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	f003 0203 	and.w	r2, r3, #3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a1b      	ldr	r3, [r3, #32]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d12c      	bne.n	800bd52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd02:	3b01      	subs	r3, #1
 800bd04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d123      	bne.n	800bd52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d11b      	bne.n	800bd52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d113      	bne.n	800bd52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd34:	085b      	lsrs	r3, r3, #1
 800bd36:	3b01      	subs	r3, #1
 800bd38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d109      	bne.n	800bd52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd48:	085b      	lsrs	r3, r3, #1
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d001      	beq.n	800bd56 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e000      	b.n	800bd58 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3720      	adds	r7, #32
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	40021000 	.word	0x40021000
 800bd64:	019f800c 	.word	0x019f800c
 800bd68:	feeefffc 	.word	0xfeeefffc

0800bd6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bd76:	2300      	movs	r3, #0
 800bd78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	e11e      	b.n	800bfc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bd84:	4b91      	ldr	r3, [pc, #580]	; (800bfcc <HAL_RCC_ClockConfig+0x260>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 030f 	and.w	r3, r3, #15
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d910      	bls.n	800bdb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd92:	4b8e      	ldr	r3, [pc, #568]	; (800bfcc <HAL_RCC_ClockConfig+0x260>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f023 020f 	bic.w	r2, r3, #15
 800bd9a:	498c      	ldr	r1, [pc, #560]	; (800bfcc <HAL_RCC_ClockConfig+0x260>)
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bda2:	4b8a      	ldr	r3, [pc, #552]	; (800bfcc <HAL_RCC_ClockConfig+0x260>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 030f 	and.w	r3, r3, #15
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d001      	beq.n	800bdb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e106      	b.n	800bfc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 0301 	and.w	r3, r3, #1
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d073      	beq.n	800bea8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	2b03      	cmp	r3, #3
 800bdc6:	d129      	bne.n	800be1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bdc8:	4b81      	ldr	r3, [pc, #516]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e0f4      	b.n	800bfc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800bdd8:	f000 f99e 	bl	800c118 <RCC_GetSysClockFreqFromPLLSource>
 800bddc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	4a7c      	ldr	r2, [pc, #496]	; (800bfd4 <HAL_RCC_ClockConfig+0x268>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d93f      	bls.n	800be66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bde6:	4b7a      	ldr	r3, [pc, #488]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d009      	beq.n	800be06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d033      	beq.n	800be66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800be02:	2b00      	cmp	r3, #0
 800be04:	d12f      	bne.n	800be66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800be06:	4b72      	ldr	r3, [pc, #456]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be0e:	4a70      	ldr	r2, [pc, #448]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800be10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800be16:	2380      	movs	r3, #128	; 0x80
 800be18:	617b      	str	r3, [r7, #20]
 800be1a:	e024      	b.n	800be66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	2b02      	cmp	r3, #2
 800be22:	d107      	bne.n	800be34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be24:	4b6a      	ldr	r3, [pc, #424]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d109      	bne.n	800be44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e0c6      	b.n	800bfc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be34:	4b66      	ldr	r3, [pc, #408]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e0be      	b.n	800bfc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800be44:	f000 f8ce 	bl	800bfe4 <HAL_RCC_GetSysClockFreq>
 800be48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	4a61      	ldr	r2, [pc, #388]	; (800bfd4 <HAL_RCC_ClockConfig+0x268>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d909      	bls.n	800be66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800be52:	4b5f      	ldr	r3, [pc, #380]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be5a:	4a5d      	ldr	r2, [pc, #372]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800be5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800be62:	2380      	movs	r3, #128	; 0x80
 800be64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be66:	4b5a      	ldr	r3, [pc, #360]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	f023 0203 	bic.w	r2, r3, #3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	4957      	ldr	r1, [pc, #348]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800be74:	4313      	orrs	r3, r2
 800be76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be78:	f7f9 fe28 	bl	8005acc <HAL_GetTick>
 800be7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be7e:	e00a      	b.n	800be96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be80:	f7f9 fe24 	bl	8005acc <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800be8e:	4293      	cmp	r3, r2
 800be90:	d901      	bls.n	800be96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e095      	b.n	800bfc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be96:	4b4e      	ldr	r3, [pc, #312]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	f003 020c 	and.w	r2, r3, #12
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d1eb      	bne.n	800be80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0302 	and.w	r3, r3, #2
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d023      	beq.n	800befc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0304 	and.w	r3, r3, #4
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d005      	beq.n	800becc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bec0:	4b43      	ldr	r3, [pc, #268]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	4a42      	ldr	r2, [pc, #264]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800beca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0308 	and.w	r3, r3, #8
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d007      	beq.n	800bee8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bed8:	4b3d      	ldr	r3, [pc, #244]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bee0:	4a3b      	ldr	r2, [pc, #236]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bee2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bee6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bee8:	4b39      	ldr	r3, [pc, #228]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	4936      	ldr	r1, [pc, #216]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	608b      	str	r3, [r1, #8]
 800befa:	e008      	b.n	800bf0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2b80      	cmp	r3, #128	; 0x80
 800bf00:	d105      	bne.n	800bf0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bf02:	4b33      	ldr	r3, [pc, #204]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	4a32      	ldr	r2, [pc, #200]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bf08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bf0e:	4b2f      	ldr	r3, [pc, #188]	; (800bfcc <HAL_RCC_ClockConfig+0x260>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f003 030f 	and.w	r3, r3, #15
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d21d      	bcs.n	800bf58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf1c:	4b2b      	ldr	r3, [pc, #172]	; (800bfcc <HAL_RCC_ClockConfig+0x260>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f023 020f 	bic.w	r2, r3, #15
 800bf24:	4929      	ldr	r1, [pc, #164]	; (800bfcc <HAL_RCC_ClockConfig+0x260>)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bf2c:	f7f9 fdce 	bl	8005acc <HAL_GetTick>
 800bf30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf32:	e00a      	b.n	800bf4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf34:	f7f9 fdca 	bl	8005acc <HAL_GetTick>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d901      	bls.n	800bf4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bf46:	2303      	movs	r3, #3
 800bf48:	e03b      	b.n	800bfc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf4a:	4b20      	ldr	r3, [pc, #128]	; (800bfcc <HAL_RCC_ClockConfig+0x260>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 030f 	and.w	r3, r3, #15
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d1ed      	bne.n	800bf34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d008      	beq.n	800bf76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bf64:	4b1a      	ldr	r3, [pc, #104]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	4917      	ldr	r1, [pc, #92]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 0308 	and.w	r3, r3, #8
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d009      	beq.n	800bf96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bf82:	4b13      	ldr	r3, [pc, #76]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	00db      	lsls	r3, r3, #3
 800bf90:	490f      	ldr	r1, [pc, #60]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bf96:	f000 f825 	bl	800bfe4 <HAL_RCC_GetSysClockFreq>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	4b0c      	ldr	r3, [pc, #48]	; (800bfd0 <HAL_RCC_ClockConfig+0x264>)
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	091b      	lsrs	r3, r3, #4
 800bfa2:	f003 030f 	and.w	r3, r3, #15
 800bfa6:	490c      	ldr	r1, [pc, #48]	; (800bfd8 <HAL_RCC_ClockConfig+0x26c>)
 800bfa8:	5ccb      	ldrb	r3, [r1, r3]
 800bfaa:	f003 031f 	and.w	r3, r3, #31
 800bfae:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb2:	4a0a      	ldr	r2, [pc, #40]	; (800bfdc <HAL_RCC_ClockConfig+0x270>)
 800bfb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bfb6:	4b0a      	ldr	r3, [pc, #40]	; (800bfe0 <HAL_RCC_ClockConfig+0x274>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7f9 fd3a 	bl	8005a34 <HAL_InitTick>
 800bfc0:	4603      	mov	r3, r0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3718      	adds	r7, #24
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	40022000 	.word	0x40022000
 800bfd0:	40021000 	.word	0x40021000
 800bfd4:	04c4b400 	.word	0x04c4b400
 800bfd8:	080190d4 	.word	0x080190d4
 800bfdc:	20000190 	.word	0x20000190
 800bfe0:	200001a4 	.word	0x200001a4

0800bfe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b087      	sub	sp, #28
 800bfe8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bfea:	4b2c      	ldr	r3, [pc, #176]	; (800c09c <HAL_RCC_GetSysClockFreq+0xb8>)
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	f003 030c 	and.w	r3, r3, #12
 800bff2:	2b04      	cmp	r3, #4
 800bff4:	d102      	bne.n	800bffc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bff6:	4b2a      	ldr	r3, [pc, #168]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bff8:	613b      	str	r3, [r7, #16]
 800bffa:	e047      	b.n	800c08c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bffc:	4b27      	ldr	r3, [pc, #156]	; (800c09c <HAL_RCC_GetSysClockFreq+0xb8>)
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f003 030c 	and.w	r3, r3, #12
 800c004:	2b08      	cmp	r3, #8
 800c006:	d102      	bne.n	800c00e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c008:	4b26      	ldr	r3, [pc, #152]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	e03e      	b.n	800c08c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c00e:	4b23      	ldr	r3, [pc, #140]	; (800c09c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	f003 030c 	and.w	r3, r3, #12
 800c016:	2b0c      	cmp	r3, #12
 800c018:	d136      	bne.n	800c088 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c01a:	4b20      	ldr	r3, [pc, #128]	; (800c09c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	f003 0303 	and.w	r3, r3, #3
 800c022:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c024:	4b1d      	ldr	r3, [pc, #116]	; (800c09c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	091b      	lsrs	r3, r3, #4
 800c02a:	f003 030f 	and.w	r3, r3, #15
 800c02e:	3301      	adds	r3, #1
 800c030:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b03      	cmp	r3, #3
 800c036:	d10c      	bne.n	800c052 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c038:	4a1a      	ldr	r2, [pc, #104]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c040:	4a16      	ldr	r2, [pc, #88]	; (800c09c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c042:	68d2      	ldr	r2, [r2, #12]
 800c044:	0a12      	lsrs	r2, r2, #8
 800c046:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c04a:	fb02 f303 	mul.w	r3, r2, r3
 800c04e:	617b      	str	r3, [r7, #20]
      break;
 800c050:	e00c      	b.n	800c06c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c052:	4a13      	ldr	r2, [pc, #76]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	fbb2 f3f3 	udiv	r3, r2, r3
 800c05a:	4a10      	ldr	r2, [pc, #64]	; (800c09c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c05c:	68d2      	ldr	r2, [r2, #12]
 800c05e:	0a12      	lsrs	r2, r2, #8
 800c060:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c064:	fb02 f303 	mul.w	r3, r2, r3
 800c068:	617b      	str	r3, [r7, #20]
      break;
 800c06a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c06c:	4b0b      	ldr	r3, [pc, #44]	; (800c09c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	0e5b      	lsrs	r3, r3, #25
 800c072:	f003 0303 	and.w	r3, r3, #3
 800c076:	3301      	adds	r3, #1
 800c078:	005b      	lsls	r3, r3, #1
 800c07a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c07c:	697a      	ldr	r2, [r7, #20]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	fbb2 f3f3 	udiv	r3, r2, r3
 800c084:	613b      	str	r3, [r7, #16]
 800c086:	e001      	b.n	800c08c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c088:	2300      	movs	r3, #0
 800c08a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c08c:	693b      	ldr	r3, [r7, #16]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	371c      	adds	r7, #28
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	40021000 	.word	0x40021000
 800c0a0:	00f42400 	.word	0x00f42400
 800c0a4:	007a1200 	.word	0x007a1200

0800c0a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0ac:	4b03      	ldr	r3, [pc, #12]	; (800c0bc <HAL_RCC_GetHCLKFreq+0x14>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	20000190 	.word	0x20000190

0800c0c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c0c4:	f7ff fff0 	bl	800c0a8 <HAL_RCC_GetHCLKFreq>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	0a1b      	lsrs	r3, r3, #8
 800c0d0:	f003 0307 	and.w	r3, r3, #7
 800c0d4:	4904      	ldr	r1, [pc, #16]	; (800c0e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c0d6:	5ccb      	ldrb	r3, [r1, r3]
 800c0d8:	f003 031f 	and.w	r3, r3, #31
 800c0dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	40021000 	.word	0x40021000
 800c0e8:	080190e4 	.word	0x080190e4

0800c0ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c0f0:	f7ff ffda 	bl	800c0a8 <HAL_RCC_GetHCLKFreq>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	4b06      	ldr	r3, [pc, #24]	; (800c110 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	0adb      	lsrs	r3, r3, #11
 800c0fc:	f003 0307 	and.w	r3, r3, #7
 800c100:	4904      	ldr	r1, [pc, #16]	; (800c114 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c102:	5ccb      	ldrb	r3, [r1, r3]
 800c104:	f003 031f 	and.w	r3, r3, #31
 800c108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	40021000 	.word	0x40021000
 800c114:	080190e4 	.word	0x080190e4

0800c118 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c118:	b480      	push	{r7}
 800c11a:	b087      	sub	sp, #28
 800c11c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c11e:	4b1e      	ldr	r3, [pc, #120]	; (800c198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	f003 0303 	and.w	r3, r3, #3
 800c126:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c128:	4b1b      	ldr	r3, [pc, #108]	; (800c198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	091b      	lsrs	r3, r3, #4
 800c12e:	f003 030f 	and.w	r3, r3, #15
 800c132:	3301      	adds	r3, #1
 800c134:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d10c      	bne.n	800c156 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c13c:	4a17      	ldr	r2, [pc, #92]	; (800c19c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	fbb2 f3f3 	udiv	r3, r2, r3
 800c144:	4a14      	ldr	r2, [pc, #80]	; (800c198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c146:	68d2      	ldr	r2, [r2, #12]
 800c148:	0a12      	lsrs	r2, r2, #8
 800c14a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c14e:	fb02 f303 	mul.w	r3, r2, r3
 800c152:	617b      	str	r3, [r7, #20]
    break;
 800c154:	e00c      	b.n	800c170 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c156:	4a12      	ldr	r2, [pc, #72]	; (800c1a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c15e:	4a0e      	ldr	r2, [pc, #56]	; (800c198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c160:	68d2      	ldr	r2, [r2, #12]
 800c162:	0a12      	lsrs	r2, r2, #8
 800c164:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c168:	fb02 f303 	mul.w	r3, r2, r3
 800c16c:	617b      	str	r3, [r7, #20]
    break;
 800c16e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c170:	4b09      	ldr	r3, [pc, #36]	; (800c198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	0e5b      	lsrs	r3, r3, #25
 800c176:	f003 0303 	and.w	r3, r3, #3
 800c17a:	3301      	adds	r3, #1
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	fbb2 f3f3 	udiv	r3, r2, r3
 800c188:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c18a:	687b      	ldr	r3, [r7, #4]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	371c      	adds	r7, #28
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr
 800c198:	40021000 	.word	0x40021000
 800c19c:	007a1200 	.word	0x007a1200
 800c1a0:	00f42400 	.word	0x00f42400

0800c1a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f000 8098 	beq.w	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c1c6:	4b43      	ldr	r3, [pc, #268]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10d      	bne.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c1d2:	4b40      	ldr	r3, [pc, #256]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1d6:	4a3f      	ldr	r2, [pc, #252]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1dc:	6593      	str	r3, [r2, #88]	; 0x58
 800c1de:	4b3d      	ldr	r3, [pc, #244]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1e6:	60bb      	str	r3, [r7, #8]
 800c1e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c1ee:	4b3a      	ldr	r3, [pc, #232]	; (800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a39      	ldr	r2, [pc, #228]	; (800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c1f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c1fa:	f7f9 fc67 	bl	8005acc <HAL_GetTick>
 800c1fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c200:	e009      	b.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c202:	f7f9 fc63 	bl	8005acc <HAL_GetTick>
 800c206:	4602      	mov	r2, r0
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d902      	bls.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c210:	2303      	movs	r3, #3
 800c212:	74fb      	strb	r3, [r7, #19]
        break;
 800c214:	e005      	b.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c216:	4b30      	ldr	r3, [pc, #192]	; (800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0ef      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c222:	7cfb      	ldrb	r3, [r7, #19]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d159      	bne.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c228:	4b2a      	ldr	r3, [pc, #168]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c22e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c232:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d01e      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23e:	697a      	ldr	r2, [r7, #20]
 800c240:	429a      	cmp	r2, r3
 800c242:	d019      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c244:	4b23      	ldr	r3, [pc, #140]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c24a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c24e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c250:	4b20      	ldr	r3, [pc, #128]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c256:	4a1f      	ldr	r2, [pc, #124]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c25c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c260:	4b1c      	ldr	r3, [pc, #112]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c266:	4a1b      	ldr	r2, [pc, #108]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c26c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c270:	4a18      	ldr	r2, [pc, #96]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f003 0301 	and.w	r3, r3, #1
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d016      	beq.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c282:	f7f9 fc23 	bl	8005acc <HAL_GetTick>
 800c286:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c288:	e00b      	b.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c28a:	f7f9 fc1f 	bl	8005acc <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	f241 3288 	movw	r2, #5000	; 0x1388
 800c298:	4293      	cmp	r3, r2
 800c29a:	d902      	bls.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	74fb      	strb	r3, [r7, #19]
            break;
 800c2a0:	e006      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c2a2:	4b0c      	ldr	r3, [pc, #48]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2a8:	f003 0302 	and.w	r3, r3, #2
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d0ec      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c2b0:	7cfb      	ldrb	r3, [r7, #19]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d10b      	bne.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c2b6:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c4:	4903      	ldr	r1, [pc, #12]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c2cc:	e008      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c2ce:	7cfb      	ldrb	r3, [r7, #19]
 800c2d0:	74bb      	strb	r3, [r7, #18]
 800c2d2:	e005      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c2d4:	40021000 	.word	0x40021000
 800c2d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2dc:	7cfb      	ldrb	r3, [r7, #19]
 800c2de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c2e0:	7c7b      	ldrb	r3, [r7, #17]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d105      	bne.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2e6:	4ba6      	ldr	r3, [pc, #664]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ea:	4aa5      	ldr	r2, [pc, #660]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c2ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 0301 	and.w	r3, r3, #1
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00a      	beq.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c2fe:	4ba0      	ldr	r3, [pc, #640]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c304:	f023 0203 	bic.w	r2, r3, #3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	499c      	ldr	r1, [pc, #624]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c30e:	4313      	orrs	r3, r2
 800c310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 0302 	and.w	r3, r3, #2
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00a      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c320:	4b97      	ldr	r3, [pc, #604]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c326:	f023 020c 	bic.w	r2, r3, #12
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	4994      	ldr	r1, [pc, #592]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c330:	4313      	orrs	r3, r2
 800c332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 0304 	and.w	r3, r3, #4
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d00a      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c342:	4b8f      	ldr	r3, [pc, #572]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	498b      	ldr	r1, [pc, #556]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c352:	4313      	orrs	r3, r2
 800c354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f003 0308 	and.w	r3, r3, #8
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00a      	beq.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c364:	4b86      	ldr	r3, [pc, #536]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c36a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	4983      	ldr	r1, [pc, #524]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c374:	4313      	orrs	r3, r2
 800c376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f003 0320 	and.w	r3, r3, #32
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00a      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c386:	4b7e      	ldr	r3, [pc, #504]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c38c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	497a      	ldr	r1, [pc, #488]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c396:	4313      	orrs	r3, r2
 800c398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00a      	beq.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c3a8:	4b75      	ldr	r3, [pc, #468]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	4972      	ldr	r1, [pc, #456]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00a      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c3ca:	4b6d      	ldr	r3, [pc, #436]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	69db      	ldr	r3, [r3, #28]
 800c3d8:	4969      	ldr	r1, [pc, #420]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00a      	beq.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c3ec:	4b64      	ldr	r3, [pc, #400]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	4961      	ldr	r1, [pc, #388]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00a      	beq.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c40e:	4b5c      	ldr	r3, [pc, #368]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41c:	4958      	ldr	r1, [pc, #352]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c41e:	4313      	orrs	r3, r2
 800c420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d015      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c430:	4b53      	ldr	r3, [pc, #332]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43e:	4950      	ldr	r1, [pc, #320]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c440:	4313      	orrs	r3, r2
 800c442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c44a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c44e:	d105      	bne.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c450:	4b4b      	ldr	r3, [pc, #300]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	4a4a      	ldr	r2, [pc, #296]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c45a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c464:	2b00      	cmp	r3, #0
 800c466:	d015      	beq.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c468:	4b45      	ldr	r3, [pc, #276]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c46e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c476:	4942      	ldr	r1, [pc, #264]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c478:	4313      	orrs	r3, r2
 800c47a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c486:	d105      	bne.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c488:	4b3d      	ldr	r3, [pc, #244]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	4a3c      	ldr	r2, [pc, #240]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c492:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d015      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c4a0:	4b37      	ldr	r3, [pc, #220]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ae:	4934      	ldr	r1, [pc, #208]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c4be:	d105      	bne.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c4c0:	4b2f      	ldr	r3, [pc, #188]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	4a2e      	ldr	r2, [pc, #184]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d015      	beq.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4d8:	4b29      	ldr	r3, [pc, #164]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e6:	4926      	ldr	r1, [pc, #152]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4f6:	d105      	bne.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c4f8:	4b21      	ldr	r3, [pc, #132]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	4a20      	ldr	r2, [pc, #128]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c502:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d015      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c510:	4b1b      	ldr	r3, [pc, #108]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51e:	4918      	ldr	r1, [pc, #96]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c520:	4313      	orrs	r3, r2
 800c522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c52e:	d105      	bne.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c530:	4b13      	ldr	r3, [pc, #76]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	4a12      	ldr	r2, [pc, #72]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c53a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d015      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c548:	4b0d      	ldr	r3, [pc, #52]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c54e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c556:	490a      	ldr	r1, [pc, #40]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c558:	4313      	orrs	r3, r2
 800c55a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c566:	d105      	bne.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c568:	4b05      	ldr	r3, [pc, #20]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	4a04      	ldr	r2, [pc, #16]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c56e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c572:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c574:	7cbb      	ldrb	r3, [r7, #18]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	40021000 	.word	0x40021000

0800c584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	e09d      	b.n	800c6d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d108      	bne.n	800c5b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5a6:	d009      	beq.n	800c5bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	61da      	str	r2, [r3, #28]
 800c5ae:	e005      	b.n	800c5bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d106      	bne.n	800c5dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7f8 fa0a 	bl	80049f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c5fc:	d902      	bls.n	800c604 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c5fe:	2300      	movs	r3, #0
 800c600:	60fb      	str	r3, [r7, #12]
 800c602:	e002      	b.n	800c60a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c608:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c612:	d007      	beq.n	800c624 <HAL_SPI_Init+0xa0>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c61c:	d002      	beq.n	800c624 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c634:	431a      	orrs	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	f003 0302 	and.w	r3, r3, #2
 800c63e:	431a      	orrs	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	f003 0301 	and.w	r3, r3, #1
 800c648:	431a      	orrs	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c652:	431a      	orrs	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	69db      	ldr	r3, [r3, #28]
 800c658:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c65c:	431a      	orrs	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a1b      	ldr	r3, [r3, #32]
 800c662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c666:	ea42 0103 	orr.w	r1, r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	430a      	orrs	r2, r1
 800c678:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	0c1b      	lsrs	r3, r3, #16
 800c680:	f003 0204 	and.w	r2, r3, #4
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c688:	f003 0310 	and.w	r3, r3, #16
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c692:	f003 0308 	and.w	r3, r3, #8
 800c696:	431a      	orrs	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c6a0:	ea42 0103 	orr.w	r1, r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	430a      	orrs	r2, r1
 800c6b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	69da      	ldr	r2, [r3, #28]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b088      	sub	sp, #32
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	60f8      	str	r0, [r7, #12]
 800c6e2:	60b9      	str	r1, [r7, #8]
 800c6e4:	603b      	str	r3, [r7, #0]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d101      	bne.n	800c6fc <HAL_SPI_Transmit+0x22>
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	e15f      	b.n	800c9bc <HAL_SPI_Transmit+0x2e2>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c704:	f7f9 f9e2 	bl	8005acc <HAL_GetTick>
 800c708:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c70a:	88fb      	ldrh	r3, [r7, #6]
 800c70c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b01      	cmp	r3, #1
 800c718:	d002      	beq.n	800c720 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c71a:	2302      	movs	r3, #2
 800c71c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c71e:	e148      	b.n	800c9b2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <HAL_SPI_Transmit+0x52>
 800c726:	88fb      	ldrh	r3, [r7, #6]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d102      	bne.n	800c732 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c730:	e13f      	b.n	800c9b2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2203      	movs	r2, #3
 800c736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	88fa      	ldrh	r2, [r7, #6]
 800c74a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	88fa      	ldrh	r2, [r7, #6]
 800c750:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2200      	movs	r2, #0
 800c76c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2200      	movs	r2, #0
 800c772:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c77c:	d10f      	bne.n	800c79e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c78c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c79c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a8:	2b40      	cmp	r3, #64	; 0x40
 800c7aa:	d007      	beq.n	800c7bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7c4:	d94f      	bls.n	800c866 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <HAL_SPI_Transmit+0xfa>
 800c7ce:	8afb      	ldrh	r3, [r7, #22]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d142      	bne.n	800c85a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d8:	881a      	ldrh	r2, [r3, #0]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e4:	1c9a      	adds	r2, r3, #2
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c7f8:	e02f      	b.n	800c85a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	f003 0302 	and.w	r3, r3, #2
 800c804:	2b02      	cmp	r3, #2
 800c806:	d112      	bne.n	800c82e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80c:	881a      	ldrh	r2, [r3, #0]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c818:	1c9a      	adds	r2, r3, #2
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c822:	b29b      	uxth	r3, r3
 800c824:	3b01      	subs	r3, #1
 800c826:	b29a      	uxth	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c82c:	e015      	b.n	800c85a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c82e:	f7f9 f94d 	bl	8005acc <HAL_GetTick>
 800c832:	4602      	mov	r2, r0
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d803      	bhi.n	800c846 <HAL_SPI_Transmit+0x16c>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c844:	d102      	bne.n	800c84c <HAL_SPI_Transmit+0x172>
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d106      	bne.n	800c85a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c84c:	2303      	movs	r3, #3
 800c84e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c858:	e0ab      	b.n	800c9b2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c85e:	b29b      	uxth	r3, r3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1ca      	bne.n	800c7fa <HAL_SPI_Transmit+0x120>
 800c864:	e080      	b.n	800c968 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d002      	beq.n	800c874 <HAL_SPI_Transmit+0x19a>
 800c86e:	8afb      	ldrh	r3, [r7, #22]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d174      	bne.n	800c95e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c878:	b29b      	uxth	r3, r3
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d912      	bls.n	800c8a4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c882:	881a      	ldrh	r2, [r3, #0]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88e:	1c9a      	adds	r2, r3, #2
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c898:	b29b      	uxth	r3, r3
 800c89a:	3b02      	subs	r3, #2
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c8a2:	e05c      	b.n	800c95e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	330c      	adds	r3, #12
 800c8ae:	7812      	ldrb	r2, [r2, #0]
 800c8b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c8ca:	e048      	b.n	800c95e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f003 0302 	and.w	r3, r3, #2
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	d12b      	bne.n	800c932 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d912      	bls.n	800c90a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e8:	881a      	ldrh	r2, [r3, #0]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f4:	1c9a      	adds	r2, r3, #2
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	3b02      	subs	r3, #2
 800c902:	b29a      	uxth	r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c908:	e029      	b.n	800c95e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	330c      	adds	r3, #12
 800c914:	7812      	ldrb	r2, [r2, #0]
 800c916:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91c:	1c5a      	adds	r2, r3, #1
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c926:	b29b      	uxth	r3, r3
 800c928:	3b01      	subs	r3, #1
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c930:	e015      	b.n	800c95e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c932:	f7f9 f8cb 	bl	8005acc <HAL_GetTick>
 800c936:	4602      	mov	r2, r0
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	683a      	ldr	r2, [r7, #0]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d803      	bhi.n	800c94a <HAL_SPI_Transmit+0x270>
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c948:	d102      	bne.n	800c950 <HAL_SPI_Transmit+0x276>
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d106      	bne.n	800c95e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800c950:	2303      	movs	r3, #3
 800c952:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2201      	movs	r2, #1
 800c958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c95c:	e029      	b.n	800c9b2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c962:	b29b      	uxth	r3, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1b1      	bne.n	800c8cc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c968:	69ba      	ldr	r2, [r7, #24]
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f000 fad7 	bl	800cf20 <SPI_EndRxTxTransaction>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d002      	beq.n	800c97e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2220      	movs	r2, #32
 800c97c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10a      	bne.n	800c99c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c986:	2300      	movs	r3, #0
 800c988:	613b      	str	r3, [r7, #16]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	613b      	str	r3, [r7, #16]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	613b      	str	r3, [r7, #16]
 800c99a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d002      	beq.n	800c9aa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	77fb      	strb	r3, [r7, #31]
 800c9a8:	e003      	b.n	800c9b2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c9ba:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3720      	adds	r7, #32
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d101      	bne.n	800c9e4 <HAL_SPI_Transmit_DMA+0x20>
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	e0d4      	b.n	800cb8e <HAL_SPI_Transmit_DMA+0x1ca>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d002      	beq.n	800c9fe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c9fc:	e0c2      	b.n	800cb84 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <HAL_SPI_Transmit_DMA+0x46>
 800ca04:	88fb      	ldrh	r3, [r7, #6]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca0e:	e0b9      	b.n	800cb84 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2203      	movs	r2, #3
 800ca14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	88fa      	ldrh	r2, [r7, #6]
 800ca28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	88fa      	ldrh	r2, [r7, #6]
 800ca2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca5a:	d10f      	bne.n	800ca7c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca80:	4a45      	ldr	r2, [pc, #276]	; (800cb98 <HAL_SPI_Transmit_DMA+0x1d4>)
 800ca82:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca88:	4a44      	ldr	r2, [pc, #272]	; (800cb9c <HAL_SPI_Transmit_DMA+0x1d8>)
 800ca8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca90:	4a43      	ldr	r2, [pc, #268]	; (800cba0 <HAL_SPI_Transmit_DMA+0x1dc>)
 800ca92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca98:	2200      	movs	r2, #0
 800ca9a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	685a      	ldr	r2, [r3, #4]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800caaa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cab4:	d82d      	bhi.n	800cb12 <HAL_SPI_Transmit_DMA+0x14e>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caba:	699b      	ldr	r3, [r3, #24]
 800cabc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cac0:	d127      	bne.n	800cb12 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	f003 0301 	and.w	r3, r3, #1
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d10f      	bne.n	800caf0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	685a      	ldr	r2, [r3, #4]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cade:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	085b      	lsrs	r3, r3, #1
 800cae8:	b29a      	uxth	r2, r3
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800caee:	e010      	b.n	800cb12 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	685a      	ldr	r2, [r3, #4]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cafe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	085b      	lsrs	r3, r3, #1
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	330c      	adds	r3, #12
 800cb22:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb28:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb2a:	f7fc f8d5 	bl	8008cd8 <HAL_DMA_Start_IT>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d008      	beq.n	800cb46 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb38:	f043 0210 	orr.w	r2, r3, #16
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cb44:	e01e      	b.n	800cb84 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb50:	2b40      	cmp	r3, #64	; 0x40
 800cb52:	d007      	beq.n	800cb64 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb62:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	685a      	ldr	r2, [r3, #4]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f042 0220 	orr.w	r2, r2, #32
 800cb72:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	685a      	ldr	r2, [r3, #4]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f042 0202 	orr.w	r2, r2, #2
 800cb82:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cb8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3718      	adds	r7, #24
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	0800cc87 	.word	0x0800cc87
 800cb9c:	0800cbe1 	.word	0x0800cbe1
 800cba0:	0800cca3 	.word	0x0800cca3

0800cba4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cbee:	f7f8 ff6d 	bl	8005acc <HAL_GetTick>
 800cbf2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f003 0320 	and.w	r3, r3, #32
 800cbfe:	2b20      	cmp	r3, #32
 800cc00:	d03b      	beq.n	800cc7a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	685a      	ldr	r2, [r3, #4]
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f022 0220 	bic.w	r2, r2, #32
 800cc10:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f022 0202 	bic.w	r2, r2, #2
 800cc20:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cc22:	693a      	ldr	r2, [r7, #16]
 800cc24:	2164      	movs	r1, #100	; 0x64
 800cc26:	6978      	ldr	r0, [r7, #20]
 800cc28:	f000 f97a 	bl	800cf20 <SPI_EndRxTxTransaction>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d005      	beq.n	800cc3e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc36:	f043 0220 	orr.w	r2, r3, #32
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10a      	bne.n	800cc5c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc46:	2300      	movs	r3, #0
 800cc48:	60fb      	str	r3, [r7, #12]
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	60fb      	str	r3, [r7, #12]
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	2201      	movs	r2, #1
 800cc66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cc72:	6978      	ldr	r0, [r7, #20]
 800cc74:	f7ff ffaa 	bl	800cbcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cc78:	e002      	b.n	800cc80 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cc7a:	6978      	ldr	r0, [r7, #20]
 800cc7c:	f7ff ff92 	bl	800cba4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b084      	sub	sp, #16
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc92:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f7ff ff8f 	bl	800cbb8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc9a:	bf00      	nop
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b084      	sub	sp, #16
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccae:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f022 0203 	bic.w	r2, r2, #3
 800ccbe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccc4:	f043 0210 	orr.w	r2, r3, #16
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f7ff ff79 	bl	800cbcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ccda:	bf00      	nop
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
	...

0800cce4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b088      	sub	sp, #32
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	603b      	str	r3, [r7, #0]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ccf4:	f7f8 feea 	bl	8005acc <HAL_GetTick>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfc:	1a9b      	subs	r3, r3, r2
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	4413      	add	r3, r2
 800cd02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cd04:	f7f8 fee2 	bl	8005acc <HAL_GetTick>
 800cd08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cd0a:	4b39      	ldr	r3, [pc, #228]	; (800cdf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	015b      	lsls	r3, r3, #5
 800cd10:	0d1b      	lsrs	r3, r3, #20
 800cd12:	69fa      	ldr	r2, [r7, #28]
 800cd14:	fb02 f303 	mul.w	r3, r2, r3
 800cd18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd1a:	e054      	b.n	800cdc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd22:	d050      	beq.n	800cdc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cd24:	f7f8 fed2 	bl	8005acc <HAL_GetTick>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	69fa      	ldr	r2, [r7, #28]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d902      	bls.n	800cd3a <SPI_WaitFlagStateUntilTimeout+0x56>
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d13d      	bne.n	800cdb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	685a      	ldr	r2, [r3, #4]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cd48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd52:	d111      	bne.n	800cd78 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd5c:	d004      	beq.n	800cd68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd66:	d107      	bne.n	800cd78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd80:	d10f      	bne.n	800cda2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cda0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	e017      	b.n	800cde6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689a      	ldr	r2, [r3, #8]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	4013      	ands	r3, r2
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	bf0c      	ite	eq
 800cdd6:	2301      	moveq	r3, #1
 800cdd8:	2300      	movne	r3, #0
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	461a      	mov	r2, r3
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d19b      	bne.n	800cd1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3720      	adds	r7, #32
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	20000190 	.word	0x20000190

0800cdf4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b08a      	sub	sp, #40	; 0x28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ce06:	f7f8 fe61 	bl	8005acc <HAL_GetTick>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	1a9b      	subs	r3, r3, r2
 800ce10:	683a      	ldr	r2, [r7, #0]
 800ce12:	4413      	add	r3, r2
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ce16:	f7f8 fe59 	bl	8005acc <HAL_GetTick>
 800ce1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	330c      	adds	r3, #12
 800ce22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ce24:	4b3d      	ldr	r3, [pc, #244]	; (800cf1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00da      	lsls	r2, r3, #3
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	0d1b      	lsrs	r3, r3, #20
 800ce34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce36:	fb02 f303 	mul.w	r3, r2, r3
 800ce3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ce3c:	e060      	b.n	800cf00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ce44:	d107      	bne.n	800ce56 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d104      	bne.n	800ce56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ce54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce5c:	d050      	beq.n	800cf00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ce5e:	f7f8 fe35 	bl	8005acc <HAL_GetTick>
 800ce62:	4602      	mov	r2, r0
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d902      	bls.n	800ce74 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d13d      	bne.n	800cef0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ce82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce8c:	d111      	bne.n	800ceb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce96:	d004      	beq.n	800cea2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cea0:	d107      	bne.n	800ceb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceba:	d10f      	bne.n	800cedc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ceca:	601a      	str	r2, [r3, #0]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ceda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ceec:	2303      	movs	r3, #3
 800ceee:	e010      	b.n	800cf12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d101      	bne.n	800cefa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cef6:	2300      	movs	r3, #0
 800cef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	689a      	ldr	r2, [r3, #8]
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	4013      	ands	r3, r2
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d196      	bne.n	800ce3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3728      	adds	r7, #40	; 0x28
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	20000190 	.word	0x20000190

0800cf20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af02      	add	r7, sp, #8
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f7ff ff5b 	bl	800cdf4 <SPI_WaitFifoStateUntilTimeout>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d007      	beq.n	800cf54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf48:	f043 0220 	orr.w	r2, r3, #32
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cf50:	2303      	movs	r3, #3
 800cf52:	e027      	b.n	800cfa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	9300      	str	r3, [sp, #0]
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	2180      	movs	r1, #128	; 0x80
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f7ff fec0 	bl	800cce4 <SPI_WaitFlagStateUntilTimeout>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d007      	beq.n	800cf7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf6e:	f043 0220 	orr.w	r2, r3, #32
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cf76:	2303      	movs	r3, #3
 800cf78:	e014      	b.n	800cfa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7ff ff34 	bl	800cdf4 <SPI_WaitFifoStateUntilTimeout>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d007      	beq.n	800cfa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf96:	f043 0220 	orr.w	r2, r3, #32
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	e000      	b.n	800cfa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cfa2:	2300      	movs	r3, #0
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e049      	b.n	800d052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d106      	bne.n	800cfd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7f7 fe36 	bl	8004c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f000 ff72 	bl	800ded4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d001      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e04a      	b.n	800d10a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2202      	movs	r2, #2
 800d078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68da      	ldr	r2, [r3, #12]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f042 0201 	orr.w	r2, r2, #1
 800d08a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a21      	ldr	r2, [pc, #132]	; (800d118 <HAL_TIM_Base_Start_IT+0xbc>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d018      	beq.n	800d0c8 <HAL_TIM_Base_Start_IT+0x6c>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d09e:	d013      	beq.n	800d0c8 <HAL_TIM_Base_Start_IT+0x6c>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a1d      	ldr	r2, [pc, #116]	; (800d11c <HAL_TIM_Base_Start_IT+0xc0>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00e      	beq.n	800d0c8 <HAL_TIM_Base_Start_IT+0x6c>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a1c      	ldr	r2, [pc, #112]	; (800d120 <HAL_TIM_Base_Start_IT+0xc4>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d009      	beq.n	800d0c8 <HAL_TIM_Base_Start_IT+0x6c>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a1a      	ldr	r2, [pc, #104]	; (800d124 <HAL_TIM_Base_Start_IT+0xc8>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d004      	beq.n	800d0c8 <HAL_TIM_Base_Start_IT+0x6c>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a19      	ldr	r2, [pc, #100]	; (800d128 <HAL_TIM_Base_Start_IT+0xcc>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d115      	bne.n	800d0f4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	689a      	ldr	r2, [r3, #8]
 800d0ce:	4b17      	ldr	r3, [pc, #92]	; (800d12c <HAL_TIM_Base_Start_IT+0xd0>)
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b06      	cmp	r3, #6
 800d0d8:	d015      	beq.n	800d106 <HAL_TIM_Base_Start_IT+0xaa>
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0e0:	d011      	beq.n	800d106 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f042 0201 	orr.w	r2, r2, #1
 800d0f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0f2:	e008      	b.n	800d106 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f042 0201 	orr.w	r2, r2, #1
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	e000      	b.n	800d108 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d106:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3714      	adds	r7, #20
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	40012c00 	.word	0x40012c00
 800d11c:	40000400 	.word	0x40000400
 800d120:	40000800 	.word	0x40000800
 800d124:	40013400 	.word	0x40013400
 800d128:	40014000 	.word	0x40014000
 800d12c:	00010007 	.word	0x00010007

0800d130 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68da      	ldr	r2, [r3, #12]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f022 0201 	bic.w	r2, r2, #1
 800d146:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6a1a      	ldr	r2, [r3, #32]
 800d14e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d152:	4013      	ands	r3, r2
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10f      	bne.n	800d178 <HAL_TIM_Base_Stop_IT+0x48>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	6a1a      	ldr	r2, [r3, #32]
 800d15e:	f244 4344 	movw	r3, #17476	; 0x4444
 800d162:	4013      	ands	r3, r2
 800d164:	2b00      	cmp	r3, #0
 800d166:	d107      	bne.n	800d178 <HAL_TIM_Base_Stop_IT+0x48>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f022 0201 	bic.w	r2, r2, #1
 800d176:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr

0800d18e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b082      	sub	sp, #8
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d101      	bne.n	800d1a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d19c:	2301      	movs	r3, #1
 800d19e:	e049      	b.n	800d234 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d106      	bne.n	800d1ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7f7 fc8d 	bl	8004ad4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2202      	movs	r2, #2
 800d1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	f000 fe81 	bl	800ded4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d246:	2300      	movs	r3, #0
 800d248:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d109      	bne.n	800d264 <HAL_TIM_PWM_Start_IT+0x28>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b01      	cmp	r3, #1
 800d25a:	bf14      	ite	ne
 800d25c:	2301      	movne	r3, #1
 800d25e:	2300      	moveq	r3, #0
 800d260:	b2db      	uxtb	r3, r3
 800d262:	e03c      	b.n	800d2de <HAL_TIM_PWM_Start_IT+0xa2>
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	2b04      	cmp	r3, #4
 800d268:	d109      	bne.n	800d27e <HAL_TIM_PWM_Start_IT+0x42>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d270:	b2db      	uxtb	r3, r3
 800d272:	2b01      	cmp	r3, #1
 800d274:	bf14      	ite	ne
 800d276:	2301      	movne	r3, #1
 800d278:	2300      	moveq	r3, #0
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	e02f      	b.n	800d2de <HAL_TIM_PWM_Start_IT+0xa2>
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2b08      	cmp	r3, #8
 800d282:	d109      	bne.n	800d298 <HAL_TIM_PWM_Start_IT+0x5c>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	bf14      	ite	ne
 800d290:	2301      	movne	r3, #1
 800d292:	2300      	moveq	r3, #0
 800d294:	b2db      	uxtb	r3, r3
 800d296:	e022      	b.n	800d2de <HAL_TIM_PWM_Start_IT+0xa2>
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	2b0c      	cmp	r3, #12
 800d29c:	d109      	bne.n	800d2b2 <HAL_TIM_PWM_Start_IT+0x76>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	bf14      	ite	ne
 800d2aa:	2301      	movne	r3, #1
 800d2ac:	2300      	moveq	r3, #0
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	e015      	b.n	800d2de <HAL_TIM_PWM_Start_IT+0xa2>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b10      	cmp	r3, #16
 800d2b6:	d109      	bne.n	800d2cc <HAL_TIM_PWM_Start_IT+0x90>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	bf14      	ite	ne
 800d2c4:	2301      	movne	r3, #1
 800d2c6:	2300      	moveq	r3, #0
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	e008      	b.n	800d2de <HAL_TIM_PWM_Start_IT+0xa2>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	bf14      	ite	ne
 800d2d8:	2301      	movne	r3, #1
 800d2da:	2300      	moveq	r3, #0
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e0e2      	b.n	800d4ac <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d104      	bne.n	800d2f6 <HAL_TIM_PWM_Start_IT+0xba>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2f4:	e023      	b.n	800d33e <HAL_TIM_PWM_Start_IT+0x102>
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	2b04      	cmp	r3, #4
 800d2fa:	d104      	bne.n	800d306 <HAL_TIM_PWM_Start_IT+0xca>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2202      	movs	r2, #2
 800d300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d304:	e01b      	b.n	800d33e <HAL_TIM_PWM_Start_IT+0x102>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b08      	cmp	r3, #8
 800d30a:	d104      	bne.n	800d316 <HAL_TIM_PWM_Start_IT+0xda>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2202      	movs	r2, #2
 800d310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d314:	e013      	b.n	800d33e <HAL_TIM_PWM_Start_IT+0x102>
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2b0c      	cmp	r3, #12
 800d31a:	d104      	bne.n	800d326 <HAL_TIM_PWM_Start_IT+0xea>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2202      	movs	r2, #2
 800d320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d324:	e00b      	b.n	800d33e <HAL_TIM_PWM_Start_IT+0x102>
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2b10      	cmp	r3, #16
 800d32a:	d104      	bne.n	800d336 <HAL_TIM_PWM_Start_IT+0xfa>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2202      	movs	r2, #2
 800d330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d334:	e003      	b.n	800d33e <HAL_TIM_PWM_Start_IT+0x102>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2202      	movs	r2, #2
 800d33a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b0c      	cmp	r3, #12
 800d342:	d841      	bhi.n	800d3c8 <HAL_TIM_PWM_Start_IT+0x18c>
 800d344:	a201      	add	r2, pc, #4	; (adr r2, 800d34c <HAL_TIM_PWM_Start_IT+0x110>)
 800d346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d34a:	bf00      	nop
 800d34c:	0800d381 	.word	0x0800d381
 800d350:	0800d3c9 	.word	0x0800d3c9
 800d354:	0800d3c9 	.word	0x0800d3c9
 800d358:	0800d3c9 	.word	0x0800d3c9
 800d35c:	0800d393 	.word	0x0800d393
 800d360:	0800d3c9 	.word	0x0800d3c9
 800d364:	0800d3c9 	.word	0x0800d3c9
 800d368:	0800d3c9 	.word	0x0800d3c9
 800d36c:	0800d3a5 	.word	0x0800d3a5
 800d370:	0800d3c9 	.word	0x0800d3c9
 800d374:	0800d3c9 	.word	0x0800d3c9
 800d378:	0800d3c9 	.word	0x0800d3c9
 800d37c:	0800d3b7 	.word	0x0800d3b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	68da      	ldr	r2, [r3, #12]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f042 0202 	orr.w	r2, r2, #2
 800d38e:	60da      	str	r2, [r3, #12]
      break;
 800d390:	e01d      	b.n	800d3ce <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f042 0204 	orr.w	r2, r2, #4
 800d3a0:	60da      	str	r2, [r3, #12]
      break;
 800d3a2:	e014      	b.n	800d3ce <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68da      	ldr	r2, [r3, #12]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f042 0208 	orr.w	r2, r2, #8
 800d3b2:	60da      	str	r2, [r3, #12]
      break;
 800d3b4:	e00b      	b.n	800d3ce <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68da      	ldr	r2, [r3, #12]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f042 0210 	orr.w	r2, r2, #16
 800d3c4:	60da      	str	r2, [r3, #12]
      break;
 800d3c6:	e002      	b.n	800d3ce <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d3cc:	bf00      	nop
  }

  if (status == HAL_OK)
 800d3ce:	7bfb      	ldrb	r3, [r7, #15]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d16a      	bne.n	800d4aa <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	6839      	ldr	r1, [r7, #0]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f001 f90b 	bl	800e5f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a33      	ldr	r2, [pc, #204]	; (800d4b4 <HAL_TIM_PWM_Start_IT+0x278>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d013      	beq.n	800d414 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a31      	ldr	r2, [pc, #196]	; (800d4b8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d00e      	beq.n	800d414 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a30      	ldr	r2, [pc, #192]	; (800d4bc <HAL_TIM_PWM_Start_IT+0x280>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d009      	beq.n	800d414 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a2e      	ldr	r2, [pc, #184]	; (800d4c0 <HAL_TIM_PWM_Start_IT+0x284>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d004      	beq.n	800d414 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4a2d      	ldr	r2, [pc, #180]	; (800d4c4 <HAL_TIM_PWM_Start_IT+0x288>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d101      	bne.n	800d418 <HAL_TIM_PWM_Start_IT+0x1dc>
 800d414:	2301      	movs	r3, #1
 800d416:	e000      	b.n	800d41a <HAL_TIM_PWM_Start_IT+0x1de>
 800d418:	2300      	movs	r3, #0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d007      	beq.n	800d42e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d42c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a20      	ldr	r2, [pc, #128]	; (800d4b4 <HAL_TIM_PWM_Start_IT+0x278>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d018      	beq.n	800d46a <HAL_TIM_PWM_Start_IT+0x22e>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d440:	d013      	beq.n	800d46a <HAL_TIM_PWM_Start_IT+0x22e>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a20      	ldr	r2, [pc, #128]	; (800d4c8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d00e      	beq.n	800d46a <HAL_TIM_PWM_Start_IT+0x22e>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a1e      	ldr	r2, [pc, #120]	; (800d4cc <HAL_TIM_PWM_Start_IT+0x290>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d009      	beq.n	800d46a <HAL_TIM_PWM_Start_IT+0x22e>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a17      	ldr	r2, [pc, #92]	; (800d4b8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d004      	beq.n	800d46a <HAL_TIM_PWM_Start_IT+0x22e>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a15      	ldr	r2, [pc, #84]	; (800d4bc <HAL_TIM_PWM_Start_IT+0x280>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d115      	bne.n	800d496 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	689a      	ldr	r2, [r3, #8]
 800d470:	4b17      	ldr	r3, [pc, #92]	; (800d4d0 <HAL_TIM_PWM_Start_IT+0x294>)
 800d472:	4013      	ands	r3, r2
 800d474:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	2b06      	cmp	r3, #6
 800d47a:	d015      	beq.n	800d4a8 <HAL_TIM_PWM_Start_IT+0x26c>
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d482:	d011      	beq.n	800d4a8 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f042 0201 	orr.w	r2, r2, #1
 800d492:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d494:	e008      	b.n	800d4a8 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f042 0201 	orr.w	r2, r2, #1
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	e000      	b.n	800d4aa <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	40012c00 	.word	0x40012c00
 800d4b8:	40013400 	.word	0x40013400
 800d4bc:	40014000 	.word	0x40014000
 800d4c0:	40014400 	.word	0x40014400
 800d4c4:	40014800 	.word	0x40014800
 800d4c8:	40000400 	.word	0x40000400
 800d4cc:	40000800 	.word	0x40000800
 800d4d0:	00010007 	.word	0x00010007

0800d4d4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	2b0c      	cmp	r3, #12
 800d4e6:	d841      	bhi.n	800d56c <HAL_TIM_PWM_Stop_IT+0x98>
 800d4e8:	a201      	add	r2, pc, #4	; (adr r2, 800d4f0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800d4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ee:	bf00      	nop
 800d4f0:	0800d525 	.word	0x0800d525
 800d4f4:	0800d56d 	.word	0x0800d56d
 800d4f8:	0800d56d 	.word	0x0800d56d
 800d4fc:	0800d56d 	.word	0x0800d56d
 800d500:	0800d537 	.word	0x0800d537
 800d504:	0800d56d 	.word	0x0800d56d
 800d508:	0800d56d 	.word	0x0800d56d
 800d50c:	0800d56d 	.word	0x0800d56d
 800d510:	0800d549 	.word	0x0800d549
 800d514:	0800d56d 	.word	0x0800d56d
 800d518:	0800d56d 	.word	0x0800d56d
 800d51c:	0800d56d 	.word	0x0800d56d
 800d520:	0800d55b 	.word	0x0800d55b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68da      	ldr	r2, [r3, #12]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f022 0202 	bic.w	r2, r2, #2
 800d532:	60da      	str	r2, [r3, #12]
      break;
 800d534:	e01d      	b.n	800d572 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	68da      	ldr	r2, [r3, #12]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f022 0204 	bic.w	r2, r2, #4
 800d544:	60da      	str	r2, [r3, #12]
      break;
 800d546:	e014      	b.n	800d572 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68da      	ldr	r2, [r3, #12]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f022 0208 	bic.w	r2, r2, #8
 800d556:	60da      	str	r2, [r3, #12]
      break;
 800d558:	e00b      	b.n	800d572 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68da      	ldr	r2, [r3, #12]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f022 0210 	bic.w	r2, r2, #16
 800d568:	60da      	str	r2, [r3, #12]
      break;
 800d56a:	e002      	b.n	800d572 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800d56c:	2301      	movs	r3, #1
 800d56e:	73fb      	strb	r3, [r7, #15]
      break;
 800d570:	bf00      	nop
  }

  if (status == HAL_OK)
 800d572:	7bfb      	ldrb	r3, [r7, #15]
 800d574:	2b00      	cmp	r3, #0
 800d576:	f040 8081 	bne.w	800d67c <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2200      	movs	r2, #0
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	4618      	mov	r0, r3
 800d584:	f001 f838 	bl	800e5f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a3e      	ldr	r2, [pc, #248]	; (800d688 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d013      	beq.n	800d5ba <HAL_TIM_PWM_Stop_IT+0xe6>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a3d      	ldr	r2, [pc, #244]	; (800d68c <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d00e      	beq.n	800d5ba <HAL_TIM_PWM_Stop_IT+0xe6>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a3b      	ldr	r2, [pc, #236]	; (800d690 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d009      	beq.n	800d5ba <HAL_TIM_PWM_Stop_IT+0xe6>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a3a      	ldr	r2, [pc, #232]	; (800d694 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d004      	beq.n	800d5ba <HAL_TIM_PWM_Stop_IT+0xe6>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a38      	ldr	r2, [pc, #224]	; (800d698 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d101      	bne.n	800d5be <HAL_TIM_PWM_Stop_IT+0xea>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e000      	b.n	800d5c0 <HAL_TIM_PWM_Stop_IT+0xec>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d017      	beq.n	800d5f4 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6a1a      	ldr	r2, [r3, #32]
 800d5ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800d5ce:	4013      	ands	r3, r2
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10f      	bne.n	800d5f4 <HAL_TIM_PWM_Stop_IT+0x120>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6a1a      	ldr	r2, [r3, #32]
 800d5da:	f244 4344 	movw	r3, #17476	; 0x4444
 800d5de:	4013      	ands	r3, r2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d107      	bne.n	800d5f4 <HAL_TIM_PWM_Stop_IT+0x120>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d5f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6a1a      	ldr	r2, [r3, #32]
 800d5fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800d5fe:	4013      	ands	r3, r2
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10f      	bne.n	800d624 <HAL_TIM_PWM_Stop_IT+0x150>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6a1a      	ldr	r2, [r3, #32]
 800d60a:	f244 4344 	movw	r3, #17476	; 0x4444
 800d60e:	4013      	ands	r3, r2
 800d610:	2b00      	cmp	r3, #0
 800d612:	d107      	bne.n	800d624 <HAL_TIM_PWM_Stop_IT+0x150>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f022 0201 	bic.w	r2, r2, #1
 800d622:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d104      	bne.n	800d634 <HAL_TIM_PWM_Stop_IT+0x160>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2201      	movs	r2, #1
 800d62e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d632:	e023      	b.n	800d67c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2b04      	cmp	r3, #4
 800d638:	d104      	bne.n	800d644 <HAL_TIM_PWM_Stop_IT+0x170>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d642:	e01b      	b.n	800d67c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	2b08      	cmp	r3, #8
 800d648:	d104      	bne.n	800d654 <HAL_TIM_PWM_Stop_IT+0x180>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d652:	e013      	b.n	800d67c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b0c      	cmp	r3, #12
 800d658:	d104      	bne.n	800d664 <HAL_TIM_PWM_Stop_IT+0x190>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d662:	e00b      	b.n	800d67c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	2b10      	cmp	r3, #16
 800d668:	d104      	bne.n	800d674 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d672:	e003      	b.n	800d67c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	40012c00 	.word	0x40012c00
 800d68c:	40013400 	.word	0x40013400
 800d690:	40014000 	.word	0x40014000
 800d694:	40014400 	.word	0x40014400
 800d698:	40014800 	.word	0x40014800

0800d69c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d101      	bne.n	800d6b0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e041      	b.n	800d734 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d106      	bne.n	800d6ca <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7f7 fb1b 	bl	8004d00 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	3304      	adds	r3, #4
 800d6da:	4619      	mov	r1, r3
 800d6dc:	4610      	mov	r0, r2
 800d6de:	f000 fbf9 	bl	800ded4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f022 0208 	bic.w	r2, r2, #8
 800d6f0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6819      	ldr	r1, [r3, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	430a      	orrs	r2, r1
 800d700:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2201      	movs	r2, #1
 800d716:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2201      	movs	r2, #1
 800d71e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d732:	2300      	movs	r3, #0
}
 800d734:	4618      	mov	r0, r3
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b086      	sub	sp, #24
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d101      	bne.n	800d750 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e097      	b.n	800d880 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d756:	b2db      	uxtb	r3, r3
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d106      	bne.n	800d76a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7f7 fa07 	bl	8004b78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2202      	movs	r2, #2
 800d76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	6812      	ldr	r2, [r2, #0]
 800d77c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d780:	f023 0307 	bic.w	r3, r3, #7
 800d784:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	3304      	adds	r3, #4
 800d78e:	4619      	mov	r1, r3
 800d790:	4610      	mov	r0, r2
 800d792:	f000 fb9f 	bl	800ded4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	699b      	ldr	r3, [r3, #24]
 800d7a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	6a1b      	ldr	r3, [r3, #32]
 800d7ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	697a      	ldr	r2, [r7, #20]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7be:	f023 0303 	bic.w	r3, r3, #3
 800d7c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	689a      	ldr	r2, [r3, #8]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	699b      	ldr	r3, [r3, #24]
 800d7cc:	021b      	lsls	r3, r3, #8
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	693a      	ldr	r2, [r7, #16]
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d7dc:	f023 030c 	bic.w	r3, r3, #12
 800d7e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	68da      	ldr	r2, [r3, #12]
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	69db      	ldr	r3, [r3, #28]
 800d7f6:	021b      	lsls	r3, r3, #8
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	691b      	ldr	r3, [r3, #16]
 800d804:	011a      	lsls	r2, r3, #4
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	6a1b      	ldr	r3, [r3, #32]
 800d80a:	031b      	lsls	r3, r3, #12
 800d80c:	4313      	orrs	r3, r2
 800d80e:	693a      	ldr	r2, [r7, #16]
 800d810:	4313      	orrs	r3, r2
 800d812:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d81a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d822:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	685a      	ldr	r2, [r3, #4]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	695b      	ldr	r3, [r3, #20]
 800d82c:	011b      	lsls	r3, r3, #4
 800d82e:	4313      	orrs	r3, r2
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	4313      	orrs	r3, r2
 800d834:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	693a      	ldr	r2, [r7, #16]
 800d844:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2201      	movs	r2, #1
 800d85a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2201      	movs	r2, #1
 800d862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2201      	movs	r2, #1
 800d87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3718      	adds	r7, #24
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d898:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d8a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d110      	bne.n	800d8da <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d8b8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d102      	bne.n	800d8c4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d8be:	7b7b      	ldrb	r3, [r7, #13]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d001      	beq.n	800d8c8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e089      	b.n	800d9dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2202      	movs	r2, #2
 800d8cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2202      	movs	r2, #2
 800d8d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8d8:	e031      	b.n	800d93e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	2b04      	cmp	r3, #4
 800d8de:	d110      	bne.n	800d902 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d8e0:	7bbb      	ldrb	r3, [r7, #14]
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d102      	bne.n	800d8ec <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d8e6:	7b3b      	ldrb	r3, [r7, #12]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d001      	beq.n	800d8f0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e075      	b.n	800d9dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d900:	e01d      	b.n	800d93e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d902:	7bfb      	ldrb	r3, [r7, #15]
 800d904:	2b01      	cmp	r3, #1
 800d906:	d108      	bne.n	800d91a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d908:	7bbb      	ldrb	r3, [r7, #14]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d105      	bne.n	800d91a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d90e:	7b7b      	ldrb	r3, [r7, #13]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d102      	bne.n	800d91a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d914:	7b3b      	ldrb	r3, [r7, #12]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d001      	beq.n	800d91e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800d91a:	2301      	movs	r3, #1
 800d91c:	e05e      	b.n	800d9dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2202      	movs	r2, #2
 800d922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2202      	movs	r2, #2
 800d92a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2202      	movs	r2, #2
 800d932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2202      	movs	r2, #2
 800d93a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d003      	beq.n	800d94c <HAL_TIM_Encoder_Start_IT+0xc4>
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b04      	cmp	r3, #4
 800d948:	d010      	beq.n	800d96c <HAL_TIM_Encoder_Start_IT+0xe4>
 800d94a:	e01f      	b.n	800d98c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2201      	movs	r2, #1
 800d952:	2100      	movs	r1, #0
 800d954:	4618      	mov	r0, r3
 800d956:	f000 fe4f 	bl	800e5f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	68da      	ldr	r2, [r3, #12]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f042 0202 	orr.w	r2, r2, #2
 800d968:	60da      	str	r2, [r3, #12]
      break;
 800d96a:	e02e      	b.n	800d9ca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2201      	movs	r2, #1
 800d972:	2104      	movs	r1, #4
 800d974:	4618      	mov	r0, r3
 800d976:	f000 fe3f 	bl	800e5f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68da      	ldr	r2, [r3, #12]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f042 0204 	orr.w	r2, r2, #4
 800d988:	60da      	str	r2, [r3, #12]
      break;
 800d98a:	e01e      	b.n	800d9ca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2201      	movs	r2, #1
 800d992:	2100      	movs	r1, #0
 800d994:	4618      	mov	r0, r3
 800d996:	f000 fe2f 	bl	800e5f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	2104      	movs	r1, #4
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f000 fe28 	bl	800e5f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68da      	ldr	r2, [r3, #12]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f042 0202 	orr.w	r2, r2, #2
 800d9b6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68da      	ldr	r2, [r3, #12]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f042 0204 	orr.w	r2, r2, #4
 800d9c6:	60da      	str	r2, [r3, #12]
      break;
 800d9c8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f042 0201 	orr.w	r2, r2, #1
 800d9d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d9da:	2300      	movs	r3, #0
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3710      	adds	r7, #16
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	f003 0302 	and.w	r3, r3, #2
 800da02:	2b00      	cmp	r3, #0
 800da04:	d020      	beq.n	800da48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f003 0302 	and.w	r3, r3, #2
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d01b      	beq.n	800da48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f06f 0202 	mvn.w	r2, #2
 800da18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	f003 0303 	and.w	r3, r3, #3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f7f5 f818 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 800da34:	e005      	b.n	800da42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 fa38 	bl	800deac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f7f5 f8a9 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	f003 0304 	and.w	r3, r3, #4
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d020      	beq.n	800da94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f003 0304 	and.w	r3, r3, #4
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d01b      	beq.n	800da94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f06f 0204 	mvn.w	r2, #4
 800da64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2202      	movs	r2, #2
 800da6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	699b      	ldr	r3, [r3, #24]
 800da72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da76:	2b00      	cmp	r3, #0
 800da78:	d003      	beq.n	800da82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7f4 fff2 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 800da80:	e005      	b.n	800da8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fa12 	bl	800deac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7f5 f883 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f003 0308 	and.w	r3, r3, #8
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d020      	beq.n	800dae0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f003 0308 	and.w	r3, r3, #8
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d01b      	beq.n	800dae0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f06f 0208 	mvn.w	r2, #8
 800dab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2204      	movs	r2, #4
 800dab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	69db      	ldr	r3, [r3, #28]
 800dabe:	f003 0303 	and.w	r3, r3, #3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d003      	beq.n	800dace <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7f4 ffcc 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 800dacc:	e005      	b.n	800dada <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 f9ec 	bl	800deac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7f5 f85d 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	f003 0310 	and.w	r3, r3, #16
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d020      	beq.n	800db2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f003 0310 	and.w	r3, r3, #16
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d01b      	beq.n	800db2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f06f 0210 	mvn.w	r2, #16
 800dafc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2208      	movs	r2, #8
 800db02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	69db      	ldr	r3, [r3, #28]
 800db0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d003      	beq.n	800db1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7f4 ffa6 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 800db18:	e005      	b.n	800db26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f9c6 	bl	800deac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7f5 f837 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	f003 0301 	and.w	r3, r3, #1
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00c      	beq.n	800db50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f003 0301 	and.w	r3, r3, #1
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d007      	beq.n	800db50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f06f 0201 	mvn.w	r2, #1
 800db48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7f5 f86c 	bl	8002c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db56:	2b00      	cmp	r3, #0
 800db58:	d104      	bne.n	800db64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00c      	beq.n	800db7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d007      	beq.n	800db7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800db76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 ff83 	bl	800ea84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00c      	beq.n	800dba2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d007      	beq.n	800dba2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800db9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 ff7b 	bl	800ea98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d00c      	beq.n	800dbc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d007      	beq.n	800dbc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dbbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f97d 	bl	800dec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	f003 0320 	and.w	r3, r3, #32
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00c      	beq.n	800dbea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f003 0320 	and.w	r3, r3, #32
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d007      	beq.n	800dbea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f06f 0220 	mvn.w	r2, #32
 800dbe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 ff43 	bl	800ea70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00c      	beq.n	800dc0e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d007      	beq.n	800dc0e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800dc06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 ff4f 	bl	800eaac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00c      	beq.n	800dc32 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d007      	beq.n	800dc32 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800dc2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 ff47 	bl	800eac0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00c      	beq.n	800dc56 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d007      	beq.n	800dc56 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800dc4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 ff3f 	bl	800ead4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00c      	beq.n	800dc7a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d007      	beq.n	800dc7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800dc72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 ff37 	bl	800eae8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc7a:	bf00      	nop
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
	...

0800dc84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc90:	2300      	movs	r3, #0
 800dc92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d101      	bne.n	800dca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dc9e:	2302      	movs	r3, #2
 800dca0:	e0ff      	b.n	800dea2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b14      	cmp	r3, #20
 800dcae:	f200 80f0 	bhi.w	800de92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dcb2:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800dd0d 	.word	0x0800dd0d
 800dcbc:	0800de93 	.word	0x0800de93
 800dcc0:	0800de93 	.word	0x0800de93
 800dcc4:	0800de93 	.word	0x0800de93
 800dcc8:	0800dd4d 	.word	0x0800dd4d
 800dccc:	0800de93 	.word	0x0800de93
 800dcd0:	0800de93 	.word	0x0800de93
 800dcd4:	0800de93 	.word	0x0800de93
 800dcd8:	0800dd8f 	.word	0x0800dd8f
 800dcdc:	0800de93 	.word	0x0800de93
 800dce0:	0800de93 	.word	0x0800de93
 800dce4:	0800de93 	.word	0x0800de93
 800dce8:	0800ddcf 	.word	0x0800ddcf
 800dcec:	0800de93 	.word	0x0800de93
 800dcf0:	0800de93 	.word	0x0800de93
 800dcf4:	0800de93 	.word	0x0800de93
 800dcf8:	0800de11 	.word	0x0800de11
 800dcfc:	0800de93 	.word	0x0800de93
 800dd00:	0800de93 	.word	0x0800de93
 800dd04:	0800de93 	.word	0x0800de93
 800dd08:	0800de51 	.word	0x0800de51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	68b9      	ldr	r1, [r7, #8]
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 f97a 	bl	800e00c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	699a      	ldr	r2, [r3, #24]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f042 0208 	orr.w	r2, r2, #8
 800dd26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	699a      	ldr	r2, [r3, #24]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f022 0204 	bic.w	r2, r2, #4
 800dd36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	6999      	ldr	r1, [r3, #24]
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	691a      	ldr	r2, [r3, #16]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	430a      	orrs	r2, r1
 800dd48:	619a      	str	r2, [r3, #24]
      break;
 800dd4a:	e0a5      	b.n	800de98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68b9      	ldr	r1, [r7, #8]
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 f9ea 	bl	800e12c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	699a      	ldr	r2, [r3, #24]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	699a      	ldr	r2, [r3, #24]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6999      	ldr	r1, [r3, #24]
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	021a      	lsls	r2, r3, #8
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	430a      	orrs	r2, r1
 800dd8a:	619a      	str	r2, [r3, #24]
      break;
 800dd8c:	e084      	b.n	800de98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	68b9      	ldr	r1, [r7, #8]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f000 fa53 	bl	800e240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	69da      	ldr	r2, [r3, #28]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f042 0208 	orr.w	r2, r2, #8
 800dda8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	69da      	ldr	r2, [r3, #28]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f022 0204 	bic.w	r2, r2, #4
 800ddb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	69d9      	ldr	r1, [r3, #28]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	691a      	ldr	r2, [r3, #16]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	430a      	orrs	r2, r1
 800ddca:	61da      	str	r2, [r3, #28]
      break;
 800ddcc:	e064      	b.n	800de98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68b9      	ldr	r1, [r7, #8]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f000 fabb 	bl	800e350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	69da      	ldr	r2, [r3, #28]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dde8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	69da      	ldr	r2, [r3, #28]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	69d9      	ldr	r1, [r3, #28]
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	691b      	ldr	r3, [r3, #16]
 800de04:	021a      	lsls	r2, r3, #8
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	430a      	orrs	r2, r1
 800de0c:	61da      	str	r2, [r3, #28]
      break;
 800de0e:	e043      	b.n	800de98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68b9      	ldr	r1, [r7, #8]
 800de16:	4618      	mov	r0, r3
 800de18:	f000 fb24 	bl	800e464 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f042 0208 	orr.w	r2, r2, #8
 800de2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f022 0204 	bic.w	r2, r2, #4
 800de3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	691a      	ldr	r2, [r3, #16]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	430a      	orrs	r2, r1
 800de4c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800de4e:	e023      	b.n	800de98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68b9      	ldr	r1, [r7, #8]
 800de56:	4618      	mov	r0, r3
 800de58:	f000 fb68 	bl	800e52c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	691b      	ldr	r3, [r3, #16]
 800de86:	021a      	lsls	r2, r3, #8
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	430a      	orrs	r2, r1
 800de8e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800de90:	e002      	b.n	800de98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	75fb      	strb	r3, [r7, #23]
      break;
 800de96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dea0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3718      	adds	r7, #24
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop

0800deac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800deb4:	bf00      	nop
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dec8:	bf00      	nop
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a42      	ldr	r2, [pc, #264]	; (800dff0 <TIM_Base_SetConfig+0x11c>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d00f      	beq.n	800df0c <TIM_Base_SetConfig+0x38>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800def2:	d00b      	beq.n	800df0c <TIM_Base_SetConfig+0x38>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a3f      	ldr	r2, [pc, #252]	; (800dff4 <TIM_Base_SetConfig+0x120>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d007      	beq.n	800df0c <TIM_Base_SetConfig+0x38>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	4a3e      	ldr	r2, [pc, #248]	; (800dff8 <TIM_Base_SetConfig+0x124>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d003      	beq.n	800df0c <TIM_Base_SetConfig+0x38>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4a3d      	ldr	r2, [pc, #244]	; (800dffc <TIM_Base_SetConfig+0x128>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d108      	bne.n	800df1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	4313      	orrs	r3, r2
 800df1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4a33      	ldr	r2, [pc, #204]	; (800dff0 <TIM_Base_SetConfig+0x11c>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d01b      	beq.n	800df5e <TIM_Base_SetConfig+0x8a>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df2c:	d017      	beq.n	800df5e <TIM_Base_SetConfig+0x8a>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a30      	ldr	r2, [pc, #192]	; (800dff4 <TIM_Base_SetConfig+0x120>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d013      	beq.n	800df5e <TIM_Base_SetConfig+0x8a>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4a2f      	ldr	r2, [pc, #188]	; (800dff8 <TIM_Base_SetConfig+0x124>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d00f      	beq.n	800df5e <TIM_Base_SetConfig+0x8a>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4a2e      	ldr	r2, [pc, #184]	; (800dffc <TIM_Base_SetConfig+0x128>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d00b      	beq.n	800df5e <TIM_Base_SetConfig+0x8a>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4a2d      	ldr	r2, [pc, #180]	; (800e000 <TIM_Base_SetConfig+0x12c>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d007      	beq.n	800df5e <TIM_Base_SetConfig+0x8a>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4a2c      	ldr	r2, [pc, #176]	; (800e004 <TIM_Base_SetConfig+0x130>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d003      	beq.n	800df5e <TIM_Base_SetConfig+0x8a>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4a2b      	ldr	r2, [pc, #172]	; (800e008 <TIM_Base_SetConfig+0x134>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d108      	bne.n	800df70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	4313      	orrs	r3, r2
 800df6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	695b      	ldr	r3, [r3, #20]
 800df7a:	4313      	orrs	r3, r2
 800df7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	68fa      	ldr	r2, [r7, #12]
 800df82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	689a      	ldr	r2, [r3, #8]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a16      	ldr	r2, [pc, #88]	; (800dff0 <TIM_Base_SetConfig+0x11c>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d00f      	beq.n	800dfbc <TIM_Base_SetConfig+0xe8>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a17      	ldr	r2, [pc, #92]	; (800dffc <TIM_Base_SetConfig+0x128>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d00b      	beq.n	800dfbc <TIM_Base_SetConfig+0xe8>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a16      	ldr	r2, [pc, #88]	; (800e000 <TIM_Base_SetConfig+0x12c>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d007      	beq.n	800dfbc <TIM_Base_SetConfig+0xe8>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	4a15      	ldr	r2, [pc, #84]	; (800e004 <TIM_Base_SetConfig+0x130>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d003      	beq.n	800dfbc <TIM_Base_SetConfig+0xe8>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	4a14      	ldr	r2, [pc, #80]	; (800e008 <TIM_Base_SetConfig+0x134>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d103      	bne.n	800dfc4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	691a      	ldr	r2, [r3, #16]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	f003 0301 	and.w	r3, r3, #1
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d105      	bne.n	800dfe2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	f023 0201 	bic.w	r2, r3, #1
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	611a      	str	r2, [r3, #16]
  }
}
 800dfe2:	bf00      	nop
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	40012c00 	.word	0x40012c00
 800dff4:	40000400 	.word	0x40000400
 800dff8:	40000800 	.word	0x40000800
 800dffc:	40013400 	.word	0x40013400
 800e000:	40014000 	.word	0x40014000
 800e004:	40014400 	.word	0x40014400
 800e008:	40014800 	.word	0x40014800

0800e00c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b087      	sub	sp, #28
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6a1b      	ldr	r3, [r3, #32]
 800e01a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6a1b      	ldr	r3, [r3, #32]
 800e020:	f023 0201 	bic.w	r2, r3, #1
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	699b      	ldr	r3, [r3, #24]
 800e032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e03a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e03e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f023 0303 	bic.w	r3, r3, #3
 800e046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	4313      	orrs	r3, r2
 800e050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	f023 0302 	bic.w	r3, r3, #2
 800e058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	697a      	ldr	r2, [r7, #20]
 800e060:	4313      	orrs	r3, r2
 800e062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4a2c      	ldr	r2, [pc, #176]	; (800e118 <TIM_OC1_SetConfig+0x10c>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d00f      	beq.n	800e08c <TIM_OC1_SetConfig+0x80>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4a2b      	ldr	r2, [pc, #172]	; (800e11c <TIM_OC1_SetConfig+0x110>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d00b      	beq.n	800e08c <TIM_OC1_SetConfig+0x80>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4a2a      	ldr	r2, [pc, #168]	; (800e120 <TIM_OC1_SetConfig+0x114>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d007      	beq.n	800e08c <TIM_OC1_SetConfig+0x80>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4a29      	ldr	r2, [pc, #164]	; (800e124 <TIM_OC1_SetConfig+0x118>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d003      	beq.n	800e08c <TIM_OC1_SetConfig+0x80>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4a28      	ldr	r2, [pc, #160]	; (800e128 <TIM_OC1_SetConfig+0x11c>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d10c      	bne.n	800e0a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	f023 0308 	bic.w	r3, r3, #8
 800e092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	697a      	ldr	r2, [r7, #20]
 800e09a:	4313      	orrs	r3, r2
 800e09c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f023 0304 	bic.w	r3, r3, #4
 800e0a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4a1b      	ldr	r2, [pc, #108]	; (800e118 <TIM_OC1_SetConfig+0x10c>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d00f      	beq.n	800e0ce <TIM_OC1_SetConfig+0xc2>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a1a      	ldr	r2, [pc, #104]	; (800e11c <TIM_OC1_SetConfig+0x110>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d00b      	beq.n	800e0ce <TIM_OC1_SetConfig+0xc2>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4a19      	ldr	r2, [pc, #100]	; (800e120 <TIM_OC1_SetConfig+0x114>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d007      	beq.n	800e0ce <TIM_OC1_SetConfig+0xc2>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4a18      	ldr	r2, [pc, #96]	; (800e124 <TIM_OC1_SetConfig+0x118>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d003      	beq.n	800e0ce <TIM_OC1_SetConfig+0xc2>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	4a17      	ldr	r2, [pc, #92]	; (800e128 <TIM_OC1_SetConfig+0x11c>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d111      	bne.n	800e0f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e0dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	695b      	ldr	r3, [r3, #20]
 800e0e2:	693a      	ldr	r2, [r7, #16]
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	699b      	ldr	r3, [r3, #24]
 800e0ec:	693a      	ldr	r2, [r7, #16]
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	693a      	ldr	r2, [r7, #16]
 800e0f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	685a      	ldr	r2, [r3, #4]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	697a      	ldr	r2, [r7, #20]
 800e10a:	621a      	str	r2, [r3, #32]
}
 800e10c:	bf00      	nop
 800e10e:	371c      	adds	r7, #28
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	40012c00 	.word	0x40012c00
 800e11c:	40013400 	.word	0x40013400
 800e120:	40014000 	.word	0x40014000
 800e124:	40014400 	.word	0x40014400
 800e128:	40014800 	.word	0x40014800

0800e12c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b087      	sub	sp, #28
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6a1b      	ldr	r3, [r3, #32]
 800e13a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a1b      	ldr	r3, [r3, #32]
 800e140:	f023 0210 	bic.w	r2, r3, #16
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	699b      	ldr	r3, [r3, #24]
 800e152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e15a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	021b      	lsls	r3, r3, #8
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	4313      	orrs	r3, r2
 800e172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	f023 0320 	bic.w	r3, r3, #32
 800e17a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	011b      	lsls	r3, r3, #4
 800e182:	697a      	ldr	r2, [r7, #20]
 800e184:	4313      	orrs	r3, r2
 800e186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4a28      	ldr	r2, [pc, #160]	; (800e22c <TIM_OC2_SetConfig+0x100>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d003      	beq.n	800e198 <TIM_OC2_SetConfig+0x6c>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a27      	ldr	r2, [pc, #156]	; (800e230 <TIM_OC2_SetConfig+0x104>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d10d      	bne.n	800e1b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e19e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	011b      	lsls	r3, r3, #4
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4a1d      	ldr	r2, [pc, #116]	; (800e22c <TIM_OC2_SetConfig+0x100>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d00f      	beq.n	800e1dc <TIM_OC2_SetConfig+0xb0>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	4a1c      	ldr	r2, [pc, #112]	; (800e230 <TIM_OC2_SetConfig+0x104>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d00b      	beq.n	800e1dc <TIM_OC2_SetConfig+0xb0>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4a1b      	ldr	r2, [pc, #108]	; (800e234 <TIM_OC2_SetConfig+0x108>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d007      	beq.n	800e1dc <TIM_OC2_SetConfig+0xb0>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	4a1a      	ldr	r2, [pc, #104]	; (800e238 <TIM_OC2_SetConfig+0x10c>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d003      	beq.n	800e1dc <TIM_OC2_SetConfig+0xb0>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4a19      	ldr	r2, [pc, #100]	; (800e23c <TIM_OC2_SetConfig+0x110>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d113      	bne.n	800e204 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e1e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e1ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	695b      	ldr	r3, [r3, #20]
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	693a      	ldr	r2, [r7, #16]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	693a      	ldr	r2, [r7, #16]
 800e200:	4313      	orrs	r3, r2
 800e202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	693a      	ldr	r2, [r7, #16]
 800e208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	685a      	ldr	r2, [r3, #4]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	621a      	str	r2, [r3, #32]
}
 800e21e:	bf00      	nop
 800e220:	371c      	adds	r7, #28
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	40012c00 	.word	0x40012c00
 800e230:	40013400 	.word	0x40013400
 800e234:	40014000 	.word	0x40014000
 800e238:	40014400 	.word	0x40014400
 800e23c:	40014800 	.word	0x40014800

0800e240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e240:	b480      	push	{r7}
 800e242:	b087      	sub	sp, #28
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6a1b      	ldr	r3, [r3, #32]
 800e24e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	69db      	ldr	r3, [r3, #28]
 800e266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e26e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f023 0303 	bic.w	r3, r3, #3
 800e27a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	68fa      	ldr	r2, [r7, #12]
 800e282:	4313      	orrs	r3, r2
 800e284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e28c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	021b      	lsls	r3, r3, #8
 800e294:	697a      	ldr	r2, [r7, #20]
 800e296:	4313      	orrs	r3, r2
 800e298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a27      	ldr	r2, [pc, #156]	; (800e33c <TIM_OC3_SetConfig+0xfc>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d003      	beq.n	800e2aa <TIM_OC3_SetConfig+0x6a>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	4a26      	ldr	r2, [pc, #152]	; (800e340 <TIM_OC3_SetConfig+0x100>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d10d      	bne.n	800e2c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e2b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	021b      	lsls	r3, r3, #8
 800e2b8:	697a      	ldr	r2, [r7, #20]
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e2c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4a1c      	ldr	r2, [pc, #112]	; (800e33c <TIM_OC3_SetConfig+0xfc>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d00f      	beq.n	800e2ee <TIM_OC3_SetConfig+0xae>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4a1b      	ldr	r2, [pc, #108]	; (800e340 <TIM_OC3_SetConfig+0x100>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d00b      	beq.n	800e2ee <TIM_OC3_SetConfig+0xae>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4a1a      	ldr	r2, [pc, #104]	; (800e344 <TIM_OC3_SetConfig+0x104>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d007      	beq.n	800e2ee <TIM_OC3_SetConfig+0xae>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	4a19      	ldr	r2, [pc, #100]	; (800e348 <TIM_OC3_SetConfig+0x108>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d003      	beq.n	800e2ee <TIM_OC3_SetConfig+0xae>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	4a18      	ldr	r2, [pc, #96]	; (800e34c <TIM_OC3_SetConfig+0x10c>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d113      	bne.n	800e316 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	695b      	ldr	r3, [r3, #20]
 800e302:	011b      	lsls	r3, r3, #4
 800e304:	693a      	ldr	r2, [r7, #16]
 800e306:	4313      	orrs	r3, r2
 800e308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	011b      	lsls	r3, r3, #4
 800e310:	693a      	ldr	r2, [r7, #16]
 800e312:	4313      	orrs	r3, r2
 800e314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	693a      	ldr	r2, [r7, #16]
 800e31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	685a      	ldr	r2, [r3, #4]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	621a      	str	r2, [r3, #32]
}
 800e330:	bf00      	nop
 800e332:	371c      	adds	r7, #28
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	40012c00 	.word	0x40012c00
 800e340:	40013400 	.word	0x40013400
 800e344:	40014000 	.word	0x40014000
 800e348:	40014400 	.word	0x40014400
 800e34c:	40014800 	.word	0x40014800

0800e350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e350:	b480      	push	{r7}
 800e352:	b087      	sub	sp, #28
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a1b      	ldr	r3, [r3, #32]
 800e364:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	69db      	ldr	r3, [r3, #28]
 800e376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e37e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e38a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	021b      	lsls	r3, r3, #8
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	4313      	orrs	r3, r2
 800e396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e39e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	031b      	lsls	r3, r3, #12
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4a28      	ldr	r2, [pc, #160]	; (800e450 <TIM_OC4_SetConfig+0x100>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d003      	beq.n	800e3bc <TIM_OC4_SetConfig+0x6c>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	4a27      	ldr	r2, [pc, #156]	; (800e454 <TIM_OC4_SetConfig+0x104>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d10d      	bne.n	800e3d8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e3c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	031b      	lsls	r3, r3, #12
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e3d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	4a1d      	ldr	r2, [pc, #116]	; (800e450 <TIM_OC4_SetConfig+0x100>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d00f      	beq.n	800e400 <TIM_OC4_SetConfig+0xb0>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4a1c      	ldr	r2, [pc, #112]	; (800e454 <TIM_OC4_SetConfig+0x104>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d00b      	beq.n	800e400 <TIM_OC4_SetConfig+0xb0>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4a1b      	ldr	r2, [pc, #108]	; (800e458 <TIM_OC4_SetConfig+0x108>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d007      	beq.n	800e400 <TIM_OC4_SetConfig+0xb0>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4a1a      	ldr	r2, [pc, #104]	; (800e45c <TIM_OC4_SetConfig+0x10c>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d003      	beq.n	800e400 <TIM_OC4_SetConfig+0xb0>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	4a19      	ldr	r2, [pc, #100]	; (800e460 <TIM_OC4_SetConfig+0x110>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d113      	bne.n	800e428 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e406:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e40e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	695b      	ldr	r3, [r3, #20]
 800e414:	019b      	lsls	r3, r3, #6
 800e416:	693a      	ldr	r2, [r7, #16]
 800e418:	4313      	orrs	r3, r2
 800e41a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	699b      	ldr	r3, [r3, #24]
 800e420:	019b      	lsls	r3, r3, #6
 800e422:	693a      	ldr	r2, [r7, #16]
 800e424:	4313      	orrs	r3, r2
 800e426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	693a      	ldr	r2, [r7, #16]
 800e42c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	685a      	ldr	r2, [r3, #4]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	621a      	str	r2, [r3, #32]
}
 800e442:	bf00      	nop
 800e444:	371c      	adds	r7, #28
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	40012c00 	.word	0x40012c00
 800e454:	40013400 	.word	0x40013400
 800e458:	40014000 	.word	0x40014000
 800e45c:	40014400 	.word	0x40014400
 800e460:	40014800 	.word	0x40014800

0800e464 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e464:	b480      	push	{r7}
 800e466:	b087      	sub	sp, #28
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a1b      	ldr	r3, [r3, #32]
 800e472:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a1b      	ldr	r3, [r3, #32]
 800e478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e4a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	041b      	lsls	r3, r3, #16
 800e4b0:	693a      	ldr	r2, [r7, #16]
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4a17      	ldr	r2, [pc, #92]	; (800e518 <TIM_OC5_SetConfig+0xb4>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d00f      	beq.n	800e4de <TIM_OC5_SetConfig+0x7a>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	4a16      	ldr	r2, [pc, #88]	; (800e51c <TIM_OC5_SetConfig+0xb8>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d00b      	beq.n	800e4de <TIM_OC5_SetConfig+0x7a>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4a15      	ldr	r2, [pc, #84]	; (800e520 <TIM_OC5_SetConfig+0xbc>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d007      	beq.n	800e4de <TIM_OC5_SetConfig+0x7a>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4a14      	ldr	r2, [pc, #80]	; (800e524 <TIM_OC5_SetConfig+0xc0>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d003      	beq.n	800e4de <TIM_OC5_SetConfig+0x7a>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4a13      	ldr	r2, [pc, #76]	; (800e528 <TIM_OC5_SetConfig+0xc4>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d109      	bne.n	800e4f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	695b      	ldr	r3, [r3, #20]
 800e4ea:	021b      	lsls	r3, r3, #8
 800e4ec:	697a      	ldr	r2, [r7, #20]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	697a      	ldr	r2, [r7, #20]
 800e4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	685a      	ldr	r2, [r3, #4]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	693a      	ldr	r2, [r7, #16]
 800e50a:	621a      	str	r2, [r3, #32]
}
 800e50c:	bf00      	nop
 800e50e:	371c      	adds	r7, #28
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr
 800e518:	40012c00 	.word	0x40012c00
 800e51c:	40013400 	.word	0x40013400
 800e520:	40014000 	.word	0x40014000
 800e524:	40014400 	.word	0x40014400
 800e528:	40014800 	.word	0x40014800

0800e52c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b087      	sub	sp, #28
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6a1b      	ldr	r3, [r3, #32]
 800e53a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6a1b      	ldr	r3, [r3, #32]
 800e540:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e55a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e55e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	021b      	lsls	r3, r3, #8
 800e566:	68fa      	ldr	r2, [r7, #12]
 800e568:	4313      	orrs	r3, r2
 800e56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	051b      	lsls	r3, r3, #20
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	4313      	orrs	r3, r2
 800e57e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	4a18      	ldr	r2, [pc, #96]	; (800e5e4 <TIM_OC6_SetConfig+0xb8>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d00f      	beq.n	800e5a8 <TIM_OC6_SetConfig+0x7c>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	4a17      	ldr	r2, [pc, #92]	; (800e5e8 <TIM_OC6_SetConfig+0xbc>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d00b      	beq.n	800e5a8 <TIM_OC6_SetConfig+0x7c>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	4a16      	ldr	r2, [pc, #88]	; (800e5ec <TIM_OC6_SetConfig+0xc0>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d007      	beq.n	800e5a8 <TIM_OC6_SetConfig+0x7c>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	4a15      	ldr	r2, [pc, #84]	; (800e5f0 <TIM_OC6_SetConfig+0xc4>)
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d003      	beq.n	800e5a8 <TIM_OC6_SetConfig+0x7c>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	4a14      	ldr	r2, [pc, #80]	; (800e5f4 <TIM_OC6_SetConfig+0xc8>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d109      	bne.n	800e5bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e5ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	695b      	ldr	r3, [r3, #20]
 800e5b4:	029b      	lsls	r3, r3, #10
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	697a      	ldr	r2, [r7, #20]
 800e5c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	685a      	ldr	r2, [r3, #4]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	693a      	ldr	r2, [r7, #16]
 800e5d4:	621a      	str	r2, [r3, #32]
}
 800e5d6:	bf00      	nop
 800e5d8:	371c      	adds	r7, #28
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	40012c00 	.word	0x40012c00
 800e5e8:	40013400 	.word	0x40013400
 800e5ec:	40014000 	.word	0x40014000
 800e5f0:	40014400 	.word	0x40014400
 800e5f4:	40014800 	.word	0x40014800

0800e5f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b087      	sub	sp, #28
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	f003 031f 	and.w	r3, r3, #31
 800e60a:	2201      	movs	r2, #1
 800e60c:	fa02 f303 	lsl.w	r3, r2, r3
 800e610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6a1a      	ldr	r2, [r3, #32]
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	43db      	mvns	r3, r3
 800e61a:	401a      	ands	r2, r3
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6a1a      	ldr	r2, [r3, #32]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	f003 031f 	and.w	r3, r3, #31
 800e62a:	6879      	ldr	r1, [r7, #4]
 800e62c:	fa01 f303 	lsl.w	r3, r1, r3
 800e630:	431a      	orrs	r2, r3
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	621a      	str	r2, [r3, #32]
}
 800e636:	bf00      	nop
 800e638:	371c      	adds	r7, #28
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr
	...

0800e644 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d109      	bne.n	800e66c <HAL_TIMEx_PWMN_Start_IT+0x28>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	2b01      	cmp	r3, #1
 800e662:	bf14      	ite	ne
 800e664:	2301      	movne	r3, #1
 800e666:	2300      	moveq	r3, #0
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	e022      	b.n	800e6b2 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	2b04      	cmp	r3, #4
 800e670:	d109      	bne.n	800e686 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	bf14      	ite	ne
 800e67e:	2301      	movne	r3, #1
 800e680:	2300      	moveq	r3, #0
 800e682:	b2db      	uxtb	r3, r3
 800e684:	e015      	b.n	800e6b2 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	2b08      	cmp	r3, #8
 800e68a:	d109      	bne.n	800e6a0 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b01      	cmp	r3, #1
 800e696:	bf14      	ite	ne
 800e698:	2301      	movne	r3, #1
 800e69a:	2300      	moveq	r3, #0
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	e008      	b.n	800e6b2 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	bf14      	ite	ne
 800e6ac:	2301      	movne	r3, #1
 800e6ae:	2300      	moveq	r3, #0
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d001      	beq.n	800e6ba <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e0bc      	b.n	800e834 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d104      	bne.n	800e6ca <HAL_TIMEx_PWMN_Start_IT+0x86>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6c8:	e013      	b.n	800e6f2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	2b04      	cmp	r3, #4
 800e6ce:	d104      	bne.n	800e6da <HAL_TIMEx_PWMN_Start_IT+0x96>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6d8:	e00b      	b.n	800e6f2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b08      	cmp	r3, #8
 800e6de:	d104      	bne.n	800e6ea <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2202      	movs	r2, #2
 800e6e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e6e8:	e003      	b.n	800e6f2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2202      	movs	r2, #2
 800e6ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	2b0c      	cmp	r3, #12
 800e6f6:	d841      	bhi.n	800e77c <HAL_TIMEx_PWMN_Start_IT+0x138>
 800e6f8:	a201      	add	r2, pc, #4	; (adr r2, 800e700 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800e6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6fe:	bf00      	nop
 800e700:	0800e735 	.word	0x0800e735
 800e704:	0800e77d 	.word	0x0800e77d
 800e708:	0800e77d 	.word	0x0800e77d
 800e70c:	0800e77d 	.word	0x0800e77d
 800e710:	0800e747 	.word	0x0800e747
 800e714:	0800e77d 	.word	0x0800e77d
 800e718:	0800e77d 	.word	0x0800e77d
 800e71c:	0800e77d 	.word	0x0800e77d
 800e720:	0800e759 	.word	0x0800e759
 800e724:	0800e77d 	.word	0x0800e77d
 800e728:	0800e77d 	.word	0x0800e77d
 800e72c:	0800e77d 	.word	0x0800e77d
 800e730:	0800e76b 	.word	0x0800e76b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	68da      	ldr	r2, [r3, #12]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f042 0202 	orr.w	r2, r2, #2
 800e742:	60da      	str	r2, [r3, #12]
      break;
 800e744:	e01d      	b.n	800e782 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68da      	ldr	r2, [r3, #12]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f042 0204 	orr.w	r2, r2, #4
 800e754:	60da      	str	r2, [r3, #12]
      break;
 800e756:	e014      	b.n	800e782 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	68da      	ldr	r2, [r3, #12]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f042 0208 	orr.w	r2, r2, #8
 800e766:	60da      	str	r2, [r3, #12]
      break;
 800e768:	e00b      	b.n	800e782 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	68da      	ldr	r2, [r3, #12]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f042 0210 	orr.w	r2, r2, #16
 800e778:	60da      	str	r2, [r3, #12]
      break;
 800e77a:	e002      	b.n	800e782 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800e77c:	2301      	movs	r3, #1
 800e77e:	73fb      	strb	r3, [r7, #15]
      break;
 800e780:	bf00      	nop
  }

  if (status == HAL_OK)
 800e782:	7bfb      	ldrb	r3, [r7, #15]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d154      	bne.n	800e832 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68da      	ldr	r2, [r3, #12]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e796:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2204      	movs	r2, #4
 800e79e:	6839      	ldr	r1, [r7, #0]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 f9ab 	bl	800eafc <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e7b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a20      	ldr	r2, [pc, #128]	; (800e83c <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d018      	beq.n	800e7f2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7c8:	d013      	beq.n	800e7f2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a1c      	ldr	r2, [pc, #112]	; (800e840 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d00e      	beq.n	800e7f2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a1a      	ldr	r2, [pc, #104]	; (800e844 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d009      	beq.n	800e7f2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a19      	ldr	r2, [pc, #100]	; (800e848 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d004      	beq.n	800e7f2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a17      	ldr	r2, [pc, #92]	; (800e84c <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d115      	bne.n	800e81e <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	689a      	ldr	r2, [r3, #8]
 800e7f8:	4b15      	ldr	r3, [pc, #84]	; (800e850 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800e7fa:	4013      	ands	r3, r2
 800e7fc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	2b06      	cmp	r3, #6
 800e802:	d015      	beq.n	800e830 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e80a:	d011      	beq.n	800e830 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f042 0201 	orr.w	r2, r2, #1
 800e81a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e81c:	e008      	b.n	800e830 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f042 0201 	orr.w	r2, r2, #1
 800e82c:	601a      	str	r2, [r3, #0]
 800e82e:	e000      	b.n	800e832 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e830:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e832:	7bfb      	ldrb	r3, [r7, #15]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3710      	adds	r7, #16
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	40012c00 	.word	0x40012c00
 800e840:	40000400 	.word	0x40000400
 800e844:	40000800 	.word	0x40000800
 800e848:	40013400 	.word	0x40013400
 800e84c:	40014000 	.word	0x40014000
 800e850:	00010007 	.word	0x00010007

0800e854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e864:	2b01      	cmp	r3, #1
 800e866:	d101      	bne.n	800e86c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e868:	2302      	movs	r3, #2
 800e86a:	e065      	b.n	800e938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2202      	movs	r2, #2
 800e878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a2c      	ldr	r2, [pc, #176]	; (800e944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d004      	beq.n	800e8a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a2b      	ldr	r2, [pc, #172]	; (800e948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d108      	bne.n	800e8b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e8a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	4313      	orrs	r3, r2
 800e8b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e8b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a1b      	ldr	r2, [pc, #108]	; (800e944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d018      	beq.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8e2:	d013      	beq.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a18      	ldr	r2, [pc, #96]	; (800e94c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d00e      	beq.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a17      	ldr	r2, [pc, #92]	; (800e950 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d009      	beq.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a12      	ldr	r2, [pc, #72]	; (800e948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d004      	beq.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a13      	ldr	r2, [pc, #76]	; (800e954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d10c      	bne.n	800e926 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	68ba      	ldr	r2, [r7, #8]
 800e91a:	4313      	orrs	r3, r2
 800e91c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	68ba      	ldr	r2, [r7, #8]
 800e924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2201      	movs	r2, #1
 800e92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e936:	2300      	movs	r3, #0
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3714      	adds	r7, #20
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	40012c00 	.word	0x40012c00
 800e948:	40013400 	.word	0x40013400
 800e94c:	40000400 	.word	0x40000400
 800e950:	40000800 	.word	0x40000800
 800e954:	40014000 	.word	0x40014000

0800e958 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e962:	2300      	movs	r3, #0
 800e964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d101      	bne.n	800e974 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e970:	2302      	movs	r3, #2
 800e972:	e073      	b.n	800ea5c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	4313      	orrs	r3, r2
 800e988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	4313      	orrs	r3, r2
 800e996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	691b      	ldr	r3, [r3, #16]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	695b      	ldr	r3, [r3, #20]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	699b      	ldr	r3, [r3, #24]
 800e9e8:	041b      	lsls	r3, r3, #16
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	69db      	ldr	r3, [r3, #28]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a19      	ldr	r2, [pc, #100]	; (800ea68 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d004      	beq.n	800ea10 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a18      	ldr	r2, [pc, #96]	; (800ea6c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d11c      	bne.n	800ea4a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea1a:	051b      	lsls	r3, r3, #20
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	6a1b      	ldr	r3, [r3, #32]
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea46:	4313      	orrs	r3, r2
 800ea48:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea5a:	2300      	movs	r3, #0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3714      	adds	r7, #20
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr
 800ea68:	40012c00 	.word	0x40012c00
 800ea6c:	40013400 	.word	0x40013400

0800ea70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b083      	sub	sp, #12
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea78:	bf00      	nop
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea8c:	bf00      	nop
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eaa0:	bf00      	nop
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800eab4:	bf00      	nop
 800eab6:	370c      	adds	r7, #12
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr

0800eac0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800eac8:	bf00      	nop
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800eadc:	bf00      	nop
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800eaf0:	bf00      	nop
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b087      	sub	sp, #28
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	f003 030f 	and.w	r3, r3, #15
 800eb0e:	2204      	movs	r2, #4
 800eb10:	fa02 f303 	lsl.w	r3, r2, r3
 800eb14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6a1a      	ldr	r2, [r3, #32]
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	43db      	mvns	r3, r3
 800eb1e:	401a      	ands	r2, r3
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6a1a      	ldr	r2, [r3, #32]
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	f003 030f 	and.w	r3, r3, #15
 800eb2e:	6879      	ldr	r1, [r7, #4]
 800eb30:	fa01 f303 	lsl.w	r3, r1, r3
 800eb34:	431a      	orrs	r2, r3
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	621a      	str	r2, [r3, #32]
}
 800eb3a:	bf00      	nop
 800eb3c:	371c      	adds	r7, #28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr

0800eb46 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b082      	sub	sp, #8
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d101      	bne.n	800eb58 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800eb54:	2301      	movs	r3, #1
 800eb56:	e04a      	b.n	800ebee <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d106      	bne.n	800eb70 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2200      	movs	r2, #0
 800eb66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7f6 f946 	bl	8004dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2224      	movs	r2, #36	; 0x24
 800eb74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f022 0201 	bic.w	r2, r2, #1
 800eb86:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d002      	beq.n	800eb96 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 fafd 	bl	800f190 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 f82e 	bl	800ebf8 <UART_SetConfig>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d101      	bne.n	800eba6 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	e023      	b.n	800ebee <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	685a      	ldr	r2, [r3, #4]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ebb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	689a      	ldr	r2, [r3, #8]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800ebc4:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	689a      	ldr	r2, [r3, #8]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f042 0208 	orr.w	r2, r2, #8
 800ebd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f042 0201 	orr.w	r2, r2, #1
 800ebe4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fb74 	bl	800f2d4 <UART_CheckIdleState>
 800ebec:	4603      	mov	r3, r0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ebf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebfc:	b08c      	sub	sp, #48	; 0x30
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	689a      	ldr	r2, [r3, #8]
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	431a      	orrs	r2, r3
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	431a      	orrs	r2, r3
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	4bab      	ldr	r3, [pc, #684]	; (800eed4 <UART_SetConfig+0x2dc>)
 800ec28:	4013      	ands	r3, r2
 800ec2a:	697a      	ldr	r2, [r7, #20]
 800ec2c:	6812      	ldr	r2, [r2, #0]
 800ec2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec30:	430b      	orrs	r3, r1
 800ec32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	68da      	ldr	r2, [r3, #12]
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	430a      	orrs	r2, r1
 800ec48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4aa0      	ldr	r2, [pc, #640]	; (800eed8 <UART_SetConfig+0x2e0>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d004      	beq.n	800ec64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	6a1b      	ldr	r3, [r3, #32]
 800ec5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec60:	4313      	orrs	r3, r2
 800ec62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ec6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ec72:	697a      	ldr	r2, [r7, #20]
 800ec74:	6812      	ldr	r2, [r2, #0]
 800ec76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec78:	430b      	orrs	r3, r1
 800ec7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec82:	f023 010f 	bic.w	r1, r3, #15
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	430a      	orrs	r2, r1
 800ec90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a91      	ldr	r2, [pc, #580]	; (800eedc <UART_SetConfig+0x2e4>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d125      	bne.n	800ece8 <UART_SetConfig+0xf0>
 800ec9c:	4b90      	ldr	r3, [pc, #576]	; (800eee0 <UART_SetConfig+0x2e8>)
 800ec9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eca2:	f003 0303 	and.w	r3, r3, #3
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d81a      	bhi.n	800ece0 <UART_SetConfig+0xe8>
 800ecaa:	a201      	add	r2, pc, #4	; (adr r2, 800ecb0 <UART_SetConfig+0xb8>)
 800ecac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb0:	0800ecc1 	.word	0x0800ecc1
 800ecb4:	0800ecd1 	.word	0x0800ecd1
 800ecb8:	0800ecc9 	.word	0x0800ecc9
 800ecbc:	0800ecd9 	.word	0x0800ecd9
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecc6:	e0d6      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ecc8:	2302      	movs	r3, #2
 800ecca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecce:	e0d2      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ecd0:	2304      	movs	r3, #4
 800ecd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecd6:	e0ce      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ecd8:	2308      	movs	r3, #8
 800ecda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecde:	e0ca      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ece0:	2310      	movs	r3, #16
 800ece2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ece6:	e0c6      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a7d      	ldr	r2, [pc, #500]	; (800eee4 <UART_SetConfig+0x2ec>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d138      	bne.n	800ed64 <UART_SetConfig+0x16c>
 800ecf2:	4b7b      	ldr	r3, [pc, #492]	; (800eee0 <UART_SetConfig+0x2e8>)
 800ecf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecf8:	f003 030c 	and.w	r3, r3, #12
 800ecfc:	2b0c      	cmp	r3, #12
 800ecfe:	d82d      	bhi.n	800ed5c <UART_SetConfig+0x164>
 800ed00:	a201      	add	r2, pc, #4	; (adr r2, 800ed08 <UART_SetConfig+0x110>)
 800ed02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed06:	bf00      	nop
 800ed08:	0800ed3d 	.word	0x0800ed3d
 800ed0c:	0800ed5d 	.word	0x0800ed5d
 800ed10:	0800ed5d 	.word	0x0800ed5d
 800ed14:	0800ed5d 	.word	0x0800ed5d
 800ed18:	0800ed4d 	.word	0x0800ed4d
 800ed1c:	0800ed5d 	.word	0x0800ed5d
 800ed20:	0800ed5d 	.word	0x0800ed5d
 800ed24:	0800ed5d 	.word	0x0800ed5d
 800ed28:	0800ed45 	.word	0x0800ed45
 800ed2c:	0800ed5d 	.word	0x0800ed5d
 800ed30:	0800ed5d 	.word	0x0800ed5d
 800ed34:	0800ed5d 	.word	0x0800ed5d
 800ed38:	0800ed55 	.word	0x0800ed55
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed42:	e098      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ed44:	2302      	movs	r3, #2
 800ed46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed4a:	e094      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ed4c:	2304      	movs	r3, #4
 800ed4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed52:	e090      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ed54:	2308      	movs	r3, #8
 800ed56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed5a:	e08c      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ed5c:	2310      	movs	r3, #16
 800ed5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed62:	e088      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a5f      	ldr	r2, [pc, #380]	; (800eee8 <UART_SetConfig+0x2f0>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d125      	bne.n	800edba <UART_SetConfig+0x1c2>
 800ed6e:	4b5c      	ldr	r3, [pc, #368]	; (800eee0 <UART_SetConfig+0x2e8>)
 800ed70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ed78:	2b30      	cmp	r3, #48	; 0x30
 800ed7a:	d016      	beq.n	800edaa <UART_SetConfig+0x1b2>
 800ed7c:	2b30      	cmp	r3, #48	; 0x30
 800ed7e:	d818      	bhi.n	800edb2 <UART_SetConfig+0x1ba>
 800ed80:	2b20      	cmp	r3, #32
 800ed82:	d00a      	beq.n	800ed9a <UART_SetConfig+0x1a2>
 800ed84:	2b20      	cmp	r3, #32
 800ed86:	d814      	bhi.n	800edb2 <UART_SetConfig+0x1ba>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <UART_SetConfig+0x19a>
 800ed8c:	2b10      	cmp	r3, #16
 800ed8e:	d008      	beq.n	800eda2 <UART_SetConfig+0x1aa>
 800ed90:	e00f      	b.n	800edb2 <UART_SetConfig+0x1ba>
 800ed92:	2300      	movs	r3, #0
 800ed94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed98:	e06d      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eda0:	e069      	b.n	800ee76 <UART_SetConfig+0x27e>
 800eda2:	2304      	movs	r3, #4
 800eda4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eda8:	e065      	b.n	800ee76 <UART_SetConfig+0x27e>
 800edaa:	2308      	movs	r3, #8
 800edac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edb0:	e061      	b.n	800ee76 <UART_SetConfig+0x27e>
 800edb2:	2310      	movs	r3, #16
 800edb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edb8:	e05d      	b.n	800ee76 <UART_SetConfig+0x27e>
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a4b      	ldr	r2, [pc, #300]	; (800eeec <UART_SetConfig+0x2f4>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d125      	bne.n	800ee10 <UART_SetConfig+0x218>
 800edc4:	4b46      	ldr	r3, [pc, #280]	; (800eee0 <UART_SetConfig+0x2e8>)
 800edc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800edce:	2bc0      	cmp	r3, #192	; 0xc0
 800edd0:	d016      	beq.n	800ee00 <UART_SetConfig+0x208>
 800edd2:	2bc0      	cmp	r3, #192	; 0xc0
 800edd4:	d818      	bhi.n	800ee08 <UART_SetConfig+0x210>
 800edd6:	2b80      	cmp	r3, #128	; 0x80
 800edd8:	d00a      	beq.n	800edf0 <UART_SetConfig+0x1f8>
 800edda:	2b80      	cmp	r3, #128	; 0x80
 800eddc:	d814      	bhi.n	800ee08 <UART_SetConfig+0x210>
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d002      	beq.n	800ede8 <UART_SetConfig+0x1f0>
 800ede2:	2b40      	cmp	r3, #64	; 0x40
 800ede4:	d008      	beq.n	800edf8 <UART_SetConfig+0x200>
 800ede6:	e00f      	b.n	800ee08 <UART_SetConfig+0x210>
 800ede8:	2300      	movs	r3, #0
 800edea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edee:	e042      	b.n	800ee76 <UART_SetConfig+0x27e>
 800edf0:	2302      	movs	r3, #2
 800edf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edf6:	e03e      	b.n	800ee76 <UART_SetConfig+0x27e>
 800edf8:	2304      	movs	r3, #4
 800edfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edfe:	e03a      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ee00:	2308      	movs	r3, #8
 800ee02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee06:	e036      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ee08:	2310      	movs	r3, #16
 800ee0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee0e:	e032      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a30      	ldr	r2, [pc, #192]	; (800eed8 <UART_SetConfig+0x2e0>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d12a      	bne.n	800ee70 <UART_SetConfig+0x278>
 800ee1a:	4b31      	ldr	r3, [pc, #196]	; (800eee0 <UART_SetConfig+0x2e8>)
 800ee1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ee24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee28:	d01a      	beq.n	800ee60 <UART_SetConfig+0x268>
 800ee2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee2e:	d81b      	bhi.n	800ee68 <UART_SetConfig+0x270>
 800ee30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee34:	d00c      	beq.n	800ee50 <UART_SetConfig+0x258>
 800ee36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee3a:	d815      	bhi.n	800ee68 <UART_SetConfig+0x270>
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d003      	beq.n	800ee48 <UART_SetConfig+0x250>
 800ee40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee44:	d008      	beq.n	800ee58 <UART_SetConfig+0x260>
 800ee46:	e00f      	b.n	800ee68 <UART_SetConfig+0x270>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee4e:	e012      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ee50:	2302      	movs	r3, #2
 800ee52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee56:	e00e      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ee58:	2304      	movs	r3, #4
 800ee5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee5e:	e00a      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ee60:	2308      	movs	r3, #8
 800ee62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee66:	e006      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ee68:	2310      	movs	r3, #16
 800ee6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee6e:	e002      	b.n	800ee76 <UART_SetConfig+0x27e>
 800ee70:	2310      	movs	r3, #16
 800ee72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4a17      	ldr	r2, [pc, #92]	; (800eed8 <UART_SetConfig+0x2e0>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	f040 80a8 	bne.w	800efd2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee86:	2b08      	cmp	r3, #8
 800ee88:	d834      	bhi.n	800eef4 <UART_SetConfig+0x2fc>
 800ee8a:	a201      	add	r2, pc, #4	; (adr r2, 800ee90 <UART_SetConfig+0x298>)
 800ee8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee90:	0800eeb5 	.word	0x0800eeb5
 800ee94:	0800eef5 	.word	0x0800eef5
 800ee98:	0800eebd 	.word	0x0800eebd
 800ee9c:	0800eef5 	.word	0x0800eef5
 800eea0:	0800eec3 	.word	0x0800eec3
 800eea4:	0800eef5 	.word	0x0800eef5
 800eea8:	0800eef5 	.word	0x0800eef5
 800eeac:	0800eef5 	.word	0x0800eef5
 800eeb0:	0800eecb 	.word	0x0800eecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eeb4:	f7fd f904 	bl	800c0c0 <HAL_RCC_GetPCLK1Freq>
 800eeb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800eeba:	e021      	b.n	800ef00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eebc:	4b0c      	ldr	r3, [pc, #48]	; (800eef0 <UART_SetConfig+0x2f8>)
 800eebe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800eec0:	e01e      	b.n	800ef00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eec2:	f7fd f88f 	bl	800bfe4 <HAL_RCC_GetSysClockFreq>
 800eec6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800eec8:	e01a      	b.n	800ef00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eeca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eece:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800eed0:	e016      	b.n	800ef00 <UART_SetConfig+0x308>
 800eed2:	bf00      	nop
 800eed4:	cfff69f3 	.word	0xcfff69f3
 800eed8:	40008000 	.word	0x40008000
 800eedc:	40013800 	.word	0x40013800
 800eee0:	40021000 	.word	0x40021000
 800eee4:	40004400 	.word	0x40004400
 800eee8:	40004800 	.word	0x40004800
 800eeec:	40004c00 	.word	0x40004c00
 800eef0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800eef4:	2300      	movs	r3, #0
 800eef6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800eef8:	2301      	movs	r3, #1
 800eefa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800eefe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ef00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f000 812a 	beq.w	800f15c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef0c:	4a9e      	ldr	r2, [pc, #632]	; (800f188 <UART_SetConfig+0x590>)
 800ef0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef12:	461a      	mov	r2, r3
 800ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef16:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef1a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	685a      	ldr	r2, [r3, #4]
 800ef20:	4613      	mov	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	4413      	add	r3, r2
 800ef26:	69ba      	ldr	r2, [r7, #24]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d305      	bcc.n	800ef38 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef32:	69ba      	ldr	r2, [r7, #24]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d903      	bls.n	800ef40 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ef3e:	e10d      	b.n	800f15c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	2200      	movs	r2, #0
 800ef44:	60bb      	str	r3, [r7, #8]
 800ef46:	60fa      	str	r2, [r7, #12]
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4c:	4a8e      	ldr	r2, [pc, #568]	; (800f188 <UART_SetConfig+0x590>)
 800ef4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	2200      	movs	r2, #0
 800ef56:	603b      	str	r3, [r7, #0]
 800ef58:	607a      	str	r2, [r7, #4]
 800ef5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ef62:	f7f1 feb9 	bl	8000cd8 <__aeabi_uldivmod>
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	4610      	mov	r0, r2
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	f04f 0200 	mov.w	r2, #0
 800ef72:	f04f 0300 	mov.w	r3, #0
 800ef76:	020b      	lsls	r3, r1, #8
 800ef78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef7c:	0202      	lsls	r2, r0, #8
 800ef7e:	6979      	ldr	r1, [r7, #20]
 800ef80:	6849      	ldr	r1, [r1, #4]
 800ef82:	0849      	lsrs	r1, r1, #1
 800ef84:	2000      	movs	r0, #0
 800ef86:	460c      	mov	r4, r1
 800ef88:	4605      	mov	r5, r0
 800ef8a:	eb12 0804 	adds.w	r8, r2, r4
 800ef8e:	eb43 0905 	adc.w	r9, r3, r5
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	469a      	mov	sl, r3
 800ef9a:	4693      	mov	fp, r2
 800ef9c:	4652      	mov	r2, sl
 800ef9e:	465b      	mov	r3, fp
 800efa0:	4640      	mov	r0, r8
 800efa2:	4649      	mov	r1, r9
 800efa4:	f7f1 fe98 	bl	8000cd8 <__aeabi_uldivmod>
 800efa8:	4602      	mov	r2, r0
 800efaa:	460b      	mov	r3, r1
 800efac:	4613      	mov	r3, r2
 800efae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800efb0:	6a3b      	ldr	r3, [r7, #32]
 800efb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800efb6:	d308      	bcc.n	800efca <UART_SetConfig+0x3d2>
 800efb8:	6a3b      	ldr	r3, [r7, #32]
 800efba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efbe:	d204      	bcs.n	800efca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	6a3a      	ldr	r2, [r7, #32]
 800efc6:	60da      	str	r2, [r3, #12]
 800efc8:	e0c8      	b.n	800f15c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800efd0:	e0c4      	b.n	800f15c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	69db      	ldr	r3, [r3, #28]
 800efd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efda:	d167      	bne.n	800f0ac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800efdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efe0:	2b08      	cmp	r3, #8
 800efe2:	d828      	bhi.n	800f036 <UART_SetConfig+0x43e>
 800efe4:	a201      	add	r2, pc, #4	; (adr r2, 800efec <UART_SetConfig+0x3f4>)
 800efe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efea:	bf00      	nop
 800efec:	0800f011 	.word	0x0800f011
 800eff0:	0800f019 	.word	0x0800f019
 800eff4:	0800f021 	.word	0x0800f021
 800eff8:	0800f037 	.word	0x0800f037
 800effc:	0800f027 	.word	0x0800f027
 800f000:	0800f037 	.word	0x0800f037
 800f004:	0800f037 	.word	0x0800f037
 800f008:	0800f037 	.word	0x0800f037
 800f00c:	0800f02f 	.word	0x0800f02f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f010:	f7fd f856 	bl	800c0c0 <HAL_RCC_GetPCLK1Freq>
 800f014:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f016:	e014      	b.n	800f042 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f018:	f7fd f868 	bl	800c0ec <HAL_RCC_GetPCLK2Freq>
 800f01c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f01e:	e010      	b.n	800f042 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f020:	4b5a      	ldr	r3, [pc, #360]	; (800f18c <UART_SetConfig+0x594>)
 800f022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f024:	e00d      	b.n	800f042 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f026:	f7fc ffdd 	bl	800bfe4 <HAL_RCC_GetSysClockFreq>
 800f02a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f02c:	e009      	b.n	800f042 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f02e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f034:	e005      	b.n	800f042 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800f036:	2300      	movs	r3, #0
 800f038:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f03a:	2301      	movs	r3, #1
 800f03c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f040:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f044:	2b00      	cmp	r3, #0
 800f046:	f000 8089 	beq.w	800f15c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04e:	4a4e      	ldr	r2, [pc, #312]	; (800f188 <UART_SetConfig+0x590>)
 800f050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f054:	461a      	mov	r2, r3
 800f056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f058:	fbb3 f3f2 	udiv	r3, r3, r2
 800f05c:	005a      	lsls	r2, r3, #1
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	085b      	lsrs	r3, r3, #1
 800f064:	441a      	add	r2, r3
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f06e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	2b0f      	cmp	r3, #15
 800f074:	d916      	bls.n	800f0a4 <UART_SetConfig+0x4ac>
 800f076:	6a3b      	ldr	r3, [r7, #32]
 800f078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f07c:	d212      	bcs.n	800f0a4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f07e:	6a3b      	ldr	r3, [r7, #32]
 800f080:	b29b      	uxth	r3, r3
 800f082:	f023 030f 	bic.w	r3, r3, #15
 800f086:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f088:	6a3b      	ldr	r3, [r7, #32]
 800f08a:	085b      	lsrs	r3, r3, #1
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	f003 0307 	and.w	r3, r3, #7
 800f092:	b29a      	uxth	r2, r3
 800f094:	8bfb      	ldrh	r3, [r7, #30]
 800f096:	4313      	orrs	r3, r2
 800f098:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	8bfa      	ldrh	r2, [r7, #30]
 800f0a0:	60da      	str	r2, [r3, #12]
 800f0a2:	e05b      	b.n	800f15c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f0aa:	e057      	b.n	800f15c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f0ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f0b0:	2b08      	cmp	r3, #8
 800f0b2:	d828      	bhi.n	800f106 <UART_SetConfig+0x50e>
 800f0b4:	a201      	add	r2, pc, #4	; (adr r2, 800f0bc <UART_SetConfig+0x4c4>)
 800f0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ba:	bf00      	nop
 800f0bc:	0800f0e1 	.word	0x0800f0e1
 800f0c0:	0800f0e9 	.word	0x0800f0e9
 800f0c4:	0800f0f1 	.word	0x0800f0f1
 800f0c8:	0800f107 	.word	0x0800f107
 800f0cc:	0800f0f7 	.word	0x0800f0f7
 800f0d0:	0800f107 	.word	0x0800f107
 800f0d4:	0800f107 	.word	0x0800f107
 800f0d8:	0800f107 	.word	0x0800f107
 800f0dc:	0800f0ff 	.word	0x0800f0ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0e0:	f7fc ffee 	bl	800c0c0 <HAL_RCC_GetPCLK1Freq>
 800f0e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0e6:	e014      	b.n	800f112 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0e8:	f7fd f800 	bl	800c0ec <HAL_RCC_GetPCLK2Freq>
 800f0ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0ee:	e010      	b.n	800f112 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0f0:	4b26      	ldr	r3, [pc, #152]	; (800f18c <UART_SetConfig+0x594>)
 800f0f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f0f4:	e00d      	b.n	800f112 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0f6:	f7fc ff75 	bl	800bfe4 <HAL_RCC_GetSysClockFreq>
 800f0fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0fc:	e009      	b.n	800f112 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f102:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f104:	e005      	b.n	800f112 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800f106:	2300      	movs	r3, #0
 800f108:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f10a:	2301      	movs	r3, #1
 800f10c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f110:	bf00      	nop
    }

    if (pclk != 0U)
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	2b00      	cmp	r3, #0
 800f116:	d021      	beq.n	800f15c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11c:	4a1a      	ldr	r2, [pc, #104]	; (800f188 <UART_SetConfig+0x590>)
 800f11e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f122:	461a      	mov	r2, r3
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	fbb3 f2f2 	udiv	r2, r3, r2
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	085b      	lsrs	r3, r3, #1
 800f130:	441a      	add	r2, r3
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	fbb2 f3f3 	udiv	r3, r2, r3
 800f13a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	2b0f      	cmp	r3, #15
 800f140:	d909      	bls.n	800f156 <UART_SetConfig+0x55e>
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f148:	d205      	bcs.n	800f156 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f14a:	6a3b      	ldr	r3, [r7, #32]
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	60da      	str	r2, [r3, #12]
 800f154:	e002      	b.n	800f15c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f156:	2301      	movs	r3, #1
 800f158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	2201      	movs	r2, #1
 800f160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	2201      	movs	r2, #1
 800f168:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	2200      	movs	r2, #0
 800f170:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	2200      	movs	r2, #0
 800f176:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f178:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3730      	adds	r7, #48	; 0x30
 800f180:	46bd      	mov	sp, r7
 800f182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f186:	bf00      	nop
 800f188:	08019138 	.word	0x08019138
 800f18c:	00f42400 	.word	0x00f42400

0800f190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f19c:	f003 0308 	and.w	r3, r3, #8
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d00a      	beq.n	800f1ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	430a      	orrs	r2, r1
 800f1b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1be:	f003 0301 	and.w	r3, r3, #1
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00a      	beq.n	800f1dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	430a      	orrs	r2, r1
 800f1da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1e0:	f003 0302 	and.w	r3, r3, #2
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00a      	beq.n	800f1fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	430a      	orrs	r2, r1
 800f1fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f202:	f003 0304 	and.w	r3, r3, #4
 800f206:	2b00      	cmp	r3, #0
 800f208:	d00a      	beq.n	800f220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	430a      	orrs	r2, r1
 800f21e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f224:	f003 0310 	and.w	r3, r3, #16
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00a      	beq.n	800f242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	689b      	ldr	r3, [r3, #8]
 800f232:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	430a      	orrs	r2, r1
 800f240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f246:	f003 0320 	and.w	r3, r3, #32
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d00a      	beq.n	800f264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	689b      	ldr	r3, [r3, #8]
 800f254:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	430a      	orrs	r2, r1
 800f262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d01a      	beq.n	800f2a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	430a      	orrs	r2, r1
 800f284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f28a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f28e:	d10a      	bne.n	800f2a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	430a      	orrs	r2, r1
 800f2a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d00a      	beq.n	800f2c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	430a      	orrs	r2, r1
 800f2c6:	605a      	str	r2, [r3, #4]
  }
}
 800f2c8:	bf00      	nop
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b098      	sub	sp, #96	; 0x60
 800f2d8:	af02      	add	r7, sp, #8
 800f2da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f2e4:	f7f6 fbf2 	bl	8005acc <HAL_GetTick>
 800f2e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f003 0308 	and.w	r3, r3, #8
 800f2f4:	2b08      	cmp	r3, #8
 800f2f6:	d12f      	bne.n	800f358 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f300:	2200      	movs	r2, #0
 800f302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 f88e 	bl	800f428 <UART_WaitOnFlagUntilTimeout>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d022      	beq.n	800f358 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31a:	e853 3f00 	ldrex	r3, [r3]
 800f31e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f326:	653b      	str	r3, [r7, #80]	; 0x50
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	461a      	mov	r2, r3
 800f32e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f330:	647b      	str	r3, [r7, #68]	; 0x44
 800f332:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f334:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f338:	e841 2300 	strex	r3, r2, [r1]
 800f33c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f340:	2b00      	cmp	r3, #0
 800f342:	d1e6      	bne.n	800f312 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2220      	movs	r2, #32
 800f348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f354:	2303      	movs	r3, #3
 800f356:	e063      	b.n	800f420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f003 0304 	and.w	r3, r3, #4
 800f362:	2b04      	cmp	r3, #4
 800f364:	d149      	bne.n	800f3fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f366:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f36e:	2200      	movs	r2, #0
 800f370:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 f857 	bl	800f428 <UART_WaitOnFlagUntilTimeout>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d03c      	beq.n	800f3fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f388:	e853 3f00 	ldrex	r3, [r3]
 800f38c:	623b      	str	r3, [r7, #32]
   return(result);
 800f38e:	6a3b      	ldr	r3, [r7, #32]
 800f390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f394:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	461a      	mov	r2, r3
 800f39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f39e:	633b      	str	r3, [r7, #48]	; 0x30
 800f3a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3a6:	e841 2300 	strex	r3, r2, [r1]
 800f3aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1e6      	bne.n	800f380 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	3308      	adds	r3, #8
 800f3b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	e853 3f00 	ldrex	r3, [r3]
 800f3c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f023 0301 	bic.w	r3, r3, #1
 800f3c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	3308      	adds	r3, #8
 800f3d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3d2:	61fa      	str	r2, [r7, #28]
 800f3d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d6:	69b9      	ldr	r1, [r7, #24]
 800f3d8:	69fa      	ldr	r2, [r7, #28]
 800f3da:	e841 2300 	strex	r3, r2, [r1]
 800f3de:	617b      	str	r3, [r7, #20]
   return(result);
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1e5      	bne.n	800f3b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2220      	movs	r2, #32
 800f3ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3f6:	2303      	movs	r3, #3
 800f3f8:	e012      	b.n	800f420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2220      	movs	r2, #32
 800f3fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2220      	movs	r2, #32
 800f406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2200      	movs	r2, #0
 800f40e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f41e:	2300      	movs	r3, #0
}
 800f420:	4618      	mov	r0, r3
 800f422:	3758      	adds	r7, #88	; 0x58
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	603b      	str	r3, [r7, #0]
 800f434:	4613      	mov	r3, r2
 800f436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f438:	e04f      	b.n	800f4da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f440:	d04b      	beq.n	800f4da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f442:	f7f6 fb43 	bl	8005acc <HAL_GetTick>
 800f446:	4602      	mov	r2, r0
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	69ba      	ldr	r2, [r7, #24]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d302      	bcc.n	800f458 <UART_WaitOnFlagUntilTimeout+0x30>
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d101      	bne.n	800f45c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f458:	2303      	movs	r3, #3
 800f45a:	e04e      	b.n	800f4fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f003 0304 	and.w	r3, r3, #4
 800f466:	2b00      	cmp	r3, #0
 800f468:	d037      	beq.n	800f4da <UART_WaitOnFlagUntilTimeout+0xb2>
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	2b80      	cmp	r3, #128	; 0x80
 800f46e:	d034      	beq.n	800f4da <UART_WaitOnFlagUntilTimeout+0xb2>
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2b40      	cmp	r3, #64	; 0x40
 800f474:	d031      	beq.n	800f4da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	69db      	ldr	r3, [r3, #28]
 800f47c:	f003 0308 	and.w	r3, r3, #8
 800f480:	2b08      	cmp	r3, #8
 800f482:	d110      	bne.n	800f4a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2208      	movs	r2, #8
 800f48a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f000 f838 	bl	800f502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2208      	movs	r2, #8
 800f496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2200      	movs	r2, #0
 800f49e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e029      	b.n	800f4fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	69db      	ldr	r3, [r3, #28]
 800f4ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4b4:	d111      	bne.n	800f4da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f4c0:	68f8      	ldr	r0, [r7, #12]
 800f4c2:	f000 f81e 	bl	800f502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2220      	movs	r2, #32
 800f4ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f4d6:	2303      	movs	r3, #3
 800f4d8:	e00f      	b.n	800f4fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	69da      	ldr	r2, [r3, #28]
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	4013      	ands	r3, r2
 800f4e4:	68ba      	ldr	r2, [r7, #8]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	bf0c      	ite	eq
 800f4ea:	2301      	moveq	r3, #1
 800f4ec:	2300      	movne	r3, #0
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	79fb      	ldrb	r3, [r7, #7]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d0a0      	beq.n	800f43a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f4f8:	2300      	movs	r3, #0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f502:	b480      	push	{r7}
 800f504:	b095      	sub	sp, #84	; 0x54
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f512:	e853 3f00 	ldrex	r3, [r3]
 800f516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f51e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	461a      	mov	r2, r3
 800f526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f528:	643b      	str	r3, [r7, #64]	; 0x40
 800f52a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f52c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f52e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f530:	e841 2300 	strex	r3, r2, [r1]
 800f534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1e6      	bne.n	800f50a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	3308      	adds	r3, #8
 800f542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f544:	6a3b      	ldr	r3, [r7, #32]
 800f546:	e853 3f00 	ldrex	r3, [r3]
 800f54a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f552:	f023 0301 	bic.w	r3, r3, #1
 800f556:	64bb      	str	r3, [r7, #72]	; 0x48
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	3308      	adds	r3, #8
 800f55e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f560:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f568:	e841 2300 	strex	r3, r2, [r1]
 800f56c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f570:	2b00      	cmp	r3, #0
 800f572:	d1e3      	bne.n	800f53c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d118      	bne.n	800f5ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	e853 3f00 	ldrex	r3, [r3]
 800f588:	60bb      	str	r3, [r7, #8]
   return(result);
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	f023 0310 	bic.w	r3, r3, #16
 800f590:	647b      	str	r3, [r7, #68]	; 0x44
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	461a      	mov	r2, r3
 800f598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f59a:	61bb      	str	r3, [r7, #24]
 800f59c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f59e:	6979      	ldr	r1, [r7, #20]
 800f5a0:	69ba      	ldr	r2, [r7, #24]
 800f5a2:	e841 2300 	strex	r3, r2, [r1]
 800f5a6:	613b      	str	r3, [r7, #16]
   return(result);
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d1e6      	bne.n	800f57c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2220      	movs	r2, #32
 800f5b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f5c2:	bf00      	nop
 800f5c4:	3754      	adds	r7, #84	; 0x54
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5ce:	b480      	push	{r7}
 800f5d0:	b085      	sub	sp, #20
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d101      	bne.n	800f5e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	e027      	b.n	800f634 <HAL_UARTEx_DisableFifoMode+0x66>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2224      	movs	r2, #36	; 0x24
 800f5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	681a      	ldr	r2, [r3, #0]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f022 0201 	bic.w	r2, r2, #1
 800f60a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f612:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	68fa      	ldr	r2, [r7, #12]
 800f620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2220      	movs	r2, #32
 800f626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f632:	2300      	movs	r3, #0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3714      	adds	r7, #20
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f650:	2b01      	cmp	r3, #1
 800f652:	d101      	bne.n	800f658 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f654:	2302      	movs	r3, #2
 800f656:	e02d      	b.n	800f6b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2201      	movs	r2, #1
 800f65c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2224      	movs	r2, #36	; 0x24
 800f664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f022 0201 	bic.w	r2, r2, #1
 800f67e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	683a      	ldr	r2, [r7, #0]
 800f690:	430a      	orrs	r2, r1
 800f692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 f84f 	bl	800f738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2220      	movs	r2, #32
 800f6a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3710      	adds	r7, #16
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d101      	bne.n	800f6d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	e02d      	b.n	800f730 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2224      	movs	r2, #36	; 0x24
 800f6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f022 0201 	bic.w	r2, r2, #1
 800f6fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	683a      	ldr	r2, [r7, #0]
 800f70c:	430a      	orrs	r2, r1
 800f70e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 f811 	bl	800f738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2220      	movs	r2, #32
 800f722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2200      	movs	r2, #0
 800f72a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f72e:	2300      	movs	r3, #0
}
 800f730:	4618      	mov	r0, r3
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f738:	b480      	push	{r7}
 800f73a:	b085      	sub	sp, #20
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f744:	2b00      	cmp	r3, #0
 800f746:	d108      	bne.n	800f75a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2201      	movs	r2, #1
 800f74c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f758:	e031      	b.n	800f7be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f75a:	2308      	movs	r3, #8
 800f75c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f75e:	2308      	movs	r3, #8
 800f760:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	0e5b      	lsrs	r3, r3, #25
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	f003 0307 	and.w	r3, r3, #7
 800f770:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	0f5b      	lsrs	r3, r3, #29
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	f003 0307 	and.w	r3, r3, #7
 800f780:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f782:	7bbb      	ldrb	r3, [r7, #14]
 800f784:	7b3a      	ldrb	r2, [r7, #12]
 800f786:	4911      	ldr	r1, [pc, #68]	; (800f7cc <UARTEx_SetNbDataToProcess+0x94>)
 800f788:	5c8a      	ldrb	r2, [r1, r2]
 800f78a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f78e:	7b3a      	ldrb	r2, [r7, #12]
 800f790:	490f      	ldr	r1, [pc, #60]	; (800f7d0 <UARTEx_SetNbDataToProcess+0x98>)
 800f792:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f794:	fb93 f3f2 	sdiv	r3, r3, r2
 800f798:	b29a      	uxth	r2, r3
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7a0:	7bfb      	ldrb	r3, [r7, #15]
 800f7a2:	7b7a      	ldrb	r2, [r7, #13]
 800f7a4:	4909      	ldr	r1, [pc, #36]	; (800f7cc <UARTEx_SetNbDataToProcess+0x94>)
 800f7a6:	5c8a      	ldrb	r2, [r1, r2]
 800f7a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f7ac:	7b7a      	ldrb	r2, [r7, #13]
 800f7ae:	4908      	ldr	r1, [pc, #32]	; (800f7d0 <UARTEx_SetNbDataToProcess+0x98>)
 800f7b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f7be:	bf00      	nop
 800f7c0:	3714      	adds	r7, #20
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	08019150 	.word	0x08019150
 800f7d0:	08019158 	.word	0x08019158

0800f7d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f7e4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f7e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f7f4:	2300      	movs	r3, #0
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr

0800f802 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f802:	b480      	push	{r7}
 800f804:	b085      	sub	sp, #20
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f80a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f80e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f816:	b29a      	uxth	r2, r3
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	43db      	mvns	r3, r3
 800f81e:	b29b      	uxth	r3, r3
 800f820:	4013      	ands	r3, r2
 800f822:	b29a      	uxth	r2, r3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f82a:	2300      	movs	r3, #0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3714      	adds	r7, #20
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f838:	b480      	push	{r7}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	1d3b      	adds	r3, r7, #4
 800f842:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2201      	movs	r2, #1
 800f84a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	2200      	movs	r2, #0
 800f852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2200      	movs	r2, #0
 800f85a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2200      	movs	r2, #0
 800f862:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f866:	2300      	movs	r3, #0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3714      	adds	r7, #20
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f874:	b480      	push	{r7}
 800f876:	b09d      	sub	sp, #116	; 0x74
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f87e:	2300      	movs	r3, #0
 800f880:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	4413      	add	r3, r2
 800f88e:	881b      	ldrh	r3, [r3, #0]
 800f890:	b29b      	uxth	r3, r3
 800f892:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f89a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	78db      	ldrb	r3, [r3, #3]
 800f8a2:	2b03      	cmp	r3, #3
 800f8a4:	d81f      	bhi.n	800f8e6 <USB_ActivateEndpoint+0x72>
 800f8a6:	a201      	add	r2, pc, #4	; (adr r2, 800f8ac <USB_ActivateEndpoint+0x38>)
 800f8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ac:	0800f8bd 	.word	0x0800f8bd
 800f8b0:	0800f8d9 	.word	0x0800f8d9
 800f8b4:	0800f8ef 	.word	0x0800f8ef
 800f8b8:	0800f8cb 	.word	0x0800f8cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f8bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f8c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f8c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f8c8:	e012      	b.n	800f8f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f8ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f8ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f8d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f8d6:	e00b      	b.n	800f8f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f8d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f8dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f8e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f8e4:	e004      	b.n	800f8f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800f8ec:	e000      	b.n	800f8f0 <USB_ActivateEndpoint+0x7c>
      break;
 800f8ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	441a      	add	r2, r3
 800f8fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f8fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f90e:	b29b      	uxth	r3, r3
 800f910:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	009b      	lsls	r3, r3, #2
 800f91a:	4413      	add	r3, r2
 800f91c:	881b      	ldrh	r3, [r3, #0]
 800f91e:	b29b      	uxth	r3, r3
 800f920:	b21b      	sxth	r3, r3
 800f922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f92a:	b21a      	sxth	r2, r3
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	b21b      	sxth	r3, r3
 800f932:	4313      	orrs	r3, r2
 800f934:	b21b      	sxth	r3, r3
 800f936:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	009b      	lsls	r3, r3, #2
 800f942:	441a      	add	r2, r3
 800f944:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f94c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f958:	b29b      	uxth	r3, r3
 800f95a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	7b1b      	ldrb	r3, [r3, #12]
 800f960:	2b00      	cmp	r3, #0
 800f962:	f040 8178 	bne.w	800fc56 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	785b      	ldrb	r3, [r3, #1]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f000 8084 	beq.w	800fa78 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	61bb      	str	r3, [r7, #24]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	461a      	mov	r2, r3
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	4413      	add	r3, r2
 800f982:	61bb      	str	r3, [r7, #24]
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	00da      	lsls	r2, r3, #3
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	4413      	add	r3, r2
 800f98e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f992:	617b      	str	r3, [r7, #20]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	88db      	ldrh	r3, [r3, #6]
 800f998:	085b      	lsrs	r3, r3, #1
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	b29a      	uxth	r2, r3
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4413      	add	r3, r2
 800f9ae:	881b      	ldrh	r3, [r3, #0]
 800f9b0:	827b      	strh	r3, [r7, #18]
 800f9b2:	8a7b      	ldrh	r3, [r7, #18]
 800f9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d01b      	beq.n	800f9f4 <USB_ActivateEndpoint+0x180>
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	4413      	add	r3, r2
 800f9c6:	881b      	ldrh	r3, [r3, #0]
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9d2:	823b      	strh	r3, [r7, #16]
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	441a      	add	r2, r3
 800f9de:	8a3b      	ldrh	r3, [r7, #16]
 800f9e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	78db      	ldrb	r3, [r3, #3]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d020      	beq.n	800fa3e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	4413      	add	r3, r2
 800fa06:	881b      	ldrh	r3, [r3, #0]
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa12:	81bb      	strh	r3, [r7, #12]
 800fa14:	89bb      	ldrh	r3, [r7, #12]
 800fa16:	f083 0320 	eor.w	r3, r3, #32
 800fa1a:	81bb      	strh	r3, [r7, #12]
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	441a      	add	r2, r3
 800fa26:	89bb      	ldrh	r3, [r7, #12]
 800fa28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	8013      	strh	r3, [r2, #0]
 800fa3c:	e2d5      	b.n	800ffea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	4413      	add	r3, r2
 800fa48:	881b      	ldrh	r3, [r3, #0]
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa54:	81fb      	strh	r3, [r7, #14]
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	441a      	add	r2, r3
 800fa60:	89fb      	ldrh	r3, [r7, #14]
 800fa62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	8013      	strh	r3, [r2, #0]
 800fa76:	e2b8      	b.n	800ffea <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	633b      	str	r3, [r7, #48]	; 0x30
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	461a      	mov	r2, r3
 800fa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa88:	4413      	add	r3, r2
 800fa8a:	633b      	str	r3, [r7, #48]	; 0x30
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	00da      	lsls	r2, r3, #3
 800fa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa94:	4413      	add	r3, r2
 800fa96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	88db      	ldrh	r3, [r3, #6]
 800faa0:	085b      	lsrs	r3, r3, #1
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	005b      	lsls	r3, r3, #1
 800faa6:	b29a      	uxth	r2, r3
 800faa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faaa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	62bb      	str	r3, [r7, #40]	; 0x28
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	461a      	mov	r2, r3
 800faba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fabc:	4413      	add	r3, r2
 800fabe:	62bb      	str	r3, [r7, #40]	; 0x28
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	00da      	lsls	r2, r3, #3
 800fac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac8:	4413      	add	r3, r2
 800faca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800face:	627b      	str	r3, [r7, #36]	; 0x24
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fada:	b29a      	uxth	r2, r3
 800fadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fade:	801a      	strh	r2, [r3, #0]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	2b3e      	cmp	r3, #62	; 0x3e
 800fae6:	d91d      	bls.n	800fb24 <USB_ActivateEndpoint+0x2b0>
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	095b      	lsrs	r3, r3, #5
 800faee:	66bb      	str	r3, [r7, #104]	; 0x68
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	691b      	ldr	r3, [r3, #16]
 800faf4:	f003 031f 	and.w	r3, r3, #31
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d102      	bne.n	800fb02 <USB_ActivateEndpoint+0x28e>
 800fafc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fafe:	3b01      	subs	r3, #1
 800fb00:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb04:	881b      	ldrh	r3, [r3, #0]
 800fb06:	b29a      	uxth	r2, r3
 800fb08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	029b      	lsls	r3, r3, #10
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	4313      	orrs	r3, r2
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb1c:	b29a      	uxth	r2, r3
 800fb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb20:	801a      	strh	r2, [r3, #0]
 800fb22:	e026      	b.n	800fb72 <USB_ActivateEndpoint+0x2fe>
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d10a      	bne.n	800fb42 <USB_ActivateEndpoint+0x2ce>
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3e:	801a      	strh	r2, [r3, #0]
 800fb40:	e017      	b.n	800fb72 <USB_ActivateEndpoint+0x2fe>
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	085b      	lsrs	r3, r3, #1
 800fb48:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	691b      	ldr	r3, [r3, #16]
 800fb4e:	f003 0301 	and.w	r3, r3, #1
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d002      	beq.n	800fb5c <USB_ActivateEndpoint+0x2e8>
 800fb56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb58:	3301      	adds	r3, #1
 800fb5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	029b      	lsls	r3, r3, #10
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	4413      	add	r3, r2
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	847b      	strh	r3, [r7, #34]	; 0x22
 800fb80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d01b      	beq.n	800fbc2 <USB_ActivateEndpoint+0x34e>
 800fb8a:	687a      	ldr	r2, [r7, #4]
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	009b      	lsls	r3, r3, #2
 800fb92:	4413      	add	r3, r2
 800fb94:	881b      	ldrh	r3, [r3, #0]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fba0:	843b      	strh	r3, [r7, #32]
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	441a      	add	r2, r3
 800fbac:	8c3b      	ldrh	r3, [r7, #32]
 800fbae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fbb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fbba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d124      	bne.n	800fc14 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	4413      	add	r3, r2
 800fbd4:	881b      	ldrh	r3, [r3, #0]
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbe0:	83bb      	strh	r3, [r7, #28]
 800fbe2:	8bbb      	ldrh	r3, [r7, #28]
 800fbe4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fbe8:	83bb      	strh	r3, [r7, #28]
 800fbea:	8bbb      	ldrh	r3, [r7, #28]
 800fbec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fbf0:	83bb      	strh	r3, [r7, #28]
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	441a      	add	r2, r3
 800fbfc:	8bbb      	ldrh	r3, [r7, #28]
 800fbfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	8013      	strh	r3, [r2, #0]
 800fc12:	e1ea      	b.n	800ffea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	4413      	add	r3, r2
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc2a:	83fb      	strh	r3, [r7, #30]
 800fc2c:	8bfb      	ldrh	r3, [r7, #30]
 800fc2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fc32:	83fb      	strh	r3, [r7, #30]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	781b      	ldrb	r3, [r3, #0]
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	441a      	add	r2, r3
 800fc3e:	8bfb      	ldrh	r3, [r7, #30]
 800fc40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	8013      	strh	r3, [r2, #0]
 800fc54:	e1c9      	b.n	800ffea <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	78db      	ldrb	r3, [r3, #3]
 800fc5a:	2b02      	cmp	r3, #2
 800fc5c:	d11e      	bne.n	800fc9c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	009b      	lsls	r3, r3, #2
 800fc66:	4413      	add	r3, r2
 800fc68:	881b      	ldrh	r3, [r3, #0]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc74:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	009b      	lsls	r3, r3, #2
 800fc80:	441a      	add	r2, r3
 800fc82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fc86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fc92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	8013      	strh	r3, [r2, #0]
 800fc9a:	e01d      	b.n	800fcd8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	4413      	add	r3, r2
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800fcae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	441a      	add	r2, r3
 800fcc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fcc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fcc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	461a      	mov	r2, r3
 800fce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fce8:	4413      	add	r3, r2
 800fcea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	00da      	lsls	r2, r3, #3
 800fcf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcf4:	4413      	add	r3, r2
 800fcf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fcfa:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	891b      	ldrh	r3, [r3, #8]
 800fd00:	085b      	lsrs	r3, r3, #1
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	005b      	lsls	r3, r3, #1
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd0a:	801a      	strh	r2, [r3, #0]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	657b      	str	r3, [r7, #84]	; 0x54
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	461a      	mov	r2, r3
 800fd1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd1c:	4413      	add	r3, r2
 800fd1e:	657b      	str	r3, [r7, #84]	; 0x54
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	00da      	lsls	r2, r3, #3
 800fd26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd28:	4413      	add	r3, r2
 800fd2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fd2e:	653b      	str	r3, [r7, #80]	; 0x50
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	895b      	ldrh	r3, [r3, #10]
 800fd34:	085b      	lsrs	r3, r3, #1
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	005b      	lsls	r3, r3, #1
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd3e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	785b      	ldrb	r3, [r3, #1]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f040 8093 	bne.w	800fe70 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	4413      	add	r3, r2
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fd5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fd5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d01b      	beq.n	800fd9e <USB_ActivateEndpoint+0x52a>
 800fd66:	687a      	ldr	r2, [r7, #4]
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	4413      	add	r3, r2
 800fd70:	881b      	ldrh	r3, [r3, #0]
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	441a      	add	r2, r3
 800fd88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fd96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	4413      	add	r3, r2
 800fda8:	881b      	ldrh	r3, [r3, #0]
 800fdaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fdac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fdae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d01b      	beq.n	800fdee <USB_ActivateEndpoint+0x57a>
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	4413      	add	r3, r2
 800fdc0:	881b      	ldrh	r3, [r3, #0]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fdc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdcc:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	441a      	add	r2, r3
 800fdd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fdda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fde2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fde6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4413      	add	r3, r2
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fe00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe04:	873b      	strh	r3, [r7, #56]	; 0x38
 800fe06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fe08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fe0c:	873b      	strh	r3, [r7, #56]	; 0x38
 800fe0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fe10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fe14:	873b      	strh	r3, [r7, #56]	; 0x38
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	441a      	add	r2, r3
 800fe20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fe22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	4413      	add	r3, r2
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	441a      	add	r2, r3
 800fe58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	8013      	strh	r3, [r2, #0]
 800fe6e:	e0bc      	b.n	800ffea <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4413      	add	r3, r2
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800fe80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d01d      	beq.n	800fec8 <USB_ActivateEndpoint+0x654>
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4413      	add	r3, r2
 800fe96:	881b      	ldrh	r3, [r3, #0]
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fea2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	441a      	add	r2, r3
 800feb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800feb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800feb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800febc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	4413      	add	r3, r2
 800fed2:	881b      	ldrh	r3, [r3, #0]
 800fed4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800fed8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800fedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d01d      	beq.n	800ff20 <USB_ActivateEndpoint+0x6ac>
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	4413      	add	r3, r2
 800feee:	881b      	ldrh	r3, [r3, #0]
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fefa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	441a      	add	r2, r3
 800ff08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ff0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	78db      	ldrb	r3, [r3, #3]
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	d024      	beq.n	800ff72 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	4413      	add	r3, r2
 800ff32:	881b      	ldrh	r3, [r3, #0]
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ff42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ff46:	f083 0320 	eor.w	r3, r3, #32
 800ff4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	441a      	add	r2, r3
 800ff58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ff5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	8013      	strh	r3, [r2, #0]
 800ff70:	e01d      	b.n	800ffae <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	009b      	lsls	r3, r3, #2
 800ff7a:	4413      	add	r3, r2
 800ff7c:	881b      	ldrh	r3, [r3, #0]
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	441a      	add	r2, r3
 800ff96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ff9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ffc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	441a      	add	r2, r3
 800ffd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ffd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ffea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3774      	adds	r7, #116	; 0x74
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop

0800fffc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b08d      	sub	sp, #52	; 0x34
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	7b1b      	ldrb	r3, [r3, #12]
 801000a:	2b00      	cmp	r3, #0
 801000c:	f040 808e 	bne.w	801012c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	785b      	ldrb	r3, [r3, #1]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d044      	beq.n	80100a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	4413      	add	r3, r2
 8010022:	881b      	ldrh	r3, [r3, #0]
 8010024:	81bb      	strh	r3, [r7, #12]
 8010026:	89bb      	ldrh	r3, [r7, #12]
 8010028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801002c:	2b00      	cmp	r3, #0
 801002e:	d01b      	beq.n	8010068 <USB_DeactivateEndpoint+0x6c>
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4413      	add	r3, r2
 801003a:	881b      	ldrh	r3, [r3, #0]
 801003c:	b29b      	uxth	r3, r3
 801003e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010046:	817b      	strh	r3, [r7, #10]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	009b      	lsls	r3, r3, #2
 8010050:	441a      	add	r2, r3
 8010052:	897b      	ldrh	r3, [r7, #10]
 8010054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801005c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010064:	b29b      	uxth	r3, r3
 8010066:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	4413      	add	r3, r2
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	b29b      	uxth	r3, r3
 8010076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801007a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801007e:	813b      	strh	r3, [r7, #8]
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	441a      	add	r2, r3
 801008a:	893b      	ldrh	r3, [r7, #8]
 801008c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801009c:	b29b      	uxth	r3, r3
 801009e:	8013      	strh	r3, [r2, #0]
 80100a0:	e192      	b.n	80103c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	009b      	lsls	r3, r3, #2
 80100aa:	4413      	add	r3, r2
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	827b      	strh	r3, [r7, #18]
 80100b0:	8a7b      	ldrh	r3, [r7, #18]
 80100b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d01b      	beq.n	80100f2 <USB_DeactivateEndpoint+0xf6>
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	4413      	add	r3, r2
 80100c4:	881b      	ldrh	r3, [r3, #0]
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100d0:	823b      	strh	r3, [r7, #16]
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	009b      	lsls	r3, r3, #2
 80100da:	441a      	add	r2, r3
 80100dc:	8a3b      	ldrh	r3, [r7, #16]
 80100de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80100ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	009b      	lsls	r3, r3, #2
 80100fa:	4413      	add	r3, r2
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	b29b      	uxth	r3, r3
 8010100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010108:	81fb      	strh	r3, [r7, #14]
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	441a      	add	r2, r3
 8010114:	89fb      	ldrh	r3, [r7, #14]
 8010116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801011a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801011e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010126:	b29b      	uxth	r3, r3
 8010128:	8013      	strh	r3, [r2, #0]
 801012a:	e14d      	b.n	80103c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	785b      	ldrb	r3, [r3, #1]
 8010130:	2b00      	cmp	r3, #0
 8010132:	f040 80a5 	bne.w	8010280 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	4413      	add	r3, r2
 8010140:	881b      	ldrh	r3, [r3, #0]
 8010142:	843b      	strh	r3, [r7, #32]
 8010144:	8c3b      	ldrh	r3, [r7, #32]
 8010146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801014a:	2b00      	cmp	r3, #0
 801014c:	d01b      	beq.n	8010186 <USB_DeactivateEndpoint+0x18a>
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	4413      	add	r3, r2
 8010158:	881b      	ldrh	r3, [r3, #0]
 801015a:	b29b      	uxth	r3, r3
 801015c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010164:	83fb      	strh	r3, [r7, #30]
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	441a      	add	r2, r3
 8010170:	8bfb      	ldrh	r3, [r7, #30]
 8010172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801017a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801017e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010182:	b29b      	uxth	r3, r3
 8010184:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	4413      	add	r3, r2
 8010190:	881b      	ldrh	r3, [r3, #0]
 8010192:	83bb      	strh	r3, [r7, #28]
 8010194:	8bbb      	ldrh	r3, [r7, #28]
 8010196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801019a:	2b00      	cmp	r3, #0
 801019c:	d01b      	beq.n	80101d6 <USB_DeactivateEndpoint+0x1da>
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	4413      	add	r3, r2
 80101a8:	881b      	ldrh	r3, [r3, #0]
 80101aa:	b29b      	uxth	r3, r3
 80101ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80101b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101b4:	837b      	strh	r3, [r7, #26]
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	441a      	add	r2, r3
 80101c0:	8b7b      	ldrh	r3, [r7, #26]
 80101c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	009b      	lsls	r3, r3, #2
 80101de:	4413      	add	r3, r2
 80101e0:	881b      	ldrh	r3, [r3, #0]
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80101e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101ec:	833b      	strh	r3, [r7, #24]
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	441a      	add	r2, r3
 80101f8:	8b3b      	ldrh	r3, [r7, #24]
 80101fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801020a:	b29b      	uxth	r3, r3
 801020c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	4413      	add	r3, r2
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	b29b      	uxth	r3, r3
 801021c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010224:	82fb      	strh	r3, [r7, #22]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	009b      	lsls	r3, r3, #2
 801022e:	441a      	add	r2, r3
 8010230:	8afb      	ldrh	r3, [r7, #22]
 8010232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801023a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801023e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010242:	b29b      	uxth	r3, r3
 8010244:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	4413      	add	r3, r2
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	b29b      	uxth	r3, r3
 8010254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801025c:	82bb      	strh	r3, [r7, #20]
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	441a      	add	r2, r3
 8010268:	8abb      	ldrh	r3, [r7, #20]
 801026a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801026e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801027a:	b29b      	uxth	r3, r3
 801027c:	8013      	strh	r3, [r2, #0]
 801027e:	e0a3      	b.n	80103c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4413      	add	r3, r2
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801028e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010294:	2b00      	cmp	r3, #0
 8010296:	d01b      	beq.n	80102d0 <USB_DeactivateEndpoint+0x2d4>
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	4413      	add	r3, r2
 80102a2:	881b      	ldrh	r3, [r3, #0]
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80102b0:	687a      	ldr	r2, [r7, #4]
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	441a      	add	r2, r3
 80102ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80102bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80102c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	4413      	add	r3, r2
 80102da:	881b      	ldrh	r3, [r3, #0]
 80102dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80102de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80102e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d01b      	beq.n	8010320 <USB_DeactivateEndpoint+0x324>
 80102e8:	687a      	ldr	r2, [r7, #4]
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	4413      	add	r3, r2
 80102f2:	881b      	ldrh	r3, [r3, #0]
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	441a      	add	r2, r3
 801030a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801030c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010318:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801031c:	b29b      	uxth	r3, r3
 801031e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	4413      	add	r3, r2
 801032a:	881b      	ldrh	r3, [r3, #0]
 801032c:	b29b      	uxth	r3, r3
 801032e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010336:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	009b      	lsls	r3, r3, #2
 8010340:	441a      	add	r2, r3
 8010342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801034c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010354:	b29b      	uxth	r3, r3
 8010356:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	4413      	add	r3, r2
 8010362:	881b      	ldrh	r3, [r3, #0]
 8010364:	b29b      	uxth	r3, r3
 8010366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801036a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801036e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	009b      	lsls	r3, r3, #2
 8010378:	441a      	add	r2, r3
 801037a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801037c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801038c:	b29b      	uxth	r3, r3
 801038e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	009b      	lsls	r3, r3, #2
 8010398:	4413      	add	r3, r2
 801039a:	881b      	ldrh	r3, [r3, #0]
 801039c:	b29b      	uxth	r3, r3
 801039e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80103a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	441a      	add	r2, r3
 80103b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3734      	adds	r7, #52	; 0x34
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr

080103d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b0c2      	sub	sp, #264	; 0x108
 80103da:	af00      	add	r7, sp, #0
 80103dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103e4:	6018      	str	r0, [r3, #0]
 80103e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80103f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	785b      	ldrb	r3, [r3, #1]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	f040 86b7 	bne.w	8011170 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	699a      	ldr	r2, [r3, #24]
 801040e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	691b      	ldr	r3, [r3, #16]
 801041a:	429a      	cmp	r2, r3
 801041c:	d908      	bls.n	8010430 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 801041e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	691b      	ldr	r3, [r3, #16]
 801042a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801042e:	e007      	b.n	8010440 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	699b      	ldr	r3, [r3, #24]
 801043c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	7b1b      	ldrb	r3, [r3, #12]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d13a      	bne.n	80104c6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	6959      	ldr	r1, [r3, #20]
 801045c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	88da      	ldrh	r2, [r3, #6]
 8010468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801046c:	b29b      	uxth	r3, r3
 801046e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010472:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010476:	6800      	ldr	r0, [r0, #0]
 8010478:	f001 fc98 	bl	8011dac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801047c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	613b      	str	r3, [r7, #16]
 8010488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801048c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010496:	b29b      	uxth	r3, r3
 8010498:	461a      	mov	r2, r3
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	4413      	add	r3, r2
 801049e:	613b      	str	r3, [r7, #16]
 80104a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	00da      	lsls	r2, r3, #3
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	4413      	add	r3, r2
 80104b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80104b6:	60fb      	str	r3, [r7, #12]
 80104b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104bc:	b29a      	uxth	r2, r3
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	801a      	strh	r2, [r3, #0]
 80104c2:	f000 be1f 	b.w	8011104 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80104c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	78db      	ldrb	r3, [r3, #3]
 80104d2:	2b02      	cmp	r3, #2
 80104d4:	f040 8462 	bne.w	8010d9c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80104d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	6a1a      	ldr	r2, [r3, #32]
 80104e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	691b      	ldr	r3, [r3, #16]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	f240 83df 	bls.w	8010cb4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80104f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	4413      	add	r3, r2
 8010510:	881b      	ldrh	r3, [r3, #0]
 8010512:	b29b      	uxth	r3, r3
 8010514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801051c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8010520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801052e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	441a      	add	r2, r3
 801053a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801053e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010546:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801054a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801054e:	b29b      	uxth	r3, r3
 8010550:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	6a1a      	ldr	r2, [r3, #32]
 801055e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010562:	1ad2      	subs	r2, r2, r3
 8010564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801057e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	4413      	add	r3, r2
 801058a:	881b      	ldrh	r3, [r3, #0]
 801058c:	b29b      	uxth	r3, r3
 801058e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010592:	2b00      	cmp	r3, #0
 8010594:	f000 81c7 	beq.w	8010926 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801059c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	633b      	str	r3, [r7, #48]	; 0x30
 80105a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	785b      	ldrb	r3, [r3, #1]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d177      	bne.n	80106a4 <USB_EPStartXfer+0x2ce>
 80105b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	62bb      	str	r3, [r7, #40]	; 0x28
 80105c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	461a      	mov	r2, r3
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	4413      	add	r3, r2
 80105d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80105d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	00da      	lsls	r2, r3, #3
 80105e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e8:	4413      	add	r3, r2
 80105ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80105ee:	627b      	str	r3, [r7, #36]	; 0x24
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	881b      	ldrh	r3, [r3, #0]
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fe:	801a      	strh	r2, [r3, #0]
 8010600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010604:	2b3e      	cmp	r3, #62	; 0x3e
 8010606:	d921      	bls.n	801064c <USB_EPStartXfer+0x276>
 8010608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801060c:	095b      	lsrs	r3, r3, #5
 801060e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010616:	f003 031f 	and.w	r3, r3, #31
 801061a:	2b00      	cmp	r3, #0
 801061c:	d104      	bne.n	8010628 <USB_EPStartXfer+0x252>
 801061e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010622:	3b01      	subs	r3, #1
 8010624:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062a:	881b      	ldrh	r3, [r3, #0]
 801062c:	b29a      	uxth	r2, r3
 801062e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010632:	b29b      	uxth	r3, r3
 8010634:	029b      	lsls	r3, r3, #10
 8010636:	b29b      	uxth	r3, r3
 8010638:	4313      	orrs	r3, r2
 801063a:	b29b      	uxth	r3, r3
 801063c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010644:	b29a      	uxth	r2, r3
 8010646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010648:	801a      	strh	r2, [r3, #0]
 801064a:	e050      	b.n	80106ee <USB_EPStartXfer+0x318>
 801064c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10a      	bne.n	801066a <USB_EPStartXfer+0x294>
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	881b      	ldrh	r3, [r3, #0]
 8010658:	b29b      	uxth	r3, r3
 801065a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801065e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010662:	b29a      	uxth	r2, r3
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	801a      	strh	r2, [r3, #0]
 8010668:	e041      	b.n	80106ee <USB_EPStartXfer+0x318>
 801066a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801066e:	085b      	lsrs	r3, r3, #1
 8010670:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010678:	f003 0301 	and.w	r3, r3, #1
 801067c:	2b00      	cmp	r3, #0
 801067e:	d004      	beq.n	801068a <USB_EPStartXfer+0x2b4>
 8010680:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010684:	3301      	adds	r3, #1
 8010686:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	b29a      	uxth	r2, r3
 8010690:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010694:	b29b      	uxth	r3, r3
 8010696:	029b      	lsls	r3, r3, #10
 8010698:	b29b      	uxth	r3, r3
 801069a:	4313      	orrs	r3, r2
 801069c:	b29a      	uxth	r2, r3
 801069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a0:	801a      	strh	r2, [r3, #0]
 80106a2:	e024      	b.n	80106ee <USB_EPStartXfer+0x318>
 80106a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	785b      	ldrb	r3, [r3, #1]
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d11c      	bne.n	80106ee <USB_EPStartXfer+0x318>
 80106b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	461a      	mov	r2, r3
 80106c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c8:	4413      	add	r3, r2
 80106ca:	633b      	str	r3, [r7, #48]	; 0x30
 80106cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	00da      	lsls	r2, r3, #3
 80106da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106dc:	4413      	add	r3, r2
 80106de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80106e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80106ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	895b      	ldrh	r3, [r3, #10]
 80106fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80106fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	6959      	ldr	r1, [r3, #20]
 801070a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801070e:	b29b      	uxth	r3, r3
 8010710:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010714:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010718:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801071c:	6800      	ldr	r0, [r0, #0]
 801071e:	f001 fb45 	bl	8011dac <USB_WritePMA>
            ep->xfer_buff += len;
 8010722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	695a      	ldr	r2, [r3, #20]
 801072e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010732:	441a      	add	r2, r3
 8010734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	6a1a      	ldr	r2, [r3, #32]
 801074c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	691b      	ldr	r3, [r3, #16]
 8010758:	429a      	cmp	r2, r3
 801075a:	d90f      	bls.n	801077c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 801075c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	6a1a      	ldr	r2, [r3, #32]
 8010768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801076c:	1ad2      	subs	r2, r2, r3
 801076e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	621a      	str	r2, [r3, #32]
 801077a:	e00e      	b.n	801079a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 801077c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	6a1b      	ldr	r3, [r3, #32]
 8010788:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801078c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2200      	movs	r2, #0
 8010798:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801079a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801079e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	785b      	ldrb	r3, [r3, #1]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d177      	bne.n	801089a <USB_EPStartXfer+0x4c4>
 80107aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	61bb      	str	r3, [r7, #24]
 80107b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	461a      	mov	r2, r3
 80107c8:	69bb      	ldr	r3, [r7, #24]
 80107ca:	4413      	add	r3, r2
 80107cc:	61bb      	str	r3, [r7, #24]
 80107ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	00da      	lsls	r2, r3, #3
 80107dc:	69bb      	ldr	r3, [r7, #24]
 80107de:	4413      	add	r3, r2
 80107e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80107e4:	617b      	str	r3, [r7, #20]
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	881b      	ldrh	r3, [r3, #0]
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80107f0:	b29a      	uxth	r2, r3
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	801a      	strh	r2, [r3, #0]
 80107f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107fa:	2b3e      	cmp	r3, #62	; 0x3e
 80107fc:	d921      	bls.n	8010842 <USB_EPStartXfer+0x46c>
 80107fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010802:	095b      	lsrs	r3, r3, #5
 8010804:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801080c:	f003 031f 	and.w	r3, r3, #31
 8010810:	2b00      	cmp	r3, #0
 8010812:	d104      	bne.n	801081e <USB_EPStartXfer+0x448>
 8010814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010818:	3b01      	subs	r3, #1
 801081a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	881b      	ldrh	r3, [r3, #0]
 8010822:	b29a      	uxth	r2, r3
 8010824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010828:	b29b      	uxth	r3, r3
 801082a:	029b      	lsls	r3, r3, #10
 801082c:	b29b      	uxth	r3, r3
 801082e:	4313      	orrs	r3, r2
 8010830:	b29b      	uxth	r3, r3
 8010832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801083a:	b29a      	uxth	r2, r3
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	801a      	strh	r2, [r3, #0]
 8010840:	e056      	b.n	80108f0 <USB_EPStartXfer+0x51a>
 8010842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010846:	2b00      	cmp	r3, #0
 8010848:	d10a      	bne.n	8010860 <USB_EPStartXfer+0x48a>
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	881b      	ldrh	r3, [r3, #0]
 801084e:	b29b      	uxth	r3, r3
 8010850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010858:	b29a      	uxth	r2, r3
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	801a      	strh	r2, [r3, #0]
 801085e:	e047      	b.n	80108f0 <USB_EPStartXfer+0x51a>
 8010860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010864:	085b      	lsrs	r3, r3, #1
 8010866:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801086a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801086e:	f003 0301 	and.w	r3, r3, #1
 8010872:	2b00      	cmp	r3, #0
 8010874:	d004      	beq.n	8010880 <USB_EPStartXfer+0x4aa>
 8010876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801087a:	3301      	adds	r3, #1
 801087c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	881b      	ldrh	r3, [r3, #0]
 8010884:	b29a      	uxth	r2, r3
 8010886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801088a:	b29b      	uxth	r3, r3
 801088c:	029b      	lsls	r3, r3, #10
 801088e:	b29b      	uxth	r3, r3
 8010890:	4313      	orrs	r3, r2
 8010892:	b29a      	uxth	r2, r3
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	801a      	strh	r2, [r3, #0]
 8010898:	e02a      	b.n	80108f0 <USB_EPStartXfer+0x51a>
 801089a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801089e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	785b      	ldrb	r3, [r3, #1]
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d122      	bne.n	80108f0 <USB_EPStartXfer+0x51a>
 80108aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	623b      	str	r3, [r7, #32]
 80108b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	461a      	mov	r2, r3
 80108c8:	6a3b      	ldr	r3, [r7, #32]
 80108ca:	4413      	add	r3, r2
 80108cc:	623b      	str	r3, [r7, #32]
 80108ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	00da      	lsls	r2, r3, #3
 80108dc:	6a3b      	ldr	r3, [r7, #32]
 80108de:	4413      	add	r3, r2
 80108e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80108e4:	61fb      	str	r3, [r7, #28]
 80108e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80108f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	891b      	ldrh	r3, [r3, #8]
 80108fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	6959      	ldr	r1, [r3, #20]
 801090c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010910:	b29b      	uxth	r3, r3
 8010912:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010916:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801091a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801091e:	6800      	ldr	r0, [r0, #0]
 8010920:	f001 fa44 	bl	8011dac <USB_WritePMA>
 8010924:	e3ee      	b.n	8011104 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801092a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	785b      	ldrb	r3, [r3, #1]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d177      	bne.n	8010a26 <USB_EPStartXfer+0x650>
 8010936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801093a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	64bb      	str	r3, [r7, #72]	; 0x48
 8010942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010950:	b29b      	uxth	r3, r3
 8010952:	461a      	mov	r2, r3
 8010954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010956:	4413      	add	r3, r2
 8010958:	64bb      	str	r3, [r7, #72]	; 0x48
 801095a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801095e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	00da      	lsls	r2, r3, #3
 8010968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801096a:	4413      	add	r3, r2
 801096c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010970:	647b      	str	r3, [r7, #68]	; 0x44
 8010972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010974:	881b      	ldrh	r3, [r3, #0]
 8010976:	b29b      	uxth	r3, r3
 8010978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801097c:	b29a      	uxth	r2, r3
 801097e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010980:	801a      	strh	r2, [r3, #0]
 8010982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010986:	2b3e      	cmp	r3, #62	; 0x3e
 8010988:	d921      	bls.n	80109ce <USB_EPStartXfer+0x5f8>
 801098a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801098e:	095b      	lsrs	r3, r3, #5
 8010990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010998:	f003 031f 	and.w	r3, r3, #31
 801099c:	2b00      	cmp	r3, #0
 801099e:	d104      	bne.n	80109aa <USB_EPStartXfer+0x5d4>
 80109a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80109a4:	3b01      	subs	r3, #1
 80109a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80109aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ac:	881b      	ldrh	r3, [r3, #0]
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	029b      	lsls	r3, r3, #10
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	4313      	orrs	r3, r2
 80109bc:	b29b      	uxth	r3, r3
 80109be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ca:	801a      	strh	r2, [r3, #0]
 80109cc:	e056      	b.n	8010a7c <USB_EPStartXfer+0x6a6>
 80109ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d10a      	bne.n	80109ec <USB_EPStartXfer+0x616>
 80109d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109d8:	881b      	ldrh	r3, [r3, #0]
 80109da:	b29b      	uxth	r3, r3
 80109dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109e8:	801a      	strh	r2, [r3, #0]
 80109ea:	e047      	b.n	8010a7c <USB_EPStartXfer+0x6a6>
 80109ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109f0:	085b      	lsrs	r3, r3, #1
 80109f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80109f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109fa:	f003 0301 	and.w	r3, r3, #1
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d004      	beq.n	8010a0c <USB_EPStartXfer+0x636>
 8010a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010a06:	3301      	adds	r3, #1
 8010a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a0e:	881b      	ldrh	r3, [r3, #0]
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	029b      	lsls	r3, r3, #10
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	4313      	orrs	r3, r2
 8010a1e:	b29a      	uxth	r2, r3
 8010a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a22:	801a      	strh	r2, [r3, #0]
 8010a24:	e02a      	b.n	8010a7c <USB_EPStartXfer+0x6a6>
 8010a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	785b      	ldrb	r3, [r3, #1]
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	d122      	bne.n	8010a7c <USB_EPStartXfer+0x6a6>
 8010a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	653b      	str	r3, [r7, #80]	; 0x50
 8010a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	461a      	mov	r2, r3
 8010a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a56:	4413      	add	r3, r2
 8010a58:	653b      	str	r3, [r7, #80]	; 0x50
 8010a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	00da      	lsls	r2, r3, #3
 8010a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a6a:	4413      	add	r3, r2
 8010a6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a76:	b29a      	uxth	r2, r3
 8010a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	891b      	ldrh	r3, [r3, #8]
 8010a88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	6959      	ldr	r1, [r3, #20]
 8010a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010aa2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010aa6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010aaa:	6800      	ldr	r0, [r0, #0]
 8010aac:	f001 f97e 	bl	8011dac <USB_WritePMA>
            ep->xfer_buff += len;
 8010ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	695a      	ldr	r2, [r3, #20]
 8010abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ac0:	441a      	add	r2, r3
 8010ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	6a1a      	ldr	r2, [r3, #32]
 8010ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	691b      	ldr	r3, [r3, #16]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d90f      	bls.n	8010b0a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	6a1a      	ldr	r2, [r3, #32]
 8010af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010afa:	1ad2      	subs	r2, r2, r3
 8010afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	621a      	str	r2, [r3, #32]
 8010b08:	e00e      	b.n	8010b28 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	6a1b      	ldr	r3, [r3, #32]
 8010b16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	2200      	movs	r2, #0
 8010b26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	643b      	str	r3, [r7, #64]	; 0x40
 8010b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	785b      	ldrb	r3, [r3, #1]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d177      	bne.n	8010c34 <USB_EPStartXfer+0x85e>
 8010b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b5e:	b29b      	uxth	r3, r3
 8010b60:	461a      	mov	r2, r3
 8010b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b64:	4413      	add	r3, r2
 8010b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	00da      	lsls	r2, r3, #3
 8010b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b78:	4413      	add	r3, r2
 8010b7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8010b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b82:	881b      	ldrh	r3, [r3, #0]
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b8e:	801a      	strh	r2, [r3, #0]
 8010b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b94:	2b3e      	cmp	r3, #62	; 0x3e
 8010b96:	d921      	bls.n	8010bdc <USB_EPStartXfer+0x806>
 8010b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b9c:	095b      	lsrs	r3, r3, #5
 8010b9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ba6:	f003 031f 	and.w	r3, r3, #31
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d104      	bne.n	8010bb8 <USB_EPStartXfer+0x7e2>
 8010bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bba:	881b      	ldrh	r3, [r3, #0]
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	029b      	lsls	r3, r3, #10
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	4313      	orrs	r3, r2
 8010bca:	b29b      	uxth	r3, r3
 8010bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bd4:	b29a      	uxth	r2, r3
 8010bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd8:	801a      	strh	r2, [r3, #0]
 8010bda:	e050      	b.n	8010c7e <USB_EPStartXfer+0x8a8>
 8010bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d10a      	bne.n	8010bfa <USB_EPStartXfer+0x824>
 8010be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf6:	801a      	strh	r2, [r3, #0]
 8010bf8:	e041      	b.n	8010c7e <USB_EPStartXfer+0x8a8>
 8010bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bfe:	085b      	lsrs	r3, r3, #1
 8010c00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c08:	f003 0301 	and.w	r3, r3, #1
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d004      	beq.n	8010c1a <USB_EPStartXfer+0x844>
 8010c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c14:	3301      	adds	r3, #1
 8010c16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c1c:	881b      	ldrh	r3, [r3, #0]
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	029b      	lsls	r3, r3, #10
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c30:	801a      	strh	r2, [r3, #0]
 8010c32:	e024      	b.n	8010c7e <USB_EPStartXfer+0x8a8>
 8010c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	785b      	ldrb	r3, [r3, #1]
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	d11c      	bne.n	8010c7e <USB_EPStartXfer+0x8a8>
 8010c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	461a      	mov	r2, r3
 8010c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c58:	4413      	add	r3, r2
 8010c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8010c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	00da      	lsls	r2, r3, #3
 8010c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c6c:	4413      	add	r3, r2
 8010c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	895b      	ldrh	r3, [r3, #10]
 8010c8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	6959      	ldr	r1, [r3, #20]
 8010c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010ca4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010ca8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010cac:	6800      	ldr	r0, [r0, #0]
 8010cae:	f001 f87d 	bl	8011dac <USB_WritePMA>
 8010cb2:	e227      	b.n	8011104 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	6a1b      	ldr	r3, [r3, #32]
 8010cc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	4413      	add	r3, r2
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cf6:	681a      	ldr	r2, [r3, #0]
 8010cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	441a      	add	r2, r3
 8010d08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d40:	4413      	add	r3, r2
 8010d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	00da      	lsls	r2, r3, #3
 8010d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d54:	4413      	add	r3, r2
 8010d56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d60:	b29a      	uxth	r2, r3
 8010d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	891b      	ldrh	r3, [r3, #8]
 8010d72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	6959      	ldr	r1, [r3, #20]
 8010d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010d8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010d90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010d94:	6800      	ldr	r0, [r0, #0]
 8010d96:	f001 f809 	bl	8011dac <USB_WritePMA>
 8010d9a:	e1b3      	b.n	8011104 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	6a1a      	ldr	r2, [r3, #32]
 8010da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dac:	1ad2      	subs	r2, r2, r3
 8010dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	4413      	add	r3, r2
 8010dd4:	881b      	ldrh	r3, [r3, #0]
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	f000 80c6 	beq.w	8010f6e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	673b      	str	r3, [r7, #112]	; 0x70
 8010dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	785b      	ldrb	r3, [r3, #1]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d177      	bne.n	8010eee <USB_EPStartXfer+0xb18>
 8010dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8010e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010e1e:	4413      	add	r3, r2
 8010e20:	66bb      	str	r3, [r7, #104]	; 0x68
 8010e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	00da      	lsls	r2, r3, #3
 8010e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010e32:	4413      	add	r3, r2
 8010e34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010e38:	667b      	str	r3, [r7, #100]	; 0x64
 8010e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e3c:	881b      	ldrh	r3, [r3, #0]
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e48:	801a      	strh	r2, [r3, #0]
 8010e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8010e50:	d921      	bls.n	8010e96 <USB_EPStartXfer+0xac0>
 8010e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e56:	095b      	lsrs	r3, r3, #5
 8010e58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e60:	f003 031f 	and.w	r3, r3, #31
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d104      	bne.n	8010e72 <USB_EPStartXfer+0xa9c>
 8010e68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e74:	881b      	ldrh	r3, [r3, #0]
 8010e76:	b29a      	uxth	r2, r3
 8010e78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	029b      	lsls	r3, r3, #10
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	4313      	orrs	r3, r2
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e92:	801a      	strh	r2, [r3, #0]
 8010e94:	e050      	b.n	8010f38 <USB_EPStartXfer+0xb62>
 8010e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d10a      	bne.n	8010eb4 <USB_EPStartXfer+0xade>
 8010e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ea0:	881b      	ldrh	r3, [r3, #0]
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eb0:	801a      	strh	r2, [r3, #0]
 8010eb2:	e041      	b.n	8010f38 <USB_EPStartXfer+0xb62>
 8010eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010eb8:	085b      	lsrs	r3, r3, #1
 8010eba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ec2:	f003 0301 	and.w	r3, r3, #1
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d004      	beq.n	8010ed4 <USB_EPStartXfer+0xafe>
 8010eca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010ece:	3301      	adds	r3, #1
 8010ed0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ed6:	881b      	ldrh	r3, [r3, #0]
 8010ed8:	b29a      	uxth	r2, r3
 8010eda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	029b      	lsls	r3, r3, #10
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	4313      	orrs	r3, r2
 8010ee6:	b29a      	uxth	r2, r3
 8010ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eea:	801a      	strh	r2, [r3, #0]
 8010eec:	e024      	b.n	8010f38 <USB_EPStartXfer+0xb62>
 8010eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	785b      	ldrb	r3, [r3, #1]
 8010efa:	2b01      	cmp	r3, #1
 8010efc:	d11c      	bne.n	8010f38 <USB_EPStartXfer+0xb62>
 8010efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	461a      	mov	r2, r3
 8010f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f12:	4413      	add	r3, r2
 8010f14:	673b      	str	r3, [r7, #112]	; 0x70
 8010f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	00da      	lsls	r2, r3, #3
 8010f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f26:	4413      	add	r3, r2
 8010f28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8010f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	895b      	ldrh	r3, [r3, #10]
 8010f44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	6959      	ldr	r1, [r3, #20]
 8010f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010f5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010f62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010f66:	6800      	ldr	r0, [r0, #0]
 8010f68:	f000 ff20 	bl	8011dac <USB_WritePMA>
 8010f6c:	e0ca      	b.n	8011104 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	785b      	ldrb	r3, [r3, #1]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d177      	bne.n	801106e <USB_EPStartXfer+0xc98>
 8010f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f9e:	4413      	add	r3, r2
 8010fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	00da      	lsls	r2, r3, #3
 8010fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010fb2:	4413      	add	r3, r2
 8010fb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8010fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010fbc:	881b      	ldrh	r3, [r3, #0]
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010fc8:	801a      	strh	r2, [r3, #0]
 8010fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fce:	2b3e      	cmp	r3, #62	; 0x3e
 8010fd0:	d921      	bls.n	8011016 <USB_EPStartXfer+0xc40>
 8010fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fd6:	095b      	lsrs	r3, r3, #5
 8010fd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fe0:	f003 031f 	and.w	r3, r3, #31
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d104      	bne.n	8010ff2 <USB_EPStartXfer+0xc1c>
 8010fe8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010fec:	3b01      	subs	r3, #1
 8010fee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ff4:	881b      	ldrh	r3, [r3, #0]
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	029b      	lsls	r3, r3, #10
 8011000:	b29b      	uxth	r3, r3
 8011002:	4313      	orrs	r3, r2
 8011004:	b29b      	uxth	r3, r3
 8011006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801100a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801100e:	b29a      	uxth	r2, r3
 8011010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011012:	801a      	strh	r2, [r3, #0]
 8011014:	e05c      	b.n	80110d0 <USB_EPStartXfer+0xcfa>
 8011016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801101a:	2b00      	cmp	r3, #0
 801101c:	d10a      	bne.n	8011034 <USB_EPStartXfer+0xc5e>
 801101e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	b29b      	uxth	r3, r3
 8011024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801102c:	b29a      	uxth	r2, r3
 801102e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011030:	801a      	strh	r2, [r3, #0]
 8011032:	e04d      	b.n	80110d0 <USB_EPStartXfer+0xcfa>
 8011034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011038:	085b      	lsrs	r3, r3, #1
 801103a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801103e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011042:	f003 0301 	and.w	r3, r3, #1
 8011046:	2b00      	cmp	r3, #0
 8011048:	d004      	beq.n	8011054 <USB_EPStartXfer+0xc7e>
 801104a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801104e:	3301      	adds	r3, #1
 8011050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011056:	881b      	ldrh	r3, [r3, #0]
 8011058:	b29a      	uxth	r2, r3
 801105a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801105e:	b29b      	uxth	r3, r3
 8011060:	029b      	lsls	r3, r3, #10
 8011062:	b29b      	uxth	r3, r3
 8011064:	4313      	orrs	r3, r2
 8011066:	b29a      	uxth	r2, r3
 8011068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801106a:	801a      	strh	r2, [r3, #0]
 801106c:	e030      	b.n	80110d0 <USB_EPStartXfer+0xcfa>
 801106e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	785b      	ldrb	r3, [r3, #1]
 801107a:	2b01      	cmp	r3, #1
 801107c:	d128      	bne.n	80110d0 <USB_EPStartXfer+0xcfa>
 801107e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801108c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801109a:	b29b      	uxth	r3, r3
 801109c:	461a      	mov	r2, r3
 801109e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80110a2:	4413      	add	r3, r2
 80110a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80110a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	00da      	lsls	r2, r3, #3
 80110b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80110ba:	4413      	add	r3, r2
 80110bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80110c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80110c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80110ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80110d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	891b      	ldrh	r3, [r3, #8]
 80110dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80110e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	6959      	ldr	r1, [r3, #20]
 80110ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80110f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80110fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80110fe:	6800      	ldr	r0, [r0, #0]
 8011100:	f000 fe54 	bl	8011dac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801110c:	681a      	ldr	r2, [r3, #0]
 801110e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	4413      	add	r3, r2
 801111e:	881b      	ldrh	r3, [r3, #0]
 8011120:	b29b      	uxth	r3, r3
 8011122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801112a:	817b      	strh	r3, [r7, #10]
 801112c:	897b      	ldrh	r3, [r7, #10]
 801112e:	f083 0310 	eor.w	r3, r3, #16
 8011132:	817b      	strh	r3, [r7, #10]
 8011134:	897b      	ldrh	r3, [r7, #10]
 8011136:	f083 0320 	eor.w	r3, r3, #32
 801113a:	817b      	strh	r3, [r7, #10]
 801113c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801114a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	441a      	add	r2, r3
 8011156:	897b      	ldrh	r3, [r7, #10]
 8011158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801115c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011168:	b29b      	uxth	r3, r3
 801116a:	8013      	strh	r3, [r2, #0]
 801116c:	f000 bcde 	b.w	8011b2c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	7b1b      	ldrb	r3, [r3, #12]
 801117c:	2b00      	cmp	r3, #0
 801117e:	f040 80bb 	bne.w	80112f8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	699a      	ldr	r2, [r3, #24]
 801118e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	691b      	ldr	r3, [r3, #16]
 801119a:	429a      	cmp	r2, r3
 801119c:	d917      	bls.n	80111ce <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 801119e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	691b      	ldr	r3, [r3, #16]
 80111aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80111ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	699a      	ldr	r2, [r3, #24]
 80111ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111be:	1ad2      	subs	r2, r2, r3
 80111c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	619a      	str	r2, [r3, #24]
 80111cc:	e00e      	b.n	80111ec <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80111ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	699b      	ldr	r3, [r3, #24]
 80111da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80111de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2200      	movs	r2, #0
 80111ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80111ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80111fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011208:	b29b      	uxth	r3, r3
 801120a:	461a      	mov	r2, r3
 801120c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011210:	4413      	add	r3, r2
 8011212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801121a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	00da      	lsls	r2, r3, #3
 8011224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011228:	4413      	add	r3, r2
 801122a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801122e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	b29b      	uxth	r3, r3
 801123a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801123e:	b29a      	uxth	r2, r3
 8011240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011244:	801a      	strh	r2, [r3, #0]
 8011246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801124a:	2b3e      	cmp	r3, #62	; 0x3e
 801124c:	d924      	bls.n	8011298 <USB_EPStartXfer+0xec2>
 801124e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011252:	095b      	lsrs	r3, r3, #5
 8011254:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801125c:	f003 031f 	and.w	r3, r3, #31
 8011260:	2b00      	cmp	r3, #0
 8011262:	d104      	bne.n	801126e <USB_EPStartXfer+0xe98>
 8011264:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011268:	3b01      	subs	r3, #1
 801126a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801126e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011272:	881b      	ldrh	r3, [r3, #0]
 8011274:	b29a      	uxth	r2, r3
 8011276:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801127a:	b29b      	uxth	r3, r3
 801127c:	029b      	lsls	r3, r3, #10
 801127e:	b29b      	uxth	r3, r3
 8011280:	4313      	orrs	r3, r2
 8011282:	b29b      	uxth	r3, r3
 8011284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801128c:	b29a      	uxth	r2, r3
 801128e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011292:	801a      	strh	r2, [r3, #0]
 8011294:	f000 bc10 	b.w	8011ab8 <USB_EPStartXfer+0x16e2>
 8011298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801129c:	2b00      	cmp	r3, #0
 801129e:	d10c      	bne.n	80112ba <USB_EPStartXfer+0xee4>
 80112a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112a4:	881b      	ldrh	r3, [r3, #0]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112b0:	b29a      	uxth	r2, r3
 80112b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112b6:	801a      	strh	r2, [r3, #0]
 80112b8:	e3fe      	b.n	8011ab8 <USB_EPStartXfer+0x16e2>
 80112ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112be:	085b      	lsrs	r3, r3, #1
 80112c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80112c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112c8:	f003 0301 	and.w	r3, r3, #1
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d004      	beq.n	80112da <USB_EPStartXfer+0xf04>
 80112d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80112d4:	3301      	adds	r3, #1
 80112d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80112da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112de:	881b      	ldrh	r3, [r3, #0]
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	029b      	lsls	r3, r3, #10
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	4313      	orrs	r3, r2
 80112ee:	b29a      	uxth	r2, r3
 80112f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112f4:	801a      	strh	r2, [r3, #0]
 80112f6:	e3df      	b.n	8011ab8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80112f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	78db      	ldrb	r3, [r3, #3]
 8011304:	2b02      	cmp	r3, #2
 8011306:	f040 8218 	bne.w	801173a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801130a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801130e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	785b      	ldrb	r3, [r3, #1]
 8011316:	2b00      	cmp	r3, #0
 8011318:	f040 809d 	bne.w	8011456 <USB_EPStartXfer+0x1080>
 801131c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801132a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801132e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011338:	b29b      	uxth	r3, r3
 801133a:	461a      	mov	r2, r3
 801133c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011340:	4413      	add	r3, r2
 8011342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801134a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	00da      	lsls	r2, r3, #3
 8011354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011358:	4413      	add	r3, r2
 801135a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801135e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	b29b      	uxth	r3, r3
 801136a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801136e:	b29a      	uxth	r2, r3
 8011370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011374:	801a      	strh	r2, [r3, #0]
 8011376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801137a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	691b      	ldr	r3, [r3, #16]
 8011382:	2b3e      	cmp	r3, #62	; 0x3e
 8011384:	d92b      	bls.n	80113de <USB_EPStartXfer+0x1008>
 8011386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801138a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	691b      	ldr	r3, [r3, #16]
 8011392:	095b      	lsrs	r3, r3, #5
 8011394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801139c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	691b      	ldr	r3, [r3, #16]
 80113a4:	f003 031f 	and.w	r3, r3, #31
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d104      	bne.n	80113b6 <USB_EPStartXfer+0xfe0>
 80113ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113b0:	3b01      	subs	r3, #1
 80113b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80113b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80113ba:	881b      	ldrh	r3, [r3, #0]
 80113bc:	b29a      	uxth	r2, r3
 80113be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	029b      	lsls	r3, r3, #10
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	4313      	orrs	r3, r2
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80113da:	801a      	strh	r2, [r3, #0]
 80113dc:	e070      	b.n	80114c0 <USB_EPStartXfer+0x10ea>
 80113de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	691b      	ldr	r3, [r3, #16]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d10c      	bne.n	8011408 <USB_EPStartXfer+0x1032>
 80113ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113fe:	b29a      	uxth	r2, r3
 8011400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011404:	801a      	strh	r2, [r3, #0]
 8011406:	e05b      	b.n	80114c0 <USB_EPStartXfer+0x10ea>
 8011408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801140c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	691b      	ldr	r3, [r3, #16]
 8011414:	085b      	lsrs	r3, r3, #1
 8011416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801141a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801141e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	691b      	ldr	r3, [r3, #16]
 8011426:	f003 0301 	and.w	r3, r3, #1
 801142a:	2b00      	cmp	r3, #0
 801142c:	d004      	beq.n	8011438 <USB_EPStartXfer+0x1062>
 801142e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011432:	3301      	adds	r3, #1
 8011434:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801143c:	881b      	ldrh	r3, [r3, #0]
 801143e:	b29a      	uxth	r2, r3
 8011440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011444:	b29b      	uxth	r3, r3
 8011446:	029b      	lsls	r3, r3, #10
 8011448:	b29b      	uxth	r3, r3
 801144a:	4313      	orrs	r3, r2
 801144c:	b29a      	uxth	r2, r3
 801144e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011452:	801a      	strh	r2, [r3, #0]
 8011454:	e034      	b.n	80114c0 <USB_EPStartXfer+0x10ea>
 8011456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801145a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	785b      	ldrb	r3, [r3, #1]
 8011462:	2b01      	cmp	r3, #1
 8011464:	d12c      	bne.n	80114c0 <USB_EPStartXfer+0x10ea>
 8011466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801146a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011482:	b29b      	uxth	r3, r3
 8011484:	461a      	mov	r2, r3
 8011486:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801148a:	4413      	add	r3, r2
 801148c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	00da      	lsls	r2, r3, #3
 801149e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80114a2:	4413      	add	r3, r2
 80114a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80114a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80114ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	691b      	ldr	r3, [r3, #16]
 80114b8:	b29a      	uxth	r2, r3
 80114ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80114be:	801a      	strh	r2, [r3, #0]
 80114c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80114ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	785b      	ldrb	r3, [r3, #1]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	f040 809d 	bne.w	801161a <USB_EPStartXfer+0x1244>
 80114e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80114ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	461a      	mov	r2, r3
 8011500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011504:	4413      	add	r3, r2
 8011506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801150a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801150e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	00da      	lsls	r2, r3, #3
 8011518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801151c:	4413      	add	r3, r2
 801151e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011522:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801152a:	881b      	ldrh	r3, [r3, #0]
 801152c:	b29b      	uxth	r3, r3
 801152e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011532:	b29a      	uxth	r2, r3
 8011534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011538:	801a      	strh	r2, [r3, #0]
 801153a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801153e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	691b      	ldr	r3, [r3, #16]
 8011546:	2b3e      	cmp	r3, #62	; 0x3e
 8011548:	d92b      	bls.n	80115a2 <USB_EPStartXfer+0x11cc>
 801154a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801154e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	691b      	ldr	r3, [r3, #16]
 8011556:	095b      	lsrs	r3, r3, #5
 8011558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801155c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	691b      	ldr	r3, [r3, #16]
 8011568:	f003 031f 	and.w	r3, r3, #31
 801156c:	2b00      	cmp	r3, #0
 801156e:	d104      	bne.n	801157a <USB_EPStartXfer+0x11a4>
 8011570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011574:	3b01      	subs	r3, #1
 8011576:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801157a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801157e:	881b      	ldrh	r3, [r3, #0]
 8011580:	b29a      	uxth	r2, r3
 8011582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011586:	b29b      	uxth	r3, r3
 8011588:	029b      	lsls	r3, r3, #10
 801158a:	b29b      	uxth	r3, r3
 801158c:	4313      	orrs	r3, r2
 801158e:	b29b      	uxth	r3, r3
 8011590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011598:	b29a      	uxth	r2, r3
 801159a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801159e:	801a      	strh	r2, [r3, #0]
 80115a0:	e069      	b.n	8011676 <USB_EPStartXfer+0x12a0>
 80115a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d10c      	bne.n	80115cc <USB_EPStartXfer+0x11f6>
 80115b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80115b6:	881b      	ldrh	r3, [r3, #0]
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80115c8:	801a      	strh	r2, [r3, #0]
 80115ca:	e054      	b.n	8011676 <USB_EPStartXfer+0x12a0>
 80115cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	691b      	ldr	r3, [r3, #16]
 80115d8:	085b      	lsrs	r3, r3, #1
 80115da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80115de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	691b      	ldr	r3, [r3, #16]
 80115ea:	f003 0301 	and.w	r3, r3, #1
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d004      	beq.n	80115fc <USB_EPStartXfer+0x1226>
 80115f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80115f6:	3301      	adds	r3, #1
 80115f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80115fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011600:	881b      	ldrh	r3, [r3, #0]
 8011602:	b29a      	uxth	r2, r3
 8011604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011608:	b29b      	uxth	r3, r3
 801160a:	029b      	lsls	r3, r3, #10
 801160c:	b29b      	uxth	r3, r3
 801160e:	4313      	orrs	r3, r2
 8011610:	b29a      	uxth	r2, r3
 8011612:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011616:	801a      	strh	r2, [r3, #0]
 8011618:	e02d      	b.n	8011676 <USB_EPStartXfer+0x12a0>
 801161a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801161e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	785b      	ldrb	r3, [r3, #1]
 8011626:	2b01      	cmp	r3, #1
 8011628:	d125      	bne.n	8011676 <USB_EPStartXfer+0x12a0>
 801162a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801162e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011638:	b29b      	uxth	r3, r3
 801163a:	461a      	mov	r2, r3
 801163c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011640:	4413      	add	r3, r2
 8011642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801164a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	00da      	lsls	r2, r3, #3
 8011654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011658:	4413      	add	r3, r2
 801165a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801165e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	691b      	ldr	r3, [r3, #16]
 801166e:	b29a      	uxth	r2, r3
 8011670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011674:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801167a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	69db      	ldr	r3, [r3, #28]
 8011682:	2b00      	cmp	r3, #0
 8011684:	f000 8218 	beq.w	8011ab8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	4413      	add	r3, r2
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80116a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80116ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d005      	beq.n	80116c0 <USB_EPStartXfer+0x12ea>
 80116b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80116b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d10d      	bne.n	80116dc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80116c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80116c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f040 81f5 	bne.w	8011ab8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80116ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80116d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f040 81ee 	bne.w	8011ab8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80116dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116e4:	681a      	ldr	r2, [r3, #0]
 80116e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4413      	add	r3, r2
 80116f6:	881b      	ldrh	r3, [r3, #0]
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011702:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801170a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	781b      	ldrb	r3, [r3, #0]
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	441a      	add	r2, r3
 8011720:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801172c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011734:	b29b      	uxth	r3, r3
 8011736:	8013      	strh	r3, [r2, #0]
 8011738:	e1be      	b.n	8011ab8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801173a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801173e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	78db      	ldrb	r3, [r3, #3]
 8011746:	2b01      	cmp	r3, #1
 8011748:	f040 81b4 	bne.w	8011ab4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801174c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	699a      	ldr	r2, [r3, #24]
 8011758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801175c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	691b      	ldr	r3, [r3, #16]
 8011764:	429a      	cmp	r2, r3
 8011766:	d917      	bls.n	8011798 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801176c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	691b      	ldr	r3, [r3, #16]
 8011774:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801177c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	699a      	ldr	r2, [r3, #24]
 8011784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011788:	1ad2      	subs	r2, r2, r3
 801178a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801178e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	619a      	str	r2, [r3, #24]
 8011796:	e00e      	b.n	80117b6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801179c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	699b      	ldr	r3, [r3, #24]
 80117a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80117a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	2200      	movs	r2, #0
 80117b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80117b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	785b      	ldrb	r3, [r3, #1]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f040 8085 	bne.w	80118d2 <USB_EPStartXfer+0x14fc>
 80117c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80117d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	461a      	mov	r2, r3
 80117e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80117ec:	4413      	add	r3, r2
 80117ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80117f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	00da      	lsls	r2, r3, #3
 8011800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011804:	4413      	add	r3, r2
 8011806:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801180a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801180e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011812:	881b      	ldrh	r3, [r3, #0]
 8011814:	b29b      	uxth	r3, r3
 8011816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801181a:	b29a      	uxth	r2, r3
 801181c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011820:	801a      	strh	r2, [r3, #0]
 8011822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011826:	2b3e      	cmp	r3, #62	; 0x3e
 8011828:	d923      	bls.n	8011872 <USB_EPStartXfer+0x149c>
 801182a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801182e:	095b      	lsrs	r3, r3, #5
 8011830:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011838:	f003 031f 	and.w	r3, r3, #31
 801183c:	2b00      	cmp	r3, #0
 801183e:	d104      	bne.n	801184a <USB_EPStartXfer+0x1474>
 8011840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011844:	3b01      	subs	r3, #1
 8011846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801184a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801184e:	881b      	ldrh	r3, [r3, #0]
 8011850:	b29a      	uxth	r2, r3
 8011852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011856:	b29b      	uxth	r3, r3
 8011858:	029b      	lsls	r3, r3, #10
 801185a:	b29b      	uxth	r3, r3
 801185c:	4313      	orrs	r3, r2
 801185e:	b29b      	uxth	r3, r3
 8011860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011868:	b29a      	uxth	r2, r3
 801186a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801186e:	801a      	strh	r2, [r3, #0]
 8011870:	e060      	b.n	8011934 <USB_EPStartXfer+0x155e>
 8011872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011876:	2b00      	cmp	r3, #0
 8011878:	d10c      	bne.n	8011894 <USB_EPStartXfer+0x14be>
 801187a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	b29b      	uxth	r3, r3
 8011882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801188a:	b29a      	uxth	r2, r3
 801188c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011890:	801a      	strh	r2, [r3, #0]
 8011892:	e04f      	b.n	8011934 <USB_EPStartXfer+0x155e>
 8011894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011898:	085b      	lsrs	r3, r3, #1
 801189a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801189e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118a2:	f003 0301 	and.w	r3, r3, #1
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d004      	beq.n	80118b4 <USB_EPStartXfer+0x14de>
 80118aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118ae:	3301      	adds	r3, #1
 80118b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80118b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80118b8:	881b      	ldrh	r3, [r3, #0]
 80118ba:	b29a      	uxth	r2, r3
 80118bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	029b      	lsls	r3, r3, #10
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	4313      	orrs	r3, r2
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80118ce:	801a      	strh	r2, [r3, #0]
 80118d0:	e030      	b.n	8011934 <USB_EPStartXfer+0x155e>
 80118d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	785b      	ldrb	r3, [r3, #1]
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d128      	bne.n	8011934 <USB_EPStartXfer+0x155e>
 80118e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80118f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118fe:	b29b      	uxth	r3, r3
 8011900:	461a      	mov	r2, r3
 8011902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011906:	4413      	add	r3, r2
 8011908:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801190c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	781b      	ldrb	r3, [r3, #0]
 8011918:	00da      	lsls	r2, r3, #3
 801191a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801191e:	4413      	add	r3, r2
 8011920:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801192c:	b29a      	uxth	r2, r3
 801192e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011932:	801a      	strh	r2, [r3, #0]
 8011934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	785b      	ldrb	r3, [r3, #1]
 801194e:	2b00      	cmp	r3, #0
 8011950:	f040 8085 	bne.w	8011a5e <USB_EPStartXfer+0x1688>
 8011954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011970:	b29b      	uxth	r3, r3
 8011972:	461a      	mov	r2, r3
 8011974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011978:	4413      	add	r3, r2
 801197a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801197e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	00da      	lsls	r2, r3, #3
 801198c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011990:	4413      	add	r3, r2
 8011992:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801199a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801199e:	881b      	ldrh	r3, [r3, #0]
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80119a6:	b29a      	uxth	r2, r3
 80119a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80119ac:	801a      	strh	r2, [r3, #0]
 80119ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119b2:	2b3e      	cmp	r3, #62	; 0x3e
 80119b4:	d923      	bls.n	80119fe <USB_EPStartXfer+0x1628>
 80119b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119ba:	095b      	lsrs	r3, r3, #5
 80119bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80119c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119c4:	f003 031f 	and.w	r3, r3, #31
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d104      	bne.n	80119d6 <USB_EPStartXfer+0x1600>
 80119cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80119d0:	3b01      	subs	r3, #1
 80119d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80119d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80119da:	881b      	ldrh	r3, [r3, #0]
 80119dc:	b29a      	uxth	r2, r3
 80119de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	029b      	lsls	r3, r3, #10
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	4313      	orrs	r3, r2
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80119fa:	801a      	strh	r2, [r3, #0]
 80119fc:	e05c      	b.n	8011ab8 <USB_EPStartXfer+0x16e2>
 80119fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d10c      	bne.n	8011a20 <USB_EPStartXfer+0x164a>
 8011a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a0a:	881b      	ldrh	r3, [r3, #0]
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a1c:	801a      	strh	r2, [r3, #0]
 8011a1e:	e04b      	b.n	8011ab8 <USB_EPStartXfer+0x16e2>
 8011a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a24:	085b      	lsrs	r3, r3, #1
 8011a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a2e:	f003 0301 	and.w	r3, r3, #1
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d004      	beq.n	8011a40 <USB_EPStartXfer+0x166a>
 8011a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	029b      	lsls	r3, r3, #10
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	4313      	orrs	r3, r2
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a5a:	801a      	strh	r2, [r3, #0]
 8011a5c:	e02c      	b.n	8011ab8 <USB_EPStartXfer+0x16e2>
 8011a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	785b      	ldrb	r3, [r3, #1]
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d124      	bne.n	8011ab8 <USB_EPStartXfer+0x16e2>
 8011a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	461a      	mov	r2, r3
 8011a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011a84:	4413      	add	r3, r2
 8011a86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	00da      	lsls	r2, r3, #3
 8011a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011a9c:	4413      	add	r3, r2
 8011a9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011ab0:	801a      	strh	r2, [r3, #0]
 8011ab2:	e001      	b.n	8011ab8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	e03a      	b.n	8011b2e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4413      	add	r3, r2
 8011ad2:	881b      	ldrh	r3, [r3, #0]
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ade:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011ae2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011ae6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011aea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011aee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011af2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011af6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b02:	681a      	ldr	r2, [r3, #0]
 8011b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	441a      	add	r2, r3
 8011b14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011b2c:	2300      	movs	r3, #0
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	785b      	ldrb	r3, [r3, #1]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d020      	beq.n	8011b8c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	4413      	add	r3, r2
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b60:	81bb      	strh	r3, [r7, #12]
 8011b62:	89bb      	ldrh	r3, [r7, #12]
 8011b64:	f083 0310 	eor.w	r3, r3, #16
 8011b68:	81bb      	strh	r3, [r7, #12]
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	441a      	add	r2, r3
 8011b74:	89bb      	ldrh	r3, [r7, #12]
 8011b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b86:	b29b      	uxth	r3, r3
 8011b88:	8013      	strh	r3, [r2, #0]
 8011b8a:	e01f      	b.n	8011bcc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011b8c:	687a      	ldr	r2, [r7, #4]
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	4413      	add	r3, r2
 8011b96:	881b      	ldrh	r3, [r3, #0]
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ba2:	81fb      	strh	r3, [r7, #14]
 8011ba4:	89fb      	ldrh	r3, [r7, #14]
 8011ba6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011baa:	81fb      	strh	r3, [r7, #14]
 8011bac:	687a      	ldr	r2, [r7, #4]
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	441a      	add	r2, r3
 8011bb6:	89fb      	ldrh	r3, [r7, #14]
 8011bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011bcc:	2300      	movs	r3, #0
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3714      	adds	r7, #20
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr

08011bda <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011bda:	b480      	push	{r7}
 8011bdc:	b087      	sub	sp, #28
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]
 8011be2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	7b1b      	ldrb	r3, [r3, #12]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	f040 809d 	bne.w	8011d28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	785b      	ldrb	r3, [r3, #1]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d04c      	beq.n	8011c90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4413      	add	r3, r2
 8011c00:	881b      	ldrh	r3, [r3, #0]
 8011c02:	823b      	strh	r3, [r7, #16]
 8011c04:	8a3b      	ldrh	r3, [r7, #16]
 8011c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d01b      	beq.n	8011c46 <USB_EPClearStall+0x6c>
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	4413      	add	r3, r2
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c24:	81fb      	strh	r3, [r7, #14]
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	441a      	add	r2, r3
 8011c30:	89fb      	ldrh	r3, [r7, #14]
 8011c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	78db      	ldrb	r3, [r3, #3]
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d06c      	beq.n	8011d28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	009b      	lsls	r3, r3, #2
 8011c56:	4413      	add	r3, r2
 8011c58:	881b      	ldrh	r3, [r3, #0]
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c64:	81bb      	strh	r3, [r7, #12]
 8011c66:	89bb      	ldrh	r3, [r7, #12]
 8011c68:	f083 0320 	eor.w	r3, r3, #32
 8011c6c:	81bb      	strh	r3, [r7, #12]
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	009b      	lsls	r3, r3, #2
 8011c76:	441a      	add	r2, r3
 8011c78:	89bb      	ldrh	r3, [r7, #12]
 8011c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	8013      	strh	r3, [r2, #0]
 8011c8e:	e04b      	b.n	8011d28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c90:	687a      	ldr	r2, [r7, #4]
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	781b      	ldrb	r3, [r3, #0]
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	4413      	add	r3, r2
 8011c9a:	881b      	ldrh	r3, [r3, #0]
 8011c9c:	82fb      	strh	r3, [r7, #22]
 8011c9e:	8afb      	ldrh	r3, [r7, #22]
 8011ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d01b      	beq.n	8011ce0 <USB_EPClearStall+0x106>
 8011ca8:	687a      	ldr	r2, [r7, #4]
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	009b      	lsls	r3, r3, #2
 8011cb0:	4413      	add	r3, r2
 8011cb2:	881b      	ldrh	r3, [r3, #0]
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011cbe:	82bb      	strh	r3, [r7, #20]
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	441a      	add	r2, r3
 8011cca:	8abb      	ldrh	r3, [r7, #20]
 8011ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	4413      	add	r3, r2
 8011cea:	881b      	ldrh	r3, [r3, #0]
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011cf6:	827b      	strh	r3, [r7, #18]
 8011cf8:	8a7b      	ldrh	r3, [r7, #18]
 8011cfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011cfe:	827b      	strh	r3, [r7, #18]
 8011d00:	8a7b      	ldrh	r3, [r7, #18]
 8011d02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011d06:	827b      	strh	r3, [r7, #18]
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	009b      	lsls	r3, r3, #2
 8011d10:	441a      	add	r2, r3
 8011d12:	8a7b      	ldrh	r3, [r7, #18]
 8011d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011d28:	2300      	movs	r3, #0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	371c      	adds	r7, #28
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d34:	4770      	bx	lr

08011d36 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011d36:	b480      	push	{r7}
 8011d38:	b083      	sub	sp, #12
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
 8011d3e:	460b      	mov	r3, r1
 8011d40:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011d42:	78fb      	ldrb	r3, [r7, #3]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d103      	bne.n	8011d50 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2280      	movs	r2, #128	; 0x80
 8011d4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	370c      	adds	r7, #12
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr

08011d5e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011d5e:	b480      	push	{r7}
 8011d60:	b083      	sub	sp, #12
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011d6c:	b29b      	uxth	r3, r3
 8011d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	370c      	adds	r7, #12
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr

08011d8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	b085      	sub	sp, #20
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3714      	adds	r7, #20
 8011da4:	46bd      	mov	sp, r7
 8011da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011daa:	4770      	bx	lr

08011dac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b08b      	sub	sp, #44	; 0x2c
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	60b9      	str	r1, [r7, #8]
 8011db6:	4611      	mov	r1, r2
 8011db8:	461a      	mov	r2, r3
 8011dba:	460b      	mov	r3, r1
 8011dbc:	80fb      	strh	r3, [r7, #6]
 8011dbe:	4613      	mov	r3, r2
 8011dc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011dc2:	88bb      	ldrh	r3, [r7, #4]
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	085b      	lsrs	r3, r3, #1
 8011dc8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011dd2:	88fa      	ldrh	r2, [r7, #6]
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	4413      	add	r3, r2
 8011dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ddc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011dde:	69bb      	ldr	r3, [r7, #24]
 8011de0:	627b      	str	r3, [r7, #36]	; 0x24
 8011de2:	e01b      	b.n	8011e1c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011dea:	69fb      	ldr	r3, [r7, #28]
 8011dec:	3301      	adds	r3, #1
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	021b      	lsls	r3, r3, #8
 8011df2:	b21a      	sxth	r2, r3
 8011df4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011df8:	4313      	orrs	r3, r2
 8011dfa:	b21b      	sxth	r3, r3
 8011dfc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011dfe:	6a3b      	ldr	r3, [r7, #32]
 8011e00:	8a7a      	ldrh	r2, [r7, #18]
 8011e02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011e04:	6a3b      	ldr	r3, [r7, #32]
 8011e06:	3302      	adds	r3, #2
 8011e08:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	3301      	adds	r3, #1
 8011e14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d1e0      	bne.n	8011de4 <USB_WritePMA+0x38>
  }
}
 8011e22:	bf00      	nop
 8011e24:	bf00      	nop
 8011e26:	372c      	adds	r7, #44	; 0x2c
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b08b      	sub	sp, #44	; 0x2c
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	4611      	mov	r1, r2
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	460b      	mov	r3, r1
 8011e40:	80fb      	strh	r3, [r7, #6]
 8011e42:	4613      	mov	r3, r2
 8011e44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011e46:	88bb      	ldrh	r3, [r7, #4]
 8011e48:	085b      	lsrs	r3, r3, #1
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011e56:	88fa      	ldrh	r2, [r7, #6]
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	627b      	str	r3, [r7, #36]	; 0x24
 8011e66:	e018      	b.n	8011e9a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8011e68:	6a3b      	ldr	r3, [r7, #32]
 8011e6a:	881b      	ldrh	r3, [r3, #0]
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011e70:	6a3b      	ldr	r3, [r7, #32]
 8011e72:	3302      	adds	r3, #2
 8011e74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	b2da      	uxtb	r2, r3
 8011e7a:	69fb      	ldr	r3, [r7, #28]
 8011e7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	3301      	adds	r3, #1
 8011e82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	0a1b      	lsrs	r3, r3, #8
 8011e88:	b2da      	uxtb	r2, r3
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011e8e:	69fb      	ldr	r3, [r7, #28]
 8011e90:	3301      	adds	r3, #1
 8011e92:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e96:	3b01      	subs	r3, #1
 8011e98:	627b      	str	r3, [r7, #36]	; 0x24
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d1e3      	bne.n	8011e68 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011ea0:	88bb      	ldrh	r3, [r7, #4]
 8011ea2:	f003 0301 	and.w	r3, r3, #1
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d007      	beq.n	8011ebc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011eac:	6a3b      	ldr	r3, [r7, #32]
 8011eae:	881b      	ldrh	r3, [r3, #0]
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	b2da      	uxtb	r2, r3
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	701a      	strb	r2, [r3, #0]
  }
}
 8011ebc:	bf00      	nop
 8011ebe:	372c      	adds	r7, #44	; 0x2c
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec6:	4770      	bx	lr

08011ec8 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8011ec8:	b480      	push	{r7}
 8011eca:	b085      	sub	sp, #20
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	1c5a      	adds	r2, r3, #1
 8011ed4:	607a      	str	r2, [r7, #4]
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8011eda:	89fb      	ldrh	r3, [r7, #14]
 8011edc:	021b      	lsls	r3, r3, #8
 8011ede:	b21a      	sxth	r2, r3
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	b21b      	sxth	r3, r3
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	b21b      	sxth	r3, r3
 8011eea:	b29b      	uxth	r3, r3
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3714      	adds	r7, #20
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr

08011ef8 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b085      	sub	sp, #20
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	683a      	ldr	r2, [r7, #0]
 8011f06:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2204      	movs	r2, #4
 8011f0c:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2204      	movs	r2, #4
 8011f12:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011f24:	b29b      	uxth	r3, r3
 8011f26:	1ad3      	subs	r3, r2, r3
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	3b01      	subs	r3, #1
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	b21a      	sxth	r2, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011f3c:	b29a      	uxth	r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	3b01      	subs	r3, #1
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	b21a      	sxth	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2201      	movs	r2, #1
 8011f74:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2200      	movs	r2, #0
 8011f82:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2200      	movs	r2, #0
 8011f88:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2200      	movs	r2, #0
 8011f98:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8011fbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2200      	movs	r2, #0
 8011fde:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	73fb      	strb	r3, [r7, #15]
 8011fea:	e010      	b.n	801200e <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8011fec:	7bfb      	ldrb	r3, [r7, #15]
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	330a      	adds	r3, #10
 8011ff2:	00db      	lsls	r3, r3, #3
 8011ff4:	4413      	add	r3, r2
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8011ffa:	7bfb      	ldrb	r3, [r7, #15]
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	330a      	adds	r3, #10
 8012000:	00db      	lsls	r3, r3, #3
 8012002:	4413      	add	r3, r2
 8012004:	2200      	movs	r2, #0
 8012006:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8012008:	7bfb      	ldrb	r3, [r7, #15]
 801200a:	3301      	adds	r3, #1
 801200c:	73fb      	strb	r3, [r7, #15]
 801200e:	7bfb      	ldrb	r3, [r7, #15]
 8012010:	2b03      	cmp	r3, #3
 8012012:	d9eb      	bls.n	8011fec <UG_Init+0xf4>
   }

   gui = g;
 8012014:	4a04      	ldr	r2, [pc, #16]	; (8012028 <UG_Init+0x130>)
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6013      	str	r3, [r2, #0]
   return 1;
 801201a:	2301      	movs	r3, #1
}
 801201c:	4618      	mov	r0, r3
 801201e:	3714      	adds	r7, #20
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr
 8012028:	20001cd8 	.word	0x20001cd8

0801202c <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8012034:	4b04      	ldr	r3, [pc, #16]	; (8012048 <UG_FontSelect+0x1c>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	687a      	ldr	r2, [r7, #4]
 801203a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801203c:	bf00      	nop
 801203e:	370c      	adds	r7, #12
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr
 8012048:	20001cd8 	.word	0x20001cd8

0801204c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af02      	add	r7, sp, #8
 8012052:	4603      	mov	r3, r0
 8012054:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8012056:	4b0e      	ldr	r3, [pc, #56]	; (8012090 <UG_FillScreen+0x44>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012060:	b29b      	uxth	r3, r3
 8012062:	3b01      	subs	r3, #1
 8012064:	b29b      	uxth	r3, r3
 8012066:	b21a      	sxth	r2, r3
 8012068:	4b09      	ldr	r3, [pc, #36]	; (8012090 <UG_FillScreen+0x44>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012072:	b29b      	uxth	r3, r3
 8012074:	3b01      	subs	r3, #1
 8012076:	b29b      	uxth	r3, r3
 8012078:	b219      	sxth	r1, r3
 801207a:	88fb      	ldrh	r3, [r7, #6]
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	460b      	mov	r3, r1
 8012080:	2100      	movs	r1, #0
 8012082:	2000      	movs	r0, #0
 8012084:	f000 f806 	bl	8012094 <UG_FillFrame>
}
 8012088:	bf00      	nop
 801208a:	3708      	adds	r7, #8
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	20001cd8 	.word	0x20001cd8

08012094 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012094:	b5b0      	push	{r4, r5, r7, lr}
 8012096:	b086      	sub	sp, #24
 8012098:	af02      	add	r7, sp, #8
 801209a:	4604      	mov	r4, r0
 801209c:	4608      	mov	r0, r1
 801209e:	4611      	mov	r1, r2
 80120a0:	461a      	mov	r2, r3
 80120a2:	4623      	mov	r3, r4
 80120a4:	80fb      	strh	r3, [r7, #6]
 80120a6:	4603      	mov	r3, r0
 80120a8:	80bb      	strh	r3, [r7, #4]
 80120aa:	460b      	mov	r3, r1
 80120ac:	807b      	strh	r3, [r7, #2]
 80120ae:	4613      	mov	r3, r2
 80120b0:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80120b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80120b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	da05      	bge.n	80120ca <UG_FillFrame+0x36>
     swap(x1,x2);
 80120be:	88fb      	ldrh	r3, [r7, #6]
 80120c0:	817b      	strh	r3, [r7, #10]
 80120c2:	887b      	ldrh	r3, [r7, #2]
 80120c4:	80fb      	strh	r3, [r7, #6]
 80120c6:	897b      	ldrh	r3, [r7, #10]
 80120c8:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 80120ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80120ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	da05      	bge.n	80120e2 <UG_FillFrame+0x4e>
     swap(y1,y2);
 80120d6:	88bb      	ldrh	r3, [r7, #4]
 80120d8:	813b      	strh	r3, [r7, #8]
 80120da:	883b      	ldrh	r3, [r7, #0]
 80120dc:	80bb      	strh	r3, [r7, #4]
 80120de:	893b      	ldrh	r3, [r7, #8]
 80120e0:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80120e2:	4b24      	ldr	r3, [pc, #144]	; (8012174 <UG_FillFrame+0xe0>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80120ea:	f003 0302 	and.w	r3, r3, #2
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d012      	beq.n	8012118 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80120f2:	4b20      	ldr	r3, [pc, #128]	; (8012174 <UG_FillFrame+0xe0>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120f8:	461d      	mov	r5, r3
 80120fa:	f9b7 4000 	ldrsh.w	r4, [r7]
 80120fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012102:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012106:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801210a:	8c3b      	ldrh	r3, [r7, #32]
 801210c:	9300      	str	r3, [sp, #0]
 801210e:	4623      	mov	r3, r4
 8012110:	47a8      	blx	r5
 8012112:	4603      	mov	r3, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d028      	beq.n	801216a <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8012118:	88bb      	ldrh	r3, [r7, #4]
 801211a:	81bb      	strh	r3, [r7, #12]
 801211c:	e01e      	b.n	801215c <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 801211e:	88fb      	ldrh	r3, [r7, #6]
 8012120:	81fb      	strh	r3, [r7, #14]
 8012122:	e00f      	b.n	8012144 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8012124:	4b13      	ldr	r3, [pc, #76]	; (8012174 <UG_FillFrame+0xe0>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	8c3a      	ldrh	r2, [r7, #32]
 801212e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8012132:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8012136:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8012138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801213c:	b29b      	uxth	r3, r3
 801213e:	3301      	adds	r3, #1
 8012140:	b29b      	uxth	r3, r3
 8012142:	81fb      	strh	r3, [r7, #14]
 8012144:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012148:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801214c:	429a      	cmp	r2, r3
 801214e:	dde9      	ble.n	8012124 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8012150:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012154:	b29b      	uxth	r3, r3
 8012156:	3301      	adds	r3, #1
 8012158:	b29b      	uxth	r3, r3
 801215a:	81bb      	strh	r3, [r7, #12]
 801215c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012160:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012164:	429a      	cmp	r2, r3
 8012166:	ddda      	ble.n	801211e <UG_FillFrame+0x8a>
 8012168:	e000      	b.n	801216c <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 801216a:	bf00      	nop
      }
   }
}
 801216c:	3710      	adds	r7, #16
 801216e:	46bd      	mov	sp, r7
 8012170:	bdb0      	pop	{r4, r5, r7, pc}
 8012172:	bf00      	nop
 8012174:	20001cd8 	.word	0x20001cd8

08012178 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012178:	b590      	push	{r4, r7, lr}
 801217a:	b085      	sub	sp, #20
 801217c:	af02      	add	r7, sp, #8
 801217e:	4604      	mov	r4, r0
 8012180:	4608      	mov	r0, r1
 8012182:	4611      	mov	r1, r2
 8012184:	461a      	mov	r2, r3
 8012186:	4623      	mov	r3, r4
 8012188:	80fb      	strh	r3, [r7, #6]
 801218a:	4603      	mov	r3, r0
 801218c:	80bb      	strh	r3, [r7, #4]
 801218e:	460b      	mov	r3, r1
 8012190:	807b      	strh	r3, [r7, #2]
 8012192:	4613      	mov	r3, r2
 8012194:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 8012196:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 801219a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801219e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80121a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80121a6:	8b3b      	ldrh	r3, [r7, #24]
 80121a8:	9300      	str	r3, [sp, #0]
 80121aa:	4623      	mov	r3, r4
 80121ac:	f000 f912 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 80121b0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80121b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80121b8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80121bc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80121c0:	8b3b      	ldrh	r3, [r7, #24]
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	4623      	mov	r3, r4
 80121c6:	f000 f905 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 80121ca:	f9b7 4000 	ldrsh.w	r4, [r7]
 80121ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80121d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80121d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80121da:	8b3b      	ldrh	r3, [r7, #24]
 80121dc:	9300      	str	r3, [sp, #0]
 80121de:	4623      	mov	r3, r4
 80121e0:	f000 f8f8 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 80121e4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80121e8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80121ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80121f0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80121f4:	8b3b      	ldrh	r3, [r7, #24]
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	4623      	mov	r3, r4
 80121fa:	f000 f8eb 	bl	80123d4 <UG_DrawLine>
}
 80121fe:	bf00      	nop
 8012200:	370c      	adds	r7, #12
 8012202:	46bd      	mov	sp, r7
 8012204:	bd90      	pop	{r4, r7, pc}
	...

08012208 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8012208:	b590      	push	{r4, r7, lr}
 801220a:	b087      	sub	sp, #28
 801220c:	af00      	add	r7, sp, #0
 801220e:	4604      	mov	r4, r0
 8012210:	4608      	mov	r0, r1
 8012212:	4611      	mov	r1, r2
 8012214:	461a      	mov	r2, r3
 8012216:	4623      	mov	r3, r4
 8012218:	80fb      	strh	r3, [r7, #6]
 801221a:	4603      	mov	r3, r0
 801221c:	80bb      	strh	r3, [r7, #4]
 801221e:	460b      	mov	r3, r1
 8012220:	807b      	strh	r3, [r7, #2]
 8012222:	4613      	mov	r3, r2
 8012224:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8012226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801222a:	2b00      	cmp	r3, #0
 801222c:	f2c0 80c8 	blt.w	80123c0 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8012230:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012234:	2b00      	cmp	r3, #0
 8012236:	f2c0 80c5 	blt.w	80123c4 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 801223a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801223e:	2b00      	cmp	r3, #0
 8012240:	f340 80c2 	ble.w	80123c8 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8012244:	887b      	ldrh	r3, [r7, #2]
 8012246:	005b      	lsls	r3, r3, #1
 8012248:	b29b      	uxth	r3, r3
 801224a:	f1c3 0301 	rsb	r3, r3, #1
 801224e:	b29b      	uxth	r3, r3
 8012250:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8012252:	2300      	movs	r3, #0
 8012254:	823b      	strh	r3, [r7, #16]
   e = 0;
 8012256:	2300      	movs	r3, #0
 8012258:	81fb      	strh	r3, [r7, #14]
   x = r;
 801225a:	887b      	ldrh	r3, [r7, #2]
 801225c:	82fb      	strh	r3, [r7, #22]
   y = 0;
 801225e:	2300      	movs	r3, #0
 8012260:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8012262:	e0a5      	b.n	80123b0 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8012264:	4b5a      	ldr	r3, [pc, #360]	; (80123d0 <UG_DrawCircle+0x1c8>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	88f9      	ldrh	r1, [r7, #6]
 801226e:	8afa      	ldrh	r2, [r7, #22]
 8012270:	1a8a      	subs	r2, r1, r2
 8012272:	b292      	uxth	r2, r2
 8012274:	b210      	sxth	r0, r2
 8012276:	88b9      	ldrh	r1, [r7, #4]
 8012278:	8aba      	ldrh	r2, [r7, #20]
 801227a:	440a      	add	r2, r1
 801227c:	b292      	uxth	r2, r2
 801227e:	b211      	sxth	r1, r2
 8012280:	883a      	ldrh	r2, [r7, #0]
 8012282:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8012284:	4b52      	ldr	r3, [pc, #328]	; (80123d0 <UG_DrawCircle+0x1c8>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	685b      	ldr	r3, [r3, #4]
 801228c:	88f9      	ldrh	r1, [r7, #6]
 801228e:	8afa      	ldrh	r2, [r7, #22]
 8012290:	1a8a      	subs	r2, r1, r2
 8012292:	b292      	uxth	r2, r2
 8012294:	b210      	sxth	r0, r2
 8012296:	88b9      	ldrh	r1, [r7, #4]
 8012298:	8aba      	ldrh	r2, [r7, #20]
 801229a:	1a8a      	subs	r2, r1, r2
 801229c:	b292      	uxth	r2, r2
 801229e:	b211      	sxth	r1, r2
 80122a0:	883a      	ldrh	r2, [r7, #0]
 80122a2:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 80122a4:	4b4a      	ldr	r3, [pc, #296]	; (80123d0 <UG_DrawCircle+0x1c8>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	88f9      	ldrh	r1, [r7, #6]
 80122ae:	8afa      	ldrh	r2, [r7, #22]
 80122b0:	440a      	add	r2, r1
 80122b2:	b292      	uxth	r2, r2
 80122b4:	b210      	sxth	r0, r2
 80122b6:	88b9      	ldrh	r1, [r7, #4]
 80122b8:	8aba      	ldrh	r2, [r7, #20]
 80122ba:	440a      	add	r2, r1
 80122bc:	b292      	uxth	r2, r2
 80122be:	b211      	sxth	r1, r2
 80122c0:	883a      	ldrh	r2, [r7, #0]
 80122c2:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 80122c4:	4b42      	ldr	r3, [pc, #264]	; (80123d0 <UG_DrawCircle+0x1c8>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	88f9      	ldrh	r1, [r7, #6]
 80122ce:	8afa      	ldrh	r2, [r7, #22]
 80122d0:	440a      	add	r2, r1
 80122d2:	b292      	uxth	r2, r2
 80122d4:	b210      	sxth	r0, r2
 80122d6:	88b9      	ldrh	r1, [r7, #4]
 80122d8:	8aba      	ldrh	r2, [r7, #20]
 80122da:	1a8a      	subs	r2, r1, r2
 80122dc:	b292      	uxth	r2, r2
 80122de:	b211      	sxth	r1, r2
 80122e0:	883a      	ldrh	r2, [r7, #0]
 80122e2:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 80122e4:	4b3a      	ldr	r3, [pc, #232]	; (80123d0 <UG_DrawCircle+0x1c8>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	88f9      	ldrh	r1, [r7, #6]
 80122ee:	8aba      	ldrh	r2, [r7, #20]
 80122f0:	1a8a      	subs	r2, r1, r2
 80122f2:	b292      	uxth	r2, r2
 80122f4:	b210      	sxth	r0, r2
 80122f6:	88b9      	ldrh	r1, [r7, #4]
 80122f8:	8afa      	ldrh	r2, [r7, #22]
 80122fa:	440a      	add	r2, r1
 80122fc:	b292      	uxth	r2, r2
 80122fe:	b211      	sxth	r1, r2
 8012300:	883a      	ldrh	r2, [r7, #0]
 8012302:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8012304:	4b32      	ldr	r3, [pc, #200]	; (80123d0 <UG_DrawCircle+0x1c8>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	88f9      	ldrh	r1, [r7, #6]
 801230e:	8aba      	ldrh	r2, [r7, #20]
 8012310:	1a8a      	subs	r2, r1, r2
 8012312:	b292      	uxth	r2, r2
 8012314:	b210      	sxth	r0, r2
 8012316:	88b9      	ldrh	r1, [r7, #4]
 8012318:	8afa      	ldrh	r2, [r7, #22]
 801231a:	1a8a      	subs	r2, r1, r2
 801231c:	b292      	uxth	r2, r2
 801231e:	b211      	sxth	r1, r2
 8012320:	883a      	ldrh	r2, [r7, #0]
 8012322:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8012324:	4b2a      	ldr	r3, [pc, #168]	; (80123d0 <UG_DrawCircle+0x1c8>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	685b      	ldr	r3, [r3, #4]
 801232c:	88f9      	ldrh	r1, [r7, #6]
 801232e:	8aba      	ldrh	r2, [r7, #20]
 8012330:	440a      	add	r2, r1
 8012332:	b292      	uxth	r2, r2
 8012334:	b210      	sxth	r0, r2
 8012336:	88b9      	ldrh	r1, [r7, #4]
 8012338:	8afa      	ldrh	r2, [r7, #22]
 801233a:	440a      	add	r2, r1
 801233c:	b292      	uxth	r2, r2
 801233e:	b211      	sxth	r1, r2
 8012340:	883a      	ldrh	r2, [r7, #0]
 8012342:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8012344:	4b22      	ldr	r3, [pc, #136]	; (80123d0 <UG_DrawCircle+0x1c8>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	88f9      	ldrh	r1, [r7, #6]
 801234e:	8aba      	ldrh	r2, [r7, #20]
 8012350:	440a      	add	r2, r1
 8012352:	b292      	uxth	r2, r2
 8012354:	b210      	sxth	r0, r2
 8012356:	88b9      	ldrh	r1, [r7, #4]
 8012358:	8afa      	ldrh	r2, [r7, #22]
 801235a:	1a8a      	subs	r2, r1, r2
 801235c:	b292      	uxth	r2, r2
 801235e:	b211      	sxth	r1, r2
 8012360:	883a      	ldrh	r2, [r7, #0]
 8012362:	4798      	blx	r3

      y++;
 8012364:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012368:	b29b      	uxth	r3, r3
 801236a:	3301      	adds	r3, #1
 801236c:	b29b      	uxth	r3, r3
 801236e:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8012370:	89fa      	ldrh	r2, [r7, #14]
 8012372:	8a3b      	ldrh	r3, [r7, #16]
 8012374:	4413      	add	r3, r2
 8012376:	b29b      	uxth	r3, r3
 8012378:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 801237a:	8a3b      	ldrh	r3, [r7, #16]
 801237c:	3302      	adds	r3, #2
 801237e:	b29b      	uxth	r3, r3
 8012380:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8012382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012386:	005a      	lsls	r2, r3, #1
 8012388:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801238c:	4413      	add	r3, r2
 801238e:	2b00      	cmp	r3, #0
 8012390:	dd0e      	ble.n	80123b0 <UG_DrawCircle+0x1a8>
      {
         x--;
 8012392:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012396:	b29b      	uxth	r3, r3
 8012398:	3b01      	subs	r3, #1
 801239a:	b29b      	uxth	r3, r3
 801239c:	82fb      	strh	r3, [r7, #22]
         e += xd;
 801239e:	89fa      	ldrh	r2, [r7, #14]
 80123a0:	8a7b      	ldrh	r3, [r7, #18]
 80123a2:	4413      	add	r3, r2
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 80123a8:	8a7b      	ldrh	r3, [r7, #18]
 80123aa:	3302      	adds	r3, #2
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 80123b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80123b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	f6bf af53 	bge.w	8012264 <UG_DrawCircle+0x5c>
 80123be:	e004      	b.n	80123ca <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 80123c0:	bf00      	nop
 80123c2:	e002      	b.n	80123ca <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 80123c4:	bf00      	nop
 80123c6:	e000      	b.n	80123ca <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 80123c8:	bf00      	nop
      }
   }
}
 80123ca:	371c      	adds	r7, #28
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd90      	pop	{r4, r7, pc}
 80123d0:	20001cd8 	.word	0x20001cd8

080123d4 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80123d4:	b5b0      	push	{r4, r5, r7, lr}
 80123d6:	b08a      	sub	sp, #40	; 0x28
 80123d8:	af02      	add	r7, sp, #8
 80123da:	4604      	mov	r4, r0
 80123dc:	4608      	mov	r0, r1
 80123de:	4611      	mov	r1, r2
 80123e0:	461a      	mov	r2, r3
 80123e2:	4623      	mov	r3, r4
 80123e4:	80fb      	strh	r3, [r7, #6]
 80123e6:	4603      	mov	r3, r0
 80123e8:	80bb      	strh	r3, [r7, #4]
 80123ea:	460b      	mov	r3, r1
 80123ec:	807b      	strh	r3, [r7, #2]
 80123ee:	4613      	mov	r3, r2
 80123f0:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80123f2:	4b67      	ldr	r3, [pc, #412]	; (8012590 <UG_DrawLine+0x1bc>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80123fa:	f003 0302 	and.w	r3, r3, #2
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d013      	beq.n	801242a <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012402:	4b63      	ldr	r3, [pc, #396]	; (8012590 <UG_DrawLine+0x1bc>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012408:	461d      	mov	r5, r3
 801240a:	f9b7 4000 	ldrsh.w	r4, [r7]
 801240e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012412:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012416:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801241a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801241c:	9300      	str	r3, [sp, #0]
 801241e:	4623      	mov	r3, r4
 8012420:	47a8      	blx	r5
 8012422:	4603      	mov	r3, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	f000 80ae 	beq.w	8012586 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 801242a:	887a      	ldrh	r2, [r7, #2]
 801242c:	88fb      	ldrh	r3, [r7, #6]
 801242e:	1ad3      	subs	r3, r2, r3
 8012430:	b29b      	uxth	r3, r3
 8012432:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8012434:	883a      	ldrh	r2, [r7, #0]
 8012436:	88bb      	ldrh	r3, [r7, #4]
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	b29b      	uxth	r3, r3
 801243c:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 801243e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012442:	2b00      	cmp	r3, #0
 8012444:	bfb8      	it	lt
 8012446:	425b      	neglt	r3, r3
 8012448:	b29b      	uxth	r3, r3
 801244a:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 801244c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012450:	2b00      	cmp	r3, #0
 8012452:	bfb8      	it	lt
 8012454:	425b      	neglt	r3, r3
 8012456:	b29b      	uxth	r3, r3
 8012458:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 801245a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801245e:	2b00      	cmp	r3, #0
 8012460:	dd01      	ble.n	8012466 <UG_DrawLine+0x92>
 8012462:	2301      	movs	r3, #1
 8012464:	e001      	b.n	801246a <UG_DrawLine+0x96>
 8012466:	f04f 33ff 	mov.w	r3, #4294967295
 801246a:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 801246c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012470:	2b00      	cmp	r3, #0
 8012472:	dd01      	ble.n	8012478 <UG_DrawLine+0xa4>
 8012474:	2301      	movs	r3, #1
 8012476:	e001      	b.n	801247c <UG_DrawLine+0xa8>
 8012478:	f04f 33ff 	mov.w	r3, #4294967295
 801247c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 801247e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012482:	105b      	asrs	r3, r3, #1
 8012484:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8012486:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801248a:	105b      	asrs	r3, r3, #1
 801248c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 801248e:	88fb      	ldrh	r3, [r7, #6]
 8012490:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8012492:	88bb      	ldrh	r3, [r7, #4]
 8012494:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8012496:	4b3e      	ldr	r3, [pc, #248]	; (8012590 <UG_DrawLine+0x1bc>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80124a0:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80124a4:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80124a8:	4798      	blx	r3

   if( dxabs >= dyabs )
 80124aa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80124ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	db33      	blt.n	801251e <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 80124b6:	2300      	movs	r3, #0
 80124b8:	83fb      	strh	r3, [r7, #30]
 80124ba:	e029      	b.n	8012510 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80124bc:	8b7a      	ldrh	r2, [r7, #26]
 80124be:	89fb      	ldrh	r3, [r7, #14]
 80124c0:	4413      	add	r3, r2
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80124c6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80124ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	db09      	blt.n	80124e6 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 80124d2:	8b7a      	ldrh	r2, [r7, #26]
 80124d4:	8a3b      	ldrh	r3, [r7, #16]
 80124d6:	1ad3      	subs	r3, r2, r3
 80124d8:	b29b      	uxth	r3, r3
 80124da:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 80124dc:	8afa      	ldrh	r2, [r7, #22]
 80124de:	897b      	ldrh	r3, [r7, #10]
 80124e0:	4413      	add	r3, r2
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80124e6:	8b3a      	ldrh	r2, [r7, #24]
 80124e8:	89bb      	ldrh	r3, [r7, #12]
 80124ea:	4413      	add	r3, r2
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80124f0:	4b27      	ldr	r3, [pc, #156]	; (8012590 <UG_DrawLine+0x1bc>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80124fa:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80124fe:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8012502:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8012504:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012508:	b29b      	uxth	r3, r3
 801250a:	3301      	adds	r3, #1
 801250c:	b29b      	uxth	r3, r3
 801250e:	83fb      	strh	r3, [r7, #30]
 8012510:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012514:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012518:	429a      	cmp	r2, r3
 801251a:	dbcf      	blt.n	80124bc <UG_DrawLine+0xe8>
 801251c:	e034      	b.n	8012588 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 801251e:	2300      	movs	r3, #0
 8012520:	83fb      	strh	r3, [r7, #30]
 8012522:	e029      	b.n	8012578 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8012524:	8bba      	ldrh	r2, [r7, #28]
 8012526:	8a3b      	ldrh	r3, [r7, #16]
 8012528:	4413      	add	r3, r2
 801252a:	b29b      	uxth	r3, r3
 801252c:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 801252e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8012532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012536:	429a      	cmp	r2, r3
 8012538:	db09      	blt.n	801254e <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 801253a:	8bba      	ldrh	r2, [r7, #28]
 801253c:	89fb      	ldrh	r3, [r7, #14]
 801253e:	1ad3      	subs	r3, r2, r3
 8012540:	b29b      	uxth	r3, r3
 8012542:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8012544:	8b3a      	ldrh	r2, [r7, #24]
 8012546:	89bb      	ldrh	r3, [r7, #12]
 8012548:	4413      	add	r3, r2
 801254a:	b29b      	uxth	r3, r3
 801254c:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 801254e:	8afa      	ldrh	r2, [r7, #22]
 8012550:	897b      	ldrh	r3, [r7, #10]
 8012552:	4413      	add	r3, r2
 8012554:	b29b      	uxth	r3, r3
 8012556:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8012558:	4b0d      	ldr	r3, [pc, #52]	; (8012590 <UG_DrawLine+0x1bc>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	685b      	ldr	r3, [r3, #4]
 8012560:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8012562:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012566:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 801256a:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 801256c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012570:	b29b      	uxth	r3, r3
 8012572:	3301      	adds	r3, #1
 8012574:	b29b      	uxth	r3, r3
 8012576:	83fb      	strh	r3, [r7, #30]
 8012578:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801257c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012580:	429a      	cmp	r2, r3
 8012582:	dbcf      	blt.n	8012524 <UG_DrawLine+0x150>
 8012584:	e000      	b.n	8012588 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012586:	bf00      	nop
      }
   }  
}
 8012588:	3720      	adds	r7, #32
 801258a:	46bd      	mov	sp, r7
 801258c:	bdb0      	pop	{r4, r5, r7, pc}
 801258e:	bf00      	nop
 8012590:	20001cd8 	.word	0x20001cd8

08012594 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8012594:	b590      	push	{r4, r7, lr}
 8012596:	b087      	sub	sp, #28
 8012598:	af02      	add	r7, sp, #8
 801259a:	4603      	mov	r3, r0
 801259c:	603a      	str	r2, [r7, #0]
 801259e:	80fb      	strh	r3, [r7, #6]
 80125a0:	460b      	mov	r3, r1
 80125a2:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 80125a4:	88fb      	ldrh	r3, [r7, #6]
 80125a6:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80125a8:	88bb      	ldrh	r3, [r7, #4]
 80125aa:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 80125ac:	4b44      	ldr	r3, [pc, #272]	; (80126c0 <UG_PutString+0x12c>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125b2:	4618      	mov	r0, r3
 80125b4:	f000 fa96 	bl	8012ae4 <_UG_FontSelect>
   while ( *str != 0 )
 80125b8:	e064      	b.n	8012684 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80125ba:	4b41      	ldr	r3, [pc, #260]	; (80126c0 <UG_PutString+0x12c>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d106      	bne.n	80125d4 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 80125c6:	463b      	mov	r3, r7
 80125c8:	4618      	mov	r0, r3
 80125ca:	f000 f8c7 	bl	801275c <_UG_DecodeUTF8>
 80125ce:	4603      	mov	r3, r0
 80125d0:	817b      	strh	r3, [r7, #10]
 80125d2:	e004      	b.n	80125de <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	1c5a      	adds	r2, r3, #1
 80125d8:	603a      	str	r2, [r7, #0]
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80125de:	897b      	ldrh	r3, [r7, #10]
 80125e0:	2b0a      	cmp	r3, #10
 80125e2:	d105      	bne.n	80125f0 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80125e4:	4b36      	ldr	r3, [pc, #216]	; (80126c0 <UG_PutString+0x12c>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	881b      	ldrh	r3, [r3, #0]
 80125ec:	81fb      	strh	r3, [r7, #14]
         continue;
 80125ee:	e049      	b.n	8012684 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80125f0:	897b      	ldrh	r3, [r7, #10]
 80125f2:	2100      	movs	r1, #0
 80125f4:	4618      	mov	r0, r3
 80125f6:	f000 f929 	bl	801284c <_UG_GetCharData>
 80125fa:	4603      	mov	r3, r0
 80125fc:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80125fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012606:	d100      	bne.n	801260a <UG_PutString+0x76>
 8012608:	e03c      	b.n	8012684 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 801260a:	4b2d      	ldr	r3, [pc, #180]	; (80126c0 <UG_PutString+0x12c>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012614:	4619      	mov	r1, r3
 8012616:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801261a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801261e:	4413      	add	r3, r2
 8012620:	4299      	cmp	r1, r3
 8012622:	dc12      	bgt.n	801264a <UG_PutString+0xb6>
      {
         xp = x;
 8012624:	88fb      	ldrh	r3, [r7, #6]
 8012626:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8012628:	4b25      	ldr	r3, [pc, #148]	; (80126c0 <UG_PutString+0x12c>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012630:	b21a      	sxth	r2, r3
 8012632:	4b23      	ldr	r3, [pc, #140]	; (80126c0 <UG_PutString+0x12c>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 801263a:	b21b      	sxth	r3, r3
 801263c:	4413      	add	r3, r2
 801263e:	b21b      	sxth	r3, r3
 8012640:	b29a      	uxth	r2, r3
 8012642:	89bb      	ldrh	r3, [r7, #12]
 8012644:	4413      	add	r3, r2
 8012646:	b29b      	uxth	r3, r3
 8012648:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 801264a:	4b1d      	ldr	r3, [pc, #116]	; (80126c0 <UG_PutString+0x12c>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8012652:	4b1b      	ldr	r3, [pc, #108]	; (80126c0 <UG_PutString+0x12c>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801265a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801265e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8012662:	8978      	ldrh	r0, [r7, #10]
 8012664:	9300      	str	r3, [sp, #0]
 8012666:	4623      	mov	r3, r4
 8012668:	f000 fabe 	bl	8012be8 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 801266c:	4b14      	ldr	r3, [pc, #80]	; (80126c0 <UG_PutString+0x12c>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8012674:	b29a      	uxth	r2, r3
 8012676:	893b      	ldrh	r3, [r7, #8]
 8012678:	4413      	add	r3, r2
 801267a:	b29a      	uxth	r2, r3
 801267c:	89fb      	ldrh	r3, [r7, #14]
 801267e:	4413      	add	r3, r2
 8012680:	b29b      	uxth	r3, r3
 8012682:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d196      	bne.n	80125ba <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 801268c:	4b0c      	ldr	r3, [pc, #48]	; (80126c0 <UG_PutString+0x12c>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012694:	f003 0302 	and.w	r3, r3, #2
 8012698:	2b00      	cmp	r3, #0
 801269a:	d00c      	beq.n	80126b6 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 801269c:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <UG_PutString+0x12c>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126a2:	461c      	mov	r4, r3
 80126a4:	f04f 33ff 	mov.w	r3, #4294967295
 80126a8:	f04f 32ff 	mov.w	r2, #4294967295
 80126ac:	f04f 31ff 	mov.w	r1, #4294967295
 80126b0:	f04f 30ff 	mov.w	r0, #4294967295
 80126b4:	47a0      	blx	r4
}
 80126b6:	bf00      	nop
 80126b8:	3714      	adds	r7, #20
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd90      	pop	{r4, r7, pc}
 80126be:	bf00      	nop
 80126c0:	20001cd8 	.word	0x20001cd8

080126c4 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 80126c4:	b480      	push	{r7}
 80126c6:	b083      	sub	sp, #12
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	4603      	mov	r3, r0
 80126cc:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80126ce:	4b05      	ldr	r3, [pc, #20]	; (80126e4 <UG_SetForecolor+0x20>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	88fa      	ldrh	r2, [r7, #6]
 80126d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 80126d8:	bf00      	nop
 80126da:	370c      	adds	r7, #12
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr
 80126e4:	20001cd8 	.word	0x20001cd8

080126e8 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80126e8:	b480      	push	{r7}
 80126ea:	b083      	sub	sp, #12
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	4603      	mov	r3, r0
 80126f0:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80126f2:	4b05      	ldr	r3, [pc, #20]	; (8012708 <UG_SetBackcolor+0x20>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	88fa      	ldrh	r2, [r7, #6]
 80126f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80126fc:	bf00      	nop
 80126fe:	370c      	adds	r7, #12
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr
 8012708:	20001cd8 	.word	0x20001cd8

0801270c <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	4603      	mov	r3, r0
 8012714:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8012716:	4b06      	ldr	r3, [pc, #24]	; (8012730 <UG_FontSetHSpace+0x24>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	88fa      	ldrh	r2, [r7, #6]
 801271c:	b252      	sxtb	r2, r2
 801271e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8012722:	bf00      	nop
 8012724:	370c      	adds	r7, #12
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr
 801272e:	bf00      	nop
 8012730:	20001cd8 	.word	0x20001cd8

08012734 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8012734:	b480      	push	{r7}
 8012736:	b083      	sub	sp, #12
 8012738:	af00      	add	r7, sp, #0
 801273a:	4603      	mov	r3, r0
 801273c:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 801273e:	4b06      	ldr	r3, [pc, #24]	; (8012758 <UG_FontSetVSpace+0x24>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	88fa      	ldrh	r2, [r7, #6]
 8012744:	b252      	sxtb	r2, r2
 8012746:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 801274a:	bf00      	nop
 801274c:	370c      	adds	r7, #12
 801274e:	46bd      	mov	sp, r7
 8012750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012754:	4770      	bx	lr
 8012756:	bf00      	nop
 8012758:	20001cd8 	.word	0x20001cd8

0801275c <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 801275c:	b480      	push	{r7}
 801275e:	b085      	sub	sp, #20
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]

  char c=**str;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 801276c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012770:	2b00      	cmp	r3, #0
 8012772:	db07      	blt.n	8012784 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	1c5a      	adds	r2, r3, #1
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	601a      	str	r2, [r3, #0]
    return c;
 801277e:	7bfb      	ldrb	r3, [r7, #15]
 8012780:	b29b      	uxth	r3, r3
 8012782:	e05c      	b.n	801283e <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8012784:	2300      	movs	r3, #0
 8012786:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8012788:	2300      	movs	r3, #0
 801278a:	81bb      	strh	r3, [r7, #12]

  while(**str)
 801278c:	e04f      	b.n	801282e <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	1c5a      	adds	r2, r3, #1
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 80127a0:	7bbb      	ldrb	r3, [r7, #14]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d130      	bne.n	8012808 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 80127a6:	7bfb      	ldrb	r3, [r7, #15]
 80127a8:	2bdf      	cmp	r3, #223	; 0xdf
 80127aa:	d806      	bhi.n	80127ba <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 80127ac:	2301      	movs	r3, #1
 80127ae:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 80127b0:	7bfb      	ldrb	r3, [r7, #15]
 80127b2:	f003 031f 	and.w	r3, r3, #31
 80127b6:	73fb      	strb	r3, [r7, #15]
 80127b8:	e023      	b.n	8012802 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 80127ba:	7bfb      	ldrb	r3, [r7, #15]
 80127bc:	2bef      	cmp	r3, #239	; 0xef
 80127be:	d806      	bhi.n	80127ce <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 80127c0:	2302      	movs	r3, #2
 80127c2:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 80127c4:	7bfb      	ldrb	r3, [r7, #15]
 80127c6:	f003 030f 	and.w	r3, r3, #15
 80127ca:	73fb      	strb	r3, [r7, #15]
 80127cc:	e019      	b.n	8012802 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 80127ce:	7bfb      	ldrb	r3, [r7, #15]
 80127d0:	2bf7      	cmp	r3, #247	; 0xf7
 80127d2:	d806      	bhi.n	80127e2 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 80127d4:	2303      	movs	r3, #3
 80127d6:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 80127d8:	7bfb      	ldrb	r3, [r7, #15]
 80127da:	f003 0307 	and.w	r3, r3, #7
 80127de:	73fb      	strb	r3, [r7, #15]
 80127e0:	e00f      	b.n	8012802 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80127e2:	7bfb      	ldrb	r3, [r7, #15]
 80127e4:	2bfb      	cmp	r3, #251	; 0xfb
 80127e6:	d806      	bhi.n	80127f6 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 80127e8:	2304      	movs	r3, #4
 80127ea:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 80127ec:	7bfb      	ldrb	r3, [r7, #15]
 80127ee:	f003 0303 	and.w	r3, r3, #3
 80127f2:	73fb      	strb	r3, [r7, #15]
 80127f4:	e005      	b.n	8012802 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80127f6:	2305      	movs	r3, #5
 80127f8:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80127fa:	7bfb      	ldrb	r3, [r7, #15]
 80127fc:	f003 0301 	and.w	r3, r3, #1
 8012800:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8012802:	7bfb      	ldrb	r3, [r7, #15]
 8012804:	81bb      	strh	r3, [r7, #12]
 8012806:	e012      	b.n	801282e <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8012808:	89bb      	ldrh	r3, [r7, #12]
 801280a:	019b      	lsls	r3, r3, #6
 801280c:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 801280e:	7bfb      	ldrb	r3, [r7, #15]
 8012810:	b21b      	sxth	r3, r3
 8012812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012816:	b21a      	sxth	r2, r3
 8012818:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801281c:	4313      	orrs	r3, r2
 801281e:	b21b      	sxth	r3, r3
 8012820:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8012822:	7bbb      	ldrb	r3, [r7, #14]
 8012824:	3b01      	subs	r3, #1
 8012826:	73bb      	strb	r3, [r7, #14]
 8012828:	7bbb      	ldrb	r3, [r7, #14]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d005      	beq.n	801283a <_UG_DecodeUTF8+0xde>
  while(**str)
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d1aa      	bne.n	801278e <_UG_DecodeUTF8+0x32>
 8012838:	e000      	b.n	801283c <_UG_DecodeUTF8+0xe0>
        break;
 801283a:	bf00      	nop
    }
  }
  return encoding;
 801283c:	89bb      	ldrh	r3, [r7, #12]
}
 801283e:	4618      	mov	r0, r3
 8012840:	3714      	adds	r7, #20
 8012842:	46bd      	mov	sp, r7
 8012844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012848:	4770      	bx	lr
	...

0801284c <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 801284c:	b580      	push	{r7, lr}
 801284e:	b086      	sub	sp, #24
 8012850:	af00      	add	r7, sp, #0
 8012852:	4603      	mov	r3, r0
 8012854:	6039      	str	r1, [r7, #0]
 8012856:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8012858:	2300      	movs	r3, #0
 801285a:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 801285c:	2300      	movs	r3, #0
 801285e:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8012860:	2300      	movs	r3, #0
 8012862:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8012864:	2300      	movs	r3, #0
 8012866:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8012868:	2300      	movs	r3, #0
 801286a:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 801286c:	4b98      	ldr	r3, [pc, #608]	; (8012ad0 <_UG_GetCharData+0x284>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012872:	4b98      	ldr	r3, [pc, #608]	; (8012ad4 <_UG_GetCharData+0x288>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	429a      	cmp	r2, r3
 8012878:	d10f      	bne.n	801289a <_UG_GetCharData+0x4e>
 801287a:	4b97      	ldr	r3, [pc, #604]	; (8012ad8 <_UG_GetCharData+0x28c>)
 801287c:	881b      	ldrh	r3, [r3, #0]
 801287e:	88fa      	ldrh	r2, [r7, #6]
 8012880:	429a      	cmp	r2, r3
 8012882:	d10a      	bne.n	801289a <_UG_GetCharData+0x4e>
    if(p){
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d003      	beq.n	8012892 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 801288a:	4b94      	ldr	r3, [pc, #592]	; (8012adc <_UG_GetCharData+0x290>)
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8012892:	4b93      	ldr	r3, [pc, #588]	; (8012ae0 <_UG_GetCharData+0x294>)
 8012894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012898:	e116      	b.n	8012ac8 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 801289a:	4b8d      	ldr	r3, [pc, #564]	; (8012ad0 <_UG_GetCharData+0x284>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	f000 80cc 	beq.w	8012a40 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 80128a8:	88fb      	ldrh	r3, [r7, #6]
 80128aa:	2bfc      	cmp	r3, #252	; 0xfc
 80128ac:	f300 80c8 	bgt.w	8012a40 <_UG_GetCharData+0x1f4>
 80128b0:	2bd6      	cmp	r3, #214	; 0xd6
 80128b2:	da09      	bge.n	80128c8 <_UG_GetCharData+0x7c>
 80128b4:	2bc4      	cmp	r3, #196	; 0xc4
 80128b6:	d06c      	beq.n	8012992 <_UG_GetCharData+0x146>
 80128b8:	2bc4      	cmp	r3, #196	; 0xc4
 80128ba:	f300 80c1 	bgt.w	8012a40 <_UG_GetCharData+0x1f4>
 80128be:	2bb0      	cmp	r3, #176	; 0xb0
 80128c0:	d06d      	beq.n	801299e <_UG_GetCharData+0x152>
 80128c2:	2bb5      	cmp	r3, #181	; 0xb5
 80128c4:	d068      	beq.n	8012998 <_UG_GetCharData+0x14c>
 80128c6:	e06e      	b.n	80129a6 <_UG_GetCharData+0x15a>
 80128c8:	3bd6      	subs	r3, #214	; 0xd6
 80128ca:	2b26      	cmp	r3, #38	; 0x26
 80128cc:	f200 80b8 	bhi.w	8012a40 <_UG_GetCharData+0x1f4>
 80128d0:	a201      	add	r2, pc, #4	; (adr r2, 80128d8 <_UG_GetCharData+0x8c>)
 80128d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128d6:	bf00      	nop
 80128d8:	0801297b 	.word	0x0801297b
 80128dc:	08012a41 	.word	0x08012a41
 80128e0:	08012a41 	.word	0x08012a41
 80128e4:	08012a41 	.word	0x08012a41
 80128e8:	08012a41 	.word	0x08012a41
 80128ec:	08012a41 	.word	0x08012a41
 80128f0:	08012987 	.word	0x08012987
 80128f4:	08012a41 	.word	0x08012a41
 80128f8:	08012a41 	.word	0x08012a41
 80128fc:	08012a41 	.word	0x08012a41
 8012900:	08012a41 	.word	0x08012a41
 8012904:	08012a41 	.word	0x08012a41
 8012908:	08012a41 	.word	0x08012a41
 801290c:	08012a41 	.word	0x08012a41
 8012910:	0801298d 	.word	0x0801298d
 8012914:	08012a41 	.word	0x08012a41
 8012918:	08012a41 	.word	0x08012a41
 801291c:	08012a41 	.word	0x08012a41
 8012920:	08012a41 	.word	0x08012a41
 8012924:	08012a41 	.word	0x08012a41
 8012928:	08012a41 	.word	0x08012a41
 801292c:	08012a41 	.word	0x08012a41
 8012930:	08012a41 	.word	0x08012a41
 8012934:	08012a41 	.word	0x08012a41
 8012938:	08012a41 	.word	0x08012a41
 801293c:	08012a41 	.word	0x08012a41
 8012940:	08012a41 	.word	0x08012a41
 8012944:	08012a41 	.word	0x08012a41
 8012948:	08012a41 	.word	0x08012a41
 801294c:	08012a41 	.word	0x08012a41
 8012950:	08012a41 	.word	0x08012a41
 8012954:	08012a41 	.word	0x08012a41
 8012958:	08012975 	.word	0x08012975
 801295c:	08012a41 	.word	0x08012a41
 8012960:	08012a41 	.word	0x08012a41
 8012964:	08012a41 	.word	0x08012a41
 8012968:	08012a41 	.word	0x08012a41
 801296c:	08012a41 	.word	0x08012a41
 8012970:	08012981 	.word	0x08012981
    {
       case 0xF6: encoding = 0x94; break; // ö
 8012974:	2394      	movs	r3, #148	; 0x94
 8012976:	80fb      	strh	r3, [r7, #6]
 8012978:	e015      	b.n	80129a6 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 801297a:	2399      	movs	r3, #153	; 0x99
 801297c:	80fb      	strh	r3, [r7, #6]
 801297e:	e012      	b.n	80129a6 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8012980:	2381      	movs	r3, #129	; 0x81
 8012982:	80fb      	strh	r3, [r7, #6]
 8012984:	e00f      	b.n	80129a6 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8012986:	239a      	movs	r3, #154	; 0x9a
 8012988:	80fb      	strh	r3, [r7, #6]
 801298a:	e00c      	b.n	80129a6 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 801298c:	2384      	movs	r3, #132	; 0x84
 801298e:	80fb      	strh	r3, [r7, #6]
 8012990:	e009      	b.n	80129a6 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8012992:	238e      	movs	r3, #142	; 0x8e
 8012994:	80fb      	strh	r3, [r7, #6]
 8012996:	e006      	b.n	80129a6 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8012998:	23e6      	movs	r3, #230	; 0xe6
 801299a:	80fb      	strh	r3, [r7, #6]
 801299c:	e003      	b.n	80129a6 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 801299e:	23f8      	movs	r3, #248	; 0xf8
 80129a0:	80fb      	strh	r3, [r7, #6]
 80129a2:	bf00      	nop
 80129a4:	e04c      	b.n	8012a40 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80129a6:	e04b      	b.n	8012a40 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80129a8:	4b49      	ldr	r3, [pc, #292]	; (8012ad0 <_UG_GetCharData+0x284>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129ae:	8a7a      	ldrh	r2, [r7, #18]
 80129b0:	0052      	lsls	r2, r2, #1
 80129b2:	4413      	add	r3, r2
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7ff fa87 	bl	8011ec8 <ptr_8to16>
 80129ba:	4603      	mov	r3, r0
 80129bc:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80129be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	da06      	bge.n	80129d4 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80129c6:	89fb      	ldrh	r3, [r7, #14]
 80129c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80129cc:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 80129ce:	2301      	movs	r3, #1
 80129d0:	747b      	strb	r3, [r7, #17]
 80129d2:	e032      	b.n	8012a3a <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80129d4:	7c7b      	ldrb	r3, [r7, #17]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d021      	beq.n	8012a1e <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80129da:	88fa      	ldrh	r2, [r7, #6]
 80129dc:	8afb      	ldrh	r3, [r7, #22]
 80129de:	429a      	cmp	r2, r3
 80129e0:	d30d      	bcc.n	80129fe <_UG_GetCharData+0x1b2>
 80129e2:	88fa      	ldrh	r2, [r7, #6]
 80129e4:	89fb      	ldrh	r3, [r7, #14]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d809      	bhi.n	80129fe <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80129ea:	88fa      	ldrh	r2, [r7, #6]
 80129ec:	8afb      	ldrh	r3, [r7, #22]
 80129ee:	1ad3      	subs	r3, r2, r3
 80129f0:	b29a      	uxth	r2, r3
 80129f2:	8abb      	ldrh	r3, [r7, #20]
 80129f4:	4413      	add	r3, r2
 80129f6:	82bb      	strh	r3, [r7, #20]
        found=1;
 80129f8:	2301      	movs	r3, #1
 80129fa:	743b      	strb	r3, [r7, #16]
        break;
 80129fc:	e02a      	b.n	8012a54 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80129fe:	88fa      	ldrh	r2, [r7, #6]
 8012a00:	8afb      	ldrh	r3, [r7, #22]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d323      	bcc.n	8012a4e <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8012a06:	89fa      	ldrh	r2, [r7, #14]
 8012a08:	8afb      	ldrh	r3, [r7, #22]
 8012a0a:	1ad3      	subs	r3, r2, r3
 8012a0c:	b29a      	uxth	r2, r3
 8012a0e:	8abb      	ldrh	r3, [r7, #20]
 8012a10:	4413      	add	r3, r2
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	3301      	adds	r3, #1
 8012a16:	82bb      	strh	r3, [r7, #20]
      range=0;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	747b      	strb	r3, [r7, #17]
 8012a1c:	e00d      	b.n	8012a3a <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8012a1e:	88fa      	ldrh	r2, [r7, #6]
 8012a20:	89fb      	ldrh	r3, [r7, #14]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d102      	bne.n	8012a2c <_UG_GetCharData+0x1e0>
      {
        found=1;
 8012a26:	2301      	movs	r3, #1
 8012a28:	743b      	strb	r3, [r7, #16]
        break;
 8012a2a:	e013      	b.n	8012a54 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8012a2c:	88fa      	ldrh	r2, [r7, #6]
 8012a2e:	89fb      	ldrh	r3, [r7, #14]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d30e      	bcc.n	8012a52 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8012a34:	8abb      	ldrh	r3, [r7, #20]
 8012a36:	3301      	adds	r3, #1
 8012a38:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012a3a:	8a7b      	ldrh	r3, [r7, #18]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	827b      	strh	r3, [r7, #18]
 8012a40:	4b23      	ldr	r3, [pc, #140]	; (8012ad0 <_UG_GetCharData+0x284>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012a46:	8a7a      	ldrh	r2, [r7, #18]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d3ad      	bcc.n	80129a8 <_UG_GetCharData+0x15c>
 8012a4c:	e002      	b.n	8012a54 <_UG_GetCharData+0x208>
        break;
 8012a4e:	bf00      	nop
 8012a50:	e000      	b.n	8012a54 <_UG_GetCharData+0x208>
        break;
 8012a52:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8012a54:	7c3b      	ldrb	r3, [r7, #16]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d034      	beq.n	8012ac4 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8012a5a:	4b1d      	ldr	r3, [pc, #116]	; (8012ad0 <_UG_GetCharData+0x284>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a60:	4a1c      	ldr	r2, [pc, #112]	; (8012ad4 <_UG_GetCharData+0x288>)
 8012a62:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8012a64:	4a1c      	ldr	r2, [pc, #112]	; (8012ad8 <_UG_GetCharData+0x28c>)
 8012a66:	88fb      	ldrh	r3, [r7, #6]
 8012a68:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8012a6a:	4b19      	ldr	r3, [pc, #100]	; (8012ad0 <_UG_GetCharData+0x284>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a70:	8aba      	ldrh	r2, [r7, #20]
 8012a72:	4917      	ldr	r1, [pc, #92]	; (8012ad0 <_UG_GetCharData+0x284>)
 8012a74:	6809      	ldr	r1, [r1, #0]
 8012a76:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8012a78:	fb01 f202 	mul.w	r2, r1, r2
 8012a7c:	4413      	add	r3, r2
 8012a7e:	4a17      	ldr	r2, [pc, #92]	; (8012adc <_UG_GetCharData+0x290>)
 8012a80:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8012a82:	4b13      	ldr	r3, [pc, #76]	; (8012ad0 <_UG_GetCharData+0x284>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d009      	beq.n	8012aa0 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8012a8c:	4b10      	ldr	r3, [pc, #64]	; (8012ad0 <_UG_GetCharData+0x284>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a92:	8abb      	ldrh	r3, [r7, #20]
 8012a94:	4413      	add	r3, r2
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	b21a      	sxth	r2, r3
 8012a9a:	4b11      	ldr	r3, [pc, #68]	; (8012ae0 <_UG_GetCharData+0x294>)
 8012a9c:	801a      	strh	r2, [r3, #0]
 8012a9e:	e006      	b.n	8012aae <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8012aa0:	4b0b      	ldr	r3, [pc, #44]	; (8012ad0 <_UG_GetCharData+0x284>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012aa8:	b21a      	sxth	r2, r3
 8012aaa:	4b0d      	ldr	r3, [pc, #52]	; (8012ae0 <_UG_GetCharData+0x294>)
 8012aac:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d003      	beq.n	8012abc <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8012ab4:	4b09      	ldr	r3, [pc, #36]	; (8012adc <_UG_GetCharData+0x290>)
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8012abc:	4b08      	ldr	r3, [pc, #32]	; (8012ae0 <_UG_GetCharData+0x294>)
 8012abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ac2:	e001      	b.n	8012ac8 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8012ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3718      	adds	r7, #24
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}
 8012ad0:	20001cd8 	.word	0x20001cd8
 8012ad4:	20001cdc 	.word	0x20001cdc
 8012ad8:	20001ce0 	.word	0x20001ce0
 8012adc:	20001ce4 	.word	0x20001ce4
 8012ae0:	20001ce8 	.word	0x20001ce8

08012ae4 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8012ae4:	b590      	push	{r4, r7, lr}
 8012ae6:	b083      	sub	sp, #12
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8012aec:	4b3d      	ldr	r3, [pc, #244]	; (8012be4 <_UG_FontSelect+0x100>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d070      	beq.n	8012bda <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8012af8:	4b3a      	ldr	r3, [pc, #232]	; (8012be4 <_UG_FontSelect+0x100>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	687a      	ldr	r2, [r7, #4]
 8012afe:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	781a      	ldrb	r2, [r3, #0]
 8012b04:	4b37      	ldr	r3, [pc, #220]	; (8012be4 <_UG_FontSelect+0x100>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012b0c:	b2d2      	uxtb	r2, r2
 8012b0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	1c5a      	adds	r2, r3, #1
 8012b16:	607a      	str	r2, [r7, #4]
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	b25b      	sxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	da01      	bge.n	8012b24 <_UG_FontSelect+0x40>
 8012b20:	2201      	movs	r2, #1
 8012b22:	e000      	b.n	8012b26 <_UG_FontSelect+0x42>
 8012b24:	2200      	movs	r2, #0
 8012b26:	4b2f      	ldr	r3, [pc, #188]	; (8012be4 <_UG_FontSelect+0x100>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	b2d2      	uxtb	r2, r2
 8012b2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	1c5a      	adds	r2, r3, #1
 8012b34:	607a      	str	r2, [r7, #4]
 8012b36:	4a2b      	ldr	r2, [pc, #172]	; (8012be4 <_UG_FontSelect+0x100>)
 8012b38:	6812      	ldr	r2, [r2, #0]
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	1c5a      	adds	r2, r3, #1
 8012b44:	607a      	str	r2, [r7, #4]
 8012b46:	4a27      	ldr	r2, [pc, #156]	; (8012be4 <_UG_FontSelect+0x100>)
 8012b48:	6812      	ldr	r2, [r2, #0]
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8012b50:	4b24      	ldr	r3, [pc, #144]	; (8012be4 <_UG_FontSelect+0x100>)
 8012b52:	681c      	ldr	r4, [r3, #0]
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7ff f9b7 	bl	8011ec8 <ptr_8to16>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	3302      	adds	r3, #2
 8012b62:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8012b64:	4b1f      	ldr	r3, [pc, #124]	; (8012be4 <_UG_FontSelect+0x100>)
 8012b66:	681c      	ldr	r4, [r3, #0]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff f9ad 	bl	8011ec8 <ptr_8to16>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	3302      	adds	r3, #2
 8012b76:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8012b78:	4b1a      	ldr	r3, [pc, #104]	; (8012be4 <_UG_FontSelect+0x100>)
 8012b7a:	681c      	ldr	r4, [r3, #0]
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7ff f9a3 	bl	8011ec8 <ptr_8to16>
 8012b82:	4603      	mov	r3, r0
 8012b84:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	3302      	adds	r3, #2
 8012b8a:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	1c5a      	adds	r2, r3, #1
 8012b90:	607a      	str	r2, [r7, #4]
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d00b      	beq.n	8012bb0 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8012b98:	4b12      	ldr	r3, [pc, #72]	; (8012be4 <_UG_FontSelect+0x100>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8012ba0:	4b10      	ldr	r3, [pc, #64]	; (8012be4 <_UG_FontSelect+0x100>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	4413      	add	r3, r2
 8012bac:	607b      	str	r3, [r7, #4]
 8012bae:	e003      	b.n	8012bb8 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8012bb0:	4b0c      	ldr	r3, [pc, #48]	; (8012be4 <_UG_FontSelect+0x100>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8012bb8:	4b0a      	ldr	r3, [pc, #40]	; (8012be4 <_UG_FontSelect+0x100>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8012bc0:	4b08      	ldr	r3, [pc, #32]	; (8012be4 <_UG_FontSelect+0x100>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012bc6:	005b      	lsls	r3, r3, #1
 8012bc8:	461a      	mov	r2, r3
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	4413      	add	r3, r2
 8012bce:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8012bd0:	4b04      	ldr	r3, [pc, #16]	; (8012be4 <_UG_FontSelect+0x100>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	641a      	str	r2, [r3, #64]	; 0x40
 8012bd8:	e000      	b.n	8012bdc <_UG_FontSelect+0xf8>
    return;
 8012bda:	bf00      	nop
}
 8012bdc:	370c      	adds	r7, #12
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd90      	pop	{r4, r7, pc}
 8012be2:	bf00      	nop
 8012be4:	20001cd8 	.word	0x20001cd8

08012be8 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8012be8:	b5b0      	push	{r4, r5, r7, lr}
 8012bea:	b08c      	sub	sp, #48	; 0x30
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	4604      	mov	r4, r0
 8012bf0:	4608      	mov	r0, r1
 8012bf2:	4611      	mov	r1, r2
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	4623      	mov	r3, r4
 8012bf8:	80fb      	strh	r3, [r7, #6]
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	80bb      	strh	r3, [r7, #4]
 8012bfe:	460b      	mov	r3, r1
 8012c00:	807b      	strh	r3, [r7, #2]
 8012c02:	4613      	mov	r3, r2
 8012c04:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8012c06:	2300      	movs	r3, #0
 8012c08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012c0e:	2300      	movs	r3, #0
 8012c10:	847b      	strh	r3, [r7, #34]	; 0x22
 8012c12:	2300      	movs	r3, #0
 8012c14:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8012c16:	4b8c      	ldr	r3, [pc, #560]	; (8012e48 <_UG_PutChar+0x260>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c1e:	75fb      	strb	r3, [r7, #23]
 8012c20:	4b89      	ldr	r3, [pc, #548]	; (8012e48 <_UG_PutChar+0x260>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012c28:	f003 0302 	and.w	r3, r3, #2
 8012c2c:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8012c32:	f107 0208 	add.w	r2, r7, #8
 8012c36:	88fb      	ldrh	r3, [r7, #6]
 8012c38:	4611      	mov	r1, r2
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7ff fe06 	bl	801284c <_UG_GetCharData>
 8012c40:	4603      	mov	r3, r0
 8012c42:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8012c44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c4c:	d102      	bne.n	8012c54 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8012c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c52:	e226      	b.n	80130a2 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8012c54:	4b7c      	ldr	r3, [pc, #496]	; (8012e48 <_UG_PutChar+0x260>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012c5c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8012c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d101      	bne.n	8012c68 <_UG_PutChar+0x80>
     return 0;
 8012c64:	2300      	movs	r3, #0
 8012c66:	e21c      	b.n	80130a2 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8012c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c6a:	08db      	lsrs	r3, r3, #3
 8012c6c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8012c6e:	4b76      	ldr	r3, [pc, #472]	; (8012e48 <_UG_PutChar+0x260>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012c76:	f003 0307 	and.w	r3, r3, #7
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d002      	beq.n	8012c86 <_UG_PutChar+0x9e>
 8012c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c82:	3301      	adds	r3, #1
 8012c84:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8012c86:	7dbb      	ldrb	r3, [r7, #22]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d01d      	beq.n	8012cc8 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8012c8c:	4b6e      	ldr	r3, [pc, #440]	; (8012e48 <_UG_PutChar+0x260>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c92:	461d      	mov	r5, r3
 8012c94:	88ba      	ldrh	r2, [r7, #4]
 8012c96:	8abb      	ldrh	r3, [r7, #20]
 8012c98:	4413      	add	r3, r2
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	3b01      	subs	r3, #1
 8012c9e:	b29b      	uxth	r3, r3
 8012ca0:	b21c      	sxth	r4, r3
 8012ca2:	4b69      	ldr	r3, [pc, #420]	; (8012e48 <_UG_PutChar+0x260>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	887b      	ldrh	r3, [r7, #2]
 8012cae:	4413      	add	r3, r2
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	b21b      	sxth	r3, r3
 8012cb8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012cbc:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8012cc0:	4622      	mov	r2, r4
 8012cc2:	47a8      	blx	r5
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8012cc8:	4b5f      	ldr	r3, [pc, #380]	; (8012e48 <_UG_PutChar+0x260>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	f040 8172 	bne.w	8012fba <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	853b      	strh	r3, [r7, #40]	; 0x28
 8012cda:	e0ec      	b.n	8012eb6 <_UG_PutChar+0x2ce>
     {
       c=0;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012ce4:	e0df      	b.n	8012ea6 <_UG_PutChar+0x2be>
       {
         b = *data++;
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	1c5a      	adds	r2, r3, #1
 8012cea:	60ba      	str	r2, [r7, #8]
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012cf4:	e0ca      	b.n	8012e8c <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8012cf6:	7f7b      	ldrb	r3, [r7, #29]
 8012cf8:	f003 0301 	and.w	r3, r3, #1
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d033      	beq.n	8012d68 <_UG_PutChar+0x180>
           {
             if(driver)
 8012d00:	7dbb      	ldrb	r3, [r7, #22]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d01f      	beq.n	8012d46 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8012d06:	8c3b      	ldrh	r3, [r7, #32]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00a      	beq.n	8012d22 <_UG_PutChar+0x13a>
 8012d0c:	7dfb      	ldrb	r3, [r7, #23]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d107      	bne.n	8012d22 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8012d12:	8c3a      	ldrh	r2, [r7, #32]
 8012d14:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012d18:	69bb      	ldr	r3, [r7, #24]
 8012d1a:	4610      	mov	r0, r2
 8012d1c:	4798      	blx	r3
                 bpixels=0;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8012d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d10a      	bne.n	8012d3e <_UG_PutChar+0x156>
 8012d28:	7dfb      	ldrb	r3, [r7, #23]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d007      	beq.n	8012d3e <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8012d2e:	88ba      	ldrh	r2, [r7, #4]
 8012d30:	8bfb      	ldrh	r3, [r7, #30]
 8012d32:	4413      	add	r3, r2
 8012d34:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8012d36:	887a      	ldrh	r2, [r7, #2]
 8012d38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012d3a:	4413      	add	r3, r2
 8012d3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8012d3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d40:	3301      	adds	r3, #1
 8012d42:	847b      	strh	r3, [r7, #34]	; 0x22
 8012d44:	e096      	b.n	8012e74 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8012d46:	4b40      	ldr	r3, [pc, #256]	; (8012e48 <_UG_PutChar+0x260>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	88b9      	ldrh	r1, [r7, #4]
 8012d50:	8bfa      	ldrh	r2, [r7, #30]
 8012d52:	440a      	add	r2, r1
 8012d54:	b292      	uxth	r2, r2
 8012d56:	b210      	sxth	r0, r2
 8012d58:	8879      	ldrh	r1, [r7, #2]
 8012d5a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012d5c:	440a      	add	r2, r1
 8012d5e:	b292      	uxth	r2, r2
 8012d60:	b211      	sxth	r1, r2
 8012d62:	883a      	ldrh	r2, [r7, #0]
 8012d64:	4798      	blx	r3
 8012d66:	e085      	b.n	8012e74 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8012d68:	7dbb      	ldrb	r3, [r7, #22]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d06e      	beq.n	8012e4c <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8012d6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d064      	beq.n	8012e3e <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d15e      	bne.n	8012e38 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8012d7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012d7c:	8839      	ldrh	r1, [r7, #0]
 8012d7e:	69bb      	ldr	r3, [r7, #24]
 8012d80:	4610      	mov	r0, r2
 8012d82:	4798      	blx	r3
                   fpixels=0;
 8012d84:	2300      	movs	r3, #0
 8012d86:	847b      	strh	r3, [r7, #34]	; 0x22
 8012d88:	e059      	b.n	8012e3e <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8012d8a:	88ba      	ldrh	r2, [r7, #4]
 8012d8c:	8abb      	ldrh	r3, [r7, #20]
 8012d8e:	4413      	add	r3, r2
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012d94:	1ad3      	subs	r3, r2, r3
 8012d96:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8012d98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012d9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d003      	beq.n	8012daa <_UG_PutChar+0x1c2>
 8012da2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012da4:	89fb      	ldrh	r3, [r7, #14]
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d224      	bcs.n	8012df4 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8012daa:	4b27      	ldr	r3, [pc, #156]	; (8012e48 <_UG_PutChar+0x260>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012db0:	461d      	mov	r5, r3
 8012db2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012db6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012dba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012dbc:	89fb      	ldrh	r3, [r7, #14]
 8012dbe:	4413      	add	r3, r2
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	b29b      	uxth	r3, r3
 8012dc6:	b21c      	sxth	r4, r3
 8012dc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012dca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012dce:	fb92 f3f3 	sdiv	r3, r2, r3
 8012dd2:	b29a      	uxth	r2, r3
 8012dd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012dd6:	4413      	add	r3, r2
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	b21b      	sxth	r3, r3
 8012ddc:	4622      	mov	r2, r4
 8012dde:	47a8      	blx	r5
 8012de0:	4603      	mov	r3, r0
 8012de2:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012de4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012de6:	8839      	ldrh	r1, [r7, #0]
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	4610      	mov	r0, r2
 8012dec:	4798      	blx	r3
                       fpixels=0;
 8012dee:	2300      	movs	r3, #0
 8012df0:	847b      	strh	r3, [r7, #34]	; 0x22
 8012df2:	e021      	b.n	8012e38 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8012df4:	4b14      	ldr	r3, [pc, #80]	; (8012e48 <_UG_PutChar+0x260>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012dfa:	461c      	mov	r4, r3
 8012dfc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012e00:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012e04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e06:	89fb      	ldrh	r3, [r7, #14]
 8012e08:	4413      	add	r3, r2
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	3b01      	subs	r3, #1
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	b21a      	sxth	r2, r3
 8012e12:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8012e16:	47a0      	blx	r4
 8012e18:	4603      	mov	r3, r0
 8012e1a:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012e1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e1e:	8839      	ldrh	r1, [r7, #0]
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	4610      	mov	r0, r2
 8012e24:	4798      	blx	r3
                       fpixels -= width;
 8012e26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e28:	89fb      	ldrh	r3, [r7, #14]
 8012e2a:	1ad3      	subs	r3, r2, r3
 8012e2c:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8012e2e:	88bb      	ldrh	r3, [r7, #4]
 8012e30:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8012e32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012e34:	3301      	adds	r3, #1
 8012e36:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8012e38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d1a5      	bne.n	8012d8a <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8012e3e:	8c3b      	ldrh	r3, [r7, #32]
 8012e40:	3301      	adds	r3, #1
 8012e42:	843b      	strh	r3, [r7, #32]
 8012e44:	e016      	b.n	8012e74 <_UG_PutChar+0x28c>
 8012e46:	bf00      	nop
 8012e48:	20001cd8 	.word	0x20001cd8
             }
             else if(!trans)                           // Not accelerated output
 8012e4c:	7dfb      	ldrb	r3, [r7, #23]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d110      	bne.n	8012e74 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8012e52:	4b96      	ldr	r3, [pc, #600]	; (80130ac <_UG_PutChar+0x4c4>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	88b9      	ldrh	r1, [r7, #4]
 8012e5c:	8bfa      	ldrh	r2, [r7, #30]
 8012e5e:	440a      	add	r2, r1
 8012e60:	b292      	uxth	r2, r2
 8012e62:	b210      	sxth	r0, r2
 8012e64:	8879      	ldrh	r1, [r7, #2]
 8012e66:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012e68:	440a      	add	r2, r1
 8012e6a:	b292      	uxth	r2, r2
 8012e6c:	b211      	sxth	r1, r2
 8012e6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012e72:	4798      	blx	r3
             }
           }
           b >>= 1;
 8012e74:	7f7b      	ldrb	r3, [r7, #29]
 8012e76:	085b      	lsrs	r3, r3, #1
 8012e78:	777b      	strb	r3, [r7, #29]
           c++;
 8012e7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	3301      	adds	r3, #1
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012e86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e88:	3301      	adds	r3, #1
 8012e8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012e8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e8e:	2b07      	cmp	r3, #7
 8012e90:	d806      	bhi.n	8012ea0 <_UG_PutChar+0x2b8>
 8012e92:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012e96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	f6ff af2b 	blt.w	8012cf6 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8012ea0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012ea6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8012ea8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	f4ff af1b 	bcc.w	8012ce6 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012eb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	853b      	strh	r3, [r7, #40]	; 0x28
 8012eb6:	4b7d      	ldr	r3, [pc, #500]	; (80130ac <_UG_PutChar+0x4c4>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012ebe:	b29b      	uxth	r3, r3
 8012ec0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	f4ff af0a 	bcc.w	8012cdc <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8012ec8:	7dbb      	ldrb	r3, [r7, #22]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f000 80e7 	beq.w	801309e <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8012ed0:	8c3b      	ldrh	r3, [r7, #32]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d009      	beq.n	8012eea <_UG_PutChar+0x302>
 8012ed6:	7dfb      	ldrb	r3, [r7, #23]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d106      	bne.n	8012eea <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8012edc:	8c3a      	ldrh	r2, [r7, #32]
 8012ede:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	4610      	mov	r0, r2
 8012ee6:	4798      	blx	r3
 8012ee8:	e0d9      	b.n	801309e <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8012eea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f000 80d6 	beq.w	801309e <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8012ef2:	7dfb      	ldrb	r3, [r7, #23]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d15c      	bne.n	8012fb2 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8012ef8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012efa:	8839      	ldrh	r1, [r7, #0]
 8012efc:	69bb      	ldr	r3, [r7, #24]
 8012efe:	4610      	mov	r0, r2
 8012f00:	4798      	blx	r3
 8012f02:	e0cc      	b.n	801309e <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8012f04:	88ba      	ldrh	r2, [r7, #4]
 8012f06:	8abb      	ldrh	r3, [r7, #20]
 8012f08:	4413      	add	r3, r2
 8012f0a:	b29a      	uxth	r2, r3
 8012f0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f0e:	1ad3      	subs	r3, r2, r3
 8012f10:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8012f12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d003      	beq.n	8012f24 <_UG_PutChar+0x33c>
 8012f1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f1e:	8a3b      	ldrh	r3, [r7, #16]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d224      	bcs.n	8012f6e <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8012f24:	4b61      	ldr	r3, [pc, #388]	; (80130ac <_UG_PutChar+0x4c4>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f2a:	461d      	mov	r5, r3
 8012f2c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012f30:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012f34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f36:	8a3b      	ldrh	r3, [r7, #16]
 8012f38:	4413      	add	r3, r2
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	3b01      	subs	r3, #1
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	b21c      	sxth	r4, r3
 8012f42:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012f48:	fb92 f3f3 	sdiv	r3, r2, r3
 8012f4c:	b29a      	uxth	r2, r3
 8012f4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f50:	4413      	add	r3, r2
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	b21b      	sxth	r3, r3
 8012f56:	4622      	mov	r2, r4
 8012f58:	47a8      	blx	r5
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8012f5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f60:	8839      	ldrh	r1, [r7, #0]
 8012f62:	69bb      	ldr	r3, [r7, #24]
 8012f64:	4610      	mov	r0, r2
 8012f66:	4798      	blx	r3
               fpixels=0;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8012f6c:	e021      	b.n	8012fb2 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8012f6e:	4b4f      	ldr	r3, [pc, #316]	; (80130ac <_UG_PutChar+0x4c4>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f74:	461c      	mov	r4, r3
 8012f76:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012f7a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012f7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f80:	8a3b      	ldrh	r3, [r7, #16]
 8012f82:	4413      	add	r3, r2
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	3b01      	subs	r3, #1
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	b21a      	sxth	r2, r3
 8012f8c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8012f90:	47a0      	blx	r4
 8012f92:	4603      	mov	r3, r0
 8012f94:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8012f96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f98:	8839      	ldrh	r1, [r7, #0]
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	4610      	mov	r0, r2
 8012f9e:	4798      	blx	r3
               fpixels -= width;
 8012fa0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fa2:	8a3b      	ldrh	r3, [r7, #16]
 8012fa4:	1ad3      	subs	r3, r2, r3
 8012fa6:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8012fa8:	88bb      	ldrh	r3, [r7, #4]
 8012faa:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8012fac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012fae:	3301      	adds	r3, #1
 8012fb0:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8012fb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d1a5      	bne.n	8012f04 <_UG_PutChar+0x31c>
 8012fb8:	e071      	b.n	801309e <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8012fba:	4b3c      	ldr	r3, [pc, #240]	; (80130ac <_UG_PutChar+0x4c4>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	d16b      	bne.n	801309e <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	853b      	strh	r3, [r7, #40]	; 0x28
 8012fca:	e060      	b.n	801308e <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8012fcc:	2300      	movs	r3, #0
 8012fce:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012fd0:	e04a      	b.n	8013068 <_UG_PutChar+0x480>
       {
         b = *data++;
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	1c5a      	adds	r2, r3, #1
 8012fd6:	60ba      	str	r2, [r7, #8]
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8012fdc:	883b      	ldrh	r3, [r7, #0]
 8012fde:	b2db      	uxtb	r3, r3
 8012fe0:	7f7a      	ldrb	r2, [r7, #29]
 8012fe2:	fb03 f202 	mul.w	r2, r3, r2
 8012fe6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012fea:	b2db      	uxtb	r3, r3
 8012fec:	7f79      	ldrb	r1, [r7, #29]
 8012fee:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8012ff2:	fb01 f303 	mul.w	r3, r1, r3
 8012ff6:	4413      	add	r3, r2
 8012ff8:	121b      	asrs	r3, r3, #8
 8012ffa:	b21b      	sxth	r3, r3
 8012ffc:	b2db      	uxtb	r3, r3
 8012ffe:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8013000:	883b      	ldrh	r3, [r7, #0]
 8013002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013006:	7f79      	ldrb	r1, [r7, #29]
 8013008:	fb03 f101 	mul.w	r1, r3, r1
 801300c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013010:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013014:	7f78      	ldrb	r0, [r7, #29]
 8013016:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801301a:	fb00 f303 	mul.w	r3, r0, r3
 801301e:	440b      	add	r3, r1
 8013020:	121b      	asrs	r3, r3, #8
 8013022:	b21b      	sxth	r3, r3
 8013024:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013028:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 801302a:	4313      	orrs	r3, r2
 801302c:	b21b      	sxth	r3, r3
 801302e:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8013030:	7dbb      	ldrb	r3, [r7, #22]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d005      	beq.n	8013042 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8013036:	8a7a      	ldrh	r2, [r7, #18]
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	4611      	mov	r1, r2
 801303c:	2001      	movs	r0, #1
 801303e:	4798      	blx	r3
 8013040:	e00f      	b.n	8013062 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8013042:	4b1a      	ldr	r3, [pc, #104]	; (80130ac <_UG_PutChar+0x4c4>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	685b      	ldr	r3, [r3, #4]
 801304a:	88b9      	ldrh	r1, [r7, #4]
 801304c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801304e:	440a      	add	r2, r1
 8013050:	b292      	uxth	r2, r2
 8013052:	b210      	sxth	r0, r2
 8013054:	8879      	ldrh	r1, [r7, #2]
 8013056:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013058:	440a      	add	r2, r1
 801305a:	b292      	uxth	r2, r2
 801305c:	b211      	sxth	r1, r2
 801305e:	8a7a      	ldrh	r2, [r7, #18]
 8013060:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8013062:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013064:	3301      	adds	r3, #1
 8013066:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013068:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801306a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801306e:	429a      	cmp	r2, r3
 8013070:	dbaf      	blt.n	8012fd2 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	4a0d      	ldr	r2, [pc, #52]	; (80130ac <_UG_PutChar+0x4c4>)
 8013076:	6812      	ldr	r2, [r2, #0]
 8013078:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 801307c:	4611      	mov	r1, r2
 801307e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8013082:	1a8a      	subs	r2, r1, r2
 8013084:	4413      	add	r3, r2
 8013086:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013088:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801308a:	3301      	adds	r3, #1
 801308c:	853b      	strh	r3, [r7, #40]	; 0x28
 801308e:	4b07      	ldr	r3, [pc, #28]	; (80130ac <_UG_PutChar+0x4c4>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013096:	b29b      	uxth	r3, r3
 8013098:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801309a:	429a      	cmp	r2, r3
 801309c:	d396      	bcc.n	8012fcc <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 801309e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3730      	adds	r7, #48	; 0x30
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bdb0      	pop	{r4, r5, r7, pc}
 80130aa:	bf00      	nop
 80130ac:	20001cd8 	.word	0x20001cd8

080130b0 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80130b0:	b480      	push	{r7}
 80130b2:	b089      	sub	sp, #36	; 0x24
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80130b8:	4b57      	ldr	r3, [pc, #348]	; (8013218 <_UG_ProcessTouchData+0x168>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	88db      	ldrh	r3, [r3, #6]
 80130be:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 80130c0:	4b55      	ldr	r3, [pc, #340]	; (8013218 <_UG_ProcessTouchData+0x168>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	891b      	ldrh	r3, [r3, #8]
 80130c6:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 80130c8:	4b53      	ldr	r3, [pc, #332]	; (8013218 <_UG_ProcessTouchData+0x168>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	791b      	ldrb	r3, [r3, #4]
 80130ce:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80130d6:	2300      	movs	r3, #0
 80130d8:	83fb      	strh	r3, [r7, #30]
 80130da:	e090      	b.n	80131fe <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	685a      	ldr	r2, [r3, #4]
 80130e0:	8bfb      	ldrh	r3, [r7, #30]
 80130e2:	015b      	lsls	r3, r3, #5
 80130e4:	4413      	add	r3, r2
 80130e6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	785b      	ldrb	r3, [r3, #1]
 80130f2:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80130f4:	7bfb      	ldrb	r3, [r7, #15]
 80130f6:	f003 0301 	and.w	r3, r3, #1
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d179      	bne.n	80131f2 <_UG_ProcessTouchData+0x142>
 80130fe:	7bfb      	ldrb	r3, [r7, #15]
 8013100:	f003 0302 	and.w	r3, r3, #2
 8013104:	2b00      	cmp	r3, #0
 8013106:	d074      	beq.n	80131f2 <_UG_ProcessTouchData+0x142>
 8013108:	7bfb      	ldrb	r3, [r7, #15]
 801310a:	f003 0308 	and.w	r3, r3, #8
 801310e:	2b00      	cmp	r3, #0
 8013110:	d06f      	beq.n	80131f2 <_UG_ProcessTouchData+0x142>
 8013112:	7bfb      	ldrb	r3, [r7, #15]
 8013114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013118:	2b00      	cmp	r3, #0
 801311a:	d16a      	bne.n	80131f2 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 801311c:	7dfb      	ldrb	r3, [r7, #23]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d047      	beq.n	80131b2 <_UG_ProcessTouchData+0x102>
 8013122:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801312a:	d042      	beq.n	80131b2 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 801312c:	7f7b      	ldrb	r3, [r7, #29]
 801312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013132:	2b00      	cmp	r3, #0
 8013134:	d107      	bne.n	8013146 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8013136:	7f7b      	ldrb	r3, [r7, #29]
 8013138:	f043 0305 	orr.w	r3, r3, #5
 801313c:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 801313e:	7f7b      	ldrb	r3, [r7, #29]
 8013140:	f023 0318 	bic.w	r3, r3, #24
 8013144:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013146:	7f7b      	ldrb	r3, [r7, #29]
 8013148:	f023 0320 	bic.w	r3, r3, #32
 801314c:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013154:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013158:	429a      	cmp	r2, r3
 801315a:	db25      	blt.n	80131a8 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013162:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013166:	429a      	cmp	r2, r3
 8013168:	dc1e      	bgt.n	80131a8 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013170:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013174:	429a      	cmp	r2, r3
 8013176:	db17      	blt.n	80131a8 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8013178:	693b      	ldr	r3, [r7, #16]
 801317a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801317e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013182:	429a      	cmp	r2, r3
 8013184:	dc10      	bgt.n	80131a8 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013186:	7f7b      	ldrb	r3, [r7, #29]
 8013188:	f043 0320 	orr.w	r3, r3, #32
 801318c:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 801318e:	7f7b      	ldrb	r3, [r7, #29]
 8013190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013194:	2b00      	cmp	r3, #0
 8013196:	d107      	bne.n	80131a8 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8013198:	7f7b      	ldrb	r3, [r7, #29]
 801319a:	f023 0304 	bic.w	r3, r3, #4
 801319e:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80131a0:	7f7b      	ldrb	r3, [r7, #29]
 80131a2:	f043 0302 	orr.w	r3, r3, #2
 80131a6:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80131a8:	7f7b      	ldrb	r3, [r7, #29]
 80131aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131ae:	777b      	strb	r3, [r7, #29]
 80131b0:	e01f      	b.n	80131f2 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80131b2:	7f7b      	ldrb	r3, [r7, #29]
 80131b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d01a      	beq.n	80131f2 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80131bc:	7f7b      	ldrb	r3, [r7, #29]
 80131be:	f003 0320 	and.w	r3, r3, #32
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d004      	beq.n	80131d0 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80131c6:	7f7b      	ldrb	r3, [r7, #29]
 80131c8:	f043 0308 	orr.w	r3, r3, #8
 80131cc:	777b      	strb	r3, [r7, #29]
 80131ce:	e003      	b.n	80131d8 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 80131d0:	7f7b      	ldrb	r3, [r7, #29]
 80131d2:	f043 0310 	orr.w	r3, r3, #16
 80131d6:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80131d8:	7f7b      	ldrb	r3, [r7, #29]
 80131da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d003      	beq.n	80131ea <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80131e2:	7f7b      	ldrb	r3, [r7, #29]
 80131e4:	f043 0301 	orr.w	r3, r3, #1
 80131e8:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80131ea:	7f7b      	ldrb	r3, [r7, #29]
 80131ec:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 80131f0:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	7f7a      	ldrb	r2, [r7, #29]
 80131f6:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80131f8:	8bfb      	ldrh	r3, [r7, #30]
 80131fa:	3301      	adds	r3, #1
 80131fc:	83fb      	strh	r3, [r7, #30]
 80131fe:	8bfa      	ldrh	r2, [r7, #30]
 8013200:	8abb      	ldrh	r3, [r7, #20]
 8013202:	429a      	cmp	r2, r3
 8013204:	f4ff af6a 	bcc.w	80130dc <_UG_ProcessTouchData+0x2c>
   }
}
 8013208:	bf00      	nop
 801320a:	bf00      	nop
 801320c:	3724      	adds	r7, #36	; 0x24
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	20001cd8 	.word	0x20001cd8

0801321c <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b086      	sub	sp, #24
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 801322a:	2300      	movs	r3, #0
 801322c:	82fb      	strh	r3, [r7, #22]
 801322e:	e035      	b.n	801329c <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	685a      	ldr	r2, [r3, #4]
 8013234:	8afb      	ldrh	r3, [r7, #22]
 8013236:	015b      	lsls	r3, r3, #5
 8013238:	4413      	add	r3, r2
 801323a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	785b      	ldrb	r3, [r3, #1]
 8013246:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8013248:	7bfb      	ldrb	r3, [r7, #15]
 801324a:	f003 0301 	and.w	r3, r3, #1
 801324e:	2b00      	cmp	r3, #0
 8013250:	d121      	bne.n	8013296 <_UG_UpdateObjects+0x7a>
 8013252:	7bfb      	ldrb	r3, [r7, #15]
 8013254:	f003 0302 	and.w	r3, r3, #2
 8013258:	2b00      	cmp	r3, #0
 801325a:	d01c      	beq.n	8013296 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 801325c:	7bfb      	ldrb	r3, [r7, #15]
 801325e:	f003 0320 	and.w	r3, r3, #32
 8013262:	2b00      	cmp	r3, #0
 8013264:	d004      	beq.n	8013270 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	685b      	ldr	r3, [r3, #4]
 801326a:	6939      	ldr	r1, [r7, #16]
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8013270:	7bfb      	ldrb	r3, [r7, #15]
 8013272:	f003 0308 	and.w	r3, r3, #8
 8013276:	2b00      	cmp	r3, #0
 8013278:	d00d      	beq.n	8013296 <_UG_UpdateObjects+0x7a>
 801327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801327e:	2b00      	cmp	r3, #0
 8013280:	da09      	bge.n	8013296 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8013282:	7bbb      	ldrb	r3, [r7, #14]
 8013284:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8013288:	2b00      	cmp	r3, #0
 801328a:	d004      	beq.n	8013296 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	685b      	ldr	r3, [r3, #4]
 8013290:	6939      	ldr	r1, [r7, #16]
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8013296:	8afb      	ldrh	r3, [r7, #22]
 8013298:	3301      	adds	r3, #1
 801329a:	82fb      	strh	r3, [r7, #22]
 801329c:	8afa      	ldrh	r2, [r7, #22]
 801329e:	8abb      	ldrh	r3, [r7, #20]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d3c5      	bcc.n	8013230 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 80132a4:	bf00      	nop
 80132a6:	bf00      	nop
 80132a8:	3718      	adds	r7, #24
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
	...

080132b0 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b086      	sub	sp, #24
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80132b8:	4b22      	ldr	r3, [pc, #136]	; (8013344 <_UG_HandleEvents+0x94>)
 80132ba:	2200      	movs	r2, #0
 80132bc:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80132be:	4b21      	ldr	r3, [pc, #132]	; (8013344 <_UG_HandleEvents+0x94>)
 80132c0:	2202      	movs	r2, #2
 80132c2:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80132ca:	2300      	movs	r3, #0
 80132cc:	82fb      	strh	r3, [r7, #22]
 80132ce:	e02f      	b.n	8013330 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	685a      	ldr	r2, [r3, #4]
 80132d4:	8afb      	ldrh	r3, [r7, #22]
 80132d6:	015b      	lsls	r3, r3, #5
 80132d8:	4413      	add	r3, r2
 80132da:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80132e2:	7bfb      	ldrb	r3, [r7, #15]
 80132e4:	f003 0301 	and.w	r3, r3, #1
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d11e      	bne.n	801332a <_UG_HandleEvents+0x7a>
 80132ec:	7bfb      	ldrb	r3, [r7, #15]
 80132ee:	f003 0302 	and.w	r3, r3, #2
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d019      	beq.n	801332a <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	7e9b      	ldrb	r3, [r3, #26]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d015      	beq.n	801332a <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80132fe:	4a11      	ldr	r2, [pc, #68]	; (8013344 <_UG_HandleEvents+0x94>)
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	7e1a      	ldrb	r2, [r3, #24]
 8013308:	4b0e      	ldr	r3, [pc, #56]	; (8013344 <_UG_HandleEvents+0x94>)
 801330a:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	7e5a      	ldrb	r2, [r3, #25]
 8013310:	4b0c      	ldr	r3, [pc, #48]	; (8013344 <_UG_HandleEvents+0x94>)
 8013312:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	7e9a      	ldrb	r2, [r3, #26]
 8013318:	4b0a      	ldr	r3, [pc, #40]	; (8013344 <_UG_HandleEvents+0x94>)
 801331a:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013320:	4808      	ldr	r0, [pc, #32]	; (8013344 <_UG_HandleEvents+0x94>)
 8013322:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	2200      	movs	r2, #0
 8013328:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 801332a:	8afb      	ldrh	r3, [r7, #22]
 801332c:	3301      	adds	r3, #1
 801332e:	82fb      	strh	r3, [r7, #22]
 8013330:	8afa      	ldrh	r2, [r7, #22]
 8013332:	8abb      	ldrh	r3, [r7, #20]
 8013334:	429a      	cmp	r2, r3
 8013336:	d3cb      	bcc.n	80132d0 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8013338:	bf00      	nop
 801333a:	bf00      	nop
 801333c:	3718      	adds	r7, #24
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	20001cec 	.word	0x20001cec

08013348 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8013348:	b590      	push	{r4, r7, lr}
 801334a:	b08f      	sub	sp, #60	; 0x3c
 801334c:	af02      	add	r7, sp, #8
 801334e:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	2b00      	cmp	r3, #0
 8013356:	f000 812c 	beq.w	80135b2 <_UG_PutText+0x26a>
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	f000 8127 	beq.w	80135b2 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	89db      	ldrh	r3, [r3, #14]
 8013368:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	895b      	ldrh	r3, [r3, #10]
 801336e:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	3302      	adds	r3, #2
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 801337a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801337e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013382:	1ad2      	subs	r2, r2, r3
 8013384:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013388:	429a      	cmp	r2, r3
 801338a:	f2c0 8114 	blt.w	80135b6 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	891b      	ldrh	r3, [r3, #8]
 8013392:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	899b      	ldrh	r3, [r3, #12]
 8013398:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	7d1b      	ldrb	r3, [r3, #20]
 801339e:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	8adb      	ldrh	r3, [r3, #22]
 80133a4:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	8b1b      	ldrh	r3, [r3, #24]
 80133aa:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	60fb      	str	r3, [r7, #12]
   char* c = str;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7ff fb92 	bl	8012ae4 <_UG_FontSelect>

   rc=1;
 80133c0:	2301      	movs	r3, #1
 80133c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80133c8:	4b80      	ldr	r3, [pc, #512]	; (80135cc <_UG_PutText+0x284>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d107      	bne.n	80133e4 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 80133d4:	f107 0308 	add.w	r3, r7, #8
 80133d8:	4618      	mov	r0, r3
 80133da:	f7ff f9bf 	bl	801275c <_UG_DecodeUTF8>
 80133de:	4603      	mov	r3, r0
 80133e0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80133e2:	e004      	b.n	80133ee <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	1c5a      	adds	r2, r3, #1
 80133e8:	60ba      	str	r2, [r7, #8]
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80133ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d006      	beq.n	8013402 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 80133f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133f6:	2b0a      	cmp	r3, #10
 80133f8:	d1e6      	bne.n	80133c8 <_UG_PutText+0x80>
 80133fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80133fc:	3301      	adds	r3, #1
 80133fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013400:	e7e2      	b.n	80133c8 <_UG_PutText+0x80>
     if(!chr) break;
 8013402:	bf00      	nop
   }

   yp = 0;
 8013404:	2300      	movs	r3, #0
 8013406:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8013408:	7e7b      	ldrb	r3, [r7, #25]
 801340a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801340e:	2b00      	cmp	r3, #0
 8013410:	d01f      	beq.n	8013452 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8013412:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013414:	8c3b      	ldrh	r3, [r7, #32]
 8013416:	1ad3      	subs	r3, r2, r3
 8013418:	b29b      	uxth	r3, r3
 801341a:	3301      	adds	r3, #1
 801341c:	b29b      	uxth	r3, r3
 801341e:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8013420:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013422:	8bfb      	ldrh	r3, [r7, #30]
 8013424:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8013426:	fb11 f303 	smulbb	r3, r1, r3
 801342a:	b29b      	uxth	r3, r3
 801342c:	1ad3      	subs	r3, r2, r3
 801342e:	b29b      	uxth	r3, r3
 8013430:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8013432:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013434:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013436:	3b01      	subs	r3, #1
 8013438:	b299      	uxth	r1, r3
 801343a:	8abb      	ldrh	r3, [r7, #20]
 801343c:	fb11 f303 	smulbb	r3, r1, r3
 8013440:	b29b      	uxth	r3, r3
 8013442:	1ad3      	subs	r3, r2, r3
 8013444:	b29b      	uxth	r3, r3
 8013446:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8013448:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801344c:	2b00      	cmp	r3, #0
 801344e:	f2c0 80b4 	blt.w	80135ba <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8013452:	7e7b      	ldrb	r3, [r7, #25]
 8013454:	f003 0310 	and.w	r3, r3, #16
 8013458:	2b00      	cmp	r3, #0
 801345a:	d003      	beq.n	8013464 <_UG_PutText+0x11c>
 801345c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013460:	105b      	asrs	r3, r3, #1
 8013462:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8013464:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013466:	8c3b      	ldrh	r3, [r7, #32]
 8013468:	4413      	add	r3, r2
 801346a:	b29b      	uxth	r3, r3
 801346c:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 801346e:	2300      	movs	r3, #0
 8013470:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8013476:	2300      	movs	r3, #0
 8013478:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801347a:	4b54      	ldr	r3, [pc, #336]	; (80135cc <_UG_PutText+0x284>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013482:	2b00      	cmp	r3, #0
 8013484:	d107      	bne.n	8013496 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8013486:	f107 0308 	add.w	r3, r7, #8
 801348a:	4618      	mov	r0, r3
 801348c:	f7ff f966 	bl	801275c <_UG_DecodeUTF8>
 8013490:	4603      	mov	r3, r0
 8013492:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013494:	e004      	b.n	80134a0 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	1c5a      	adds	r2, r3, #1
 801349a:	60ba      	str	r2, [r7, #8]
 801349c:	781b      	ldrb	r3, [r3, #0]
 801349e:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 80134a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d01b      	beq.n	80134de <_UG_PutText+0x196>
 80134a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134a8:	2b0a      	cmp	r3, #10
 80134aa:	d018      	beq.n	80134de <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 80134ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134ae:	2100      	movs	r1, #0
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7ff f9cb 	bl	801284c <_UG_GetCharData>
 80134b6:	4603      	mov	r3, r0
 80134b8:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 80134ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80134be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134c2:	d00a      	beq.n	80134da <_UG_PutText+0x192>
         sl++;
 80134c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80134c6:	3301      	adds	r3, #1
 80134c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 80134ca:	8a7a      	ldrh	r2, [r7, #18]
 80134cc:	8afb      	ldrh	r3, [r7, #22]
 80134ce:	4413      	add	r3, r2
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80134d4:	4413      	add	r3, r2
 80134d6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80134d8:	e7cf      	b.n	801347a <_UG_PutText+0x132>
         if (w == -1){continue;}
 80134da:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80134dc:	e7cd      	b.n	801347a <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 80134de:	8afb      	ldrh	r3, [r7, #22]
 80134e0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80134e2:	1ad3      	subs	r3, r2, r3
 80134e4:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 80134e6:	8b7a      	ldrh	r2, [r7, #26]
 80134e8:	8bbb      	ldrh	r3, [r7, #28]
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	b29b      	uxth	r3, r3
 80134ee:	3301      	adds	r3, #1
 80134f0:	b29b      	uxth	r3, r3
 80134f2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 80134f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80134f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80134f8:	1ad3      	subs	r3, r2, r3
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 80134fe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8013502:	2b00      	cmp	r3, #0
 8013504:	db5b      	blt.n	80135be <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8013506:	7e7b      	ldrb	r3, [r7, #25]
 8013508:	f003 0301 	and.w	r3, r3, #1
 801350c:	2b00      	cmp	r3, #0
 801350e:	d002      	beq.n	8013516 <_UG_PutText+0x1ce>
 8013510:	2300      	movs	r3, #0
 8013512:	853b      	strh	r3, [r7, #40]	; 0x28
 8013514:	e008      	b.n	8013528 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8013516:	7e7b      	ldrb	r3, [r7, #25]
 8013518:	f003 0302 	and.w	r3, r3, #2
 801351c:	2b00      	cmp	r3, #0
 801351e:	d003      	beq.n	8013528 <_UG_PutText+0x1e0>
 8013520:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8013524:	105b      	asrs	r3, r3, #1
 8013526:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8013528:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801352a:	8bbb      	ldrh	r3, [r7, #28]
 801352c:	4413      	add	r3, r2
 801352e:	b29b      	uxth	r3, r3
 8013530:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013532:	4b26      	ldr	r3, [pc, #152]	; (80135cc <_UG_PutText+0x284>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801353a:	2b00      	cmp	r3, #0
 801353c:	d107      	bne.n	801354e <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 801353e:	f107 030c 	add.w	r3, r7, #12
 8013542:	4618      	mov	r0, r3
 8013544:	f7ff f90a 	bl	801275c <_UG_DecodeUTF8>
 8013548:	4603      	mov	r3, r0
 801354a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801354c:	e004      	b.n	8013558 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	1c5a      	adds	r2, r3, #1
 8013552:	60fa      	str	r2, [r7, #12]
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8013558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801355a:	2b00      	cmp	r3, #0
 801355c:	d031      	beq.n	80135c2 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 801355e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013560:	2b0a      	cmp	r3, #10
 8013562:	d01c      	beq.n	801359e <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	8a1c      	ldrh	r4, [r3, #16]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	8a5b      	ldrh	r3, [r3, #18]
 801356c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8013570:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8013574:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8013576:	9300      	str	r3, [sp, #0]
 8013578:	4623      	mov	r3, r4
 801357a:	f7ff fb35 	bl	8012be8 <_UG_PutChar>
 801357e:	4603      	mov	r3, r0
 8013580:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8013582:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801358a:	d0d2      	beq.n	8013532 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 801358c:	8a7a      	ldrh	r2, [r7, #18]
 801358e:	8afb      	ldrh	r3, [r7, #22]
 8013590:	4413      	add	r3, r2
 8013592:	b29a      	uxth	r2, r3
 8013594:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013596:	4413      	add	r3, r2
 8013598:	b29b      	uxth	r3, r3
 801359a:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801359c:	e7c9      	b.n	8013532 <_UG_PutText+0x1ea>
           break;
 801359e:	bf00      	nop
      }
      yp += char_height + char_v_space;
 80135a0:	8bfa      	ldrh	r2, [r7, #30]
 80135a2:	8abb      	ldrh	r3, [r7, #20]
 80135a4:	4413      	add	r3, r2
 80135a6:	b29a      	uxth	r2, r3
 80135a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135aa:	4413      	add	r3, r2
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 80135b0:	e75d      	b.n	801346e <_UG_PutText+0x126>
     return;
 80135b2:	bf00      	nop
 80135b4:	e006      	b.n	80135c4 <_UG_PutText+0x27c>
     return;
 80135b6:	bf00      	nop
 80135b8:	e004      	b.n	80135c4 <_UG_PutText+0x27c>
        return;
 80135ba:	bf00      	nop
 80135bc:	e002      	b.n	80135c4 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 80135be:	bf00      	nop
 80135c0:	e000      	b.n	80135c4 <_UG_PutText+0x27c>
           return;
 80135c2:	bf00      	nop
   }
}
 80135c4:	3734      	adds	r7, #52	; 0x34
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd90      	pop	{r4, r7, pc}
 80135ca:	bf00      	nop
 80135cc:	20001cd8 	.word	0x20001cd8

080135d0 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80135d0:	b5b0      	push	{r4, r5, r7, lr}
 80135d2:	b084      	sub	sp, #16
 80135d4:	af02      	add	r7, sp, #8
 80135d6:	4604      	mov	r4, r0
 80135d8:	4608      	mov	r0, r1
 80135da:	4611      	mov	r1, r2
 80135dc:	461a      	mov	r2, r3
 80135de:	4623      	mov	r3, r4
 80135e0:	80fb      	strh	r3, [r7, #6]
 80135e2:	4603      	mov	r3, r0
 80135e4:	80bb      	strh	r3, [r7, #4]
 80135e6:	460b      	mov	r3, r1
 80135e8:	807b      	strh	r3, [r7, #2]
 80135ea:	4613      	mov	r3, r2
 80135ec:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80135ee:	887b      	ldrh	r3, [r7, #2]
 80135f0:	3b01      	subs	r3, #1
 80135f2:	b29b      	uxth	r3, r3
 80135f4:	b21c      	sxth	r4, r3
 80135f6:	69bb      	ldr	r3, [r7, #24]
 80135f8:	1c9a      	adds	r2, r3, #2
 80135fa:	61ba      	str	r2, [r7, #24]
 80135fc:	881b      	ldrh	r3, [r3, #0]
 80135fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013602:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8013606:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	4613      	mov	r3, r2
 801360e:	4622      	mov	r2, r4
 8013610:	f7fe fee0 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8013614:	88bb      	ldrh	r3, [r7, #4]
 8013616:	3301      	adds	r3, #1
 8013618:	b29b      	uxth	r3, r3
 801361a:	b219      	sxth	r1, r3
 801361c:	883b      	ldrh	r3, [r7, #0]
 801361e:	3b01      	subs	r3, #1
 8013620:	b29b      	uxth	r3, r3
 8013622:	b21c      	sxth	r4, r3
 8013624:	69bb      	ldr	r3, [r7, #24]
 8013626:	1c9a      	adds	r2, r3, #2
 8013628:	61ba      	str	r2, [r7, #24]
 801362a:	881b      	ldrh	r3, [r3, #0]
 801362c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013630:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8013634:	9300      	str	r3, [sp, #0]
 8013636:	4623      	mov	r3, r4
 8013638:	f7fe fecc 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	1c9a      	adds	r2, r3, #2
 8013640:	61ba      	str	r2, [r7, #24]
 8013642:	881b      	ldrh	r3, [r3, #0]
 8013644:	f9b7 4000 	ldrsh.w	r4, [r7]
 8013648:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801364c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8013650:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8013654:	9300      	str	r3, [sp, #0]
 8013656:	4623      	mov	r3, r4
 8013658:	f7fe febc 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 801365c:	883b      	ldrh	r3, [r7, #0]
 801365e:	3b01      	subs	r3, #1
 8013660:	b29b      	uxth	r3, r3
 8013662:	b21c      	sxth	r4, r3
 8013664:	69bb      	ldr	r3, [r7, #24]
 8013666:	1c9a      	adds	r2, r3, #2
 8013668:	61ba      	str	r2, [r7, #24]
 801366a:	881b      	ldrh	r3, [r3, #0]
 801366c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013670:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8013674:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8013678:	9300      	str	r3, [sp, #0]
 801367a:	4623      	mov	r3, r4
 801367c:	f7fe feaa 	bl	80123d4 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8013680:	88fb      	ldrh	r3, [r7, #6]
 8013682:	3301      	adds	r3, #1
 8013684:	b29b      	uxth	r3, r3
 8013686:	b218      	sxth	r0, r3
 8013688:	88bb      	ldrh	r3, [r7, #4]
 801368a:	3301      	adds	r3, #1
 801368c:	b29b      	uxth	r3, r3
 801368e:	b219      	sxth	r1, r3
 8013690:	887b      	ldrh	r3, [r7, #2]
 8013692:	3b02      	subs	r3, #2
 8013694:	b29b      	uxth	r3, r3
 8013696:	b21c      	sxth	r4, r3
 8013698:	88bb      	ldrh	r3, [r7, #4]
 801369a:	3301      	adds	r3, #1
 801369c:	b29b      	uxth	r3, r3
 801369e:	b21d      	sxth	r5, r3
 80136a0:	69bb      	ldr	r3, [r7, #24]
 80136a2:	1c9a      	adds	r2, r3, #2
 80136a4:	61ba      	str	r2, [r7, #24]
 80136a6:	881b      	ldrh	r3, [r3, #0]
 80136a8:	9300      	str	r3, [sp, #0]
 80136aa:	462b      	mov	r3, r5
 80136ac:	4622      	mov	r2, r4
 80136ae:	f7fe fe91 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 80136b2:	88fb      	ldrh	r3, [r7, #6]
 80136b4:	3301      	adds	r3, #1
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	b218      	sxth	r0, r3
 80136ba:	88bb      	ldrh	r3, [r7, #4]
 80136bc:	3302      	adds	r3, #2
 80136be:	b29b      	uxth	r3, r3
 80136c0:	b219      	sxth	r1, r3
 80136c2:	88fb      	ldrh	r3, [r7, #6]
 80136c4:	3301      	adds	r3, #1
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	b21c      	sxth	r4, r3
 80136ca:	883b      	ldrh	r3, [r7, #0]
 80136cc:	3b02      	subs	r3, #2
 80136ce:	b29b      	uxth	r3, r3
 80136d0:	b21d      	sxth	r5, r3
 80136d2:	69bb      	ldr	r3, [r7, #24]
 80136d4:	1c9a      	adds	r2, r3, #2
 80136d6:	61ba      	str	r2, [r7, #24]
 80136d8:	881b      	ldrh	r3, [r3, #0]
 80136da:	9300      	str	r3, [sp, #0]
 80136dc:	462b      	mov	r3, r5
 80136de:	4622      	mov	r2, r4
 80136e0:	f7fe fe78 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80136e4:	88fb      	ldrh	r3, [r7, #6]
 80136e6:	3301      	adds	r3, #1
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	b218      	sxth	r0, r3
 80136ec:	883b      	ldrh	r3, [r7, #0]
 80136ee:	3b01      	subs	r3, #1
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	b219      	sxth	r1, r3
 80136f4:	887b      	ldrh	r3, [r7, #2]
 80136f6:	3b01      	subs	r3, #1
 80136f8:	b29b      	uxth	r3, r3
 80136fa:	b21c      	sxth	r4, r3
 80136fc:	883b      	ldrh	r3, [r7, #0]
 80136fe:	3b01      	subs	r3, #1
 8013700:	b29b      	uxth	r3, r3
 8013702:	b21d      	sxth	r5, r3
 8013704:	69bb      	ldr	r3, [r7, #24]
 8013706:	1c9a      	adds	r2, r3, #2
 8013708:	61ba      	str	r2, [r7, #24]
 801370a:	881b      	ldrh	r3, [r3, #0]
 801370c:	9300      	str	r3, [sp, #0]
 801370e:	462b      	mov	r3, r5
 8013710:	4622      	mov	r2, r4
 8013712:	f7fe fe5f 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8013716:	887b      	ldrh	r3, [r7, #2]
 8013718:	3b01      	subs	r3, #1
 801371a:	b29b      	uxth	r3, r3
 801371c:	b218      	sxth	r0, r3
 801371e:	88bb      	ldrh	r3, [r7, #4]
 8013720:	3301      	adds	r3, #1
 8013722:	b29b      	uxth	r3, r3
 8013724:	b219      	sxth	r1, r3
 8013726:	887b      	ldrh	r3, [r7, #2]
 8013728:	3b01      	subs	r3, #1
 801372a:	b29b      	uxth	r3, r3
 801372c:	b21c      	sxth	r4, r3
 801372e:	883b      	ldrh	r3, [r7, #0]
 8013730:	3b02      	subs	r3, #2
 8013732:	b29b      	uxth	r3, r3
 8013734:	b21d      	sxth	r5, r3
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	1c9a      	adds	r2, r3, #2
 801373a:	61ba      	str	r2, [r7, #24]
 801373c:	881b      	ldrh	r3, [r3, #0]
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	462b      	mov	r3, r5
 8013742:	4622      	mov	r2, r4
 8013744:	f7fe fe46 	bl	80123d4 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8013748:	88fb      	ldrh	r3, [r7, #6]
 801374a:	3302      	adds	r3, #2
 801374c:	b29b      	uxth	r3, r3
 801374e:	b218      	sxth	r0, r3
 8013750:	88bb      	ldrh	r3, [r7, #4]
 8013752:	3302      	adds	r3, #2
 8013754:	b29b      	uxth	r3, r3
 8013756:	b219      	sxth	r1, r3
 8013758:	887b      	ldrh	r3, [r7, #2]
 801375a:	3b03      	subs	r3, #3
 801375c:	b29b      	uxth	r3, r3
 801375e:	b21c      	sxth	r4, r3
 8013760:	88bb      	ldrh	r3, [r7, #4]
 8013762:	3302      	adds	r3, #2
 8013764:	b29b      	uxth	r3, r3
 8013766:	b21d      	sxth	r5, r3
 8013768:	69bb      	ldr	r3, [r7, #24]
 801376a:	1c9a      	adds	r2, r3, #2
 801376c:	61ba      	str	r2, [r7, #24]
 801376e:	881b      	ldrh	r3, [r3, #0]
 8013770:	9300      	str	r3, [sp, #0]
 8013772:	462b      	mov	r3, r5
 8013774:	4622      	mov	r2, r4
 8013776:	f7fe fe2d 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 801377a:	88fb      	ldrh	r3, [r7, #6]
 801377c:	3302      	adds	r3, #2
 801377e:	b29b      	uxth	r3, r3
 8013780:	b218      	sxth	r0, r3
 8013782:	88bb      	ldrh	r3, [r7, #4]
 8013784:	3303      	adds	r3, #3
 8013786:	b29b      	uxth	r3, r3
 8013788:	b219      	sxth	r1, r3
 801378a:	88fb      	ldrh	r3, [r7, #6]
 801378c:	3302      	adds	r3, #2
 801378e:	b29b      	uxth	r3, r3
 8013790:	b21c      	sxth	r4, r3
 8013792:	883b      	ldrh	r3, [r7, #0]
 8013794:	3b03      	subs	r3, #3
 8013796:	b29b      	uxth	r3, r3
 8013798:	b21d      	sxth	r5, r3
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	1c9a      	adds	r2, r3, #2
 801379e:	61ba      	str	r2, [r7, #24]
 80137a0:	881b      	ldrh	r3, [r3, #0]
 80137a2:	9300      	str	r3, [sp, #0]
 80137a4:	462b      	mov	r3, r5
 80137a6:	4622      	mov	r2, r4
 80137a8:	f7fe fe14 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80137ac:	88fb      	ldrh	r3, [r7, #6]
 80137ae:	3302      	adds	r3, #2
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	b218      	sxth	r0, r3
 80137b4:	883b      	ldrh	r3, [r7, #0]
 80137b6:	3b02      	subs	r3, #2
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	b219      	sxth	r1, r3
 80137bc:	887b      	ldrh	r3, [r7, #2]
 80137be:	3b02      	subs	r3, #2
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	b21c      	sxth	r4, r3
 80137c4:	883b      	ldrh	r3, [r7, #0]
 80137c6:	3b02      	subs	r3, #2
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	b21d      	sxth	r5, r3
 80137cc:	69bb      	ldr	r3, [r7, #24]
 80137ce:	1c9a      	adds	r2, r3, #2
 80137d0:	61ba      	str	r2, [r7, #24]
 80137d2:	881b      	ldrh	r3, [r3, #0]
 80137d4:	9300      	str	r3, [sp, #0]
 80137d6:	462b      	mov	r3, r5
 80137d8:	4622      	mov	r2, r4
 80137da:	f7fe fdfb 	bl	80123d4 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80137de:	887b      	ldrh	r3, [r7, #2]
 80137e0:	3b02      	subs	r3, #2
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	b218      	sxth	r0, r3
 80137e6:	88bb      	ldrh	r3, [r7, #4]
 80137e8:	3302      	adds	r3, #2
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	b219      	sxth	r1, r3
 80137ee:	887b      	ldrh	r3, [r7, #2]
 80137f0:	3b02      	subs	r3, #2
 80137f2:	b29b      	uxth	r3, r3
 80137f4:	b21a      	sxth	r2, r3
 80137f6:	883b      	ldrh	r3, [r7, #0]
 80137f8:	3b03      	subs	r3, #3
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	b21c      	sxth	r4, r3
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	881b      	ldrh	r3, [r3, #0]
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	4623      	mov	r3, r4
 8013806:	f7fe fde5 	bl	80123d4 <UG_DrawLine>
}
 801380a:	bf00      	nop
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013814 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
 801381a:	4603      	mov	r3, r0
 801381c:	6039      	str	r1, [r7, #0]
 801381e:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013820:	79fb      	ldrb	r3, [r7, #7]
 8013822:	2b03      	cmp	r3, #3
 8013824:	d810      	bhi.n	8013848 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8013826:	4b0b      	ldr	r3, [pc, #44]	; (8013854 <UG_DriverRegister+0x40>)
 8013828:	681a      	ldr	r2, [r3, #0]
 801382a:	79fb      	ldrb	r3, [r7, #7]
 801382c:	330a      	adds	r3, #10
 801382e:	00db      	lsls	r3, r3, #3
 8013830:	4413      	add	r3, r2
 8013832:	683a      	ldr	r2, [r7, #0]
 8013834:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8013836:	4b07      	ldr	r3, [pc, #28]	; (8013854 <UG_DriverRegister+0x40>)
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	79fb      	ldrb	r3, [r7, #7]
 801383c:	330a      	adds	r3, #10
 801383e:	00db      	lsls	r3, r3, #3
 8013840:	4413      	add	r3, r2
 8013842:	2203      	movs	r2, #3
 8013844:	721a      	strb	r2, [r3, #8]
 8013846:	e000      	b.n	801384a <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013848:	bf00      	nop
}
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr
 8013854:	20001cd8 	.word	0x20001cd8

08013858 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 801385e:	4b5e      	ldr	r3, [pc, #376]	; (80139d8 <UG_Update+0x180>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8013866:	f003 0301 	and.w	r3, r3, #1
 801386a:	2b00      	cmp	r3, #0
 801386c:	d00a      	beq.n	8013884 <UG_Update+0x2c>
 801386e:	4b5a      	ldr	r3, [pc, #360]	; (80139d8 <UG_Update+0x180>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8013876:	4b58      	ldr	r3, [pc, #352]	; (80139d8 <UG_Update+0x180>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f022 0201 	bic.w	r2, r2, #1
 801387e:	b2d2      	uxtb	r2, r2
 8013880:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8013884:	4b54      	ldr	r3, [pc, #336]	; (80139d8 <UG_Update+0x180>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	68da      	ldr	r2, [r3, #12]
 801388a:	4b53      	ldr	r3, [pc, #332]	; (80139d8 <UG_Update+0x180>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	691b      	ldr	r3, [r3, #16]
 8013890:	429a      	cmp	r2, r3
 8013892:	d071      	beq.n	8013978 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8013894:	4b50      	ldr	r3, [pc, #320]	; (80139d8 <UG_Update+0x180>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d06c      	beq.n	8013978 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 801389e:	4b4e      	ldr	r3, [pc, #312]	; (80139d8 <UG_Update+0x180>)
 80138a0:	681a      	ldr	r2, [r3, #0]
 80138a2:	4b4d      	ldr	r3, [pc, #308]	; (80139d8 <UG_Update+0x180>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	6912      	ldr	r2, [r2, #16]
 80138a8:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 80138aa:	4b4b      	ldr	r3, [pc, #300]	; (80139d8 <UG_Update+0x180>)
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	4b4a      	ldr	r3, [pc, #296]	; (80139d8 <UG_Update+0x180>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	68d2      	ldr	r2, [r2, #12]
 80138b4:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80138b6:	4b48      	ldr	r3, [pc, #288]	; (80139d8 <UG_Update+0x180>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	695b      	ldr	r3, [r3, #20]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d045      	beq.n	801394c <UG_Update+0xf4>
 80138c0:	4b45      	ldr	r3, [pc, #276]	; (80139d8 <UG_Update+0x180>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	695b      	ldr	r3, [r3, #20]
 80138c6:	7d9b      	ldrb	r3, [r3, #22]
 80138c8:	f003 0302 	and.w	r3, r3, #2
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d03d      	beq.n	801394c <UG_Update+0xf4>
 80138d0:	4b41      	ldr	r3, [pc, #260]	; (80139d8 <UG_Update+0x180>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	695b      	ldr	r3, [r3, #20]
 80138d6:	7a1b      	ldrb	r3, [r3, #8]
 80138d8:	f003 0308 	and.w	r3, r3, #8
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d035      	beq.n	801394c <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80138e0:	4b3d      	ldr	r3, [pc, #244]	; (80139d8 <UG_Update+0x180>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	695b      	ldr	r3, [r3, #20]
 80138e6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80138ea:	4b3b      	ldr	r3, [pc, #236]	; (80139d8 <UG_Update+0x180>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	691b      	ldr	r3, [r3, #16]
 80138f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d123      	bne.n	8013940 <UG_Update+0xe8>
 80138f8:	4b37      	ldr	r3, [pc, #220]	; (80139d8 <UG_Update+0x180>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	695b      	ldr	r3, [r3, #20]
 80138fe:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013902:	4b35      	ldr	r3, [pc, #212]	; (80139d8 <UG_Update+0x180>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	691b      	ldr	r3, [r3, #16]
 8013908:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801390c:	429a      	cmp	r2, r3
 801390e:	d117      	bne.n	8013940 <UG_Update+0xe8>
 8013910:	4b31      	ldr	r3, [pc, #196]	; (80139d8 <UG_Update+0x180>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	695b      	ldr	r3, [r3, #20]
 8013916:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801391a:	4b2f      	ldr	r3, [pc, #188]	; (80139d8 <UG_Update+0x180>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	691b      	ldr	r3, [r3, #16]
 8013920:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013924:	429a      	cmp	r2, r3
 8013926:	d10b      	bne.n	8013940 <UG_Update+0xe8>
 8013928:	4b2b      	ldr	r3, [pc, #172]	; (80139d8 <UG_Update+0x180>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	695b      	ldr	r3, [r3, #20]
 801392e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8013932:	4b29      	ldr	r3, [pc, #164]	; (80139d8 <UG_Update+0x180>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	691b      	ldr	r3, [r3, #16]
 8013938:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801393c:	429a      	cmp	r2, r3
 801393e:	d005      	beq.n	801394c <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8013940:	4b25      	ldr	r3, [pc, #148]	; (80139d8 <UG_Update+0x180>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	695b      	ldr	r3, [r3, #20]
 8013946:	4618      	mov	r0, r3
 8013948:	f000 f848 	bl	80139dc <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 801394c:	4b22      	ldr	r3, [pc, #136]	; (80139d8 <UG_Update+0x180>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	691b      	ldr	r3, [r3, #16]
 8013952:	7a1a      	ldrb	r2, [r3, #8]
 8013954:	4b20      	ldr	r3, [pc, #128]	; (80139d8 <UG_Update+0x180>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	691b      	ldr	r3, [r3, #16]
 801395a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801395e:	b2d2      	uxtb	r2, r2
 8013960:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8013962:	4b1d      	ldr	r3, [pc, #116]	; (80139d8 <UG_Update+0x180>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	691b      	ldr	r3, [r3, #16]
 8013968:	7a1a      	ldrb	r2, [r3, #8]
 801396a:	4b1b      	ldr	r3, [pc, #108]	; (80139d8 <UG_Update+0x180>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	691b      	ldr	r3, [r3, #16]
 8013970:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8013974:	b2d2      	uxtb	r2, r2
 8013976:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8013978:	4b17      	ldr	r3, [pc, #92]	; (80139d8 <UG_Update+0x180>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	691b      	ldr	r3, [r3, #16]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d01b      	beq.n	80139ba <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8013982:	4b15      	ldr	r3, [pc, #84]	; (80139d8 <UG_Update+0x180>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	691b      	ldr	r3, [r3, #16]
 8013988:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	7a1b      	ldrb	r3, [r3, #8]
 801398e:	f003 0320 	and.w	r3, r3, #32
 8013992:	2b00      	cmp	r3, #0
 8013994:	d002      	beq.n	801399c <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 f8ca 	bl	8013b30 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	7a1b      	ldrb	r3, [r3, #8]
 80139a0:	f003 0308 	and.w	r3, r3, #8
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d008      	beq.n	80139ba <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f7ff fb81 	bl	80130b0 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7ff fc34 	bl	801321c <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7ff fc7b 	bl	80132b0 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80139ba:	4b07      	ldr	r3, [pc, #28]	; (80139d8 <UG_Update+0x180>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	689b      	ldr	r3, [r3, #8]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d004      	beq.n	80139d0 <UG_Update+0x178>
     gui->device->flush();
 80139c6:	4b04      	ldr	r3, [pc, #16]	; (80139d8 <UG_Update+0x180>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	689b      	ldr	r3, [r3, #8]
 80139ce:	4798      	blx	r3
   }
}
 80139d0:	bf00      	nop
 80139d2:	3708      	adds	r7, #8
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}
 80139d8:	20001cd8 	.word	0x20001cd8

080139dc <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 80139dc:	b590      	push	{r4, r7, lr}
 80139de:	b08f      	sub	sp, #60	; 0x3c
 80139e0:	af02      	add	r7, sp, #8
 80139e2:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	f000 809a 	beq.w	8013b20 <_UG_WindowDrawTitle+0x144>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	7a1b      	ldrb	r3, [r3, #8]
 80139f0:	f003 0302 	and.w	r3, r3, #2
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	f000 8093 	beq.w	8013b20 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	89db      	ldrh	r3, [r3, #14]
 80139fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	8a1b      	ldrh	r3, [r3, #16]
 8013a04:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	8a5b      	ldrh	r3, [r3, #18]
 8013a0a:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	8a9b      	ldrh	r3, [r3, #20]
 8013a10:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	7d9b      	ldrb	r3, [r3, #22]
 8013a16:	f003 0301 	and.w	r3, r3, #1
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00f      	beq.n	8013a3e <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8013a1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a20:	3303      	adds	r3, #3
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8013a26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013a28:	3303      	adds	r3, #3
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8013a2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a30:	3b03      	subs	r3, #3
 8013a32:	b29b      	uxth	r3, r3
 8013a34:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8013a36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a38:	3b03      	subs	r3, #3
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8013a3e:	4b3b      	ldr	r3, [pc, #236]	; (8013b2c <_UG_WindowDrawTitle+0x150>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	691b      	ldr	r3, [r3, #16]
 8013a44:	687a      	ldr	r2, [r7, #4]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d106      	bne.n	8013a58 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013a4e:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013a54:	83bb      	strh	r3, [r7, #28]
 8013a56:	e005      	b.n	8013a64 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a5c:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a62:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013a6e:	4413      	add	r3, r2
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	3b01      	subs	r3, #1
 8013a74:	b29b      	uxth	r3, r3
 8013a76:	b21c      	sxth	r4, r3
 8013a78:	8bfb      	ldrh	r3, [r7, #30]
 8013a7a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013a7e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013a82:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013a86:	9300      	str	r3, [sp, #0]
 8013a88:	4623      	mov	r3, r4
 8013a8a:	f7fe fb03 	bl	8012094 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	699b      	ldr	r3, [r3, #24]
 8013a92:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	69db      	ldr	r3, [r3, #28]
 8013a98:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8013a9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a9c:	3303      	adds	r3, #3
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	b21b      	sxth	r3, r3
 8013aa2:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8013aa4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013aa6:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8013aa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013aaa:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013ab2:	b29a      	uxth	r2, r3
 8013ab4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013ab6:	4413      	add	r3, r2
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	3b01      	subs	r3, #1
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	b21b      	sxth	r3, r3
 8013ac0:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013ac8:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8013ad2:	b21b      	sxth	r3, r3
 8013ad4:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8013adc:	b21b      	sxth	r3, r3
 8013ade:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8013ae0:	f107 030c 	add.w	r3, r7, #12
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7ff fc2f 	bl	8013348 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013af0:	b29a      	uxth	r2, r3
 8013af2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013af4:	4413      	add	r3, r2
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	b219      	sxth	r1, r3
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b04:	4413      	add	r3, r2
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	b21b      	sxth	r3, r3
 8013b0a:	f649 5413 	movw	r4, #40211	; 0x9d13
 8013b0e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013b12:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013b16:	9400      	str	r4, [sp, #0]
 8013b18:	f7fe fc5c 	bl	80123d4 <UG_DrawLine>
      return UG_RESULT_OK;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	e001      	b.n	8013b24 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8013b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3734      	adds	r7, #52	; 0x34
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd90      	pop	{r4, r7, pc}
 8013b2c:	20001cd8 	.word	0x20001cd8

08013b30 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8013b30:	b590      	push	{r4, r7, lr}
 8013b32:	b089      	sub	sp, #36	; 0x24
 8013b34:	af02      	add	r7, sp, #8
 8013b36:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	89db      	ldrh	r3, [r3, #14]
 8013b3c:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	8a1b      	ldrh	r3, [r3, #16]
 8013b42:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	8a5b      	ldrh	r3, [r3, #18]
 8013b48:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8a9b      	ldrh	r3, [r3, #20]
 8013b4e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	7a1b      	ldrb	r3, [r3, #8]
 8013b54:	f023 0320 	bic.w	r3, r3, #32
 8013b58:	b2da      	uxtb	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	7a1b      	ldrb	r3, [r3, #8]
 8013b62:	f003 0308 	and.w	r3, r3, #8
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	f000 8084 	beq.w	8013c74 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	7d9b      	ldrb	r3, [r3, #22]
 8013b70:	f003 0301 	and.w	r3, r3, #1
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d021      	beq.n	8013bbc <_UG_WindowUpdate+0x8c>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	7a1b      	ldrb	r3, [r3, #8]
 8013b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d11b      	bne.n	8013bbc <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8013b84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013b88:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013b8c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013b90:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013b94:	4c43      	ldr	r4, [pc, #268]	; (8013ca4 <_UG_WindowUpdate+0x174>)
 8013b96:	9400      	str	r4, [sp, #0]
 8013b98:	f7ff fd1a 	bl	80135d0 <_UG_DrawObjectFrame>
         xs+=3;
 8013b9c:	8abb      	ldrh	r3, [r7, #20]
 8013b9e:	3303      	adds	r3, #3
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8013ba4:	8a7b      	ldrh	r3, [r7, #18]
 8013ba6:	3303      	adds	r3, #3
 8013ba8:	b29b      	uxth	r3, r3
 8013baa:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8013bac:	8a3b      	ldrh	r3, [r7, #16]
 8013bae:	3b03      	subs	r3, #3
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8013bb4:	89fb      	ldrh	r3, [r7, #14]
 8013bb6:	3b03      	subs	r3, #3
 8013bb8:	b29b      	uxth	r3, r3
 8013bba:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	7d9b      	ldrb	r3, [r3, #22]
 8013bc0:	f003 0302 	and.w	r3, r3, #2
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d01a      	beq.n	8013bfe <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f7ff ff07 	bl	80139dc <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013bd4:	b29a      	uxth	r2, r3
 8013bd6:	8a7b      	ldrh	r3, [r7, #18]
 8013bd8:	4413      	add	r3, r2
 8013bda:	b29b      	uxth	r3, r3
 8013bdc:	3301      	adds	r3, #1
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	7a1b      	ldrb	r3, [r3, #8]
 8013be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d007      	beq.n	8013bfe <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	7a1b      	ldrb	r3, [r3, #8]
 8013bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013bf6:	b2da      	uxtb	r2, r3
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	721a      	strb	r2, [r3, #8]
            return;
 8013bfc:	e04e      	b.n	8013c9c <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	899b      	ldrh	r3, [r3, #12]
 8013c02:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8013c06:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013c0a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013c0e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	4623      	mov	r3, r4
 8013c16:	f7fe fa3d 	bl	8012094 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8013c20:	2300      	movs	r3, #0
 8013c22:	82fb      	strh	r3, [r7, #22]
 8013c24:	e021      	b.n	8013c6a <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	685a      	ldr	r2, [r3, #4]
 8013c2a:	8afb      	ldrh	r3, [r7, #22]
 8013c2c:	015b      	lsls	r3, r3, #5
 8013c2e:	4413      	add	r3, r2
 8013c30:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8013c32:	68bb      	ldr	r3, [r7, #8]
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	f003 0301 	and.w	r3, r3, #1
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d112      	bne.n	8013c64 <_UG_WindowUpdate+0x134>
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	781b      	ldrb	r3, [r3, #0]
 8013c42:	f003 0302 	and.w	r3, r3, #2
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00c      	beq.n	8013c64 <_UG_WindowUpdate+0x134>
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	f003 0308 	and.w	r3, r3, #8
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d006      	beq.n	8013c64 <_UG_WindowUpdate+0x134>
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	781b      	ldrb	r3, [r3, #0]
 8013c5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013c5e:	b2da      	uxtb	r2, r3
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8013c64:	8afb      	ldrh	r3, [r7, #22]
 8013c66:	3301      	adds	r3, #1
 8013c68:	82fb      	strh	r3, [r7, #22]
 8013c6a:	8afa      	ldrh	r2, [r7, #22]
 8013c6c:	89bb      	ldrh	r3, [r7, #12]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d3d9      	bcc.n	8013c26 <_UG_WindowUpdate+0xf6>
 8013c72:	e013      	b.n	8013c9c <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8013c8c:	4b06      	ldr	r3, [pc, #24]	; (8013ca8 <_UG_WindowUpdate+0x178>)
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013c94:	9300      	str	r3, [sp, #0]
 8013c96:	4623      	mov	r3, r4
 8013c98:	f7fe f9fc 	bl	8012094 <UG_FillFrame>
   }
}
 8013c9c:	371c      	adds	r7, #28
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd90      	pop	{r4, r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	0801b878 	.word	0x0801b878
 8013ca8:	20001cd8 	.word	0x20001cd8

08013cac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b084      	sub	sp, #16
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013cb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013cbc:	f002 f8fc 	bl	8015eb8 <USBD_static_malloc>
 8013cc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d105      	bne.n	8013cd4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013cd0:	2302      	movs	r3, #2
 8013cd2:	e066      	b.n	8013da2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	68fa      	ldr	r2, [r7, #12]
 8013cd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	7c1b      	ldrb	r3, [r3, #16]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d119      	bne.n	8013d18 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ce8:	2202      	movs	r2, #2
 8013cea:	2181      	movs	r1, #129	; 0x81
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f001 ff8a 	bl	8015c06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013cfc:	2202      	movs	r2, #2
 8013cfe:	2101      	movs	r1, #1
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f001 ff80 	bl	8015c06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2210      	movs	r2, #16
 8013d12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013d16:	e016      	b.n	8013d46 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013d18:	2340      	movs	r3, #64	; 0x40
 8013d1a:	2202      	movs	r2, #2
 8013d1c:	2181      	movs	r1, #129	; 0x81
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f001 ff71 	bl	8015c06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2201      	movs	r2, #1
 8013d28:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013d2a:	2340      	movs	r3, #64	; 0x40
 8013d2c:	2202      	movs	r2, #2
 8013d2e:	2101      	movs	r1, #1
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f001 ff68 	bl	8015c06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2201      	movs	r2, #1
 8013d3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2210      	movs	r2, #16
 8013d42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013d46:	2308      	movs	r3, #8
 8013d48:	2203      	movs	r2, #3
 8013d4a:	2182      	movs	r1, #130	; 0x82
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f001 ff5a 	bl	8015c06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2201      	movs	r2, #1
 8013d56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2200      	movs	r2, #0
 8013d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	7c1b      	ldrb	r3, [r3, #16]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d109      	bne.n	8013d90 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013d86:	2101      	movs	r1, #1
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f002 f82b 	bl	8015de4 <USBD_LL_PrepareReceive>
 8013d8e:	e007      	b.n	8013da0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013d96:	2340      	movs	r3, #64	; 0x40
 8013d98:	2101      	movs	r1, #1
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f002 f822 	bl	8015de4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013da0:	2300      	movs	r3, #0
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}

08013daa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b082      	sub	sp, #8
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
 8013db2:	460b      	mov	r3, r1
 8013db4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013db6:	2181      	movs	r1, #129	; 0x81
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f001 ff4a 	bl	8015c52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013dc4:	2101      	movs	r1, #1
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f001 ff43 	bl	8015c52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013dd4:	2182      	movs	r1, #130	; 0x82
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f001 ff3b 	bl	8015c52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2200      	movs	r2, #0
 8013de8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d00e      	beq.n	8013e14 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e06:	4618      	mov	r0, r3
 8013e08:	f002 f864 	bl	8015ed4 <USBD_static_free>
    pdev->pClassData = NULL;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013e14:	2300      	movs	r3, #0
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3708      	adds	r7, #8
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
	...

08013e20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b086      	sub	sp, #24
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013e32:	2300      	movs	r3, #0
 8013e34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013e36:	2300      	movs	r3, #0
 8013e38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d101      	bne.n	8013e48 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013e44:	2303      	movs	r3, #3
 8013e46:	e0af      	b.n	8013fa8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d03f      	beq.n	8013ed4 <USBD_CDC_Setup+0xb4>
 8013e54:	2b20      	cmp	r3, #32
 8013e56:	f040 809f 	bne.w	8013f98 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	88db      	ldrh	r3, [r3, #6]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d02e      	beq.n	8013ec0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	b25b      	sxtb	r3, r3
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	da16      	bge.n	8013e9a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	683a      	ldr	r2, [r7, #0]
 8013e76:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8013e78:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013e7a:	683a      	ldr	r2, [r7, #0]
 8013e7c:	88d2      	ldrh	r2, [r2, #6]
 8013e7e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	88db      	ldrh	r3, [r3, #6]
 8013e84:	2b07      	cmp	r3, #7
 8013e86:	bf28      	it	cs
 8013e88:	2307      	movcs	r3, #7
 8013e8a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	89fa      	ldrh	r2, [r7, #14]
 8013e90:	4619      	mov	r1, r3
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f001 facf 	bl	8015436 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013e98:	e085      	b.n	8013fa6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	785a      	ldrb	r2, [r3, #1]
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	88db      	ldrh	r3, [r3, #6]
 8013ea8:	b2da      	uxtb	r2, r3
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013eb0:	6939      	ldr	r1, [r7, #16]
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	88db      	ldrh	r3, [r3, #6]
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f001 fae8 	bl	801548e <USBD_CtlPrepareRx>
      break;
 8013ebe:	e072      	b.n	8013fa6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ec6:	689b      	ldr	r3, [r3, #8]
 8013ec8:	683a      	ldr	r2, [r7, #0]
 8013eca:	7850      	ldrb	r0, [r2, #1]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	6839      	ldr	r1, [r7, #0]
 8013ed0:	4798      	blx	r3
      break;
 8013ed2:	e068      	b.n	8013fa6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	785b      	ldrb	r3, [r3, #1]
 8013ed8:	2b0b      	cmp	r3, #11
 8013eda:	d852      	bhi.n	8013f82 <USBD_CDC_Setup+0x162>
 8013edc:	a201      	add	r2, pc, #4	; (adr r2, 8013ee4 <USBD_CDC_Setup+0xc4>)
 8013ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ee2:	bf00      	nop
 8013ee4:	08013f15 	.word	0x08013f15
 8013ee8:	08013f91 	.word	0x08013f91
 8013eec:	08013f83 	.word	0x08013f83
 8013ef0:	08013f83 	.word	0x08013f83
 8013ef4:	08013f83 	.word	0x08013f83
 8013ef8:	08013f83 	.word	0x08013f83
 8013efc:	08013f83 	.word	0x08013f83
 8013f00:	08013f83 	.word	0x08013f83
 8013f04:	08013f83 	.word	0x08013f83
 8013f08:	08013f83 	.word	0x08013f83
 8013f0c:	08013f3f 	.word	0x08013f3f
 8013f10:	08013f69 	.word	0x08013f69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f1a:	b2db      	uxtb	r3, r3
 8013f1c:	2b03      	cmp	r3, #3
 8013f1e:	d107      	bne.n	8013f30 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013f20:	f107 030a 	add.w	r3, r7, #10
 8013f24:	2202      	movs	r2, #2
 8013f26:	4619      	mov	r1, r3
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f001 fa84 	bl	8015436 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013f2e:	e032      	b.n	8013f96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013f30:	6839      	ldr	r1, [r7, #0]
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f001 fa0e 	bl	8015354 <USBD_CtlError>
            ret = USBD_FAIL;
 8013f38:	2303      	movs	r3, #3
 8013f3a:	75fb      	strb	r3, [r7, #23]
          break;
 8013f3c:	e02b      	b.n	8013f96 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	2b03      	cmp	r3, #3
 8013f48:	d107      	bne.n	8013f5a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013f4a:	f107 030d 	add.w	r3, r7, #13
 8013f4e:	2201      	movs	r2, #1
 8013f50:	4619      	mov	r1, r3
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f001 fa6f 	bl	8015436 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013f58:	e01d      	b.n	8013f96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013f5a:	6839      	ldr	r1, [r7, #0]
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f001 f9f9 	bl	8015354 <USBD_CtlError>
            ret = USBD_FAIL;
 8013f62:	2303      	movs	r3, #3
 8013f64:	75fb      	strb	r3, [r7, #23]
          break;
 8013f66:	e016      	b.n	8013f96 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f6e:	b2db      	uxtb	r3, r3
 8013f70:	2b03      	cmp	r3, #3
 8013f72:	d00f      	beq.n	8013f94 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8013f74:	6839      	ldr	r1, [r7, #0]
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f001 f9ec 	bl	8015354 <USBD_CtlError>
            ret = USBD_FAIL;
 8013f7c:	2303      	movs	r3, #3
 8013f7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013f80:	e008      	b.n	8013f94 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f001 f9e5 	bl	8015354 <USBD_CtlError>
          ret = USBD_FAIL;
 8013f8a:	2303      	movs	r3, #3
 8013f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8013f8e:	e002      	b.n	8013f96 <USBD_CDC_Setup+0x176>
          break;
 8013f90:	bf00      	nop
 8013f92:	e008      	b.n	8013fa6 <USBD_CDC_Setup+0x186>
          break;
 8013f94:	bf00      	nop
      }
      break;
 8013f96:	e006      	b.n	8013fa6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8013f98:	6839      	ldr	r1, [r7, #0]
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f001 f9da 	bl	8015354 <USBD_CtlError>
      ret = USBD_FAIL;
 8013fa0:	2303      	movs	r3, #3
 8013fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8013fa4:	bf00      	nop
  }

  return (uint8_t)ret;
 8013fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3718      	adds	r7, #24
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b084      	sub	sp, #16
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	460b      	mov	r3, r1
 8013fba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013fc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d101      	bne.n	8013fd2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013fce:	2303      	movs	r3, #3
 8013fd0:	e04f      	b.n	8014072 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fd8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013fda:	78fa      	ldrb	r2, [r7, #3]
 8013fdc:	6879      	ldr	r1, [r7, #4]
 8013fde:	4613      	mov	r3, r2
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	4413      	add	r3, r2
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	440b      	add	r3, r1
 8013fe8:	3318      	adds	r3, #24
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d029      	beq.n	8014044 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013ff0:	78fa      	ldrb	r2, [r7, #3]
 8013ff2:	6879      	ldr	r1, [r7, #4]
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	4413      	add	r3, r2
 8013ffa:	009b      	lsls	r3, r3, #2
 8013ffc:	440b      	add	r3, r1
 8013ffe:	3318      	adds	r3, #24
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	78f9      	ldrb	r1, [r7, #3]
 8014004:	68f8      	ldr	r0, [r7, #12]
 8014006:	460b      	mov	r3, r1
 8014008:	009b      	lsls	r3, r3, #2
 801400a:	440b      	add	r3, r1
 801400c:	00db      	lsls	r3, r3, #3
 801400e:	4403      	add	r3, r0
 8014010:	3320      	adds	r3, #32
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	fbb2 f1f3 	udiv	r1, r2, r3
 8014018:	fb01 f303 	mul.w	r3, r1, r3
 801401c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801401e:	2b00      	cmp	r3, #0
 8014020:	d110      	bne.n	8014044 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8014022:	78fa      	ldrb	r2, [r7, #3]
 8014024:	6879      	ldr	r1, [r7, #4]
 8014026:	4613      	mov	r3, r2
 8014028:	009b      	lsls	r3, r3, #2
 801402a:	4413      	add	r3, r2
 801402c:	009b      	lsls	r3, r3, #2
 801402e:	440b      	add	r3, r1
 8014030:	3318      	adds	r3, #24
 8014032:	2200      	movs	r2, #0
 8014034:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014036:	78f9      	ldrb	r1, [r7, #3]
 8014038:	2300      	movs	r3, #0
 801403a:	2200      	movs	r2, #0
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f001 feb0 	bl	8015da2 <USBD_LL_Transmit>
 8014042:	e015      	b.n	8014070 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	2200      	movs	r2, #0
 8014048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014052:	691b      	ldr	r3, [r3, #16]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d00b      	beq.n	8014070 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801405e:	691b      	ldr	r3, [r3, #16]
 8014060:	68ba      	ldr	r2, [r7, #8]
 8014062:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014066:	68ba      	ldr	r2, [r7, #8]
 8014068:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801406c:	78fa      	ldrb	r2, [r7, #3]
 801406e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	3710      	adds	r7, #16
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}

0801407a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801407a:	b580      	push	{r7, lr}
 801407c:	b084      	sub	sp, #16
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
 8014082:	460b      	mov	r3, r1
 8014084:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801408c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014094:	2b00      	cmp	r3, #0
 8014096:	d101      	bne.n	801409c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014098:	2303      	movs	r3, #3
 801409a:	e015      	b.n	80140c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801409c:	78fb      	ldrb	r3, [r7, #3]
 801409e:	4619      	mov	r1, r3
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f001 fec0 	bl	8015e26 <USBD_LL_GetRxDataSize>
 80140a6:	4602      	mov	r2, r0
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140b4:	68db      	ldr	r3, [r3, #12]
 80140b6:	68fa      	ldr	r2, [r7, #12]
 80140b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80140bc:	68fa      	ldr	r2, [r7, #12]
 80140be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80140c2:	4611      	mov	r1, r2
 80140c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80140c6:	2300      	movs	r3, #0
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b084      	sub	sp, #16
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d101      	bne.n	80140ea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80140e6:	2303      	movs	r3, #3
 80140e8:	e01b      	b.n	8014122 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d015      	beq.n	8014120 <USBD_CDC_EP0_RxReady+0x50>
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80140fa:	2bff      	cmp	r3, #255	; 0xff
 80140fc:	d010      	beq.n	8014120 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014104:	689b      	ldr	r3, [r3, #8]
 8014106:	68fa      	ldr	r2, [r7, #12]
 8014108:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801410c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801410e:	68fa      	ldr	r2, [r7, #12]
 8014110:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014114:	b292      	uxth	r2, r2
 8014116:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	22ff      	movs	r2, #255	; 0xff
 801411c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014120:	2300      	movs	r3, #0
}
 8014122:	4618      	mov	r0, r3
 8014124:	3710      	adds	r7, #16
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}
	...

0801412c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801412c:	b480      	push	{r7}
 801412e:	b083      	sub	sp, #12
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2243      	movs	r2, #67	; 0x43
 8014138:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801413a:	4b03      	ldr	r3, [pc, #12]	; (8014148 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801413c:	4618      	mov	r0, r3
 801413e:	370c      	adds	r7, #12
 8014140:	46bd      	mov	sp, r7
 8014142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014146:	4770      	bx	lr
 8014148:	20000254 	.word	0x20000254

0801414c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801414c:	b480      	push	{r7}
 801414e:	b083      	sub	sp, #12
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2243      	movs	r2, #67	; 0x43
 8014158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801415a:	4b03      	ldr	r3, [pc, #12]	; (8014168 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801415c:	4618      	mov	r0, r3
 801415e:	370c      	adds	r7, #12
 8014160:	46bd      	mov	sp, r7
 8014162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014166:	4770      	bx	lr
 8014168:	20000210 	.word	0x20000210

0801416c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801416c:	b480      	push	{r7}
 801416e:	b083      	sub	sp, #12
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2243      	movs	r2, #67	; 0x43
 8014178:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801417a:	4b03      	ldr	r3, [pc, #12]	; (8014188 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801417c:	4618      	mov	r0, r3
 801417e:	370c      	adds	r7, #12
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr
 8014188:	20000298 	.word	0x20000298

0801418c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	220a      	movs	r2, #10
 8014198:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801419a:	4b03      	ldr	r3, [pc, #12]	; (80141a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801419c:	4618      	mov	r0, r3
 801419e:	370c      	adds	r7, #12
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr
 80141a8:	200001cc 	.word	0x200001cc

080141ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80141ac:	b480      	push	{r7}
 80141ae:	b083      	sub	sp, #12
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d101      	bne.n	80141c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80141bc:	2303      	movs	r3, #3
 80141be:	e004      	b.n	80141ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	683a      	ldr	r2, [r7, #0]
 80141c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80141c8:	2300      	movs	r3, #0
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	370c      	adds	r7, #12
 80141ce:	46bd      	mov	sp, r7
 80141d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d4:	4770      	bx	lr

080141d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80141d6:	b480      	push	{r7}
 80141d8:	b087      	sub	sp, #28
 80141da:	af00      	add	r7, sp, #0
 80141dc:	60f8      	str	r0, [r7, #12]
 80141de:	60b9      	str	r1, [r7, #8]
 80141e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141e8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d101      	bne.n	80141f4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80141f0:	2303      	movs	r3, #3
 80141f2:	e008      	b.n	8014206 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	68ba      	ldr	r2, [r7, #8]
 80141f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	371c      	adds	r7, #28
 801420a:	46bd      	mov	sp, r7
 801420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014210:	4770      	bx	lr

08014212 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014212:	b480      	push	{r7}
 8014214:	b085      	sub	sp, #20
 8014216:	af00      	add	r7, sp, #0
 8014218:	6078      	str	r0, [r7, #4]
 801421a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014222:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d101      	bne.n	801422e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801422a:	2303      	movs	r3, #3
 801422c:	e004      	b.n	8014238 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	683a      	ldr	r2, [r7, #0]
 8014232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014236:	2300      	movs	r3, #0
}
 8014238:	4618      	mov	r0, r3
 801423a:	3714      	adds	r7, #20
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr

08014244 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014252:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8014254:	2301      	movs	r3, #1
 8014256:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801425e:	2b00      	cmp	r3, #0
 8014260:	d101      	bne.n	8014266 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014262:	2303      	movs	r3, #3
 8014264:	e01a      	b.n	801429c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801426c:	2b00      	cmp	r3, #0
 801426e:	d114      	bne.n	801429a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	2201      	movs	r2, #1
 8014274:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801428e:	2181      	movs	r1, #129	; 0x81
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f001 fd86 	bl	8015da2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014296:	2300      	movs	r3, #0
 8014298:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801429a:	7bfb      	ldrb	r3, [r7, #15]
}
 801429c:	4618      	mov	r0, r3
 801429e:	3710      	adds	r7, #16
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d101      	bne.n	80142c2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80142be:	2303      	movs	r3, #3
 80142c0:	e016      	b.n	80142f0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	7c1b      	ldrb	r3, [r3, #16]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d109      	bne.n	80142de <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80142d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80142d4:	2101      	movs	r1, #1
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f001 fd84 	bl	8015de4 <USBD_LL_PrepareReceive>
 80142dc:	e007      	b.n	80142ee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80142e4:	2340      	movs	r3, #64	; 0x40
 80142e6:	2101      	movs	r1, #1
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f001 fd7b 	bl	8015de4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80142ee:	2300      	movs	r3, #0
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3710      	adds	r7, #16
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b086      	sub	sp, #24
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	60f8      	str	r0, [r7, #12]
 8014300:	60b9      	str	r1, [r7, #8]
 8014302:	4613      	mov	r3, r2
 8014304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d101      	bne.n	8014310 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801430c:	2303      	movs	r3, #3
 801430e:	e01f      	b.n	8014350 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	2200      	movs	r2, #0
 8014314:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2200      	movs	r2, #0
 801431c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	2200      	movs	r2, #0
 8014324:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d003      	beq.n	8014336 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	68ba      	ldr	r2, [r7, #8]
 8014332:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2201      	movs	r2, #1
 801433a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	79fa      	ldrb	r2, [r7, #7]
 8014342:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014344:	68f8      	ldr	r0, [r7, #12]
 8014346:	f001 fbe3 	bl	8015b10 <USBD_LL_Init>
 801434a:	4603      	mov	r3, r0
 801434c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801434e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014350:	4618      	mov	r0, r3
 8014352:	3718      	adds	r7, #24
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}

08014358 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b084      	sub	sp, #16
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014362:	2300      	movs	r3, #0
 8014364:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d101      	bne.n	8014370 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801436c:	2303      	movs	r3, #3
 801436e:	e016      	b.n	801439e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	683a      	ldr	r2, [r7, #0]
 8014374:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014380:	2b00      	cmp	r3, #0
 8014382:	d00b      	beq.n	801439c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801438c:	f107 020e 	add.w	r2, r7, #14
 8014390:	4610      	mov	r0, r2
 8014392:	4798      	blx	r3
 8014394:	4602      	mov	r2, r0
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3710      	adds	r7, #16
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}

080143a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b082      	sub	sp, #8
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f001 fc0e 	bl	8015bd0 <USBD_LL_Start>
 80143b4:	4603      	mov	r3, r0
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3708      	adds	r7, #8
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}

080143be <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80143be:	b480      	push	{r7}
 80143c0:	b083      	sub	sp, #12
 80143c2:	af00      	add	r7, sp, #0
 80143c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80143c6:	2300      	movs	r3, #0
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	370c      	adds	r7, #12
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr

080143d4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b084      	sub	sp, #16
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	460b      	mov	r3, r1
 80143de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80143e0:	2303      	movs	r3, #3
 80143e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d009      	beq.n	8014402 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	78fa      	ldrb	r2, [r7, #3]
 80143f8:	4611      	mov	r1, r2
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	4798      	blx	r3
 80143fe:	4603      	mov	r3, r0
 8014400:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014402:	7bfb      	ldrb	r3, [r7, #15]
}
 8014404:	4618      	mov	r0, r3
 8014406:	3710      	adds	r7, #16
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	460b      	mov	r3, r1
 8014416:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801441e:	2b00      	cmp	r3, #0
 8014420:	d007      	beq.n	8014432 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	78fa      	ldrb	r2, [r7, #3]
 801442c:	4611      	mov	r1, r2
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	4798      	blx	r3
  }

  return USBD_OK;
 8014432:	2300      	movs	r3, #0
}
 8014434:	4618      	mov	r0, r3
 8014436:	3708      	adds	r7, #8
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}

0801443c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b084      	sub	sp, #16
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
 8014444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801444c:	6839      	ldr	r1, [r7, #0]
 801444e:	4618      	mov	r0, r3
 8014450:	f000 ff46 	bl	80152e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2201      	movs	r2, #1
 8014458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014462:	461a      	mov	r2, r3
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014470:	f003 031f 	and.w	r3, r3, #31
 8014474:	2b02      	cmp	r3, #2
 8014476:	d01a      	beq.n	80144ae <USBD_LL_SetupStage+0x72>
 8014478:	2b02      	cmp	r3, #2
 801447a:	d822      	bhi.n	80144c2 <USBD_LL_SetupStage+0x86>
 801447c:	2b00      	cmp	r3, #0
 801447e:	d002      	beq.n	8014486 <USBD_LL_SetupStage+0x4a>
 8014480:	2b01      	cmp	r3, #1
 8014482:	d00a      	beq.n	801449a <USBD_LL_SetupStage+0x5e>
 8014484:	e01d      	b.n	80144c2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801448c:	4619      	mov	r1, r3
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f000 f9ee 	bl	8014870 <USBD_StdDevReq>
 8014494:	4603      	mov	r3, r0
 8014496:	73fb      	strb	r3, [r7, #15]
      break;
 8014498:	e020      	b.n	80144dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80144a0:	4619      	mov	r1, r3
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f000 fa52 	bl	801494c <USBD_StdItfReq>
 80144a8:	4603      	mov	r3, r0
 80144aa:	73fb      	strb	r3, [r7, #15]
      break;
 80144ac:	e016      	b.n	80144dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80144b4:	4619      	mov	r1, r3
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f000 fa91 	bl	80149de <USBD_StdEPReq>
 80144bc:	4603      	mov	r3, r0
 80144be:	73fb      	strb	r3, [r7, #15]
      break;
 80144c0:	e00c      	b.n	80144dc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80144c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80144cc:	b2db      	uxtb	r3, r3
 80144ce:	4619      	mov	r1, r3
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f001 fbdd 	bl	8015c90 <USBD_LL_StallEP>
 80144d6:	4603      	mov	r3, r0
 80144d8:	73fb      	strb	r3, [r7, #15]
      break;
 80144da:	bf00      	nop
  }

  return ret;
 80144dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3710      	adds	r7, #16
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}

080144e6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80144e6:	b580      	push	{r7, lr}
 80144e8:	b086      	sub	sp, #24
 80144ea:	af00      	add	r7, sp, #0
 80144ec:	60f8      	str	r0, [r7, #12]
 80144ee:	460b      	mov	r3, r1
 80144f0:	607a      	str	r2, [r7, #4]
 80144f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80144f4:	7afb      	ldrb	r3, [r7, #11]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d138      	bne.n	801456c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014500:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014508:	2b03      	cmp	r3, #3
 801450a:	d14a      	bne.n	80145a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	689a      	ldr	r2, [r3, #8]
 8014510:	693b      	ldr	r3, [r7, #16]
 8014512:	68db      	ldr	r3, [r3, #12]
 8014514:	429a      	cmp	r2, r3
 8014516:	d913      	bls.n	8014540 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014518:	693b      	ldr	r3, [r7, #16]
 801451a:	689a      	ldr	r2, [r3, #8]
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	68db      	ldr	r3, [r3, #12]
 8014520:	1ad2      	subs	r2, r2, r3
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	68da      	ldr	r2, [r3, #12]
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	689b      	ldr	r3, [r3, #8]
 801452e:	4293      	cmp	r3, r2
 8014530:	bf28      	it	cs
 8014532:	4613      	movcs	r3, r2
 8014534:	461a      	mov	r2, r3
 8014536:	6879      	ldr	r1, [r7, #4]
 8014538:	68f8      	ldr	r0, [r7, #12]
 801453a:	f000 ffc5 	bl	80154c8 <USBD_CtlContinueRx>
 801453e:	e030      	b.n	80145a2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014546:	b2db      	uxtb	r3, r3
 8014548:	2b03      	cmp	r3, #3
 801454a:	d10b      	bne.n	8014564 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014552:	691b      	ldr	r3, [r3, #16]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d005      	beq.n	8014564 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801455e:	691b      	ldr	r3, [r3, #16]
 8014560:	68f8      	ldr	r0, [r7, #12]
 8014562:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f000 ffc0 	bl	80154ea <USBD_CtlSendStatus>
 801456a:	e01a      	b.n	80145a2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014572:	b2db      	uxtb	r3, r3
 8014574:	2b03      	cmp	r3, #3
 8014576:	d114      	bne.n	80145a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801457e:	699b      	ldr	r3, [r3, #24]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d00e      	beq.n	80145a2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801458a:	699b      	ldr	r3, [r3, #24]
 801458c:	7afa      	ldrb	r2, [r7, #11]
 801458e:	4611      	mov	r1, r2
 8014590:	68f8      	ldr	r0, [r7, #12]
 8014592:	4798      	blx	r3
 8014594:	4603      	mov	r3, r0
 8014596:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014598:	7dfb      	ldrb	r3, [r7, #23]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d001      	beq.n	80145a2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801459e:	7dfb      	ldrb	r3, [r7, #23]
 80145a0:	e000      	b.n	80145a4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3718      	adds	r7, #24
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b086      	sub	sp, #24
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	60f8      	str	r0, [r7, #12]
 80145b4:	460b      	mov	r3, r1
 80145b6:	607a      	str	r2, [r7, #4]
 80145b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80145ba:	7afb      	ldrb	r3, [r7, #11]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d16b      	bne.n	8014698 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	3314      	adds	r3, #20
 80145c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80145cc:	2b02      	cmp	r3, #2
 80145ce:	d156      	bne.n	801467e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	689a      	ldr	r2, [r3, #8]
 80145d4:	693b      	ldr	r3, [r7, #16]
 80145d6:	68db      	ldr	r3, [r3, #12]
 80145d8:	429a      	cmp	r2, r3
 80145da:	d914      	bls.n	8014606 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	689a      	ldr	r2, [r3, #8]
 80145e0:	693b      	ldr	r3, [r7, #16]
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	1ad2      	subs	r2, r2, r3
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	689b      	ldr	r3, [r3, #8]
 80145ee:	461a      	mov	r2, r3
 80145f0:	6879      	ldr	r1, [r7, #4]
 80145f2:	68f8      	ldr	r0, [r7, #12]
 80145f4:	f000 ff3a 	bl	801546c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80145f8:	2300      	movs	r3, #0
 80145fa:	2200      	movs	r2, #0
 80145fc:	2100      	movs	r1, #0
 80145fe:	68f8      	ldr	r0, [r7, #12]
 8014600:	f001 fbf0 	bl	8015de4 <USBD_LL_PrepareReceive>
 8014604:	e03b      	b.n	801467e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	68da      	ldr	r2, [r3, #12]
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	689b      	ldr	r3, [r3, #8]
 801460e:	429a      	cmp	r2, r3
 8014610:	d11c      	bne.n	801464c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	685a      	ldr	r2, [r3, #4]
 8014616:	693b      	ldr	r3, [r7, #16]
 8014618:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801461a:	429a      	cmp	r2, r3
 801461c:	d316      	bcc.n	801464c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801461e:	693b      	ldr	r3, [r7, #16]
 8014620:	685a      	ldr	r2, [r3, #4]
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014628:	429a      	cmp	r2, r3
 801462a:	d20f      	bcs.n	801464c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801462c:	2200      	movs	r2, #0
 801462e:	2100      	movs	r1, #0
 8014630:	68f8      	ldr	r0, [r7, #12]
 8014632:	f000 ff1b 	bl	801546c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	2200      	movs	r2, #0
 801463a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801463e:	2300      	movs	r3, #0
 8014640:	2200      	movs	r2, #0
 8014642:	2100      	movs	r1, #0
 8014644:	68f8      	ldr	r0, [r7, #12]
 8014646:	f001 fbcd 	bl	8015de4 <USBD_LL_PrepareReceive>
 801464a:	e018      	b.n	801467e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014652:	b2db      	uxtb	r3, r3
 8014654:	2b03      	cmp	r3, #3
 8014656:	d10b      	bne.n	8014670 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d005      	beq.n	8014670 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	68f8      	ldr	r0, [r7, #12]
 801466e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014670:	2180      	movs	r1, #128	; 0x80
 8014672:	68f8      	ldr	r0, [r7, #12]
 8014674:	f001 fb0c 	bl	8015c90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f000 ff49 	bl	8015510 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014684:	2b01      	cmp	r3, #1
 8014686:	d122      	bne.n	80146ce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014688:	68f8      	ldr	r0, [r7, #12]
 801468a:	f7ff fe98 	bl	80143be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	2200      	movs	r2, #0
 8014692:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014696:	e01a      	b.n	80146ce <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801469e:	b2db      	uxtb	r3, r3
 80146a0:	2b03      	cmp	r3, #3
 80146a2:	d114      	bne.n	80146ce <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146aa:	695b      	ldr	r3, [r3, #20]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d00e      	beq.n	80146ce <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146b6:	695b      	ldr	r3, [r3, #20]
 80146b8:	7afa      	ldrb	r2, [r7, #11]
 80146ba:	4611      	mov	r1, r2
 80146bc:	68f8      	ldr	r0, [r7, #12]
 80146be:	4798      	blx	r3
 80146c0:	4603      	mov	r3, r0
 80146c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80146c4:	7dfb      	ldrb	r3, [r7, #23]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d001      	beq.n	80146ce <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80146ca:	7dfb      	ldrb	r3, [r7, #23]
 80146cc:	e000      	b.n	80146d0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80146ce:	2300      	movs	r3, #0
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3718      	adds	r7, #24
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2201      	movs	r2, #1
 80146e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2200      	movs	r2, #0
 80146ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2200      	movs	r2, #0
 80146f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	2200      	movs	r2, #0
 80146fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014704:	2b00      	cmp	r3, #0
 8014706:	d101      	bne.n	801470c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8014708:	2303      	movs	r3, #3
 801470a:	e02f      	b.n	801476c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014712:	2b00      	cmp	r3, #0
 8014714:	d00f      	beq.n	8014736 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d009      	beq.n	8014736 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	687a      	ldr	r2, [r7, #4]
 801472c:	6852      	ldr	r2, [r2, #4]
 801472e:	b2d2      	uxtb	r2, r2
 8014730:	4611      	mov	r1, r2
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014736:	2340      	movs	r3, #64	; 0x40
 8014738:	2200      	movs	r2, #0
 801473a:	2100      	movs	r1, #0
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f001 fa62 	bl	8015c06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2201      	movs	r2, #1
 8014746:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2240      	movs	r2, #64	; 0x40
 801474e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014752:	2340      	movs	r3, #64	; 0x40
 8014754:	2200      	movs	r2, #0
 8014756:	2180      	movs	r1, #128	; 0x80
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	f001 fa54 	bl	8015c06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2201      	movs	r2, #1
 8014762:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2240      	movs	r2, #64	; 0x40
 8014768:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801476a:	2300      	movs	r3, #0
}
 801476c:	4618      	mov	r0, r3
 801476e:	3708      	adds	r7, #8
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	460b      	mov	r3, r1
 801477e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	78fa      	ldrb	r2, [r7, #3]
 8014784:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014786:	2300      	movs	r3, #0
}
 8014788:	4618      	mov	r0, r3
 801478a:	370c      	adds	r7, #12
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr

08014794 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014794:	b480      	push	{r7}
 8014796:	b083      	sub	sp, #12
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147a2:	b2da      	uxtb	r2, r3
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2204      	movs	r2, #4
 80147ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80147b2:	2300      	movs	r3, #0
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	370c      	adds	r7, #12
 80147b8:	46bd      	mov	sp, r7
 80147ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147be:	4770      	bx	lr

080147c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80147c0:	b480      	push	{r7}
 80147c2:	b083      	sub	sp, #12
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	2b04      	cmp	r3, #4
 80147d2:	d106      	bne.n	80147e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80147da:	b2da      	uxtb	r2, r3
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80147e2:	2300      	movs	r3, #0
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr

080147f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d101      	bne.n	8014806 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8014802:	2303      	movs	r3, #3
 8014804:	e012      	b.n	801482c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801480c:	b2db      	uxtb	r3, r3
 801480e:	2b03      	cmp	r3, #3
 8014810:	d10b      	bne.n	801482a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014818:	69db      	ldr	r3, [r3, #28]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d005      	beq.n	801482a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014824:	69db      	ldr	r3, [r3, #28]
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801482a:	2300      	movs	r3, #0
}
 801482c:	4618      	mov	r0, r3
 801482e:	3708      	adds	r7, #8
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014834:	b480      	push	{r7}
 8014836:	b087      	sub	sp, #28
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	3301      	adds	r3, #1
 801484a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	781b      	ldrb	r3, [r3, #0]
 8014850:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014852:	8a3b      	ldrh	r3, [r7, #16]
 8014854:	021b      	lsls	r3, r3, #8
 8014856:	b21a      	sxth	r2, r3
 8014858:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801485c:	4313      	orrs	r3, r2
 801485e:	b21b      	sxth	r3, r3
 8014860:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014862:	89fb      	ldrh	r3, [r7, #14]
}
 8014864:	4618      	mov	r0, r3
 8014866:	371c      	adds	r7, #28
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr

08014870 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b084      	sub	sp, #16
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801487a:	2300      	movs	r3, #0
 801487c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	781b      	ldrb	r3, [r3, #0]
 8014882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014886:	2b40      	cmp	r3, #64	; 0x40
 8014888:	d005      	beq.n	8014896 <USBD_StdDevReq+0x26>
 801488a:	2b40      	cmp	r3, #64	; 0x40
 801488c:	d853      	bhi.n	8014936 <USBD_StdDevReq+0xc6>
 801488e:	2b00      	cmp	r3, #0
 8014890:	d00b      	beq.n	80148aa <USBD_StdDevReq+0x3a>
 8014892:	2b20      	cmp	r3, #32
 8014894:	d14f      	bne.n	8014936 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801489c:	689b      	ldr	r3, [r3, #8]
 801489e:	6839      	ldr	r1, [r7, #0]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	4798      	blx	r3
 80148a4:	4603      	mov	r3, r0
 80148a6:	73fb      	strb	r3, [r7, #15]
      break;
 80148a8:	e04a      	b.n	8014940 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	785b      	ldrb	r3, [r3, #1]
 80148ae:	2b09      	cmp	r3, #9
 80148b0:	d83b      	bhi.n	801492a <USBD_StdDevReq+0xba>
 80148b2:	a201      	add	r2, pc, #4	; (adr r2, 80148b8 <USBD_StdDevReq+0x48>)
 80148b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148b8:	0801490d 	.word	0x0801490d
 80148bc:	08014921 	.word	0x08014921
 80148c0:	0801492b 	.word	0x0801492b
 80148c4:	08014917 	.word	0x08014917
 80148c8:	0801492b 	.word	0x0801492b
 80148cc:	080148eb 	.word	0x080148eb
 80148d0:	080148e1 	.word	0x080148e1
 80148d4:	0801492b 	.word	0x0801492b
 80148d8:	08014903 	.word	0x08014903
 80148dc:	080148f5 	.word	0x080148f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80148e0:	6839      	ldr	r1, [r7, #0]
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f000 f9de 	bl	8014ca4 <USBD_GetDescriptor>
          break;
 80148e8:	e024      	b.n	8014934 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80148ea:	6839      	ldr	r1, [r7, #0]
 80148ec:	6878      	ldr	r0, [r7, #4]
 80148ee:	f000 fb6d 	bl	8014fcc <USBD_SetAddress>
          break;
 80148f2:	e01f      	b.n	8014934 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80148f4:	6839      	ldr	r1, [r7, #0]
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f000 fbac 	bl	8015054 <USBD_SetConfig>
 80148fc:	4603      	mov	r3, r0
 80148fe:	73fb      	strb	r3, [r7, #15]
          break;
 8014900:	e018      	b.n	8014934 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014902:	6839      	ldr	r1, [r7, #0]
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f000 fc4b 	bl	80151a0 <USBD_GetConfig>
          break;
 801490a:	e013      	b.n	8014934 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801490c:	6839      	ldr	r1, [r7, #0]
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 fc7c 	bl	801520c <USBD_GetStatus>
          break;
 8014914:	e00e      	b.n	8014934 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014916:	6839      	ldr	r1, [r7, #0]
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f000 fcab 	bl	8015274 <USBD_SetFeature>
          break;
 801491e:	e009      	b.n	8014934 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014920:	6839      	ldr	r1, [r7, #0]
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f000 fcba 	bl	801529c <USBD_ClrFeature>
          break;
 8014928:	e004      	b.n	8014934 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801492a:	6839      	ldr	r1, [r7, #0]
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f000 fd11 	bl	8015354 <USBD_CtlError>
          break;
 8014932:	bf00      	nop
      }
      break;
 8014934:	e004      	b.n	8014940 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014936:	6839      	ldr	r1, [r7, #0]
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f000 fd0b 	bl	8015354 <USBD_CtlError>
      break;
 801493e:	bf00      	nop
  }

  return ret;
 8014940:	7bfb      	ldrb	r3, [r7, #15]
}
 8014942:	4618      	mov	r0, r3
 8014944:	3710      	adds	r7, #16
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}
 801494a:	bf00      	nop

0801494c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014956:	2300      	movs	r3, #0
 8014958:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014962:	2b40      	cmp	r3, #64	; 0x40
 8014964:	d005      	beq.n	8014972 <USBD_StdItfReq+0x26>
 8014966:	2b40      	cmp	r3, #64	; 0x40
 8014968:	d82f      	bhi.n	80149ca <USBD_StdItfReq+0x7e>
 801496a:	2b00      	cmp	r3, #0
 801496c:	d001      	beq.n	8014972 <USBD_StdItfReq+0x26>
 801496e:	2b20      	cmp	r3, #32
 8014970:	d12b      	bne.n	80149ca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014978:	b2db      	uxtb	r3, r3
 801497a:	3b01      	subs	r3, #1
 801497c:	2b02      	cmp	r3, #2
 801497e:	d81d      	bhi.n	80149bc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	889b      	ldrh	r3, [r3, #4]
 8014984:	b2db      	uxtb	r3, r3
 8014986:	2b01      	cmp	r3, #1
 8014988:	d813      	bhi.n	80149b2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014990:	689b      	ldr	r3, [r3, #8]
 8014992:	6839      	ldr	r1, [r7, #0]
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	4798      	blx	r3
 8014998:	4603      	mov	r3, r0
 801499a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	88db      	ldrh	r3, [r3, #6]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d110      	bne.n	80149c6 <USBD_StdItfReq+0x7a>
 80149a4:	7bfb      	ldrb	r3, [r7, #15]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d10d      	bne.n	80149c6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f000 fd9d 	bl	80154ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80149b0:	e009      	b.n	80149c6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80149b2:	6839      	ldr	r1, [r7, #0]
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f000 fccd 	bl	8015354 <USBD_CtlError>
          break;
 80149ba:	e004      	b.n	80149c6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80149bc:	6839      	ldr	r1, [r7, #0]
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f000 fcc8 	bl	8015354 <USBD_CtlError>
          break;
 80149c4:	e000      	b.n	80149c8 <USBD_StdItfReq+0x7c>
          break;
 80149c6:	bf00      	nop
      }
      break;
 80149c8:	e004      	b.n	80149d4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80149ca:	6839      	ldr	r1, [r7, #0]
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f000 fcc1 	bl	8015354 <USBD_CtlError>
      break;
 80149d2:	bf00      	nop
  }

  return ret;
 80149d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3710      	adds	r7, #16
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}

080149de <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149de:	b580      	push	{r7, lr}
 80149e0:	b084      	sub	sp, #16
 80149e2:	af00      	add	r7, sp, #0
 80149e4:	6078      	str	r0, [r7, #4]
 80149e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80149e8:	2300      	movs	r3, #0
 80149ea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80149ec:	683b      	ldr	r3, [r7, #0]
 80149ee:	889b      	ldrh	r3, [r3, #4]
 80149f0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80149fa:	2b40      	cmp	r3, #64	; 0x40
 80149fc:	d007      	beq.n	8014a0e <USBD_StdEPReq+0x30>
 80149fe:	2b40      	cmp	r3, #64	; 0x40
 8014a00:	f200 8145 	bhi.w	8014c8e <USBD_StdEPReq+0x2b0>
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d00c      	beq.n	8014a22 <USBD_StdEPReq+0x44>
 8014a08:	2b20      	cmp	r3, #32
 8014a0a:	f040 8140 	bne.w	8014c8e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a14:	689b      	ldr	r3, [r3, #8]
 8014a16:	6839      	ldr	r1, [r7, #0]
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	4798      	blx	r3
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8014a20:	e13a      	b.n	8014c98 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	785b      	ldrb	r3, [r3, #1]
 8014a26:	2b03      	cmp	r3, #3
 8014a28:	d007      	beq.n	8014a3a <USBD_StdEPReq+0x5c>
 8014a2a:	2b03      	cmp	r3, #3
 8014a2c:	f300 8129 	bgt.w	8014c82 <USBD_StdEPReq+0x2a4>
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d07f      	beq.n	8014b34 <USBD_StdEPReq+0x156>
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d03c      	beq.n	8014ab2 <USBD_StdEPReq+0xd4>
 8014a38:	e123      	b.n	8014c82 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a40:	b2db      	uxtb	r3, r3
 8014a42:	2b02      	cmp	r3, #2
 8014a44:	d002      	beq.n	8014a4c <USBD_StdEPReq+0x6e>
 8014a46:	2b03      	cmp	r3, #3
 8014a48:	d016      	beq.n	8014a78 <USBD_StdEPReq+0x9a>
 8014a4a:	e02c      	b.n	8014aa6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a4c:	7bbb      	ldrb	r3, [r7, #14]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d00d      	beq.n	8014a6e <USBD_StdEPReq+0x90>
 8014a52:	7bbb      	ldrb	r3, [r7, #14]
 8014a54:	2b80      	cmp	r3, #128	; 0x80
 8014a56:	d00a      	beq.n	8014a6e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a58:	7bbb      	ldrb	r3, [r7, #14]
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f001 f917 	bl	8015c90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a62:	2180      	movs	r1, #128	; 0x80
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f001 f913 	bl	8015c90 <USBD_LL_StallEP>
 8014a6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014a6c:	e020      	b.n	8014ab0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014a6e:	6839      	ldr	r1, [r7, #0]
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f000 fc6f 	bl	8015354 <USBD_CtlError>
              break;
 8014a76:	e01b      	b.n	8014ab0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	885b      	ldrh	r3, [r3, #2]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d10e      	bne.n	8014a9e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014a80:	7bbb      	ldrb	r3, [r7, #14]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d00b      	beq.n	8014a9e <USBD_StdEPReq+0xc0>
 8014a86:	7bbb      	ldrb	r3, [r7, #14]
 8014a88:	2b80      	cmp	r3, #128	; 0x80
 8014a8a:	d008      	beq.n	8014a9e <USBD_StdEPReq+0xc0>
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	88db      	ldrh	r3, [r3, #6]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d104      	bne.n	8014a9e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a94:	7bbb      	ldrb	r3, [r7, #14]
 8014a96:	4619      	mov	r1, r3
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f001 f8f9 	bl	8015c90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f000 fd23 	bl	80154ea <USBD_CtlSendStatus>

              break;
 8014aa4:	e004      	b.n	8014ab0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014aa6:	6839      	ldr	r1, [r7, #0]
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f000 fc53 	bl	8015354 <USBD_CtlError>
              break;
 8014aae:	bf00      	nop
          }
          break;
 8014ab0:	e0ec      	b.n	8014c8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ab8:	b2db      	uxtb	r3, r3
 8014aba:	2b02      	cmp	r3, #2
 8014abc:	d002      	beq.n	8014ac4 <USBD_StdEPReq+0xe6>
 8014abe:	2b03      	cmp	r3, #3
 8014ac0:	d016      	beq.n	8014af0 <USBD_StdEPReq+0x112>
 8014ac2:	e030      	b.n	8014b26 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014ac4:	7bbb      	ldrb	r3, [r7, #14]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d00d      	beq.n	8014ae6 <USBD_StdEPReq+0x108>
 8014aca:	7bbb      	ldrb	r3, [r7, #14]
 8014acc:	2b80      	cmp	r3, #128	; 0x80
 8014ace:	d00a      	beq.n	8014ae6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014ad0:	7bbb      	ldrb	r3, [r7, #14]
 8014ad2:	4619      	mov	r1, r3
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f001 f8db 	bl	8015c90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ada:	2180      	movs	r1, #128	; 0x80
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f001 f8d7 	bl	8015c90 <USBD_LL_StallEP>
 8014ae2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014ae4:	e025      	b.n	8014b32 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014ae6:	6839      	ldr	r1, [r7, #0]
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f000 fc33 	bl	8015354 <USBD_CtlError>
              break;
 8014aee:	e020      	b.n	8014b32 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	885b      	ldrh	r3, [r3, #2]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d11b      	bne.n	8014b30 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014af8:	7bbb      	ldrb	r3, [r7, #14]
 8014afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d004      	beq.n	8014b0c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014b02:	7bbb      	ldrb	r3, [r7, #14]
 8014b04:	4619      	mov	r1, r3
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f001 f8e1 	bl	8015cce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f000 fcec 	bl	80154ea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b18:	689b      	ldr	r3, [r3, #8]
 8014b1a:	6839      	ldr	r1, [r7, #0]
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	4798      	blx	r3
 8014b20:	4603      	mov	r3, r0
 8014b22:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014b24:	e004      	b.n	8014b30 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014b26:	6839      	ldr	r1, [r7, #0]
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f000 fc13 	bl	8015354 <USBD_CtlError>
              break;
 8014b2e:	e000      	b.n	8014b32 <USBD_StdEPReq+0x154>
              break;
 8014b30:	bf00      	nop
          }
          break;
 8014b32:	e0ab      	b.n	8014c8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b3a:	b2db      	uxtb	r3, r3
 8014b3c:	2b02      	cmp	r3, #2
 8014b3e:	d002      	beq.n	8014b46 <USBD_StdEPReq+0x168>
 8014b40:	2b03      	cmp	r3, #3
 8014b42:	d032      	beq.n	8014baa <USBD_StdEPReq+0x1cc>
 8014b44:	e097      	b.n	8014c76 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b46:	7bbb      	ldrb	r3, [r7, #14]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d007      	beq.n	8014b5c <USBD_StdEPReq+0x17e>
 8014b4c:	7bbb      	ldrb	r3, [r7, #14]
 8014b4e:	2b80      	cmp	r3, #128	; 0x80
 8014b50:	d004      	beq.n	8014b5c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014b52:	6839      	ldr	r1, [r7, #0]
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f000 fbfd 	bl	8015354 <USBD_CtlError>
                break;
 8014b5a:	e091      	b.n	8014c80 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	da0b      	bge.n	8014b7c <USBD_StdEPReq+0x19e>
 8014b64:	7bbb      	ldrb	r3, [r7, #14]
 8014b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014b6a:	4613      	mov	r3, r2
 8014b6c:	009b      	lsls	r3, r3, #2
 8014b6e:	4413      	add	r3, r2
 8014b70:	009b      	lsls	r3, r3, #2
 8014b72:	3310      	adds	r3, #16
 8014b74:	687a      	ldr	r2, [r7, #4]
 8014b76:	4413      	add	r3, r2
 8014b78:	3304      	adds	r3, #4
 8014b7a:	e00b      	b.n	8014b94 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014b7c:	7bbb      	ldrb	r3, [r7, #14]
 8014b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b82:	4613      	mov	r3, r2
 8014b84:	009b      	lsls	r3, r3, #2
 8014b86:	4413      	add	r3, r2
 8014b88:	009b      	lsls	r3, r3, #2
 8014b8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014b8e:	687a      	ldr	r2, [r7, #4]
 8014b90:	4413      	add	r3, r2
 8014b92:	3304      	adds	r3, #4
 8014b94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	2202      	movs	r2, #2
 8014ba0:	4619      	mov	r1, r3
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f000 fc47 	bl	8015436 <USBD_CtlSendData>
              break;
 8014ba8:	e06a      	b.n	8014c80 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014baa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	da11      	bge.n	8014bd6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014bb2:	7bbb      	ldrb	r3, [r7, #14]
 8014bb4:	f003 020f 	and.w	r2, r3, #15
 8014bb8:	6879      	ldr	r1, [r7, #4]
 8014bba:	4613      	mov	r3, r2
 8014bbc:	009b      	lsls	r3, r3, #2
 8014bbe:	4413      	add	r3, r2
 8014bc0:	009b      	lsls	r3, r3, #2
 8014bc2:	440b      	add	r3, r1
 8014bc4:	3324      	adds	r3, #36	; 0x24
 8014bc6:	881b      	ldrh	r3, [r3, #0]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d117      	bne.n	8014bfc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014bcc:	6839      	ldr	r1, [r7, #0]
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f000 fbc0 	bl	8015354 <USBD_CtlError>
                  break;
 8014bd4:	e054      	b.n	8014c80 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014bd6:	7bbb      	ldrb	r3, [r7, #14]
 8014bd8:	f003 020f 	and.w	r2, r3, #15
 8014bdc:	6879      	ldr	r1, [r7, #4]
 8014bde:	4613      	mov	r3, r2
 8014be0:	009b      	lsls	r3, r3, #2
 8014be2:	4413      	add	r3, r2
 8014be4:	009b      	lsls	r3, r3, #2
 8014be6:	440b      	add	r3, r1
 8014be8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014bec:	881b      	ldrh	r3, [r3, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d104      	bne.n	8014bfc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014bf2:	6839      	ldr	r1, [r7, #0]
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f000 fbad 	bl	8015354 <USBD_CtlError>
                  break;
 8014bfa:	e041      	b.n	8014c80 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	da0b      	bge.n	8014c1c <USBD_StdEPReq+0x23e>
 8014c04:	7bbb      	ldrb	r3, [r7, #14]
 8014c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014c0a:	4613      	mov	r3, r2
 8014c0c:	009b      	lsls	r3, r3, #2
 8014c0e:	4413      	add	r3, r2
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	3310      	adds	r3, #16
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	4413      	add	r3, r2
 8014c18:	3304      	adds	r3, #4
 8014c1a:	e00b      	b.n	8014c34 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014c1c:	7bbb      	ldrb	r3, [r7, #14]
 8014c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c22:	4613      	mov	r3, r2
 8014c24:	009b      	lsls	r3, r3, #2
 8014c26:	4413      	add	r3, r2
 8014c28:	009b      	lsls	r3, r3, #2
 8014c2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014c2e:	687a      	ldr	r2, [r7, #4]
 8014c30:	4413      	add	r3, r2
 8014c32:	3304      	adds	r3, #4
 8014c34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014c36:	7bbb      	ldrb	r3, [r7, #14]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d002      	beq.n	8014c42 <USBD_StdEPReq+0x264>
 8014c3c:	7bbb      	ldrb	r3, [r7, #14]
 8014c3e:	2b80      	cmp	r3, #128	; 0x80
 8014c40:	d103      	bne.n	8014c4a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	2200      	movs	r2, #0
 8014c46:	601a      	str	r2, [r3, #0]
 8014c48:	e00e      	b.n	8014c68 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014c4a:	7bbb      	ldrb	r3, [r7, #14]
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f001 f85c 	bl	8015d0c <USBD_LL_IsStallEP>
 8014c54:	4603      	mov	r3, r0
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d003      	beq.n	8014c62 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	2201      	movs	r2, #1
 8014c5e:	601a      	str	r2, [r3, #0]
 8014c60:	e002      	b.n	8014c68 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	2200      	movs	r2, #0
 8014c66:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	2202      	movs	r2, #2
 8014c6c:	4619      	mov	r1, r3
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f000 fbe1 	bl	8015436 <USBD_CtlSendData>
              break;
 8014c74:	e004      	b.n	8014c80 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014c76:	6839      	ldr	r1, [r7, #0]
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f000 fb6b 	bl	8015354 <USBD_CtlError>
              break;
 8014c7e:	bf00      	nop
          }
          break;
 8014c80:	e004      	b.n	8014c8c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014c82:	6839      	ldr	r1, [r7, #0]
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f000 fb65 	bl	8015354 <USBD_CtlError>
          break;
 8014c8a:	bf00      	nop
      }
      break;
 8014c8c:	e004      	b.n	8014c98 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014c8e:	6839      	ldr	r1, [r7, #0]
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f000 fb5f 	bl	8015354 <USBD_CtlError>
      break;
 8014c96:	bf00      	nop
  }

  return ret;
 8014c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	3710      	adds	r7, #16
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}
	...

08014ca4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	885b      	ldrh	r3, [r3, #2]
 8014cbe:	0a1b      	lsrs	r3, r3, #8
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	2b0e      	cmp	r3, #14
 8014cc6:	f200 8152 	bhi.w	8014f6e <USBD_GetDescriptor+0x2ca>
 8014cca:	a201      	add	r2, pc, #4	; (adr r2, 8014cd0 <USBD_GetDescriptor+0x2c>)
 8014ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cd0:	08014d41 	.word	0x08014d41
 8014cd4:	08014d59 	.word	0x08014d59
 8014cd8:	08014d99 	.word	0x08014d99
 8014cdc:	08014f6f 	.word	0x08014f6f
 8014ce0:	08014f6f 	.word	0x08014f6f
 8014ce4:	08014f0f 	.word	0x08014f0f
 8014ce8:	08014f3b 	.word	0x08014f3b
 8014cec:	08014f6f 	.word	0x08014f6f
 8014cf0:	08014f6f 	.word	0x08014f6f
 8014cf4:	08014f6f 	.word	0x08014f6f
 8014cf8:	08014f6f 	.word	0x08014f6f
 8014cfc:	08014f6f 	.word	0x08014f6f
 8014d00:	08014f6f 	.word	0x08014f6f
 8014d04:	08014f6f 	.word	0x08014f6f
 8014d08:	08014d0d 	.word	0x08014d0d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d12:	69db      	ldr	r3, [r3, #28]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d00b      	beq.n	8014d30 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d1e:	69db      	ldr	r3, [r3, #28]
 8014d20:	687a      	ldr	r2, [r7, #4]
 8014d22:	7c12      	ldrb	r2, [r2, #16]
 8014d24:	f107 0108 	add.w	r1, r7, #8
 8014d28:	4610      	mov	r0, r2
 8014d2a:	4798      	blx	r3
 8014d2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d2e:	e126      	b.n	8014f7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014d30:	6839      	ldr	r1, [r7, #0]
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f000 fb0e 	bl	8015354 <USBD_CtlError>
        err++;
 8014d38:	7afb      	ldrb	r3, [r7, #11]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	72fb      	strb	r3, [r7, #11]
      break;
 8014d3e:	e11e      	b.n	8014f7e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	687a      	ldr	r2, [r7, #4]
 8014d4a:	7c12      	ldrb	r2, [r2, #16]
 8014d4c:	f107 0108 	add.w	r1, r7, #8
 8014d50:	4610      	mov	r0, r2
 8014d52:	4798      	blx	r3
 8014d54:	60f8      	str	r0, [r7, #12]
      break;
 8014d56:	e112      	b.n	8014f7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	7c1b      	ldrb	r3, [r3, #16]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d10d      	bne.n	8014d7c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d68:	f107 0208 	add.w	r2, r7, #8
 8014d6c:	4610      	mov	r0, r2
 8014d6e:	4798      	blx	r3
 8014d70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	3301      	adds	r3, #1
 8014d76:	2202      	movs	r2, #2
 8014d78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014d7a:	e100      	b.n	8014f7e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d84:	f107 0208 	add.w	r2, r7, #8
 8014d88:	4610      	mov	r0, r2
 8014d8a:	4798      	blx	r3
 8014d8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	3301      	adds	r3, #1
 8014d92:	2202      	movs	r2, #2
 8014d94:	701a      	strb	r2, [r3, #0]
      break;
 8014d96:	e0f2      	b.n	8014f7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	885b      	ldrh	r3, [r3, #2]
 8014d9c:	b2db      	uxtb	r3, r3
 8014d9e:	2b05      	cmp	r3, #5
 8014da0:	f200 80ac 	bhi.w	8014efc <USBD_GetDescriptor+0x258>
 8014da4:	a201      	add	r2, pc, #4	; (adr r2, 8014dac <USBD_GetDescriptor+0x108>)
 8014da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014daa:	bf00      	nop
 8014dac:	08014dc5 	.word	0x08014dc5
 8014db0:	08014df9 	.word	0x08014df9
 8014db4:	08014e2d 	.word	0x08014e2d
 8014db8:	08014e61 	.word	0x08014e61
 8014dbc:	08014e95 	.word	0x08014e95
 8014dc0:	08014ec9 	.word	0x08014ec9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d00b      	beq.n	8014de8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	687a      	ldr	r2, [r7, #4]
 8014dda:	7c12      	ldrb	r2, [r2, #16]
 8014ddc:	f107 0108 	add.w	r1, r7, #8
 8014de0:	4610      	mov	r0, r2
 8014de2:	4798      	blx	r3
 8014de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014de6:	e091      	b.n	8014f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014de8:	6839      	ldr	r1, [r7, #0]
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f000 fab2 	bl	8015354 <USBD_CtlError>
            err++;
 8014df0:	7afb      	ldrb	r3, [r7, #11]
 8014df2:	3301      	adds	r3, #1
 8014df4:	72fb      	strb	r3, [r7, #11]
          break;
 8014df6:	e089      	b.n	8014f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dfe:	689b      	ldr	r3, [r3, #8]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d00b      	beq.n	8014e1c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e0a:	689b      	ldr	r3, [r3, #8]
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	7c12      	ldrb	r2, [r2, #16]
 8014e10:	f107 0108 	add.w	r1, r7, #8
 8014e14:	4610      	mov	r0, r2
 8014e16:	4798      	blx	r3
 8014e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e1a:	e077      	b.n	8014f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014e1c:	6839      	ldr	r1, [r7, #0]
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f000 fa98 	bl	8015354 <USBD_CtlError>
            err++;
 8014e24:	7afb      	ldrb	r3, [r7, #11]
 8014e26:	3301      	adds	r3, #1
 8014e28:	72fb      	strb	r3, [r7, #11]
          break;
 8014e2a:	e06f      	b.n	8014f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e32:	68db      	ldr	r3, [r3, #12]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d00b      	beq.n	8014e50 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e3e:	68db      	ldr	r3, [r3, #12]
 8014e40:	687a      	ldr	r2, [r7, #4]
 8014e42:	7c12      	ldrb	r2, [r2, #16]
 8014e44:	f107 0108 	add.w	r1, r7, #8
 8014e48:	4610      	mov	r0, r2
 8014e4a:	4798      	blx	r3
 8014e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e4e:	e05d      	b.n	8014f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014e50:	6839      	ldr	r1, [r7, #0]
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f000 fa7e 	bl	8015354 <USBD_CtlError>
            err++;
 8014e58:	7afb      	ldrb	r3, [r7, #11]
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8014e5e:	e055      	b.n	8014f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e66:	691b      	ldr	r3, [r3, #16]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d00b      	beq.n	8014e84 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e72:	691b      	ldr	r3, [r3, #16]
 8014e74:	687a      	ldr	r2, [r7, #4]
 8014e76:	7c12      	ldrb	r2, [r2, #16]
 8014e78:	f107 0108 	add.w	r1, r7, #8
 8014e7c:	4610      	mov	r0, r2
 8014e7e:	4798      	blx	r3
 8014e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e82:	e043      	b.n	8014f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014e84:	6839      	ldr	r1, [r7, #0]
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f000 fa64 	bl	8015354 <USBD_CtlError>
            err++;
 8014e8c:	7afb      	ldrb	r3, [r7, #11]
 8014e8e:	3301      	adds	r3, #1
 8014e90:	72fb      	strb	r3, [r7, #11]
          break;
 8014e92:	e03b      	b.n	8014f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e9a:	695b      	ldr	r3, [r3, #20]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d00b      	beq.n	8014eb8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ea6:	695b      	ldr	r3, [r3, #20]
 8014ea8:	687a      	ldr	r2, [r7, #4]
 8014eaa:	7c12      	ldrb	r2, [r2, #16]
 8014eac:	f107 0108 	add.w	r1, r7, #8
 8014eb0:	4610      	mov	r0, r2
 8014eb2:	4798      	blx	r3
 8014eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014eb6:	e029      	b.n	8014f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014eb8:	6839      	ldr	r1, [r7, #0]
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 fa4a 	bl	8015354 <USBD_CtlError>
            err++;
 8014ec0:	7afb      	ldrb	r3, [r7, #11]
 8014ec2:	3301      	adds	r3, #1
 8014ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8014ec6:	e021      	b.n	8014f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ece:	699b      	ldr	r3, [r3, #24]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d00b      	beq.n	8014eec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eda:	699b      	ldr	r3, [r3, #24]
 8014edc:	687a      	ldr	r2, [r7, #4]
 8014ede:	7c12      	ldrb	r2, [r2, #16]
 8014ee0:	f107 0108 	add.w	r1, r7, #8
 8014ee4:	4610      	mov	r0, r2
 8014ee6:	4798      	blx	r3
 8014ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014eea:	e00f      	b.n	8014f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014eec:	6839      	ldr	r1, [r7, #0]
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	f000 fa30 	bl	8015354 <USBD_CtlError>
            err++;
 8014ef4:	7afb      	ldrb	r3, [r7, #11]
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8014efa:	e007      	b.n	8014f0c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014efc:	6839      	ldr	r1, [r7, #0]
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f000 fa28 	bl	8015354 <USBD_CtlError>
          err++;
 8014f04:	7afb      	ldrb	r3, [r7, #11]
 8014f06:	3301      	adds	r3, #1
 8014f08:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014f0a:	bf00      	nop
      }
      break;
 8014f0c:	e037      	b.n	8014f7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	7c1b      	ldrb	r3, [r3, #16]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d109      	bne.n	8014f2a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f1e:	f107 0208 	add.w	r2, r7, #8
 8014f22:	4610      	mov	r0, r2
 8014f24:	4798      	blx	r3
 8014f26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f28:	e029      	b.n	8014f7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014f2a:	6839      	ldr	r1, [r7, #0]
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f000 fa11 	bl	8015354 <USBD_CtlError>
        err++;
 8014f32:	7afb      	ldrb	r3, [r7, #11]
 8014f34:	3301      	adds	r3, #1
 8014f36:	72fb      	strb	r3, [r7, #11]
      break;
 8014f38:	e021      	b.n	8014f7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	7c1b      	ldrb	r3, [r3, #16]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d10d      	bne.n	8014f5e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f4a:	f107 0208 	add.w	r2, r7, #8
 8014f4e:	4610      	mov	r0, r2
 8014f50:	4798      	blx	r3
 8014f52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	3301      	adds	r3, #1
 8014f58:	2207      	movs	r2, #7
 8014f5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f5c:	e00f      	b.n	8014f7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014f5e:	6839      	ldr	r1, [r7, #0]
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f000 f9f7 	bl	8015354 <USBD_CtlError>
        err++;
 8014f66:	7afb      	ldrb	r3, [r7, #11]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8014f6c:	e007      	b.n	8014f7e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014f6e:	6839      	ldr	r1, [r7, #0]
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f000 f9ef 	bl	8015354 <USBD_CtlError>
      err++;
 8014f76:	7afb      	ldrb	r3, [r7, #11]
 8014f78:	3301      	adds	r3, #1
 8014f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8014f7c:	bf00      	nop
  }

  if (err != 0U)
 8014f7e:	7afb      	ldrb	r3, [r7, #11]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d11e      	bne.n	8014fc2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	88db      	ldrh	r3, [r3, #6]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d016      	beq.n	8014fba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014f8c:	893b      	ldrh	r3, [r7, #8]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d00e      	beq.n	8014fb0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	88da      	ldrh	r2, [r3, #6]
 8014f96:	893b      	ldrh	r3, [r7, #8]
 8014f98:	4293      	cmp	r3, r2
 8014f9a:	bf28      	it	cs
 8014f9c:	4613      	movcs	r3, r2
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014fa2:	893b      	ldrh	r3, [r7, #8]
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	68f9      	ldr	r1, [r7, #12]
 8014fa8:	6878      	ldr	r0, [r7, #4]
 8014faa:	f000 fa44 	bl	8015436 <USBD_CtlSendData>
 8014fae:	e009      	b.n	8014fc4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014fb0:	6839      	ldr	r1, [r7, #0]
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 f9ce 	bl	8015354 <USBD_CtlError>
 8014fb8:	e004      	b.n	8014fc4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 fa95 	bl	80154ea <USBD_CtlSendStatus>
 8014fc0:	e000      	b.n	8014fc4 <USBD_GetDescriptor+0x320>
    return;
 8014fc2:	bf00      	nop
  }
}
 8014fc4:	3710      	adds	r7, #16
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop

08014fcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b084      	sub	sp, #16
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	889b      	ldrh	r3, [r3, #4]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d131      	bne.n	8015042 <USBD_SetAddress+0x76>
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	88db      	ldrh	r3, [r3, #6]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d12d      	bne.n	8015042 <USBD_SetAddress+0x76>
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	885b      	ldrh	r3, [r3, #2]
 8014fea:	2b7f      	cmp	r3, #127	; 0x7f
 8014fec:	d829      	bhi.n	8015042 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	885b      	ldrh	r3, [r3, #2]
 8014ff2:	b2db      	uxtb	r3, r3
 8014ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ff8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015000:	b2db      	uxtb	r3, r3
 8015002:	2b03      	cmp	r3, #3
 8015004:	d104      	bne.n	8015010 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015006:	6839      	ldr	r1, [r7, #0]
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f000 f9a3 	bl	8015354 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801500e:	e01d      	b.n	801504c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	7bfa      	ldrb	r2, [r7, #15]
 8015014:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015018:	7bfb      	ldrb	r3, [r7, #15]
 801501a:	4619      	mov	r1, r3
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f000 fea1 	bl	8015d64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f000 fa61 	bl	80154ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015028:	7bfb      	ldrb	r3, [r7, #15]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d004      	beq.n	8015038 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2202      	movs	r2, #2
 8015032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015036:	e009      	b.n	801504c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2201      	movs	r2, #1
 801503c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015040:	e004      	b.n	801504c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015042:	6839      	ldr	r1, [r7, #0]
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f000 f985 	bl	8015354 <USBD_CtlError>
  }
}
 801504a:	bf00      	nop
 801504c:	bf00      	nop
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801505e:	2300      	movs	r3, #0
 8015060:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	885b      	ldrh	r3, [r3, #2]
 8015066:	b2da      	uxtb	r2, r3
 8015068:	4b4c      	ldr	r3, [pc, #304]	; (801519c <USBD_SetConfig+0x148>)
 801506a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801506c:	4b4b      	ldr	r3, [pc, #300]	; (801519c <USBD_SetConfig+0x148>)
 801506e:	781b      	ldrb	r3, [r3, #0]
 8015070:	2b01      	cmp	r3, #1
 8015072:	d905      	bls.n	8015080 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015074:	6839      	ldr	r1, [r7, #0]
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	f000 f96c 	bl	8015354 <USBD_CtlError>
    return USBD_FAIL;
 801507c:	2303      	movs	r3, #3
 801507e:	e088      	b.n	8015192 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015086:	b2db      	uxtb	r3, r3
 8015088:	2b02      	cmp	r3, #2
 801508a:	d002      	beq.n	8015092 <USBD_SetConfig+0x3e>
 801508c:	2b03      	cmp	r3, #3
 801508e:	d025      	beq.n	80150dc <USBD_SetConfig+0x88>
 8015090:	e071      	b.n	8015176 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015092:	4b42      	ldr	r3, [pc, #264]	; (801519c <USBD_SetConfig+0x148>)
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d01c      	beq.n	80150d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801509a:	4b40      	ldr	r3, [pc, #256]	; (801519c <USBD_SetConfig+0x148>)
 801509c:	781b      	ldrb	r3, [r3, #0]
 801509e:	461a      	mov	r2, r3
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80150a4:	4b3d      	ldr	r3, [pc, #244]	; (801519c <USBD_SetConfig+0x148>)
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	4619      	mov	r1, r3
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f7ff f992 	bl	80143d4 <USBD_SetClassConfig>
 80150b0:	4603      	mov	r3, r0
 80150b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80150b4:	7bfb      	ldrb	r3, [r7, #15]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d004      	beq.n	80150c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80150ba:	6839      	ldr	r1, [r7, #0]
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	f000 f949 	bl	8015354 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80150c2:	e065      	b.n	8015190 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f000 fa10 	bl	80154ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	2203      	movs	r2, #3
 80150ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80150d2:	e05d      	b.n	8015190 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f000 fa08 	bl	80154ea <USBD_CtlSendStatus>
      break;
 80150da:	e059      	b.n	8015190 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80150dc:	4b2f      	ldr	r3, [pc, #188]	; (801519c <USBD_SetConfig+0x148>)
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d112      	bne.n	801510a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2202      	movs	r2, #2
 80150e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80150ec:	4b2b      	ldr	r3, [pc, #172]	; (801519c <USBD_SetConfig+0x148>)
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	461a      	mov	r2, r3
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80150f6:	4b29      	ldr	r3, [pc, #164]	; (801519c <USBD_SetConfig+0x148>)
 80150f8:	781b      	ldrb	r3, [r3, #0]
 80150fa:	4619      	mov	r1, r3
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f7ff f985 	bl	801440c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f000 f9f1 	bl	80154ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015108:	e042      	b.n	8015190 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801510a:	4b24      	ldr	r3, [pc, #144]	; (801519c <USBD_SetConfig+0x148>)
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	461a      	mov	r2, r3
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	685b      	ldr	r3, [r3, #4]
 8015114:	429a      	cmp	r2, r3
 8015116:	d02a      	beq.n	801516e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	685b      	ldr	r3, [r3, #4]
 801511c:	b2db      	uxtb	r3, r3
 801511e:	4619      	mov	r1, r3
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f7ff f973 	bl	801440c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015126:	4b1d      	ldr	r3, [pc, #116]	; (801519c <USBD_SetConfig+0x148>)
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	461a      	mov	r2, r3
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015130:	4b1a      	ldr	r3, [pc, #104]	; (801519c <USBD_SetConfig+0x148>)
 8015132:	781b      	ldrb	r3, [r3, #0]
 8015134:	4619      	mov	r1, r3
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f7ff f94c 	bl	80143d4 <USBD_SetClassConfig>
 801513c:	4603      	mov	r3, r0
 801513e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015140:	7bfb      	ldrb	r3, [r7, #15]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d00f      	beq.n	8015166 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8015146:	6839      	ldr	r1, [r7, #0]
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f000 f903 	bl	8015354 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	b2db      	uxtb	r3, r3
 8015154:	4619      	mov	r1, r3
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f7ff f958 	bl	801440c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2202      	movs	r2, #2
 8015160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015164:	e014      	b.n	8015190 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f000 f9bf 	bl	80154ea <USBD_CtlSendStatus>
      break;
 801516c:	e010      	b.n	8015190 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f000 f9bb 	bl	80154ea <USBD_CtlSendStatus>
      break;
 8015174:	e00c      	b.n	8015190 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8015176:	6839      	ldr	r1, [r7, #0]
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f000 f8eb 	bl	8015354 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801517e:	4b07      	ldr	r3, [pc, #28]	; (801519c <USBD_SetConfig+0x148>)
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	4619      	mov	r1, r3
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f7ff f941 	bl	801440c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801518a:	2303      	movs	r3, #3
 801518c:	73fb      	strb	r3, [r7, #15]
      break;
 801518e:	bf00      	nop
  }

  return ret;
 8015190:	7bfb      	ldrb	r3, [r7, #15]
}
 8015192:	4618      	mov	r0, r3
 8015194:	3710      	adds	r7, #16
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	20001cf4 	.word	0x20001cf4

080151a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	88db      	ldrh	r3, [r3, #6]
 80151ae:	2b01      	cmp	r3, #1
 80151b0:	d004      	beq.n	80151bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80151b2:	6839      	ldr	r1, [r7, #0]
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f000 f8cd 	bl	8015354 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80151ba:	e023      	b.n	8015204 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	2b02      	cmp	r3, #2
 80151c6:	dc02      	bgt.n	80151ce <USBD_GetConfig+0x2e>
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	dc03      	bgt.n	80151d4 <USBD_GetConfig+0x34>
 80151cc:	e015      	b.n	80151fa <USBD_GetConfig+0x5a>
 80151ce:	2b03      	cmp	r3, #3
 80151d0:	d00b      	beq.n	80151ea <USBD_GetConfig+0x4a>
 80151d2:	e012      	b.n	80151fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2200      	movs	r2, #0
 80151d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	3308      	adds	r3, #8
 80151de:	2201      	movs	r2, #1
 80151e0:	4619      	mov	r1, r3
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f000 f927 	bl	8015436 <USBD_CtlSendData>
        break;
 80151e8:	e00c      	b.n	8015204 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	3304      	adds	r3, #4
 80151ee:	2201      	movs	r2, #1
 80151f0:	4619      	mov	r1, r3
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f000 f91f 	bl	8015436 <USBD_CtlSendData>
        break;
 80151f8:	e004      	b.n	8015204 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80151fa:	6839      	ldr	r1, [r7, #0]
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f000 f8a9 	bl	8015354 <USBD_CtlError>
        break;
 8015202:	bf00      	nop
}
 8015204:	bf00      	nop
 8015206:	3708      	adds	r7, #8
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}

0801520c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
 8015214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801521c:	b2db      	uxtb	r3, r3
 801521e:	3b01      	subs	r3, #1
 8015220:	2b02      	cmp	r3, #2
 8015222:	d81e      	bhi.n	8015262 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	88db      	ldrh	r3, [r3, #6]
 8015228:	2b02      	cmp	r3, #2
 801522a:	d004      	beq.n	8015236 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801522c:	6839      	ldr	r1, [r7, #0]
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f000 f890 	bl	8015354 <USBD_CtlError>
        break;
 8015234:	e01a      	b.n	801526c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2201      	movs	r2, #1
 801523a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015242:	2b00      	cmp	r3, #0
 8015244:	d005      	beq.n	8015252 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	68db      	ldr	r3, [r3, #12]
 801524a:	f043 0202 	orr.w	r2, r3, #2
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	330c      	adds	r3, #12
 8015256:	2202      	movs	r2, #2
 8015258:	4619      	mov	r1, r3
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f000 f8eb 	bl	8015436 <USBD_CtlSendData>
      break;
 8015260:	e004      	b.n	801526c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015262:	6839      	ldr	r1, [r7, #0]
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f000 f875 	bl	8015354 <USBD_CtlError>
      break;
 801526a:	bf00      	nop
  }
}
 801526c:	bf00      	nop
 801526e:	3708      	adds	r7, #8
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801527e:	683b      	ldr	r3, [r7, #0]
 8015280:	885b      	ldrh	r3, [r3, #2]
 8015282:	2b01      	cmp	r3, #1
 8015284:	d106      	bne.n	8015294 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2201      	movs	r2, #1
 801528a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f000 f92b 	bl	80154ea <USBD_CtlSendStatus>
  }
}
 8015294:	bf00      	nop
 8015296:	3708      	adds	r7, #8
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}

0801529c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	3b01      	subs	r3, #1
 80152b0:	2b02      	cmp	r3, #2
 80152b2:	d80b      	bhi.n	80152cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	885b      	ldrh	r3, [r3, #2]
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	d10c      	bne.n	80152d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f000 f910 	bl	80154ea <USBD_CtlSendStatus>
      }
      break;
 80152ca:	e004      	b.n	80152d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80152cc:	6839      	ldr	r1, [r7, #0]
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f000 f840 	bl	8015354 <USBD_CtlError>
      break;
 80152d4:	e000      	b.n	80152d8 <USBD_ClrFeature+0x3c>
      break;
 80152d6:	bf00      	nop
  }
}
 80152d8:	bf00      	nop
 80152da:	3708      	adds	r7, #8
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}

080152e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b084      	sub	sp, #16
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
 80152e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	781a      	ldrb	r2, [r3, #0]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	3301      	adds	r3, #1
 80152fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	781a      	ldrb	r2, [r3, #0]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	3301      	adds	r3, #1
 8015308:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801530a:	68f8      	ldr	r0, [r7, #12]
 801530c:	f7ff fa92 	bl	8014834 <SWAPBYTE>
 8015310:	4603      	mov	r3, r0
 8015312:	461a      	mov	r2, r3
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	3301      	adds	r3, #1
 801531c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	3301      	adds	r3, #1
 8015322:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015324:	68f8      	ldr	r0, [r7, #12]
 8015326:	f7ff fa85 	bl	8014834 <SWAPBYTE>
 801532a:	4603      	mov	r3, r0
 801532c:	461a      	mov	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	3301      	adds	r3, #1
 8015336:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	3301      	adds	r3, #1
 801533c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801533e:	68f8      	ldr	r0, [r7, #12]
 8015340:	f7ff fa78 	bl	8014834 <SWAPBYTE>
 8015344:	4603      	mov	r3, r0
 8015346:	461a      	mov	r2, r3
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	80da      	strh	r2, [r3, #6]
}
 801534c:	bf00      	nop
 801534e:	3710      	adds	r7, #16
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801535e:	2180      	movs	r1, #128	; 0x80
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f000 fc95 	bl	8015c90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015366:	2100      	movs	r1, #0
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f000 fc91 	bl	8015c90 <USBD_LL_StallEP>
}
 801536e:	bf00      	nop
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015376:	b580      	push	{r7, lr}
 8015378:	b086      	sub	sp, #24
 801537a:	af00      	add	r7, sp, #0
 801537c:	60f8      	str	r0, [r7, #12]
 801537e:	60b9      	str	r1, [r7, #8]
 8015380:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015382:	2300      	movs	r3, #0
 8015384:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d036      	beq.n	80153fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015390:	6938      	ldr	r0, [r7, #16]
 8015392:	f000 f836 	bl	8015402 <USBD_GetLen>
 8015396:	4603      	mov	r3, r0
 8015398:	3301      	adds	r3, #1
 801539a:	b29b      	uxth	r3, r3
 801539c:	005b      	lsls	r3, r3, #1
 801539e:	b29a      	uxth	r2, r3
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80153a4:	7dfb      	ldrb	r3, [r7, #23]
 80153a6:	68ba      	ldr	r2, [r7, #8]
 80153a8:	4413      	add	r3, r2
 80153aa:	687a      	ldr	r2, [r7, #4]
 80153ac:	7812      	ldrb	r2, [r2, #0]
 80153ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80153b0:	7dfb      	ldrb	r3, [r7, #23]
 80153b2:	3301      	adds	r3, #1
 80153b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80153b6:	7dfb      	ldrb	r3, [r7, #23]
 80153b8:	68ba      	ldr	r2, [r7, #8]
 80153ba:	4413      	add	r3, r2
 80153bc:	2203      	movs	r2, #3
 80153be:	701a      	strb	r2, [r3, #0]
  idx++;
 80153c0:	7dfb      	ldrb	r3, [r7, #23]
 80153c2:	3301      	adds	r3, #1
 80153c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80153c6:	e013      	b.n	80153f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80153c8:	7dfb      	ldrb	r3, [r7, #23]
 80153ca:	68ba      	ldr	r2, [r7, #8]
 80153cc:	4413      	add	r3, r2
 80153ce:	693a      	ldr	r2, [r7, #16]
 80153d0:	7812      	ldrb	r2, [r2, #0]
 80153d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	3301      	adds	r3, #1
 80153d8:	613b      	str	r3, [r7, #16]
    idx++;
 80153da:	7dfb      	ldrb	r3, [r7, #23]
 80153dc:	3301      	adds	r3, #1
 80153de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80153e0:	7dfb      	ldrb	r3, [r7, #23]
 80153e2:	68ba      	ldr	r2, [r7, #8]
 80153e4:	4413      	add	r3, r2
 80153e6:	2200      	movs	r2, #0
 80153e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80153ea:	7dfb      	ldrb	r3, [r7, #23]
 80153ec:	3301      	adds	r3, #1
 80153ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	781b      	ldrb	r3, [r3, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d1e7      	bne.n	80153c8 <USBD_GetString+0x52>
 80153f8:	e000      	b.n	80153fc <USBD_GetString+0x86>
    return;
 80153fa:	bf00      	nop
  }
}
 80153fc:	3718      	adds	r7, #24
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}

08015402 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015402:	b480      	push	{r7}
 8015404:	b085      	sub	sp, #20
 8015406:	af00      	add	r7, sp, #0
 8015408:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801540a:	2300      	movs	r3, #0
 801540c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015412:	e005      	b.n	8015420 <USBD_GetLen+0x1e>
  {
    len++;
 8015414:	7bfb      	ldrb	r3, [r7, #15]
 8015416:	3301      	adds	r3, #1
 8015418:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801541a:	68bb      	ldr	r3, [r7, #8]
 801541c:	3301      	adds	r3, #1
 801541e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	781b      	ldrb	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d1f5      	bne.n	8015414 <USBD_GetLen+0x12>
  }

  return len;
 8015428:	7bfb      	ldrb	r3, [r7, #15]
}
 801542a:	4618      	mov	r0, r3
 801542c:	3714      	adds	r7, #20
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr

08015436 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b084      	sub	sp, #16
 801543a:	af00      	add	r7, sp, #0
 801543c:	60f8      	str	r0, [r7, #12]
 801543e:	60b9      	str	r1, [r7, #8]
 8015440:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	2202      	movs	r2, #2
 8015446:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	687a      	ldr	r2, [r7, #4]
 801544e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	68ba      	ldr	r2, [r7, #8]
 801545a:	2100      	movs	r1, #0
 801545c:	68f8      	ldr	r0, [r7, #12]
 801545e:	f000 fca0 	bl	8015da2 <USBD_LL_Transmit>

  return USBD_OK;
 8015462:	2300      	movs	r3, #0
}
 8015464:	4618      	mov	r0, r3
 8015466:	3710      	adds	r7, #16
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}

0801546c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b084      	sub	sp, #16
 8015470:	af00      	add	r7, sp, #0
 8015472:	60f8      	str	r0, [r7, #12]
 8015474:	60b9      	str	r1, [r7, #8]
 8015476:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	68ba      	ldr	r2, [r7, #8]
 801547c:	2100      	movs	r1, #0
 801547e:	68f8      	ldr	r0, [r7, #12]
 8015480:	f000 fc8f 	bl	8015da2 <USBD_LL_Transmit>

  return USBD_OK;
 8015484:	2300      	movs	r3, #0
}
 8015486:	4618      	mov	r0, r3
 8015488:	3710      	adds	r7, #16
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}

0801548e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801548e:	b580      	push	{r7, lr}
 8015490:	b084      	sub	sp, #16
 8015492:	af00      	add	r7, sp, #0
 8015494:	60f8      	str	r0, [r7, #12]
 8015496:	60b9      	str	r1, [r7, #8]
 8015498:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	2203      	movs	r2, #3
 801549e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	68ba      	ldr	r2, [r7, #8]
 80154b6:	2100      	movs	r1, #0
 80154b8:	68f8      	ldr	r0, [r7, #12]
 80154ba:	f000 fc93 	bl	8015de4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80154be:	2300      	movs	r3, #0
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3710      	adds	r7, #16
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}

080154c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	68ba      	ldr	r2, [r7, #8]
 80154d8:	2100      	movs	r1, #0
 80154da:	68f8      	ldr	r0, [r7, #12]
 80154dc:	f000 fc82 	bl	8015de4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80154e0:	2300      	movs	r3, #0
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	b082      	sub	sp, #8
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2204      	movs	r2, #4
 80154f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80154fa:	2300      	movs	r3, #0
 80154fc:	2200      	movs	r2, #0
 80154fe:	2100      	movs	r1, #0
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f000 fc4e 	bl	8015da2 <USBD_LL_Transmit>

  return USBD_OK;
 8015506:	2300      	movs	r3, #0
}
 8015508:	4618      	mov	r0, r3
 801550a:	3708      	adds	r7, #8
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2205      	movs	r2, #5
 801551c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015520:	2300      	movs	r3, #0
 8015522:	2200      	movs	r2, #0
 8015524:	2100      	movs	r1, #0
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f000 fc5c 	bl	8015de4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801552c:	2300      	movs	r3, #0
}
 801552e:	4618      	mov	r0, r3
 8015530:	3708      	adds	r7, #8
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
	...

08015538 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801553c:	2200      	movs	r2, #0
 801553e:	4912      	ldr	r1, [pc, #72]	; (8015588 <MX_USB_Device_Init+0x50>)
 8015540:	4812      	ldr	r0, [pc, #72]	; (801558c <MX_USB_Device_Init+0x54>)
 8015542:	f7fe fed9 	bl	80142f8 <USBD_Init>
 8015546:	4603      	mov	r3, r0
 8015548:	2b00      	cmp	r3, #0
 801554a:	d001      	beq.n	8015550 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801554c:	f7ee fbf4 	bl	8003d38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015550:	490f      	ldr	r1, [pc, #60]	; (8015590 <MX_USB_Device_Init+0x58>)
 8015552:	480e      	ldr	r0, [pc, #56]	; (801558c <MX_USB_Device_Init+0x54>)
 8015554:	f7fe ff00 	bl	8014358 <USBD_RegisterClass>
 8015558:	4603      	mov	r3, r0
 801555a:	2b00      	cmp	r3, #0
 801555c:	d001      	beq.n	8015562 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801555e:	f7ee fbeb 	bl	8003d38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8015562:	490c      	ldr	r1, [pc, #48]	; (8015594 <MX_USB_Device_Init+0x5c>)
 8015564:	4809      	ldr	r0, [pc, #36]	; (801558c <MX_USB_Device_Init+0x54>)
 8015566:	f7fe fe21 	bl	80141ac <USBD_CDC_RegisterInterface>
 801556a:	4603      	mov	r3, r0
 801556c:	2b00      	cmp	r3, #0
 801556e:	d001      	beq.n	8015574 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015570:	f7ee fbe2 	bl	8003d38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8015574:	4805      	ldr	r0, [pc, #20]	; (801558c <MX_USB_Device_Init+0x54>)
 8015576:	f7fe ff16 	bl	80143a6 <USBD_Start>
 801557a:	4603      	mov	r3, r0
 801557c:	2b00      	cmp	r3, #0
 801557e:	d001      	beq.n	8015584 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015580:	f7ee fbda 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8015584:	bf00      	nop
 8015586:	bd80      	pop	{r7, pc}
 8015588:	200002f0 	.word	0x200002f0
 801558c:	20001cf8 	.word	0x20001cf8
 8015590:	200001d8 	.word	0x200001d8
 8015594:	200002dc 	.word	0x200002dc

08015598 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801559c:	2200      	movs	r2, #0
 801559e:	4905      	ldr	r1, [pc, #20]	; (80155b4 <CDC_Init_FS+0x1c>)
 80155a0:	4805      	ldr	r0, [pc, #20]	; (80155b8 <CDC_Init_FS+0x20>)
 80155a2:	f7fe fe18 	bl	80141d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80155a6:	4905      	ldr	r1, [pc, #20]	; (80155bc <CDC_Init_FS+0x24>)
 80155a8:	4803      	ldr	r0, [pc, #12]	; (80155b8 <CDC_Init_FS+0x20>)
 80155aa:	f7fe fe32 	bl	8014212 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80155ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	200023c8 	.word	0x200023c8
 80155b8:	20001cf8 	.word	0x20001cf8
 80155bc:	20001fc8 	.word	0x20001fc8

080155c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80155c0:	b480      	push	{r7}
 80155c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80155c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	46bd      	mov	sp, r7
 80155ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ce:	4770      	bx	lr

080155d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80155d0:	b480      	push	{r7}
 80155d2:	b083      	sub	sp, #12
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	4603      	mov	r3, r0
 80155d8:	6039      	str	r1, [r7, #0]
 80155da:	71fb      	strb	r3, [r7, #7]
 80155dc:	4613      	mov	r3, r2
 80155de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80155e0:	79fb      	ldrb	r3, [r7, #7]
 80155e2:	2b23      	cmp	r3, #35	; 0x23
 80155e4:	d84a      	bhi.n	801567c <CDC_Control_FS+0xac>
 80155e6:	a201      	add	r2, pc, #4	; (adr r2, 80155ec <CDC_Control_FS+0x1c>)
 80155e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ec:	0801567d 	.word	0x0801567d
 80155f0:	0801567d 	.word	0x0801567d
 80155f4:	0801567d 	.word	0x0801567d
 80155f8:	0801567d 	.word	0x0801567d
 80155fc:	0801567d 	.word	0x0801567d
 8015600:	0801567d 	.word	0x0801567d
 8015604:	0801567d 	.word	0x0801567d
 8015608:	0801567d 	.word	0x0801567d
 801560c:	0801567d 	.word	0x0801567d
 8015610:	0801567d 	.word	0x0801567d
 8015614:	0801567d 	.word	0x0801567d
 8015618:	0801567d 	.word	0x0801567d
 801561c:	0801567d 	.word	0x0801567d
 8015620:	0801567d 	.word	0x0801567d
 8015624:	0801567d 	.word	0x0801567d
 8015628:	0801567d 	.word	0x0801567d
 801562c:	0801567d 	.word	0x0801567d
 8015630:	0801567d 	.word	0x0801567d
 8015634:	0801567d 	.word	0x0801567d
 8015638:	0801567d 	.word	0x0801567d
 801563c:	0801567d 	.word	0x0801567d
 8015640:	0801567d 	.word	0x0801567d
 8015644:	0801567d 	.word	0x0801567d
 8015648:	0801567d 	.word	0x0801567d
 801564c:	0801567d 	.word	0x0801567d
 8015650:	0801567d 	.word	0x0801567d
 8015654:	0801567d 	.word	0x0801567d
 8015658:	0801567d 	.word	0x0801567d
 801565c:	0801567d 	.word	0x0801567d
 8015660:	0801567d 	.word	0x0801567d
 8015664:	0801567d 	.word	0x0801567d
 8015668:	0801567d 	.word	0x0801567d
 801566c:	0801567d 	.word	0x0801567d
 8015670:	0801567d 	.word	0x0801567d
 8015674:	0801567d 	.word	0x0801567d
 8015678:	0801567d 	.word	0x0801567d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801567c:	bf00      	nop
  }

  return (USBD_OK);
 801567e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015680:	4618      	mov	r0, r3
 8015682:	370c      	adds	r7, #12
 8015684:	46bd      	mov	sp, r7
 8015686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568a:	4770      	bx	lr

0801568c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b082      	sub	sp, #8
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015696:	6879      	ldr	r1, [r7, #4]
 8015698:	4805      	ldr	r0, [pc, #20]	; (80156b0 <CDC_Receive_FS+0x24>)
 801569a:	f7fe fdba 	bl	8014212 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801569e:	4804      	ldr	r0, [pc, #16]	; (80156b0 <CDC_Receive_FS+0x24>)
 80156a0:	f7fe fe00 	bl	80142a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80156a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	3708      	adds	r7, #8
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}
 80156ae:	bf00      	nop
 80156b0:	20001cf8 	.word	0x20001cf8

080156b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b084      	sub	sp, #16
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	460b      	mov	r3, r1
 80156be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80156c0:	2300      	movs	r3, #0
 80156c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80156c4:	4b0d      	ldr	r3, [pc, #52]	; (80156fc <CDC_Transmit_FS+0x48>)
 80156c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80156ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d001      	beq.n	80156da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80156d6:	2301      	movs	r3, #1
 80156d8:	e00b      	b.n	80156f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80156da:	887b      	ldrh	r3, [r7, #2]
 80156dc:	461a      	mov	r2, r3
 80156de:	6879      	ldr	r1, [r7, #4]
 80156e0:	4806      	ldr	r0, [pc, #24]	; (80156fc <CDC_Transmit_FS+0x48>)
 80156e2:	f7fe fd78 	bl	80141d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80156e6:	4805      	ldr	r0, [pc, #20]	; (80156fc <CDC_Transmit_FS+0x48>)
 80156e8:	f7fe fdac 	bl	8014244 <USBD_CDC_TransmitPacket>
 80156ec:	4603      	mov	r3, r0
 80156ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80156f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3710      	adds	r7, #16
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}
 80156fa:	bf00      	nop
 80156fc:	20001cf8 	.word	0x20001cf8

08015700 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015700:	b480      	push	{r7}
 8015702:	b087      	sub	sp, #28
 8015704:	af00      	add	r7, sp, #0
 8015706:	60f8      	str	r0, [r7, #12]
 8015708:	60b9      	str	r1, [r7, #8]
 801570a:	4613      	mov	r3, r2
 801570c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801570e:	2300      	movs	r3, #0
 8015710:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015716:	4618      	mov	r0, r3
 8015718:	371c      	adds	r7, #28
 801571a:	46bd      	mov	sp, r7
 801571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015720:	4770      	bx	lr
	...

08015724 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015724:	b480      	push	{r7}
 8015726:	b083      	sub	sp, #12
 8015728:	af00      	add	r7, sp, #0
 801572a:	4603      	mov	r3, r0
 801572c:	6039      	str	r1, [r7, #0]
 801572e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	2212      	movs	r2, #18
 8015734:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8015736:	4b03      	ldr	r3, [pc, #12]	; (8015744 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015738:	4618      	mov	r0, r3
 801573a:	370c      	adds	r7, #12
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr
 8015744:	20000310 	.word	0x20000310

08015748 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015748:	b480      	push	{r7}
 801574a:	b083      	sub	sp, #12
 801574c:	af00      	add	r7, sp, #0
 801574e:	4603      	mov	r3, r0
 8015750:	6039      	str	r1, [r7, #0]
 8015752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	2204      	movs	r2, #4
 8015758:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801575a:	4b03      	ldr	r3, [pc, #12]	; (8015768 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801575c:	4618      	mov	r0, r3
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr
 8015768:	20000324 	.word	0x20000324

0801576c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b082      	sub	sp, #8
 8015770:	af00      	add	r7, sp, #0
 8015772:	4603      	mov	r3, r0
 8015774:	6039      	str	r1, [r7, #0]
 8015776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015778:	79fb      	ldrb	r3, [r7, #7]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d105      	bne.n	801578a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801577e:	683a      	ldr	r2, [r7, #0]
 8015780:	4907      	ldr	r1, [pc, #28]	; (80157a0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015782:	4808      	ldr	r0, [pc, #32]	; (80157a4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015784:	f7ff fdf7 	bl	8015376 <USBD_GetString>
 8015788:	e004      	b.n	8015794 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801578a:	683a      	ldr	r2, [r7, #0]
 801578c:	4904      	ldr	r1, [pc, #16]	; (80157a0 <USBD_CDC_ProductStrDescriptor+0x34>)
 801578e:	4805      	ldr	r0, [pc, #20]	; (80157a4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015790:	f7ff fdf1 	bl	8015376 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015794:	4b02      	ldr	r3, [pc, #8]	; (80157a0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8015796:	4618      	mov	r0, r3
 8015798:	3708      	adds	r7, #8
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}
 801579e:	bf00      	nop
 80157a0:	200027c8 	.word	0x200027c8
 80157a4:	0801908c 	.word	0x0801908c

080157a8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	4603      	mov	r3, r0
 80157b0:	6039      	str	r1, [r7, #0]
 80157b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80157b4:	683a      	ldr	r2, [r7, #0]
 80157b6:	4904      	ldr	r1, [pc, #16]	; (80157c8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80157b8:	4804      	ldr	r0, [pc, #16]	; (80157cc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80157ba:	f7ff fddc 	bl	8015376 <USBD_GetString>
  return USBD_StrDesc;
 80157be:	4b02      	ldr	r3, [pc, #8]	; (80157c8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3708      	adds	r7, #8
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	200027c8 	.word	0x200027c8
 80157cc:	080190a4 	.word	0x080190a4

080157d0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	4603      	mov	r3, r0
 80157d8:	6039      	str	r1, [r7, #0]
 80157da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	221a      	movs	r2, #26
 80157e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80157e2:	f000 f843 	bl	801586c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80157e6:	4b02      	ldr	r3, [pc, #8]	; (80157f0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	20000328 	.word	0x20000328

080157f4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b082      	sub	sp, #8
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	4603      	mov	r3, r0
 80157fc:	6039      	str	r1, [r7, #0]
 80157fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015800:	79fb      	ldrb	r3, [r7, #7]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d105      	bne.n	8015812 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015806:	683a      	ldr	r2, [r7, #0]
 8015808:	4907      	ldr	r1, [pc, #28]	; (8015828 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801580a:	4808      	ldr	r0, [pc, #32]	; (801582c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801580c:	f7ff fdb3 	bl	8015376 <USBD_GetString>
 8015810:	e004      	b.n	801581c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015812:	683a      	ldr	r2, [r7, #0]
 8015814:	4904      	ldr	r1, [pc, #16]	; (8015828 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015816:	4805      	ldr	r0, [pc, #20]	; (801582c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015818:	f7ff fdad 	bl	8015376 <USBD_GetString>
  }
  return USBD_StrDesc;
 801581c:	4b02      	ldr	r3, [pc, #8]	; (8015828 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801581e:	4618      	mov	r0, r3
 8015820:	3708      	adds	r7, #8
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
 8015826:	bf00      	nop
 8015828:	200027c8 	.word	0x200027c8
 801582c:	080190b8 	.word	0x080190b8

08015830 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
 8015836:	4603      	mov	r3, r0
 8015838:	6039      	str	r1, [r7, #0]
 801583a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801583c:	79fb      	ldrb	r3, [r7, #7]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d105      	bne.n	801584e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015842:	683a      	ldr	r2, [r7, #0]
 8015844:	4907      	ldr	r1, [pc, #28]	; (8015864 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015846:	4808      	ldr	r0, [pc, #32]	; (8015868 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015848:	f7ff fd95 	bl	8015376 <USBD_GetString>
 801584c:	e004      	b.n	8015858 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801584e:	683a      	ldr	r2, [r7, #0]
 8015850:	4904      	ldr	r1, [pc, #16]	; (8015864 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015852:	4805      	ldr	r0, [pc, #20]	; (8015868 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015854:	f7ff fd8f 	bl	8015376 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015858:	4b02      	ldr	r3, [pc, #8]	; (8015864 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801585a:	4618      	mov	r0, r3
 801585c:	3708      	adds	r7, #8
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}
 8015862:	bf00      	nop
 8015864:	200027c8 	.word	0x200027c8
 8015868:	080190c4 	.word	0x080190c4

0801586c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b084      	sub	sp, #16
 8015870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015872:	4b0f      	ldr	r3, [pc, #60]	; (80158b0 <Get_SerialNum+0x44>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015878:	4b0e      	ldr	r3, [pc, #56]	; (80158b4 <Get_SerialNum+0x48>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801587e:	4b0e      	ldr	r3, [pc, #56]	; (80158b8 <Get_SerialNum+0x4c>)
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015884:	68fa      	ldr	r2, [r7, #12]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	4413      	add	r3, r2
 801588a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d009      	beq.n	80158a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015892:	2208      	movs	r2, #8
 8015894:	4909      	ldr	r1, [pc, #36]	; (80158bc <Get_SerialNum+0x50>)
 8015896:	68f8      	ldr	r0, [r7, #12]
 8015898:	f000 f814 	bl	80158c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801589c:	2204      	movs	r2, #4
 801589e:	4908      	ldr	r1, [pc, #32]	; (80158c0 <Get_SerialNum+0x54>)
 80158a0:	68b8      	ldr	r0, [r7, #8]
 80158a2:	f000 f80f 	bl	80158c4 <IntToUnicode>
  }
}
 80158a6:	bf00      	nop
 80158a8:	3710      	adds	r7, #16
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}
 80158ae:	bf00      	nop
 80158b0:	1fff7590 	.word	0x1fff7590
 80158b4:	1fff7594 	.word	0x1fff7594
 80158b8:	1fff7598 	.word	0x1fff7598
 80158bc:	2000032a 	.word	0x2000032a
 80158c0:	2000033a 	.word	0x2000033a

080158c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80158c4:	b480      	push	{r7}
 80158c6:	b087      	sub	sp, #28
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	60f8      	str	r0, [r7, #12]
 80158cc:	60b9      	str	r1, [r7, #8]
 80158ce:	4613      	mov	r3, r2
 80158d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80158d2:	2300      	movs	r3, #0
 80158d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80158d6:	2300      	movs	r3, #0
 80158d8:	75fb      	strb	r3, [r7, #23]
 80158da:	e027      	b.n	801592c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	0f1b      	lsrs	r3, r3, #28
 80158e0:	2b09      	cmp	r3, #9
 80158e2:	d80b      	bhi.n	80158fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	0f1b      	lsrs	r3, r3, #28
 80158e8:	b2da      	uxtb	r2, r3
 80158ea:	7dfb      	ldrb	r3, [r7, #23]
 80158ec:	005b      	lsls	r3, r3, #1
 80158ee:	4619      	mov	r1, r3
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	440b      	add	r3, r1
 80158f4:	3230      	adds	r2, #48	; 0x30
 80158f6:	b2d2      	uxtb	r2, r2
 80158f8:	701a      	strb	r2, [r3, #0]
 80158fa:	e00a      	b.n	8015912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	0f1b      	lsrs	r3, r3, #28
 8015900:	b2da      	uxtb	r2, r3
 8015902:	7dfb      	ldrb	r3, [r7, #23]
 8015904:	005b      	lsls	r3, r3, #1
 8015906:	4619      	mov	r1, r3
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	440b      	add	r3, r1
 801590c:	3237      	adds	r2, #55	; 0x37
 801590e:	b2d2      	uxtb	r2, r2
 8015910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	011b      	lsls	r3, r3, #4
 8015916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015918:	7dfb      	ldrb	r3, [r7, #23]
 801591a:	005b      	lsls	r3, r3, #1
 801591c:	3301      	adds	r3, #1
 801591e:	68ba      	ldr	r2, [r7, #8]
 8015920:	4413      	add	r3, r2
 8015922:	2200      	movs	r2, #0
 8015924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015926:	7dfb      	ldrb	r3, [r7, #23]
 8015928:	3301      	adds	r3, #1
 801592a:	75fb      	strb	r3, [r7, #23]
 801592c:	7dfa      	ldrb	r2, [r7, #23]
 801592e:	79fb      	ldrb	r3, [r7, #7]
 8015930:	429a      	cmp	r2, r3
 8015932:	d3d3      	bcc.n	80158dc <IntToUnicode+0x18>
  }
}
 8015934:	bf00      	nop
 8015936:	bf00      	nop
 8015938:	371c      	adds	r7, #28
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr
	...

08015944 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b094      	sub	sp, #80	; 0x50
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801594c:	f107 030c 	add.w	r3, r7, #12
 8015950:	2244      	movs	r2, #68	; 0x44
 8015952:	2100      	movs	r1, #0
 8015954:	4618      	mov	r0, r3
 8015956:	f001 f884 	bl	8016a62 <memset>
  if(pcdHandle->Instance==USB)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	4a15      	ldr	r2, [pc, #84]	; (80159b4 <HAL_PCD_MspInit+0x70>)
 8015960:	4293      	cmp	r3, r2
 8015962:	d122      	bne.n	80159aa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015968:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801596a:	2300      	movs	r3, #0
 801596c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801596e:	f107 030c 	add.w	r3, r7, #12
 8015972:	4618      	mov	r0, r3
 8015974:	f7f6 fc16 	bl	800c1a4 <HAL_RCCEx_PeriphCLKConfig>
 8015978:	4603      	mov	r3, r0
 801597a:	2b00      	cmp	r3, #0
 801597c:	d001      	beq.n	8015982 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801597e:	f7ee f9db 	bl	8003d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015982:	4b0d      	ldr	r3, [pc, #52]	; (80159b8 <HAL_PCD_MspInit+0x74>)
 8015984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015986:	4a0c      	ldr	r2, [pc, #48]	; (80159b8 <HAL_PCD_MspInit+0x74>)
 8015988:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801598c:	6593      	str	r3, [r2, #88]	; 0x58
 801598e:	4b0a      	ldr	r3, [pc, #40]	; (80159b8 <HAL_PCD_MspInit+0x74>)
 8015990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015996:	60bb      	str	r3, [r7, #8]
 8015998:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801599a:	2200      	movs	r2, #0
 801599c:	2100      	movs	r1, #0
 801599e:	2014      	movs	r0, #20
 80159a0:	f7f2 feb7 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80159a4:	2014      	movs	r0, #20
 80159a6:	f7f2 fece 	bl	8008746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80159aa:	bf00      	nop
 80159ac:	3750      	adds	r7, #80	; 0x50
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}
 80159b2:	bf00      	nop
 80159b4:	40005c00 	.word	0x40005c00
 80159b8:	40021000 	.word	0x40021000

080159bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80159d0:	4619      	mov	r1, r3
 80159d2:	4610      	mov	r0, r2
 80159d4:	f7fe fd32 	bl	801443c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80159d8:	bf00      	nop
 80159da:	3708      	adds	r7, #8
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}

080159e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b082      	sub	sp, #8
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
 80159e8:	460b      	mov	r3, r1
 80159ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80159f2:	78fa      	ldrb	r2, [r7, #3]
 80159f4:	6879      	ldr	r1, [r7, #4]
 80159f6:	4613      	mov	r3, r2
 80159f8:	009b      	lsls	r3, r3, #2
 80159fa:	4413      	add	r3, r2
 80159fc:	00db      	lsls	r3, r3, #3
 80159fe:	440b      	add	r3, r1
 8015a00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	78fb      	ldrb	r3, [r7, #3]
 8015a08:	4619      	mov	r1, r3
 8015a0a:	f7fe fd6c 	bl	80144e6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015a0e:	bf00      	nop
 8015a10:	3708      	adds	r7, #8
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}

08015a16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a16:	b580      	push	{r7, lr}
 8015a18:	b082      	sub	sp, #8
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	6078      	str	r0, [r7, #4]
 8015a1e:	460b      	mov	r3, r1
 8015a20:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015a28:	78fa      	ldrb	r2, [r7, #3]
 8015a2a:	6879      	ldr	r1, [r7, #4]
 8015a2c:	4613      	mov	r3, r2
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	4413      	add	r3, r2
 8015a32:	00db      	lsls	r3, r3, #3
 8015a34:	440b      	add	r3, r1
 8015a36:	3324      	adds	r3, #36	; 0x24
 8015a38:	681a      	ldr	r2, [r3, #0]
 8015a3a:	78fb      	ldrb	r3, [r7, #3]
 8015a3c:	4619      	mov	r1, r3
 8015a3e:	f7fe fdb5 	bl	80145ac <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8015a42:	bf00      	nop
 8015a44:	3708      	adds	r7, #8
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}

08015a4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a4a:	b580      	push	{r7, lr}
 8015a4c:	b082      	sub	sp, #8
 8015a4e:	af00      	add	r7, sp, #0
 8015a50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7fe fec9 	bl	80147f0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015a5e:	bf00      	nop
 8015a60:	3708      	adds	r7, #8
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}

08015a66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a66:	b580      	push	{r7, lr}
 8015a68:	b084      	sub	sp, #16
 8015a6a:	af00      	add	r7, sp, #0
 8015a6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015a6e:	2301      	movs	r3, #1
 8015a70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	795b      	ldrb	r3, [r3, #5]
 8015a76:	2b02      	cmp	r3, #2
 8015a78:	d001      	beq.n	8015a7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015a7a:	f7ee f95d 	bl	8003d38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015a84:	7bfa      	ldrb	r2, [r7, #15]
 8015a86:	4611      	mov	r1, r2
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f7fe fe73 	bl	8014774 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fe fe1f 	bl	80146d8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015a9a:	bf00      	nop
 8015a9c:	3710      	adds	r7, #16
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}
	...

08015aa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b082      	sub	sp, #8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7fe fe6e 	bl	8014794 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	7a5b      	ldrb	r3, [r3, #9]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d005      	beq.n	8015acc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ac0:	4b04      	ldr	r3, [pc, #16]	; (8015ad4 <HAL_PCD_SuspendCallback+0x30>)
 8015ac2:	691b      	ldr	r3, [r3, #16]
 8015ac4:	4a03      	ldr	r2, [pc, #12]	; (8015ad4 <HAL_PCD_SuspendCallback+0x30>)
 8015ac6:	f043 0306 	orr.w	r3, r3, #6
 8015aca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015acc:	bf00      	nop
 8015ace:	3708      	adds	r7, #8
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}
 8015ad4:	e000ed00 	.word	0xe000ed00

08015ad8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	7a5b      	ldrb	r3, [r3, #9]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d007      	beq.n	8015af8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ae8:	4b08      	ldr	r3, [pc, #32]	; (8015b0c <HAL_PCD_ResumeCallback+0x34>)
 8015aea:	691b      	ldr	r3, [r3, #16]
 8015aec:	4a07      	ldr	r2, [pc, #28]	; (8015b0c <HAL_PCD_ResumeCallback+0x34>)
 8015aee:	f023 0306 	bic.w	r3, r3, #6
 8015af2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015af4:	f000 f9f8 	bl	8015ee8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015afe:	4618      	mov	r0, r3
 8015b00:	f7fe fe5e 	bl	80147c0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8015b04:	bf00      	nop
 8015b06:	3708      	adds	r7, #8
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}
 8015b0c:	e000ed00 	.word	0xe000ed00

08015b10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b082      	sub	sp, #8
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8015b18:	4a2b      	ldr	r2, [pc, #172]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	4a29      	ldr	r2, [pc, #164]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8015b28:	4b27      	ldr	r3, [pc, #156]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b2a:	4a28      	ldr	r2, [pc, #160]	; (8015bcc <USBD_LL_Init+0xbc>)
 8015b2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015b2e:	4b26      	ldr	r3, [pc, #152]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b30:	2208      	movs	r2, #8
 8015b32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015b34:	4b24      	ldr	r3, [pc, #144]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b36:	2202      	movs	r2, #2
 8015b38:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015b3a:	4b23      	ldr	r3, [pc, #140]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b3c:	2202      	movs	r2, #2
 8015b3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015b40:	4b21      	ldr	r3, [pc, #132]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b42:	2200      	movs	r2, #0
 8015b44:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015b46:	4b20      	ldr	r3, [pc, #128]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b48:	2200      	movs	r2, #0
 8015b4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015b4c:	4b1e      	ldr	r3, [pc, #120]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b4e:	2200      	movs	r2, #0
 8015b50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015b52:	4b1d      	ldr	r3, [pc, #116]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b54:	2200      	movs	r2, #0
 8015b56:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015b58:	481b      	ldr	r0, [pc, #108]	; (8015bc8 <USBD_LL_Init+0xb8>)
 8015b5a:	f7f4 f80d 	bl	8009b78 <HAL_PCD_Init>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d001      	beq.n	8015b68 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8015b64:	f7ee f8e8 	bl	8003d38 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b6e:	2318      	movs	r3, #24
 8015b70:	2200      	movs	r2, #0
 8015b72:	2100      	movs	r1, #0
 8015b74:	f7f5 fcc7 	bl	800b506 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b7e:	2358      	movs	r3, #88	; 0x58
 8015b80:	2200      	movs	r2, #0
 8015b82:	2180      	movs	r1, #128	; 0x80
 8015b84:	f7f5 fcbf 	bl	800b506 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b8e:	23c0      	movs	r3, #192	; 0xc0
 8015b90:	2200      	movs	r2, #0
 8015b92:	2181      	movs	r1, #129	; 0x81
 8015b94:	f7f5 fcb7 	bl	800b506 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	2101      	movs	r1, #1
 8015ba6:	f7f5 fcae 	bl	800b506 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	2182      	movs	r1, #130	; 0x82
 8015bb8:	f7f5 fca5 	bl	800b506 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015bbc:	2300      	movs	r3, #0
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3708      	adds	r7, #8
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	200029c8 	.word	0x200029c8
 8015bcc:	40005c00 	.word	0x40005c00

08015bd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b084      	sub	sp, #16
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bdc:	2300      	movs	r3, #0
 8015bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7f4 f894 	bl	8009d14 <HAL_PCD_Start>
 8015bec:	4603      	mov	r3, r0
 8015bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bf0:	7bfb      	ldrb	r3, [r7, #15]
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f000 f97e 	bl	8015ef4 <USBD_Get_USB_Status>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3710      	adds	r7, #16
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}

08015c06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015c06:	b580      	push	{r7, lr}
 8015c08:	b084      	sub	sp, #16
 8015c0a:	af00      	add	r7, sp, #0
 8015c0c:	6078      	str	r0, [r7, #4]
 8015c0e:	4608      	mov	r0, r1
 8015c10:	4611      	mov	r1, r2
 8015c12:	461a      	mov	r2, r3
 8015c14:	4603      	mov	r3, r0
 8015c16:	70fb      	strb	r3, [r7, #3]
 8015c18:	460b      	mov	r3, r1
 8015c1a:	70bb      	strb	r3, [r7, #2]
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c20:	2300      	movs	r3, #0
 8015c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c24:	2300      	movs	r3, #0
 8015c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c2e:	78bb      	ldrb	r3, [r7, #2]
 8015c30:	883a      	ldrh	r2, [r7, #0]
 8015c32:	78f9      	ldrb	r1, [r7, #3]
 8015c34:	f7f4 f9db 	bl	8009fee <HAL_PCD_EP_Open>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c3c:	7bfb      	ldrb	r3, [r7, #15]
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f000 f958 	bl	8015ef4 <USBD_Get_USB_Status>
 8015c44:	4603      	mov	r3, r0
 8015c46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	3710      	adds	r7, #16
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}

08015c52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c52:	b580      	push	{r7, lr}
 8015c54:	b084      	sub	sp, #16
 8015c56:	af00      	add	r7, sp, #0
 8015c58:	6078      	str	r0, [r7, #4]
 8015c5a:	460b      	mov	r3, r1
 8015c5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c62:	2300      	movs	r3, #0
 8015c64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c6c:	78fa      	ldrb	r2, [r7, #3]
 8015c6e:	4611      	mov	r1, r2
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7f4 fa19 	bl	800a0a8 <HAL_PCD_EP_Close>
 8015c76:	4603      	mov	r3, r0
 8015c78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c7a:	7bfb      	ldrb	r3, [r7, #15]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f000 f939 	bl	8015ef4 <USBD_Get_USB_Status>
 8015c82:	4603      	mov	r3, r0
 8015c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3710      	adds	r7, #16
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}

08015c90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b084      	sub	sp, #16
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	460b      	mov	r3, r1
 8015c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015caa:	78fa      	ldrb	r2, [r7, #3]
 8015cac:	4611      	mov	r1, r2
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7f4 fac2 	bl	800a238 <HAL_PCD_EP_SetStall>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cb8:	7bfb      	ldrb	r3, [r7, #15]
 8015cba:	4618      	mov	r0, r3
 8015cbc:	f000 f91a 	bl	8015ef4 <USBD_Get_USB_Status>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3710      	adds	r7, #16
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}

08015cce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cce:	b580      	push	{r7, lr}
 8015cd0:	b084      	sub	sp, #16
 8015cd2:	af00      	add	r7, sp, #0
 8015cd4:	6078      	str	r0, [r7, #4]
 8015cd6:	460b      	mov	r3, r1
 8015cd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ce8:	78fa      	ldrb	r2, [r7, #3]
 8015cea:	4611      	mov	r1, r2
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7f4 faf5 	bl	800a2dc <HAL_PCD_EP_ClrStall>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cf6:	7bfb      	ldrb	r3, [r7, #15]
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f000 f8fb 	bl	8015ef4 <USBD_Get_USB_Status>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d02:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3710      	adds	r7, #16
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d0c:	b480      	push	{r7}
 8015d0e:	b085      	sub	sp, #20
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	460b      	mov	r3, r1
 8015d16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	da0b      	bge.n	8015d40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015d28:	78fb      	ldrb	r3, [r7, #3]
 8015d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d2e:	68f9      	ldr	r1, [r7, #12]
 8015d30:	4613      	mov	r3, r2
 8015d32:	009b      	lsls	r3, r3, #2
 8015d34:	4413      	add	r3, r2
 8015d36:	00db      	lsls	r3, r3, #3
 8015d38:	440b      	add	r3, r1
 8015d3a:	3312      	adds	r3, #18
 8015d3c:	781b      	ldrb	r3, [r3, #0]
 8015d3e:	e00b      	b.n	8015d58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015d40:	78fb      	ldrb	r3, [r7, #3]
 8015d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d46:	68f9      	ldr	r1, [r7, #12]
 8015d48:	4613      	mov	r3, r2
 8015d4a:	009b      	lsls	r3, r3, #2
 8015d4c:	4413      	add	r3, r2
 8015d4e:	00db      	lsls	r3, r3, #3
 8015d50:	440b      	add	r3, r1
 8015d52:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8015d56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015d58:	4618      	mov	r0, r3
 8015d5a:	3714      	adds	r7, #20
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d62:	4770      	bx	lr

08015d64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b084      	sub	sp, #16
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	460b      	mov	r3, r1
 8015d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d70:	2300      	movs	r3, #0
 8015d72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d74:	2300      	movs	r3, #0
 8015d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d7e:	78fa      	ldrb	r2, [r7, #3]
 8015d80:	4611      	mov	r1, r2
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7f4 f90f 	bl	8009fa6 <HAL_PCD_SetAddress>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d8c:	7bfb      	ldrb	r3, [r7, #15]
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f000 f8b0 	bl	8015ef4 <USBD_Get_USB_Status>
 8015d94:	4603      	mov	r3, r0
 8015d96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d98:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3710      	adds	r7, #16
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}

08015da2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015da2:	b580      	push	{r7, lr}
 8015da4:	b086      	sub	sp, #24
 8015da6:	af00      	add	r7, sp, #0
 8015da8:	60f8      	str	r0, [r7, #12]
 8015daa:	607a      	str	r2, [r7, #4]
 8015dac:	603b      	str	r3, [r7, #0]
 8015dae:	460b      	mov	r3, r1
 8015db0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015db2:	2300      	movs	r3, #0
 8015db4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015db6:	2300      	movs	r3, #0
 8015db8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015dc0:	7af9      	ldrb	r1, [r7, #11]
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	f7f4 fa00 	bl	800a1ca <HAL_PCD_EP_Transmit>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dce:	7dfb      	ldrb	r3, [r7, #23]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f000 f88f 	bl	8015ef4 <USBD_Get_USB_Status>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015dda:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	3718      	adds	r7, #24
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}

08015de4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b086      	sub	sp, #24
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	60f8      	str	r0, [r7, #12]
 8015dec:	607a      	str	r2, [r7, #4]
 8015dee:	603b      	str	r3, [r7, #0]
 8015df0:	460b      	mov	r3, r1
 8015df2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015df4:	2300      	movs	r3, #0
 8015df6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e02:	7af9      	ldrb	r1, [r7, #11]
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	687a      	ldr	r2, [r7, #4]
 8015e08:	f7f4 f996 	bl	800a138 <HAL_PCD_EP_Receive>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e10:	7dfb      	ldrb	r3, [r7, #23]
 8015e12:	4618      	mov	r0, r3
 8015e14:	f000 f86e 	bl	8015ef4 <USBD_Get_USB_Status>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3718      	adds	r7, #24
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}

08015e26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e26:	b580      	push	{r7, lr}
 8015e28:	b082      	sub	sp, #8
 8015e2a:	af00      	add	r7, sp, #0
 8015e2c:	6078      	str	r0, [r7, #4]
 8015e2e:	460b      	mov	r3, r1
 8015e30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e38:	78fa      	ldrb	r2, [r7, #3]
 8015e3a:	4611      	mov	r1, r2
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f7f4 f9ac 	bl	800a19a <HAL_PCD_EP_GetRxCount>
 8015e42:	4603      	mov	r3, r0
}
 8015e44:	4618      	mov	r0, r3
 8015e46:	3708      	adds	r7, #8
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	460b      	mov	r3, r1
 8015e56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015e58:	78fb      	ldrb	r3, [r7, #3]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d002      	beq.n	8015e64 <HAL_PCDEx_LPM_Callback+0x18>
 8015e5e:	2b01      	cmp	r3, #1
 8015e60:	d013      	beq.n	8015e8a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015e62:	e023      	b.n	8015eac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	7a5b      	ldrb	r3, [r3, #9]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d007      	beq.n	8015e7c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015e6c:	f000 f83c 	bl	8015ee8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015e70:	4b10      	ldr	r3, [pc, #64]	; (8015eb4 <HAL_PCDEx_LPM_Callback+0x68>)
 8015e72:	691b      	ldr	r3, [r3, #16]
 8015e74:	4a0f      	ldr	r2, [pc, #60]	; (8015eb4 <HAL_PCDEx_LPM_Callback+0x68>)
 8015e76:	f023 0306 	bic.w	r3, r3, #6
 8015e7a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015e82:	4618      	mov	r0, r3
 8015e84:	f7fe fc9c 	bl	80147c0 <USBD_LL_Resume>
    break;
 8015e88:	e010      	b.n	8015eac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7fe fc7f 	bl	8014794 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	7a5b      	ldrb	r3, [r3, #9]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d005      	beq.n	8015eaa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015e9e:	4b05      	ldr	r3, [pc, #20]	; (8015eb4 <HAL_PCDEx_LPM_Callback+0x68>)
 8015ea0:	691b      	ldr	r3, [r3, #16]
 8015ea2:	4a04      	ldr	r2, [pc, #16]	; (8015eb4 <HAL_PCDEx_LPM_Callback+0x68>)
 8015ea4:	f043 0306 	orr.w	r3, r3, #6
 8015ea8:	6113      	str	r3, [r2, #16]
    break;
 8015eaa:	bf00      	nop
}
 8015eac:	bf00      	nop
 8015eae:	3708      	adds	r7, #8
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}
 8015eb4:	e000ed00 	.word	0xe000ed00

08015eb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015eb8:	b480      	push	{r7}
 8015eba:	b083      	sub	sp, #12
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015ec0:	4b03      	ldr	r3, [pc, #12]	; (8015ed0 <USBD_static_malloc+0x18>)
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	370c      	adds	r7, #12
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ecc:	4770      	bx	lr
 8015ece:	bf00      	nop
 8015ed0:	20002ca4 	.word	0x20002ca4

08015ed4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	b083      	sub	sp, #12
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]

}
 8015edc:	bf00      	nop
 8015ede:	370c      	adds	r7, #12
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee6:	4770      	bx	lr

08015ee8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015eec:	f7ed f996 	bl	800321c <SystemClock_Config>
}
 8015ef0:	bf00      	nop
 8015ef2:	bd80      	pop	{r7, pc}

08015ef4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015ef4:	b480      	push	{r7}
 8015ef6:	b085      	sub	sp, #20
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	4603      	mov	r3, r0
 8015efc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015efe:	2300      	movs	r3, #0
 8015f00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015f02:	79fb      	ldrb	r3, [r7, #7]
 8015f04:	2b03      	cmp	r3, #3
 8015f06:	d817      	bhi.n	8015f38 <USBD_Get_USB_Status+0x44>
 8015f08:	a201      	add	r2, pc, #4	; (adr r2, 8015f10 <USBD_Get_USB_Status+0x1c>)
 8015f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f0e:	bf00      	nop
 8015f10:	08015f21 	.word	0x08015f21
 8015f14:	08015f27 	.word	0x08015f27
 8015f18:	08015f2d 	.word	0x08015f2d
 8015f1c:	08015f33 	.word	0x08015f33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015f20:	2300      	movs	r3, #0
 8015f22:	73fb      	strb	r3, [r7, #15]
    break;
 8015f24:	e00b      	b.n	8015f3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015f26:	2303      	movs	r3, #3
 8015f28:	73fb      	strb	r3, [r7, #15]
    break;
 8015f2a:	e008      	b.n	8015f3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015f2c:	2301      	movs	r3, #1
 8015f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8015f30:	e005      	b.n	8015f3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015f32:	2303      	movs	r3, #3
 8015f34:	73fb      	strb	r3, [r7, #15]
    break;
 8015f36:	e002      	b.n	8015f3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015f38:	2303      	movs	r3, #3
 8015f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8015f3c:	bf00      	nop
  }
  return usb_status;
 8015f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f40:	4618      	mov	r0, r3
 8015f42:	3714      	adds	r7, #20
 8015f44:	46bd      	mov	sp, r7
 8015f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4a:	4770      	bx	lr

08015f4c <__cvt>:
 8015f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f50:	ec55 4b10 	vmov	r4, r5, d0
 8015f54:	2d00      	cmp	r5, #0
 8015f56:	460e      	mov	r6, r1
 8015f58:	4619      	mov	r1, r3
 8015f5a:	462b      	mov	r3, r5
 8015f5c:	bfbb      	ittet	lt
 8015f5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015f62:	461d      	movlt	r5, r3
 8015f64:	2300      	movge	r3, #0
 8015f66:	232d      	movlt	r3, #45	; 0x2d
 8015f68:	700b      	strb	r3, [r1, #0]
 8015f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015f70:	4691      	mov	r9, r2
 8015f72:	f023 0820 	bic.w	r8, r3, #32
 8015f76:	bfbc      	itt	lt
 8015f78:	4622      	movlt	r2, r4
 8015f7a:	4614      	movlt	r4, r2
 8015f7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015f80:	d005      	beq.n	8015f8e <__cvt+0x42>
 8015f82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015f86:	d100      	bne.n	8015f8a <__cvt+0x3e>
 8015f88:	3601      	adds	r6, #1
 8015f8a:	2102      	movs	r1, #2
 8015f8c:	e000      	b.n	8015f90 <__cvt+0x44>
 8015f8e:	2103      	movs	r1, #3
 8015f90:	ab03      	add	r3, sp, #12
 8015f92:	9301      	str	r3, [sp, #4]
 8015f94:	ab02      	add	r3, sp, #8
 8015f96:	9300      	str	r3, [sp, #0]
 8015f98:	ec45 4b10 	vmov	d0, r4, r5
 8015f9c:	4653      	mov	r3, sl
 8015f9e:	4632      	mov	r2, r6
 8015fa0:	f000 fe6a 	bl	8016c78 <_dtoa_r>
 8015fa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015fa8:	4607      	mov	r7, r0
 8015faa:	d102      	bne.n	8015fb2 <__cvt+0x66>
 8015fac:	f019 0f01 	tst.w	r9, #1
 8015fb0:	d022      	beq.n	8015ff8 <__cvt+0xac>
 8015fb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015fb6:	eb07 0906 	add.w	r9, r7, r6
 8015fba:	d110      	bne.n	8015fde <__cvt+0x92>
 8015fbc:	783b      	ldrb	r3, [r7, #0]
 8015fbe:	2b30      	cmp	r3, #48	; 0x30
 8015fc0:	d10a      	bne.n	8015fd8 <__cvt+0x8c>
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	4629      	mov	r1, r5
 8015fca:	f7ea fda5 	bl	8000b18 <__aeabi_dcmpeq>
 8015fce:	b918      	cbnz	r0, 8015fd8 <__cvt+0x8c>
 8015fd0:	f1c6 0601 	rsb	r6, r6, #1
 8015fd4:	f8ca 6000 	str.w	r6, [sl]
 8015fd8:	f8da 3000 	ldr.w	r3, [sl]
 8015fdc:	4499      	add	r9, r3
 8015fde:	2200      	movs	r2, #0
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	4629      	mov	r1, r5
 8015fe6:	f7ea fd97 	bl	8000b18 <__aeabi_dcmpeq>
 8015fea:	b108      	cbz	r0, 8015ff0 <__cvt+0xa4>
 8015fec:	f8cd 900c 	str.w	r9, [sp, #12]
 8015ff0:	2230      	movs	r2, #48	; 0x30
 8015ff2:	9b03      	ldr	r3, [sp, #12]
 8015ff4:	454b      	cmp	r3, r9
 8015ff6:	d307      	bcc.n	8016008 <__cvt+0xbc>
 8015ff8:	9b03      	ldr	r3, [sp, #12]
 8015ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ffc:	1bdb      	subs	r3, r3, r7
 8015ffe:	4638      	mov	r0, r7
 8016000:	6013      	str	r3, [r2, #0]
 8016002:	b004      	add	sp, #16
 8016004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016008:	1c59      	adds	r1, r3, #1
 801600a:	9103      	str	r1, [sp, #12]
 801600c:	701a      	strb	r2, [r3, #0]
 801600e:	e7f0      	b.n	8015ff2 <__cvt+0xa6>

08016010 <__exponent>:
 8016010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016012:	4603      	mov	r3, r0
 8016014:	2900      	cmp	r1, #0
 8016016:	bfb8      	it	lt
 8016018:	4249      	neglt	r1, r1
 801601a:	f803 2b02 	strb.w	r2, [r3], #2
 801601e:	bfb4      	ite	lt
 8016020:	222d      	movlt	r2, #45	; 0x2d
 8016022:	222b      	movge	r2, #43	; 0x2b
 8016024:	2909      	cmp	r1, #9
 8016026:	7042      	strb	r2, [r0, #1]
 8016028:	dd2a      	ble.n	8016080 <__exponent+0x70>
 801602a:	f10d 0207 	add.w	r2, sp, #7
 801602e:	4617      	mov	r7, r2
 8016030:	260a      	movs	r6, #10
 8016032:	4694      	mov	ip, r2
 8016034:	fb91 f5f6 	sdiv	r5, r1, r6
 8016038:	fb06 1415 	mls	r4, r6, r5, r1
 801603c:	3430      	adds	r4, #48	; 0x30
 801603e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016042:	460c      	mov	r4, r1
 8016044:	2c63      	cmp	r4, #99	; 0x63
 8016046:	f102 32ff 	add.w	r2, r2, #4294967295
 801604a:	4629      	mov	r1, r5
 801604c:	dcf1      	bgt.n	8016032 <__exponent+0x22>
 801604e:	3130      	adds	r1, #48	; 0x30
 8016050:	f1ac 0402 	sub.w	r4, ip, #2
 8016054:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016058:	1c41      	adds	r1, r0, #1
 801605a:	4622      	mov	r2, r4
 801605c:	42ba      	cmp	r2, r7
 801605e:	d30a      	bcc.n	8016076 <__exponent+0x66>
 8016060:	f10d 0209 	add.w	r2, sp, #9
 8016064:	eba2 020c 	sub.w	r2, r2, ip
 8016068:	42bc      	cmp	r4, r7
 801606a:	bf88      	it	hi
 801606c:	2200      	movhi	r2, #0
 801606e:	4413      	add	r3, r2
 8016070:	1a18      	subs	r0, r3, r0
 8016072:	b003      	add	sp, #12
 8016074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016076:	f812 5b01 	ldrb.w	r5, [r2], #1
 801607a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801607e:	e7ed      	b.n	801605c <__exponent+0x4c>
 8016080:	2330      	movs	r3, #48	; 0x30
 8016082:	3130      	adds	r1, #48	; 0x30
 8016084:	7083      	strb	r3, [r0, #2]
 8016086:	70c1      	strb	r1, [r0, #3]
 8016088:	1d03      	adds	r3, r0, #4
 801608a:	e7f1      	b.n	8016070 <__exponent+0x60>

0801608c <_printf_float>:
 801608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016090:	ed2d 8b02 	vpush	{d8}
 8016094:	b08d      	sub	sp, #52	; 0x34
 8016096:	460c      	mov	r4, r1
 8016098:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801609c:	4616      	mov	r6, r2
 801609e:	461f      	mov	r7, r3
 80160a0:	4605      	mov	r5, r0
 80160a2:	f000 fce7 	bl	8016a74 <_localeconv_r>
 80160a6:	f8d0 a000 	ldr.w	sl, [r0]
 80160aa:	4650      	mov	r0, sl
 80160ac:	f7ea f908 	bl	80002c0 <strlen>
 80160b0:	2300      	movs	r3, #0
 80160b2:	930a      	str	r3, [sp, #40]	; 0x28
 80160b4:	6823      	ldr	r3, [r4, #0]
 80160b6:	9305      	str	r3, [sp, #20]
 80160b8:	f8d8 3000 	ldr.w	r3, [r8]
 80160bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80160c0:	3307      	adds	r3, #7
 80160c2:	f023 0307 	bic.w	r3, r3, #7
 80160c6:	f103 0208 	add.w	r2, r3, #8
 80160ca:	f8c8 2000 	str.w	r2, [r8]
 80160ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80160d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80160d6:	9307      	str	r3, [sp, #28]
 80160d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80160dc:	ee08 0a10 	vmov	s16, r0
 80160e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80160e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80160e8:	4b9e      	ldr	r3, [pc, #632]	; (8016364 <_printf_float+0x2d8>)
 80160ea:	f04f 32ff 	mov.w	r2, #4294967295
 80160ee:	f7ea fd45 	bl	8000b7c <__aeabi_dcmpun>
 80160f2:	bb88      	cbnz	r0, 8016158 <_printf_float+0xcc>
 80160f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80160f8:	4b9a      	ldr	r3, [pc, #616]	; (8016364 <_printf_float+0x2d8>)
 80160fa:	f04f 32ff 	mov.w	r2, #4294967295
 80160fe:	f7ea fd1f 	bl	8000b40 <__aeabi_dcmple>
 8016102:	bb48      	cbnz	r0, 8016158 <_printf_float+0xcc>
 8016104:	2200      	movs	r2, #0
 8016106:	2300      	movs	r3, #0
 8016108:	4640      	mov	r0, r8
 801610a:	4649      	mov	r1, r9
 801610c:	f7ea fd0e 	bl	8000b2c <__aeabi_dcmplt>
 8016110:	b110      	cbz	r0, 8016118 <_printf_float+0x8c>
 8016112:	232d      	movs	r3, #45	; 0x2d
 8016114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016118:	4a93      	ldr	r2, [pc, #588]	; (8016368 <_printf_float+0x2dc>)
 801611a:	4b94      	ldr	r3, [pc, #592]	; (801636c <_printf_float+0x2e0>)
 801611c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016120:	bf94      	ite	ls
 8016122:	4690      	movls	r8, r2
 8016124:	4698      	movhi	r8, r3
 8016126:	2303      	movs	r3, #3
 8016128:	6123      	str	r3, [r4, #16]
 801612a:	9b05      	ldr	r3, [sp, #20]
 801612c:	f023 0304 	bic.w	r3, r3, #4
 8016130:	6023      	str	r3, [r4, #0]
 8016132:	f04f 0900 	mov.w	r9, #0
 8016136:	9700      	str	r7, [sp, #0]
 8016138:	4633      	mov	r3, r6
 801613a:	aa0b      	add	r2, sp, #44	; 0x2c
 801613c:	4621      	mov	r1, r4
 801613e:	4628      	mov	r0, r5
 8016140:	f000 f9da 	bl	80164f8 <_printf_common>
 8016144:	3001      	adds	r0, #1
 8016146:	f040 8090 	bne.w	801626a <_printf_float+0x1de>
 801614a:	f04f 30ff 	mov.w	r0, #4294967295
 801614e:	b00d      	add	sp, #52	; 0x34
 8016150:	ecbd 8b02 	vpop	{d8}
 8016154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016158:	4642      	mov	r2, r8
 801615a:	464b      	mov	r3, r9
 801615c:	4640      	mov	r0, r8
 801615e:	4649      	mov	r1, r9
 8016160:	f7ea fd0c 	bl	8000b7c <__aeabi_dcmpun>
 8016164:	b140      	cbz	r0, 8016178 <_printf_float+0xec>
 8016166:	464b      	mov	r3, r9
 8016168:	2b00      	cmp	r3, #0
 801616a:	bfbc      	itt	lt
 801616c:	232d      	movlt	r3, #45	; 0x2d
 801616e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016172:	4a7f      	ldr	r2, [pc, #508]	; (8016370 <_printf_float+0x2e4>)
 8016174:	4b7f      	ldr	r3, [pc, #508]	; (8016374 <_printf_float+0x2e8>)
 8016176:	e7d1      	b.n	801611c <_printf_float+0x90>
 8016178:	6863      	ldr	r3, [r4, #4]
 801617a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801617e:	9206      	str	r2, [sp, #24]
 8016180:	1c5a      	adds	r2, r3, #1
 8016182:	d13f      	bne.n	8016204 <_printf_float+0x178>
 8016184:	2306      	movs	r3, #6
 8016186:	6063      	str	r3, [r4, #4]
 8016188:	9b05      	ldr	r3, [sp, #20]
 801618a:	6861      	ldr	r1, [r4, #4]
 801618c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016190:	2300      	movs	r3, #0
 8016192:	9303      	str	r3, [sp, #12]
 8016194:	ab0a      	add	r3, sp, #40	; 0x28
 8016196:	e9cd b301 	strd	fp, r3, [sp, #4]
 801619a:	ab09      	add	r3, sp, #36	; 0x24
 801619c:	ec49 8b10 	vmov	d0, r8, r9
 80161a0:	9300      	str	r3, [sp, #0]
 80161a2:	6022      	str	r2, [r4, #0]
 80161a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80161a8:	4628      	mov	r0, r5
 80161aa:	f7ff fecf 	bl	8015f4c <__cvt>
 80161ae:	9b06      	ldr	r3, [sp, #24]
 80161b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80161b2:	2b47      	cmp	r3, #71	; 0x47
 80161b4:	4680      	mov	r8, r0
 80161b6:	d108      	bne.n	80161ca <_printf_float+0x13e>
 80161b8:	1cc8      	adds	r0, r1, #3
 80161ba:	db02      	blt.n	80161c2 <_printf_float+0x136>
 80161bc:	6863      	ldr	r3, [r4, #4]
 80161be:	4299      	cmp	r1, r3
 80161c0:	dd41      	ble.n	8016246 <_printf_float+0x1ba>
 80161c2:	f1ab 0302 	sub.w	r3, fp, #2
 80161c6:	fa5f fb83 	uxtb.w	fp, r3
 80161ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80161ce:	d820      	bhi.n	8016212 <_printf_float+0x186>
 80161d0:	3901      	subs	r1, #1
 80161d2:	465a      	mov	r2, fp
 80161d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80161d8:	9109      	str	r1, [sp, #36]	; 0x24
 80161da:	f7ff ff19 	bl	8016010 <__exponent>
 80161de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161e0:	1813      	adds	r3, r2, r0
 80161e2:	2a01      	cmp	r2, #1
 80161e4:	4681      	mov	r9, r0
 80161e6:	6123      	str	r3, [r4, #16]
 80161e8:	dc02      	bgt.n	80161f0 <_printf_float+0x164>
 80161ea:	6822      	ldr	r2, [r4, #0]
 80161ec:	07d2      	lsls	r2, r2, #31
 80161ee:	d501      	bpl.n	80161f4 <_printf_float+0x168>
 80161f0:	3301      	adds	r3, #1
 80161f2:	6123      	str	r3, [r4, #16]
 80161f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d09c      	beq.n	8016136 <_printf_float+0xaa>
 80161fc:	232d      	movs	r3, #45	; 0x2d
 80161fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016202:	e798      	b.n	8016136 <_printf_float+0xaa>
 8016204:	9a06      	ldr	r2, [sp, #24]
 8016206:	2a47      	cmp	r2, #71	; 0x47
 8016208:	d1be      	bne.n	8016188 <_printf_float+0xfc>
 801620a:	2b00      	cmp	r3, #0
 801620c:	d1bc      	bne.n	8016188 <_printf_float+0xfc>
 801620e:	2301      	movs	r3, #1
 8016210:	e7b9      	b.n	8016186 <_printf_float+0xfa>
 8016212:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016216:	d118      	bne.n	801624a <_printf_float+0x1be>
 8016218:	2900      	cmp	r1, #0
 801621a:	6863      	ldr	r3, [r4, #4]
 801621c:	dd0b      	ble.n	8016236 <_printf_float+0x1aa>
 801621e:	6121      	str	r1, [r4, #16]
 8016220:	b913      	cbnz	r3, 8016228 <_printf_float+0x19c>
 8016222:	6822      	ldr	r2, [r4, #0]
 8016224:	07d0      	lsls	r0, r2, #31
 8016226:	d502      	bpl.n	801622e <_printf_float+0x1a2>
 8016228:	3301      	adds	r3, #1
 801622a:	440b      	add	r3, r1
 801622c:	6123      	str	r3, [r4, #16]
 801622e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016230:	f04f 0900 	mov.w	r9, #0
 8016234:	e7de      	b.n	80161f4 <_printf_float+0x168>
 8016236:	b913      	cbnz	r3, 801623e <_printf_float+0x1b2>
 8016238:	6822      	ldr	r2, [r4, #0]
 801623a:	07d2      	lsls	r2, r2, #31
 801623c:	d501      	bpl.n	8016242 <_printf_float+0x1b6>
 801623e:	3302      	adds	r3, #2
 8016240:	e7f4      	b.n	801622c <_printf_float+0x1a0>
 8016242:	2301      	movs	r3, #1
 8016244:	e7f2      	b.n	801622c <_printf_float+0x1a0>
 8016246:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801624a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801624c:	4299      	cmp	r1, r3
 801624e:	db05      	blt.n	801625c <_printf_float+0x1d0>
 8016250:	6823      	ldr	r3, [r4, #0]
 8016252:	6121      	str	r1, [r4, #16]
 8016254:	07d8      	lsls	r0, r3, #31
 8016256:	d5ea      	bpl.n	801622e <_printf_float+0x1a2>
 8016258:	1c4b      	adds	r3, r1, #1
 801625a:	e7e7      	b.n	801622c <_printf_float+0x1a0>
 801625c:	2900      	cmp	r1, #0
 801625e:	bfd4      	ite	le
 8016260:	f1c1 0202 	rsble	r2, r1, #2
 8016264:	2201      	movgt	r2, #1
 8016266:	4413      	add	r3, r2
 8016268:	e7e0      	b.n	801622c <_printf_float+0x1a0>
 801626a:	6823      	ldr	r3, [r4, #0]
 801626c:	055a      	lsls	r2, r3, #21
 801626e:	d407      	bmi.n	8016280 <_printf_float+0x1f4>
 8016270:	6923      	ldr	r3, [r4, #16]
 8016272:	4642      	mov	r2, r8
 8016274:	4631      	mov	r1, r6
 8016276:	4628      	mov	r0, r5
 8016278:	47b8      	blx	r7
 801627a:	3001      	adds	r0, #1
 801627c:	d12c      	bne.n	80162d8 <_printf_float+0x24c>
 801627e:	e764      	b.n	801614a <_printf_float+0xbe>
 8016280:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016284:	f240 80e0 	bls.w	8016448 <_printf_float+0x3bc>
 8016288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801628c:	2200      	movs	r2, #0
 801628e:	2300      	movs	r3, #0
 8016290:	f7ea fc42 	bl	8000b18 <__aeabi_dcmpeq>
 8016294:	2800      	cmp	r0, #0
 8016296:	d034      	beq.n	8016302 <_printf_float+0x276>
 8016298:	4a37      	ldr	r2, [pc, #220]	; (8016378 <_printf_float+0x2ec>)
 801629a:	2301      	movs	r3, #1
 801629c:	4631      	mov	r1, r6
 801629e:	4628      	mov	r0, r5
 80162a0:	47b8      	blx	r7
 80162a2:	3001      	adds	r0, #1
 80162a4:	f43f af51 	beq.w	801614a <_printf_float+0xbe>
 80162a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162ac:	429a      	cmp	r2, r3
 80162ae:	db02      	blt.n	80162b6 <_printf_float+0x22a>
 80162b0:	6823      	ldr	r3, [r4, #0]
 80162b2:	07d8      	lsls	r0, r3, #31
 80162b4:	d510      	bpl.n	80162d8 <_printf_float+0x24c>
 80162b6:	ee18 3a10 	vmov	r3, s16
 80162ba:	4652      	mov	r2, sl
 80162bc:	4631      	mov	r1, r6
 80162be:	4628      	mov	r0, r5
 80162c0:	47b8      	blx	r7
 80162c2:	3001      	adds	r0, #1
 80162c4:	f43f af41 	beq.w	801614a <_printf_float+0xbe>
 80162c8:	f04f 0800 	mov.w	r8, #0
 80162cc:	f104 091a 	add.w	r9, r4, #26
 80162d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162d2:	3b01      	subs	r3, #1
 80162d4:	4543      	cmp	r3, r8
 80162d6:	dc09      	bgt.n	80162ec <_printf_float+0x260>
 80162d8:	6823      	ldr	r3, [r4, #0]
 80162da:	079b      	lsls	r3, r3, #30
 80162dc:	f100 8107 	bmi.w	80164ee <_printf_float+0x462>
 80162e0:	68e0      	ldr	r0, [r4, #12]
 80162e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162e4:	4298      	cmp	r0, r3
 80162e6:	bfb8      	it	lt
 80162e8:	4618      	movlt	r0, r3
 80162ea:	e730      	b.n	801614e <_printf_float+0xc2>
 80162ec:	2301      	movs	r3, #1
 80162ee:	464a      	mov	r2, r9
 80162f0:	4631      	mov	r1, r6
 80162f2:	4628      	mov	r0, r5
 80162f4:	47b8      	blx	r7
 80162f6:	3001      	adds	r0, #1
 80162f8:	f43f af27 	beq.w	801614a <_printf_float+0xbe>
 80162fc:	f108 0801 	add.w	r8, r8, #1
 8016300:	e7e6      	b.n	80162d0 <_printf_float+0x244>
 8016302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016304:	2b00      	cmp	r3, #0
 8016306:	dc39      	bgt.n	801637c <_printf_float+0x2f0>
 8016308:	4a1b      	ldr	r2, [pc, #108]	; (8016378 <_printf_float+0x2ec>)
 801630a:	2301      	movs	r3, #1
 801630c:	4631      	mov	r1, r6
 801630e:	4628      	mov	r0, r5
 8016310:	47b8      	blx	r7
 8016312:	3001      	adds	r0, #1
 8016314:	f43f af19 	beq.w	801614a <_printf_float+0xbe>
 8016318:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801631c:	4313      	orrs	r3, r2
 801631e:	d102      	bne.n	8016326 <_printf_float+0x29a>
 8016320:	6823      	ldr	r3, [r4, #0]
 8016322:	07d9      	lsls	r1, r3, #31
 8016324:	d5d8      	bpl.n	80162d8 <_printf_float+0x24c>
 8016326:	ee18 3a10 	vmov	r3, s16
 801632a:	4652      	mov	r2, sl
 801632c:	4631      	mov	r1, r6
 801632e:	4628      	mov	r0, r5
 8016330:	47b8      	blx	r7
 8016332:	3001      	adds	r0, #1
 8016334:	f43f af09 	beq.w	801614a <_printf_float+0xbe>
 8016338:	f04f 0900 	mov.w	r9, #0
 801633c:	f104 0a1a 	add.w	sl, r4, #26
 8016340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016342:	425b      	negs	r3, r3
 8016344:	454b      	cmp	r3, r9
 8016346:	dc01      	bgt.n	801634c <_printf_float+0x2c0>
 8016348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801634a:	e792      	b.n	8016272 <_printf_float+0x1e6>
 801634c:	2301      	movs	r3, #1
 801634e:	4652      	mov	r2, sl
 8016350:	4631      	mov	r1, r6
 8016352:	4628      	mov	r0, r5
 8016354:	47b8      	blx	r7
 8016356:	3001      	adds	r0, #1
 8016358:	f43f aef7 	beq.w	801614a <_printf_float+0xbe>
 801635c:	f109 0901 	add.w	r9, r9, #1
 8016360:	e7ee      	b.n	8016340 <_printf_float+0x2b4>
 8016362:	bf00      	nop
 8016364:	7fefffff 	.word	0x7fefffff
 8016368:	0801b890 	.word	0x0801b890
 801636c:	0801b894 	.word	0x0801b894
 8016370:	0801b898 	.word	0x0801b898
 8016374:	0801b89c 	.word	0x0801b89c
 8016378:	0801b8a0 	.word	0x0801b8a0
 801637c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801637e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016380:	429a      	cmp	r2, r3
 8016382:	bfa8      	it	ge
 8016384:	461a      	movge	r2, r3
 8016386:	2a00      	cmp	r2, #0
 8016388:	4691      	mov	r9, r2
 801638a:	dc37      	bgt.n	80163fc <_printf_float+0x370>
 801638c:	f04f 0b00 	mov.w	fp, #0
 8016390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016394:	f104 021a 	add.w	r2, r4, #26
 8016398:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801639a:	9305      	str	r3, [sp, #20]
 801639c:	eba3 0309 	sub.w	r3, r3, r9
 80163a0:	455b      	cmp	r3, fp
 80163a2:	dc33      	bgt.n	801640c <_printf_float+0x380>
 80163a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163a8:	429a      	cmp	r2, r3
 80163aa:	db3b      	blt.n	8016424 <_printf_float+0x398>
 80163ac:	6823      	ldr	r3, [r4, #0]
 80163ae:	07da      	lsls	r2, r3, #31
 80163b0:	d438      	bmi.n	8016424 <_printf_float+0x398>
 80163b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80163b6:	eba2 0903 	sub.w	r9, r2, r3
 80163ba:	9b05      	ldr	r3, [sp, #20]
 80163bc:	1ad2      	subs	r2, r2, r3
 80163be:	4591      	cmp	r9, r2
 80163c0:	bfa8      	it	ge
 80163c2:	4691      	movge	r9, r2
 80163c4:	f1b9 0f00 	cmp.w	r9, #0
 80163c8:	dc35      	bgt.n	8016436 <_printf_float+0x3aa>
 80163ca:	f04f 0800 	mov.w	r8, #0
 80163ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80163d2:	f104 0a1a 	add.w	sl, r4, #26
 80163d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163da:	1a9b      	subs	r3, r3, r2
 80163dc:	eba3 0309 	sub.w	r3, r3, r9
 80163e0:	4543      	cmp	r3, r8
 80163e2:	f77f af79 	ble.w	80162d8 <_printf_float+0x24c>
 80163e6:	2301      	movs	r3, #1
 80163e8:	4652      	mov	r2, sl
 80163ea:	4631      	mov	r1, r6
 80163ec:	4628      	mov	r0, r5
 80163ee:	47b8      	blx	r7
 80163f0:	3001      	adds	r0, #1
 80163f2:	f43f aeaa 	beq.w	801614a <_printf_float+0xbe>
 80163f6:	f108 0801 	add.w	r8, r8, #1
 80163fa:	e7ec      	b.n	80163d6 <_printf_float+0x34a>
 80163fc:	4613      	mov	r3, r2
 80163fe:	4631      	mov	r1, r6
 8016400:	4642      	mov	r2, r8
 8016402:	4628      	mov	r0, r5
 8016404:	47b8      	blx	r7
 8016406:	3001      	adds	r0, #1
 8016408:	d1c0      	bne.n	801638c <_printf_float+0x300>
 801640a:	e69e      	b.n	801614a <_printf_float+0xbe>
 801640c:	2301      	movs	r3, #1
 801640e:	4631      	mov	r1, r6
 8016410:	4628      	mov	r0, r5
 8016412:	9205      	str	r2, [sp, #20]
 8016414:	47b8      	blx	r7
 8016416:	3001      	adds	r0, #1
 8016418:	f43f ae97 	beq.w	801614a <_printf_float+0xbe>
 801641c:	9a05      	ldr	r2, [sp, #20]
 801641e:	f10b 0b01 	add.w	fp, fp, #1
 8016422:	e7b9      	b.n	8016398 <_printf_float+0x30c>
 8016424:	ee18 3a10 	vmov	r3, s16
 8016428:	4652      	mov	r2, sl
 801642a:	4631      	mov	r1, r6
 801642c:	4628      	mov	r0, r5
 801642e:	47b8      	blx	r7
 8016430:	3001      	adds	r0, #1
 8016432:	d1be      	bne.n	80163b2 <_printf_float+0x326>
 8016434:	e689      	b.n	801614a <_printf_float+0xbe>
 8016436:	9a05      	ldr	r2, [sp, #20]
 8016438:	464b      	mov	r3, r9
 801643a:	4442      	add	r2, r8
 801643c:	4631      	mov	r1, r6
 801643e:	4628      	mov	r0, r5
 8016440:	47b8      	blx	r7
 8016442:	3001      	adds	r0, #1
 8016444:	d1c1      	bne.n	80163ca <_printf_float+0x33e>
 8016446:	e680      	b.n	801614a <_printf_float+0xbe>
 8016448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801644a:	2a01      	cmp	r2, #1
 801644c:	dc01      	bgt.n	8016452 <_printf_float+0x3c6>
 801644e:	07db      	lsls	r3, r3, #31
 8016450:	d53a      	bpl.n	80164c8 <_printf_float+0x43c>
 8016452:	2301      	movs	r3, #1
 8016454:	4642      	mov	r2, r8
 8016456:	4631      	mov	r1, r6
 8016458:	4628      	mov	r0, r5
 801645a:	47b8      	blx	r7
 801645c:	3001      	adds	r0, #1
 801645e:	f43f ae74 	beq.w	801614a <_printf_float+0xbe>
 8016462:	ee18 3a10 	vmov	r3, s16
 8016466:	4652      	mov	r2, sl
 8016468:	4631      	mov	r1, r6
 801646a:	4628      	mov	r0, r5
 801646c:	47b8      	blx	r7
 801646e:	3001      	adds	r0, #1
 8016470:	f43f ae6b 	beq.w	801614a <_printf_float+0xbe>
 8016474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016478:	2200      	movs	r2, #0
 801647a:	2300      	movs	r3, #0
 801647c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016480:	f7ea fb4a 	bl	8000b18 <__aeabi_dcmpeq>
 8016484:	b9d8      	cbnz	r0, 80164be <_printf_float+0x432>
 8016486:	f10a 33ff 	add.w	r3, sl, #4294967295
 801648a:	f108 0201 	add.w	r2, r8, #1
 801648e:	4631      	mov	r1, r6
 8016490:	4628      	mov	r0, r5
 8016492:	47b8      	blx	r7
 8016494:	3001      	adds	r0, #1
 8016496:	d10e      	bne.n	80164b6 <_printf_float+0x42a>
 8016498:	e657      	b.n	801614a <_printf_float+0xbe>
 801649a:	2301      	movs	r3, #1
 801649c:	4652      	mov	r2, sl
 801649e:	4631      	mov	r1, r6
 80164a0:	4628      	mov	r0, r5
 80164a2:	47b8      	blx	r7
 80164a4:	3001      	adds	r0, #1
 80164a6:	f43f ae50 	beq.w	801614a <_printf_float+0xbe>
 80164aa:	f108 0801 	add.w	r8, r8, #1
 80164ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164b0:	3b01      	subs	r3, #1
 80164b2:	4543      	cmp	r3, r8
 80164b4:	dcf1      	bgt.n	801649a <_printf_float+0x40e>
 80164b6:	464b      	mov	r3, r9
 80164b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80164bc:	e6da      	b.n	8016274 <_printf_float+0x1e8>
 80164be:	f04f 0800 	mov.w	r8, #0
 80164c2:	f104 0a1a 	add.w	sl, r4, #26
 80164c6:	e7f2      	b.n	80164ae <_printf_float+0x422>
 80164c8:	2301      	movs	r3, #1
 80164ca:	4642      	mov	r2, r8
 80164cc:	e7df      	b.n	801648e <_printf_float+0x402>
 80164ce:	2301      	movs	r3, #1
 80164d0:	464a      	mov	r2, r9
 80164d2:	4631      	mov	r1, r6
 80164d4:	4628      	mov	r0, r5
 80164d6:	47b8      	blx	r7
 80164d8:	3001      	adds	r0, #1
 80164da:	f43f ae36 	beq.w	801614a <_printf_float+0xbe>
 80164de:	f108 0801 	add.w	r8, r8, #1
 80164e2:	68e3      	ldr	r3, [r4, #12]
 80164e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164e6:	1a5b      	subs	r3, r3, r1
 80164e8:	4543      	cmp	r3, r8
 80164ea:	dcf0      	bgt.n	80164ce <_printf_float+0x442>
 80164ec:	e6f8      	b.n	80162e0 <_printf_float+0x254>
 80164ee:	f04f 0800 	mov.w	r8, #0
 80164f2:	f104 0919 	add.w	r9, r4, #25
 80164f6:	e7f4      	b.n	80164e2 <_printf_float+0x456>

080164f8 <_printf_common>:
 80164f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164fc:	4616      	mov	r6, r2
 80164fe:	4699      	mov	r9, r3
 8016500:	688a      	ldr	r2, [r1, #8]
 8016502:	690b      	ldr	r3, [r1, #16]
 8016504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016508:	4293      	cmp	r3, r2
 801650a:	bfb8      	it	lt
 801650c:	4613      	movlt	r3, r2
 801650e:	6033      	str	r3, [r6, #0]
 8016510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016514:	4607      	mov	r7, r0
 8016516:	460c      	mov	r4, r1
 8016518:	b10a      	cbz	r2, 801651e <_printf_common+0x26>
 801651a:	3301      	adds	r3, #1
 801651c:	6033      	str	r3, [r6, #0]
 801651e:	6823      	ldr	r3, [r4, #0]
 8016520:	0699      	lsls	r1, r3, #26
 8016522:	bf42      	ittt	mi
 8016524:	6833      	ldrmi	r3, [r6, #0]
 8016526:	3302      	addmi	r3, #2
 8016528:	6033      	strmi	r3, [r6, #0]
 801652a:	6825      	ldr	r5, [r4, #0]
 801652c:	f015 0506 	ands.w	r5, r5, #6
 8016530:	d106      	bne.n	8016540 <_printf_common+0x48>
 8016532:	f104 0a19 	add.w	sl, r4, #25
 8016536:	68e3      	ldr	r3, [r4, #12]
 8016538:	6832      	ldr	r2, [r6, #0]
 801653a:	1a9b      	subs	r3, r3, r2
 801653c:	42ab      	cmp	r3, r5
 801653e:	dc26      	bgt.n	801658e <_printf_common+0x96>
 8016540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016544:	1e13      	subs	r3, r2, #0
 8016546:	6822      	ldr	r2, [r4, #0]
 8016548:	bf18      	it	ne
 801654a:	2301      	movne	r3, #1
 801654c:	0692      	lsls	r2, r2, #26
 801654e:	d42b      	bmi.n	80165a8 <_printf_common+0xb0>
 8016550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016554:	4649      	mov	r1, r9
 8016556:	4638      	mov	r0, r7
 8016558:	47c0      	blx	r8
 801655a:	3001      	adds	r0, #1
 801655c:	d01e      	beq.n	801659c <_printf_common+0xa4>
 801655e:	6823      	ldr	r3, [r4, #0]
 8016560:	6922      	ldr	r2, [r4, #16]
 8016562:	f003 0306 	and.w	r3, r3, #6
 8016566:	2b04      	cmp	r3, #4
 8016568:	bf02      	ittt	eq
 801656a:	68e5      	ldreq	r5, [r4, #12]
 801656c:	6833      	ldreq	r3, [r6, #0]
 801656e:	1aed      	subeq	r5, r5, r3
 8016570:	68a3      	ldr	r3, [r4, #8]
 8016572:	bf0c      	ite	eq
 8016574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016578:	2500      	movne	r5, #0
 801657a:	4293      	cmp	r3, r2
 801657c:	bfc4      	itt	gt
 801657e:	1a9b      	subgt	r3, r3, r2
 8016580:	18ed      	addgt	r5, r5, r3
 8016582:	2600      	movs	r6, #0
 8016584:	341a      	adds	r4, #26
 8016586:	42b5      	cmp	r5, r6
 8016588:	d11a      	bne.n	80165c0 <_printf_common+0xc8>
 801658a:	2000      	movs	r0, #0
 801658c:	e008      	b.n	80165a0 <_printf_common+0xa8>
 801658e:	2301      	movs	r3, #1
 8016590:	4652      	mov	r2, sl
 8016592:	4649      	mov	r1, r9
 8016594:	4638      	mov	r0, r7
 8016596:	47c0      	blx	r8
 8016598:	3001      	adds	r0, #1
 801659a:	d103      	bne.n	80165a4 <_printf_common+0xac>
 801659c:	f04f 30ff 	mov.w	r0, #4294967295
 80165a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165a4:	3501      	adds	r5, #1
 80165a6:	e7c6      	b.n	8016536 <_printf_common+0x3e>
 80165a8:	18e1      	adds	r1, r4, r3
 80165aa:	1c5a      	adds	r2, r3, #1
 80165ac:	2030      	movs	r0, #48	; 0x30
 80165ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80165b2:	4422      	add	r2, r4
 80165b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80165b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80165bc:	3302      	adds	r3, #2
 80165be:	e7c7      	b.n	8016550 <_printf_common+0x58>
 80165c0:	2301      	movs	r3, #1
 80165c2:	4622      	mov	r2, r4
 80165c4:	4649      	mov	r1, r9
 80165c6:	4638      	mov	r0, r7
 80165c8:	47c0      	blx	r8
 80165ca:	3001      	adds	r0, #1
 80165cc:	d0e6      	beq.n	801659c <_printf_common+0xa4>
 80165ce:	3601      	adds	r6, #1
 80165d0:	e7d9      	b.n	8016586 <_printf_common+0x8e>
	...

080165d4 <_printf_i>:
 80165d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80165d8:	7e0f      	ldrb	r7, [r1, #24]
 80165da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80165dc:	2f78      	cmp	r7, #120	; 0x78
 80165de:	4691      	mov	r9, r2
 80165e0:	4680      	mov	r8, r0
 80165e2:	460c      	mov	r4, r1
 80165e4:	469a      	mov	sl, r3
 80165e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80165ea:	d807      	bhi.n	80165fc <_printf_i+0x28>
 80165ec:	2f62      	cmp	r7, #98	; 0x62
 80165ee:	d80a      	bhi.n	8016606 <_printf_i+0x32>
 80165f0:	2f00      	cmp	r7, #0
 80165f2:	f000 80d4 	beq.w	801679e <_printf_i+0x1ca>
 80165f6:	2f58      	cmp	r7, #88	; 0x58
 80165f8:	f000 80c0 	beq.w	801677c <_printf_i+0x1a8>
 80165fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016604:	e03a      	b.n	801667c <_printf_i+0xa8>
 8016606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801660a:	2b15      	cmp	r3, #21
 801660c:	d8f6      	bhi.n	80165fc <_printf_i+0x28>
 801660e:	a101      	add	r1, pc, #4	; (adr r1, 8016614 <_printf_i+0x40>)
 8016610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016614:	0801666d 	.word	0x0801666d
 8016618:	08016681 	.word	0x08016681
 801661c:	080165fd 	.word	0x080165fd
 8016620:	080165fd 	.word	0x080165fd
 8016624:	080165fd 	.word	0x080165fd
 8016628:	080165fd 	.word	0x080165fd
 801662c:	08016681 	.word	0x08016681
 8016630:	080165fd 	.word	0x080165fd
 8016634:	080165fd 	.word	0x080165fd
 8016638:	080165fd 	.word	0x080165fd
 801663c:	080165fd 	.word	0x080165fd
 8016640:	08016785 	.word	0x08016785
 8016644:	080166ad 	.word	0x080166ad
 8016648:	0801673f 	.word	0x0801673f
 801664c:	080165fd 	.word	0x080165fd
 8016650:	080165fd 	.word	0x080165fd
 8016654:	080167a7 	.word	0x080167a7
 8016658:	080165fd 	.word	0x080165fd
 801665c:	080166ad 	.word	0x080166ad
 8016660:	080165fd 	.word	0x080165fd
 8016664:	080165fd 	.word	0x080165fd
 8016668:	08016747 	.word	0x08016747
 801666c:	682b      	ldr	r3, [r5, #0]
 801666e:	1d1a      	adds	r2, r3, #4
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	602a      	str	r2, [r5, #0]
 8016674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801667c:	2301      	movs	r3, #1
 801667e:	e09f      	b.n	80167c0 <_printf_i+0x1ec>
 8016680:	6820      	ldr	r0, [r4, #0]
 8016682:	682b      	ldr	r3, [r5, #0]
 8016684:	0607      	lsls	r7, r0, #24
 8016686:	f103 0104 	add.w	r1, r3, #4
 801668a:	6029      	str	r1, [r5, #0]
 801668c:	d501      	bpl.n	8016692 <_printf_i+0xbe>
 801668e:	681e      	ldr	r6, [r3, #0]
 8016690:	e003      	b.n	801669a <_printf_i+0xc6>
 8016692:	0646      	lsls	r6, r0, #25
 8016694:	d5fb      	bpl.n	801668e <_printf_i+0xba>
 8016696:	f9b3 6000 	ldrsh.w	r6, [r3]
 801669a:	2e00      	cmp	r6, #0
 801669c:	da03      	bge.n	80166a6 <_printf_i+0xd2>
 801669e:	232d      	movs	r3, #45	; 0x2d
 80166a0:	4276      	negs	r6, r6
 80166a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80166a6:	485a      	ldr	r0, [pc, #360]	; (8016810 <_printf_i+0x23c>)
 80166a8:	230a      	movs	r3, #10
 80166aa:	e012      	b.n	80166d2 <_printf_i+0xfe>
 80166ac:	682b      	ldr	r3, [r5, #0]
 80166ae:	6820      	ldr	r0, [r4, #0]
 80166b0:	1d19      	adds	r1, r3, #4
 80166b2:	6029      	str	r1, [r5, #0]
 80166b4:	0605      	lsls	r5, r0, #24
 80166b6:	d501      	bpl.n	80166bc <_printf_i+0xe8>
 80166b8:	681e      	ldr	r6, [r3, #0]
 80166ba:	e002      	b.n	80166c2 <_printf_i+0xee>
 80166bc:	0641      	lsls	r1, r0, #25
 80166be:	d5fb      	bpl.n	80166b8 <_printf_i+0xe4>
 80166c0:	881e      	ldrh	r6, [r3, #0]
 80166c2:	4853      	ldr	r0, [pc, #332]	; (8016810 <_printf_i+0x23c>)
 80166c4:	2f6f      	cmp	r7, #111	; 0x6f
 80166c6:	bf0c      	ite	eq
 80166c8:	2308      	moveq	r3, #8
 80166ca:	230a      	movne	r3, #10
 80166cc:	2100      	movs	r1, #0
 80166ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80166d2:	6865      	ldr	r5, [r4, #4]
 80166d4:	60a5      	str	r5, [r4, #8]
 80166d6:	2d00      	cmp	r5, #0
 80166d8:	bfa2      	ittt	ge
 80166da:	6821      	ldrge	r1, [r4, #0]
 80166dc:	f021 0104 	bicge.w	r1, r1, #4
 80166e0:	6021      	strge	r1, [r4, #0]
 80166e2:	b90e      	cbnz	r6, 80166e8 <_printf_i+0x114>
 80166e4:	2d00      	cmp	r5, #0
 80166e6:	d04b      	beq.n	8016780 <_printf_i+0x1ac>
 80166e8:	4615      	mov	r5, r2
 80166ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80166ee:	fb03 6711 	mls	r7, r3, r1, r6
 80166f2:	5dc7      	ldrb	r7, [r0, r7]
 80166f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80166f8:	4637      	mov	r7, r6
 80166fa:	42bb      	cmp	r3, r7
 80166fc:	460e      	mov	r6, r1
 80166fe:	d9f4      	bls.n	80166ea <_printf_i+0x116>
 8016700:	2b08      	cmp	r3, #8
 8016702:	d10b      	bne.n	801671c <_printf_i+0x148>
 8016704:	6823      	ldr	r3, [r4, #0]
 8016706:	07de      	lsls	r6, r3, #31
 8016708:	d508      	bpl.n	801671c <_printf_i+0x148>
 801670a:	6923      	ldr	r3, [r4, #16]
 801670c:	6861      	ldr	r1, [r4, #4]
 801670e:	4299      	cmp	r1, r3
 8016710:	bfde      	ittt	le
 8016712:	2330      	movle	r3, #48	; 0x30
 8016714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016718:	f105 35ff 	addle.w	r5, r5, #4294967295
 801671c:	1b52      	subs	r2, r2, r5
 801671e:	6122      	str	r2, [r4, #16]
 8016720:	f8cd a000 	str.w	sl, [sp]
 8016724:	464b      	mov	r3, r9
 8016726:	aa03      	add	r2, sp, #12
 8016728:	4621      	mov	r1, r4
 801672a:	4640      	mov	r0, r8
 801672c:	f7ff fee4 	bl	80164f8 <_printf_common>
 8016730:	3001      	adds	r0, #1
 8016732:	d14a      	bne.n	80167ca <_printf_i+0x1f6>
 8016734:	f04f 30ff 	mov.w	r0, #4294967295
 8016738:	b004      	add	sp, #16
 801673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801673e:	6823      	ldr	r3, [r4, #0]
 8016740:	f043 0320 	orr.w	r3, r3, #32
 8016744:	6023      	str	r3, [r4, #0]
 8016746:	4833      	ldr	r0, [pc, #204]	; (8016814 <_printf_i+0x240>)
 8016748:	2778      	movs	r7, #120	; 0x78
 801674a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801674e:	6823      	ldr	r3, [r4, #0]
 8016750:	6829      	ldr	r1, [r5, #0]
 8016752:	061f      	lsls	r7, r3, #24
 8016754:	f851 6b04 	ldr.w	r6, [r1], #4
 8016758:	d402      	bmi.n	8016760 <_printf_i+0x18c>
 801675a:	065f      	lsls	r7, r3, #25
 801675c:	bf48      	it	mi
 801675e:	b2b6      	uxthmi	r6, r6
 8016760:	07df      	lsls	r7, r3, #31
 8016762:	bf48      	it	mi
 8016764:	f043 0320 	orrmi.w	r3, r3, #32
 8016768:	6029      	str	r1, [r5, #0]
 801676a:	bf48      	it	mi
 801676c:	6023      	strmi	r3, [r4, #0]
 801676e:	b91e      	cbnz	r6, 8016778 <_printf_i+0x1a4>
 8016770:	6823      	ldr	r3, [r4, #0]
 8016772:	f023 0320 	bic.w	r3, r3, #32
 8016776:	6023      	str	r3, [r4, #0]
 8016778:	2310      	movs	r3, #16
 801677a:	e7a7      	b.n	80166cc <_printf_i+0xf8>
 801677c:	4824      	ldr	r0, [pc, #144]	; (8016810 <_printf_i+0x23c>)
 801677e:	e7e4      	b.n	801674a <_printf_i+0x176>
 8016780:	4615      	mov	r5, r2
 8016782:	e7bd      	b.n	8016700 <_printf_i+0x12c>
 8016784:	682b      	ldr	r3, [r5, #0]
 8016786:	6826      	ldr	r6, [r4, #0]
 8016788:	6961      	ldr	r1, [r4, #20]
 801678a:	1d18      	adds	r0, r3, #4
 801678c:	6028      	str	r0, [r5, #0]
 801678e:	0635      	lsls	r5, r6, #24
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	d501      	bpl.n	8016798 <_printf_i+0x1c4>
 8016794:	6019      	str	r1, [r3, #0]
 8016796:	e002      	b.n	801679e <_printf_i+0x1ca>
 8016798:	0670      	lsls	r0, r6, #25
 801679a:	d5fb      	bpl.n	8016794 <_printf_i+0x1c0>
 801679c:	8019      	strh	r1, [r3, #0]
 801679e:	2300      	movs	r3, #0
 80167a0:	6123      	str	r3, [r4, #16]
 80167a2:	4615      	mov	r5, r2
 80167a4:	e7bc      	b.n	8016720 <_printf_i+0x14c>
 80167a6:	682b      	ldr	r3, [r5, #0]
 80167a8:	1d1a      	adds	r2, r3, #4
 80167aa:	602a      	str	r2, [r5, #0]
 80167ac:	681d      	ldr	r5, [r3, #0]
 80167ae:	6862      	ldr	r2, [r4, #4]
 80167b0:	2100      	movs	r1, #0
 80167b2:	4628      	mov	r0, r5
 80167b4:	f7e9 fd34 	bl	8000220 <memchr>
 80167b8:	b108      	cbz	r0, 80167be <_printf_i+0x1ea>
 80167ba:	1b40      	subs	r0, r0, r5
 80167bc:	6060      	str	r0, [r4, #4]
 80167be:	6863      	ldr	r3, [r4, #4]
 80167c0:	6123      	str	r3, [r4, #16]
 80167c2:	2300      	movs	r3, #0
 80167c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80167c8:	e7aa      	b.n	8016720 <_printf_i+0x14c>
 80167ca:	6923      	ldr	r3, [r4, #16]
 80167cc:	462a      	mov	r2, r5
 80167ce:	4649      	mov	r1, r9
 80167d0:	4640      	mov	r0, r8
 80167d2:	47d0      	blx	sl
 80167d4:	3001      	adds	r0, #1
 80167d6:	d0ad      	beq.n	8016734 <_printf_i+0x160>
 80167d8:	6823      	ldr	r3, [r4, #0]
 80167da:	079b      	lsls	r3, r3, #30
 80167dc:	d413      	bmi.n	8016806 <_printf_i+0x232>
 80167de:	68e0      	ldr	r0, [r4, #12]
 80167e0:	9b03      	ldr	r3, [sp, #12]
 80167e2:	4298      	cmp	r0, r3
 80167e4:	bfb8      	it	lt
 80167e6:	4618      	movlt	r0, r3
 80167e8:	e7a6      	b.n	8016738 <_printf_i+0x164>
 80167ea:	2301      	movs	r3, #1
 80167ec:	4632      	mov	r2, r6
 80167ee:	4649      	mov	r1, r9
 80167f0:	4640      	mov	r0, r8
 80167f2:	47d0      	blx	sl
 80167f4:	3001      	adds	r0, #1
 80167f6:	d09d      	beq.n	8016734 <_printf_i+0x160>
 80167f8:	3501      	adds	r5, #1
 80167fa:	68e3      	ldr	r3, [r4, #12]
 80167fc:	9903      	ldr	r1, [sp, #12]
 80167fe:	1a5b      	subs	r3, r3, r1
 8016800:	42ab      	cmp	r3, r5
 8016802:	dcf2      	bgt.n	80167ea <_printf_i+0x216>
 8016804:	e7eb      	b.n	80167de <_printf_i+0x20a>
 8016806:	2500      	movs	r5, #0
 8016808:	f104 0619 	add.w	r6, r4, #25
 801680c:	e7f5      	b.n	80167fa <_printf_i+0x226>
 801680e:	bf00      	nop
 8016810:	0801b8a2 	.word	0x0801b8a2
 8016814:	0801b8b3 	.word	0x0801b8b3

08016818 <std>:
 8016818:	2300      	movs	r3, #0
 801681a:	b510      	push	{r4, lr}
 801681c:	4604      	mov	r4, r0
 801681e:	e9c0 3300 	strd	r3, r3, [r0]
 8016822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016826:	6083      	str	r3, [r0, #8]
 8016828:	8181      	strh	r1, [r0, #12]
 801682a:	6643      	str	r3, [r0, #100]	; 0x64
 801682c:	81c2      	strh	r2, [r0, #14]
 801682e:	6183      	str	r3, [r0, #24]
 8016830:	4619      	mov	r1, r3
 8016832:	2208      	movs	r2, #8
 8016834:	305c      	adds	r0, #92	; 0x5c
 8016836:	f000 f914 	bl	8016a62 <memset>
 801683a:	4b0d      	ldr	r3, [pc, #52]	; (8016870 <std+0x58>)
 801683c:	6263      	str	r3, [r4, #36]	; 0x24
 801683e:	4b0d      	ldr	r3, [pc, #52]	; (8016874 <std+0x5c>)
 8016840:	62a3      	str	r3, [r4, #40]	; 0x28
 8016842:	4b0d      	ldr	r3, [pc, #52]	; (8016878 <std+0x60>)
 8016844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016846:	4b0d      	ldr	r3, [pc, #52]	; (801687c <std+0x64>)
 8016848:	6323      	str	r3, [r4, #48]	; 0x30
 801684a:	4b0d      	ldr	r3, [pc, #52]	; (8016880 <std+0x68>)
 801684c:	6224      	str	r4, [r4, #32]
 801684e:	429c      	cmp	r4, r3
 8016850:	d006      	beq.n	8016860 <std+0x48>
 8016852:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016856:	4294      	cmp	r4, r2
 8016858:	d002      	beq.n	8016860 <std+0x48>
 801685a:	33d0      	adds	r3, #208	; 0xd0
 801685c:	429c      	cmp	r4, r3
 801685e:	d105      	bne.n	801686c <std+0x54>
 8016860:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016868:	f000 b978 	b.w	8016b5c <__retarget_lock_init_recursive>
 801686c:	bd10      	pop	{r4, pc}
 801686e:	bf00      	nop
 8016870:	080169dd 	.word	0x080169dd
 8016874:	080169ff 	.word	0x080169ff
 8016878:	08016a37 	.word	0x08016a37
 801687c:	08016a5b 	.word	0x08016a5b
 8016880:	20002ec4 	.word	0x20002ec4

08016884 <stdio_exit_handler>:
 8016884:	4a02      	ldr	r2, [pc, #8]	; (8016890 <stdio_exit_handler+0xc>)
 8016886:	4903      	ldr	r1, [pc, #12]	; (8016894 <stdio_exit_handler+0x10>)
 8016888:	4803      	ldr	r0, [pc, #12]	; (8016898 <stdio_exit_handler+0x14>)
 801688a:	f000 b869 	b.w	8016960 <_fwalk_sglue>
 801688e:	bf00      	nop
 8016890:	20000344 	.word	0x20000344
 8016894:	08018511 	.word	0x08018511
 8016898:	20000350 	.word	0x20000350

0801689c <cleanup_stdio>:
 801689c:	6841      	ldr	r1, [r0, #4]
 801689e:	4b0c      	ldr	r3, [pc, #48]	; (80168d0 <cleanup_stdio+0x34>)
 80168a0:	4299      	cmp	r1, r3
 80168a2:	b510      	push	{r4, lr}
 80168a4:	4604      	mov	r4, r0
 80168a6:	d001      	beq.n	80168ac <cleanup_stdio+0x10>
 80168a8:	f001 fe32 	bl	8018510 <_fflush_r>
 80168ac:	68a1      	ldr	r1, [r4, #8]
 80168ae:	4b09      	ldr	r3, [pc, #36]	; (80168d4 <cleanup_stdio+0x38>)
 80168b0:	4299      	cmp	r1, r3
 80168b2:	d002      	beq.n	80168ba <cleanup_stdio+0x1e>
 80168b4:	4620      	mov	r0, r4
 80168b6:	f001 fe2b 	bl	8018510 <_fflush_r>
 80168ba:	68e1      	ldr	r1, [r4, #12]
 80168bc:	4b06      	ldr	r3, [pc, #24]	; (80168d8 <cleanup_stdio+0x3c>)
 80168be:	4299      	cmp	r1, r3
 80168c0:	d004      	beq.n	80168cc <cleanup_stdio+0x30>
 80168c2:	4620      	mov	r0, r4
 80168c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168c8:	f001 be22 	b.w	8018510 <_fflush_r>
 80168cc:	bd10      	pop	{r4, pc}
 80168ce:	bf00      	nop
 80168d0:	20002ec4 	.word	0x20002ec4
 80168d4:	20002f2c 	.word	0x20002f2c
 80168d8:	20002f94 	.word	0x20002f94

080168dc <global_stdio_init.part.0>:
 80168dc:	b510      	push	{r4, lr}
 80168de:	4b0b      	ldr	r3, [pc, #44]	; (801690c <global_stdio_init.part.0+0x30>)
 80168e0:	4c0b      	ldr	r4, [pc, #44]	; (8016910 <global_stdio_init.part.0+0x34>)
 80168e2:	4a0c      	ldr	r2, [pc, #48]	; (8016914 <global_stdio_init.part.0+0x38>)
 80168e4:	601a      	str	r2, [r3, #0]
 80168e6:	4620      	mov	r0, r4
 80168e8:	2200      	movs	r2, #0
 80168ea:	2104      	movs	r1, #4
 80168ec:	f7ff ff94 	bl	8016818 <std>
 80168f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80168f4:	2201      	movs	r2, #1
 80168f6:	2109      	movs	r1, #9
 80168f8:	f7ff ff8e 	bl	8016818 <std>
 80168fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016900:	2202      	movs	r2, #2
 8016902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016906:	2112      	movs	r1, #18
 8016908:	f7ff bf86 	b.w	8016818 <std>
 801690c:	20002ffc 	.word	0x20002ffc
 8016910:	20002ec4 	.word	0x20002ec4
 8016914:	08016885 	.word	0x08016885

08016918 <__sfp_lock_acquire>:
 8016918:	4801      	ldr	r0, [pc, #4]	; (8016920 <__sfp_lock_acquire+0x8>)
 801691a:	f000 b920 	b.w	8016b5e <__retarget_lock_acquire_recursive>
 801691e:	bf00      	nop
 8016920:	20003005 	.word	0x20003005

08016924 <__sfp_lock_release>:
 8016924:	4801      	ldr	r0, [pc, #4]	; (801692c <__sfp_lock_release+0x8>)
 8016926:	f000 b91b 	b.w	8016b60 <__retarget_lock_release_recursive>
 801692a:	bf00      	nop
 801692c:	20003005 	.word	0x20003005

08016930 <__sinit>:
 8016930:	b510      	push	{r4, lr}
 8016932:	4604      	mov	r4, r0
 8016934:	f7ff fff0 	bl	8016918 <__sfp_lock_acquire>
 8016938:	6a23      	ldr	r3, [r4, #32]
 801693a:	b11b      	cbz	r3, 8016944 <__sinit+0x14>
 801693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016940:	f7ff bff0 	b.w	8016924 <__sfp_lock_release>
 8016944:	4b04      	ldr	r3, [pc, #16]	; (8016958 <__sinit+0x28>)
 8016946:	6223      	str	r3, [r4, #32]
 8016948:	4b04      	ldr	r3, [pc, #16]	; (801695c <__sinit+0x2c>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d1f5      	bne.n	801693c <__sinit+0xc>
 8016950:	f7ff ffc4 	bl	80168dc <global_stdio_init.part.0>
 8016954:	e7f2      	b.n	801693c <__sinit+0xc>
 8016956:	bf00      	nop
 8016958:	0801689d 	.word	0x0801689d
 801695c:	20002ffc 	.word	0x20002ffc

08016960 <_fwalk_sglue>:
 8016960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016964:	4607      	mov	r7, r0
 8016966:	4688      	mov	r8, r1
 8016968:	4614      	mov	r4, r2
 801696a:	2600      	movs	r6, #0
 801696c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016970:	f1b9 0901 	subs.w	r9, r9, #1
 8016974:	d505      	bpl.n	8016982 <_fwalk_sglue+0x22>
 8016976:	6824      	ldr	r4, [r4, #0]
 8016978:	2c00      	cmp	r4, #0
 801697a:	d1f7      	bne.n	801696c <_fwalk_sglue+0xc>
 801697c:	4630      	mov	r0, r6
 801697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016982:	89ab      	ldrh	r3, [r5, #12]
 8016984:	2b01      	cmp	r3, #1
 8016986:	d907      	bls.n	8016998 <_fwalk_sglue+0x38>
 8016988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801698c:	3301      	adds	r3, #1
 801698e:	d003      	beq.n	8016998 <_fwalk_sglue+0x38>
 8016990:	4629      	mov	r1, r5
 8016992:	4638      	mov	r0, r7
 8016994:	47c0      	blx	r8
 8016996:	4306      	orrs	r6, r0
 8016998:	3568      	adds	r5, #104	; 0x68
 801699a:	e7e9      	b.n	8016970 <_fwalk_sglue+0x10>

0801699c <siprintf>:
 801699c:	b40e      	push	{r1, r2, r3}
 801699e:	b500      	push	{lr}
 80169a0:	b09c      	sub	sp, #112	; 0x70
 80169a2:	ab1d      	add	r3, sp, #116	; 0x74
 80169a4:	9002      	str	r0, [sp, #8]
 80169a6:	9006      	str	r0, [sp, #24]
 80169a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80169ac:	4809      	ldr	r0, [pc, #36]	; (80169d4 <siprintf+0x38>)
 80169ae:	9107      	str	r1, [sp, #28]
 80169b0:	9104      	str	r1, [sp, #16]
 80169b2:	4909      	ldr	r1, [pc, #36]	; (80169d8 <siprintf+0x3c>)
 80169b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80169b8:	9105      	str	r1, [sp, #20]
 80169ba:	6800      	ldr	r0, [r0, #0]
 80169bc:	9301      	str	r3, [sp, #4]
 80169be:	a902      	add	r1, sp, #8
 80169c0:	f001 fc22 	bl	8018208 <_svfiprintf_r>
 80169c4:	9b02      	ldr	r3, [sp, #8]
 80169c6:	2200      	movs	r2, #0
 80169c8:	701a      	strb	r2, [r3, #0]
 80169ca:	b01c      	add	sp, #112	; 0x70
 80169cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80169d0:	b003      	add	sp, #12
 80169d2:	4770      	bx	lr
 80169d4:	2000039c 	.word	0x2000039c
 80169d8:	ffff0208 	.word	0xffff0208

080169dc <__sread>:
 80169dc:	b510      	push	{r4, lr}
 80169de:	460c      	mov	r4, r1
 80169e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169e4:	f000 f86c 	bl	8016ac0 <_read_r>
 80169e8:	2800      	cmp	r0, #0
 80169ea:	bfab      	itete	ge
 80169ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80169ee:	89a3      	ldrhlt	r3, [r4, #12]
 80169f0:	181b      	addge	r3, r3, r0
 80169f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80169f6:	bfac      	ite	ge
 80169f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80169fa:	81a3      	strhlt	r3, [r4, #12]
 80169fc:	bd10      	pop	{r4, pc}

080169fe <__swrite>:
 80169fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a02:	461f      	mov	r7, r3
 8016a04:	898b      	ldrh	r3, [r1, #12]
 8016a06:	05db      	lsls	r3, r3, #23
 8016a08:	4605      	mov	r5, r0
 8016a0a:	460c      	mov	r4, r1
 8016a0c:	4616      	mov	r6, r2
 8016a0e:	d505      	bpl.n	8016a1c <__swrite+0x1e>
 8016a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a14:	2302      	movs	r3, #2
 8016a16:	2200      	movs	r2, #0
 8016a18:	f000 f840 	bl	8016a9c <_lseek_r>
 8016a1c:	89a3      	ldrh	r3, [r4, #12]
 8016a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016a26:	81a3      	strh	r3, [r4, #12]
 8016a28:	4632      	mov	r2, r6
 8016a2a:	463b      	mov	r3, r7
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a32:	f000 b857 	b.w	8016ae4 <_write_r>

08016a36 <__sseek>:
 8016a36:	b510      	push	{r4, lr}
 8016a38:	460c      	mov	r4, r1
 8016a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a3e:	f000 f82d 	bl	8016a9c <_lseek_r>
 8016a42:	1c43      	adds	r3, r0, #1
 8016a44:	89a3      	ldrh	r3, [r4, #12]
 8016a46:	bf15      	itete	ne
 8016a48:	6560      	strne	r0, [r4, #84]	; 0x54
 8016a4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016a4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016a52:	81a3      	strheq	r3, [r4, #12]
 8016a54:	bf18      	it	ne
 8016a56:	81a3      	strhne	r3, [r4, #12]
 8016a58:	bd10      	pop	{r4, pc}

08016a5a <__sclose>:
 8016a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a5e:	f000 b80d 	b.w	8016a7c <_close_r>

08016a62 <memset>:
 8016a62:	4402      	add	r2, r0
 8016a64:	4603      	mov	r3, r0
 8016a66:	4293      	cmp	r3, r2
 8016a68:	d100      	bne.n	8016a6c <memset+0xa>
 8016a6a:	4770      	bx	lr
 8016a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8016a70:	e7f9      	b.n	8016a66 <memset+0x4>
	...

08016a74 <_localeconv_r>:
 8016a74:	4800      	ldr	r0, [pc, #0]	; (8016a78 <_localeconv_r+0x4>)
 8016a76:	4770      	bx	lr
 8016a78:	20000490 	.word	0x20000490

08016a7c <_close_r>:
 8016a7c:	b538      	push	{r3, r4, r5, lr}
 8016a7e:	4d06      	ldr	r5, [pc, #24]	; (8016a98 <_close_r+0x1c>)
 8016a80:	2300      	movs	r3, #0
 8016a82:	4604      	mov	r4, r0
 8016a84:	4608      	mov	r0, r1
 8016a86:	602b      	str	r3, [r5, #0]
 8016a88:	f7ee fb23 	bl	80050d2 <_close>
 8016a8c:	1c43      	adds	r3, r0, #1
 8016a8e:	d102      	bne.n	8016a96 <_close_r+0x1a>
 8016a90:	682b      	ldr	r3, [r5, #0]
 8016a92:	b103      	cbz	r3, 8016a96 <_close_r+0x1a>
 8016a94:	6023      	str	r3, [r4, #0]
 8016a96:	bd38      	pop	{r3, r4, r5, pc}
 8016a98:	20003000 	.word	0x20003000

08016a9c <_lseek_r>:
 8016a9c:	b538      	push	{r3, r4, r5, lr}
 8016a9e:	4d07      	ldr	r5, [pc, #28]	; (8016abc <_lseek_r+0x20>)
 8016aa0:	4604      	mov	r4, r0
 8016aa2:	4608      	mov	r0, r1
 8016aa4:	4611      	mov	r1, r2
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	602a      	str	r2, [r5, #0]
 8016aaa:	461a      	mov	r2, r3
 8016aac:	f7ee fb38 	bl	8005120 <_lseek>
 8016ab0:	1c43      	adds	r3, r0, #1
 8016ab2:	d102      	bne.n	8016aba <_lseek_r+0x1e>
 8016ab4:	682b      	ldr	r3, [r5, #0]
 8016ab6:	b103      	cbz	r3, 8016aba <_lseek_r+0x1e>
 8016ab8:	6023      	str	r3, [r4, #0]
 8016aba:	bd38      	pop	{r3, r4, r5, pc}
 8016abc:	20003000 	.word	0x20003000

08016ac0 <_read_r>:
 8016ac0:	b538      	push	{r3, r4, r5, lr}
 8016ac2:	4d07      	ldr	r5, [pc, #28]	; (8016ae0 <_read_r+0x20>)
 8016ac4:	4604      	mov	r4, r0
 8016ac6:	4608      	mov	r0, r1
 8016ac8:	4611      	mov	r1, r2
 8016aca:	2200      	movs	r2, #0
 8016acc:	602a      	str	r2, [r5, #0]
 8016ace:	461a      	mov	r2, r3
 8016ad0:	f7ee fac6 	bl	8005060 <_read>
 8016ad4:	1c43      	adds	r3, r0, #1
 8016ad6:	d102      	bne.n	8016ade <_read_r+0x1e>
 8016ad8:	682b      	ldr	r3, [r5, #0]
 8016ada:	b103      	cbz	r3, 8016ade <_read_r+0x1e>
 8016adc:	6023      	str	r3, [r4, #0]
 8016ade:	bd38      	pop	{r3, r4, r5, pc}
 8016ae0:	20003000 	.word	0x20003000

08016ae4 <_write_r>:
 8016ae4:	b538      	push	{r3, r4, r5, lr}
 8016ae6:	4d07      	ldr	r5, [pc, #28]	; (8016b04 <_write_r+0x20>)
 8016ae8:	4604      	mov	r4, r0
 8016aea:	4608      	mov	r0, r1
 8016aec:	4611      	mov	r1, r2
 8016aee:	2200      	movs	r2, #0
 8016af0:	602a      	str	r2, [r5, #0]
 8016af2:	461a      	mov	r2, r3
 8016af4:	f7ee fad1 	bl	800509a <_write>
 8016af8:	1c43      	adds	r3, r0, #1
 8016afa:	d102      	bne.n	8016b02 <_write_r+0x1e>
 8016afc:	682b      	ldr	r3, [r5, #0]
 8016afe:	b103      	cbz	r3, 8016b02 <_write_r+0x1e>
 8016b00:	6023      	str	r3, [r4, #0]
 8016b02:	bd38      	pop	{r3, r4, r5, pc}
 8016b04:	20003000 	.word	0x20003000

08016b08 <__errno>:
 8016b08:	4b01      	ldr	r3, [pc, #4]	; (8016b10 <__errno+0x8>)
 8016b0a:	6818      	ldr	r0, [r3, #0]
 8016b0c:	4770      	bx	lr
 8016b0e:	bf00      	nop
 8016b10:	2000039c 	.word	0x2000039c

08016b14 <__libc_init_array>:
 8016b14:	b570      	push	{r4, r5, r6, lr}
 8016b16:	4d0d      	ldr	r5, [pc, #52]	; (8016b4c <__libc_init_array+0x38>)
 8016b18:	4c0d      	ldr	r4, [pc, #52]	; (8016b50 <__libc_init_array+0x3c>)
 8016b1a:	1b64      	subs	r4, r4, r5
 8016b1c:	10a4      	asrs	r4, r4, #2
 8016b1e:	2600      	movs	r6, #0
 8016b20:	42a6      	cmp	r6, r4
 8016b22:	d109      	bne.n	8016b38 <__libc_init_array+0x24>
 8016b24:	4d0b      	ldr	r5, [pc, #44]	; (8016b54 <__libc_init_array+0x40>)
 8016b26:	4c0c      	ldr	r4, [pc, #48]	; (8016b58 <__libc_init_array+0x44>)
 8016b28:	f002 fa1a 	bl	8018f60 <_init>
 8016b2c:	1b64      	subs	r4, r4, r5
 8016b2e:	10a4      	asrs	r4, r4, #2
 8016b30:	2600      	movs	r6, #0
 8016b32:	42a6      	cmp	r6, r4
 8016b34:	d105      	bne.n	8016b42 <__libc_init_array+0x2e>
 8016b36:	bd70      	pop	{r4, r5, r6, pc}
 8016b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b3c:	4798      	blx	r3
 8016b3e:	3601      	adds	r6, #1
 8016b40:	e7ee      	b.n	8016b20 <__libc_init_array+0xc>
 8016b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b46:	4798      	blx	r3
 8016b48:	3601      	adds	r6, #1
 8016b4a:	e7f2      	b.n	8016b32 <__libc_init_array+0x1e>
 8016b4c:	0801bc20 	.word	0x0801bc20
 8016b50:	0801bc20 	.word	0x0801bc20
 8016b54:	0801bc20 	.word	0x0801bc20
 8016b58:	0801bc24 	.word	0x0801bc24

08016b5c <__retarget_lock_init_recursive>:
 8016b5c:	4770      	bx	lr

08016b5e <__retarget_lock_acquire_recursive>:
 8016b5e:	4770      	bx	lr

08016b60 <__retarget_lock_release_recursive>:
 8016b60:	4770      	bx	lr

08016b62 <quorem>:
 8016b62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b66:	6903      	ldr	r3, [r0, #16]
 8016b68:	690c      	ldr	r4, [r1, #16]
 8016b6a:	42a3      	cmp	r3, r4
 8016b6c:	4607      	mov	r7, r0
 8016b6e:	db7e      	blt.n	8016c6e <quorem+0x10c>
 8016b70:	3c01      	subs	r4, #1
 8016b72:	f101 0814 	add.w	r8, r1, #20
 8016b76:	f100 0514 	add.w	r5, r0, #20
 8016b7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016b7e:	9301      	str	r3, [sp, #4]
 8016b80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016b84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016b88:	3301      	adds	r3, #1
 8016b8a:	429a      	cmp	r2, r3
 8016b8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016b90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016b94:	fbb2 f6f3 	udiv	r6, r2, r3
 8016b98:	d331      	bcc.n	8016bfe <quorem+0x9c>
 8016b9a:	f04f 0e00 	mov.w	lr, #0
 8016b9e:	4640      	mov	r0, r8
 8016ba0:	46ac      	mov	ip, r5
 8016ba2:	46f2      	mov	sl, lr
 8016ba4:	f850 2b04 	ldr.w	r2, [r0], #4
 8016ba8:	b293      	uxth	r3, r2
 8016baa:	fb06 e303 	mla	r3, r6, r3, lr
 8016bae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016bb2:	0c1a      	lsrs	r2, r3, #16
 8016bb4:	b29b      	uxth	r3, r3
 8016bb6:	ebaa 0303 	sub.w	r3, sl, r3
 8016bba:	f8dc a000 	ldr.w	sl, [ip]
 8016bbe:	fa13 f38a 	uxtah	r3, r3, sl
 8016bc2:	fb06 220e 	mla	r2, r6, lr, r2
 8016bc6:	9300      	str	r3, [sp, #0]
 8016bc8:	9b00      	ldr	r3, [sp, #0]
 8016bca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016bce:	b292      	uxth	r2, r2
 8016bd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016bd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8016bdc:	4581      	cmp	r9, r0
 8016bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016be2:	f84c 3b04 	str.w	r3, [ip], #4
 8016be6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016bea:	d2db      	bcs.n	8016ba4 <quorem+0x42>
 8016bec:	f855 300b 	ldr.w	r3, [r5, fp]
 8016bf0:	b92b      	cbnz	r3, 8016bfe <quorem+0x9c>
 8016bf2:	9b01      	ldr	r3, [sp, #4]
 8016bf4:	3b04      	subs	r3, #4
 8016bf6:	429d      	cmp	r5, r3
 8016bf8:	461a      	mov	r2, r3
 8016bfa:	d32c      	bcc.n	8016c56 <quorem+0xf4>
 8016bfc:	613c      	str	r4, [r7, #16]
 8016bfe:	4638      	mov	r0, r7
 8016c00:	f001 f9a8 	bl	8017f54 <__mcmp>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	db22      	blt.n	8016c4e <quorem+0xec>
 8016c08:	3601      	adds	r6, #1
 8016c0a:	4629      	mov	r1, r5
 8016c0c:	2000      	movs	r0, #0
 8016c0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8016c12:	f8d1 c000 	ldr.w	ip, [r1]
 8016c16:	b293      	uxth	r3, r2
 8016c18:	1ac3      	subs	r3, r0, r3
 8016c1a:	0c12      	lsrs	r2, r2, #16
 8016c1c:	fa13 f38c 	uxtah	r3, r3, ip
 8016c20:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c28:	b29b      	uxth	r3, r3
 8016c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c2e:	45c1      	cmp	r9, r8
 8016c30:	f841 3b04 	str.w	r3, [r1], #4
 8016c34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016c38:	d2e9      	bcs.n	8016c0e <quorem+0xac>
 8016c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016c3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016c42:	b922      	cbnz	r2, 8016c4e <quorem+0xec>
 8016c44:	3b04      	subs	r3, #4
 8016c46:	429d      	cmp	r5, r3
 8016c48:	461a      	mov	r2, r3
 8016c4a:	d30a      	bcc.n	8016c62 <quorem+0x100>
 8016c4c:	613c      	str	r4, [r7, #16]
 8016c4e:	4630      	mov	r0, r6
 8016c50:	b003      	add	sp, #12
 8016c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c56:	6812      	ldr	r2, [r2, #0]
 8016c58:	3b04      	subs	r3, #4
 8016c5a:	2a00      	cmp	r2, #0
 8016c5c:	d1ce      	bne.n	8016bfc <quorem+0x9a>
 8016c5e:	3c01      	subs	r4, #1
 8016c60:	e7c9      	b.n	8016bf6 <quorem+0x94>
 8016c62:	6812      	ldr	r2, [r2, #0]
 8016c64:	3b04      	subs	r3, #4
 8016c66:	2a00      	cmp	r2, #0
 8016c68:	d1f0      	bne.n	8016c4c <quorem+0xea>
 8016c6a:	3c01      	subs	r4, #1
 8016c6c:	e7eb      	b.n	8016c46 <quorem+0xe4>
 8016c6e:	2000      	movs	r0, #0
 8016c70:	e7ee      	b.n	8016c50 <quorem+0xee>
 8016c72:	0000      	movs	r0, r0
 8016c74:	0000      	movs	r0, r0
	...

08016c78 <_dtoa_r>:
 8016c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c7c:	ed2d 8b04 	vpush	{d8-d9}
 8016c80:	69c5      	ldr	r5, [r0, #28]
 8016c82:	b093      	sub	sp, #76	; 0x4c
 8016c84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016c88:	ec57 6b10 	vmov	r6, r7, d0
 8016c8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016c90:	9107      	str	r1, [sp, #28]
 8016c92:	4604      	mov	r4, r0
 8016c94:	920a      	str	r2, [sp, #40]	; 0x28
 8016c96:	930d      	str	r3, [sp, #52]	; 0x34
 8016c98:	b975      	cbnz	r5, 8016cb8 <_dtoa_r+0x40>
 8016c9a:	2010      	movs	r0, #16
 8016c9c:	f000 fe2a 	bl	80178f4 <malloc>
 8016ca0:	4602      	mov	r2, r0
 8016ca2:	61e0      	str	r0, [r4, #28]
 8016ca4:	b920      	cbnz	r0, 8016cb0 <_dtoa_r+0x38>
 8016ca6:	4bae      	ldr	r3, [pc, #696]	; (8016f60 <_dtoa_r+0x2e8>)
 8016ca8:	21ef      	movs	r1, #239	; 0xef
 8016caa:	48ae      	ldr	r0, [pc, #696]	; (8016f64 <_dtoa_r+0x2ec>)
 8016cac:	f001 fc90 	bl	80185d0 <__assert_func>
 8016cb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016cb4:	6005      	str	r5, [r0, #0]
 8016cb6:	60c5      	str	r5, [r0, #12]
 8016cb8:	69e3      	ldr	r3, [r4, #28]
 8016cba:	6819      	ldr	r1, [r3, #0]
 8016cbc:	b151      	cbz	r1, 8016cd4 <_dtoa_r+0x5c>
 8016cbe:	685a      	ldr	r2, [r3, #4]
 8016cc0:	604a      	str	r2, [r1, #4]
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	4093      	lsls	r3, r2
 8016cc6:	608b      	str	r3, [r1, #8]
 8016cc8:	4620      	mov	r0, r4
 8016cca:	f000 ff07 	bl	8017adc <_Bfree>
 8016cce:	69e3      	ldr	r3, [r4, #28]
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	601a      	str	r2, [r3, #0]
 8016cd4:	1e3b      	subs	r3, r7, #0
 8016cd6:	bfbb      	ittet	lt
 8016cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016cdc:	9303      	strlt	r3, [sp, #12]
 8016cde:	2300      	movge	r3, #0
 8016ce0:	2201      	movlt	r2, #1
 8016ce2:	bfac      	ite	ge
 8016ce4:	f8c8 3000 	strge.w	r3, [r8]
 8016ce8:	f8c8 2000 	strlt.w	r2, [r8]
 8016cec:	4b9e      	ldr	r3, [pc, #632]	; (8016f68 <_dtoa_r+0x2f0>)
 8016cee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016cf2:	ea33 0308 	bics.w	r3, r3, r8
 8016cf6:	d11b      	bne.n	8016d30 <_dtoa_r+0xb8>
 8016cf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016cfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8016cfe:	6013      	str	r3, [r2, #0]
 8016d00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016d04:	4333      	orrs	r3, r6
 8016d06:	f000 8593 	beq.w	8017830 <_dtoa_r+0xbb8>
 8016d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d0c:	b963      	cbnz	r3, 8016d28 <_dtoa_r+0xb0>
 8016d0e:	4b97      	ldr	r3, [pc, #604]	; (8016f6c <_dtoa_r+0x2f4>)
 8016d10:	e027      	b.n	8016d62 <_dtoa_r+0xea>
 8016d12:	4b97      	ldr	r3, [pc, #604]	; (8016f70 <_dtoa_r+0x2f8>)
 8016d14:	9300      	str	r3, [sp, #0]
 8016d16:	3308      	adds	r3, #8
 8016d18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016d1a:	6013      	str	r3, [r2, #0]
 8016d1c:	9800      	ldr	r0, [sp, #0]
 8016d1e:	b013      	add	sp, #76	; 0x4c
 8016d20:	ecbd 8b04 	vpop	{d8-d9}
 8016d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d28:	4b90      	ldr	r3, [pc, #576]	; (8016f6c <_dtoa_r+0x2f4>)
 8016d2a:	9300      	str	r3, [sp, #0]
 8016d2c:	3303      	adds	r3, #3
 8016d2e:	e7f3      	b.n	8016d18 <_dtoa_r+0xa0>
 8016d30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016d34:	2200      	movs	r2, #0
 8016d36:	ec51 0b17 	vmov	r0, r1, d7
 8016d3a:	eeb0 8a47 	vmov.f32	s16, s14
 8016d3e:	eef0 8a67 	vmov.f32	s17, s15
 8016d42:	2300      	movs	r3, #0
 8016d44:	f7e9 fee8 	bl	8000b18 <__aeabi_dcmpeq>
 8016d48:	4681      	mov	r9, r0
 8016d4a:	b160      	cbz	r0, 8016d66 <_dtoa_r+0xee>
 8016d4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016d4e:	2301      	movs	r3, #1
 8016d50:	6013      	str	r3, [r2, #0]
 8016d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	f000 8568 	beq.w	801782a <_dtoa_r+0xbb2>
 8016d5a:	4b86      	ldr	r3, [pc, #536]	; (8016f74 <_dtoa_r+0x2fc>)
 8016d5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016d5e:	6013      	str	r3, [r2, #0]
 8016d60:	3b01      	subs	r3, #1
 8016d62:	9300      	str	r3, [sp, #0]
 8016d64:	e7da      	b.n	8016d1c <_dtoa_r+0xa4>
 8016d66:	aa10      	add	r2, sp, #64	; 0x40
 8016d68:	a911      	add	r1, sp, #68	; 0x44
 8016d6a:	4620      	mov	r0, r4
 8016d6c:	eeb0 0a48 	vmov.f32	s0, s16
 8016d70:	eef0 0a68 	vmov.f32	s1, s17
 8016d74:	f001 f994 	bl	80180a0 <__d2b>
 8016d78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016d7c:	4682      	mov	sl, r0
 8016d7e:	2d00      	cmp	r5, #0
 8016d80:	d07f      	beq.n	8016e82 <_dtoa_r+0x20a>
 8016d82:	ee18 3a90 	vmov	r3, s17
 8016d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016d8e:	ec51 0b18 	vmov	r0, r1, d8
 8016d92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016d96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016d9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016d9e:	4619      	mov	r1, r3
 8016da0:	2200      	movs	r2, #0
 8016da2:	4b75      	ldr	r3, [pc, #468]	; (8016f78 <_dtoa_r+0x300>)
 8016da4:	f7e9 fa98 	bl	80002d8 <__aeabi_dsub>
 8016da8:	a367      	add	r3, pc, #412	; (adr r3, 8016f48 <_dtoa_r+0x2d0>)
 8016daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dae:	f7e9 fc4b 	bl	8000648 <__aeabi_dmul>
 8016db2:	a367      	add	r3, pc, #412	; (adr r3, 8016f50 <_dtoa_r+0x2d8>)
 8016db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db8:	f7e9 fa90 	bl	80002dc <__adddf3>
 8016dbc:	4606      	mov	r6, r0
 8016dbe:	4628      	mov	r0, r5
 8016dc0:	460f      	mov	r7, r1
 8016dc2:	f7e9 fbd7 	bl	8000574 <__aeabi_i2d>
 8016dc6:	a364      	add	r3, pc, #400	; (adr r3, 8016f58 <_dtoa_r+0x2e0>)
 8016dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dcc:	f7e9 fc3c 	bl	8000648 <__aeabi_dmul>
 8016dd0:	4602      	mov	r2, r0
 8016dd2:	460b      	mov	r3, r1
 8016dd4:	4630      	mov	r0, r6
 8016dd6:	4639      	mov	r1, r7
 8016dd8:	f7e9 fa80 	bl	80002dc <__adddf3>
 8016ddc:	4606      	mov	r6, r0
 8016dde:	460f      	mov	r7, r1
 8016de0:	f7e9 fee2 	bl	8000ba8 <__aeabi_d2iz>
 8016de4:	2200      	movs	r2, #0
 8016de6:	4683      	mov	fp, r0
 8016de8:	2300      	movs	r3, #0
 8016dea:	4630      	mov	r0, r6
 8016dec:	4639      	mov	r1, r7
 8016dee:	f7e9 fe9d 	bl	8000b2c <__aeabi_dcmplt>
 8016df2:	b148      	cbz	r0, 8016e08 <_dtoa_r+0x190>
 8016df4:	4658      	mov	r0, fp
 8016df6:	f7e9 fbbd 	bl	8000574 <__aeabi_i2d>
 8016dfa:	4632      	mov	r2, r6
 8016dfc:	463b      	mov	r3, r7
 8016dfe:	f7e9 fe8b 	bl	8000b18 <__aeabi_dcmpeq>
 8016e02:	b908      	cbnz	r0, 8016e08 <_dtoa_r+0x190>
 8016e04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016e08:	f1bb 0f16 	cmp.w	fp, #22
 8016e0c:	d857      	bhi.n	8016ebe <_dtoa_r+0x246>
 8016e0e:	4b5b      	ldr	r3, [pc, #364]	; (8016f7c <_dtoa_r+0x304>)
 8016e10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e18:	ec51 0b18 	vmov	r0, r1, d8
 8016e1c:	f7e9 fe86 	bl	8000b2c <__aeabi_dcmplt>
 8016e20:	2800      	cmp	r0, #0
 8016e22:	d04e      	beq.n	8016ec2 <_dtoa_r+0x24a>
 8016e24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016e28:	2300      	movs	r3, #0
 8016e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8016e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e2e:	1b5b      	subs	r3, r3, r5
 8016e30:	1e5a      	subs	r2, r3, #1
 8016e32:	bf45      	ittet	mi
 8016e34:	f1c3 0301 	rsbmi	r3, r3, #1
 8016e38:	9305      	strmi	r3, [sp, #20]
 8016e3a:	2300      	movpl	r3, #0
 8016e3c:	2300      	movmi	r3, #0
 8016e3e:	9206      	str	r2, [sp, #24]
 8016e40:	bf54      	ite	pl
 8016e42:	9305      	strpl	r3, [sp, #20]
 8016e44:	9306      	strmi	r3, [sp, #24]
 8016e46:	f1bb 0f00 	cmp.w	fp, #0
 8016e4a:	db3c      	blt.n	8016ec6 <_dtoa_r+0x24e>
 8016e4c:	9b06      	ldr	r3, [sp, #24]
 8016e4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016e52:	445b      	add	r3, fp
 8016e54:	9306      	str	r3, [sp, #24]
 8016e56:	2300      	movs	r3, #0
 8016e58:	9308      	str	r3, [sp, #32]
 8016e5a:	9b07      	ldr	r3, [sp, #28]
 8016e5c:	2b09      	cmp	r3, #9
 8016e5e:	d868      	bhi.n	8016f32 <_dtoa_r+0x2ba>
 8016e60:	2b05      	cmp	r3, #5
 8016e62:	bfc4      	itt	gt
 8016e64:	3b04      	subgt	r3, #4
 8016e66:	9307      	strgt	r3, [sp, #28]
 8016e68:	9b07      	ldr	r3, [sp, #28]
 8016e6a:	f1a3 0302 	sub.w	r3, r3, #2
 8016e6e:	bfcc      	ite	gt
 8016e70:	2500      	movgt	r5, #0
 8016e72:	2501      	movle	r5, #1
 8016e74:	2b03      	cmp	r3, #3
 8016e76:	f200 8085 	bhi.w	8016f84 <_dtoa_r+0x30c>
 8016e7a:	e8df f003 	tbb	[pc, r3]
 8016e7e:	3b2e      	.short	0x3b2e
 8016e80:	5839      	.short	0x5839
 8016e82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016e86:	441d      	add	r5, r3
 8016e88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016e8c:	2b20      	cmp	r3, #32
 8016e8e:	bfc1      	itttt	gt
 8016e90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016e94:	fa08 f803 	lslgt.w	r8, r8, r3
 8016e98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016e9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016ea0:	bfd6      	itet	le
 8016ea2:	f1c3 0320 	rsble	r3, r3, #32
 8016ea6:	ea48 0003 	orrgt.w	r0, r8, r3
 8016eaa:	fa06 f003 	lslle.w	r0, r6, r3
 8016eae:	f7e9 fb51 	bl	8000554 <__aeabi_ui2d>
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016eb8:	3d01      	subs	r5, #1
 8016eba:	920e      	str	r2, [sp, #56]	; 0x38
 8016ebc:	e76f      	b.n	8016d9e <_dtoa_r+0x126>
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	e7b3      	b.n	8016e2a <_dtoa_r+0x1b2>
 8016ec2:	900c      	str	r0, [sp, #48]	; 0x30
 8016ec4:	e7b2      	b.n	8016e2c <_dtoa_r+0x1b4>
 8016ec6:	9b05      	ldr	r3, [sp, #20]
 8016ec8:	eba3 030b 	sub.w	r3, r3, fp
 8016ecc:	9305      	str	r3, [sp, #20]
 8016ece:	f1cb 0300 	rsb	r3, fp, #0
 8016ed2:	9308      	str	r3, [sp, #32]
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ed8:	e7bf      	b.n	8016e5a <_dtoa_r+0x1e2>
 8016eda:	2300      	movs	r3, #0
 8016edc:	9309      	str	r3, [sp, #36]	; 0x24
 8016ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	dc52      	bgt.n	8016f8a <_dtoa_r+0x312>
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	9301      	str	r3, [sp, #4]
 8016ee8:	9304      	str	r3, [sp, #16]
 8016eea:	461a      	mov	r2, r3
 8016eec:	920a      	str	r2, [sp, #40]	; 0x28
 8016eee:	e00b      	b.n	8016f08 <_dtoa_r+0x290>
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	e7f3      	b.n	8016edc <_dtoa_r+0x264>
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016efa:	445b      	add	r3, fp
 8016efc:	9301      	str	r3, [sp, #4]
 8016efe:	3301      	adds	r3, #1
 8016f00:	2b01      	cmp	r3, #1
 8016f02:	9304      	str	r3, [sp, #16]
 8016f04:	bfb8      	it	lt
 8016f06:	2301      	movlt	r3, #1
 8016f08:	69e0      	ldr	r0, [r4, #28]
 8016f0a:	2100      	movs	r1, #0
 8016f0c:	2204      	movs	r2, #4
 8016f0e:	f102 0614 	add.w	r6, r2, #20
 8016f12:	429e      	cmp	r6, r3
 8016f14:	d93d      	bls.n	8016f92 <_dtoa_r+0x31a>
 8016f16:	6041      	str	r1, [r0, #4]
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f000 fd9f 	bl	8017a5c <_Balloc>
 8016f1e:	9000      	str	r0, [sp, #0]
 8016f20:	2800      	cmp	r0, #0
 8016f22:	d139      	bne.n	8016f98 <_dtoa_r+0x320>
 8016f24:	4b16      	ldr	r3, [pc, #88]	; (8016f80 <_dtoa_r+0x308>)
 8016f26:	4602      	mov	r2, r0
 8016f28:	f240 11af 	movw	r1, #431	; 0x1af
 8016f2c:	e6bd      	b.n	8016caa <_dtoa_r+0x32>
 8016f2e:	2301      	movs	r3, #1
 8016f30:	e7e1      	b.n	8016ef6 <_dtoa_r+0x27e>
 8016f32:	2501      	movs	r5, #1
 8016f34:	2300      	movs	r3, #0
 8016f36:	9307      	str	r3, [sp, #28]
 8016f38:	9509      	str	r5, [sp, #36]	; 0x24
 8016f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f3e:	9301      	str	r3, [sp, #4]
 8016f40:	9304      	str	r3, [sp, #16]
 8016f42:	2200      	movs	r2, #0
 8016f44:	2312      	movs	r3, #18
 8016f46:	e7d1      	b.n	8016eec <_dtoa_r+0x274>
 8016f48:	636f4361 	.word	0x636f4361
 8016f4c:	3fd287a7 	.word	0x3fd287a7
 8016f50:	8b60c8b3 	.word	0x8b60c8b3
 8016f54:	3fc68a28 	.word	0x3fc68a28
 8016f58:	509f79fb 	.word	0x509f79fb
 8016f5c:	3fd34413 	.word	0x3fd34413
 8016f60:	0801b8d1 	.word	0x0801b8d1
 8016f64:	0801b8e8 	.word	0x0801b8e8
 8016f68:	7ff00000 	.word	0x7ff00000
 8016f6c:	0801b8cd 	.word	0x0801b8cd
 8016f70:	0801b8c4 	.word	0x0801b8c4
 8016f74:	0801b8a1 	.word	0x0801b8a1
 8016f78:	3ff80000 	.word	0x3ff80000
 8016f7c:	0801b9d8 	.word	0x0801b9d8
 8016f80:	0801b940 	.word	0x0801b940
 8016f84:	2301      	movs	r3, #1
 8016f86:	9309      	str	r3, [sp, #36]	; 0x24
 8016f88:	e7d7      	b.n	8016f3a <_dtoa_r+0x2c2>
 8016f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f8c:	9301      	str	r3, [sp, #4]
 8016f8e:	9304      	str	r3, [sp, #16]
 8016f90:	e7ba      	b.n	8016f08 <_dtoa_r+0x290>
 8016f92:	3101      	adds	r1, #1
 8016f94:	0052      	lsls	r2, r2, #1
 8016f96:	e7ba      	b.n	8016f0e <_dtoa_r+0x296>
 8016f98:	69e3      	ldr	r3, [r4, #28]
 8016f9a:	9a00      	ldr	r2, [sp, #0]
 8016f9c:	601a      	str	r2, [r3, #0]
 8016f9e:	9b04      	ldr	r3, [sp, #16]
 8016fa0:	2b0e      	cmp	r3, #14
 8016fa2:	f200 80a8 	bhi.w	80170f6 <_dtoa_r+0x47e>
 8016fa6:	2d00      	cmp	r5, #0
 8016fa8:	f000 80a5 	beq.w	80170f6 <_dtoa_r+0x47e>
 8016fac:	f1bb 0f00 	cmp.w	fp, #0
 8016fb0:	dd38      	ble.n	8017024 <_dtoa_r+0x3ac>
 8016fb2:	4bc0      	ldr	r3, [pc, #768]	; (80172b4 <_dtoa_r+0x63c>)
 8016fb4:	f00b 020f 	and.w	r2, fp, #15
 8016fb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016fbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016fc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016fc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016fc8:	d019      	beq.n	8016ffe <_dtoa_r+0x386>
 8016fca:	4bbb      	ldr	r3, [pc, #748]	; (80172b8 <_dtoa_r+0x640>)
 8016fcc:	ec51 0b18 	vmov	r0, r1, d8
 8016fd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016fd4:	f7e9 fc62 	bl	800089c <__aeabi_ddiv>
 8016fd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016fdc:	f008 080f 	and.w	r8, r8, #15
 8016fe0:	2503      	movs	r5, #3
 8016fe2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80172b8 <_dtoa_r+0x640>
 8016fe6:	f1b8 0f00 	cmp.w	r8, #0
 8016fea:	d10a      	bne.n	8017002 <_dtoa_r+0x38a>
 8016fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016ff0:	4632      	mov	r2, r6
 8016ff2:	463b      	mov	r3, r7
 8016ff4:	f7e9 fc52 	bl	800089c <__aeabi_ddiv>
 8016ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ffc:	e02b      	b.n	8017056 <_dtoa_r+0x3de>
 8016ffe:	2502      	movs	r5, #2
 8017000:	e7ef      	b.n	8016fe2 <_dtoa_r+0x36a>
 8017002:	f018 0f01 	tst.w	r8, #1
 8017006:	d008      	beq.n	801701a <_dtoa_r+0x3a2>
 8017008:	4630      	mov	r0, r6
 801700a:	4639      	mov	r1, r7
 801700c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017010:	f7e9 fb1a 	bl	8000648 <__aeabi_dmul>
 8017014:	3501      	adds	r5, #1
 8017016:	4606      	mov	r6, r0
 8017018:	460f      	mov	r7, r1
 801701a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801701e:	f109 0908 	add.w	r9, r9, #8
 8017022:	e7e0      	b.n	8016fe6 <_dtoa_r+0x36e>
 8017024:	f000 809f 	beq.w	8017166 <_dtoa_r+0x4ee>
 8017028:	f1cb 0600 	rsb	r6, fp, #0
 801702c:	4ba1      	ldr	r3, [pc, #644]	; (80172b4 <_dtoa_r+0x63c>)
 801702e:	4fa2      	ldr	r7, [pc, #648]	; (80172b8 <_dtoa_r+0x640>)
 8017030:	f006 020f 	and.w	r2, r6, #15
 8017034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801703c:	ec51 0b18 	vmov	r0, r1, d8
 8017040:	f7e9 fb02 	bl	8000648 <__aeabi_dmul>
 8017044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017048:	1136      	asrs	r6, r6, #4
 801704a:	2300      	movs	r3, #0
 801704c:	2502      	movs	r5, #2
 801704e:	2e00      	cmp	r6, #0
 8017050:	d17e      	bne.n	8017150 <_dtoa_r+0x4d8>
 8017052:	2b00      	cmp	r3, #0
 8017054:	d1d0      	bne.n	8016ff8 <_dtoa_r+0x380>
 8017056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017058:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801705c:	2b00      	cmp	r3, #0
 801705e:	f000 8084 	beq.w	801716a <_dtoa_r+0x4f2>
 8017062:	4b96      	ldr	r3, [pc, #600]	; (80172bc <_dtoa_r+0x644>)
 8017064:	2200      	movs	r2, #0
 8017066:	4640      	mov	r0, r8
 8017068:	4649      	mov	r1, r9
 801706a:	f7e9 fd5f 	bl	8000b2c <__aeabi_dcmplt>
 801706e:	2800      	cmp	r0, #0
 8017070:	d07b      	beq.n	801716a <_dtoa_r+0x4f2>
 8017072:	9b04      	ldr	r3, [sp, #16]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d078      	beq.n	801716a <_dtoa_r+0x4f2>
 8017078:	9b01      	ldr	r3, [sp, #4]
 801707a:	2b00      	cmp	r3, #0
 801707c:	dd39      	ble.n	80170f2 <_dtoa_r+0x47a>
 801707e:	4b90      	ldr	r3, [pc, #576]	; (80172c0 <_dtoa_r+0x648>)
 8017080:	2200      	movs	r2, #0
 8017082:	4640      	mov	r0, r8
 8017084:	4649      	mov	r1, r9
 8017086:	f7e9 fadf 	bl	8000648 <__aeabi_dmul>
 801708a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801708e:	9e01      	ldr	r6, [sp, #4]
 8017090:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017094:	3501      	adds	r5, #1
 8017096:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801709a:	4628      	mov	r0, r5
 801709c:	f7e9 fa6a 	bl	8000574 <__aeabi_i2d>
 80170a0:	4642      	mov	r2, r8
 80170a2:	464b      	mov	r3, r9
 80170a4:	f7e9 fad0 	bl	8000648 <__aeabi_dmul>
 80170a8:	4b86      	ldr	r3, [pc, #536]	; (80172c4 <_dtoa_r+0x64c>)
 80170aa:	2200      	movs	r2, #0
 80170ac:	f7e9 f916 	bl	80002dc <__adddf3>
 80170b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80170b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80170b8:	9303      	str	r3, [sp, #12]
 80170ba:	2e00      	cmp	r6, #0
 80170bc:	d158      	bne.n	8017170 <_dtoa_r+0x4f8>
 80170be:	4b82      	ldr	r3, [pc, #520]	; (80172c8 <_dtoa_r+0x650>)
 80170c0:	2200      	movs	r2, #0
 80170c2:	4640      	mov	r0, r8
 80170c4:	4649      	mov	r1, r9
 80170c6:	f7e9 f907 	bl	80002d8 <__aeabi_dsub>
 80170ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170ce:	4680      	mov	r8, r0
 80170d0:	4689      	mov	r9, r1
 80170d2:	f7e9 fd49 	bl	8000b68 <__aeabi_dcmpgt>
 80170d6:	2800      	cmp	r0, #0
 80170d8:	f040 8296 	bne.w	8017608 <_dtoa_r+0x990>
 80170dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80170e0:	4640      	mov	r0, r8
 80170e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80170e6:	4649      	mov	r1, r9
 80170e8:	f7e9 fd20 	bl	8000b2c <__aeabi_dcmplt>
 80170ec:	2800      	cmp	r0, #0
 80170ee:	f040 8289 	bne.w	8017604 <_dtoa_r+0x98c>
 80170f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80170f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	f2c0 814e 	blt.w	801739a <_dtoa_r+0x722>
 80170fe:	f1bb 0f0e 	cmp.w	fp, #14
 8017102:	f300 814a 	bgt.w	801739a <_dtoa_r+0x722>
 8017106:	4b6b      	ldr	r3, [pc, #428]	; (80172b4 <_dtoa_r+0x63c>)
 8017108:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801710c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017112:	2b00      	cmp	r3, #0
 8017114:	f280 80dc 	bge.w	80172d0 <_dtoa_r+0x658>
 8017118:	9b04      	ldr	r3, [sp, #16]
 801711a:	2b00      	cmp	r3, #0
 801711c:	f300 80d8 	bgt.w	80172d0 <_dtoa_r+0x658>
 8017120:	f040 826f 	bne.w	8017602 <_dtoa_r+0x98a>
 8017124:	4b68      	ldr	r3, [pc, #416]	; (80172c8 <_dtoa_r+0x650>)
 8017126:	2200      	movs	r2, #0
 8017128:	4640      	mov	r0, r8
 801712a:	4649      	mov	r1, r9
 801712c:	f7e9 fa8c 	bl	8000648 <__aeabi_dmul>
 8017130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017134:	f7e9 fd0e 	bl	8000b54 <__aeabi_dcmpge>
 8017138:	9e04      	ldr	r6, [sp, #16]
 801713a:	4637      	mov	r7, r6
 801713c:	2800      	cmp	r0, #0
 801713e:	f040 8245 	bne.w	80175cc <_dtoa_r+0x954>
 8017142:	9d00      	ldr	r5, [sp, #0]
 8017144:	2331      	movs	r3, #49	; 0x31
 8017146:	f805 3b01 	strb.w	r3, [r5], #1
 801714a:	f10b 0b01 	add.w	fp, fp, #1
 801714e:	e241      	b.n	80175d4 <_dtoa_r+0x95c>
 8017150:	07f2      	lsls	r2, r6, #31
 8017152:	d505      	bpl.n	8017160 <_dtoa_r+0x4e8>
 8017154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017158:	f7e9 fa76 	bl	8000648 <__aeabi_dmul>
 801715c:	3501      	adds	r5, #1
 801715e:	2301      	movs	r3, #1
 8017160:	1076      	asrs	r6, r6, #1
 8017162:	3708      	adds	r7, #8
 8017164:	e773      	b.n	801704e <_dtoa_r+0x3d6>
 8017166:	2502      	movs	r5, #2
 8017168:	e775      	b.n	8017056 <_dtoa_r+0x3de>
 801716a:	9e04      	ldr	r6, [sp, #16]
 801716c:	465f      	mov	r7, fp
 801716e:	e792      	b.n	8017096 <_dtoa_r+0x41e>
 8017170:	9900      	ldr	r1, [sp, #0]
 8017172:	4b50      	ldr	r3, [pc, #320]	; (80172b4 <_dtoa_r+0x63c>)
 8017174:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017178:	4431      	add	r1, r6
 801717a:	9102      	str	r1, [sp, #8]
 801717c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801717e:	eeb0 9a47 	vmov.f32	s18, s14
 8017182:	eef0 9a67 	vmov.f32	s19, s15
 8017186:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801718a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801718e:	2900      	cmp	r1, #0
 8017190:	d044      	beq.n	801721c <_dtoa_r+0x5a4>
 8017192:	494e      	ldr	r1, [pc, #312]	; (80172cc <_dtoa_r+0x654>)
 8017194:	2000      	movs	r0, #0
 8017196:	f7e9 fb81 	bl	800089c <__aeabi_ddiv>
 801719a:	ec53 2b19 	vmov	r2, r3, d9
 801719e:	f7e9 f89b 	bl	80002d8 <__aeabi_dsub>
 80171a2:	9d00      	ldr	r5, [sp, #0]
 80171a4:	ec41 0b19 	vmov	d9, r0, r1
 80171a8:	4649      	mov	r1, r9
 80171aa:	4640      	mov	r0, r8
 80171ac:	f7e9 fcfc 	bl	8000ba8 <__aeabi_d2iz>
 80171b0:	4606      	mov	r6, r0
 80171b2:	f7e9 f9df 	bl	8000574 <__aeabi_i2d>
 80171b6:	4602      	mov	r2, r0
 80171b8:	460b      	mov	r3, r1
 80171ba:	4640      	mov	r0, r8
 80171bc:	4649      	mov	r1, r9
 80171be:	f7e9 f88b 	bl	80002d8 <__aeabi_dsub>
 80171c2:	3630      	adds	r6, #48	; 0x30
 80171c4:	f805 6b01 	strb.w	r6, [r5], #1
 80171c8:	ec53 2b19 	vmov	r2, r3, d9
 80171cc:	4680      	mov	r8, r0
 80171ce:	4689      	mov	r9, r1
 80171d0:	f7e9 fcac 	bl	8000b2c <__aeabi_dcmplt>
 80171d4:	2800      	cmp	r0, #0
 80171d6:	d164      	bne.n	80172a2 <_dtoa_r+0x62a>
 80171d8:	4642      	mov	r2, r8
 80171da:	464b      	mov	r3, r9
 80171dc:	4937      	ldr	r1, [pc, #220]	; (80172bc <_dtoa_r+0x644>)
 80171de:	2000      	movs	r0, #0
 80171e0:	f7e9 f87a 	bl	80002d8 <__aeabi_dsub>
 80171e4:	ec53 2b19 	vmov	r2, r3, d9
 80171e8:	f7e9 fca0 	bl	8000b2c <__aeabi_dcmplt>
 80171ec:	2800      	cmp	r0, #0
 80171ee:	f040 80b6 	bne.w	801735e <_dtoa_r+0x6e6>
 80171f2:	9b02      	ldr	r3, [sp, #8]
 80171f4:	429d      	cmp	r5, r3
 80171f6:	f43f af7c 	beq.w	80170f2 <_dtoa_r+0x47a>
 80171fa:	4b31      	ldr	r3, [pc, #196]	; (80172c0 <_dtoa_r+0x648>)
 80171fc:	ec51 0b19 	vmov	r0, r1, d9
 8017200:	2200      	movs	r2, #0
 8017202:	f7e9 fa21 	bl	8000648 <__aeabi_dmul>
 8017206:	4b2e      	ldr	r3, [pc, #184]	; (80172c0 <_dtoa_r+0x648>)
 8017208:	ec41 0b19 	vmov	d9, r0, r1
 801720c:	2200      	movs	r2, #0
 801720e:	4640      	mov	r0, r8
 8017210:	4649      	mov	r1, r9
 8017212:	f7e9 fa19 	bl	8000648 <__aeabi_dmul>
 8017216:	4680      	mov	r8, r0
 8017218:	4689      	mov	r9, r1
 801721a:	e7c5      	b.n	80171a8 <_dtoa_r+0x530>
 801721c:	ec51 0b17 	vmov	r0, r1, d7
 8017220:	f7e9 fa12 	bl	8000648 <__aeabi_dmul>
 8017224:	9b02      	ldr	r3, [sp, #8]
 8017226:	9d00      	ldr	r5, [sp, #0]
 8017228:	930f      	str	r3, [sp, #60]	; 0x3c
 801722a:	ec41 0b19 	vmov	d9, r0, r1
 801722e:	4649      	mov	r1, r9
 8017230:	4640      	mov	r0, r8
 8017232:	f7e9 fcb9 	bl	8000ba8 <__aeabi_d2iz>
 8017236:	4606      	mov	r6, r0
 8017238:	f7e9 f99c 	bl	8000574 <__aeabi_i2d>
 801723c:	3630      	adds	r6, #48	; 0x30
 801723e:	4602      	mov	r2, r0
 8017240:	460b      	mov	r3, r1
 8017242:	4640      	mov	r0, r8
 8017244:	4649      	mov	r1, r9
 8017246:	f7e9 f847 	bl	80002d8 <__aeabi_dsub>
 801724a:	f805 6b01 	strb.w	r6, [r5], #1
 801724e:	9b02      	ldr	r3, [sp, #8]
 8017250:	429d      	cmp	r5, r3
 8017252:	4680      	mov	r8, r0
 8017254:	4689      	mov	r9, r1
 8017256:	f04f 0200 	mov.w	r2, #0
 801725a:	d124      	bne.n	80172a6 <_dtoa_r+0x62e>
 801725c:	4b1b      	ldr	r3, [pc, #108]	; (80172cc <_dtoa_r+0x654>)
 801725e:	ec51 0b19 	vmov	r0, r1, d9
 8017262:	f7e9 f83b 	bl	80002dc <__adddf3>
 8017266:	4602      	mov	r2, r0
 8017268:	460b      	mov	r3, r1
 801726a:	4640      	mov	r0, r8
 801726c:	4649      	mov	r1, r9
 801726e:	f7e9 fc7b 	bl	8000b68 <__aeabi_dcmpgt>
 8017272:	2800      	cmp	r0, #0
 8017274:	d173      	bne.n	801735e <_dtoa_r+0x6e6>
 8017276:	ec53 2b19 	vmov	r2, r3, d9
 801727a:	4914      	ldr	r1, [pc, #80]	; (80172cc <_dtoa_r+0x654>)
 801727c:	2000      	movs	r0, #0
 801727e:	f7e9 f82b 	bl	80002d8 <__aeabi_dsub>
 8017282:	4602      	mov	r2, r0
 8017284:	460b      	mov	r3, r1
 8017286:	4640      	mov	r0, r8
 8017288:	4649      	mov	r1, r9
 801728a:	f7e9 fc4f 	bl	8000b2c <__aeabi_dcmplt>
 801728e:	2800      	cmp	r0, #0
 8017290:	f43f af2f 	beq.w	80170f2 <_dtoa_r+0x47a>
 8017294:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017296:	1e6b      	subs	r3, r5, #1
 8017298:	930f      	str	r3, [sp, #60]	; 0x3c
 801729a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801729e:	2b30      	cmp	r3, #48	; 0x30
 80172a0:	d0f8      	beq.n	8017294 <_dtoa_r+0x61c>
 80172a2:	46bb      	mov	fp, r7
 80172a4:	e04a      	b.n	801733c <_dtoa_r+0x6c4>
 80172a6:	4b06      	ldr	r3, [pc, #24]	; (80172c0 <_dtoa_r+0x648>)
 80172a8:	f7e9 f9ce 	bl	8000648 <__aeabi_dmul>
 80172ac:	4680      	mov	r8, r0
 80172ae:	4689      	mov	r9, r1
 80172b0:	e7bd      	b.n	801722e <_dtoa_r+0x5b6>
 80172b2:	bf00      	nop
 80172b4:	0801b9d8 	.word	0x0801b9d8
 80172b8:	0801b9b0 	.word	0x0801b9b0
 80172bc:	3ff00000 	.word	0x3ff00000
 80172c0:	40240000 	.word	0x40240000
 80172c4:	401c0000 	.word	0x401c0000
 80172c8:	40140000 	.word	0x40140000
 80172cc:	3fe00000 	.word	0x3fe00000
 80172d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80172d4:	9d00      	ldr	r5, [sp, #0]
 80172d6:	4642      	mov	r2, r8
 80172d8:	464b      	mov	r3, r9
 80172da:	4630      	mov	r0, r6
 80172dc:	4639      	mov	r1, r7
 80172de:	f7e9 fadd 	bl	800089c <__aeabi_ddiv>
 80172e2:	f7e9 fc61 	bl	8000ba8 <__aeabi_d2iz>
 80172e6:	9001      	str	r0, [sp, #4]
 80172e8:	f7e9 f944 	bl	8000574 <__aeabi_i2d>
 80172ec:	4642      	mov	r2, r8
 80172ee:	464b      	mov	r3, r9
 80172f0:	f7e9 f9aa 	bl	8000648 <__aeabi_dmul>
 80172f4:	4602      	mov	r2, r0
 80172f6:	460b      	mov	r3, r1
 80172f8:	4630      	mov	r0, r6
 80172fa:	4639      	mov	r1, r7
 80172fc:	f7e8 ffec 	bl	80002d8 <__aeabi_dsub>
 8017300:	9e01      	ldr	r6, [sp, #4]
 8017302:	9f04      	ldr	r7, [sp, #16]
 8017304:	3630      	adds	r6, #48	; 0x30
 8017306:	f805 6b01 	strb.w	r6, [r5], #1
 801730a:	9e00      	ldr	r6, [sp, #0]
 801730c:	1bae      	subs	r6, r5, r6
 801730e:	42b7      	cmp	r7, r6
 8017310:	4602      	mov	r2, r0
 8017312:	460b      	mov	r3, r1
 8017314:	d134      	bne.n	8017380 <_dtoa_r+0x708>
 8017316:	f7e8 ffe1 	bl	80002dc <__adddf3>
 801731a:	4642      	mov	r2, r8
 801731c:	464b      	mov	r3, r9
 801731e:	4606      	mov	r6, r0
 8017320:	460f      	mov	r7, r1
 8017322:	f7e9 fc21 	bl	8000b68 <__aeabi_dcmpgt>
 8017326:	b9c8      	cbnz	r0, 801735c <_dtoa_r+0x6e4>
 8017328:	4642      	mov	r2, r8
 801732a:	464b      	mov	r3, r9
 801732c:	4630      	mov	r0, r6
 801732e:	4639      	mov	r1, r7
 8017330:	f7e9 fbf2 	bl	8000b18 <__aeabi_dcmpeq>
 8017334:	b110      	cbz	r0, 801733c <_dtoa_r+0x6c4>
 8017336:	9b01      	ldr	r3, [sp, #4]
 8017338:	07db      	lsls	r3, r3, #31
 801733a:	d40f      	bmi.n	801735c <_dtoa_r+0x6e4>
 801733c:	4651      	mov	r1, sl
 801733e:	4620      	mov	r0, r4
 8017340:	f000 fbcc 	bl	8017adc <_Bfree>
 8017344:	2300      	movs	r3, #0
 8017346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017348:	702b      	strb	r3, [r5, #0]
 801734a:	f10b 0301 	add.w	r3, fp, #1
 801734e:	6013      	str	r3, [r2, #0]
 8017350:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017352:	2b00      	cmp	r3, #0
 8017354:	f43f ace2 	beq.w	8016d1c <_dtoa_r+0xa4>
 8017358:	601d      	str	r5, [r3, #0]
 801735a:	e4df      	b.n	8016d1c <_dtoa_r+0xa4>
 801735c:	465f      	mov	r7, fp
 801735e:	462b      	mov	r3, r5
 8017360:	461d      	mov	r5, r3
 8017362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017366:	2a39      	cmp	r2, #57	; 0x39
 8017368:	d106      	bne.n	8017378 <_dtoa_r+0x700>
 801736a:	9a00      	ldr	r2, [sp, #0]
 801736c:	429a      	cmp	r2, r3
 801736e:	d1f7      	bne.n	8017360 <_dtoa_r+0x6e8>
 8017370:	9900      	ldr	r1, [sp, #0]
 8017372:	2230      	movs	r2, #48	; 0x30
 8017374:	3701      	adds	r7, #1
 8017376:	700a      	strb	r2, [r1, #0]
 8017378:	781a      	ldrb	r2, [r3, #0]
 801737a:	3201      	adds	r2, #1
 801737c:	701a      	strb	r2, [r3, #0]
 801737e:	e790      	b.n	80172a2 <_dtoa_r+0x62a>
 8017380:	4ba3      	ldr	r3, [pc, #652]	; (8017610 <_dtoa_r+0x998>)
 8017382:	2200      	movs	r2, #0
 8017384:	f7e9 f960 	bl	8000648 <__aeabi_dmul>
 8017388:	2200      	movs	r2, #0
 801738a:	2300      	movs	r3, #0
 801738c:	4606      	mov	r6, r0
 801738e:	460f      	mov	r7, r1
 8017390:	f7e9 fbc2 	bl	8000b18 <__aeabi_dcmpeq>
 8017394:	2800      	cmp	r0, #0
 8017396:	d09e      	beq.n	80172d6 <_dtoa_r+0x65e>
 8017398:	e7d0      	b.n	801733c <_dtoa_r+0x6c4>
 801739a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801739c:	2a00      	cmp	r2, #0
 801739e:	f000 80ca 	beq.w	8017536 <_dtoa_r+0x8be>
 80173a2:	9a07      	ldr	r2, [sp, #28]
 80173a4:	2a01      	cmp	r2, #1
 80173a6:	f300 80ad 	bgt.w	8017504 <_dtoa_r+0x88c>
 80173aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80173ac:	2a00      	cmp	r2, #0
 80173ae:	f000 80a5 	beq.w	80174fc <_dtoa_r+0x884>
 80173b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80173b6:	9e08      	ldr	r6, [sp, #32]
 80173b8:	9d05      	ldr	r5, [sp, #20]
 80173ba:	9a05      	ldr	r2, [sp, #20]
 80173bc:	441a      	add	r2, r3
 80173be:	9205      	str	r2, [sp, #20]
 80173c0:	9a06      	ldr	r2, [sp, #24]
 80173c2:	2101      	movs	r1, #1
 80173c4:	441a      	add	r2, r3
 80173c6:	4620      	mov	r0, r4
 80173c8:	9206      	str	r2, [sp, #24]
 80173ca:	f000 fc3d 	bl	8017c48 <__i2b>
 80173ce:	4607      	mov	r7, r0
 80173d0:	b165      	cbz	r5, 80173ec <_dtoa_r+0x774>
 80173d2:	9b06      	ldr	r3, [sp, #24]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	dd09      	ble.n	80173ec <_dtoa_r+0x774>
 80173d8:	42ab      	cmp	r3, r5
 80173da:	9a05      	ldr	r2, [sp, #20]
 80173dc:	bfa8      	it	ge
 80173de:	462b      	movge	r3, r5
 80173e0:	1ad2      	subs	r2, r2, r3
 80173e2:	9205      	str	r2, [sp, #20]
 80173e4:	9a06      	ldr	r2, [sp, #24]
 80173e6:	1aed      	subs	r5, r5, r3
 80173e8:	1ad3      	subs	r3, r2, r3
 80173ea:	9306      	str	r3, [sp, #24]
 80173ec:	9b08      	ldr	r3, [sp, #32]
 80173ee:	b1f3      	cbz	r3, 801742e <_dtoa_r+0x7b6>
 80173f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	f000 80a3 	beq.w	801753e <_dtoa_r+0x8c6>
 80173f8:	2e00      	cmp	r6, #0
 80173fa:	dd10      	ble.n	801741e <_dtoa_r+0x7a6>
 80173fc:	4639      	mov	r1, r7
 80173fe:	4632      	mov	r2, r6
 8017400:	4620      	mov	r0, r4
 8017402:	f000 fce1 	bl	8017dc8 <__pow5mult>
 8017406:	4652      	mov	r2, sl
 8017408:	4601      	mov	r1, r0
 801740a:	4607      	mov	r7, r0
 801740c:	4620      	mov	r0, r4
 801740e:	f000 fc31 	bl	8017c74 <__multiply>
 8017412:	4651      	mov	r1, sl
 8017414:	4680      	mov	r8, r0
 8017416:	4620      	mov	r0, r4
 8017418:	f000 fb60 	bl	8017adc <_Bfree>
 801741c:	46c2      	mov	sl, r8
 801741e:	9b08      	ldr	r3, [sp, #32]
 8017420:	1b9a      	subs	r2, r3, r6
 8017422:	d004      	beq.n	801742e <_dtoa_r+0x7b6>
 8017424:	4651      	mov	r1, sl
 8017426:	4620      	mov	r0, r4
 8017428:	f000 fcce 	bl	8017dc8 <__pow5mult>
 801742c:	4682      	mov	sl, r0
 801742e:	2101      	movs	r1, #1
 8017430:	4620      	mov	r0, r4
 8017432:	f000 fc09 	bl	8017c48 <__i2b>
 8017436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017438:	2b00      	cmp	r3, #0
 801743a:	4606      	mov	r6, r0
 801743c:	f340 8081 	ble.w	8017542 <_dtoa_r+0x8ca>
 8017440:	461a      	mov	r2, r3
 8017442:	4601      	mov	r1, r0
 8017444:	4620      	mov	r0, r4
 8017446:	f000 fcbf 	bl	8017dc8 <__pow5mult>
 801744a:	9b07      	ldr	r3, [sp, #28]
 801744c:	2b01      	cmp	r3, #1
 801744e:	4606      	mov	r6, r0
 8017450:	dd7a      	ble.n	8017548 <_dtoa_r+0x8d0>
 8017452:	f04f 0800 	mov.w	r8, #0
 8017456:	6933      	ldr	r3, [r6, #16]
 8017458:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801745c:	6918      	ldr	r0, [r3, #16]
 801745e:	f000 fba5 	bl	8017bac <__hi0bits>
 8017462:	f1c0 0020 	rsb	r0, r0, #32
 8017466:	9b06      	ldr	r3, [sp, #24]
 8017468:	4418      	add	r0, r3
 801746a:	f010 001f 	ands.w	r0, r0, #31
 801746e:	f000 8094 	beq.w	801759a <_dtoa_r+0x922>
 8017472:	f1c0 0320 	rsb	r3, r0, #32
 8017476:	2b04      	cmp	r3, #4
 8017478:	f340 8085 	ble.w	8017586 <_dtoa_r+0x90e>
 801747c:	9b05      	ldr	r3, [sp, #20]
 801747e:	f1c0 001c 	rsb	r0, r0, #28
 8017482:	4403      	add	r3, r0
 8017484:	9305      	str	r3, [sp, #20]
 8017486:	9b06      	ldr	r3, [sp, #24]
 8017488:	4403      	add	r3, r0
 801748a:	4405      	add	r5, r0
 801748c:	9306      	str	r3, [sp, #24]
 801748e:	9b05      	ldr	r3, [sp, #20]
 8017490:	2b00      	cmp	r3, #0
 8017492:	dd05      	ble.n	80174a0 <_dtoa_r+0x828>
 8017494:	4651      	mov	r1, sl
 8017496:	461a      	mov	r2, r3
 8017498:	4620      	mov	r0, r4
 801749a:	f000 fcef 	bl	8017e7c <__lshift>
 801749e:	4682      	mov	sl, r0
 80174a0:	9b06      	ldr	r3, [sp, #24]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	dd05      	ble.n	80174b2 <_dtoa_r+0x83a>
 80174a6:	4631      	mov	r1, r6
 80174a8:	461a      	mov	r2, r3
 80174aa:	4620      	mov	r0, r4
 80174ac:	f000 fce6 	bl	8017e7c <__lshift>
 80174b0:	4606      	mov	r6, r0
 80174b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d072      	beq.n	801759e <_dtoa_r+0x926>
 80174b8:	4631      	mov	r1, r6
 80174ba:	4650      	mov	r0, sl
 80174bc:	f000 fd4a 	bl	8017f54 <__mcmp>
 80174c0:	2800      	cmp	r0, #0
 80174c2:	da6c      	bge.n	801759e <_dtoa_r+0x926>
 80174c4:	2300      	movs	r3, #0
 80174c6:	4651      	mov	r1, sl
 80174c8:	220a      	movs	r2, #10
 80174ca:	4620      	mov	r0, r4
 80174cc:	f000 fb28 	bl	8017b20 <__multadd>
 80174d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80174d6:	4682      	mov	sl, r0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	f000 81b0 	beq.w	801783e <_dtoa_r+0xbc6>
 80174de:	2300      	movs	r3, #0
 80174e0:	4639      	mov	r1, r7
 80174e2:	220a      	movs	r2, #10
 80174e4:	4620      	mov	r0, r4
 80174e6:	f000 fb1b 	bl	8017b20 <__multadd>
 80174ea:	9b01      	ldr	r3, [sp, #4]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	4607      	mov	r7, r0
 80174f0:	f300 8096 	bgt.w	8017620 <_dtoa_r+0x9a8>
 80174f4:	9b07      	ldr	r3, [sp, #28]
 80174f6:	2b02      	cmp	r3, #2
 80174f8:	dc59      	bgt.n	80175ae <_dtoa_r+0x936>
 80174fa:	e091      	b.n	8017620 <_dtoa_r+0x9a8>
 80174fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017502:	e758      	b.n	80173b6 <_dtoa_r+0x73e>
 8017504:	9b04      	ldr	r3, [sp, #16]
 8017506:	1e5e      	subs	r6, r3, #1
 8017508:	9b08      	ldr	r3, [sp, #32]
 801750a:	42b3      	cmp	r3, r6
 801750c:	bfbf      	itttt	lt
 801750e:	9b08      	ldrlt	r3, [sp, #32]
 8017510:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017512:	9608      	strlt	r6, [sp, #32]
 8017514:	1af3      	sublt	r3, r6, r3
 8017516:	bfb4      	ite	lt
 8017518:	18d2      	addlt	r2, r2, r3
 801751a:	1b9e      	subge	r6, r3, r6
 801751c:	9b04      	ldr	r3, [sp, #16]
 801751e:	bfbc      	itt	lt
 8017520:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017522:	2600      	movlt	r6, #0
 8017524:	2b00      	cmp	r3, #0
 8017526:	bfb7      	itett	lt
 8017528:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801752c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017530:	1a9d      	sublt	r5, r3, r2
 8017532:	2300      	movlt	r3, #0
 8017534:	e741      	b.n	80173ba <_dtoa_r+0x742>
 8017536:	9e08      	ldr	r6, [sp, #32]
 8017538:	9d05      	ldr	r5, [sp, #20]
 801753a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801753c:	e748      	b.n	80173d0 <_dtoa_r+0x758>
 801753e:	9a08      	ldr	r2, [sp, #32]
 8017540:	e770      	b.n	8017424 <_dtoa_r+0x7ac>
 8017542:	9b07      	ldr	r3, [sp, #28]
 8017544:	2b01      	cmp	r3, #1
 8017546:	dc19      	bgt.n	801757c <_dtoa_r+0x904>
 8017548:	9b02      	ldr	r3, [sp, #8]
 801754a:	b9bb      	cbnz	r3, 801757c <_dtoa_r+0x904>
 801754c:	9b03      	ldr	r3, [sp, #12]
 801754e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017552:	b99b      	cbnz	r3, 801757c <_dtoa_r+0x904>
 8017554:	9b03      	ldr	r3, [sp, #12]
 8017556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801755a:	0d1b      	lsrs	r3, r3, #20
 801755c:	051b      	lsls	r3, r3, #20
 801755e:	b183      	cbz	r3, 8017582 <_dtoa_r+0x90a>
 8017560:	9b05      	ldr	r3, [sp, #20]
 8017562:	3301      	adds	r3, #1
 8017564:	9305      	str	r3, [sp, #20]
 8017566:	9b06      	ldr	r3, [sp, #24]
 8017568:	3301      	adds	r3, #1
 801756a:	9306      	str	r3, [sp, #24]
 801756c:	f04f 0801 	mov.w	r8, #1
 8017570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017572:	2b00      	cmp	r3, #0
 8017574:	f47f af6f 	bne.w	8017456 <_dtoa_r+0x7de>
 8017578:	2001      	movs	r0, #1
 801757a:	e774      	b.n	8017466 <_dtoa_r+0x7ee>
 801757c:	f04f 0800 	mov.w	r8, #0
 8017580:	e7f6      	b.n	8017570 <_dtoa_r+0x8f8>
 8017582:	4698      	mov	r8, r3
 8017584:	e7f4      	b.n	8017570 <_dtoa_r+0x8f8>
 8017586:	d082      	beq.n	801748e <_dtoa_r+0x816>
 8017588:	9a05      	ldr	r2, [sp, #20]
 801758a:	331c      	adds	r3, #28
 801758c:	441a      	add	r2, r3
 801758e:	9205      	str	r2, [sp, #20]
 8017590:	9a06      	ldr	r2, [sp, #24]
 8017592:	441a      	add	r2, r3
 8017594:	441d      	add	r5, r3
 8017596:	9206      	str	r2, [sp, #24]
 8017598:	e779      	b.n	801748e <_dtoa_r+0x816>
 801759a:	4603      	mov	r3, r0
 801759c:	e7f4      	b.n	8017588 <_dtoa_r+0x910>
 801759e:	9b04      	ldr	r3, [sp, #16]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	dc37      	bgt.n	8017614 <_dtoa_r+0x99c>
 80175a4:	9b07      	ldr	r3, [sp, #28]
 80175a6:	2b02      	cmp	r3, #2
 80175a8:	dd34      	ble.n	8017614 <_dtoa_r+0x99c>
 80175aa:	9b04      	ldr	r3, [sp, #16]
 80175ac:	9301      	str	r3, [sp, #4]
 80175ae:	9b01      	ldr	r3, [sp, #4]
 80175b0:	b963      	cbnz	r3, 80175cc <_dtoa_r+0x954>
 80175b2:	4631      	mov	r1, r6
 80175b4:	2205      	movs	r2, #5
 80175b6:	4620      	mov	r0, r4
 80175b8:	f000 fab2 	bl	8017b20 <__multadd>
 80175bc:	4601      	mov	r1, r0
 80175be:	4606      	mov	r6, r0
 80175c0:	4650      	mov	r0, sl
 80175c2:	f000 fcc7 	bl	8017f54 <__mcmp>
 80175c6:	2800      	cmp	r0, #0
 80175c8:	f73f adbb 	bgt.w	8017142 <_dtoa_r+0x4ca>
 80175cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175ce:	9d00      	ldr	r5, [sp, #0]
 80175d0:	ea6f 0b03 	mvn.w	fp, r3
 80175d4:	f04f 0800 	mov.w	r8, #0
 80175d8:	4631      	mov	r1, r6
 80175da:	4620      	mov	r0, r4
 80175dc:	f000 fa7e 	bl	8017adc <_Bfree>
 80175e0:	2f00      	cmp	r7, #0
 80175e2:	f43f aeab 	beq.w	801733c <_dtoa_r+0x6c4>
 80175e6:	f1b8 0f00 	cmp.w	r8, #0
 80175ea:	d005      	beq.n	80175f8 <_dtoa_r+0x980>
 80175ec:	45b8      	cmp	r8, r7
 80175ee:	d003      	beq.n	80175f8 <_dtoa_r+0x980>
 80175f0:	4641      	mov	r1, r8
 80175f2:	4620      	mov	r0, r4
 80175f4:	f000 fa72 	bl	8017adc <_Bfree>
 80175f8:	4639      	mov	r1, r7
 80175fa:	4620      	mov	r0, r4
 80175fc:	f000 fa6e 	bl	8017adc <_Bfree>
 8017600:	e69c      	b.n	801733c <_dtoa_r+0x6c4>
 8017602:	2600      	movs	r6, #0
 8017604:	4637      	mov	r7, r6
 8017606:	e7e1      	b.n	80175cc <_dtoa_r+0x954>
 8017608:	46bb      	mov	fp, r7
 801760a:	4637      	mov	r7, r6
 801760c:	e599      	b.n	8017142 <_dtoa_r+0x4ca>
 801760e:	bf00      	nop
 8017610:	40240000 	.word	0x40240000
 8017614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017616:	2b00      	cmp	r3, #0
 8017618:	f000 80c8 	beq.w	80177ac <_dtoa_r+0xb34>
 801761c:	9b04      	ldr	r3, [sp, #16]
 801761e:	9301      	str	r3, [sp, #4]
 8017620:	2d00      	cmp	r5, #0
 8017622:	dd05      	ble.n	8017630 <_dtoa_r+0x9b8>
 8017624:	4639      	mov	r1, r7
 8017626:	462a      	mov	r2, r5
 8017628:	4620      	mov	r0, r4
 801762a:	f000 fc27 	bl	8017e7c <__lshift>
 801762e:	4607      	mov	r7, r0
 8017630:	f1b8 0f00 	cmp.w	r8, #0
 8017634:	d05b      	beq.n	80176ee <_dtoa_r+0xa76>
 8017636:	6879      	ldr	r1, [r7, #4]
 8017638:	4620      	mov	r0, r4
 801763a:	f000 fa0f 	bl	8017a5c <_Balloc>
 801763e:	4605      	mov	r5, r0
 8017640:	b928      	cbnz	r0, 801764e <_dtoa_r+0x9d6>
 8017642:	4b83      	ldr	r3, [pc, #524]	; (8017850 <_dtoa_r+0xbd8>)
 8017644:	4602      	mov	r2, r0
 8017646:	f240 21ef 	movw	r1, #751	; 0x2ef
 801764a:	f7ff bb2e 	b.w	8016caa <_dtoa_r+0x32>
 801764e:	693a      	ldr	r2, [r7, #16]
 8017650:	3202      	adds	r2, #2
 8017652:	0092      	lsls	r2, r2, #2
 8017654:	f107 010c 	add.w	r1, r7, #12
 8017658:	300c      	adds	r0, #12
 801765a:	f000 ffab 	bl	80185b4 <memcpy>
 801765e:	2201      	movs	r2, #1
 8017660:	4629      	mov	r1, r5
 8017662:	4620      	mov	r0, r4
 8017664:	f000 fc0a 	bl	8017e7c <__lshift>
 8017668:	9b00      	ldr	r3, [sp, #0]
 801766a:	3301      	adds	r3, #1
 801766c:	9304      	str	r3, [sp, #16]
 801766e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017672:	4413      	add	r3, r2
 8017674:	9308      	str	r3, [sp, #32]
 8017676:	9b02      	ldr	r3, [sp, #8]
 8017678:	f003 0301 	and.w	r3, r3, #1
 801767c:	46b8      	mov	r8, r7
 801767e:	9306      	str	r3, [sp, #24]
 8017680:	4607      	mov	r7, r0
 8017682:	9b04      	ldr	r3, [sp, #16]
 8017684:	4631      	mov	r1, r6
 8017686:	3b01      	subs	r3, #1
 8017688:	4650      	mov	r0, sl
 801768a:	9301      	str	r3, [sp, #4]
 801768c:	f7ff fa69 	bl	8016b62 <quorem>
 8017690:	4641      	mov	r1, r8
 8017692:	9002      	str	r0, [sp, #8]
 8017694:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017698:	4650      	mov	r0, sl
 801769a:	f000 fc5b 	bl	8017f54 <__mcmp>
 801769e:	463a      	mov	r2, r7
 80176a0:	9005      	str	r0, [sp, #20]
 80176a2:	4631      	mov	r1, r6
 80176a4:	4620      	mov	r0, r4
 80176a6:	f000 fc71 	bl	8017f8c <__mdiff>
 80176aa:	68c2      	ldr	r2, [r0, #12]
 80176ac:	4605      	mov	r5, r0
 80176ae:	bb02      	cbnz	r2, 80176f2 <_dtoa_r+0xa7a>
 80176b0:	4601      	mov	r1, r0
 80176b2:	4650      	mov	r0, sl
 80176b4:	f000 fc4e 	bl	8017f54 <__mcmp>
 80176b8:	4602      	mov	r2, r0
 80176ba:	4629      	mov	r1, r5
 80176bc:	4620      	mov	r0, r4
 80176be:	9209      	str	r2, [sp, #36]	; 0x24
 80176c0:	f000 fa0c 	bl	8017adc <_Bfree>
 80176c4:	9b07      	ldr	r3, [sp, #28]
 80176c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176c8:	9d04      	ldr	r5, [sp, #16]
 80176ca:	ea43 0102 	orr.w	r1, r3, r2
 80176ce:	9b06      	ldr	r3, [sp, #24]
 80176d0:	4319      	orrs	r1, r3
 80176d2:	d110      	bne.n	80176f6 <_dtoa_r+0xa7e>
 80176d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80176d8:	d029      	beq.n	801772e <_dtoa_r+0xab6>
 80176da:	9b05      	ldr	r3, [sp, #20]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	dd02      	ble.n	80176e6 <_dtoa_r+0xa6e>
 80176e0:	9b02      	ldr	r3, [sp, #8]
 80176e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80176e6:	9b01      	ldr	r3, [sp, #4]
 80176e8:	f883 9000 	strb.w	r9, [r3]
 80176ec:	e774      	b.n	80175d8 <_dtoa_r+0x960>
 80176ee:	4638      	mov	r0, r7
 80176f0:	e7ba      	b.n	8017668 <_dtoa_r+0x9f0>
 80176f2:	2201      	movs	r2, #1
 80176f4:	e7e1      	b.n	80176ba <_dtoa_r+0xa42>
 80176f6:	9b05      	ldr	r3, [sp, #20]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	db04      	blt.n	8017706 <_dtoa_r+0xa8e>
 80176fc:	9907      	ldr	r1, [sp, #28]
 80176fe:	430b      	orrs	r3, r1
 8017700:	9906      	ldr	r1, [sp, #24]
 8017702:	430b      	orrs	r3, r1
 8017704:	d120      	bne.n	8017748 <_dtoa_r+0xad0>
 8017706:	2a00      	cmp	r2, #0
 8017708:	dded      	ble.n	80176e6 <_dtoa_r+0xa6e>
 801770a:	4651      	mov	r1, sl
 801770c:	2201      	movs	r2, #1
 801770e:	4620      	mov	r0, r4
 8017710:	f000 fbb4 	bl	8017e7c <__lshift>
 8017714:	4631      	mov	r1, r6
 8017716:	4682      	mov	sl, r0
 8017718:	f000 fc1c 	bl	8017f54 <__mcmp>
 801771c:	2800      	cmp	r0, #0
 801771e:	dc03      	bgt.n	8017728 <_dtoa_r+0xab0>
 8017720:	d1e1      	bne.n	80176e6 <_dtoa_r+0xa6e>
 8017722:	f019 0f01 	tst.w	r9, #1
 8017726:	d0de      	beq.n	80176e6 <_dtoa_r+0xa6e>
 8017728:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801772c:	d1d8      	bne.n	80176e0 <_dtoa_r+0xa68>
 801772e:	9a01      	ldr	r2, [sp, #4]
 8017730:	2339      	movs	r3, #57	; 0x39
 8017732:	7013      	strb	r3, [r2, #0]
 8017734:	462b      	mov	r3, r5
 8017736:	461d      	mov	r5, r3
 8017738:	3b01      	subs	r3, #1
 801773a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801773e:	2a39      	cmp	r2, #57	; 0x39
 8017740:	d06c      	beq.n	801781c <_dtoa_r+0xba4>
 8017742:	3201      	adds	r2, #1
 8017744:	701a      	strb	r2, [r3, #0]
 8017746:	e747      	b.n	80175d8 <_dtoa_r+0x960>
 8017748:	2a00      	cmp	r2, #0
 801774a:	dd07      	ble.n	801775c <_dtoa_r+0xae4>
 801774c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017750:	d0ed      	beq.n	801772e <_dtoa_r+0xab6>
 8017752:	9a01      	ldr	r2, [sp, #4]
 8017754:	f109 0301 	add.w	r3, r9, #1
 8017758:	7013      	strb	r3, [r2, #0]
 801775a:	e73d      	b.n	80175d8 <_dtoa_r+0x960>
 801775c:	9b04      	ldr	r3, [sp, #16]
 801775e:	9a08      	ldr	r2, [sp, #32]
 8017760:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017764:	4293      	cmp	r3, r2
 8017766:	d043      	beq.n	80177f0 <_dtoa_r+0xb78>
 8017768:	4651      	mov	r1, sl
 801776a:	2300      	movs	r3, #0
 801776c:	220a      	movs	r2, #10
 801776e:	4620      	mov	r0, r4
 8017770:	f000 f9d6 	bl	8017b20 <__multadd>
 8017774:	45b8      	cmp	r8, r7
 8017776:	4682      	mov	sl, r0
 8017778:	f04f 0300 	mov.w	r3, #0
 801777c:	f04f 020a 	mov.w	r2, #10
 8017780:	4641      	mov	r1, r8
 8017782:	4620      	mov	r0, r4
 8017784:	d107      	bne.n	8017796 <_dtoa_r+0xb1e>
 8017786:	f000 f9cb 	bl	8017b20 <__multadd>
 801778a:	4680      	mov	r8, r0
 801778c:	4607      	mov	r7, r0
 801778e:	9b04      	ldr	r3, [sp, #16]
 8017790:	3301      	adds	r3, #1
 8017792:	9304      	str	r3, [sp, #16]
 8017794:	e775      	b.n	8017682 <_dtoa_r+0xa0a>
 8017796:	f000 f9c3 	bl	8017b20 <__multadd>
 801779a:	4639      	mov	r1, r7
 801779c:	4680      	mov	r8, r0
 801779e:	2300      	movs	r3, #0
 80177a0:	220a      	movs	r2, #10
 80177a2:	4620      	mov	r0, r4
 80177a4:	f000 f9bc 	bl	8017b20 <__multadd>
 80177a8:	4607      	mov	r7, r0
 80177aa:	e7f0      	b.n	801778e <_dtoa_r+0xb16>
 80177ac:	9b04      	ldr	r3, [sp, #16]
 80177ae:	9301      	str	r3, [sp, #4]
 80177b0:	9d00      	ldr	r5, [sp, #0]
 80177b2:	4631      	mov	r1, r6
 80177b4:	4650      	mov	r0, sl
 80177b6:	f7ff f9d4 	bl	8016b62 <quorem>
 80177ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80177be:	9b00      	ldr	r3, [sp, #0]
 80177c0:	f805 9b01 	strb.w	r9, [r5], #1
 80177c4:	1aea      	subs	r2, r5, r3
 80177c6:	9b01      	ldr	r3, [sp, #4]
 80177c8:	4293      	cmp	r3, r2
 80177ca:	dd07      	ble.n	80177dc <_dtoa_r+0xb64>
 80177cc:	4651      	mov	r1, sl
 80177ce:	2300      	movs	r3, #0
 80177d0:	220a      	movs	r2, #10
 80177d2:	4620      	mov	r0, r4
 80177d4:	f000 f9a4 	bl	8017b20 <__multadd>
 80177d8:	4682      	mov	sl, r0
 80177da:	e7ea      	b.n	80177b2 <_dtoa_r+0xb3a>
 80177dc:	9b01      	ldr	r3, [sp, #4]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	bfc8      	it	gt
 80177e2:	461d      	movgt	r5, r3
 80177e4:	9b00      	ldr	r3, [sp, #0]
 80177e6:	bfd8      	it	le
 80177e8:	2501      	movle	r5, #1
 80177ea:	441d      	add	r5, r3
 80177ec:	f04f 0800 	mov.w	r8, #0
 80177f0:	4651      	mov	r1, sl
 80177f2:	2201      	movs	r2, #1
 80177f4:	4620      	mov	r0, r4
 80177f6:	f000 fb41 	bl	8017e7c <__lshift>
 80177fa:	4631      	mov	r1, r6
 80177fc:	4682      	mov	sl, r0
 80177fe:	f000 fba9 	bl	8017f54 <__mcmp>
 8017802:	2800      	cmp	r0, #0
 8017804:	dc96      	bgt.n	8017734 <_dtoa_r+0xabc>
 8017806:	d102      	bne.n	801780e <_dtoa_r+0xb96>
 8017808:	f019 0f01 	tst.w	r9, #1
 801780c:	d192      	bne.n	8017734 <_dtoa_r+0xabc>
 801780e:	462b      	mov	r3, r5
 8017810:	461d      	mov	r5, r3
 8017812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017816:	2a30      	cmp	r2, #48	; 0x30
 8017818:	d0fa      	beq.n	8017810 <_dtoa_r+0xb98>
 801781a:	e6dd      	b.n	80175d8 <_dtoa_r+0x960>
 801781c:	9a00      	ldr	r2, [sp, #0]
 801781e:	429a      	cmp	r2, r3
 8017820:	d189      	bne.n	8017736 <_dtoa_r+0xabe>
 8017822:	f10b 0b01 	add.w	fp, fp, #1
 8017826:	2331      	movs	r3, #49	; 0x31
 8017828:	e796      	b.n	8017758 <_dtoa_r+0xae0>
 801782a:	4b0a      	ldr	r3, [pc, #40]	; (8017854 <_dtoa_r+0xbdc>)
 801782c:	f7ff ba99 	b.w	8016d62 <_dtoa_r+0xea>
 8017830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017832:	2b00      	cmp	r3, #0
 8017834:	f47f aa6d 	bne.w	8016d12 <_dtoa_r+0x9a>
 8017838:	4b07      	ldr	r3, [pc, #28]	; (8017858 <_dtoa_r+0xbe0>)
 801783a:	f7ff ba92 	b.w	8016d62 <_dtoa_r+0xea>
 801783e:	9b01      	ldr	r3, [sp, #4]
 8017840:	2b00      	cmp	r3, #0
 8017842:	dcb5      	bgt.n	80177b0 <_dtoa_r+0xb38>
 8017844:	9b07      	ldr	r3, [sp, #28]
 8017846:	2b02      	cmp	r3, #2
 8017848:	f73f aeb1 	bgt.w	80175ae <_dtoa_r+0x936>
 801784c:	e7b0      	b.n	80177b0 <_dtoa_r+0xb38>
 801784e:	bf00      	nop
 8017850:	0801b940 	.word	0x0801b940
 8017854:	0801b8a0 	.word	0x0801b8a0
 8017858:	0801b8c4 	.word	0x0801b8c4

0801785c <_free_r>:
 801785c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801785e:	2900      	cmp	r1, #0
 8017860:	d044      	beq.n	80178ec <_free_r+0x90>
 8017862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017866:	9001      	str	r0, [sp, #4]
 8017868:	2b00      	cmp	r3, #0
 801786a:	f1a1 0404 	sub.w	r4, r1, #4
 801786e:	bfb8      	it	lt
 8017870:	18e4      	addlt	r4, r4, r3
 8017872:	f000 f8e7 	bl	8017a44 <__malloc_lock>
 8017876:	4a1e      	ldr	r2, [pc, #120]	; (80178f0 <_free_r+0x94>)
 8017878:	9801      	ldr	r0, [sp, #4]
 801787a:	6813      	ldr	r3, [r2, #0]
 801787c:	b933      	cbnz	r3, 801788c <_free_r+0x30>
 801787e:	6063      	str	r3, [r4, #4]
 8017880:	6014      	str	r4, [r2, #0]
 8017882:	b003      	add	sp, #12
 8017884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017888:	f000 b8e2 	b.w	8017a50 <__malloc_unlock>
 801788c:	42a3      	cmp	r3, r4
 801788e:	d908      	bls.n	80178a2 <_free_r+0x46>
 8017890:	6825      	ldr	r5, [r4, #0]
 8017892:	1961      	adds	r1, r4, r5
 8017894:	428b      	cmp	r3, r1
 8017896:	bf01      	itttt	eq
 8017898:	6819      	ldreq	r1, [r3, #0]
 801789a:	685b      	ldreq	r3, [r3, #4]
 801789c:	1949      	addeq	r1, r1, r5
 801789e:	6021      	streq	r1, [r4, #0]
 80178a0:	e7ed      	b.n	801787e <_free_r+0x22>
 80178a2:	461a      	mov	r2, r3
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	b10b      	cbz	r3, 80178ac <_free_r+0x50>
 80178a8:	42a3      	cmp	r3, r4
 80178aa:	d9fa      	bls.n	80178a2 <_free_r+0x46>
 80178ac:	6811      	ldr	r1, [r2, #0]
 80178ae:	1855      	adds	r5, r2, r1
 80178b0:	42a5      	cmp	r5, r4
 80178b2:	d10b      	bne.n	80178cc <_free_r+0x70>
 80178b4:	6824      	ldr	r4, [r4, #0]
 80178b6:	4421      	add	r1, r4
 80178b8:	1854      	adds	r4, r2, r1
 80178ba:	42a3      	cmp	r3, r4
 80178bc:	6011      	str	r1, [r2, #0]
 80178be:	d1e0      	bne.n	8017882 <_free_r+0x26>
 80178c0:	681c      	ldr	r4, [r3, #0]
 80178c2:	685b      	ldr	r3, [r3, #4]
 80178c4:	6053      	str	r3, [r2, #4]
 80178c6:	440c      	add	r4, r1
 80178c8:	6014      	str	r4, [r2, #0]
 80178ca:	e7da      	b.n	8017882 <_free_r+0x26>
 80178cc:	d902      	bls.n	80178d4 <_free_r+0x78>
 80178ce:	230c      	movs	r3, #12
 80178d0:	6003      	str	r3, [r0, #0]
 80178d2:	e7d6      	b.n	8017882 <_free_r+0x26>
 80178d4:	6825      	ldr	r5, [r4, #0]
 80178d6:	1961      	adds	r1, r4, r5
 80178d8:	428b      	cmp	r3, r1
 80178da:	bf04      	itt	eq
 80178dc:	6819      	ldreq	r1, [r3, #0]
 80178de:	685b      	ldreq	r3, [r3, #4]
 80178e0:	6063      	str	r3, [r4, #4]
 80178e2:	bf04      	itt	eq
 80178e4:	1949      	addeq	r1, r1, r5
 80178e6:	6021      	streq	r1, [r4, #0]
 80178e8:	6054      	str	r4, [r2, #4]
 80178ea:	e7ca      	b.n	8017882 <_free_r+0x26>
 80178ec:	b003      	add	sp, #12
 80178ee:	bd30      	pop	{r4, r5, pc}
 80178f0:	20003008 	.word	0x20003008

080178f4 <malloc>:
 80178f4:	4b02      	ldr	r3, [pc, #8]	; (8017900 <malloc+0xc>)
 80178f6:	4601      	mov	r1, r0
 80178f8:	6818      	ldr	r0, [r3, #0]
 80178fa:	f000 b823 	b.w	8017944 <_malloc_r>
 80178fe:	bf00      	nop
 8017900:	2000039c 	.word	0x2000039c

08017904 <sbrk_aligned>:
 8017904:	b570      	push	{r4, r5, r6, lr}
 8017906:	4e0e      	ldr	r6, [pc, #56]	; (8017940 <sbrk_aligned+0x3c>)
 8017908:	460c      	mov	r4, r1
 801790a:	6831      	ldr	r1, [r6, #0]
 801790c:	4605      	mov	r5, r0
 801790e:	b911      	cbnz	r1, 8017916 <sbrk_aligned+0x12>
 8017910:	f000 fe40 	bl	8018594 <_sbrk_r>
 8017914:	6030      	str	r0, [r6, #0]
 8017916:	4621      	mov	r1, r4
 8017918:	4628      	mov	r0, r5
 801791a:	f000 fe3b 	bl	8018594 <_sbrk_r>
 801791e:	1c43      	adds	r3, r0, #1
 8017920:	d00a      	beq.n	8017938 <sbrk_aligned+0x34>
 8017922:	1cc4      	adds	r4, r0, #3
 8017924:	f024 0403 	bic.w	r4, r4, #3
 8017928:	42a0      	cmp	r0, r4
 801792a:	d007      	beq.n	801793c <sbrk_aligned+0x38>
 801792c:	1a21      	subs	r1, r4, r0
 801792e:	4628      	mov	r0, r5
 8017930:	f000 fe30 	bl	8018594 <_sbrk_r>
 8017934:	3001      	adds	r0, #1
 8017936:	d101      	bne.n	801793c <sbrk_aligned+0x38>
 8017938:	f04f 34ff 	mov.w	r4, #4294967295
 801793c:	4620      	mov	r0, r4
 801793e:	bd70      	pop	{r4, r5, r6, pc}
 8017940:	2000300c 	.word	0x2000300c

08017944 <_malloc_r>:
 8017944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017948:	1ccd      	adds	r5, r1, #3
 801794a:	f025 0503 	bic.w	r5, r5, #3
 801794e:	3508      	adds	r5, #8
 8017950:	2d0c      	cmp	r5, #12
 8017952:	bf38      	it	cc
 8017954:	250c      	movcc	r5, #12
 8017956:	2d00      	cmp	r5, #0
 8017958:	4607      	mov	r7, r0
 801795a:	db01      	blt.n	8017960 <_malloc_r+0x1c>
 801795c:	42a9      	cmp	r1, r5
 801795e:	d905      	bls.n	801796c <_malloc_r+0x28>
 8017960:	230c      	movs	r3, #12
 8017962:	603b      	str	r3, [r7, #0]
 8017964:	2600      	movs	r6, #0
 8017966:	4630      	mov	r0, r6
 8017968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801796c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017a40 <_malloc_r+0xfc>
 8017970:	f000 f868 	bl	8017a44 <__malloc_lock>
 8017974:	f8d8 3000 	ldr.w	r3, [r8]
 8017978:	461c      	mov	r4, r3
 801797a:	bb5c      	cbnz	r4, 80179d4 <_malloc_r+0x90>
 801797c:	4629      	mov	r1, r5
 801797e:	4638      	mov	r0, r7
 8017980:	f7ff ffc0 	bl	8017904 <sbrk_aligned>
 8017984:	1c43      	adds	r3, r0, #1
 8017986:	4604      	mov	r4, r0
 8017988:	d155      	bne.n	8017a36 <_malloc_r+0xf2>
 801798a:	f8d8 4000 	ldr.w	r4, [r8]
 801798e:	4626      	mov	r6, r4
 8017990:	2e00      	cmp	r6, #0
 8017992:	d145      	bne.n	8017a20 <_malloc_r+0xdc>
 8017994:	2c00      	cmp	r4, #0
 8017996:	d048      	beq.n	8017a2a <_malloc_r+0xe6>
 8017998:	6823      	ldr	r3, [r4, #0]
 801799a:	4631      	mov	r1, r6
 801799c:	4638      	mov	r0, r7
 801799e:	eb04 0903 	add.w	r9, r4, r3
 80179a2:	f000 fdf7 	bl	8018594 <_sbrk_r>
 80179a6:	4581      	cmp	r9, r0
 80179a8:	d13f      	bne.n	8017a2a <_malloc_r+0xe6>
 80179aa:	6821      	ldr	r1, [r4, #0]
 80179ac:	1a6d      	subs	r5, r5, r1
 80179ae:	4629      	mov	r1, r5
 80179b0:	4638      	mov	r0, r7
 80179b2:	f7ff ffa7 	bl	8017904 <sbrk_aligned>
 80179b6:	3001      	adds	r0, #1
 80179b8:	d037      	beq.n	8017a2a <_malloc_r+0xe6>
 80179ba:	6823      	ldr	r3, [r4, #0]
 80179bc:	442b      	add	r3, r5
 80179be:	6023      	str	r3, [r4, #0]
 80179c0:	f8d8 3000 	ldr.w	r3, [r8]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d038      	beq.n	8017a3a <_malloc_r+0xf6>
 80179c8:	685a      	ldr	r2, [r3, #4]
 80179ca:	42a2      	cmp	r2, r4
 80179cc:	d12b      	bne.n	8017a26 <_malloc_r+0xe2>
 80179ce:	2200      	movs	r2, #0
 80179d0:	605a      	str	r2, [r3, #4]
 80179d2:	e00f      	b.n	80179f4 <_malloc_r+0xb0>
 80179d4:	6822      	ldr	r2, [r4, #0]
 80179d6:	1b52      	subs	r2, r2, r5
 80179d8:	d41f      	bmi.n	8017a1a <_malloc_r+0xd6>
 80179da:	2a0b      	cmp	r2, #11
 80179dc:	d917      	bls.n	8017a0e <_malloc_r+0xca>
 80179de:	1961      	adds	r1, r4, r5
 80179e0:	42a3      	cmp	r3, r4
 80179e2:	6025      	str	r5, [r4, #0]
 80179e4:	bf18      	it	ne
 80179e6:	6059      	strne	r1, [r3, #4]
 80179e8:	6863      	ldr	r3, [r4, #4]
 80179ea:	bf08      	it	eq
 80179ec:	f8c8 1000 	streq.w	r1, [r8]
 80179f0:	5162      	str	r2, [r4, r5]
 80179f2:	604b      	str	r3, [r1, #4]
 80179f4:	4638      	mov	r0, r7
 80179f6:	f104 060b 	add.w	r6, r4, #11
 80179fa:	f000 f829 	bl	8017a50 <__malloc_unlock>
 80179fe:	f026 0607 	bic.w	r6, r6, #7
 8017a02:	1d23      	adds	r3, r4, #4
 8017a04:	1af2      	subs	r2, r6, r3
 8017a06:	d0ae      	beq.n	8017966 <_malloc_r+0x22>
 8017a08:	1b9b      	subs	r3, r3, r6
 8017a0a:	50a3      	str	r3, [r4, r2]
 8017a0c:	e7ab      	b.n	8017966 <_malloc_r+0x22>
 8017a0e:	42a3      	cmp	r3, r4
 8017a10:	6862      	ldr	r2, [r4, #4]
 8017a12:	d1dd      	bne.n	80179d0 <_malloc_r+0x8c>
 8017a14:	f8c8 2000 	str.w	r2, [r8]
 8017a18:	e7ec      	b.n	80179f4 <_malloc_r+0xb0>
 8017a1a:	4623      	mov	r3, r4
 8017a1c:	6864      	ldr	r4, [r4, #4]
 8017a1e:	e7ac      	b.n	801797a <_malloc_r+0x36>
 8017a20:	4634      	mov	r4, r6
 8017a22:	6876      	ldr	r6, [r6, #4]
 8017a24:	e7b4      	b.n	8017990 <_malloc_r+0x4c>
 8017a26:	4613      	mov	r3, r2
 8017a28:	e7cc      	b.n	80179c4 <_malloc_r+0x80>
 8017a2a:	230c      	movs	r3, #12
 8017a2c:	603b      	str	r3, [r7, #0]
 8017a2e:	4638      	mov	r0, r7
 8017a30:	f000 f80e 	bl	8017a50 <__malloc_unlock>
 8017a34:	e797      	b.n	8017966 <_malloc_r+0x22>
 8017a36:	6025      	str	r5, [r4, #0]
 8017a38:	e7dc      	b.n	80179f4 <_malloc_r+0xb0>
 8017a3a:	605b      	str	r3, [r3, #4]
 8017a3c:	deff      	udf	#255	; 0xff
 8017a3e:	bf00      	nop
 8017a40:	20003008 	.word	0x20003008

08017a44 <__malloc_lock>:
 8017a44:	4801      	ldr	r0, [pc, #4]	; (8017a4c <__malloc_lock+0x8>)
 8017a46:	f7ff b88a 	b.w	8016b5e <__retarget_lock_acquire_recursive>
 8017a4a:	bf00      	nop
 8017a4c:	20003004 	.word	0x20003004

08017a50 <__malloc_unlock>:
 8017a50:	4801      	ldr	r0, [pc, #4]	; (8017a58 <__malloc_unlock+0x8>)
 8017a52:	f7ff b885 	b.w	8016b60 <__retarget_lock_release_recursive>
 8017a56:	bf00      	nop
 8017a58:	20003004 	.word	0x20003004

08017a5c <_Balloc>:
 8017a5c:	b570      	push	{r4, r5, r6, lr}
 8017a5e:	69c6      	ldr	r6, [r0, #28]
 8017a60:	4604      	mov	r4, r0
 8017a62:	460d      	mov	r5, r1
 8017a64:	b976      	cbnz	r6, 8017a84 <_Balloc+0x28>
 8017a66:	2010      	movs	r0, #16
 8017a68:	f7ff ff44 	bl	80178f4 <malloc>
 8017a6c:	4602      	mov	r2, r0
 8017a6e:	61e0      	str	r0, [r4, #28]
 8017a70:	b920      	cbnz	r0, 8017a7c <_Balloc+0x20>
 8017a72:	4b18      	ldr	r3, [pc, #96]	; (8017ad4 <_Balloc+0x78>)
 8017a74:	4818      	ldr	r0, [pc, #96]	; (8017ad8 <_Balloc+0x7c>)
 8017a76:	216b      	movs	r1, #107	; 0x6b
 8017a78:	f000 fdaa 	bl	80185d0 <__assert_func>
 8017a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017a80:	6006      	str	r6, [r0, #0]
 8017a82:	60c6      	str	r6, [r0, #12]
 8017a84:	69e6      	ldr	r6, [r4, #28]
 8017a86:	68f3      	ldr	r3, [r6, #12]
 8017a88:	b183      	cbz	r3, 8017aac <_Balloc+0x50>
 8017a8a:	69e3      	ldr	r3, [r4, #28]
 8017a8c:	68db      	ldr	r3, [r3, #12]
 8017a8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017a92:	b9b8      	cbnz	r0, 8017ac4 <_Balloc+0x68>
 8017a94:	2101      	movs	r1, #1
 8017a96:	fa01 f605 	lsl.w	r6, r1, r5
 8017a9a:	1d72      	adds	r2, r6, #5
 8017a9c:	0092      	lsls	r2, r2, #2
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	f000 fdb4 	bl	801860c <_calloc_r>
 8017aa4:	b160      	cbz	r0, 8017ac0 <_Balloc+0x64>
 8017aa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017aaa:	e00e      	b.n	8017aca <_Balloc+0x6e>
 8017aac:	2221      	movs	r2, #33	; 0x21
 8017aae:	2104      	movs	r1, #4
 8017ab0:	4620      	mov	r0, r4
 8017ab2:	f000 fdab 	bl	801860c <_calloc_r>
 8017ab6:	69e3      	ldr	r3, [r4, #28]
 8017ab8:	60f0      	str	r0, [r6, #12]
 8017aba:	68db      	ldr	r3, [r3, #12]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d1e4      	bne.n	8017a8a <_Balloc+0x2e>
 8017ac0:	2000      	movs	r0, #0
 8017ac2:	bd70      	pop	{r4, r5, r6, pc}
 8017ac4:	6802      	ldr	r2, [r0, #0]
 8017ac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017aca:	2300      	movs	r3, #0
 8017acc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017ad0:	e7f7      	b.n	8017ac2 <_Balloc+0x66>
 8017ad2:	bf00      	nop
 8017ad4:	0801b8d1 	.word	0x0801b8d1
 8017ad8:	0801b951 	.word	0x0801b951

08017adc <_Bfree>:
 8017adc:	b570      	push	{r4, r5, r6, lr}
 8017ade:	69c6      	ldr	r6, [r0, #28]
 8017ae0:	4605      	mov	r5, r0
 8017ae2:	460c      	mov	r4, r1
 8017ae4:	b976      	cbnz	r6, 8017b04 <_Bfree+0x28>
 8017ae6:	2010      	movs	r0, #16
 8017ae8:	f7ff ff04 	bl	80178f4 <malloc>
 8017aec:	4602      	mov	r2, r0
 8017aee:	61e8      	str	r0, [r5, #28]
 8017af0:	b920      	cbnz	r0, 8017afc <_Bfree+0x20>
 8017af2:	4b09      	ldr	r3, [pc, #36]	; (8017b18 <_Bfree+0x3c>)
 8017af4:	4809      	ldr	r0, [pc, #36]	; (8017b1c <_Bfree+0x40>)
 8017af6:	218f      	movs	r1, #143	; 0x8f
 8017af8:	f000 fd6a 	bl	80185d0 <__assert_func>
 8017afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017b00:	6006      	str	r6, [r0, #0]
 8017b02:	60c6      	str	r6, [r0, #12]
 8017b04:	b13c      	cbz	r4, 8017b16 <_Bfree+0x3a>
 8017b06:	69eb      	ldr	r3, [r5, #28]
 8017b08:	6862      	ldr	r2, [r4, #4]
 8017b0a:	68db      	ldr	r3, [r3, #12]
 8017b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017b10:	6021      	str	r1, [r4, #0]
 8017b12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017b16:	bd70      	pop	{r4, r5, r6, pc}
 8017b18:	0801b8d1 	.word	0x0801b8d1
 8017b1c:	0801b951 	.word	0x0801b951

08017b20 <__multadd>:
 8017b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b24:	690d      	ldr	r5, [r1, #16]
 8017b26:	4607      	mov	r7, r0
 8017b28:	460c      	mov	r4, r1
 8017b2a:	461e      	mov	r6, r3
 8017b2c:	f101 0c14 	add.w	ip, r1, #20
 8017b30:	2000      	movs	r0, #0
 8017b32:	f8dc 3000 	ldr.w	r3, [ip]
 8017b36:	b299      	uxth	r1, r3
 8017b38:	fb02 6101 	mla	r1, r2, r1, r6
 8017b3c:	0c1e      	lsrs	r6, r3, #16
 8017b3e:	0c0b      	lsrs	r3, r1, #16
 8017b40:	fb02 3306 	mla	r3, r2, r6, r3
 8017b44:	b289      	uxth	r1, r1
 8017b46:	3001      	adds	r0, #1
 8017b48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017b4c:	4285      	cmp	r5, r0
 8017b4e:	f84c 1b04 	str.w	r1, [ip], #4
 8017b52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017b56:	dcec      	bgt.n	8017b32 <__multadd+0x12>
 8017b58:	b30e      	cbz	r6, 8017b9e <__multadd+0x7e>
 8017b5a:	68a3      	ldr	r3, [r4, #8]
 8017b5c:	42ab      	cmp	r3, r5
 8017b5e:	dc19      	bgt.n	8017b94 <__multadd+0x74>
 8017b60:	6861      	ldr	r1, [r4, #4]
 8017b62:	4638      	mov	r0, r7
 8017b64:	3101      	adds	r1, #1
 8017b66:	f7ff ff79 	bl	8017a5c <_Balloc>
 8017b6a:	4680      	mov	r8, r0
 8017b6c:	b928      	cbnz	r0, 8017b7a <__multadd+0x5a>
 8017b6e:	4602      	mov	r2, r0
 8017b70:	4b0c      	ldr	r3, [pc, #48]	; (8017ba4 <__multadd+0x84>)
 8017b72:	480d      	ldr	r0, [pc, #52]	; (8017ba8 <__multadd+0x88>)
 8017b74:	21ba      	movs	r1, #186	; 0xba
 8017b76:	f000 fd2b 	bl	80185d0 <__assert_func>
 8017b7a:	6922      	ldr	r2, [r4, #16]
 8017b7c:	3202      	adds	r2, #2
 8017b7e:	f104 010c 	add.w	r1, r4, #12
 8017b82:	0092      	lsls	r2, r2, #2
 8017b84:	300c      	adds	r0, #12
 8017b86:	f000 fd15 	bl	80185b4 <memcpy>
 8017b8a:	4621      	mov	r1, r4
 8017b8c:	4638      	mov	r0, r7
 8017b8e:	f7ff ffa5 	bl	8017adc <_Bfree>
 8017b92:	4644      	mov	r4, r8
 8017b94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017b98:	3501      	adds	r5, #1
 8017b9a:	615e      	str	r6, [r3, #20]
 8017b9c:	6125      	str	r5, [r4, #16]
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ba4:	0801b940 	.word	0x0801b940
 8017ba8:	0801b951 	.word	0x0801b951

08017bac <__hi0bits>:
 8017bac:	0c03      	lsrs	r3, r0, #16
 8017bae:	041b      	lsls	r3, r3, #16
 8017bb0:	b9d3      	cbnz	r3, 8017be8 <__hi0bits+0x3c>
 8017bb2:	0400      	lsls	r0, r0, #16
 8017bb4:	2310      	movs	r3, #16
 8017bb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017bba:	bf04      	itt	eq
 8017bbc:	0200      	lsleq	r0, r0, #8
 8017bbe:	3308      	addeq	r3, #8
 8017bc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017bc4:	bf04      	itt	eq
 8017bc6:	0100      	lsleq	r0, r0, #4
 8017bc8:	3304      	addeq	r3, #4
 8017bca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017bce:	bf04      	itt	eq
 8017bd0:	0080      	lsleq	r0, r0, #2
 8017bd2:	3302      	addeq	r3, #2
 8017bd4:	2800      	cmp	r0, #0
 8017bd6:	db05      	blt.n	8017be4 <__hi0bits+0x38>
 8017bd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017bdc:	f103 0301 	add.w	r3, r3, #1
 8017be0:	bf08      	it	eq
 8017be2:	2320      	moveq	r3, #32
 8017be4:	4618      	mov	r0, r3
 8017be6:	4770      	bx	lr
 8017be8:	2300      	movs	r3, #0
 8017bea:	e7e4      	b.n	8017bb6 <__hi0bits+0xa>

08017bec <__lo0bits>:
 8017bec:	6803      	ldr	r3, [r0, #0]
 8017bee:	f013 0207 	ands.w	r2, r3, #7
 8017bf2:	d00c      	beq.n	8017c0e <__lo0bits+0x22>
 8017bf4:	07d9      	lsls	r1, r3, #31
 8017bf6:	d422      	bmi.n	8017c3e <__lo0bits+0x52>
 8017bf8:	079a      	lsls	r2, r3, #30
 8017bfa:	bf49      	itett	mi
 8017bfc:	085b      	lsrmi	r3, r3, #1
 8017bfe:	089b      	lsrpl	r3, r3, #2
 8017c00:	6003      	strmi	r3, [r0, #0]
 8017c02:	2201      	movmi	r2, #1
 8017c04:	bf5c      	itt	pl
 8017c06:	6003      	strpl	r3, [r0, #0]
 8017c08:	2202      	movpl	r2, #2
 8017c0a:	4610      	mov	r0, r2
 8017c0c:	4770      	bx	lr
 8017c0e:	b299      	uxth	r1, r3
 8017c10:	b909      	cbnz	r1, 8017c16 <__lo0bits+0x2a>
 8017c12:	0c1b      	lsrs	r3, r3, #16
 8017c14:	2210      	movs	r2, #16
 8017c16:	b2d9      	uxtb	r1, r3
 8017c18:	b909      	cbnz	r1, 8017c1e <__lo0bits+0x32>
 8017c1a:	3208      	adds	r2, #8
 8017c1c:	0a1b      	lsrs	r3, r3, #8
 8017c1e:	0719      	lsls	r1, r3, #28
 8017c20:	bf04      	itt	eq
 8017c22:	091b      	lsreq	r3, r3, #4
 8017c24:	3204      	addeq	r2, #4
 8017c26:	0799      	lsls	r1, r3, #30
 8017c28:	bf04      	itt	eq
 8017c2a:	089b      	lsreq	r3, r3, #2
 8017c2c:	3202      	addeq	r2, #2
 8017c2e:	07d9      	lsls	r1, r3, #31
 8017c30:	d403      	bmi.n	8017c3a <__lo0bits+0x4e>
 8017c32:	085b      	lsrs	r3, r3, #1
 8017c34:	f102 0201 	add.w	r2, r2, #1
 8017c38:	d003      	beq.n	8017c42 <__lo0bits+0x56>
 8017c3a:	6003      	str	r3, [r0, #0]
 8017c3c:	e7e5      	b.n	8017c0a <__lo0bits+0x1e>
 8017c3e:	2200      	movs	r2, #0
 8017c40:	e7e3      	b.n	8017c0a <__lo0bits+0x1e>
 8017c42:	2220      	movs	r2, #32
 8017c44:	e7e1      	b.n	8017c0a <__lo0bits+0x1e>
	...

08017c48 <__i2b>:
 8017c48:	b510      	push	{r4, lr}
 8017c4a:	460c      	mov	r4, r1
 8017c4c:	2101      	movs	r1, #1
 8017c4e:	f7ff ff05 	bl	8017a5c <_Balloc>
 8017c52:	4602      	mov	r2, r0
 8017c54:	b928      	cbnz	r0, 8017c62 <__i2b+0x1a>
 8017c56:	4b05      	ldr	r3, [pc, #20]	; (8017c6c <__i2b+0x24>)
 8017c58:	4805      	ldr	r0, [pc, #20]	; (8017c70 <__i2b+0x28>)
 8017c5a:	f240 1145 	movw	r1, #325	; 0x145
 8017c5e:	f000 fcb7 	bl	80185d0 <__assert_func>
 8017c62:	2301      	movs	r3, #1
 8017c64:	6144      	str	r4, [r0, #20]
 8017c66:	6103      	str	r3, [r0, #16]
 8017c68:	bd10      	pop	{r4, pc}
 8017c6a:	bf00      	nop
 8017c6c:	0801b940 	.word	0x0801b940
 8017c70:	0801b951 	.word	0x0801b951

08017c74 <__multiply>:
 8017c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c78:	4691      	mov	r9, r2
 8017c7a:	690a      	ldr	r2, [r1, #16]
 8017c7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017c80:	429a      	cmp	r2, r3
 8017c82:	bfb8      	it	lt
 8017c84:	460b      	movlt	r3, r1
 8017c86:	460c      	mov	r4, r1
 8017c88:	bfbc      	itt	lt
 8017c8a:	464c      	movlt	r4, r9
 8017c8c:	4699      	movlt	r9, r3
 8017c8e:	6927      	ldr	r7, [r4, #16]
 8017c90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017c94:	68a3      	ldr	r3, [r4, #8]
 8017c96:	6861      	ldr	r1, [r4, #4]
 8017c98:	eb07 060a 	add.w	r6, r7, sl
 8017c9c:	42b3      	cmp	r3, r6
 8017c9e:	b085      	sub	sp, #20
 8017ca0:	bfb8      	it	lt
 8017ca2:	3101      	addlt	r1, #1
 8017ca4:	f7ff feda 	bl	8017a5c <_Balloc>
 8017ca8:	b930      	cbnz	r0, 8017cb8 <__multiply+0x44>
 8017caa:	4602      	mov	r2, r0
 8017cac:	4b44      	ldr	r3, [pc, #272]	; (8017dc0 <__multiply+0x14c>)
 8017cae:	4845      	ldr	r0, [pc, #276]	; (8017dc4 <__multiply+0x150>)
 8017cb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017cb4:	f000 fc8c 	bl	80185d0 <__assert_func>
 8017cb8:	f100 0514 	add.w	r5, r0, #20
 8017cbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017cc0:	462b      	mov	r3, r5
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	4543      	cmp	r3, r8
 8017cc6:	d321      	bcc.n	8017d0c <__multiply+0x98>
 8017cc8:	f104 0314 	add.w	r3, r4, #20
 8017ccc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017cd0:	f109 0314 	add.w	r3, r9, #20
 8017cd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017cd8:	9202      	str	r2, [sp, #8]
 8017cda:	1b3a      	subs	r2, r7, r4
 8017cdc:	3a15      	subs	r2, #21
 8017cde:	f022 0203 	bic.w	r2, r2, #3
 8017ce2:	3204      	adds	r2, #4
 8017ce4:	f104 0115 	add.w	r1, r4, #21
 8017ce8:	428f      	cmp	r7, r1
 8017cea:	bf38      	it	cc
 8017cec:	2204      	movcc	r2, #4
 8017cee:	9201      	str	r2, [sp, #4]
 8017cf0:	9a02      	ldr	r2, [sp, #8]
 8017cf2:	9303      	str	r3, [sp, #12]
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	d80c      	bhi.n	8017d12 <__multiply+0x9e>
 8017cf8:	2e00      	cmp	r6, #0
 8017cfa:	dd03      	ble.n	8017d04 <__multiply+0x90>
 8017cfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d05b      	beq.n	8017dbc <__multiply+0x148>
 8017d04:	6106      	str	r6, [r0, #16]
 8017d06:	b005      	add	sp, #20
 8017d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d0c:	f843 2b04 	str.w	r2, [r3], #4
 8017d10:	e7d8      	b.n	8017cc4 <__multiply+0x50>
 8017d12:	f8b3 a000 	ldrh.w	sl, [r3]
 8017d16:	f1ba 0f00 	cmp.w	sl, #0
 8017d1a:	d024      	beq.n	8017d66 <__multiply+0xf2>
 8017d1c:	f104 0e14 	add.w	lr, r4, #20
 8017d20:	46a9      	mov	r9, r5
 8017d22:	f04f 0c00 	mov.w	ip, #0
 8017d26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017d2a:	f8d9 1000 	ldr.w	r1, [r9]
 8017d2e:	fa1f fb82 	uxth.w	fp, r2
 8017d32:	b289      	uxth	r1, r1
 8017d34:	fb0a 110b 	mla	r1, sl, fp, r1
 8017d38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8017d40:	4461      	add	r1, ip
 8017d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017d46:	fb0a c20b 	mla	r2, sl, fp, ip
 8017d4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017d4e:	b289      	uxth	r1, r1
 8017d50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017d54:	4577      	cmp	r7, lr
 8017d56:	f849 1b04 	str.w	r1, [r9], #4
 8017d5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017d5e:	d8e2      	bhi.n	8017d26 <__multiply+0xb2>
 8017d60:	9a01      	ldr	r2, [sp, #4]
 8017d62:	f845 c002 	str.w	ip, [r5, r2]
 8017d66:	9a03      	ldr	r2, [sp, #12]
 8017d68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017d6c:	3304      	adds	r3, #4
 8017d6e:	f1b9 0f00 	cmp.w	r9, #0
 8017d72:	d021      	beq.n	8017db8 <__multiply+0x144>
 8017d74:	6829      	ldr	r1, [r5, #0]
 8017d76:	f104 0c14 	add.w	ip, r4, #20
 8017d7a:	46ae      	mov	lr, r5
 8017d7c:	f04f 0a00 	mov.w	sl, #0
 8017d80:	f8bc b000 	ldrh.w	fp, [ip]
 8017d84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017d88:	fb09 220b 	mla	r2, r9, fp, r2
 8017d8c:	4452      	add	r2, sl
 8017d8e:	b289      	uxth	r1, r1
 8017d90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017d94:	f84e 1b04 	str.w	r1, [lr], #4
 8017d98:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017d9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017da0:	f8be 1000 	ldrh.w	r1, [lr]
 8017da4:	fb09 110a 	mla	r1, r9, sl, r1
 8017da8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017dac:	4567      	cmp	r7, ip
 8017dae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017db2:	d8e5      	bhi.n	8017d80 <__multiply+0x10c>
 8017db4:	9a01      	ldr	r2, [sp, #4]
 8017db6:	50a9      	str	r1, [r5, r2]
 8017db8:	3504      	adds	r5, #4
 8017dba:	e799      	b.n	8017cf0 <__multiply+0x7c>
 8017dbc:	3e01      	subs	r6, #1
 8017dbe:	e79b      	b.n	8017cf8 <__multiply+0x84>
 8017dc0:	0801b940 	.word	0x0801b940
 8017dc4:	0801b951 	.word	0x0801b951

08017dc8 <__pow5mult>:
 8017dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017dcc:	4615      	mov	r5, r2
 8017dce:	f012 0203 	ands.w	r2, r2, #3
 8017dd2:	4606      	mov	r6, r0
 8017dd4:	460f      	mov	r7, r1
 8017dd6:	d007      	beq.n	8017de8 <__pow5mult+0x20>
 8017dd8:	4c25      	ldr	r4, [pc, #148]	; (8017e70 <__pow5mult+0xa8>)
 8017dda:	3a01      	subs	r2, #1
 8017ddc:	2300      	movs	r3, #0
 8017dde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017de2:	f7ff fe9d 	bl	8017b20 <__multadd>
 8017de6:	4607      	mov	r7, r0
 8017de8:	10ad      	asrs	r5, r5, #2
 8017dea:	d03d      	beq.n	8017e68 <__pow5mult+0xa0>
 8017dec:	69f4      	ldr	r4, [r6, #28]
 8017dee:	b97c      	cbnz	r4, 8017e10 <__pow5mult+0x48>
 8017df0:	2010      	movs	r0, #16
 8017df2:	f7ff fd7f 	bl	80178f4 <malloc>
 8017df6:	4602      	mov	r2, r0
 8017df8:	61f0      	str	r0, [r6, #28]
 8017dfa:	b928      	cbnz	r0, 8017e08 <__pow5mult+0x40>
 8017dfc:	4b1d      	ldr	r3, [pc, #116]	; (8017e74 <__pow5mult+0xac>)
 8017dfe:	481e      	ldr	r0, [pc, #120]	; (8017e78 <__pow5mult+0xb0>)
 8017e00:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017e04:	f000 fbe4 	bl	80185d0 <__assert_func>
 8017e08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017e0c:	6004      	str	r4, [r0, #0]
 8017e0e:	60c4      	str	r4, [r0, #12]
 8017e10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017e14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017e18:	b94c      	cbnz	r4, 8017e2e <__pow5mult+0x66>
 8017e1a:	f240 2171 	movw	r1, #625	; 0x271
 8017e1e:	4630      	mov	r0, r6
 8017e20:	f7ff ff12 	bl	8017c48 <__i2b>
 8017e24:	2300      	movs	r3, #0
 8017e26:	f8c8 0008 	str.w	r0, [r8, #8]
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	6003      	str	r3, [r0, #0]
 8017e2e:	f04f 0900 	mov.w	r9, #0
 8017e32:	07eb      	lsls	r3, r5, #31
 8017e34:	d50a      	bpl.n	8017e4c <__pow5mult+0x84>
 8017e36:	4639      	mov	r1, r7
 8017e38:	4622      	mov	r2, r4
 8017e3a:	4630      	mov	r0, r6
 8017e3c:	f7ff ff1a 	bl	8017c74 <__multiply>
 8017e40:	4639      	mov	r1, r7
 8017e42:	4680      	mov	r8, r0
 8017e44:	4630      	mov	r0, r6
 8017e46:	f7ff fe49 	bl	8017adc <_Bfree>
 8017e4a:	4647      	mov	r7, r8
 8017e4c:	106d      	asrs	r5, r5, #1
 8017e4e:	d00b      	beq.n	8017e68 <__pow5mult+0xa0>
 8017e50:	6820      	ldr	r0, [r4, #0]
 8017e52:	b938      	cbnz	r0, 8017e64 <__pow5mult+0x9c>
 8017e54:	4622      	mov	r2, r4
 8017e56:	4621      	mov	r1, r4
 8017e58:	4630      	mov	r0, r6
 8017e5a:	f7ff ff0b 	bl	8017c74 <__multiply>
 8017e5e:	6020      	str	r0, [r4, #0]
 8017e60:	f8c0 9000 	str.w	r9, [r0]
 8017e64:	4604      	mov	r4, r0
 8017e66:	e7e4      	b.n	8017e32 <__pow5mult+0x6a>
 8017e68:	4638      	mov	r0, r7
 8017e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e6e:	bf00      	nop
 8017e70:	0801baa0 	.word	0x0801baa0
 8017e74:	0801b8d1 	.word	0x0801b8d1
 8017e78:	0801b951 	.word	0x0801b951

08017e7c <__lshift>:
 8017e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e80:	460c      	mov	r4, r1
 8017e82:	6849      	ldr	r1, [r1, #4]
 8017e84:	6923      	ldr	r3, [r4, #16]
 8017e86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017e8a:	68a3      	ldr	r3, [r4, #8]
 8017e8c:	4607      	mov	r7, r0
 8017e8e:	4691      	mov	r9, r2
 8017e90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017e94:	f108 0601 	add.w	r6, r8, #1
 8017e98:	42b3      	cmp	r3, r6
 8017e9a:	db0b      	blt.n	8017eb4 <__lshift+0x38>
 8017e9c:	4638      	mov	r0, r7
 8017e9e:	f7ff fddd 	bl	8017a5c <_Balloc>
 8017ea2:	4605      	mov	r5, r0
 8017ea4:	b948      	cbnz	r0, 8017eba <__lshift+0x3e>
 8017ea6:	4602      	mov	r2, r0
 8017ea8:	4b28      	ldr	r3, [pc, #160]	; (8017f4c <__lshift+0xd0>)
 8017eaa:	4829      	ldr	r0, [pc, #164]	; (8017f50 <__lshift+0xd4>)
 8017eac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017eb0:	f000 fb8e 	bl	80185d0 <__assert_func>
 8017eb4:	3101      	adds	r1, #1
 8017eb6:	005b      	lsls	r3, r3, #1
 8017eb8:	e7ee      	b.n	8017e98 <__lshift+0x1c>
 8017eba:	2300      	movs	r3, #0
 8017ebc:	f100 0114 	add.w	r1, r0, #20
 8017ec0:	f100 0210 	add.w	r2, r0, #16
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	4553      	cmp	r3, sl
 8017ec8:	db33      	blt.n	8017f32 <__lshift+0xb6>
 8017eca:	6920      	ldr	r0, [r4, #16]
 8017ecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017ed0:	f104 0314 	add.w	r3, r4, #20
 8017ed4:	f019 091f 	ands.w	r9, r9, #31
 8017ed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017edc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017ee0:	d02b      	beq.n	8017f3a <__lshift+0xbe>
 8017ee2:	f1c9 0e20 	rsb	lr, r9, #32
 8017ee6:	468a      	mov	sl, r1
 8017ee8:	2200      	movs	r2, #0
 8017eea:	6818      	ldr	r0, [r3, #0]
 8017eec:	fa00 f009 	lsl.w	r0, r0, r9
 8017ef0:	4310      	orrs	r0, r2
 8017ef2:	f84a 0b04 	str.w	r0, [sl], #4
 8017ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017efa:	459c      	cmp	ip, r3
 8017efc:	fa22 f20e 	lsr.w	r2, r2, lr
 8017f00:	d8f3      	bhi.n	8017eea <__lshift+0x6e>
 8017f02:	ebac 0304 	sub.w	r3, ip, r4
 8017f06:	3b15      	subs	r3, #21
 8017f08:	f023 0303 	bic.w	r3, r3, #3
 8017f0c:	3304      	adds	r3, #4
 8017f0e:	f104 0015 	add.w	r0, r4, #21
 8017f12:	4584      	cmp	ip, r0
 8017f14:	bf38      	it	cc
 8017f16:	2304      	movcc	r3, #4
 8017f18:	50ca      	str	r2, [r1, r3]
 8017f1a:	b10a      	cbz	r2, 8017f20 <__lshift+0xa4>
 8017f1c:	f108 0602 	add.w	r6, r8, #2
 8017f20:	3e01      	subs	r6, #1
 8017f22:	4638      	mov	r0, r7
 8017f24:	612e      	str	r6, [r5, #16]
 8017f26:	4621      	mov	r1, r4
 8017f28:	f7ff fdd8 	bl	8017adc <_Bfree>
 8017f2c:	4628      	mov	r0, r5
 8017f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f32:	f842 0f04 	str.w	r0, [r2, #4]!
 8017f36:	3301      	adds	r3, #1
 8017f38:	e7c5      	b.n	8017ec6 <__lshift+0x4a>
 8017f3a:	3904      	subs	r1, #4
 8017f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f40:	f841 2f04 	str.w	r2, [r1, #4]!
 8017f44:	459c      	cmp	ip, r3
 8017f46:	d8f9      	bhi.n	8017f3c <__lshift+0xc0>
 8017f48:	e7ea      	b.n	8017f20 <__lshift+0xa4>
 8017f4a:	bf00      	nop
 8017f4c:	0801b940 	.word	0x0801b940
 8017f50:	0801b951 	.word	0x0801b951

08017f54 <__mcmp>:
 8017f54:	b530      	push	{r4, r5, lr}
 8017f56:	6902      	ldr	r2, [r0, #16]
 8017f58:	690c      	ldr	r4, [r1, #16]
 8017f5a:	1b12      	subs	r2, r2, r4
 8017f5c:	d10e      	bne.n	8017f7c <__mcmp+0x28>
 8017f5e:	f100 0314 	add.w	r3, r0, #20
 8017f62:	3114      	adds	r1, #20
 8017f64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017f68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017f6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017f70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017f74:	42a5      	cmp	r5, r4
 8017f76:	d003      	beq.n	8017f80 <__mcmp+0x2c>
 8017f78:	d305      	bcc.n	8017f86 <__mcmp+0x32>
 8017f7a:	2201      	movs	r2, #1
 8017f7c:	4610      	mov	r0, r2
 8017f7e:	bd30      	pop	{r4, r5, pc}
 8017f80:	4283      	cmp	r3, r0
 8017f82:	d3f3      	bcc.n	8017f6c <__mcmp+0x18>
 8017f84:	e7fa      	b.n	8017f7c <__mcmp+0x28>
 8017f86:	f04f 32ff 	mov.w	r2, #4294967295
 8017f8a:	e7f7      	b.n	8017f7c <__mcmp+0x28>

08017f8c <__mdiff>:
 8017f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f90:	460c      	mov	r4, r1
 8017f92:	4606      	mov	r6, r0
 8017f94:	4611      	mov	r1, r2
 8017f96:	4620      	mov	r0, r4
 8017f98:	4690      	mov	r8, r2
 8017f9a:	f7ff ffdb 	bl	8017f54 <__mcmp>
 8017f9e:	1e05      	subs	r5, r0, #0
 8017fa0:	d110      	bne.n	8017fc4 <__mdiff+0x38>
 8017fa2:	4629      	mov	r1, r5
 8017fa4:	4630      	mov	r0, r6
 8017fa6:	f7ff fd59 	bl	8017a5c <_Balloc>
 8017faa:	b930      	cbnz	r0, 8017fba <__mdiff+0x2e>
 8017fac:	4b3a      	ldr	r3, [pc, #232]	; (8018098 <__mdiff+0x10c>)
 8017fae:	4602      	mov	r2, r0
 8017fb0:	f240 2137 	movw	r1, #567	; 0x237
 8017fb4:	4839      	ldr	r0, [pc, #228]	; (801809c <__mdiff+0x110>)
 8017fb6:	f000 fb0b 	bl	80185d0 <__assert_func>
 8017fba:	2301      	movs	r3, #1
 8017fbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fc4:	bfa4      	itt	ge
 8017fc6:	4643      	movge	r3, r8
 8017fc8:	46a0      	movge	r8, r4
 8017fca:	4630      	mov	r0, r6
 8017fcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017fd0:	bfa6      	itte	ge
 8017fd2:	461c      	movge	r4, r3
 8017fd4:	2500      	movge	r5, #0
 8017fd6:	2501      	movlt	r5, #1
 8017fd8:	f7ff fd40 	bl	8017a5c <_Balloc>
 8017fdc:	b920      	cbnz	r0, 8017fe8 <__mdiff+0x5c>
 8017fde:	4b2e      	ldr	r3, [pc, #184]	; (8018098 <__mdiff+0x10c>)
 8017fe0:	4602      	mov	r2, r0
 8017fe2:	f240 2145 	movw	r1, #581	; 0x245
 8017fe6:	e7e5      	b.n	8017fb4 <__mdiff+0x28>
 8017fe8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017fec:	6926      	ldr	r6, [r4, #16]
 8017fee:	60c5      	str	r5, [r0, #12]
 8017ff0:	f104 0914 	add.w	r9, r4, #20
 8017ff4:	f108 0514 	add.w	r5, r8, #20
 8017ff8:	f100 0e14 	add.w	lr, r0, #20
 8017ffc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018000:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018004:	f108 0210 	add.w	r2, r8, #16
 8018008:	46f2      	mov	sl, lr
 801800a:	2100      	movs	r1, #0
 801800c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018010:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018014:	fa11 f88b 	uxtah	r8, r1, fp
 8018018:	b299      	uxth	r1, r3
 801801a:	0c1b      	lsrs	r3, r3, #16
 801801c:	eba8 0801 	sub.w	r8, r8, r1
 8018020:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018024:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018028:	fa1f f888 	uxth.w	r8, r8
 801802c:	1419      	asrs	r1, r3, #16
 801802e:	454e      	cmp	r6, r9
 8018030:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018034:	f84a 3b04 	str.w	r3, [sl], #4
 8018038:	d8e8      	bhi.n	801800c <__mdiff+0x80>
 801803a:	1b33      	subs	r3, r6, r4
 801803c:	3b15      	subs	r3, #21
 801803e:	f023 0303 	bic.w	r3, r3, #3
 8018042:	3304      	adds	r3, #4
 8018044:	3415      	adds	r4, #21
 8018046:	42a6      	cmp	r6, r4
 8018048:	bf38      	it	cc
 801804a:	2304      	movcc	r3, #4
 801804c:	441d      	add	r5, r3
 801804e:	4473      	add	r3, lr
 8018050:	469e      	mov	lr, r3
 8018052:	462e      	mov	r6, r5
 8018054:	4566      	cmp	r6, ip
 8018056:	d30e      	bcc.n	8018076 <__mdiff+0xea>
 8018058:	f10c 0203 	add.w	r2, ip, #3
 801805c:	1b52      	subs	r2, r2, r5
 801805e:	f022 0203 	bic.w	r2, r2, #3
 8018062:	3d03      	subs	r5, #3
 8018064:	45ac      	cmp	ip, r5
 8018066:	bf38      	it	cc
 8018068:	2200      	movcc	r2, #0
 801806a:	4413      	add	r3, r2
 801806c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018070:	b17a      	cbz	r2, 8018092 <__mdiff+0x106>
 8018072:	6107      	str	r7, [r0, #16]
 8018074:	e7a4      	b.n	8017fc0 <__mdiff+0x34>
 8018076:	f856 8b04 	ldr.w	r8, [r6], #4
 801807a:	fa11 f288 	uxtah	r2, r1, r8
 801807e:	1414      	asrs	r4, r2, #16
 8018080:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018084:	b292      	uxth	r2, r2
 8018086:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801808a:	f84e 2b04 	str.w	r2, [lr], #4
 801808e:	1421      	asrs	r1, r4, #16
 8018090:	e7e0      	b.n	8018054 <__mdiff+0xc8>
 8018092:	3f01      	subs	r7, #1
 8018094:	e7ea      	b.n	801806c <__mdiff+0xe0>
 8018096:	bf00      	nop
 8018098:	0801b940 	.word	0x0801b940
 801809c:	0801b951 	.word	0x0801b951

080180a0 <__d2b>:
 80180a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80180a4:	460f      	mov	r7, r1
 80180a6:	2101      	movs	r1, #1
 80180a8:	ec59 8b10 	vmov	r8, r9, d0
 80180ac:	4616      	mov	r6, r2
 80180ae:	f7ff fcd5 	bl	8017a5c <_Balloc>
 80180b2:	4604      	mov	r4, r0
 80180b4:	b930      	cbnz	r0, 80180c4 <__d2b+0x24>
 80180b6:	4602      	mov	r2, r0
 80180b8:	4b24      	ldr	r3, [pc, #144]	; (801814c <__d2b+0xac>)
 80180ba:	4825      	ldr	r0, [pc, #148]	; (8018150 <__d2b+0xb0>)
 80180bc:	f240 310f 	movw	r1, #783	; 0x30f
 80180c0:	f000 fa86 	bl	80185d0 <__assert_func>
 80180c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80180c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80180cc:	bb2d      	cbnz	r5, 801811a <__d2b+0x7a>
 80180ce:	9301      	str	r3, [sp, #4]
 80180d0:	f1b8 0300 	subs.w	r3, r8, #0
 80180d4:	d026      	beq.n	8018124 <__d2b+0x84>
 80180d6:	4668      	mov	r0, sp
 80180d8:	9300      	str	r3, [sp, #0]
 80180da:	f7ff fd87 	bl	8017bec <__lo0bits>
 80180de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80180e2:	b1e8      	cbz	r0, 8018120 <__d2b+0x80>
 80180e4:	f1c0 0320 	rsb	r3, r0, #32
 80180e8:	fa02 f303 	lsl.w	r3, r2, r3
 80180ec:	430b      	orrs	r3, r1
 80180ee:	40c2      	lsrs	r2, r0
 80180f0:	6163      	str	r3, [r4, #20]
 80180f2:	9201      	str	r2, [sp, #4]
 80180f4:	9b01      	ldr	r3, [sp, #4]
 80180f6:	61a3      	str	r3, [r4, #24]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	bf14      	ite	ne
 80180fc:	2202      	movne	r2, #2
 80180fe:	2201      	moveq	r2, #1
 8018100:	6122      	str	r2, [r4, #16]
 8018102:	b1bd      	cbz	r5, 8018134 <__d2b+0x94>
 8018104:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018108:	4405      	add	r5, r0
 801810a:	603d      	str	r5, [r7, #0]
 801810c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018110:	6030      	str	r0, [r6, #0]
 8018112:	4620      	mov	r0, r4
 8018114:	b003      	add	sp, #12
 8018116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801811a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801811e:	e7d6      	b.n	80180ce <__d2b+0x2e>
 8018120:	6161      	str	r1, [r4, #20]
 8018122:	e7e7      	b.n	80180f4 <__d2b+0x54>
 8018124:	a801      	add	r0, sp, #4
 8018126:	f7ff fd61 	bl	8017bec <__lo0bits>
 801812a:	9b01      	ldr	r3, [sp, #4]
 801812c:	6163      	str	r3, [r4, #20]
 801812e:	3020      	adds	r0, #32
 8018130:	2201      	movs	r2, #1
 8018132:	e7e5      	b.n	8018100 <__d2b+0x60>
 8018134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801813c:	6038      	str	r0, [r7, #0]
 801813e:	6918      	ldr	r0, [r3, #16]
 8018140:	f7ff fd34 	bl	8017bac <__hi0bits>
 8018144:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018148:	e7e2      	b.n	8018110 <__d2b+0x70>
 801814a:	bf00      	nop
 801814c:	0801b940 	.word	0x0801b940
 8018150:	0801b951 	.word	0x0801b951

08018154 <__ssputs_r>:
 8018154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018158:	688e      	ldr	r6, [r1, #8]
 801815a:	461f      	mov	r7, r3
 801815c:	42be      	cmp	r6, r7
 801815e:	680b      	ldr	r3, [r1, #0]
 8018160:	4682      	mov	sl, r0
 8018162:	460c      	mov	r4, r1
 8018164:	4690      	mov	r8, r2
 8018166:	d82c      	bhi.n	80181c2 <__ssputs_r+0x6e>
 8018168:	898a      	ldrh	r2, [r1, #12]
 801816a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801816e:	d026      	beq.n	80181be <__ssputs_r+0x6a>
 8018170:	6965      	ldr	r5, [r4, #20]
 8018172:	6909      	ldr	r1, [r1, #16]
 8018174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018178:	eba3 0901 	sub.w	r9, r3, r1
 801817c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018180:	1c7b      	adds	r3, r7, #1
 8018182:	444b      	add	r3, r9
 8018184:	106d      	asrs	r5, r5, #1
 8018186:	429d      	cmp	r5, r3
 8018188:	bf38      	it	cc
 801818a:	461d      	movcc	r5, r3
 801818c:	0553      	lsls	r3, r2, #21
 801818e:	d527      	bpl.n	80181e0 <__ssputs_r+0x8c>
 8018190:	4629      	mov	r1, r5
 8018192:	f7ff fbd7 	bl	8017944 <_malloc_r>
 8018196:	4606      	mov	r6, r0
 8018198:	b360      	cbz	r0, 80181f4 <__ssputs_r+0xa0>
 801819a:	6921      	ldr	r1, [r4, #16]
 801819c:	464a      	mov	r2, r9
 801819e:	f000 fa09 	bl	80185b4 <memcpy>
 80181a2:	89a3      	ldrh	r3, [r4, #12]
 80181a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80181a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80181ac:	81a3      	strh	r3, [r4, #12]
 80181ae:	6126      	str	r6, [r4, #16]
 80181b0:	6165      	str	r5, [r4, #20]
 80181b2:	444e      	add	r6, r9
 80181b4:	eba5 0509 	sub.w	r5, r5, r9
 80181b8:	6026      	str	r6, [r4, #0]
 80181ba:	60a5      	str	r5, [r4, #8]
 80181bc:	463e      	mov	r6, r7
 80181be:	42be      	cmp	r6, r7
 80181c0:	d900      	bls.n	80181c4 <__ssputs_r+0x70>
 80181c2:	463e      	mov	r6, r7
 80181c4:	6820      	ldr	r0, [r4, #0]
 80181c6:	4632      	mov	r2, r6
 80181c8:	4641      	mov	r1, r8
 80181ca:	f000 f9c9 	bl	8018560 <memmove>
 80181ce:	68a3      	ldr	r3, [r4, #8]
 80181d0:	1b9b      	subs	r3, r3, r6
 80181d2:	60a3      	str	r3, [r4, #8]
 80181d4:	6823      	ldr	r3, [r4, #0]
 80181d6:	4433      	add	r3, r6
 80181d8:	6023      	str	r3, [r4, #0]
 80181da:	2000      	movs	r0, #0
 80181dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181e0:	462a      	mov	r2, r5
 80181e2:	f000 fa3b 	bl	801865c <_realloc_r>
 80181e6:	4606      	mov	r6, r0
 80181e8:	2800      	cmp	r0, #0
 80181ea:	d1e0      	bne.n	80181ae <__ssputs_r+0x5a>
 80181ec:	6921      	ldr	r1, [r4, #16]
 80181ee:	4650      	mov	r0, sl
 80181f0:	f7ff fb34 	bl	801785c <_free_r>
 80181f4:	230c      	movs	r3, #12
 80181f6:	f8ca 3000 	str.w	r3, [sl]
 80181fa:	89a3      	ldrh	r3, [r4, #12]
 80181fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018200:	81a3      	strh	r3, [r4, #12]
 8018202:	f04f 30ff 	mov.w	r0, #4294967295
 8018206:	e7e9      	b.n	80181dc <__ssputs_r+0x88>

08018208 <_svfiprintf_r>:
 8018208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801820c:	4698      	mov	r8, r3
 801820e:	898b      	ldrh	r3, [r1, #12]
 8018210:	061b      	lsls	r3, r3, #24
 8018212:	b09d      	sub	sp, #116	; 0x74
 8018214:	4607      	mov	r7, r0
 8018216:	460d      	mov	r5, r1
 8018218:	4614      	mov	r4, r2
 801821a:	d50e      	bpl.n	801823a <_svfiprintf_r+0x32>
 801821c:	690b      	ldr	r3, [r1, #16]
 801821e:	b963      	cbnz	r3, 801823a <_svfiprintf_r+0x32>
 8018220:	2140      	movs	r1, #64	; 0x40
 8018222:	f7ff fb8f 	bl	8017944 <_malloc_r>
 8018226:	6028      	str	r0, [r5, #0]
 8018228:	6128      	str	r0, [r5, #16]
 801822a:	b920      	cbnz	r0, 8018236 <_svfiprintf_r+0x2e>
 801822c:	230c      	movs	r3, #12
 801822e:	603b      	str	r3, [r7, #0]
 8018230:	f04f 30ff 	mov.w	r0, #4294967295
 8018234:	e0d0      	b.n	80183d8 <_svfiprintf_r+0x1d0>
 8018236:	2340      	movs	r3, #64	; 0x40
 8018238:	616b      	str	r3, [r5, #20]
 801823a:	2300      	movs	r3, #0
 801823c:	9309      	str	r3, [sp, #36]	; 0x24
 801823e:	2320      	movs	r3, #32
 8018240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018244:	f8cd 800c 	str.w	r8, [sp, #12]
 8018248:	2330      	movs	r3, #48	; 0x30
 801824a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80183f0 <_svfiprintf_r+0x1e8>
 801824e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018252:	f04f 0901 	mov.w	r9, #1
 8018256:	4623      	mov	r3, r4
 8018258:	469a      	mov	sl, r3
 801825a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801825e:	b10a      	cbz	r2, 8018264 <_svfiprintf_r+0x5c>
 8018260:	2a25      	cmp	r2, #37	; 0x25
 8018262:	d1f9      	bne.n	8018258 <_svfiprintf_r+0x50>
 8018264:	ebba 0b04 	subs.w	fp, sl, r4
 8018268:	d00b      	beq.n	8018282 <_svfiprintf_r+0x7a>
 801826a:	465b      	mov	r3, fp
 801826c:	4622      	mov	r2, r4
 801826e:	4629      	mov	r1, r5
 8018270:	4638      	mov	r0, r7
 8018272:	f7ff ff6f 	bl	8018154 <__ssputs_r>
 8018276:	3001      	adds	r0, #1
 8018278:	f000 80a9 	beq.w	80183ce <_svfiprintf_r+0x1c6>
 801827c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801827e:	445a      	add	r2, fp
 8018280:	9209      	str	r2, [sp, #36]	; 0x24
 8018282:	f89a 3000 	ldrb.w	r3, [sl]
 8018286:	2b00      	cmp	r3, #0
 8018288:	f000 80a1 	beq.w	80183ce <_svfiprintf_r+0x1c6>
 801828c:	2300      	movs	r3, #0
 801828e:	f04f 32ff 	mov.w	r2, #4294967295
 8018292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018296:	f10a 0a01 	add.w	sl, sl, #1
 801829a:	9304      	str	r3, [sp, #16]
 801829c:	9307      	str	r3, [sp, #28]
 801829e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80182a2:	931a      	str	r3, [sp, #104]	; 0x68
 80182a4:	4654      	mov	r4, sl
 80182a6:	2205      	movs	r2, #5
 80182a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182ac:	4850      	ldr	r0, [pc, #320]	; (80183f0 <_svfiprintf_r+0x1e8>)
 80182ae:	f7e7 ffb7 	bl	8000220 <memchr>
 80182b2:	9a04      	ldr	r2, [sp, #16]
 80182b4:	b9d8      	cbnz	r0, 80182ee <_svfiprintf_r+0xe6>
 80182b6:	06d0      	lsls	r0, r2, #27
 80182b8:	bf44      	itt	mi
 80182ba:	2320      	movmi	r3, #32
 80182bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80182c0:	0711      	lsls	r1, r2, #28
 80182c2:	bf44      	itt	mi
 80182c4:	232b      	movmi	r3, #43	; 0x2b
 80182c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80182ca:	f89a 3000 	ldrb.w	r3, [sl]
 80182ce:	2b2a      	cmp	r3, #42	; 0x2a
 80182d0:	d015      	beq.n	80182fe <_svfiprintf_r+0xf6>
 80182d2:	9a07      	ldr	r2, [sp, #28]
 80182d4:	4654      	mov	r4, sl
 80182d6:	2000      	movs	r0, #0
 80182d8:	f04f 0c0a 	mov.w	ip, #10
 80182dc:	4621      	mov	r1, r4
 80182de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182e2:	3b30      	subs	r3, #48	; 0x30
 80182e4:	2b09      	cmp	r3, #9
 80182e6:	d94d      	bls.n	8018384 <_svfiprintf_r+0x17c>
 80182e8:	b1b0      	cbz	r0, 8018318 <_svfiprintf_r+0x110>
 80182ea:	9207      	str	r2, [sp, #28]
 80182ec:	e014      	b.n	8018318 <_svfiprintf_r+0x110>
 80182ee:	eba0 0308 	sub.w	r3, r0, r8
 80182f2:	fa09 f303 	lsl.w	r3, r9, r3
 80182f6:	4313      	orrs	r3, r2
 80182f8:	9304      	str	r3, [sp, #16]
 80182fa:	46a2      	mov	sl, r4
 80182fc:	e7d2      	b.n	80182a4 <_svfiprintf_r+0x9c>
 80182fe:	9b03      	ldr	r3, [sp, #12]
 8018300:	1d19      	adds	r1, r3, #4
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	9103      	str	r1, [sp, #12]
 8018306:	2b00      	cmp	r3, #0
 8018308:	bfbb      	ittet	lt
 801830a:	425b      	neglt	r3, r3
 801830c:	f042 0202 	orrlt.w	r2, r2, #2
 8018310:	9307      	strge	r3, [sp, #28]
 8018312:	9307      	strlt	r3, [sp, #28]
 8018314:	bfb8      	it	lt
 8018316:	9204      	strlt	r2, [sp, #16]
 8018318:	7823      	ldrb	r3, [r4, #0]
 801831a:	2b2e      	cmp	r3, #46	; 0x2e
 801831c:	d10c      	bne.n	8018338 <_svfiprintf_r+0x130>
 801831e:	7863      	ldrb	r3, [r4, #1]
 8018320:	2b2a      	cmp	r3, #42	; 0x2a
 8018322:	d134      	bne.n	801838e <_svfiprintf_r+0x186>
 8018324:	9b03      	ldr	r3, [sp, #12]
 8018326:	1d1a      	adds	r2, r3, #4
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	9203      	str	r2, [sp, #12]
 801832c:	2b00      	cmp	r3, #0
 801832e:	bfb8      	it	lt
 8018330:	f04f 33ff 	movlt.w	r3, #4294967295
 8018334:	3402      	adds	r4, #2
 8018336:	9305      	str	r3, [sp, #20]
 8018338:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018400 <_svfiprintf_r+0x1f8>
 801833c:	7821      	ldrb	r1, [r4, #0]
 801833e:	2203      	movs	r2, #3
 8018340:	4650      	mov	r0, sl
 8018342:	f7e7 ff6d 	bl	8000220 <memchr>
 8018346:	b138      	cbz	r0, 8018358 <_svfiprintf_r+0x150>
 8018348:	9b04      	ldr	r3, [sp, #16]
 801834a:	eba0 000a 	sub.w	r0, r0, sl
 801834e:	2240      	movs	r2, #64	; 0x40
 8018350:	4082      	lsls	r2, r0
 8018352:	4313      	orrs	r3, r2
 8018354:	3401      	adds	r4, #1
 8018356:	9304      	str	r3, [sp, #16]
 8018358:	f814 1b01 	ldrb.w	r1, [r4], #1
 801835c:	4825      	ldr	r0, [pc, #148]	; (80183f4 <_svfiprintf_r+0x1ec>)
 801835e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018362:	2206      	movs	r2, #6
 8018364:	f7e7 ff5c 	bl	8000220 <memchr>
 8018368:	2800      	cmp	r0, #0
 801836a:	d038      	beq.n	80183de <_svfiprintf_r+0x1d6>
 801836c:	4b22      	ldr	r3, [pc, #136]	; (80183f8 <_svfiprintf_r+0x1f0>)
 801836e:	bb1b      	cbnz	r3, 80183b8 <_svfiprintf_r+0x1b0>
 8018370:	9b03      	ldr	r3, [sp, #12]
 8018372:	3307      	adds	r3, #7
 8018374:	f023 0307 	bic.w	r3, r3, #7
 8018378:	3308      	adds	r3, #8
 801837a:	9303      	str	r3, [sp, #12]
 801837c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801837e:	4433      	add	r3, r6
 8018380:	9309      	str	r3, [sp, #36]	; 0x24
 8018382:	e768      	b.n	8018256 <_svfiprintf_r+0x4e>
 8018384:	fb0c 3202 	mla	r2, ip, r2, r3
 8018388:	460c      	mov	r4, r1
 801838a:	2001      	movs	r0, #1
 801838c:	e7a6      	b.n	80182dc <_svfiprintf_r+0xd4>
 801838e:	2300      	movs	r3, #0
 8018390:	3401      	adds	r4, #1
 8018392:	9305      	str	r3, [sp, #20]
 8018394:	4619      	mov	r1, r3
 8018396:	f04f 0c0a 	mov.w	ip, #10
 801839a:	4620      	mov	r0, r4
 801839c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183a0:	3a30      	subs	r2, #48	; 0x30
 80183a2:	2a09      	cmp	r2, #9
 80183a4:	d903      	bls.n	80183ae <_svfiprintf_r+0x1a6>
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d0c6      	beq.n	8018338 <_svfiprintf_r+0x130>
 80183aa:	9105      	str	r1, [sp, #20]
 80183ac:	e7c4      	b.n	8018338 <_svfiprintf_r+0x130>
 80183ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80183b2:	4604      	mov	r4, r0
 80183b4:	2301      	movs	r3, #1
 80183b6:	e7f0      	b.n	801839a <_svfiprintf_r+0x192>
 80183b8:	ab03      	add	r3, sp, #12
 80183ba:	9300      	str	r3, [sp, #0]
 80183bc:	462a      	mov	r2, r5
 80183be:	4b0f      	ldr	r3, [pc, #60]	; (80183fc <_svfiprintf_r+0x1f4>)
 80183c0:	a904      	add	r1, sp, #16
 80183c2:	4638      	mov	r0, r7
 80183c4:	f7fd fe62 	bl	801608c <_printf_float>
 80183c8:	1c42      	adds	r2, r0, #1
 80183ca:	4606      	mov	r6, r0
 80183cc:	d1d6      	bne.n	801837c <_svfiprintf_r+0x174>
 80183ce:	89ab      	ldrh	r3, [r5, #12]
 80183d0:	065b      	lsls	r3, r3, #25
 80183d2:	f53f af2d 	bmi.w	8018230 <_svfiprintf_r+0x28>
 80183d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183d8:	b01d      	add	sp, #116	; 0x74
 80183da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183de:	ab03      	add	r3, sp, #12
 80183e0:	9300      	str	r3, [sp, #0]
 80183e2:	462a      	mov	r2, r5
 80183e4:	4b05      	ldr	r3, [pc, #20]	; (80183fc <_svfiprintf_r+0x1f4>)
 80183e6:	a904      	add	r1, sp, #16
 80183e8:	4638      	mov	r0, r7
 80183ea:	f7fe f8f3 	bl	80165d4 <_printf_i>
 80183ee:	e7eb      	b.n	80183c8 <_svfiprintf_r+0x1c0>
 80183f0:	0801baac 	.word	0x0801baac
 80183f4:	0801bab6 	.word	0x0801bab6
 80183f8:	0801608d 	.word	0x0801608d
 80183fc:	08018155 	.word	0x08018155
 8018400:	0801bab2 	.word	0x0801bab2

08018404 <__sflush_r>:
 8018404:	898a      	ldrh	r2, [r1, #12]
 8018406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801840a:	4605      	mov	r5, r0
 801840c:	0710      	lsls	r0, r2, #28
 801840e:	460c      	mov	r4, r1
 8018410:	d458      	bmi.n	80184c4 <__sflush_r+0xc0>
 8018412:	684b      	ldr	r3, [r1, #4]
 8018414:	2b00      	cmp	r3, #0
 8018416:	dc05      	bgt.n	8018424 <__sflush_r+0x20>
 8018418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801841a:	2b00      	cmp	r3, #0
 801841c:	dc02      	bgt.n	8018424 <__sflush_r+0x20>
 801841e:	2000      	movs	r0, #0
 8018420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018426:	2e00      	cmp	r6, #0
 8018428:	d0f9      	beq.n	801841e <__sflush_r+0x1a>
 801842a:	2300      	movs	r3, #0
 801842c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018430:	682f      	ldr	r7, [r5, #0]
 8018432:	6a21      	ldr	r1, [r4, #32]
 8018434:	602b      	str	r3, [r5, #0]
 8018436:	d032      	beq.n	801849e <__sflush_r+0x9a>
 8018438:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801843a:	89a3      	ldrh	r3, [r4, #12]
 801843c:	075a      	lsls	r2, r3, #29
 801843e:	d505      	bpl.n	801844c <__sflush_r+0x48>
 8018440:	6863      	ldr	r3, [r4, #4]
 8018442:	1ac0      	subs	r0, r0, r3
 8018444:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018446:	b10b      	cbz	r3, 801844c <__sflush_r+0x48>
 8018448:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801844a:	1ac0      	subs	r0, r0, r3
 801844c:	2300      	movs	r3, #0
 801844e:	4602      	mov	r2, r0
 8018450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018452:	6a21      	ldr	r1, [r4, #32]
 8018454:	4628      	mov	r0, r5
 8018456:	47b0      	blx	r6
 8018458:	1c43      	adds	r3, r0, #1
 801845a:	89a3      	ldrh	r3, [r4, #12]
 801845c:	d106      	bne.n	801846c <__sflush_r+0x68>
 801845e:	6829      	ldr	r1, [r5, #0]
 8018460:	291d      	cmp	r1, #29
 8018462:	d82b      	bhi.n	80184bc <__sflush_r+0xb8>
 8018464:	4a29      	ldr	r2, [pc, #164]	; (801850c <__sflush_r+0x108>)
 8018466:	410a      	asrs	r2, r1
 8018468:	07d6      	lsls	r6, r2, #31
 801846a:	d427      	bmi.n	80184bc <__sflush_r+0xb8>
 801846c:	2200      	movs	r2, #0
 801846e:	6062      	str	r2, [r4, #4]
 8018470:	04d9      	lsls	r1, r3, #19
 8018472:	6922      	ldr	r2, [r4, #16]
 8018474:	6022      	str	r2, [r4, #0]
 8018476:	d504      	bpl.n	8018482 <__sflush_r+0x7e>
 8018478:	1c42      	adds	r2, r0, #1
 801847a:	d101      	bne.n	8018480 <__sflush_r+0x7c>
 801847c:	682b      	ldr	r3, [r5, #0]
 801847e:	b903      	cbnz	r3, 8018482 <__sflush_r+0x7e>
 8018480:	6560      	str	r0, [r4, #84]	; 0x54
 8018482:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018484:	602f      	str	r7, [r5, #0]
 8018486:	2900      	cmp	r1, #0
 8018488:	d0c9      	beq.n	801841e <__sflush_r+0x1a>
 801848a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801848e:	4299      	cmp	r1, r3
 8018490:	d002      	beq.n	8018498 <__sflush_r+0x94>
 8018492:	4628      	mov	r0, r5
 8018494:	f7ff f9e2 	bl	801785c <_free_r>
 8018498:	2000      	movs	r0, #0
 801849a:	6360      	str	r0, [r4, #52]	; 0x34
 801849c:	e7c0      	b.n	8018420 <__sflush_r+0x1c>
 801849e:	2301      	movs	r3, #1
 80184a0:	4628      	mov	r0, r5
 80184a2:	47b0      	blx	r6
 80184a4:	1c41      	adds	r1, r0, #1
 80184a6:	d1c8      	bne.n	801843a <__sflush_r+0x36>
 80184a8:	682b      	ldr	r3, [r5, #0]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d0c5      	beq.n	801843a <__sflush_r+0x36>
 80184ae:	2b1d      	cmp	r3, #29
 80184b0:	d001      	beq.n	80184b6 <__sflush_r+0xb2>
 80184b2:	2b16      	cmp	r3, #22
 80184b4:	d101      	bne.n	80184ba <__sflush_r+0xb6>
 80184b6:	602f      	str	r7, [r5, #0]
 80184b8:	e7b1      	b.n	801841e <__sflush_r+0x1a>
 80184ba:	89a3      	ldrh	r3, [r4, #12]
 80184bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184c0:	81a3      	strh	r3, [r4, #12]
 80184c2:	e7ad      	b.n	8018420 <__sflush_r+0x1c>
 80184c4:	690f      	ldr	r7, [r1, #16]
 80184c6:	2f00      	cmp	r7, #0
 80184c8:	d0a9      	beq.n	801841e <__sflush_r+0x1a>
 80184ca:	0793      	lsls	r3, r2, #30
 80184cc:	680e      	ldr	r6, [r1, #0]
 80184ce:	bf08      	it	eq
 80184d0:	694b      	ldreq	r3, [r1, #20]
 80184d2:	600f      	str	r7, [r1, #0]
 80184d4:	bf18      	it	ne
 80184d6:	2300      	movne	r3, #0
 80184d8:	eba6 0807 	sub.w	r8, r6, r7
 80184dc:	608b      	str	r3, [r1, #8]
 80184de:	f1b8 0f00 	cmp.w	r8, #0
 80184e2:	dd9c      	ble.n	801841e <__sflush_r+0x1a>
 80184e4:	6a21      	ldr	r1, [r4, #32]
 80184e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80184e8:	4643      	mov	r3, r8
 80184ea:	463a      	mov	r2, r7
 80184ec:	4628      	mov	r0, r5
 80184ee:	47b0      	blx	r6
 80184f0:	2800      	cmp	r0, #0
 80184f2:	dc06      	bgt.n	8018502 <__sflush_r+0xfe>
 80184f4:	89a3      	ldrh	r3, [r4, #12]
 80184f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184fa:	81a3      	strh	r3, [r4, #12]
 80184fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018500:	e78e      	b.n	8018420 <__sflush_r+0x1c>
 8018502:	4407      	add	r7, r0
 8018504:	eba8 0800 	sub.w	r8, r8, r0
 8018508:	e7e9      	b.n	80184de <__sflush_r+0xda>
 801850a:	bf00      	nop
 801850c:	dfbffffe 	.word	0xdfbffffe

08018510 <_fflush_r>:
 8018510:	b538      	push	{r3, r4, r5, lr}
 8018512:	690b      	ldr	r3, [r1, #16]
 8018514:	4605      	mov	r5, r0
 8018516:	460c      	mov	r4, r1
 8018518:	b913      	cbnz	r3, 8018520 <_fflush_r+0x10>
 801851a:	2500      	movs	r5, #0
 801851c:	4628      	mov	r0, r5
 801851e:	bd38      	pop	{r3, r4, r5, pc}
 8018520:	b118      	cbz	r0, 801852a <_fflush_r+0x1a>
 8018522:	6a03      	ldr	r3, [r0, #32]
 8018524:	b90b      	cbnz	r3, 801852a <_fflush_r+0x1a>
 8018526:	f7fe fa03 	bl	8016930 <__sinit>
 801852a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d0f3      	beq.n	801851a <_fflush_r+0xa>
 8018532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018534:	07d0      	lsls	r0, r2, #31
 8018536:	d404      	bmi.n	8018542 <_fflush_r+0x32>
 8018538:	0599      	lsls	r1, r3, #22
 801853a:	d402      	bmi.n	8018542 <_fflush_r+0x32>
 801853c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801853e:	f7fe fb0e 	bl	8016b5e <__retarget_lock_acquire_recursive>
 8018542:	4628      	mov	r0, r5
 8018544:	4621      	mov	r1, r4
 8018546:	f7ff ff5d 	bl	8018404 <__sflush_r>
 801854a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801854c:	07da      	lsls	r2, r3, #31
 801854e:	4605      	mov	r5, r0
 8018550:	d4e4      	bmi.n	801851c <_fflush_r+0xc>
 8018552:	89a3      	ldrh	r3, [r4, #12]
 8018554:	059b      	lsls	r3, r3, #22
 8018556:	d4e1      	bmi.n	801851c <_fflush_r+0xc>
 8018558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801855a:	f7fe fb01 	bl	8016b60 <__retarget_lock_release_recursive>
 801855e:	e7dd      	b.n	801851c <_fflush_r+0xc>

08018560 <memmove>:
 8018560:	4288      	cmp	r0, r1
 8018562:	b510      	push	{r4, lr}
 8018564:	eb01 0402 	add.w	r4, r1, r2
 8018568:	d902      	bls.n	8018570 <memmove+0x10>
 801856a:	4284      	cmp	r4, r0
 801856c:	4623      	mov	r3, r4
 801856e:	d807      	bhi.n	8018580 <memmove+0x20>
 8018570:	1e43      	subs	r3, r0, #1
 8018572:	42a1      	cmp	r1, r4
 8018574:	d008      	beq.n	8018588 <memmove+0x28>
 8018576:	f811 2b01 	ldrb.w	r2, [r1], #1
 801857a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801857e:	e7f8      	b.n	8018572 <memmove+0x12>
 8018580:	4402      	add	r2, r0
 8018582:	4601      	mov	r1, r0
 8018584:	428a      	cmp	r2, r1
 8018586:	d100      	bne.n	801858a <memmove+0x2a>
 8018588:	bd10      	pop	{r4, pc}
 801858a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801858e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018592:	e7f7      	b.n	8018584 <memmove+0x24>

08018594 <_sbrk_r>:
 8018594:	b538      	push	{r3, r4, r5, lr}
 8018596:	4d06      	ldr	r5, [pc, #24]	; (80185b0 <_sbrk_r+0x1c>)
 8018598:	2300      	movs	r3, #0
 801859a:	4604      	mov	r4, r0
 801859c:	4608      	mov	r0, r1
 801859e:	602b      	str	r3, [r5, #0]
 80185a0:	f7ec fdcc 	bl	800513c <_sbrk>
 80185a4:	1c43      	adds	r3, r0, #1
 80185a6:	d102      	bne.n	80185ae <_sbrk_r+0x1a>
 80185a8:	682b      	ldr	r3, [r5, #0]
 80185aa:	b103      	cbz	r3, 80185ae <_sbrk_r+0x1a>
 80185ac:	6023      	str	r3, [r4, #0]
 80185ae:	bd38      	pop	{r3, r4, r5, pc}
 80185b0:	20003000 	.word	0x20003000

080185b4 <memcpy>:
 80185b4:	440a      	add	r2, r1
 80185b6:	4291      	cmp	r1, r2
 80185b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80185bc:	d100      	bne.n	80185c0 <memcpy+0xc>
 80185be:	4770      	bx	lr
 80185c0:	b510      	push	{r4, lr}
 80185c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80185ca:	4291      	cmp	r1, r2
 80185cc:	d1f9      	bne.n	80185c2 <memcpy+0xe>
 80185ce:	bd10      	pop	{r4, pc}

080185d0 <__assert_func>:
 80185d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80185d2:	4614      	mov	r4, r2
 80185d4:	461a      	mov	r2, r3
 80185d6:	4b09      	ldr	r3, [pc, #36]	; (80185fc <__assert_func+0x2c>)
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	4605      	mov	r5, r0
 80185dc:	68d8      	ldr	r0, [r3, #12]
 80185de:	b14c      	cbz	r4, 80185f4 <__assert_func+0x24>
 80185e0:	4b07      	ldr	r3, [pc, #28]	; (8018600 <__assert_func+0x30>)
 80185e2:	9100      	str	r1, [sp, #0]
 80185e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80185e8:	4906      	ldr	r1, [pc, #24]	; (8018604 <__assert_func+0x34>)
 80185ea:	462b      	mov	r3, r5
 80185ec:	f000 f872 	bl	80186d4 <fiprintf>
 80185f0:	f000 f882 	bl	80186f8 <abort>
 80185f4:	4b04      	ldr	r3, [pc, #16]	; (8018608 <__assert_func+0x38>)
 80185f6:	461c      	mov	r4, r3
 80185f8:	e7f3      	b.n	80185e2 <__assert_func+0x12>
 80185fa:	bf00      	nop
 80185fc:	2000039c 	.word	0x2000039c
 8018600:	0801bac7 	.word	0x0801bac7
 8018604:	0801bad4 	.word	0x0801bad4
 8018608:	0801bb02 	.word	0x0801bb02

0801860c <_calloc_r>:
 801860c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801860e:	fba1 2402 	umull	r2, r4, r1, r2
 8018612:	b94c      	cbnz	r4, 8018628 <_calloc_r+0x1c>
 8018614:	4611      	mov	r1, r2
 8018616:	9201      	str	r2, [sp, #4]
 8018618:	f7ff f994 	bl	8017944 <_malloc_r>
 801861c:	9a01      	ldr	r2, [sp, #4]
 801861e:	4605      	mov	r5, r0
 8018620:	b930      	cbnz	r0, 8018630 <_calloc_r+0x24>
 8018622:	4628      	mov	r0, r5
 8018624:	b003      	add	sp, #12
 8018626:	bd30      	pop	{r4, r5, pc}
 8018628:	220c      	movs	r2, #12
 801862a:	6002      	str	r2, [r0, #0]
 801862c:	2500      	movs	r5, #0
 801862e:	e7f8      	b.n	8018622 <_calloc_r+0x16>
 8018630:	4621      	mov	r1, r4
 8018632:	f7fe fa16 	bl	8016a62 <memset>
 8018636:	e7f4      	b.n	8018622 <_calloc_r+0x16>

08018638 <__ascii_mbtowc>:
 8018638:	b082      	sub	sp, #8
 801863a:	b901      	cbnz	r1, 801863e <__ascii_mbtowc+0x6>
 801863c:	a901      	add	r1, sp, #4
 801863e:	b142      	cbz	r2, 8018652 <__ascii_mbtowc+0x1a>
 8018640:	b14b      	cbz	r3, 8018656 <__ascii_mbtowc+0x1e>
 8018642:	7813      	ldrb	r3, [r2, #0]
 8018644:	600b      	str	r3, [r1, #0]
 8018646:	7812      	ldrb	r2, [r2, #0]
 8018648:	1e10      	subs	r0, r2, #0
 801864a:	bf18      	it	ne
 801864c:	2001      	movne	r0, #1
 801864e:	b002      	add	sp, #8
 8018650:	4770      	bx	lr
 8018652:	4610      	mov	r0, r2
 8018654:	e7fb      	b.n	801864e <__ascii_mbtowc+0x16>
 8018656:	f06f 0001 	mvn.w	r0, #1
 801865a:	e7f8      	b.n	801864e <__ascii_mbtowc+0x16>

0801865c <_realloc_r>:
 801865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018660:	4680      	mov	r8, r0
 8018662:	4614      	mov	r4, r2
 8018664:	460e      	mov	r6, r1
 8018666:	b921      	cbnz	r1, 8018672 <_realloc_r+0x16>
 8018668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801866c:	4611      	mov	r1, r2
 801866e:	f7ff b969 	b.w	8017944 <_malloc_r>
 8018672:	b92a      	cbnz	r2, 8018680 <_realloc_r+0x24>
 8018674:	f7ff f8f2 	bl	801785c <_free_r>
 8018678:	4625      	mov	r5, r4
 801867a:	4628      	mov	r0, r5
 801867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018680:	f000 f841 	bl	8018706 <_malloc_usable_size_r>
 8018684:	4284      	cmp	r4, r0
 8018686:	4607      	mov	r7, r0
 8018688:	d802      	bhi.n	8018690 <_realloc_r+0x34>
 801868a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801868e:	d812      	bhi.n	80186b6 <_realloc_r+0x5a>
 8018690:	4621      	mov	r1, r4
 8018692:	4640      	mov	r0, r8
 8018694:	f7ff f956 	bl	8017944 <_malloc_r>
 8018698:	4605      	mov	r5, r0
 801869a:	2800      	cmp	r0, #0
 801869c:	d0ed      	beq.n	801867a <_realloc_r+0x1e>
 801869e:	42bc      	cmp	r4, r7
 80186a0:	4622      	mov	r2, r4
 80186a2:	4631      	mov	r1, r6
 80186a4:	bf28      	it	cs
 80186a6:	463a      	movcs	r2, r7
 80186a8:	f7ff ff84 	bl	80185b4 <memcpy>
 80186ac:	4631      	mov	r1, r6
 80186ae:	4640      	mov	r0, r8
 80186b0:	f7ff f8d4 	bl	801785c <_free_r>
 80186b4:	e7e1      	b.n	801867a <_realloc_r+0x1e>
 80186b6:	4635      	mov	r5, r6
 80186b8:	e7df      	b.n	801867a <_realloc_r+0x1e>

080186ba <__ascii_wctomb>:
 80186ba:	b149      	cbz	r1, 80186d0 <__ascii_wctomb+0x16>
 80186bc:	2aff      	cmp	r2, #255	; 0xff
 80186be:	bf85      	ittet	hi
 80186c0:	238a      	movhi	r3, #138	; 0x8a
 80186c2:	6003      	strhi	r3, [r0, #0]
 80186c4:	700a      	strbls	r2, [r1, #0]
 80186c6:	f04f 30ff 	movhi.w	r0, #4294967295
 80186ca:	bf98      	it	ls
 80186cc:	2001      	movls	r0, #1
 80186ce:	4770      	bx	lr
 80186d0:	4608      	mov	r0, r1
 80186d2:	4770      	bx	lr

080186d4 <fiprintf>:
 80186d4:	b40e      	push	{r1, r2, r3}
 80186d6:	b503      	push	{r0, r1, lr}
 80186d8:	4601      	mov	r1, r0
 80186da:	ab03      	add	r3, sp, #12
 80186dc:	4805      	ldr	r0, [pc, #20]	; (80186f4 <fiprintf+0x20>)
 80186de:	f853 2b04 	ldr.w	r2, [r3], #4
 80186e2:	6800      	ldr	r0, [r0, #0]
 80186e4:	9301      	str	r3, [sp, #4]
 80186e6:	f000 f83f 	bl	8018768 <_vfiprintf_r>
 80186ea:	b002      	add	sp, #8
 80186ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80186f0:	b003      	add	sp, #12
 80186f2:	4770      	bx	lr
 80186f4:	2000039c 	.word	0x2000039c

080186f8 <abort>:
 80186f8:	b508      	push	{r3, lr}
 80186fa:	2006      	movs	r0, #6
 80186fc:	f000 fa0c 	bl	8018b18 <raise>
 8018700:	2001      	movs	r0, #1
 8018702:	f7ec fca3 	bl	800504c <_exit>

08018706 <_malloc_usable_size_r>:
 8018706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801870a:	1f18      	subs	r0, r3, #4
 801870c:	2b00      	cmp	r3, #0
 801870e:	bfbc      	itt	lt
 8018710:	580b      	ldrlt	r3, [r1, r0]
 8018712:	18c0      	addlt	r0, r0, r3
 8018714:	4770      	bx	lr

08018716 <__sfputc_r>:
 8018716:	6893      	ldr	r3, [r2, #8]
 8018718:	3b01      	subs	r3, #1
 801871a:	2b00      	cmp	r3, #0
 801871c:	b410      	push	{r4}
 801871e:	6093      	str	r3, [r2, #8]
 8018720:	da08      	bge.n	8018734 <__sfputc_r+0x1e>
 8018722:	6994      	ldr	r4, [r2, #24]
 8018724:	42a3      	cmp	r3, r4
 8018726:	db01      	blt.n	801872c <__sfputc_r+0x16>
 8018728:	290a      	cmp	r1, #10
 801872a:	d103      	bne.n	8018734 <__sfputc_r+0x1e>
 801872c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018730:	f000 b934 	b.w	801899c <__swbuf_r>
 8018734:	6813      	ldr	r3, [r2, #0]
 8018736:	1c58      	adds	r0, r3, #1
 8018738:	6010      	str	r0, [r2, #0]
 801873a:	7019      	strb	r1, [r3, #0]
 801873c:	4608      	mov	r0, r1
 801873e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018742:	4770      	bx	lr

08018744 <__sfputs_r>:
 8018744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018746:	4606      	mov	r6, r0
 8018748:	460f      	mov	r7, r1
 801874a:	4614      	mov	r4, r2
 801874c:	18d5      	adds	r5, r2, r3
 801874e:	42ac      	cmp	r4, r5
 8018750:	d101      	bne.n	8018756 <__sfputs_r+0x12>
 8018752:	2000      	movs	r0, #0
 8018754:	e007      	b.n	8018766 <__sfputs_r+0x22>
 8018756:	f814 1b01 	ldrb.w	r1, [r4], #1
 801875a:	463a      	mov	r2, r7
 801875c:	4630      	mov	r0, r6
 801875e:	f7ff ffda 	bl	8018716 <__sfputc_r>
 8018762:	1c43      	adds	r3, r0, #1
 8018764:	d1f3      	bne.n	801874e <__sfputs_r+0xa>
 8018766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018768 <_vfiprintf_r>:
 8018768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801876c:	460d      	mov	r5, r1
 801876e:	b09d      	sub	sp, #116	; 0x74
 8018770:	4614      	mov	r4, r2
 8018772:	4698      	mov	r8, r3
 8018774:	4606      	mov	r6, r0
 8018776:	b118      	cbz	r0, 8018780 <_vfiprintf_r+0x18>
 8018778:	6a03      	ldr	r3, [r0, #32]
 801877a:	b90b      	cbnz	r3, 8018780 <_vfiprintf_r+0x18>
 801877c:	f7fe f8d8 	bl	8016930 <__sinit>
 8018780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018782:	07d9      	lsls	r1, r3, #31
 8018784:	d405      	bmi.n	8018792 <_vfiprintf_r+0x2a>
 8018786:	89ab      	ldrh	r3, [r5, #12]
 8018788:	059a      	lsls	r2, r3, #22
 801878a:	d402      	bmi.n	8018792 <_vfiprintf_r+0x2a>
 801878c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801878e:	f7fe f9e6 	bl	8016b5e <__retarget_lock_acquire_recursive>
 8018792:	89ab      	ldrh	r3, [r5, #12]
 8018794:	071b      	lsls	r3, r3, #28
 8018796:	d501      	bpl.n	801879c <_vfiprintf_r+0x34>
 8018798:	692b      	ldr	r3, [r5, #16]
 801879a:	b99b      	cbnz	r3, 80187c4 <_vfiprintf_r+0x5c>
 801879c:	4629      	mov	r1, r5
 801879e:	4630      	mov	r0, r6
 80187a0:	f000 f93a 	bl	8018a18 <__swsetup_r>
 80187a4:	b170      	cbz	r0, 80187c4 <_vfiprintf_r+0x5c>
 80187a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187a8:	07dc      	lsls	r4, r3, #31
 80187aa:	d504      	bpl.n	80187b6 <_vfiprintf_r+0x4e>
 80187ac:	f04f 30ff 	mov.w	r0, #4294967295
 80187b0:	b01d      	add	sp, #116	; 0x74
 80187b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187b6:	89ab      	ldrh	r3, [r5, #12]
 80187b8:	0598      	lsls	r0, r3, #22
 80187ba:	d4f7      	bmi.n	80187ac <_vfiprintf_r+0x44>
 80187bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187be:	f7fe f9cf 	bl	8016b60 <__retarget_lock_release_recursive>
 80187c2:	e7f3      	b.n	80187ac <_vfiprintf_r+0x44>
 80187c4:	2300      	movs	r3, #0
 80187c6:	9309      	str	r3, [sp, #36]	; 0x24
 80187c8:	2320      	movs	r3, #32
 80187ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80187ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80187d2:	2330      	movs	r3, #48	; 0x30
 80187d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018988 <_vfiprintf_r+0x220>
 80187d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80187dc:	f04f 0901 	mov.w	r9, #1
 80187e0:	4623      	mov	r3, r4
 80187e2:	469a      	mov	sl, r3
 80187e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187e8:	b10a      	cbz	r2, 80187ee <_vfiprintf_r+0x86>
 80187ea:	2a25      	cmp	r2, #37	; 0x25
 80187ec:	d1f9      	bne.n	80187e2 <_vfiprintf_r+0x7a>
 80187ee:	ebba 0b04 	subs.w	fp, sl, r4
 80187f2:	d00b      	beq.n	801880c <_vfiprintf_r+0xa4>
 80187f4:	465b      	mov	r3, fp
 80187f6:	4622      	mov	r2, r4
 80187f8:	4629      	mov	r1, r5
 80187fa:	4630      	mov	r0, r6
 80187fc:	f7ff ffa2 	bl	8018744 <__sfputs_r>
 8018800:	3001      	adds	r0, #1
 8018802:	f000 80a9 	beq.w	8018958 <_vfiprintf_r+0x1f0>
 8018806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018808:	445a      	add	r2, fp
 801880a:	9209      	str	r2, [sp, #36]	; 0x24
 801880c:	f89a 3000 	ldrb.w	r3, [sl]
 8018810:	2b00      	cmp	r3, #0
 8018812:	f000 80a1 	beq.w	8018958 <_vfiprintf_r+0x1f0>
 8018816:	2300      	movs	r3, #0
 8018818:	f04f 32ff 	mov.w	r2, #4294967295
 801881c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018820:	f10a 0a01 	add.w	sl, sl, #1
 8018824:	9304      	str	r3, [sp, #16]
 8018826:	9307      	str	r3, [sp, #28]
 8018828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801882c:	931a      	str	r3, [sp, #104]	; 0x68
 801882e:	4654      	mov	r4, sl
 8018830:	2205      	movs	r2, #5
 8018832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018836:	4854      	ldr	r0, [pc, #336]	; (8018988 <_vfiprintf_r+0x220>)
 8018838:	f7e7 fcf2 	bl	8000220 <memchr>
 801883c:	9a04      	ldr	r2, [sp, #16]
 801883e:	b9d8      	cbnz	r0, 8018878 <_vfiprintf_r+0x110>
 8018840:	06d1      	lsls	r1, r2, #27
 8018842:	bf44      	itt	mi
 8018844:	2320      	movmi	r3, #32
 8018846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801884a:	0713      	lsls	r3, r2, #28
 801884c:	bf44      	itt	mi
 801884e:	232b      	movmi	r3, #43	; 0x2b
 8018850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018854:	f89a 3000 	ldrb.w	r3, [sl]
 8018858:	2b2a      	cmp	r3, #42	; 0x2a
 801885a:	d015      	beq.n	8018888 <_vfiprintf_r+0x120>
 801885c:	9a07      	ldr	r2, [sp, #28]
 801885e:	4654      	mov	r4, sl
 8018860:	2000      	movs	r0, #0
 8018862:	f04f 0c0a 	mov.w	ip, #10
 8018866:	4621      	mov	r1, r4
 8018868:	f811 3b01 	ldrb.w	r3, [r1], #1
 801886c:	3b30      	subs	r3, #48	; 0x30
 801886e:	2b09      	cmp	r3, #9
 8018870:	d94d      	bls.n	801890e <_vfiprintf_r+0x1a6>
 8018872:	b1b0      	cbz	r0, 80188a2 <_vfiprintf_r+0x13a>
 8018874:	9207      	str	r2, [sp, #28]
 8018876:	e014      	b.n	80188a2 <_vfiprintf_r+0x13a>
 8018878:	eba0 0308 	sub.w	r3, r0, r8
 801887c:	fa09 f303 	lsl.w	r3, r9, r3
 8018880:	4313      	orrs	r3, r2
 8018882:	9304      	str	r3, [sp, #16]
 8018884:	46a2      	mov	sl, r4
 8018886:	e7d2      	b.n	801882e <_vfiprintf_r+0xc6>
 8018888:	9b03      	ldr	r3, [sp, #12]
 801888a:	1d19      	adds	r1, r3, #4
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	9103      	str	r1, [sp, #12]
 8018890:	2b00      	cmp	r3, #0
 8018892:	bfbb      	ittet	lt
 8018894:	425b      	neglt	r3, r3
 8018896:	f042 0202 	orrlt.w	r2, r2, #2
 801889a:	9307      	strge	r3, [sp, #28]
 801889c:	9307      	strlt	r3, [sp, #28]
 801889e:	bfb8      	it	lt
 80188a0:	9204      	strlt	r2, [sp, #16]
 80188a2:	7823      	ldrb	r3, [r4, #0]
 80188a4:	2b2e      	cmp	r3, #46	; 0x2e
 80188a6:	d10c      	bne.n	80188c2 <_vfiprintf_r+0x15a>
 80188a8:	7863      	ldrb	r3, [r4, #1]
 80188aa:	2b2a      	cmp	r3, #42	; 0x2a
 80188ac:	d134      	bne.n	8018918 <_vfiprintf_r+0x1b0>
 80188ae:	9b03      	ldr	r3, [sp, #12]
 80188b0:	1d1a      	adds	r2, r3, #4
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	9203      	str	r2, [sp, #12]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	bfb8      	it	lt
 80188ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80188be:	3402      	adds	r4, #2
 80188c0:	9305      	str	r3, [sp, #20]
 80188c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018998 <_vfiprintf_r+0x230>
 80188c6:	7821      	ldrb	r1, [r4, #0]
 80188c8:	2203      	movs	r2, #3
 80188ca:	4650      	mov	r0, sl
 80188cc:	f7e7 fca8 	bl	8000220 <memchr>
 80188d0:	b138      	cbz	r0, 80188e2 <_vfiprintf_r+0x17a>
 80188d2:	9b04      	ldr	r3, [sp, #16]
 80188d4:	eba0 000a 	sub.w	r0, r0, sl
 80188d8:	2240      	movs	r2, #64	; 0x40
 80188da:	4082      	lsls	r2, r0
 80188dc:	4313      	orrs	r3, r2
 80188de:	3401      	adds	r4, #1
 80188e0:	9304      	str	r3, [sp, #16]
 80188e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188e6:	4829      	ldr	r0, [pc, #164]	; (801898c <_vfiprintf_r+0x224>)
 80188e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80188ec:	2206      	movs	r2, #6
 80188ee:	f7e7 fc97 	bl	8000220 <memchr>
 80188f2:	2800      	cmp	r0, #0
 80188f4:	d03f      	beq.n	8018976 <_vfiprintf_r+0x20e>
 80188f6:	4b26      	ldr	r3, [pc, #152]	; (8018990 <_vfiprintf_r+0x228>)
 80188f8:	bb1b      	cbnz	r3, 8018942 <_vfiprintf_r+0x1da>
 80188fa:	9b03      	ldr	r3, [sp, #12]
 80188fc:	3307      	adds	r3, #7
 80188fe:	f023 0307 	bic.w	r3, r3, #7
 8018902:	3308      	adds	r3, #8
 8018904:	9303      	str	r3, [sp, #12]
 8018906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018908:	443b      	add	r3, r7
 801890a:	9309      	str	r3, [sp, #36]	; 0x24
 801890c:	e768      	b.n	80187e0 <_vfiprintf_r+0x78>
 801890e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018912:	460c      	mov	r4, r1
 8018914:	2001      	movs	r0, #1
 8018916:	e7a6      	b.n	8018866 <_vfiprintf_r+0xfe>
 8018918:	2300      	movs	r3, #0
 801891a:	3401      	adds	r4, #1
 801891c:	9305      	str	r3, [sp, #20]
 801891e:	4619      	mov	r1, r3
 8018920:	f04f 0c0a 	mov.w	ip, #10
 8018924:	4620      	mov	r0, r4
 8018926:	f810 2b01 	ldrb.w	r2, [r0], #1
 801892a:	3a30      	subs	r2, #48	; 0x30
 801892c:	2a09      	cmp	r2, #9
 801892e:	d903      	bls.n	8018938 <_vfiprintf_r+0x1d0>
 8018930:	2b00      	cmp	r3, #0
 8018932:	d0c6      	beq.n	80188c2 <_vfiprintf_r+0x15a>
 8018934:	9105      	str	r1, [sp, #20]
 8018936:	e7c4      	b.n	80188c2 <_vfiprintf_r+0x15a>
 8018938:	fb0c 2101 	mla	r1, ip, r1, r2
 801893c:	4604      	mov	r4, r0
 801893e:	2301      	movs	r3, #1
 8018940:	e7f0      	b.n	8018924 <_vfiprintf_r+0x1bc>
 8018942:	ab03      	add	r3, sp, #12
 8018944:	9300      	str	r3, [sp, #0]
 8018946:	462a      	mov	r2, r5
 8018948:	4b12      	ldr	r3, [pc, #72]	; (8018994 <_vfiprintf_r+0x22c>)
 801894a:	a904      	add	r1, sp, #16
 801894c:	4630      	mov	r0, r6
 801894e:	f7fd fb9d 	bl	801608c <_printf_float>
 8018952:	4607      	mov	r7, r0
 8018954:	1c78      	adds	r0, r7, #1
 8018956:	d1d6      	bne.n	8018906 <_vfiprintf_r+0x19e>
 8018958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801895a:	07d9      	lsls	r1, r3, #31
 801895c:	d405      	bmi.n	801896a <_vfiprintf_r+0x202>
 801895e:	89ab      	ldrh	r3, [r5, #12]
 8018960:	059a      	lsls	r2, r3, #22
 8018962:	d402      	bmi.n	801896a <_vfiprintf_r+0x202>
 8018964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018966:	f7fe f8fb 	bl	8016b60 <__retarget_lock_release_recursive>
 801896a:	89ab      	ldrh	r3, [r5, #12]
 801896c:	065b      	lsls	r3, r3, #25
 801896e:	f53f af1d 	bmi.w	80187ac <_vfiprintf_r+0x44>
 8018972:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018974:	e71c      	b.n	80187b0 <_vfiprintf_r+0x48>
 8018976:	ab03      	add	r3, sp, #12
 8018978:	9300      	str	r3, [sp, #0]
 801897a:	462a      	mov	r2, r5
 801897c:	4b05      	ldr	r3, [pc, #20]	; (8018994 <_vfiprintf_r+0x22c>)
 801897e:	a904      	add	r1, sp, #16
 8018980:	4630      	mov	r0, r6
 8018982:	f7fd fe27 	bl	80165d4 <_printf_i>
 8018986:	e7e4      	b.n	8018952 <_vfiprintf_r+0x1ea>
 8018988:	0801baac 	.word	0x0801baac
 801898c:	0801bab6 	.word	0x0801bab6
 8018990:	0801608d 	.word	0x0801608d
 8018994:	08018745 	.word	0x08018745
 8018998:	0801bab2 	.word	0x0801bab2

0801899c <__swbuf_r>:
 801899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801899e:	460e      	mov	r6, r1
 80189a0:	4614      	mov	r4, r2
 80189a2:	4605      	mov	r5, r0
 80189a4:	b118      	cbz	r0, 80189ae <__swbuf_r+0x12>
 80189a6:	6a03      	ldr	r3, [r0, #32]
 80189a8:	b90b      	cbnz	r3, 80189ae <__swbuf_r+0x12>
 80189aa:	f7fd ffc1 	bl	8016930 <__sinit>
 80189ae:	69a3      	ldr	r3, [r4, #24]
 80189b0:	60a3      	str	r3, [r4, #8]
 80189b2:	89a3      	ldrh	r3, [r4, #12]
 80189b4:	071a      	lsls	r2, r3, #28
 80189b6:	d525      	bpl.n	8018a04 <__swbuf_r+0x68>
 80189b8:	6923      	ldr	r3, [r4, #16]
 80189ba:	b31b      	cbz	r3, 8018a04 <__swbuf_r+0x68>
 80189bc:	6823      	ldr	r3, [r4, #0]
 80189be:	6922      	ldr	r2, [r4, #16]
 80189c0:	1a98      	subs	r0, r3, r2
 80189c2:	6963      	ldr	r3, [r4, #20]
 80189c4:	b2f6      	uxtb	r6, r6
 80189c6:	4283      	cmp	r3, r0
 80189c8:	4637      	mov	r7, r6
 80189ca:	dc04      	bgt.n	80189d6 <__swbuf_r+0x3a>
 80189cc:	4621      	mov	r1, r4
 80189ce:	4628      	mov	r0, r5
 80189d0:	f7ff fd9e 	bl	8018510 <_fflush_r>
 80189d4:	b9e0      	cbnz	r0, 8018a10 <__swbuf_r+0x74>
 80189d6:	68a3      	ldr	r3, [r4, #8]
 80189d8:	3b01      	subs	r3, #1
 80189da:	60a3      	str	r3, [r4, #8]
 80189dc:	6823      	ldr	r3, [r4, #0]
 80189de:	1c5a      	adds	r2, r3, #1
 80189e0:	6022      	str	r2, [r4, #0]
 80189e2:	701e      	strb	r6, [r3, #0]
 80189e4:	6962      	ldr	r2, [r4, #20]
 80189e6:	1c43      	adds	r3, r0, #1
 80189e8:	429a      	cmp	r2, r3
 80189ea:	d004      	beq.n	80189f6 <__swbuf_r+0x5a>
 80189ec:	89a3      	ldrh	r3, [r4, #12]
 80189ee:	07db      	lsls	r3, r3, #31
 80189f0:	d506      	bpl.n	8018a00 <__swbuf_r+0x64>
 80189f2:	2e0a      	cmp	r6, #10
 80189f4:	d104      	bne.n	8018a00 <__swbuf_r+0x64>
 80189f6:	4621      	mov	r1, r4
 80189f8:	4628      	mov	r0, r5
 80189fa:	f7ff fd89 	bl	8018510 <_fflush_r>
 80189fe:	b938      	cbnz	r0, 8018a10 <__swbuf_r+0x74>
 8018a00:	4638      	mov	r0, r7
 8018a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a04:	4621      	mov	r1, r4
 8018a06:	4628      	mov	r0, r5
 8018a08:	f000 f806 	bl	8018a18 <__swsetup_r>
 8018a0c:	2800      	cmp	r0, #0
 8018a0e:	d0d5      	beq.n	80189bc <__swbuf_r+0x20>
 8018a10:	f04f 37ff 	mov.w	r7, #4294967295
 8018a14:	e7f4      	b.n	8018a00 <__swbuf_r+0x64>
	...

08018a18 <__swsetup_r>:
 8018a18:	b538      	push	{r3, r4, r5, lr}
 8018a1a:	4b2a      	ldr	r3, [pc, #168]	; (8018ac4 <__swsetup_r+0xac>)
 8018a1c:	4605      	mov	r5, r0
 8018a1e:	6818      	ldr	r0, [r3, #0]
 8018a20:	460c      	mov	r4, r1
 8018a22:	b118      	cbz	r0, 8018a2c <__swsetup_r+0x14>
 8018a24:	6a03      	ldr	r3, [r0, #32]
 8018a26:	b90b      	cbnz	r3, 8018a2c <__swsetup_r+0x14>
 8018a28:	f7fd ff82 	bl	8016930 <__sinit>
 8018a2c:	89a3      	ldrh	r3, [r4, #12]
 8018a2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018a32:	0718      	lsls	r0, r3, #28
 8018a34:	d422      	bmi.n	8018a7c <__swsetup_r+0x64>
 8018a36:	06d9      	lsls	r1, r3, #27
 8018a38:	d407      	bmi.n	8018a4a <__swsetup_r+0x32>
 8018a3a:	2309      	movs	r3, #9
 8018a3c:	602b      	str	r3, [r5, #0]
 8018a3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018a42:	81a3      	strh	r3, [r4, #12]
 8018a44:	f04f 30ff 	mov.w	r0, #4294967295
 8018a48:	e034      	b.n	8018ab4 <__swsetup_r+0x9c>
 8018a4a:	0758      	lsls	r0, r3, #29
 8018a4c:	d512      	bpl.n	8018a74 <__swsetup_r+0x5c>
 8018a4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018a50:	b141      	cbz	r1, 8018a64 <__swsetup_r+0x4c>
 8018a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018a56:	4299      	cmp	r1, r3
 8018a58:	d002      	beq.n	8018a60 <__swsetup_r+0x48>
 8018a5a:	4628      	mov	r0, r5
 8018a5c:	f7fe fefe 	bl	801785c <_free_r>
 8018a60:	2300      	movs	r3, #0
 8018a62:	6363      	str	r3, [r4, #52]	; 0x34
 8018a64:	89a3      	ldrh	r3, [r4, #12]
 8018a66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018a6a:	81a3      	strh	r3, [r4, #12]
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	6063      	str	r3, [r4, #4]
 8018a70:	6923      	ldr	r3, [r4, #16]
 8018a72:	6023      	str	r3, [r4, #0]
 8018a74:	89a3      	ldrh	r3, [r4, #12]
 8018a76:	f043 0308 	orr.w	r3, r3, #8
 8018a7a:	81a3      	strh	r3, [r4, #12]
 8018a7c:	6923      	ldr	r3, [r4, #16]
 8018a7e:	b94b      	cbnz	r3, 8018a94 <__swsetup_r+0x7c>
 8018a80:	89a3      	ldrh	r3, [r4, #12]
 8018a82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018a8a:	d003      	beq.n	8018a94 <__swsetup_r+0x7c>
 8018a8c:	4621      	mov	r1, r4
 8018a8e:	4628      	mov	r0, r5
 8018a90:	f000 f884 	bl	8018b9c <__smakebuf_r>
 8018a94:	89a0      	ldrh	r0, [r4, #12]
 8018a96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018a9a:	f010 0301 	ands.w	r3, r0, #1
 8018a9e:	d00a      	beq.n	8018ab6 <__swsetup_r+0x9e>
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	60a3      	str	r3, [r4, #8]
 8018aa4:	6963      	ldr	r3, [r4, #20]
 8018aa6:	425b      	negs	r3, r3
 8018aa8:	61a3      	str	r3, [r4, #24]
 8018aaa:	6923      	ldr	r3, [r4, #16]
 8018aac:	b943      	cbnz	r3, 8018ac0 <__swsetup_r+0xa8>
 8018aae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018ab2:	d1c4      	bne.n	8018a3e <__swsetup_r+0x26>
 8018ab4:	bd38      	pop	{r3, r4, r5, pc}
 8018ab6:	0781      	lsls	r1, r0, #30
 8018ab8:	bf58      	it	pl
 8018aba:	6963      	ldrpl	r3, [r4, #20]
 8018abc:	60a3      	str	r3, [r4, #8]
 8018abe:	e7f4      	b.n	8018aaa <__swsetup_r+0x92>
 8018ac0:	2000      	movs	r0, #0
 8018ac2:	e7f7      	b.n	8018ab4 <__swsetup_r+0x9c>
 8018ac4:	2000039c 	.word	0x2000039c

08018ac8 <_raise_r>:
 8018ac8:	291f      	cmp	r1, #31
 8018aca:	b538      	push	{r3, r4, r5, lr}
 8018acc:	4604      	mov	r4, r0
 8018ace:	460d      	mov	r5, r1
 8018ad0:	d904      	bls.n	8018adc <_raise_r+0x14>
 8018ad2:	2316      	movs	r3, #22
 8018ad4:	6003      	str	r3, [r0, #0]
 8018ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8018ada:	bd38      	pop	{r3, r4, r5, pc}
 8018adc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018ade:	b112      	cbz	r2, 8018ae6 <_raise_r+0x1e>
 8018ae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ae4:	b94b      	cbnz	r3, 8018afa <_raise_r+0x32>
 8018ae6:	4620      	mov	r0, r4
 8018ae8:	f000 f830 	bl	8018b4c <_getpid_r>
 8018aec:	462a      	mov	r2, r5
 8018aee:	4601      	mov	r1, r0
 8018af0:	4620      	mov	r0, r4
 8018af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018af6:	f000 b817 	b.w	8018b28 <_kill_r>
 8018afa:	2b01      	cmp	r3, #1
 8018afc:	d00a      	beq.n	8018b14 <_raise_r+0x4c>
 8018afe:	1c59      	adds	r1, r3, #1
 8018b00:	d103      	bne.n	8018b0a <_raise_r+0x42>
 8018b02:	2316      	movs	r3, #22
 8018b04:	6003      	str	r3, [r0, #0]
 8018b06:	2001      	movs	r0, #1
 8018b08:	e7e7      	b.n	8018ada <_raise_r+0x12>
 8018b0a:	2400      	movs	r4, #0
 8018b0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018b10:	4628      	mov	r0, r5
 8018b12:	4798      	blx	r3
 8018b14:	2000      	movs	r0, #0
 8018b16:	e7e0      	b.n	8018ada <_raise_r+0x12>

08018b18 <raise>:
 8018b18:	4b02      	ldr	r3, [pc, #8]	; (8018b24 <raise+0xc>)
 8018b1a:	4601      	mov	r1, r0
 8018b1c:	6818      	ldr	r0, [r3, #0]
 8018b1e:	f7ff bfd3 	b.w	8018ac8 <_raise_r>
 8018b22:	bf00      	nop
 8018b24:	2000039c 	.word	0x2000039c

08018b28 <_kill_r>:
 8018b28:	b538      	push	{r3, r4, r5, lr}
 8018b2a:	4d07      	ldr	r5, [pc, #28]	; (8018b48 <_kill_r+0x20>)
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	4604      	mov	r4, r0
 8018b30:	4608      	mov	r0, r1
 8018b32:	4611      	mov	r1, r2
 8018b34:	602b      	str	r3, [r5, #0]
 8018b36:	f7ec fa79 	bl	800502c <_kill>
 8018b3a:	1c43      	adds	r3, r0, #1
 8018b3c:	d102      	bne.n	8018b44 <_kill_r+0x1c>
 8018b3e:	682b      	ldr	r3, [r5, #0]
 8018b40:	b103      	cbz	r3, 8018b44 <_kill_r+0x1c>
 8018b42:	6023      	str	r3, [r4, #0]
 8018b44:	bd38      	pop	{r3, r4, r5, pc}
 8018b46:	bf00      	nop
 8018b48:	20003000 	.word	0x20003000

08018b4c <_getpid_r>:
 8018b4c:	f7ec ba66 	b.w	800501c <_getpid>

08018b50 <__swhatbuf_r>:
 8018b50:	b570      	push	{r4, r5, r6, lr}
 8018b52:	460c      	mov	r4, r1
 8018b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b58:	2900      	cmp	r1, #0
 8018b5a:	b096      	sub	sp, #88	; 0x58
 8018b5c:	4615      	mov	r5, r2
 8018b5e:	461e      	mov	r6, r3
 8018b60:	da0d      	bge.n	8018b7e <__swhatbuf_r+0x2e>
 8018b62:	89a3      	ldrh	r3, [r4, #12]
 8018b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018b68:	f04f 0100 	mov.w	r1, #0
 8018b6c:	bf0c      	ite	eq
 8018b6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018b72:	2340      	movne	r3, #64	; 0x40
 8018b74:	2000      	movs	r0, #0
 8018b76:	6031      	str	r1, [r6, #0]
 8018b78:	602b      	str	r3, [r5, #0]
 8018b7a:	b016      	add	sp, #88	; 0x58
 8018b7c:	bd70      	pop	{r4, r5, r6, pc}
 8018b7e:	466a      	mov	r2, sp
 8018b80:	f000 f848 	bl	8018c14 <_fstat_r>
 8018b84:	2800      	cmp	r0, #0
 8018b86:	dbec      	blt.n	8018b62 <__swhatbuf_r+0x12>
 8018b88:	9901      	ldr	r1, [sp, #4]
 8018b8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018b8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018b92:	4259      	negs	r1, r3
 8018b94:	4159      	adcs	r1, r3
 8018b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b9a:	e7eb      	b.n	8018b74 <__swhatbuf_r+0x24>

08018b9c <__smakebuf_r>:
 8018b9c:	898b      	ldrh	r3, [r1, #12]
 8018b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ba0:	079d      	lsls	r5, r3, #30
 8018ba2:	4606      	mov	r6, r0
 8018ba4:	460c      	mov	r4, r1
 8018ba6:	d507      	bpl.n	8018bb8 <__smakebuf_r+0x1c>
 8018ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018bac:	6023      	str	r3, [r4, #0]
 8018bae:	6123      	str	r3, [r4, #16]
 8018bb0:	2301      	movs	r3, #1
 8018bb2:	6163      	str	r3, [r4, #20]
 8018bb4:	b002      	add	sp, #8
 8018bb6:	bd70      	pop	{r4, r5, r6, pc}
 8018bb8:	ab01      	add	r3, sp, #4
 8018bba:	466a      	mov	r2, sp
 8018bbc:	f7ff ffc8 	bl	8018b50 <__swhatbuf_r>
 8018bc0:	9900      	ldr	r1, [sp, #0]
 8018bc2:	4605      	mov	r5, r0
 8018bc4:	4630      	mov	r0, r6
 8018bc6:	f7fe febd 	bl	8017944 <_malloc_r>
 8018bca:	b948      	cbnz	r0, 8018be0 <__smakebuf_r+0x44>
 8018bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bd0:	059a      	lsls	r2, r3, #22
 8018bd2:	d4ef      	bmi.n	8018bb4 <__smakebuf_r+0x18>
 8018bd4:	f023 0303 	bic.w	r3, r3, #3
 8018bd8:	f043 0302 	orr.w	r3, r3, #2
 8018bdc:	81a3      	strh	r3, [r4, #12]
 8018bde:	e7e3      	b.n	8018ba8 <__smakebuf_r+0xc>
 8018be0:	89a3      	ldrh	r3, [r4, #12]
 8018be2:	6020      	str	r0, [r4, #0]
 8018be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018be8:	81a3      	strh	r3, [r4, #12]
 8018bea:	9b00      	ldr	r3, [sp, #0]
 8018bec:	6163      	str	r3, [r4, #20]
 8018bee:	9b01      	ldr	r3, [sp, #4]
 8018bf0:	6120      	str	r0, [r4, #16]
 8018bf2:	b15b      	cbz	r3, 8018c0c <__smakebuf_r+0x70>
 8018bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	f000 f81d 	bl	8018c38 <_isatty_r>
 8018bfe:	b128      	cbz	r0, 8018c0c <__smakebuf_r+0x70>
 8018c00:	89a3      	ldrh	r3, [r4, #12]
 8018c02:	f023 0303 	bic.w	r3, r3, #3
 8018c06:	f043 0301 	orr.w	r3, r3, #1
 8018c0a:	81a3      	strh	r3, [r4, #12]
 8018c0c:	89a3      	ldrh	r3, [r4, #12]
 8018c0e:	431d      	orrs	r5, r3
 8018c10:	81a5      	strh	r5, [r4, #12]
 8018c12:	e7cf      	b.n	8018bb4 <__smakebuf_r+0x18>

08018c14 <_fstat_r>:
 8018c14:	b538      	push	{r3, r4, r5, lr}
 8018c16:	4d07      	ldr	r5, [pc, #28]	; (8018c34 <_fstat_r+0x20>)
 8018c18:	2300      	movs	r3, #0
 8018c1a:	4604      	mov	r4, r0
 8018c1c:	4608      	mov	r0, r1
 8018c1e:	4611      	mov	r1, r2
 8018c20:	602b      	str	r3, [r5, #0]
 8018c22:	f7ec fa62 	bl	80050ea <_fstat>
 8018c26:	1c43      	adds	r3, r0, #1
 8018c28:	d102      	bne.n	8018c30 <_fstat_r+0x1c>
 8018c2a:	682b      	ldr	r3, [r5, #0]
 8018c2c:	b103      	cbz	r3, 8018c30 <_fstat_r+0x1c>
 8018c2e:	6023      	str	r3, [r4, #0]
 8018c30:	bd38      	pop	{r3, r4, r5, pc}
 8018c32:	bf00      	nop
 8018c34:	20003000 	.word	0x20003000

08018c38 <_isatty_r>:
 8018c38:	b538      	push	{r3, r4, r5, lr}
 8018c3a:	4d06      	ldr	r5, [pc, #24]	; (8018c54 <_isatty_r+0x1c>)
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	4604      	mov	r4, r0
 8018c40:	4608      	mov	r0, r1
 8018c42:	602b      	str	r3, [r5, #0]
 8018c44:	f7ec fa61 	bl	800510a <_isatty>
 8018c48:	1c43      	adds	r3, r0, #1
 8018c4a:	d102      	bne.n	8018c52 <_isatty_r+0x1a>
 8018c4c:	682b      	ldr	r3, [r5, #0]
 8018c4e:	b103      	cbz	r3, 8018c52 <_isatty_r+0x1a>
 8018c50:	6023      	str	r3, [r4, #0]
 8018c52:	bd38      	pop	{r3, r4, r5, pc}
 8018c54:	20003000 	.word	0x20003000

08018c58 <fmod>:
 8018c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c5a:	ed2d 8b02 	vpush	{d8}
 8018c5e:	ec57 6b10 	vmov	r6, r7, d0
 8018c62:	ec55 4b11 	vmov	r4, r5, d1
 8018c66:	f000 f86d 	bl	8018d44 <__ieee754_fmod>
 8018c6a:	4622      	mov	r2, r4
 8018c6c:	462b      	mov	r3, r5
 8018c6e:	4630      	mov	r0, r6
 8018c70:	4639      	mov	r1, r7
 8018c72:	eeb0 8a40 	vmov.f32	s16, s0
 8018c76:	eef0 8a60 	vmov.f32	s17, s1
 8018c7a:	f7e7 ff7f 	bl	8000b7c <__aeabi_dcmpun>
 8018c7e:	b990      	cbnz	r0, 8018ca6 <fmod+0x4e>
 8018c80:	2200      	movs	r2, #0
 8018c82:	2300      	movs	r3, #0
 8018c84:	4620      	mov	r0, r4
 8018c86:	4629      	mov	r1, r5
 8018c88:	f7e7 ff46 	bl	8000b18 <__aeabi_dcmpeq>
 8018c8c:	b158      	cbz	r0, 8018ca6 <fmod+0x4e>
 8018c8e:	f7fd ff3b 	bl	8016b08 <__errno>
 8018c92:	2321      	movs	r3, #33	; 0x21
 8018c94:	6003      	str	r3, [r0, #0]
 8018c96:	2200      	movs	r2, #0
 8018c98:	2300      	movs	r3, #0
 8018c9a:	4610      	mov	r0, r2
 8018c9c:	4619      	mov	r1, r3
 8018c9e:	f7e7 fdfd 	bl	800089c <__aeabi_ddiv>
 8018ca2:	ec41 0b18 	vmov	d8, r0, r1
 8018ca6:	eeb0 0a48 	vmov.f32	s0, s16
 8018caa:	eef0 0a68 	vmov.f32	s1, s17
 8018cae:	ecbd 8b02 	vpop	{d8}
 8018cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018cb4 <round>:
 8018cb4:	ec53 2b10 	vmov	r2, r3, d0
 8018cb8:	b570      	push	{r4, r5, r6, lr}
 8018cba:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8018cbe:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8018cc2:	2813      	cmp	r0, #19
 8018cc4:	ee10 5a10 	vmov	r5, s0
 8018cc8:	4619      	mov	r1, r3
 8018cca:	dc18      	bgt.n	8018cfe <round+0x4a>
 8018ccc:	2800      	cmp	r0, #0
 8018cce:	da09      	bge.n	8018ce4 <round+0x30>
 8018cd0:	3001      	adds	r0, #1
 8018cd2:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8018cd6:	d103      	bne.n	8018ce0 <round+0x2c>
 8018cd8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8018cdc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	e02a      	b.n	8018d3a <round+0x86>
 8018ce4:	4c16      	ldr	r4, [pc, #88]	; (8018d40 <round+0x8c>)
 8018ce6:	4104      	asrs	r4, r0
 8018ce8:	ea03 0604 	and.w	r6, r3, r4
 8018cec:	4316      	orrs	r6, r2
 8018cee:	d011      	beq.n	8018d14 <round+0x60>
 8018cf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018cf4:	4103      	asrs	r3, r0
 8018cf6:	440b      	add	r3, r1
 8018cf8:	ea23 0104 	bic.w	r1, r3, r4
 8018cfc:	e7f0      	b.n	8018ce0 <round+0x2c>
 8018cfe:	2833      	cmp	r0, #51	; 0x33
 8018d00:	dd0b      	ble.n	8018d1a <round+0x66>
 8018d02:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018d06:	d105      	bne.n	8018d14 <round+0x60>
 8018d08:	ee10 0a10 	vmov	r0, s0
 8018d0c:	f7e7 fae6 	bl	80002dc <__adddf3>
 8018d10:	4602      	mov	r2, r0
 8018d12:	460b      	mov	r3, r1
 8018d14:	ec43 2b10 	vmov	d0, r2, r3
 8018d18:	bd70      	pop	{r4, r5, r6, pc}
 8018d1a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8018d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8018d22:	40f4      	lsrs	r4, r6
 8018d24:	4214      	tst	r4, r2
 8018d26:	d0f5      	beq.n	8018d14 <round+0x60>
 8018d28:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8018d2c:	2301      	movs	r3, #1
 8018d2e:	4083      	lsls	r3, r0
 8018d30:	195b      	adds	r3, r3, r5
 8018d32:	bf28      	it	cs
 8018d34:	3101      	addcs	r1, #1
 8018d36:	ea23 0304 	bic.w	r3, r3, r4
 8018d3a:	461a      	mov	r2, r3
 8018d3c:	460b      	mov	r3, r1
 8018d3e:	e7e9      	b.n	8018d14 <round+0x60>
 8018d40:	000fffff 	.word	0x000fffff

08018d44 <__ieee754_fmod>:
 8018d44:	ec53 2b11 	vmov	r2, r3, d1
 8018d48:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8018d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d50:	ea5c 0402 	orrs.w	r4, ip, r2
 8018d54:	ec51 0b10 	vmov	r0, r1, d0
 8018d58:	ee11 7a10 	vmov	r7, s2
 8018d5c:	ee11 ea10 	vmov	lr, s2
 8018d60:	461e      	mov	r6, r3
 8018d62:	d00c      	beq.n	8018d7e <__ieee754_fmod+0x3a>
 8018d64:	4c78      	ldr	r4, [pc, #480]	; (8018f48 <__ieee754_fmod+0x204>)
 8018d66:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8018d6a:	45a0      	cmp	r8, r4
 8018d6c:	4689      	mov	r9, r1
 8018d6e:	dc06      	bgt.n	8018d7e <__ieee754_fmod+0x3a>
 8018d70:	4254      	negs	r4, r2
 8018d72:	4d76      	ldr	r5, [pc, #472]	; (8018f4c <__ieee754_fmod+0x208>)
 8018d74:	4314      	orrs	r4, r2
 8018d76:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8018d7a:	42ac      	cmp	r4, r5
 8018d7c:	d909      	bls.n	8018d92 <__ieee754_fmod+0x4e>
 8018d7e:	f7e7 fc63 	bl	8000648 <__aeabi_dmul>
 8018d82:	4602      	mov	r2, r0
 8018d84:	460b      	mov	r3, r1
 8018d86:	f7e7 fd89 	bl	800089c <__aeabi_ddiv>
 8018d8a:	ec41 0b10 	vmov	d0, r0, r1
 8018d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d92:	45e0      	cmp	r8, ip
 8018d94:	ee10 aa10 	vmov	sl, s0
 8018d98:	ee10 4a10 	vmov	r4, s0
 8018d9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018da0:	dc09      	bgt.n	8018db6 <__ieee754_fmod+0x72>
 8018da2:	dbf2      	blt.n	8018d8a <__ieee754_fmod+0x46>
 8018da4:	4290      	cmp	r0, r2
 8018da6:	d3f0      	bcc.n	8018d8a <__ieee754_fmod+0x46>
 8018da8:	d105      	bne.n	8018db6 <__ieee754_fmod+0x72>
 8018daa:	4b69      	ldr	r3, [pc, #420]	; (8018f50 <__ieee754_fmod+0x20c>)
 8018dac:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8018db0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018db4:	e7e9      	b.n	8018d8a <__ieee754_fmod+0x46>
 8018db6:	4a65      	ldr	r2, [pc, #404]	; (8018f4c <__ieee754_fmod+0x208>)
 8018db8:	ea19 0f02 	tst.w	r9, r2
 8018dbc:	d148      	bne.n	8018e50 <__ieee754_fmod+0x10c>
 8018dbe:	f1b8 0f00 	cmp.w	r8, #0
 8018dc2:	d13d      	bne.n	8018e40 <__ieee754_fmod+0xfc>
 8018dc4:	4963      	ldr	r1, [pc, #396]	; (8018f54 <__ieee754_fmod+0x210>)
 8018dc6:	4653      	mov	r3, sl
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	dc36      	bgt.n	8018e3a <__ieee754_fmod+0xf6>
 8018dcc:	4216      	tst	r6, r2
 8018dce:	d14f      	bne.n	8018e70 <__ieee754_fmod+0x12c>
 8018dd0:	f1bc 0f00 	cmp.w	ip, #0
 8018dd4:	d144      	bne.n	8018e60 <__ieee754_fmod+0x11c>
 8018dd6:	4a5f      	ldr	r2, [pc, #380]	; (8018f54 <__ieee754_fmod+0x210>)
 8018dd8:	463b      	mov	r3, r7
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	dc3d      	bgt.n	8018e5a <__ieee754_fmod+0x116>
 8018dde:	485e      	ldr	r0, [pc, #376]	; (8018f58 <__ieee754_fmod+0x214>)
 8018de0:	4281      	cmp	r1, r0
 8018de2:	db4a      	blt.n	8018e7a <__ieee754_fmod+0x136>
 8018de4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018dec:	485a      	ldr	r0, [pc, #360]	; (8018f58 <__ieee754_fmod+0x214>)
 8018dee:	4282      	cmp	r2, r0
 8018df0:	db57      	blt.n	8018ea2 <__ieee754_fmod+0x15e>
 8018df2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8018df6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8018dfa:	1a89      	subs	r1, r1, r2
 8018dfc:	1b98      	subs	r0, r3, r6
 8018dfe:	eba4 070e 	sub.w	r7, r4, lr
 8018e02:	2900      	cmp	r1, #0
 8018e04:	d162      	bne.n	8018ecc <__ieee754_fmod+0x188>
 8018e06:	4574      	cmp	r4, lr
 8018e08:	bf38      	it	cc
 8018e0a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8018e0e:	2800      	cmp	r0, #0
 8018e10:	bfa4      	itt	ge
 8018e12:	463c      	movge	r4, r7
 8018e14:	4603      	movge	r3, r0
 8018e16:	ea53 0104 	orrs.w	r1, r3, r4
 8018e1a:	d0c6      	beq.n	8018daa <__ieee754_fmod+0x66>
 8018e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018e20:	db69      	blt.n	8018ef6 <__ieee754_fmod+0x1b2>
 8018e22:	494d      	ldr	r1, [pc, #308]	; (8018f58 <__ieee754_fmod+0x214>)
 8018e24:	428a      	cmp	r2, r1
 8018e26:	db6c      	blt.n	8018f02 <__ieee754_fmod+0x1be>
 8018e28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018e2c:	432b      	orrs	r3, r5
 8018e2e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8018e32:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018e36:	4620      	mov	r0, r4
 8018e38:	e7a7      	b.n	8018d8a <__ieee754_fmod+0x46>
 8018e3a:	3901      	subs	r1, #1
 8018e3c:	005b      	lsls	r3, r3, #1
 8018e3e:	e7c3      	b.n	8018dc8 <__ieee754_fmod+0x84>
 8018e40:	4945      	ldr	r1, [pc, #276]	; (8018f58 <__ieee754_fmod+0x214>)
 8018e42:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	ddc0      	ble.n	8018dcc <__ieee754_fmod+0x88>
 8018e4a:	3901      	subs	r1, #1
 8018e4c:	005b      	lsls	r3, r3, #1
 8018e4e:	e7fa      	b.n	8018e46 <__ieee754_fmod+0x102>
 8018e50:	ea4f 5128 	mov.w	r1, r8, asr #20
 8018e54:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018e58:	e7b8      	b.n	8018dcc <__ieee754_fmod+0x88>
 8018e5a:	3a01      	subs	r2, #1
 8018e5c:	005b      	lsls	r3, r3, #1
 8018e5e:	e7bc      	b.n	8018dda <__ieee754_fmod+0x96>
 8018e60:	4a3d      	ldr	r2, [pc, #244]	; (8018f58 <__ieee754_fmod+0x214>)
 8018e62:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	ddb9      	ble.n	8018dde <__ieee754_fmod+0x9a>
 8018e6a:	3a01      	subs	r2, #1
 8018e6c:	005b      	lsls	r3, r3, #1
 8018e6e:	e7fa      	b.n	8018e66 <__ieee754_fmod+0x122>
 8018e70:	ea4f 522c 	mov.w	r2, ip, asr #20
 8018e74:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018e78:	e7b1      	b.n	8018dde <__ieee754_fmod+0x9a>
 8018e7a:	1a40      	subs	r0, r0, r1
 8018e7c:	281f      	cmp	r0, #31
 8018e7e:	dc0a      	bgt.n	8018e96 <__ieee754_fmod+0x152>
 8018e80:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8018e84:	fa08 f800 	lsl.w	r8, r8, r0
 8018e88:	fa2a f303 	lsr.w	r3, sl, r3
 8018e8c:	ea43 0308 	orr.w	r3, r3, r8
 8018e90:	fa0a f400 	lsl.w	r4, sl, r0
 8018e94:	e7aa      	b.n	8018dec <__ieee754_fmod+0xa8>
 8018e96:	4b31      	ldr	r3, [pc, #196]	; (8018f5c <__ieee754_fmod+0x218>)
 8018e98:	1a5b      	subs	r3, r3, r1
 8018e9a:	fa0a f303 	lsl.w	r3, sl, r3
 8018e9e:	2400      	movs	r4, #0
 8018ea0:	e7a4      	b.n	8018dec <__ieee754_fmod+0xa8>
 8018ea2:	1a80      	subs	r0, r0, r2
 8018ea4:	281f      	cmp	r0, #31
 8018ea6:	dc0a      	bgt.n	8018ebe <__ieee754_fmod+0x17a>
 8018ea8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8018eac:	fa0c fc00 	lsl.w	ip, ip, r0
 8018eb0:	fa27 f606 	lsr.w	r6, r7, r6
 8018eb4:	ea46 060c 	orr.w	r6, r6, ip
 8018eb8:	fa07 fe00 	lsl.w	lr, r7, r0
 8018ebc:	e79d      	b.n	8018dfa <__ieee754_fmod+0xb6>
 8018ebe:	4e27      	ldr	r6, [pc, #156]	; (8018f5c <__ieee754_fmod+0x218>)
 8018ec0:	1ab6      	subs	r6, r6, r2
 8018ec2:	fa07 f606 	lsl.w	r6, r7, r6
 8018ec6:	f04f 0e00 	mov.w	lr, #0
 8018eca:	e796      	b.n	8018dfa <__ieee754_fmod+0xb6>
 8018ecc:	4574      	cmp	r4, lr
 8018ece:	bf38      	it	cc
 8018ed0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8018ed4:	2800      	cmp	r0, #0
 8018ed6:	da05      	bge.n	8018ee4 <__ieee754_fmod+0x1a0>
 8018ed8:	0fe0      	lsrs	r0, r4, #31
 8018eda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018ede:	0064      	lsls	r4, r4, #1
 8018ee0:	3901      	subs	r1, #1
 8018ee2:	e78b      	b.n	8018dfc <__ieee754_fmod+0xb8>
 8018ee4:	ea50 0307 	orrs.w	r3, r0, r7
 8018ee8:	f43f af5f 	beq.w	8018daa <__ieee754_fmod+0x66>
 8018eec:	0ffb      	lsrs	r3, r7, #31
 8018eee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8018ef2:	007c      	lsls	r4, r7, #1
 8018ef4:	e7f4      	b.n	8018ee0 <__ieee754_fmod+0x19c>
 8018ef6:	0fe1      	lsrs	r1, r4, #31
 8018ef8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018efc:	0064      	lsls	r4, r4, #1
 8018efe:	3a01      	subs	r2, #1
 8018f00:	e78c      	b.n	8018e1c <__ieee754_fmod+0xd8>
 8018f02:	1a89      	subs	r1, r1, r2
 8018f04:	2914      	cmp	r1, #20
 8018f06:	dc0a      	bgt.n	8018f1e <__ieee754_fmod+0x1da>
 8018f08:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018f0c:	fa03 f202 	lsl.w	r2, r3, r2
 8018f10:	40cc      	lsrs	r4, r1
 8018f12:	4322      	orrs	r2, r4
 8018f14:	410b      	asrs	r3, r1
 8018f16:	ea43 0105 	orr.w	r1, r3, r5
 8018f1a:	4610      	mov	r0, r2
 8018f1c:	e735      	b.n	8018d8a <__ieee754_fmod+0x46>
 8018f1e:	291f      	cmp	r1, #31
 8018f20:	dc07      	bgt.n	8018f32 <__ieee754_fmod+0x1ee>
 8018f22:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018f26:	40cc      	lsrs	r4, r1
 8018f28:	fa03 f202 	lsl.w	r2, r3, r2
 8018f2c:	4322      	orrs	r2, r4
 8018f2e:	462b      	mov	r3, r5
 8018f30:	e7f1      	b.n	8018f16 <__ieee754_fmod+0x1d2>
 8018f32:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8018f36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018f3a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8018f3e:	32e2      	adds	r2, #226	; 0xe2
 8018f40:	fa43 f202 	asr.w	r2, r3, r2
 8018f44:	e7f3      	b.n	8018f2e <__ieee754_fmod+0x1ea>
 8018f46:	bf00      	nop
 8018f48:	7fefffff 	.word	0x7fefffff
 8018f4c:	7ff00000 	.word	0x7ff00000
 8018f50:	0801bc08 	.word	0x0801bc08
 8018f54:	fffffbed 	.word	0xfffffbed
 8018f58:	fffffc02 	.word	0xfffffc02
 8018f5c:	fffffbe2 	.word	0xfffffbe2

08018f60 <_init>:
 8018f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f62:	bf00      	nop
 8018f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018f66:	bc08      	pop	{r3}
 8018f68:	469e      	mov	lr, r3
 8018f6a:	4770      	bx	lr

08018f6c <_fini>:
 8018f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f6e:	bf00      	nop
 8018f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018f72:	bc08      	pop	{r3}
 8018f74:	469e      	mov	lr, r3
 8018f76:	4770      	bx	lr
