
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017520  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051a0  08017700  08017700  00027700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c8a0  0801c8a0  000304f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c8a0  0801c8a0  0002c8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c8a8  0801c8a8  000304f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c8a8  0801c8a8  0002c8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c8ac  0801c8ac  0002c8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  0801c8b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029d0  200004f0  0801cda0  000304f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002ec0  0801cda0  00032ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e2e5  00000000  00000000  00030563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000644a  00000000  00000000  0005e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028a8  00000000  00000000  00064c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f59  00000000  00000000  00067540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283f1  00000000  00000000  00069499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033d8e  00000000  00000000  0009188a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee3d5  00000000  00000000  000c5618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c3b8  00000000  00000000  001b39f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001bfda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200004f0 	.word	0x200004f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080176e8 	.word	0x080176e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200004f4 	.word	0x200004f4
 800021c:	080176e8 	.word	0x080176e8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000fe2:	0adb      	lsrs	r3, r3, #11
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <FlashCheckCRC>:

bool FlashCheckCRC()
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <FlashCheckCRC+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <FlashCheckCRC+0x70>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3308      	adds	r3, #8
 800101c:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <FlashCheckCRC+0x70>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <FlashCheckCRC+0x74>)
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <FlashCheckCRC+0x78>)
 8001028:	f005 fc66 	bl	80068f8 <HAL_CRC_Calculate>
 800102c:	4603      	mov	r3, r0
 800102e:	2200      	movs	r2, #0
 8001030:	461c      	mov	r4, r3
 8001032:	4615      	mov	r5, r2
 8001034:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800103e:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8001042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800104a:	4299      	cmp	r1, r3
 800104c:	bf08      	it	eq
 800104e:	4290      	cmpeq	r0, r2
 8001050:	d101      	bne.n	8001056 <FlashCheckCRC+0x66>
	{
		return true;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <FlashCheckCRC+0x68>
	}
	return false;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	0801e800 	.word	0x0801e800
 8001068:	20001724 	.word	0x20001724

0800106c <FlashReadToBuf>:


bool FlashReadToBuf()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
	int i = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <FlashReadToBuf+0x88>)
 8001078:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 800107a:	f7ff ffb9 	bl	8000ff0 <FlashCheckCRC>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d031      	beq.n	80010e8 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8001084:	e025      	b.n	80010d2 <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e013      	b.n	80010c0 <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4413      	add	r3, r2
 800109e:	461a      	mov	r2, r3
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d208      	bcs.n	80010ba <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	1d39      	adds	r1, r7, #4
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	440a      	add	r2, r1
 80010b4:	7811      	ldrb	r1, [r2, #0]
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <FlashReadToBuf+0x90>)
 80010b8:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	dde8      	ble.n	8001098 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	3308      	adds	r3, #8
 80010ca:	613b      	str	r3, [r7, #16]
			i = i + 8;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3308      	adds	r3, #8
 80010d0:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d203      	bcs.n	80010e4 <FlashReadToBuf+0x78>
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <FlashReadToBuf+0x94>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d3d0      	bcc.n	8001086 <FlashReadToBuf+0x1a>
		}
		return true;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <FlashReadToBuf+0x7e>
	}
	return false;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0801e800 	.word	0x0801e800
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000510 	.word	0x20000510
 8001100:	0801ffff 	.word	0x0801ffff

08001104 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 8001104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001108:	b08d      	sub	sp, #52	; 0x34
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 800110e:	4b5f      	ldr	r3, [pc, #380]	; (800128c <FlashWrite+0x188>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 8001124:	4b5a      	ldr	r3, [pc, #360]	; (8001290 <FlashWrite+0x18c>)
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 800113c:	f7ff ff96 	bl	800106c <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 8001140:	4a54      	ldr	r2, [pc, #336]	; (8001294 <FlashWrite+0x190>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	461c      	mov	r4, r3
 8001146:	4616      	mov	r6, r2
 8001148:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800114c:	4635      	mov	r5, r6
 800114e:	4623      	mov	r3, r4
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	6859      	ldr	r1, [r3, #4]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115a:	3410      	adds	r4, #16
 800115c:	3610      	adds	r6, #16
 800115e:	4564      	cmp	r4, ip
 8001160:	d1f4      	bne.n	800114c <FlashWrite+0x48>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 8001162:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <FlashWrite+0x194>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	494a      	ldr	r1, [pc, #296]	; (8001294 <FlashWrite+0x190>)
 800116a:	484c      	ldr	r0, [pc, #304]	; (800129c <FlashWrite+0x198>)
 800116c:	f005 fbc4 	bl	80068f8 <HAL_CRC_Calculate>
 8001170:	4603      	mov	r3, r0
 8001172:	2200      	movs	r2, #0
 8001174:	4698      	mov	r8, r3
 8001176:	4691      	mov	r9, r2
 8001178:	e9c7 8906 	strd	r8, r9, [r7, #24]

	HAL_FLASH_Unlock();
 800117c:	f006 f84a 	bl	8007214 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001180:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <FlashWrite+0x19c>)
 8001182:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001186:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001188:	4846      	ldr	r0, [pc, #280]	; (80012a4 <FlashWrite+0x1a0>)
 800118a:	f7ff ff23 	bl	8000fd4 <GetPage>
 800118e:	4604      	mov	r4, r0
 8001190:	483f      	ldr	r0, [pc, #252]	; (8001290 <FlashWrite+0x18c>)
 8001192:	f7ff ff1f 	bl	8000fd4 <GetPage>
 8001196:	4603      	mov	r3, r0
 8001198:	1ae3      	subs	r3, r4, r3
 800119a:	3301      	adds	r3, #1
 800119c:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800119e:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <FlashWrite+0x1a4>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <FlashWrite+0x1a4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 80011aa:	4839      	ldr	r0, [pc, #228]	; (8001290 <FlashWrite+0x18c>)
 80011ac:	f7ff ff12 	bl	8000fd4 <GetPage>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a3d      	ldr	r2, [pc, #244]	; (80012a8 <FlashWrite+0x1a4>)
 80011b4:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 80011b6:	4a3c      	ldr	r2, [pc, #240]	; (80012a8 <FlashWrite+0x1a4>)
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4839      	ldr	r0, [pc, #228]	; (80012a8 <FlashWrite+0x1a4>)
 80011c4:	f006 f912 	bl	80073ec <HAL_FLASHEx_Erase>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d152      	bne.n	8001274 <FlashWrite+0x170>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 80011ce:	e04b      	b.n	8001268 <FlashWrite+0x164>
		{
			for (int j = 0; j < 8; j++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
 80011d4:	e01b      	b.n	800120e <FlashWrite+0x10a>
			{
				if (j + i < bufLength)
 80011d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011da:	4413      	add	r3, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <FlashWrite+0x194>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d20a      	bcs.n	80011fc <FlashWrite+0xf8>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 80011e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	441a      	add	r2, r3
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	f107 0108 	add.w	r1, r7, #8
 80011f2:	440b      	add	r3, r1
 80011f4:	4927      	ldr	r1, [pc, #156]	; (8001294 <FlashWrite+0x190>)
 80011f6:	5c8a      	ldrb	r2, [r1, r2]
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	e005      	b.n	8001208 <FlashWrite+0x104>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	f107 0208 	add.w	r2, r7, #8
 8001202:	4413      	add	r3, r2
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	3301      	adds	r3, #1
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	2b07      	cmp	r3, #7
 8001212:	dde0      	ble.n	80011d6 <FlashWrite+0xd2>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 8001214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <FlashWrite+0x194>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d20f      	bcs.n	800123e <FlashWrite+0x13a>
 800121e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001224:	2000      	movs	r0, #0
 8001226:	f005 ff89 	bl	800713c <HAL_FLASH_Program>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <FlashWrite+0x13a>
			{
				Address = Address + 8;
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	3308      	adds	r3, #8
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	3308      	adds	r3, #8
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123c:	e014      	b.n	8001268 <FlashWrite+0x164>
			}
			else if (i >= bufLength)
 800123e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <FlashWrite+0x194>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d314      	bcc.n	8001272 <FlashWrite+0x16e>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 8001248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800124c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800124e:	2000      	movs	r0, #0
 8001250:	f005 ff74 	bl	800713c <HAL_FLASH_Program>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <FlashWrite+0x164>
				{
					HAL_FLASH_Lock();
 800125a:	f005 fffd 	bl	8007258 <HAL_FLASH_Lock>
					flashWriting = 0;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <FlashWrite+0x188>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
					return true;
 8001264:	2301      	movs	r3, #1
 8001266:	e00b      	b.n	8001280 <FlashWrite+0x17c>
		while (Address < FLASH_USER_END_ADDR)
 8001268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <FlashWrite+0x1a0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d3af      	bcc.n	80011d0 <FlashWrite+0xcc>
 8001270:	e000      	b.n	8001274 <FlashWrite+0x170>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 8001272:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001274:	f005 fff0 	bl	8007258 <HAL_FLASH_Lock>

	flashWriting = 0;
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <FlashWrite+0x188>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	return false;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3734      	adds	r7, #52	; 0x34
 8001284:	46bd      	mov	sp, r7
 8001286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800128a:	bf00      	nop
 800128c:	2000050c 	.word	0x2000050c
 8001290:	0801e800 	.word	0x0801e800
 8001294:	20000510 	.word	0x20000510
 8001298:	20000000 	.word	0x20000000
 800129c:	20001724 	.word	0x20001724
 80012a0:	40022000 	.word	0x40022000
 80012a4:	0801ffff 	.word	0x0801ffff
 80012a8:	20000540 	.word	0x20000540

080012ac <clamp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

double clamp(double d, double min, double max) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	ed87 0b04 	vstr	d0, [r7, #16]
 80012b6:	ed87 1b02 	vstr	d1, [r7, #8]
 80012ba:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 80012be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012c6:	f7ff fc31 	bl	8000b2c <__aeabi_dcmplt>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <clamp+0x2a>
 80012d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012d4:	e001      	b.n	80012da <clamp+0x2e>
 80012d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012da:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 80012de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012e6:	f7ff fc3f 	bl	8000b68 <__aeabi_dcmpgt>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <clamp+0x4a>
 80012f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012f4:	e001      	b.n	80012fa <clamp+0x4e>
 80012f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80012fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001302:	eef0 0a67 	vmov.f32	s1, s15
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
	/*if(color ==C_BLACK){
		color = 0b0010100100000101;
	}*/

	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	02db      	lsls	r3, r3, #11
 800131a:	b21a      	sxth	r2, r3
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	b29b      	uxth	r3, r3
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	b29b      	uxth	r3, r3
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <get_mean_ADC_reading>:
	return ADC_filter_mean/adc_buffer_len;
}


/* Returns the average ADC_buffer vector */
float get_mean_ADC_reading(uint16_t *adc_buffer , uint8_t adc_buffer_len){
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	ADC_filter_mean = 0;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <get_mean_ADC_reading+0x70>)
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e013      	b.n	800137a <get_mean_ADC_reading+0x42>
		ADC_filter_mean += adc_buffer[n];
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <get_mean_ADC_reading+0x70>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <get_mean_ADC_reading+0x70>)
 8001370:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	3301      	adds	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3e7      	bcc.n	8001352 <get_mean_ADC_reading+0x1a>
	}
	return ADC_filter_mean/adc_buffer_len;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <get_mean_ADC_reading+0x70>)
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001392:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001396:	eef0 7a66 	vmov.f32	s15, s13
}
 800139a:	eeb0 0a67 	vmov.f32	s0, s15
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	200005b4 	.word	0x200005b4
 80013ac:	00000000 	.word	0x00000000

080013b0 <get_bus_voltage>:

void get_bus_voltage(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(ADC_BUF_VIN, ADC_BUF_VIN_LEN), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION; /* Moving average filter */
 80013b4:	2132      	movs	r1, #50	; 0x32
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <get_bus_voltage+0x50>)
 80013b8:	f7ff ffbe 	bl	8001338 <get_mean_ADC_reading>
 80013bc:	eef0 7a40 	vmov.f32	s15, s0
 80013c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c4:	490f      	ldr	r1, [pc, #60]	; (8001404 <get_bus_voltage+0x54>)
 80013c6:	ee17 0a90 	vmov	r0, s15
 80013ca:	f001 ff2d 	bl	8003228 <Moving_Average_Compute>
 80013ce:	ec51 0b10 	vmov	r0, r1, d0
 80013d2:	a309      	add	r3, pc, #36	; (adr r3, 80013f8 <get_bus_voltage+0x48>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f936 	bl	8000648 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fc28 	bl	8000c38 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <get_bus_voltage+0x58>)
 80013ec:	6113      	str	r3, [r2, #16]
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	f3af 8000 	nop.w
 80013f8:	2e062cfe 	.word	0x2e062cfe
 80013fc:	3f7e5d97 	.word	0x3f7e5d97
 8001400:	200005b8 	.word	0x200005b8
 8001404:	2000099c 	.word	0x2000099c
 8001408:	20000028 	.word	0x20000028
 800140c:	00000000 	.word	0x00000000

08001410 <get_actual_temperature>:

void get_actual_temperature(){
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	float TC_temperature_temp = Moving_Average_Compute(100, &actual_temperature_filter_struct); /* Moving average filter */
 8001416:	4980      	ldr	r1, [pc, #512]	; (8001618 <get_actual_temperature+0x208>)
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	f001 ff05 	bl	8003228 <Moving_Average_Compute>
 800141e:	ec53 2b10 	vmov	r2, r3, d0
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fc07 	bl	8000c38 <__aeabi_d2f>
 800142a:	4603      	mov	r3, r0
 800142c:	607b      	str	r3, [r7, #4]
	if(handle == T210){
 800142e:	4b7b      	ldr	r3, [pc, #492]	; (800161c <get_actual_temperature+0x20c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d14e      	bne.n	80014d4 <get_actual_temperature+0xc4>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff f8ae 	bl	8000598 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 80015c0 <get_actual_temperature+0x1b0>
 8001444:	ec43 2b10 	vmov	d0, r2, r3
 8001448:	f015 f8c0 	bl	80165cc <pow>
 800144c:	ec51 0b10 	vmov	r0, r1, d0
 8001450:	a35d      	add	r3, pc, #372	; (adr r3, 80015c8 <get_actual_temperature+0x1b8>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f8f7 	bl	8000648 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4614      	mov	r4, r2
 8001460:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff f898 	bl	8000598 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 80015d0 <get_actual_temperature+0x1c0>
 8001470:	ec43 2b10 	vmov	d0, r2, r3
 8001474:	f015 f8aa 	bl	80165cc <pow>
 8001478:	ec51 0b10 	vmov	r0, r1, d0
 800147c:	a356      	add	r3, pc, #344	; (adr r3, 80015d8 <get_actual_temperature+0x1c8>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f8e1 	bl	8000648 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7fe ff25 	bl	80002dc <__adddf3>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4614      	mov	r4, r2
 8001498:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff f87c 	bl	8000598 <__aeabi_f2d>
 80014a0:	a34f      	add	r3, pc, #316	; (adr r3, 80015e0 <get_actual_temperature+0x1d0>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f8cf 	bl	8000648 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4620      	mov	r0, r4
 80014b0:	4629      	mov	r1, r5
 80014b2:	f7fe ff13 	bl	80002dc <__adddf3>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	a34a      	add	r3, pc, #296	; (adr r3, 80015e8 <get_actual_temperature+0x1d8>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7fe ff0a 	bl	80002dc <__adddf3>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 80014cc:	4954      	ldr	r1, [pc, #336]	; (8001620 <get_actual_temperature+0x210>)
 80014ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80014d2:	e051      	b.n	8001578 <get_actual_temperature+0x168>
	}
	else if(handle == T245){
 80014d4:	4b51      	ldr	r3, [pc, #324]	; (800161c <get_actual_temperature+0x20c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d14d      	bne.n	8001578 <get_actual_temperature+0x168>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff f85b 	bl	8000598 <__aeabi_f2d>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	ed9f 1b36 	vldr	d1, [pc, #216]	; 80015c0 <get_actual_temperature+0x1b0>
 80014ea:	ec43 2b10 	vmov	d0, r2, r3
 80014ee:	f015 f86d 	bl	80165cc <pow>
 80014f2:	ec51 0b10 	vmov	r0, r1, d0
 80014f6:	a33e      	add	r3, pc, #248	; (adr r3, 80015f0 <get_actual_temperature+0x1e0>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f8a4 	bl	8000648 <__aeabi_dmul>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4614      	mov	r4, r2
 8001506:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff f845 	bl	8000598 <__aeabi_f2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 80015d0 <get_actual_temperature+0x1c0>
 8001516:	ec43 2b10 	vmov	d0, r2, r3
 800151a:	f015 f857 	bl	80165cc <pow>
 800151e:	ec51 0b10 	vmov	r0, r1, d0
 8001522:	a335      	add	r3, pc, #212	; (adr r3, 80015f8 <get_actual_temperature+0x1e8>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f88e 	bl	8000648 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fed2 	bl	80002dc <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4614      	mov	r4, r2
 800153e:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff f829 	bl	8000598 <__aeabi_f2d>
 8001546:	a32e      	add	r3, pc, #184	; (adr r3, 8001600 <get_actual_temperature+0x1f0>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7ff f87c 	bl	8000648 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7fe fec0 	bl	80002dc <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	a328      	add	r3, pc, #160	; (adr r3, 8001608 <get_actual_temperature+0x1f8>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe feb7 	bl	80002dc <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 8001572:	492b      	ldr	r1, [pc, #172]	; (8001620 <get_actual_temperature+0x210>)
 8001574:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.actual_temperature = sensor_values.actual_temperature + flash_values.temperature_offset; // Add temperature offset value
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <get_actual_temperature+0x210>)
 800157a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <get_actual_temperature+0x214>)
 8001580:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001584:	f7fe feaa 	bl	80002dc <__adddf3>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4924      	ldr	r1, [pc, #144]	; (8001620 <get_actual_temperature+0x210>)
 800158e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if(sensor_values.actual_temperature > 999){
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <get_actual_temperature+0x210>)
 8001594:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001598:	a31d      	add	r3, pc, #116	; (adr r3, 8001610 <get_actual_temperature+0x200>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff fae3 	bl	8000b68 <__aeabi_dcmpgt>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d100      	bne.n	80015aa <get_actual_temperature+0x19a>
		sensor_values.actual_temperature = 999;
	}
}
 80015a8:	e005      	b.n	80015b6 <get_actual_temperature+0x1a6>
		sensor_values.actual_temperature = 999;
 80015aa:	491d      	ldr	r1, [pc, #116]	; (8001620 <get_actual_temperature+0x210>)
 80015ac:	a318      	add	r3, pc, #96	; (adr r3, 8001610 <get_actual_temperature+0x200>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bdb0      	pop	{r4, r5, r7, pc}
 80015be:	bf00      	nop
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40080000 	.word	0x40080000
 80015c8:	e6c91459 	.word	0xe6c91459
 80015cc:	be3d333c 	.word	0xbe3d333c
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40000000 	.word	0x40000000
 80015d8:	77c4dab0 	.word	0x77c4dab0
 80015dc:	bed98561 	.word	0xbed98561
 80015e0:	0aa653bc 	.word	0x0aa653bc
 80015e4:	3fd1585a 	.word	0x3fd1585a
 80015e8:	d797deed 	.word	0xd797deed
 80015ec:	40396624 	.word	0x40396624
 80015f0:	b4effad8 	.word	0xb4effad8
 80015f4:	3e21f933 	.word	0x3e21f933
 80015f8:	c7e1dac1 	.word	0xc7e1dac1
 80015fc:	bee97525 	.word	0xbee97525
 8001600:	8d8ee863 	.word	0x8d8ee863
 8001604:	3fbe16b0 	.word	0x3fbe16b0
 8001608:	7373b751 	.word	0x7373b751
 800160c:	40390d47 	.word	0x40390d47
 8001610:	00000000 	.word	0x00000000
 8001614:	408f3800 	.word	0x408f3800
 8001618:	20000670 	.word	0x20000670
 800161c:	20000550 	.word	0x20000550
 8001620:	20000028 	.word	0x20000028
 8001624:	20000628 	.word	0x20000628

08001628 <debugPrint>:

void debugPrint(char _out[]){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS((uint8_t *) _out, strlen(_out));
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <get_set_temperature>:
	}
}


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 800163c:	b598      	push	{r3, r4, r7, lr}
 800163e:	af00      	add	r7, sp, #0
	TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8001640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff84 	bl	8000554 <__aeabi_ui2d>
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <get_set_temperature+0x64>)
 800164e:	ed93 7b00 	vldr	d7, [r3]
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <get_set_temperature+0x68>)
 8001654:	ed93 6b00 	vldr	d6, [r3]
 8001658:	eeb0 2a46 	vmov.f32	s4, s12
 800165c:	eef0 2a66 	vmov.f32	s5, s13
 8001660:	eeb0 1a47 	vmov.f32	s2, s14
 8001664:	eef0 1a67 	vmov.f32	s3, s15
 8001668:	ec41 0b10 	vmov	d0, r0, r1
 800166c:	f7ff fe1e 	bl	80012ac <clamp>
 8001670:	ec53 2b10 	vmov	r2, r3, d0
 8001674:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fabc 	bl	8000bf8 <__aeabi_d2uiz>
 8001680:	4603      	mov	r3, r0
 8001682:	6263      	str	r3, [r4, #36]	; 0x24
	sensor_values.set_temperature = TIM2->CNT;
 8001684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff62 	bl	8000554 <__aeabi_ui2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <get_set_temperature+0x6c>)
 8001696:	e9c1 2300 	strd	r2, r3, [r1]
}
 800169a:	bf00      	nop
 800169c:	bd98      	pop	{r3, r4, r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000020 	.word	0x20000020
 80016a4:	20000620 	.word	0x20000620
 80016a8:	20000028 	.word	0x20000028

080016ac <beep>:

/* Beep the buzzer */
void beep(){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <beep+0x18>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2232      	movs	r2, #50	; 0x32
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_Base_Start_IT(&htim6);
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <beep+0x1c>)
 80016ba:	f009 fd11 	bl	800b0e0 <HAL_TIM_Base_Start_IT>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20001860 	.word	0x20001860
 80016c8:	20001944 	.word	0x20001944
 80016cc:	00000000 	.word	0x00000000

080016d0 <check_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void check_emergency_shutdown(){
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <check_emergency_shutdown+0xd0>)
 80016d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <check_emergency_shutdown+0x20>
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <check_emergency_shutdown+0xd4>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d104      	bne.n	80016f0 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 80016e6:	f003 fad9 	bl	8004c9c <HAL_GetTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a2e      	ldr	r2, [pc, #184]	; (80017a8 <check_emergency_shutdown+0xd8>)
 80016ee:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <check_emergency_shutdown+0xd0>)
 80016f2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	f7ff fa0b 	bl	8000b18 <__aeabi_dcmpeq>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d024      	beq.n	8001752 <check_emergency_shutdown+0x82>
 8001708:	f003 fac8 	bl	8004c9c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <check_emergency_shutdown+0xd8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff1d 	bl	8000554 <__aeabi_ui2d>
 800171a:	4604      	mov	r4, r0
 800171c:	460d      	mov	r5, r1
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <check_emergency_shutdown+0xdc>)
 8001720:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001724:	a31a      	add	r3, pc, #104	; (adr r3, 8001790 <check_emergency_shutdown+0xc0>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe ff8d 	bl	8000648 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7ff fa0d 	bl	8000b54 <__aeabi_dcmpge>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <check_emergency_shutdown+0x82>
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <check_emergency_shutdown+0xd4>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d104      	bne.n	8001752 <check_emergency_shutdown+0x82>
		active_state = EMERGENCY_SLEEP;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <check_emergency_shutdown+0xd4>)
 800174a:	2203      	movs	r2, #3
 800174c:	701a      	strb	r2, [r3, #0]
		beep();
 800174e:	f7ff ffad 	bl	80016ac <beep>
	}
	sensor_values.previous_state = active_state;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <check_emergency_shutdown+0xd4>)
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <check_emergency_shutdown+0xd0>)
 8001758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* Function to set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.actual_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <check_emergency_shutdown+0xd0>)
 800175e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001762:	a30d      	add	r3, pc, #52	; (adr r3, 8001798 <check_emergency_shutdown+0xc8>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f9fe 	bl	8000b68 <__aeabi_dcmpgt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d100      	bne.n	8001774 <check_emergency_shutdown+0xa4>
		active_state = EMERGENCY_SLEEP;
		beep();
	}
}
 8001772:	e008      	b.n	8001786 <check_emergency_shutdown+0xb6>
	if((sensor_values.actual_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <check_emergency_shutdown+0xd4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d104      	bne.n	8001786 <check_emergency_shutdown+0xb6>
		active_state = EMERGENCY_SLEEP;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <check_emergency_shutdown+0xd4>)
 800177e:	2203      	movs	r2, #3
 8001780:	701a      	strb	r2, [r3, #0]
		beep();
 8001782:	f7ff ff93 	bl	80016ac <beep>
}
 8001786:	bf00      	nop
 8001788:	bdb0      	pop	{r4, r5, r7, pc}
 800178a:	bf00      	nop
 800178c:	f3af 8000 	nop.w
 8001790:	00000000 	.word	0x00000000
 8001794:	40ed4c00 	.word	0x40ed4c00
 8001798:	00000000 	.word	0x00000000
 800179c:	407db000 	.word	0x407db000
 80017a0:	20000028 	.word	0x20000028
 80017a4:	20000018 	.word	0x20000018
 80017a8:	20000564 	.word	0x20000564
 80017ac:	20000628 	.word	0x20000628

080017b0 <get_enc_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void get_enc_button_status(){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
	uint8_t button_status;
	if(HAL_GPIO_ReadPin (GPIOB, SW_2_Pin) == 1){
 80017b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ba:	482b      	ldr	r0, [pc, #172]	; (8001868 <get_enc_button_status+0xb8>)
 80017bc:	f006 f8bc 	bl	8007938 <HAL_GPIO_ReadPin>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d102      	bne.n	80017cc <get_enc_button_status+0x1c>
		button_status = 1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	e001      	b.n	80017d0 <get_enc_button_status+0x20>
	}
	else{
		button_status = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.enc_button_status = Moving_Average_Compute(button_status, &enc_button_sense_filterStruct); /* Moving average filter */
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4926      	ldr	r1, [pc, #152]	; (800186c <get_enc_button_status+0xbc>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 fd27 	bl	8003228 <Moving_Average_Compute>
 80017da:	eeb0 7a40 	vmov.f32	s14, s0
 80017de:	eef0 7a60 	vmov.f32	s15, s1
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <get_enc_button_status+0xc0>)
 80017e4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* If encoder button is pressed */
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <get_enc_button_status+0xc0>)
 80017ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80017ee:	a31c      	add	r3, pc, #112	; (adr r3, 8001860 <get_enc_button_status+0xb0>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7ff f9b8 	bl	8000b68 <__aeabi_dcmpgt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d100      	bne.n	8001800 <get_enc_button_status+0x50>
		else if (active_state == EMERGENCY_SLEEP){
			active_state = RUN;
		}
		previous_millis_heating_halted_update = HAL_GetTick();
	}
}
 80017fe:	e02b      	b.n	8001858 <get_enc_button_status+0xa8>
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 8001800:	f003 fa4c 	bl	8004c9c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <get_enc_button_status+0xc4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	1ad2      	subs	r2, r2, r3
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <get_enc_button_status+0xc8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d321      	bcc.n	8001858 <get_enc_button_status+0xa8>
		beep();
 8001814:	f7ff ff4a 	bl	80016ac <beep>
		if ((active_state == RUN) || (active_state == STANDBY)){
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <get_enc_button_status+0xcc>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <get_enc_button_status+0x78>
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <get_enc_button_status+0xcc>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d103      	bne.n	8001830 <get_enc_button_status+0x80>
			active_state = HALTED;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <get_enc_button_status+0xcc>)
 800182a:	2204      	movs	r2, #4
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e00e      	b.n	800184e <get_enc_button_status+0x9e>
		else if (active_state == HALTED){
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <get_enc_button_status+0xcc>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b04      	cmp	r3, #4
 8001836:	d103      	bne.n	8001840 <get_enc_button_status+0x90>
			active_state = RUN;
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <get_enc_button_status+0xcc>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e006      	b.n	800184e <get_enc_button_status+0x9e>
		else if (active_state == EMERGENCY_SLEEP){
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <get_enc_button_status+0xcc>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d102      	bne.n	800184e <get_enc_button_status+0x9e>
			active_state = RUN;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <get_enc_button_status+0xcc>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
		previous_millis_heating_halted_update = HAL_GetTick();
 800184e:	f003 fa25 	bl	8004c9c <HAL_GetTick>
 8001852:	4603      	mov	r3, r0
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <get_enc_button_status+0xc4>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	9999999a 	.word	0x9999999a
 8001864:	3fe99999 	.word	0x3fe99999
 8001868:	48000400 	.word	0x48000400
 800186c:	20001320 	.word	0x20001320
 8001870:	20000028 	.word	0x20000028
 8001874:	20000560 	.word	0x20000560
 8001878:	20000010 	.word	0x20000010
 800187c:	20000018 	.word	0x20000018

08001880 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8001886:	2140      	movs	r1, #64	; 0x40
 8001888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188c:	f006 f854 	bl	8007938 <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <get_stand_status+0x1c>
		stand_status = 1;
 8001896:	2301      	movs	r3, #1
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	e001      	b.n	80018a0 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4937      	ldr	r1, [pc, #220]	; (8001980 <get_stand_status+0x100>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f001 fcbf 	bl	8003228 <Moving_Average_Compute>
 80018aa:	eeb0 7a40 	vmov.f32	s14, s0
 80018ae:	eef0 7a60 	vmov.f32	s15, s1
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <get_stand_status+0x104>)
 80018b4:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand > 0.5){
 80018b8:	4b32      	ldr	r3, [pc, #200]	; (8001984 <get_stand_status+0x104>)
 80018ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b31      	ldr	r3, [pc, #196]	; (8001988 <get_stand_status+0x108>)
 80018c4:	f7ff f950 	bl	8000b68 <__aeabi_dcmpgt>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d039      	beq.n	8001942 <get_stand_status+0xc2>
		if(active_state == RUN){
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <get_stand_status+0x10c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d107      	bne.n	80018e6 <get_stand_status+0x66>
			active_state = STANDBY;
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <get_stand_status+0x10c>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
			previous_standby_millis = HAL_GetTick();
 80018dc:	f003 f9de 	bl	8004c9c <HAL_GetTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <get_stand_status+0x110>)
 80018e4:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 80018e6:	f003 f9d9 	bl	8004c9c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <get_stand_status+0x110>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe2e 	bl	8000554 <__aeabi_ui2d>
 80018f8:	4604      	mov	r4, r0
 80018fa:	460d      	mov	r5, r1
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <get_stand_status+0x114>)
 80018fe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001902:	a31d      	add	r3, pc, #116	; (adr r3, 8001978 <get_stand_status+0xf8>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe9e 	bl	8000648 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7ff f91e 	bl	8000b54 <__aeabi_dcmpge>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <get_stand_status+0xac>
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <get_stand_status+0x10c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d102      	bne.n	800192c <get_stand_status+0xac>
			active_state = SLEEP;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <get_stand_status+0x10c>)
 8001928:	2202      	movs	r2, #2
 800192a:	701a      	strb	r2, [r3, #0]
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <get_stand_status+0x10c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d003      	beq.n	800193c <get_stand_status+0xbc>
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <get_stand_status+0x10c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d102      	bne.n	8001942 <get_stand_status+0xc2>
			active_state = SLEEP;
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <get_stand_status+0x10c>)
 800193e:	2202      	movs	r2, #2
 8001940:	701a      	strb	r2, [r3, #0]
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.5){
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <get_stand_status+0x104>)
 8001944:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <get_stand_status+0x108>)
 800194e:	f7ff f8ed 	bl	8000b2c <__aeabi_dcmplt>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d100      	bne.n	800195a <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY)){
			active_state = RUN;
		}
	}
}
 8001958:	e00a      	b.n	8001970 <get_stand_status+0xf0>
		if((active_state == SLEEP) || (active_state == STANDBY)){
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <get_stand_status+0x10c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <get_stand_status+0xea>
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <get_stand_status+0x10c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d102      	bne.n	8001970 <get_stand_status+0xf0>
			active_state = RUN;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <get_stand_status+0x10c>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bdb0      	pop	{r4, r5, r7, pc}
 8001978:	00000000 	.word	0x00000000
 800197c:	40ed4c00 	.word	0x40ed4c00
 8001980:	20000cc8 	.word	0x20000cc8
 8001984:	20000028 	.word	0x20000028
 8001988:	3fe00000 	.word	0x3fe00000
 800198c:	20000018 	.word	0x20000018
 8001990:	20000568 	.word	0x20000568
 8001994:	20000628 	.word	0x20000628

08001998 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOB, HANDLE_INP_1_Pin) == 0){
 800199e:	2110      	movs	r1, #16
 80019a0:	483f      	ldr	r0, [pc, #252]	; (8001aa0 <get_handle_type+0x108>)
 80019a2:	f005 ffc9 	bl	8007938 <HAL_GPIO_ReadPin>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <get_handle_type+0x1a>
		handle_status = 1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	71fb      	strb	r3, [r7, #7]
 80019b0:	e001      	b.n	80019b6 <get_handle_type+0x1e>
	}
	else{
		handle_status = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle_sense = Moving_Average_Compute(handle_status, &handle_sense_filterStruct); /* Moving average filter */
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	493a      	ldr	r1, [pc, #232]	; (8001aa4 <get_handle_type+0x10c>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fc34 	bl	8003228 <Moving_Average_Compute>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <get_handle_type+0x110>)
 80019ca:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	/* If the handle_sense is high -> T210 handle is detected */
	if(sensor_values.handle_sense > 0.5){
 80019ce:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <get_handle_type+0x110>)
 80019d0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <get_handle_type+0x114>)
 80019da:	f7ff f8c5 	bl	8000b68 <__aeabi_dcmpgt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01e      	beq.n	8001a22 <get_handle_type+0x8a>
		handle = T210;
 80019e4:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <get_handle_type+0x118>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <get_handle_type+0x11c>)
 80019ec:	4a32      	ldr	r2, [pc, #200]	; (8001ab8 <get_handle_type+0x120>)
 80019ee:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //450 deg C
 80019f0:	4932      	ldr	r1, [pc, #200]	; (8001abc <get_handle_type+0x124>)
 80019f2:	a329      	add	r3, pc, #164	; (adr r3, 8001a98 <get_handle_type+0x100>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 10;
 80019fc:	4930      	ldr	r1, [pc, #192]	; (8001ac0 <get_handle_type+0x128>)
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <get_handle_type+0x12c>)
 8001a04:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8001a08:	492f      	ldr	r1, [pc, #188]	; (8001ac8 <get_handle_type+0x130>)
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <get_handle_type+0x134>)
 8001a10:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8001a14:	492e      	ldr	r1, [pc, #184]	; (8001ad0 <get_handle_type+0x138>)
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <get_handle_type+0x13c>)
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]
 8001a20:	e01d      	b.n	8001a5e <get_handle_type+0xc6>
	}
	/* If the handle_sense is low -> T245 Handle */
	else{
		handle = T245;
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <get_handle_type+0x118>)
 8001a24:	2202      	movs	r2, #2
 8001a26:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <get_handle_type+0x11c>)
 8001a2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ad8 <get_handle_type+0x140>)
 8001a2c:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //430 deg C
 8001a2e:	4923      	ldr	r1, [pc, #140]	; (8001abc <get_handle_type+0x124>)
 8001a30:	a319      	add	r3, pc, #100	; (adr r3, 8001a98 <get_handle_type+0x100>)
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 15;
 8001a3a:	4921      	ldr	r1, [pc, #132]	; (8001ac0 <get_handle_type+0x128>)
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b26      	ldr	r3, [pc, #152]	; (8001adc <get_handle_type+0x144>)
 8001a42:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8001a46:	4920      	ldr	r1, [pc, #128]	; (8001ac8 <get_handle_type+0x130>)
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <get_handle_type+0x134>)
 8001a4e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8001a52:	491f      	ldr	r1, [pc, #124]	; (8001ad0 <get_handle_type+0x138>)
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <get_handle_type+0x114>)
 8001a5a:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <get_handle_type+0x128>)
 8001a60:	ed93 7b00 	vldr	d7, [r3]
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <get_handle_type+0x130>)
 8001a66:	ed93 6b00 	vldr	d6, [r3]
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <get_handle_type+0x138>)
 8001a6c:	ed93 5b00 	vldr	d5, [r3]
 8001a70:	eeb0 2a45 	vmov.f32	s4, s10
 8001a74:	eef0 2a65 	vmov.f32	s5, s11
 8001a78:	eeb0 1a46 	vmov.f32	s2, s12
 8001a7c:	eef0 1a66 	vmov.f32	s3, s13
 8001a80:	eeb0 0a47 	vmov.f32	s0, s14
 8001a84:	eef0 0a67 	vmov.f32	s1, s15
 8001a88:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <get_handle_type+0x148>)
 8001a8a:	f001 fea4 	bl	80037d6 <PID_SetTunings>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	407c2000 	.word	0x407c2000
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	20000ff4 	.word	0x20000ff4
 8001aa8:	20000028 	.word	0x20000028
 8001aac:	3fe00000 	.word	0x3fe00000
 8001ab0:	20000550 	.word	0x20000550
 8001ab4:	200005b0 	.word	0x200005b0
 8001ab8:	42700000 	.word	0x42700000
 8001abc:	20000620 	.word	0x20000620
 8001ac0:	20000570 	.word	0x20000570
 8001ac4:	40240000 	.word	0x40240000
 8001ac8:	20000578 	.word	0x20000578
 8001acc:	403e0000 	.word	0x403e0000
 8001ad0:	20000580 	.word	0x20000580
 8001ad4:	3fd00000 	.word	0x3fd00000
 8001ad8:	42f00000 	.word	0x42f00000
 8001adc:	402e0000 	.word	0x402e0000
 8001ae0:	20001a70 	.word	0x20001a70

08001ae4 <set_heater_duty>:
		beep();
	}
}

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, dutycycle);
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <set_heater_duty+0x20>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	88fa      	ldrh	r2, [r7, #6]
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200018f8 	.word	0x200018f8

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0c:	ed2d 8b06 	vpush	{d8-d10}
 8001b10:	b09b      	sub	sp, #108	; 0x6c
 8001b12:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f003 f85e 	bl	8004bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 fed8 	bl	80028cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1c:	f001 fab6 	bl	800308c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b20:	f001 fa8a 	bl	8003038 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b24:	f000 ff20 	bl	8002968 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b28:	f000 ff96 	bl	8002a58 <MX_ADC2_Init>
  MX_CRC_Init();
 8001b2c:	f000 fffa 	bl	8002b24 <MX_CRC_Init>
  MX_TIM1_Init();
 8001b30:	f001 f898 	bl	8002c64 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b34:	f001 f92a 	bl	8002d8c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b38:	f001 f97c 	bl	8002e34 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001b3c:	f001 fa30 	bl	8002fa0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001b40:	f001 f9d2 	bl	8002ee8 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001b44:	f001 fa06 	bl	8002f54 <MX_TIM16_Init>
  MX_SPI2_Init();
 8001b48:	f001 f84e 	bl	8002be8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001b4c:	f001 f80c 	bl	8002b68 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8001b50:	f011 f9a4 	bl	8012e9c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8001b54:	f002 ffd2 	bl	8004afc <LCD_init>

	 HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001b58:	213c      	movs	r1, #60	; 0x3c
 8001b5a:	4850      	ldr	r0, [pc, #320]	; (8001c9c <main+0x194>)
 8001b5c:	f009 fd74 	bl	800b648 <HAL_TIM_Encoder_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8001b60:	2104      	movs	r1, #4
 8001b62:	484f      	ldr	r0, [pc, #316]	; (8001ca0 <main+0x198>)
 8001b64:	f009 fb7e 	bl	800b264 <HAL_TIM_PWM_Start_IT>
	 HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	484e      	ldr	r0, [pc, #312]	; (8001ca4 <main+0x19c>)
 8001b6c:	f00a fae6 	bl	800c13c <HAL_TIMEx_PWMN_Start>


		HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001b70:	217f      	movs	r1, #127	; 0x7f
 8001b72:	484d      	ldr	r0, [pc, #308]	; (8001ca8 <main+0x1a0>)
 8001b74:	f004 fc46 	bl	8006404 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BUF_VIN, (uint32_t)ADC_BUF_VIN_LEN);	//Start ADC DMA
 8001b78:	2232      	movs	r2, #50	; 0x32
 8001b7a:	494c      	ldr	r1, [pc, #304]	; (8001cac <main+0x1a4>)
 8001b7c:	484a      	ldr	r0, [pc, #296]	; (8001ca8 <main+0x1a0>)
 8001b7e:	f003 fdb3 	bl	80056e8 <HAL_ADC_Start_DMA>

        HAL_ADC_Start_IT(&hadc1);        //Start ADC DMA
 8001b82:	484b      	ldr	r0, [pc, #300]	; (8001cb0 <main+0x1a8>)
 8001b84:	f003 fc80 	bl	8005488 <HAL_ADC_Start_IT>

		Moving_Average_Init(&actual_temperature_filter_struct,5);
 8001b88:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001b8c:	4849      	ldr	r0, [pc, #292]	; (8001cb4 <main+0x1ac>)
 8001b8e:	f001 fb1a 	bl	80031c6 <Moving_Average_Init>
		Moving_Average_Init(&input_voltage_filterStruct,50);
 8001b92:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001cb8 <main+0x1b0>
 8001b96:	4849      	ldr	r0, [pc, #292]	; (8001cbc <main+0x1b4>)
 8001b98:	f001 fb15 	bl	80031c6 <Moving_Average_Init>
		Moving_Average_Init(&stand_sense_filterStruct,50);
 8001b9c:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8001cb8 <main+0x1b0>
 8001ba0:	4847      	ldr	r0, [pc, #284]	; (8001cc0 <main+0x1b8>)
 8001ba2:	f001 fb10 	bl	80031c6 <Moving_Average_Init>
		Moving_Average_Init(&handle_sense_filterStruct,50);
 8001ba6:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8001cb8 <main+0x1b0>
 8001baa:	4846      	ldr	r0, [pc, #280]	; (8001cc4 <main+0x1bc>)
 8001bac:	f001 fb0b 	bl	80031c6 <Moving_Average_Init>
		Moving_Average_Init(&enc_button_sense_filterStruct,10);
 8001bb0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001bb4:	4844      	ldr	r0, [pc, #272]	; (8001cc8 <main+0x1c0>)
 8001bb6:	f001 fb06 	bl	80031c6 <Moving_Average_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	/* Init and fill filter structures with initial values */
  		set_heater_duty(0);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff ff92 	bl	8001ae4 <set_heater_duty>
  		for (int i = 0; i<200;i++){
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bc4:	e00c      	b.n	8001be0 <main+0xd8>
  			get_bus_voltage();
 8001bc6:	f7ff fbf3 	bl	80013b0 <get_bus_voltage>
  			get_actual_temperature();
 8001bca:	f7ff fc21 	bl	8001410 <get_actual_temperature>
  			get_handle_type();
 8001bce:	f7ff fee3 	bl	8001998 <get_handle_type>
  			get_stand_status();
 8001bd2:	f7ff fe55 	bl	8001880 <get_stand_status>
  			get_enc_button_status();
 8001bd6:	f7ff fdeb 	bl	80017b0 <get_enc_button_status>
  		for (int i = 0; i<200;i++){
 8001bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bdc:	3301      	adds	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	2bc7      	cmp	r3, #199	; 0xc7
 8001be4:	ddef      	ble.n	8001bc6 <main+0xbe>
  		}

  		uint16_t menu_length = 8;
 8001be6:	2308      	movs	r3, #8
 8001be8:	82fb      	strh	r3, [r7, #22]
  	    	FlashWrite(&default_flash_values);
  		}
  	    FlashRead(&flash_values);
*/
  		/* Set startup state */
  		active_state = SLEEP;
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <main+0x1c4>)
 8001bec:	2202      	movs	r2, #2
 8001bee:	701a      	strb	r2, [r3, #0]

  		/* Initiate OLED display */
  		TIM2->CNT = 1000;
 8001bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
  		uint16_t menu_cursor_position = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  		uint16_t old_menu_cursor_position = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	85bb      	strh	r3, [r7, #44]	; 0x2c
  		uint16_t menue_start = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	84fb      	strh	r3, [r7, #38]	; 0x26
  		uint16_t menue_level = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	84bb      	strh	r3, [r7, #36]	; 0x24
  		uint16_t menu_active = 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	847b      	strh	r3, [r7, #34]	; 0x22
  		float old_value = 0;
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]

  		/* If button is pressed during startup - Show SETTINGS and allow to release button. */
  		if (HAL_GPIO_ReadPin (GPIOB, SW_2_Pin) == 1){
 8001c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c18:	482d      	ldr	r0, [pc, #180]	; (8001cd0 <main+0x1c8>)
 8001c1a:	f005 fe8d 	bl	8007938 <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	f040 8289 	bne.w	8002138 <main+0x630>
  			LCD_PutStr(50, 5, "SETTINGS", FONT_arial_29X35, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001c26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c2a:	f7ff fb6f 	bl	800130c <RGB_to_BRG>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461c      	mov	r4, r3
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff fb6a 	bl	800130c <RGB_to_BRG>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	9400      	str	r4, [sp, #0]
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <main+0x1cc>)
 8001c40:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <main+0x1d0>)
 8001c42:	2105      	movs	r1, #5
 8001c44:	2032      	movs	r0, #50	; 0x32
 8001c46:	f002 ff1b 	bl	8004a80 <LCD_PutStr>
  			LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_WHITE));
 8001c4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c4e:	f7ff fb5d 	bl	800130c <RGB_to_BRG>
 8001c52:	4603      	mov	r3, r0
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2328      	movs	r3, #40	; 0x28
 8001c58:	22f0      	movs	r2, #240	; 0xf0
 8001c5a:	2128      	movs	r1, #40	; 0x28
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f002 fed1 	bl	8004a04 <LCD_DrawLine>
  			LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_WHITE));
 8001c62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c66:	f7ff fb51 	bl	800130c <RGB_to_BRG>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2329      	movs	r3, #41	; 0x29
 8001c70:	22f0      	movs	r2, #240	; 0xf0
 8001c72:	2129      	movs	r1, #41	; 0x29
 8001c74:	2000      	movs	r0, #0
 8001c76:	f002 fec5 	bl	8004a04 <LCD_DrawLine>
  			LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_WHITE));
 8001c7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c7e:	f7ff fb45 	bl	800130c <RGB_to_BRG>
 8001c82:	4603      	mov	r3, r0
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	232a      	movs	r3, #42	; 0x2a
 8001c88:	22f0      	movs	r2, #240	; 0xf0
 8001c8a:	212a      	movs	r1, #42	; 0x2a
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f002 feb9 	bl	8004a04 <LCD_DrawLine>

  			HAL_Delay(1000);
 8001c92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c96:	f003 f80d 	bl	8004cb4 <HAL_Delay>
  			while(menu_active == 1){
 8001c9a:	e249      	b.n	8002130 <main+0x628>
 8001c9c:	200018ac 	.word	0x200018ac
 8001ca0:	200018f8 	.word	0x200018f8
 8001ca4:	20001860 	.word	0x20001860
 8001ca8:	200016b8 	.word	0x200016b8
 8001cac:	200005b8 	.word	0x200005b8
 8001cb0:	2000164c 	.word	0x2000164c
 8001cb4:	20000670 	.word	0x20000670
 8001cb8:	42480000 	.word	0x42480000
 8001cbc:	2000099c 	.word	0x2000099c
 8001cc0:	20000cc8 	.word	0x20000cc8
 8001cc4:	20000ff4 	.word	0x20000ff4
 8001cc8:	20001320 	.word	0x20001320
 8001ccc:	20000018 	.word	0x20000018
 8001cd0:	48000400 	.word	0x48000400
 8001cd4:	08019240 	.word	0x08019240
 8001cd8:	08017744 	.word	0x08017744
  				if(menue_level == 0){
 8001cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d111      	bne.n	8001d06 <main+0x1fe>
  					if(TIM2->CNT < 1000)
 8001ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cec:	d204      	bcs.n	8001cf8 <main+0x1f0>
  					{
  						TIM2->CNT = 1000;
 8001cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
  					}
  					menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	85fb      	strh	r3, [r7, #46]	; 0x2e
  				}
  				if (menue_level == 1){
 8001d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	f040 808e 	bne.w	8001e2a <main+0x322>
  					((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001d0e:	69f8      	ldr	r0, [r7, #28]
 8001d10:	f7fe fc42 	bl	8000598 <__aeabi_f2d>
 8001d14:	4604      	mov	r4, r0
 8001d16:	460d      	mov	r5, r1
 8001d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fc18 	bl	8000554 <__aeabi_ui2d>
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4bad      	ldr	r3, [pc, #692]	; (8001fe0 <main+0x4d8>)
 8001d2a:	f7fe fad5 	bl	80002d8 <__aeabi_dsub>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff7f 	bl	8000c38 <__aeabi_d2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc2b 	bl	8000598 <__aeabi_f2d>
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d4a:	f7fe fda7 	bl	800089c <__aeabi_ddiv>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4620      	mov	r0, r4
 8001d54:	4629      	mov	r1, r5
 8001d56:	f7fe fac1 	bl	80002dc <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4690      	mov	r8, r2
 8001d60:	4699      	mov	r9, r3
 8001d62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6c:	ee17 0a90 	vmov	r0, s15
 8001d70:	f7fe fc12 	bl	8000598 <__aeabi_f2d>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001d7a:	00c9      	lsls	r1, r1, #3
 8001d7c:	4899      	ldr	r0, [pc, #612]	; (8001fe4 <main+0x4dc>)
 8001d7e:	180c      	adds	r4, r1, r0
 8001d80:	4640      	mov	r0, r8
 8001d82:	4649      	mov	r1, r9
 8001d84:	f7fe faa8 	bl	80002d8 <__aeabi_dsub>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	e9c4 2300 	strd	r2, r3, [r4]
  					if (menu_cursor_position == 5){
 8001d90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d12c      	bne.n	8001df0 <main+0x2e8>
  						((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001d96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4a92      	ldr	r2, [pc, #584]	; (8001fe4 <main+0x4dc>)
 8001d9c:	4413      	add	r3, r2
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe feff 	bl	8000ba8 <__aeabi_d2iz>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bfb8      	it	lt
 8001db0:	425b      	neglt	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbde 	bl	8000574 <__aeabi_i2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8001fd8 <main+0x4d0>
 8001dc0:	ec43 2b10 	vmov	d0, r2, r3
 8001dc4:	f014 fbd4 	bl	8016570 <fmod>
 8001dc8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dcc:	eef0 7a60 	vmov.f32	s15, s1
 8001dd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4a83      	ldr	r2, [pc, #524]	; (8001fe4 <main+0x4dc>)
 8001dd6:	189c      	adds	r4, r3, r2
 8001dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ddc:	eef0 0a67 	vmov.f32	s1, s15
 8001de0:	f014 fc70 	bl	80166c4 <round>
 8001de4:	eeb0 7a40 	vmov.f32	s14, s0
 8001de8:	eef0 7a60 	vmov.f32	s15, s1
 8001dec:	ed84 7b00 	vstr	d7, [r4]
  					}
  					if(menu_cursor_position != 1){
 8001df0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d019      	beq.n	8001e2a <main+0x322>
  						((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001df6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4a7a      	ldr	r2, [pc, #488]	; (8001fe4 <main+0x4dc>)
 8001dfc:	4413      	add	r3, r2
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fecf 	bl	8000ba8 <__aeabi_d2iz>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e10:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4972      	ldr	r1, [pc, #456]	; (8001fe4 <main+0x4dc>)
 8001e1a:	185c      	adds	r4, r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7fe fba9 	bl	8000574 <__aeabi_i2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	e9c4 2300 	strd	r2, r3, [r4]
  					}
  				}

  				if(menu_cursor_position > menu_length){
 8001e2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001e2c:	8afb      	ldrh	r3, [r7, #22]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d908      	bls.n	8001e44 <main+0x33c>
  								menu_cursor_position = menu_length;
 8001e32:	8afb      	ldrh	r3, [r7, #22]
 8001e34:	85fb      	strh	r3, [r7, #46]	; 0x2e
  								TIM2->CNT = 1000 + menu_length*2;
 8001e36:	8afb      	ldrh	r3, [r7, #22]
 8001e38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e3c:	005a      	lsls	r2, r3, #1
 8001e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
  				}

  				if(menu_cursor_position >= menu_length-(menu_length-5)){
 8001e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d902      	bls.n	8001e50 <main+0x348>
  					menue_start = menu_cursor_position-5;
 8001e4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e4c:	3b05      	subs	r3, #5
 8001e4e:	84fb      	strh	r3, [r7, #38]	; 0x26
  				}


  				if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-2)){
 8001e50:	2120      	movs	r1, #32
 8001e52:	4865      	ldr	r0, [pc, #404]	; (8001fe8 <main+0x4e0>)
 8001e54:	f005 fd70 	bl	8007938 <HAL_GPIO_ReadPin>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d129      	bne.n	8001eb2 <main+0x3aa>
 8001e5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001e60:	8afb      	ldrh	r3, [r7, #22]
 8001e62:	3b02      	subs	r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	da24      	bge.n	8001eb2 <main+0x3aa>
  					if(menue_level == 0){
 8001e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <main+0x382>
  						old_value = ((double*)&flash_values)[menu_cursor_position];
 8001e6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4a5c      	ldr	r2, [pc, #368]	; (8001fe4 <main+0x4dc>)
 8001e74:	4413      	add	r3, r2
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fedb 	bl	8000c38 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61fb      	str	r3, [r7, #28]
  						old_menu_cursor_position = menu_cursor_position;
 8001e86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e88:	85bb      	strh	r3, [r7, #44]	; 0x2c
  					}
  					if(menue_level == 1){
 8001e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d106      	bne.n	8001e9e <main+0x396>
  						TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001e90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e92:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e96:	005a      	lsls	r2, r3, #1
 8001e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
  					}

  					menue_level = abs(menue_level-1);
 8001e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bfb8      	it	lt
 8001ea6:	425b      	neglt	r3, r3
 8001ea8:	84bb      	strh	r3, [r7, #36]	; 0x24
  					HAL_Delay(200);
 8001eaa:	20c8      	movs	r0, #200	; 0xc8
 8001eac:	f002 ff02 	bl	8004cb4 <HAL_Delay>
 8001eb0:	e037      	b.n	8001f22 <main+0x41a>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length)){
 8001eb2:	2120      	movs	r1, #32
 8001eb4:	484c      	ldr	r0, [pc, #304]	; (8001fe8 <main+0x4e0>)
 8001eb6:	f005 fd3f 	bl	8007938 <HAL_GPIO_ReadPin>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <main+0x3c6>
 8001ec0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001ec2:	8afb      	ldrh	r3, [r7, #22]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d102      	bne.n	8001ece <main+0x3c6>
  					menu_active = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ecc:	e029      	b.n	8001f22 <main+0x41a>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001ece:	2120      	movs	r1, #32
 8001ed0:	4845      	ldr	r0, [pc, #276]	; (8001fe8 <main+0x4e0>)
 8001ed2:	f005 fd31 	bl	8007938 <HAL_GPIO_ReadPin>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10a      	bne.n	8001ef2 <main+0x3ea>
 8001edc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001ede:	8afb      	ldrh	r3, [r7, #22]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d105      	bne.n	8001ef2 <main+0x3ea>
  					menu_active = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	847b      	strh	r3, [r7, #34]	; 0x22
  					FlashWrite(&flash_values);
 8001eea:	483e      	ldr	r0, [pc, #248]	; (8001fe4 <main+0x4dc>)
 8001eec:	f7ff f90a 	bl	8001104 <FlashWrite>
 8001ef0:	e017      	b.n	8001f22 <main+0x41a>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	483c      	ldr	r0, [pc, #240]	; (8001fe8 <main+0x4e0>)
 8001ef6:	f005 fd1f 	bl	8007938 <HAL_GPIO_ReadPin>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d110      	bne.n	8001f22 <main+0x41a>
 8001f00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001f02:	8afb      	ldrh	r3, [r7, #22]
 8001f04:	3b02      	subs	r3, #2
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d10b      	bne.n	8001f22 <main+0x41a>
  					flash_values = default_flash_values;
 8001f0a:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <main+0x4dc>)
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <main+0x4e4>)
 8001f0e:	4614      	mov	r4, r2
 8001f10:	461d      	mov	r5, r3
 8001f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  				}

  	  			LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f26:	f7ff f9f1 	bl	800130c <RGB_to_BRG>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7ff f9ec 	bl	800130c <RGB_to_BRG>
 8001f34:	4603      	mov	r3, r0
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	9400      	str	r4, [sp, #0]
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <main+0x4e8>)
 8001f3c:	4a2d      	ldr	r2, [pc, #180]	; (8001ff4 <main+0x4ec>)
 8001f3e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f42:	2000      	movs	r0, #0
 8001f44:	f002 fd9c 	bl	8004a80 <LCD_PutStr>
  	  			LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f48:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f4c:	f7ff f9de 	bl	800130c <RGB_to_BRG>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461c      	mov	r4, r3
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff f9d9 	bl	800130c <RGB_to_BRG>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	9400      	str	r4, [sp, #0]
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <main+0x4e8>)
 8001f62:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <main+0x4f0>)
 8001f64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f68:	2096      	movs	r0, #150	; 0x96
 8001f6a:	f002 fd89 	bl	8004a80 <LCD_PutStr>

  				for(int i = menue_start;i<menue_start+6;i++){
 8001f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	e0d7      	b.n	8002124 <main+0x61c>

  					if((i == menu_cursor_position) && (menue_level == 0)){
 8001f74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d141      	bne.n	8002000 <main+0x4f8>
 8001f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d13e      	bne.n	8002000 <main+0x4f8>
  		  	  			LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001f82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	0091      	lsls	r1, r2, #2
 8001f94:	461a      	mov	r2, r3
 8001f96:	460b      	mov	r3, r1
 8001f98:	4413      	add	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	332d      	adds	r3, #45	; 0x2d
 8001f9e:	b29c      	uxth	r4, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <main+0x4f4>)
 8001fac:	189d      	adds	r5, r3, r2
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7ff f9ac 	bl	800130c <RGB_to_BRG>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461e      	mov	r6, r3
 8001fb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fbc:	f7ff f9a6 	bl	800130c <RGB_to_BRG>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	9600      	str	r6, [sp, #0]
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <main+0x4e8>)
 8001fc8:	462a      	mov	r2, r5
 8001fca:	4621      	mov	r1, r4
 8001fcc:	2005      	movs	r0, #5
 8001fce:	f002 fd57 	bl	8004a80 <LCD_PutStr>
 8001fd2:	e03d      	b.n	8002050 <main+0x548>
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	40000000 	.word	0x40000000
 8001fe0:	408f4000 	.word	0x408f4000
 8001fe4:	20000628 	.word	0x20000628
 8001fe8:	48000400 	.word	0x48000400
 8001fec:	20000068 	.word	0x20000068
 8001ff0:	080178e8 	.word	0x080178e8
 8001ff4:	08017750 	.word	0x08017750
 8001ff8:	0801775c 	.word	0x0801775c
 8001ffc:	20000098 	.word	0x20000098

  					}
  					else{
  		  	  			LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002000:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	4413      	add	r3, r2
 800200e:	461a      	mov	r2, r3
 8002010:	0091      	lsls	r1, r2, #2
 8002012:	461a      	mov	r2, r3
 8002014:	460b      	mov	r3, r1
 8002016:	4413      	add	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	332d      	adds	r3, #45	; 0x2d
 800201c:	b29c      	uxth	r4, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <main+0x5c4>)
 800202a:	189d      	adds	r5, r3, r2
 800202c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002030:	f7ff f96c 	bl	800130c <RGB_to_BRG>
 8002034:	4603      	mov	r3, r0
 8002036:	461e      	mov	r6, r3
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff f967 	bl	800130c <RGB_to_BRG>
 800203e:	4603      	mov	r3, r0
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	9600      	str	r6, [sp, #0]
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <main+0x5c8>)
 8002046:	462a      	mov	r2, r5
 8002048:	4621      	mov	r1, r4
 800204a:	2005      	movs	r0, #5
 800204c:	f002 fd18 	bl	8004a80 <LCD_PutStr>
  					}

  					char str[20];
  				  	memset(&str, '\0', sizeof(str));
 8002050:	463b      	mov	r3, r7
 8002052:	2214      	movs	r2, #20
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f012 f98f 	bl	801437a <memset>
  					sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <main+0x5cc>)
 8002062:	4413      	add	r3, r2
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	4638      	mov	r0, r7
 800206a:	491b      	ldr	r1, [pc, #108]	; (80020d8 <main+0x5d0>)
 800206c:	f012 f922 	bl	80142b4 <siprintf>
  					if(i <= menu_length-3){
 8002070:	8afb      	ldrh	r3, [r7, #22]
 8002072:	3b02      	subs	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	429a      	cmp	r2, r3
 8002078:	da51      	bge.n	800211e <main+0x616>
  						if((i == menu_cursor_position) && (menue_level == 1)){
 800207a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	429a      	cmp	r2, r3
 8002080:	d12c      	bne.n	80020dc <main+0x5d4>
 8002082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002084:	2b01      	cmp	r3, #1
 8002086:	d129      	bne.n	80020dc <main+0x5d4>
  	  		  	  			LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8002088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4413      	add	r3, r2
 8002096:	461a      	mov	r2, r3
 8002098:	0091      	lsls	r1, r2, #2
 800209a:	461a      	mov	r2, r3
 800209c:	460b      	mov	r3, r1
 800209e:	4413      	add	r3, r2
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	332d      	adds	r3, #45	; 0x2d
 80020a4:	b29c      	uxth	r4, r3
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff f930 	bl	800130c <RGB_to_BRG>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461d      	mov	r5, r3
 80020b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020b4:	f7ff f92a 	bl	800130c <RGB_to_BRG>
 80020b8:	4603      	mov	r3, r0
 80020ba:	463a      	mov	r2, r7
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	9500      	str	r5, [sp, #0]
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <main+0x5c8>)
 80020c2:	4621      	mov	r1, r4
 80020c4:	20c8      	movs	r0, #200	; 0xc8
 80020c6:	f002 fcdb 	bl	8004a80 <LCD_PutStr>
 80020ca:	e028      	b.n	800211e <main+0x616>
 80020cc:	20000098 	.word	0x20000098
 80020d0:	080178e8 	.word	0x080178e8
 80020d4:	20000628 	.word	0x20000628
 80020d8:	08017764 	.word	0x08017764

  						}
  						else{
  	  		  	  			LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	461a      	mov	r2, r3
 80020ec:	0091      	lsls	r1, r2, #2
 80020ee:	461a      	mov	r2, r3
 80020f0:	460b      	mov	r3, r1
 80020f2:	4413      	add	r3, r2
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	332d      	adds	r3, #45	; 0x2d
 80020f8:	b29c      	uxth	r4, r3
 80020fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020fe:	f7ff f905 	bl	800130c <RGB_to_BRG>
 8002102:	4603      	mov	r3, r0
 8002104:	461d      	mov	r5, r3
 8002106:	2000      	movs	r0, #0
 8002108:	f7ff f900 	bl	800130c <RGB_to_BRG>
 800210c:	4603      	mov	r3, r0
 800210e:	463a      	mov	r2, r7
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	9500      	str	r5, [sp, #0]
 8002114:	4bd6      	ldr	r3, [pc, #856]	; (8002470 <main+0x968>)
 8002116:	4621      	mov	r1, r4
 8002118:	20c8      	movs	r0, #200	; 0xc8
 800211a:	f002 fcb1 	bl	8004a80 <LCD_PutStr>
  				for(int i = menue_start;i<menue_start+6;i++){
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3301      	adds	r3, #1
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002126:	3305      	adds	r3, #5
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	429a      	cmp	r2, r3
 800212c:	f77f af22 	ble.w	8001f74 <main+0x46c>
  			while(menu_active == 1){
 8002130:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002132:	2b01      	cmp	r3, #1
 8002134:	f43f add2 	beq.w	8001cdc <main+0x1d4>
  				}
  			}
  		}

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8002138:	4bce      	ldr	r3, [pc, #824]	; (8002474 <main+0x96c>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd57 	bl	8000bf8 <__aeabi_d2uiz>
 800214a:	4603      	mov	r3, r0
 800214c:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.actual_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800214e:	4bca      	ldr	r3, [pc, #808]	; (8002478 <main+0x970>)
 8002150:	ed93 7b00 	vldr	d7, [r3]
 8002154:	4bc9      	ldr	r3, [pc, #804]	; (800247c <main+0x974>)
 8002156:	ed93 6b00 	vldr	d6, [r3]
 800215a:	4bc9      	ldr	r3, [pc, #804]	; (8002480 <main+0x978>)
 800215c:	ed93 5b00 	vldr	d5, [r3]
 8002160:	2300      	movs	r3, #0
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2301      	movs	r3, #1
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	eeb0 2a45 	vmov.f32	s4, s10
 800216c:	eef0 2a65 	vmov.f32	s5, s11
 8002170:	eeb0 1a46 	vmov.f32	s2, s12
 8002174:	eef0 1a66 	vmov.f32	s3, s13
 8002178:	eeb0 0a47 	vmov.f32	s0, s14
 800217c:	eef0 0a67 	vmov.f32	s1, s15
 8002180:	4bc0      	ldr	r3, [pc, #768]	; (8002484 <main+0x97c>)
 8002182:	4ac1      	ldr	r2, [pc, #772]	; (8002488 <main+0x980>)
 8002184:	49c1      	ldr	r1, [pc, #772]	; (800248c <main+0x984>)
 8002186:	48c2      	ldr	r0, [pc, #776]	; (8002490 <main+0x988>)
 8002188:	f001 f8e6 	bl	8003358 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800218c:	2101      	movs	r1, #1
 800218e:	48c0      	ldr	r0, [pc, #768]	; (8002490 <main+0x988>)
 8002190:	f001 fa75 	bl	800367e <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); //Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8002194:	4bbf      	ldr	r3, [pc, #764]	; (8002494 <main+0x98c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2200      	movs	r2, #0
 800219a:	4619      	mov	r1, r3
 800219c:	48bc      	ldr	r0, [pc, #752]	; (8002490 <main+0x988>)
 800219e:	f001 fc1d 	bl	80039dc <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 	// Set max and min output limit
 80021a2:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8002450 <main+0x948>
 80021a6:	ed9f 0bac 	vldr	d0, [pc, #688]	; 8002458 <main+0x950>
 80021aa:	48b9      	ldr	r0, [pc, #740]	; (8002490 <main+0x988>)
 80021ac:	f001 fa85 	bl	80036ba <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, PID_MIN_LIMIT, PID_MAX_LIMIT); 		// Set max and min I limit
 80021b0:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8002460 <main+0x958>
 80021b4:	ed9f 0bac 	vldr	d0, [pc, #688]	; 8002468 <main+0x960>
 80021b8:	48b5      	ldr	r0, [pc, #724]	; (8002490 <main+0x988>)
 80021ba:	f001 faec 	bl	8003796 <PID_SetILimits>


		UG_FillScreen(RGB_to_BRG(C_BLACK));
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff f8a4 	bl	800130c <RGB_to_BRG>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f00d fc22 	bl	800fa10 <UG_FillScreen>

		LCD_PutStr(55, 5, "AxxSolder", FONT_arial_29X35, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80021cc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80021d0:	f7ff f89c 	bl	800130c <RGB_to_BRG>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461c      	mov	r4, r3
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff f897 	bl	800130c <RGB_to_BRG>
 80021de:	4603      	mov	r3, r0
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	9400      	str	r4, [sp, #0]
 80021e4:	4bac      	ldr	r3, [pc, #688]	; (8002498 <main+0x990>)
 80021e6:	4aad      	ldr	r2, [pc, #692]	; (800249c <main+0x994>)
 80021e8:	2105      	movs	r1, #5
 80021ea:	2037      	movs	r0, #55	; 0x37
 80021ec:	f002 fc48 	bl	8004a80 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 80021f0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80021f4:	f7ff f88a 	bl	800130c <RGB_to_BRG>
 80021f8:	4603      	mov	r3, r0
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2328      	movs	r3, #40	; 0x28
 80021fe:	22f0      	movs	r2, #240	; 0xf0
 8002200:	2128      	movs	r1, #40	; 0x28
 8002202:	2000      	movs	r0, #0
 8002204:	f002 fbfe 	bl	8004a04 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002208:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800220c:	f7ff f87e 	bl	800130c <RGB_to_BRG>
 8002210:	4603      	mov	r3, r0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2329      	movs	r3, #41	; 0x29
 8002216:	22f0      	movs	r2, #240	; 0xf0
 8002218:	2129      	movs	r1, #41	; 0x29
 800221a:	2000      	movs	r0, #0
 800221c:	f002 fbf2 	bl	8004a04 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002220:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002224:	f7ff f872 	bl	800130c <RGB_to_BRG>
 8002228:	4603      	mov	r3, r0
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	232a      	movs	r3, #42	; 0x2a
 800222e:	22f0      	movs	r2, #240	; 0xf0
 8002230:	212a      	movs	r1, #42	; 0x2a
 8002232:	2000      	movs	r0, #0
 8002234:	f002 fbe6 	bl	8004a04 <LCD_DrawLine>


		LCD_PutStr(10, 50, "Set temp", FONT_arial_29X35, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002238:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800223c:	f7ff f866 	bl	800130c <RGB_to_BRG>
 8002240:	4603      	mov	r3, r0
 8002242:	461c      	mov	r4, r3
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff f861 	bl	800130c <RGB_to_BRG>
 800224a:	4603      	mov	r3, r0
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	9400      	str	r4, [sp, #0]
 8002250:	4b91      	ldr	r3, [pc, #580]	; (8002498 <main+0x990>)
 8002252:	4a93      	ldr	r2, [pc, #588]	; (80024a0 <main+0x998>)
 8002254:	2132      	movs	r1, #50	; 0x32
 8002256:	200a      	movs	r0, #10
 8002258:	f002 fc12 	bl	8004a80 <LCD_PutStr>
		UG_DrawCircle(105, 90, 4, RGB_to_BRG(C_GREEN));
 800225c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002260:	f7ff f854 	bl	800130c <RGB_to_BRG>
 8002264:	4603      	mov	r3, r0
 8002266:	2204      	movs	r2, #4
 8002268:	215a      	movs	r1, #90	; 0x5a
 800226a:	2069      	movs	r0, #105	; 0x69
 800226c:	f00d fcae 	bl	800fbcc <UG_DrawCircle>
		UG_DrawCircle(105, 90, 3, RGB_to_BRG(C_GREEN));
 8002270:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002274:	f7ff f84a 	bl	800130c <RGB_to_BRG>
 8002278:	4603      	mov	r3, r0
 800227a:	2203      	movs	r2, #3
 800227c:	215a      	movs	r1, #90	; 0x5a
 800227e:	2069      	movs	r0, #105	; 0x69
 8002280:	f00d fca4 	bl	800fbcc <UG_DrawCircle>
		LCD_PutStr(115, 75, "C", FONT_arial_29X35, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK)); //FONT_arial_49X57
 8002284:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002288:	f7ff f840 	bl	800130c <RGB_to_BRG>
 800228c:	4603      	mov	r3, r0
 800228e:	461c      	mov	r4, r3
 8002290:	2000      	movs	r0, #0
 8002292:	f7ff f83b 	bl	800130c <RGB_to_BRG>
 8002296:	4603      	mov	r3, r0
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	9400      	str	r4, [sp, #0]
 800229c:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <main+0x990>)
 800229e:	4a81      	ldr	r2, [pc, #516]	; (80024a4 <main+0x99c>)
 80022a0:	214b      	movs	r1, #75	; 0x4b
 80022a2:	2073      	movs	r0, #115	; 0x73
 80022a4:	f002 fbec 	bl	8004a80 <LCD_PutStr>


		LCD_PutStr(10, 140, "Actual temp", FONT_arial_29X35, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80022a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022ac:	f7ff f82e 	bl	800130c <RGB_to_BRG>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461c      	mov	r4, r3
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7ff f829 	bl	800130c <RGB_to_BRG>
 80022ba:	4603      	mov	r3, r0
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9400      	str	r4, [sp, #0]
 80022c0:	4b75      	ldr	r3, [pc, #468]	; (8002498 <main+0x990>)
 80022c2:	4a79      	ldr	r2, [pc, #484]	; (80024a8 <main+0x9a0>)
 80022c4:	218c      	movs	r1, #140	; 0x8c
 80022c6:	200a      	movs	r0, #10
 80022c8:	f002 fbda 	bl	8004a80 <LCD_PutStr>
		UG_DrawCircle(105, 185, 4, RGB_to_BRG(C_GREEN));
 80022cc:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80022d0:	f7ff f81c 	bl	800130c <RGB_to_BRG>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2204      	movs	r2, #4
 80022d8:	21b9      	movs	r1, #185	; 0xb9
 80022da:	2069      	movs	r0, #105	; 0x69
 80022dc:	f00d fc76 	bl	800fbcc <UG_DrawCircle>
		UG_DrawCircle(105, 185, 3, RGB_to_BRG(C_GREEN));
 80022e0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80022e4:	f7ff f812 	bl	800130c <RGB_to_BRG>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2203      	movs	r2, #3
 80022ec:	21b9      	movs	r1, #185	; 0xb9
 80022ee:	2069      	movs	r0, #105	; 0x69
 80022f0:	f00d fc6c 	bl	800fbcc <UG_DrawCircle>
		LCD_PutStr(115, 170, "C", FONT_arial_29X35, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
 80022f4:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80022f8:	f7ff f808 	bl	800130c <RGB_to_BRG>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461c      	mov	r4, r3
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff f803 	bl	800130c <RGB_to_BRG>
 8002306:	4603      	mov	r3, r0
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	9400      	str	r4, [sp, #0]
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <main+0x990>)
 800230e:	4a65      	ldr	r2, [pc, #404]	; (80024a4 <main+0x99c>)
 8002310:	21aa      	movs	r1, #170	; 0xaa
 8002312:	2073      	movs	r0, #115	; 0x73
 8002314:	f002 fbb4 	bl	8004a80 <LCD_PutStr>

		UG_DrawFrame(3, 136, 165, 225, RGB_to_BRG(C_GREEN));
 8002318:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800231c:	f7fe fff6 	bl	800130c <RGB_to_BRG>
 8002320:	4603      	mov	r3, r0
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	23e1      	movs	r3, #225	; 0xe1
 8002326:	22a5      	movs	r2, #165	; 0xa5
 8002328:	2188      	movs	r1, #136	; 0x88
 800232a:	2003      	movs	r0, #3
 800232c:	f00d fc06 	bl	800fb3c <UG_DrawFrame>
		UG_DrawFrame(2, 135, 166, 226, RGB_to_BRG(C_GREEN));
 8002330:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002334:	f7fe ffea 	bl	800130c <RGB_to_BRG>
 8002338:	4603      	mov	r3, r0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	23e2      	movs	r3, #226	; 0xe2
 800233e:	22a6      	movs	r2, #166	; 0xa6
 8002340:	2187      	movs	r1, #135	; 0x87
 8002342:	2002      	movs	r0, #2
 8002344:	f00d fbfa 	bl	800fb3c <UG_DrawFrame>


		LCD_PutStr(2, 235, "Handle type:", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002348:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800234c:	f7fe ffde 	bl	800130c <RGB_to_BRG>
 8002350:	4603      	mov	r3, r0
 8002352:	461c      	mov	r4, r3
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe ffd9 	bl	800130c <RGB_to_BRG>
 800235a:	4603      	mov	r3, r0
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	9400      	str	r4, [sp, #0]
 8002360:	4b43      	ldr	r3, [pc, #268]	; (8002470 <main+0x968>)
 8002362:	4a52      	ldr	r2, [pc, #328]	; (80024ac <main+0x9a4>)
 8002364:	21eb      	movs	r1, #235	; 0xeb
 8002366:	2002      	movs	r0, #2
 8002368:	f002 fb8a 	bl	8004a80 <LCD_PutStr>
		LCD_PutStr(2, 255, "Input voltage:", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800236c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002370:	f7fe ffcc 	bl	800130c <RGB_to_BRG>
 8002374:	4603      	mov	r3, r0
 8002376:	461c      	mov	r4, r3
 8002378:	2000      	movs	r0, #0
 800237a:	f7fe ffc7 	bl	800130c <RGB_to_BRG>
 800237e:	4603      	mov	r3, r0
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	9400      	str	r4, [sp, #0]
 8002384:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <main+0x968>)
 8002386:	4a4a      	ldr	r2, [pc, #296]	; (80024b0 <main+0x9a8>)
 8002388:	21ff      	movs	r1, #255	; 0xff
 800238a:	2002      	movs	r0, #2
 800238c:	f002 fb78 	bl	8004a80 <LCD_PutStr>
		LCD_PutStr(2, 275, "PCB temp:", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002390:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002394:	f7fe ffba 	bl	800130c <RGB_to_BRG>
 8002398:	4603      	mov	r3, r0
 800239a:	461c      	mov	r4, r3
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe ffb5 	bl	800130c <RGB_to_BRG>
 80023a2:	4603      	mov	r3, r0
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	9400      	str	r4, [sp, #0]
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <main+0x968>)
 80023aa:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <main+0x9ac>)
 80023ac:	f240 1113 	movw	r1, #275	; 0x113
 80023b0:	2002      	movs	r0, #2
 80023b2:	f002 fb65 	bl	8004a80 <LCD_PutStr>
		LCD_PutStr(125, 275, "POWER ->", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80023b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023ba:	f7fe ffa7 	bl	800130c <RGB_to_BRG>
 80023be:	4603      	mov	r3, r0
 80023c0:	461c      	mov	r4, r3
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe ffa2 	bl	800130c <RGB_to_BRG>
 80023c8:	4603      	mov	r3, r0
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	9400      	str	r4, [sp, #0]
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <main+0x968>)
 80023d0:	4a39      	ldr	r2, [pc, #228]	; (80024b8 <main+0x9b0>)
 80023d2:	f240 1113 	movw	r1, #275	; 0x113
 80023d6:	207d      	movs	r0, #125	; 0x7d
 80023d8:	f002 fb52 	bl	8004a80 <LCD_PutStr>

		UG_DrawLine(2, 298, 240, 298, RGB_to_BRG(C_YELLOW));
 80023dc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80023e0:	f7fe ff94 	bl	800130c <RGB_to_BRG>
 80023e4:	4603      	mov	r3, r0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80023ec:	22f0      	movs	r2, #240	; 0xf0
 80023ee:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80023f2:	2002      	movs	r0, #2
 80023f4:	f00d fcd0 	bl	800fd98 <UG_DrawLine>
		LCD_PutStr(2, 300, "PRESETS    ", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80023f8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80023fc:	f7fe ff86 	bl	800130c <RGB_to_BRG>
 8002400:	4603      	mov	r3, r0
 8002402:	461c      	mov	r4, r3
 8002404:	2000      	movs	r0, #0
 8002406:	f7fe ff81 	bl	800130c <RGB_to_BRG>
 800240a:	4603      	mov	r3, r0
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	9400      	str	r4, [sp, #0]
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <main+0x968>)
 8002412:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <main+0x9b4>)
 8002414:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002418:	2002      	movs	r0, #2
 800241a:	f002 fb31 	bl	8004a80 <LCD_PutStr>
		LCD_PutStr(165, 300, "280", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 800241e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002422:	f7fe ff73 	bl	800130c <RGB_to_BRG>
 8002426:	4603      	mov	r3, r0
 8002428:	461c      	mov	r4, r3
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe ff6e 	bl	800130c <RGB_to_BRG>
 8002430:	4603      	mov	r3, r0
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	9400      	str	r4, [sp, #0]
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <main+0x968>)
 8002438:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <main+0x9b8>)
 800243a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800243e:	20a5      	movs	r0, #165	; 0xa5
 8002440:	f002 fb1e 	bl	8004a80 <LCD_PutStr>
		LCD_PutStr(205, 300, "330", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002444:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002448:	f7fe ff60 	bl	800130c <RGB_to_BRG>
 800244c:	4603      	mov	r3, r0
 800244e:	e039      	b.n	80024c4 <main+0x9bc>
 8002450:	00000000 	.word	0x00000000
 8002454:	40790000 	.word	0x40790000
	...
 8002464:	4072c000 	.word	0x4072c000
 8002468:	00000000 	.word	0x00000000
 800246c:	c072c000 	.word	0xc072c000
 8002470:	080178e8 	.word	0x080178e8
 8002474:	20000628 	.word	0x20000628
 8002478:	20000570 	.word	0x20000570
 800247c:	20000578 	.word	0x20000578
 8002480:	20000580 	.word	0x20000580
 8002484:	20000660 	.word	0x20000660
 8002488:	20000658 	.word	0x20000658
 800248c:	20000030 	.word	0x20000030
 8002490:	20001a70 	.word	0x20001a70
 8002494:	2000000c 	.word	0x2000000c
 8002498:	08019240 	.word	0x08019240
 800249c:	0801776c 	.word	0x0801776c
 80024a0:	08017778 	.word	0x08017778
 80024a4:	08017784 	.word	0x08017784
 80024a8:	08017788 	.word	0x08017788
 80024ac:	08017794 	.word	0x08017794
 80024b0:	080177a4 	.word	0x080177a4
 80024b4:	080177b4 	.word	0x080177b4
 80024b8:	080177c0 	.word	0x080177c0
 80024bc:	080177cc 	.word	0x080177cc
 80024c0:	080177d8 	.word	0x080177d8
 80024c4:	461c      	mov	r4, r3
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7fe ff20 	bl	800130c <RGB_to_BRG>
 80024cc:	4603      	mov	r3, r0
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	9400      	str	r4, [sp, #0]
 80024d2:	4b70      	ldr	r3, [pc, #448]	; (8002694 <main+0xb8c>)
 80024d4:	4a70      	ldr	r2, [pc, #448]	; (8002698 <main+0xb90>)
 80024d6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024da:	20cd      	movs	r0, #205	; 0xcd
 80024dc:	f002 fad0 	bl	8004a80 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 80024e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024e4:	f7fe ff12 	bl	800130c <RGB_to_BRG>
 80024e8:	4603      	mov	r3, r0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f240 1321 	movw	r3, #289	; 0x121
 80024f0:	22e8      	movs	r2, #232	; 0xe8
 80024f2:	2135      	movs	r1, #53	; 0x35
 80024f4:	20d0      	movs	r0, #208	; 0xd0
 80024f6:	f00d fb21 	bl	800fb3c <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 80024fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024fe:	f7fe ff05 	bl	800130c <RGB_to_BRG>
 8002502:	4603      	mov	r3, r0
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	f44f 7390 	mov.w	r3, #288	; 0x120
 800250a:	22e7      	movs	r2, #231	; 0xe7
 800250c:	2136      	movs	r1, #54	; 0x36
 800250e:	20d1      	movs	r0, #209	; 0xd1
 8002510:	f00d fb14 	bl	800fb3c <UG_DrawFrame>


		UG_FillFrame(180, 60, 200, 80, RGB_to_BRG(C_RED));
 8002514:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002518:	f7fe fef8 	bl	800130c <RGB_to_BRG>
 800251c:	4603      	mov	r3, r0
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2350      	movs	r3, #80	; 0x50
 8002522:	22c8      	movs	r2, #200	; 0xc8
 8002524:	213c      	movs	r1, #60	; 0x3c
 8002526:	20b4      	movs	r0, #180	; 0xb4
 8002528:	f00d fa96 	bl	800fa58 <UG_FillFrame>
		UG_FillFrame(180, 80, 200, 100, RGB_to_BRG(C_GREEN));
 800252c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002530:	f7fe feec 	bl	800130c <RGB_to_BRG>
 8002534:	4603      	mov	r3, r0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2364      	movs	r3, #100	; 0x64
 800253a:	22c8      	movs	r2, #200	; 0xc8
 800253c:	2150      	movs	r1, #80	; 0x50
 800253e:	20b4      	movs	r0, #180	; 0xb4
 8002540:	f00d fa8a 	bl	800fa58 <UG_FillFrame>
		UG_FillFrame(180, 100, 200, 120, RGB_to_BRG(C_BLUE));
 8002544:	201f      	movs	r0, #31
 8002546:	f7fe fee1 	bl	800130c <RGB_to_BRG>
 800254a:	4603      	mov	r3, r0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2378      	movs	r3, #120	; 0x78
 8002550:	22c8      	movs	r2, #200	; 0xc8
 8002552:	2164      	movs	r1, #100	; 0x64
 8002554:	20b4      	movs	r0, #180	; 0xb4
 8002556:	f00d fa7f 	bl	800fa58 <UG_FillFrame>
		UG_FillFrame(180, 120, 200, 140, RGB_to_BRG(C_ORANGE));
 800255a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800255e:	f7fe fed5 	bl	800130c <RGB_to_BRG>
 8002562:	4603      	mov	r3, r0
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	238c      	movs	r3, #140	; 0x8c
 8002568:	22c8      	movs	r2, #200	; 0xc8
 800256a:	2178      	movs	r1, #120	; 0x78
 800256c:	20b4      	movs	r0, #180	; 0xb4
 800256e:	f00d fa73 	bl	800fa58 <UG_FillFrame>
		UG_FillFrame(180, 140, 200, 160, RGB_to_BRG(C_WHITE));
 8002572:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002576:	f7fe fec9 	bl	800130c <RGB_to_BRG>
 800257a:	4603      	mov	r3, r0
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	23a0      	movs	r3, #160	; 0xa0
 8002580:	22c8      	movs	r2, #200	; 0xc8
 8002582:	218c      	movs	r1, #140	; 0x8c
 8002584:	20b4      	movs	r0, #180	; 0xb4
 8002586:	f00d fa67 	bl	800fa58 <UG_FillFrame>
		UG_FillFrame(180, 160, 200, 180, RGB_to_BRG(C_BLACK));
 800258a:	2000      	movs	r0, #0
 800258c:	f7fe febe 	bl	800130c <RGB_to_BRG>
 8002590:	4603      	mov	r3, r0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	23b4      	movs	r3, #180	; 0xb4
 8002596:	22c8      	movs	r2, #200	; 0xc8
 8002598:	21a0      	movs	r1, #160	; 0xa0
 800259a:	20b4      	movs	r0, #180	; 0xb4
 800259c:	f00d fa5c 	bl	800fa58 <UG_FillFrame>
		UG_FillFrame(180, 180, 200, 200, RGB_to_BRG(C_YELLOW));
 80025a0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025a4:	f7fe feb2 	bl	800130c <RGB_to_BRG>
 80025a8:	4603      	mov	r3, r0
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	23c8      	movs	r3, #200	; 0xc8
 80025ae:	22c8      	movs	r2, #200	; 0xc8
 80025b0:	21b4      	movs	r1, #180	; 0xb4
 80025b2:	20b4      	movs	r0, #180	; 0xb4
 80025b4:	f00d fa50 	bl	800fa58 <UG_FillFrame>
		UG_FillFrame(180, 200, 200, 220, RGB_to_BRG(C_DARK_GREEN));
 80025b8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80025bc:	f7fe fea6 	bl	800130c <RGB_to_BRG>
 80025c0:	4603      	mov	r3, r0
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	23dc      	movs	r3, #220	; 0xdc
 80025c6:	22c8      	movs	r2, #200	; 0xc8
 80025c8:	21c8      	movs	r1, #200	; 0xc8
 80025ca:	20b4      	movs	r0, #180	; 0xb4
 80025cc:	f00d fa44 	bl	800fa58 <UG_FillFrame>
		UG_FillFrame(180, 220, 200, 240, RGB_to_BRG(C_LIGHT_SKY_BLUE));
 80025d0:	f248 607e 	movw	r0, #34430	; 0x867e
 80025d4:	f7fe fe9a 	bl	800130c <RGB_to_BRG>
 80025d8:	4603      	mov	r3, r0
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	23f0      	movs	r3, #240	; 0xf0
 80025de:	22c8      	movs	r2, #200	; 0xc8
 80025e0:	21dc      	movs	r1, #220	; 0xdc
 80025e2:	20b4      	movs	r0, #180	; 0xb4
 80025e4:	f00d fa38 	bl	800fa58 <UG_FillFrame>

  		/* Start-up beep */
  		beep();
 80025e8:	f7ff f860 	bl	80016ac <beep>
  		HAL_Delay(200);
 80025ec:	20c8      	movs	r0, #200	; 0xc8
 80025ee:	f002 fb61 	bl	8004cb4 <HAL_Delay>
  		beep();
 80025f2:	f7ff f85b 	bl	80016ac <beep>
  		HAL_Delay(200);
 80025f6:	20c8      	movs	r0, #200	; 0xc8
 80025f8:	f002 fb5c 	bl	8004cb4 <HAL_Delay>
  		beep();
 80025fc:	f7ff f856 	bl	80016ac <beep>


  		while (1){

  			check_emergency_shutdown();
 8002600:	f7ff f866 	bl	80016d0 <check_emergency_shutdown>

  			if(HAL_GetTick() - previous_sensor_PID_update >= interval_sensor_update){
 8002604:	f002 fb4a 	bl	8004c9c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <main+0xb94>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1ad2      	subs	r2, r2, r3
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <main+0xb98>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d30e      	bcc.n	8002636 <main+0xb2e>
  				get_stand_status();
 8002618:	f7ff f932 	bl	8001880 <get_stand_status>
  				get_bus_voltage();
 800261c:	f7fe fec8 	bl	80013b0 <get_bus_voltage>
  				get_handle_type();
 8002620:	f7ff f9ba 	bl	8001998 <get_handle_type>
  				get_enc_button_status();
 8002624:	f7ff f8c4 	bl	80017b0 <get_enc_button_status>
  				get_set_temperature();
 8002628:	f7ff f808 	bl	800163c <get_set_temperature>
  				previous_sensor_PID_update = HAL_GetTick();
 800262c:	f002 fb36 	bl	8004c9c <HAL_GetTick>
 8002630:	4603      	mov	r3, r0
 8002632:	4a1a      	ldr	r2, [pc, #104]	; (800269c <main+0xb94>)
 8002634:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <main+0xb9c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d842      	bhi.n	80026c4 <main+0xbbc>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <main+0xb3c>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002669 	.word	0x08002669
 8002648:	08002677 	.word	0x08002677
 800264c:	08002685 	.word	0x08002685
 8002650:	08002659 	.word	0x08002659
 8002654:	080026b5 	.word	0x080026b5
  				case EMERGENCY_SLEEP: {
  					PID_setpoint = 0;
 8002658:	4913      	ldr	r1, [pc, #76]	; (80026a8 <main+0xba0>)
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002666:	e02d      	b.n	80026c4 <main+0xbbc>
  				}
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <main+0xba4>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	490e      	ldr	r1, [pc, #56]	; (80026a8 <main+0xba0>)
 8002670:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002674:	e026      	b.n	80026c4 <main+0xbbc>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <main+0xba8>)
 8002678:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800267c:	490a      	ldr	r1, [pc, #40]	; (80026a8 <main+0xba0>)
 800267e:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002682:	e01f      	b.n	80026c4 <main+0xbbc>
  				}
  				case SLEEP: {
  					PID_setpoint = 0;
 8002684:	4908      	ldr	r1, [pc, #32]	; (80026a8 <main+0xba0>)
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002692:	e017      	b.n	80026c4 <main+0xbbc>
 8002694:	080178e8 	.word	0x080178e8
 8002698:	080177dc 	.word	0x080177dc
 800269c:	2000056c 	.word	0x2000056c
 80026a0:	20000014 	.word	0x20000014
 80026a4:	20000018 	.word	0x20000018
 80026a8:	20000660 	.word	0x20000660
 80026ac:	20000028 	.word	0x20000028
 80026b0:	20000628 	.word	0x20000628
  				}
  				case HALTED: {
  					PID_setpoint = 0;
 80026b4:	4976      	ldr	r1, [pc, #472]	; (8002890 <main+0xd88>)
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80026c2:	bf00      	nop
  				}
  			}

  			if(HAL_GetTick() - previous_PID_update >= interval_PID_update){
 80026c4:	f002 faea 	bl	8004c9c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b72      	ldr	r3, [pc, #456]	; (8002894 <main+0xd8c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1ad2      	subs	r2, r2, r3
 80026d0:	4b71      	ldr	r3, [pc, #452]	; (8002898 <main+0xd90>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d34e      	bcc.n	8002776 <main+0xc6e>
  				set_heater_duty(0);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7ff fa03 	bl	8001ae4 <set_heater_duty>
  				HAL_Delay(5); // Wait to let the thermocouple voltage stabilize before taking measurement
 80026de:	2005      	movs	r0, #5
 80026e0:	f002 fae8 	bl	8004cb4 <HAL_Delay>
  				get_actual_temperature();
 80026e4:	f7fe fe94 	bl	8001410 <get_actual_temperature>

  				/* Compute PID and set duty cycle */
  				PID_Compute(&TPID);
 80026e8:	486c      	ldr	r0, [pc, #432]	; (800289c <main+0xd94>)
 80026ea:	f000 fe81 	bl	80033f0 <PID_Compute>
  				duty_cycle = PID_output*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 80026ee:	4b6c      	ldr	r3, [pc, #432]	; (80028a0 <main+0xd98>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd ff50 	bl	8000598 <__aeabi_f2d>
 80026f8:	a35f      	add	r3, pc, #380	; (adr r3, 8002878 <main+0xd70>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd ffa3 	bl	8000648 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4614      	mov	r4, r2
 8002708:	461d      	mov	r5, r3
 800270a:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <main+0xd9c>)
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff42 	bl	8000598 <__aeabi_f2d>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f7fe f8be 	bl	800089c <__aeabi_ddiv>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <main+0xda0>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fd ff8b 	bl	8000648 <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	495d      	ldr	r1, [pc, #372]	; (80028ac <main+0xda4>)
 8002738:	e9c1 2300 	strd	r2, r3, [r1]
  				set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 800273c:	4b5b      	ldr	r3, [pc, #364]	; (80028ac <main+0xda4>)
 800273e:	ed93 7b00 	vldr	d7, [r3]
 8002742:	ed9f 2b4f 	vldr	d2, [pc, #316]	; 8002880 <main+0xd78>
 8002746:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8002888 <main+0xd80>
 800274a:	eeb0 0a47 	vmov.f32	s0, s14
 800274e:	eef0 0a67 	vmov.f32	s1, s15
 8002752:	f7fe fdab 	bl	80012ac <clamp>
 8002756:	ec53 2b10 	vmov	r2, r3, d0
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f7fe fa4b 	bl	8000bf8 <__aeabi_d2uiz>
 8002762:	4603      	mov	r3, r0
 8002764:	b29b      	uxth	r3, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff f9bc 	bl	8001ae4 <set_heater_duty>

  				previous_PID_update = HAL_GetTick();
 800276c:	f002 fa96 	bl	8004c9c <HAL_GetTick>
 8002770:	4603      	mov	r3, r0
 8002772:	4a48      	ldr	r2, [pc, #288]	; (8002894 <main+0xd8c>)
 8002774:	6013      	str	r3, [r2, #0]
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information over serial */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8002776:	f002 fa91 	bl	8004c9c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <main+0xda8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <main+0xdac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d362      	bcc.n	8002850 <main+0xd48>
  				memset(&buffer, '\0', sizeof(buffer));
 800278a:	2228      	movs	r2, #40	; 0x28
 800278c:	2100      	movs	r1, #0
 800278e:	484a      	ldr	r0, [pc, #296]	; (80028b8 <main+0xdb0>)
 8002790:	f011 fdf3 	bl	801437a <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002794:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <main+0xd9c>)
 8002796:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 800279a:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <main+0xd9c>)
 800279c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <main+0xda0>)
 80027a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	4b44      	ldr	r3, [pc, #272]	; (80028bc <main+0xdb4>)
 80027ac:	f7fe f876 	bl	800089c <__aeabi_ddiv>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	ec43 2b19 	vmov	d9, r2, r3
  						sensor_values.actual_temperature, sensor_values.set_temperature,
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 80027b8:	4838      	ldr	r0, [pc, #224]	; (800289c <main+0xd94>)
 80027ba:	f001 f953 	bl	8003a64 <PID_GetPpart>
 80027be:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <main+0xdb4>)
 80027c8:	f7fe f868 	bl	800089c <__aeabi_ddiv>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 80027d4:	4831      	ldr	r0, [pc, #196]	; (800289c <main+0xd94>)
 80027d6:	f001 f957 	bl	8003a88 <PID_GetIpart>
 80027da:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <main+0xdb4>)
 80027e4:	f7fe f85a 	bl	800089c <__aeabi_ddiv>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 80027f0:	482a      	ldr	r0, [pc, #168]	; (800289c <main+0xd94>)
 80027f2:	f001 f95b 	bl	8003aac <PID_GetDpart>
 80027f6:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <main+0xdb4>)
 8002800:	f7fe f84c 	bl	800089c <__aeabi_ddiv>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4690      	mov	r8, r2
 800280a:	4699      	mov	r9, r3
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <main+0xd9c>)
 800280e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <main+0xd9c>)
 8002814:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002818:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800281c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002820:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002824:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002828:	ed8d ab04 	vstr	d10, [sp, #16]
 800282c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8002830:	e9cd 4500 	strd	r4, r5, [sp]
 8002834:	4652      	mov	r2, sl
 8002836:	465b      	mov	r3, fp
 8002838:	4921      	ldr	r1, [pc, #132]	; (80028c0 <main+0xdb8>)
 800283a:	481f      	ldr	r0, [pc, #124]	; (80028b8 <main+0xdb0>)
 800283c:	f011 fd3a 	bl	80142b4 <siprintf>
  						sensor_values.in_stand, sensor_values.enc_button_status);
  				debugPrint(buffer);
 8002840:	481d      	ldr	r0, [pc, #116]	; (80028b8 <main+0xdb0>)
 8002842:	f7fe fef1 	bl	8001628 <debugPrint>
  				previous_millis_debug = HAL_GetTick();
 8002846:	f002 fa29 	bl	8004c9c <HAL_GetTick>
 800284a:	4603      	mov	r3, r0
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <main+0xda8>)
 800284e:	6013      	str	r3, [r2, #0]
  					previous_check_for_valid_heater_update = HAL_GetTick();
  				}
  			}

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8002850:	f002 fa24 	bl	8004c9c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <main+0xdbc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	1ad2      	subs	r2, r2, r3
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <main+0xdc0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	f4ff aecd 	bcc.w	8002600 <main+0xaf8>
  				//update_display();
  				previous_millis_display = HAL_GetTick();
 8002866:	f002 fa19 	bl	8004c9c <HAL_GetTick>
 800286a:	4603      	mov	r3, r0
 800286c:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <main+0xdbc>)
 800286e:	6013      	str	r3, [r2, #0]
  			check_emergency_shutdown();
 8002870:	e6c6      	b.n	8002600 <main+0xaf8>
 8002872:	bf00      	nop
 8002874:	f3af 8000 	nop.w
 8002878:	eb851eb8 	.word	0xeb851eb8
 800287c:	3fbeb851 	.word	0x3fbeb851
 8002880:	00000000 	.word	0x00000000
 8002884:	40790000 	.word	0x40790000
	...
 8002890:	20000660 	.word	0x20000660
 8002894:	2000055c 	.word	0x2000055c
 8002898:	2000000c 	.word	0x2000000c
 800289c:	20001a70 	.word	0x20001a70
 80028a0:	200005b0 	.word	0x200005b0
 80028a4:	20000028 	.word	0x20000028
 80028a8:	20000658 	.word	0x20000658
 80028ac:	20000668 	.word	0x20000668
 80028b0:	20000558 	.word	0x20000558
 80028b4:	20000008 	.word	0x20000008
 80028b8:	20000588 	.word	0x20000588
 80028bc:	40240000 	.word	0x40240000
 80028c0:	080177e0 	.word	0x080177e0
 80028c4:	20000554 	.word	0x20000554
 80028c8:	20000004 	.word	0x20000004

080028cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b094      	sub	sp, #80	; 0x50
 80028d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028d2:	f107 0318 	add.w	r3, r7, #24
 80028d6:	2238      	movs	r2, #56	; 0x38
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f011 fd4d 	bl	801437a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f006 feb8 	bl	8009664 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80028f4:	2322      	movs	r3, #34	; 0x22
 80028f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028fe:	2340      	movs	r3, #64	; 0x40
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002902:	2301      	movs	r3, #1
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002906:	2302      	movs	r3, #2
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800290a:	2302      	movs	r3, #2
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800290e:	2304      	movs	r3, #4
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002912:	2355      	movs	r3, #85	; 0x55
 8002914:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002916:	2302      	movs	r3, #2
 8002918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800291a:	2302      	movs	r3, #2
 800291c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800291e:	2302      	movs	r3, #2
 8002920:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	4618      	mov	r0, r3
 8002928:	f006 ff50 	bl	80097cc <HAL_RCC_OscConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002932:	f000 fc43 	bl	80031bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002936:	230f      	movs	r3, #15
 8002938:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800293a:	2303      	movs	r3, #3
 800293c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	2104      	movs	r1, #4
 800294e:	4618      	mov	r0, r3
 8002950:	f007 fa4e 	bl	8009df0 <HAL_RCC_ClockConfig>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800295a:	f000 fc2f 	bl	80031bc <Error_Handler>
  }
}
 800295e:	bf00      	nop
 8002960:	3750      	adds	r7, #80	; 0x50
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	; 0x30
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	2220      	movs	r2, #32
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f011 fcfa 	bl	801437a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <MX_ADC1_Init+0xe8>)
 8002988:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800298c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <MX_ADC1_Init+0xe8>)
 8002990:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002994:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <MX_ADC1_Init+0xe8>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800299c:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <MX_ADC1_Init+0xe8>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80029a2:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029a8:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029ae:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029b0:	2204      	movs	r2, #4
 80029b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80029b4:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029bc:	2200      	movs	r2, #0
 80029be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80029c0:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029f0:	4817      	ldr	r0, [pc, #92]	; (8002a50 <MX_ADC1_Init+0xe8>)
 80029f2:	f002 fbc5 	bl	8005180 <HAL_ADC_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80029fc:	f000 fbde 	bl	80031bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4811      	ldr	r0, [pc, #68]	; (8002a50 <MX_ADC1_Init+0xe8>)
 8002a0c:	f003 fd5c 	bl	80064c8 <HAL_ADCEx_MultiModeConfigChannel>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002a16:	f000 fbd1 	bl	80031bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <MX_ADC1_Init+0xec>)
 8002a1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a1e:	2306      	movs	r3, #6
 8002a20:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a26:	237f      	movs	r3, #127	; 0x7f
 8002a28:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4806      	ldr	r0, [pc, #24]	; (8002a50 <MX_ADC1_Init+0xe8>)
 8002a38:	f002 ff28 	bl	800588c <HAL_ADC_ConfigChannel>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002a42:	f000 fbbb 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a46:	bf00      	nop
 8002a48:	3730      	adds	r7, #48	; 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000164c 	.word	0x2000164c
 8002a54:	0c900008 	.word	0x0c900008

08002a58 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a5e:	463b      	mov	r3, r7
 8002a60:	2220      	movs	r2, #32
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f011 fc88 	bl	801437a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002a6c:	4a2b      	ldr	r2, [pc, #172]	; (8002b1c <MX_ADC2_Init+0xc4>)
 8002a6e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002a72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a76:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002a92:	2204      	movs	r2, #4
 8002a94:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002ad2:	4811      	ldr	r0, [pc, #68]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002ad4:	f002 fb54 	bl	8005180 <HAL_ADC_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002ade:	f000 fb6d 	bl	80031bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <MX_ADC2_Init+0xc8>)
 8002ae4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002aee:	237f      	movs	r3, #127	; 0x7f
 8002af0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002af2:	2304      	movs	r3, #4
 8002af4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002afa:	463b      	mov	r3, r7
 8002afc:	4619      	mov	r1, r3
 8002afe:	4806      	ldr	r0, [pc, #24]	; (8002b18 <MX_ADC2_Init+0xc0>)
 8002b00:	f002 fec4 	bl	800588c <HAL_ADC_ConfigChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002b0a:	f000 fb57 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200016b8 	.word	0x200016b8
 8002b1c:	50000100 	.word	0x50000100
 8002b20:	2a000400 	.word	0x2a000400

08002b24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002b28:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <MX_CRC_Init+0x3c>)
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <MX_CRC_Init+0x40>)
 8002b2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <MX_CRC_Init+0x3c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <MX_CRC_Init+0x3c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <MX_CRC_Init+0x3c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <MX_CRC_Init+0x3c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_CRC_Init+0x3c>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002b4c:	4804      	ldr	r0, [pc, #16]	; (8002b60 <MX_CRC_Init+0x3c>)
 8002b4e:	f003 fe6f 	bl	8006830 <HAL_CRC_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002b58:	f000 fb30 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20001724 	.word	0x20001724
 8002b64:	40023000 	.word	0x40023000

08002b68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002b6e:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <MX_I2C1_Init+0x78>)
 8002b70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <MX_I2C1_Init+0x7c>)
 8002b76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b84:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ba2:	480e      	ldr	r0, [pc, #56]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002ba4:	f004 fef8 	bl	8007998 <HAL_I2C_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bae:	f000 fb05 	bl	80031bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4809      	ldr	r0, [pc, #36]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002bb6:	f004 ff8a 	bl	8007ace <HAL_I2CEx_ConfigAnalogFilter>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bc0:	f000 fafc 	bl	80031bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <MX_I2C1_Init+0x74>)
 8002bc8:	f004 ffcc 	bl	8007b64 <HAL_I2CEx_ConfigDigitalFilter>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002bd2:	f000 faf3 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20001748 	.word	0x20001748
 8002be0:	40005400 	.word	0x40005400
 8002be4:	30a0a7fb 	.word	0x30a0a7fb

08002be8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002bee:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <MX_SPI2_Init+0x78>)
 8002bf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002bf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002bfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c00:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c02:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c04:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c20:	2208      	movs	r2, #8
 8002c22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c44:	2208      	movs	r2, #8
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c48:	4804      	ldr	r0, [pc, #16]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c4a:	f007 fcdd 	bl	800a608 <HAL_SPI_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8002c54:	f000 fab2 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	2000179c 	.word	0x2000179c
 8002c60:	40003800 	.word	0x40003800

08002c64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b098      	sub	sp, #96	; 0x60
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	611a      	str	r2, [r3, #16]
 8002c86:	615a      	str	r2, [r3, #20]
 8002c88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	2234      	movs	r2, #52	; 0x34
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f011 fb72 	bl	801437a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c96:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002c98:	4a3b      	ldr	r2, [pc, #236]	; (8002d88 <MX_TIM1_Init+0x124>)
 8002c9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c9c:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cc2:	4830      	ldr	r0, [pc, #192]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002cc4:	f008 fa76 	bl	800b1b4 <HAL_TIM_PWM_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002cce:	f000 fa75 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4827      	ldr	r0, [pc, #156]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002ce6:	f009 fadd 	bl	800c2a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002cf0:	f000 fa64 	bl	80031bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cf4:	2360      	movs	r3, #96	; 0x60
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d00:	2300      	movs	r3, #0
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d14:	2208      	movs	r2, #8
 8002d16:	4619      	mov	r1, r3
 8002d18:	481a      	ldr	r0, [pc, #104]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002d1a:	f008 fd43 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002d24:	f000 fa4a 	bl	80031bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	4619      	mov	r1, r3
 8002d64:	4807      	ldr	r0, [pc, #28]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002d66:	f009 fb1f 	bl	800c3a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002d70:	f000 fa24 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d74:	4803      	ldr	r0, [pc, #12]	; (8002d84 <MX_TIM1_Init+0x120>)
 8002d76:	f001 f945 	bl	8004004 <HAL_TIM_MspPostInit>

}
 8002d7a:	bf00      	nop
 8002d7c:	3760      	adds	r7, #96	; 0x60
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20001860 	.word	0x20001860
 8002d88:	40012c00 	.word	0x40012c00

08002d8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d92:	f107 030c 	add.w	r3, r7, #12
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f011 faed 	bl	801437a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da0:	463b      	mov	r3, r7
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <MX_TIM2_Init+0xa4>)
 8002dac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002db0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002db2:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <MX_TIM2_Init+0xa4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <MX_TIM2_Init+0xa4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <MX_TIM2_Init+0xa4>)
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <MX_TIM2_Init+0xa4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <MX_TIM2_Init+0xa4>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002dea:	2301      	movs	r3, #1
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002df6:	f107 030c 	add.w	r3, r7, #12
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <MX_TIM2_Init+0xa4>)
 8002dfe:	f008 fb7d 	bl	800b4fc <HAL_TIM_Encoder_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002e08:	f000 f9d8 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e14:	463b      	mov	r3, r7
 8002e16:	4619      	mov	r1, r3
 8002e18:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_TIM2_Init+0xa4>)
 8002e1a:	f009 fa43 	bl	800c2a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002e24:	f000 f9ca 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e28:	bf00      	nop
 8002e2a:	3730      	adds	r7, #48	; 0x30
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200018ac 	.word	0x200018ac

08002e34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3a:	f107 031c 	add.w	r3, r7, #28
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e46:	463b      	mov	r3, r7
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
 8002e54:	615a      	str	r2, [r3, #20]
 8002e56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e58:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002e5a:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <MX_TIM4_Init+0xb0>)
 8002e5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e7e:	4818      	ldr	r0, [pc, #96]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002e80:	f008 f998 	bl	800b1b4 <HAL_TIM_PWM_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002e8a:	f000 f997 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4810      	ldr	r0, [pc, #64]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002e9e:	f009 fa01 	bl	800c2a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002ea8:	f000 f988 	bl	80031bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eac:	2360      	movs	r3, #96	; 0x60
 8002eae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002ec4:	f008 fc6e 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002ece:	f000 f975 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ed2:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <MX_TIM4_Init+0xac>)
 8002ed4:	f001 f896 	bl	8004004 <HAL_TIM_MspPostInit>

}
 8002ed8:	bf00      	nop
 8002eda:	3728      	adds	r7, #40	; 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200018f8 	.word	0x200018f8
 8002ee4:	40000800 	.word	0x40000800

08002ee8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002efa:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <MX_TIM6_Init+0x68>)
 8002efc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f1a:	f008 f889 	bl	800b030 <HAL_TIM_Base_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002f24:	f000 f94a 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	4619      	mov	r1, r3
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f36:	f009 f9b5 	bl	800c2a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002f40:	f000 f93c 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20001944 	.word	0x20001944
 8002f50:	40001000 	.word	0x40001000

08002f54 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <MX_TIM16_Init+0x44>)
 8002f5a:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <MX_TIM16_Init+0x48>)
 8002f5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_TIM16_Init+0x44>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_TIM16_Init+0x44>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <MX_TIM16_Init+0x44>)
 8002f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f70:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_TIM16_Init+0x44>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002f78:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <MX_TIM16_Init+0x44>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_TIM16_Init+0x44>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002f84:	4804      	ldr	r0, [pc, #16]	; (8002f98 <MX_TIM16_Init+0x44>)
 8002f86:	f008 f853 	bl	800b030 <HAL_TIM_Base_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002f90:	f000 f914 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20001990 	.word	0x20001990
 8002f9c:	40014400 	.word	0x40014400

08002fa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fa4:	4b22      	ldr	r3, [pc, #136]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fa6:	4a23      	ldr	r2, [pc, #140]	; (8003034 <MX_USART1_UART_Init+0x94>)
 8002fa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fca:	4b19      	ldr	r3, [pc, #100]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd0:	4b17      	ldr	r3, [pc, #92]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002fe8:	4811      	ldr	r0, [pc, #68]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002fea:	f009 fa8e 	bl	800c50a <HAL_HalfDuplex_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ff4:	f000 f8e2 	bl	80031bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	480d      	ldr	r0, [pc, #52]	; (8003030 <MX_USART1_UART_Init+0x90>)
 8002ffc:	f00a f802 	bl	800d004 <HAL_UARTEx_SetTxFifoThreshold>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003006:	f000 f8d9 	bl	80031bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800300a:	2100      	movs	r1, #0
 800300c:	4808      	ldr	r0, [pc, #32]	; (8003030 <MX_USART1_UART_Init+0x90>)
 800300e:	f00a f837 	bl	800d080 <HAL_UARTEx_SetRxFifoThreshold>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003018:	f000 f8d0 	bl	80031bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800301c:	4804      	ldr	r0, [pc, #16]	; (8003030 <MX_USART1_UART_Init+0x90>)
 800301e:	f009 ffb8 	bl	800cf92 <HAL_UARTEx_DisableFifoMode>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003028:	f000 f8c8 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200019dc 	.word	0x200019dc
 8003034:	40013800 	.word	0x40013800

08003038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <MX_DMA_Init+0x50>)
 8003040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003042:	4a11      	ldr	r2, [pc, #68]	; (8003088 <MX_DMA_Init+0x50>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6493      	str	r3, [r2, #72]	; 0x48
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <MX_DMA_Init+0x50>)
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <MX_DMA_Init+0x50>)
 8003058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <MX_DMA_Init+0x50>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6493      	str	r3, [r2, #72]	; 0x48
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <MX_DMA_Init+0x50>)
 8003064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	200b      	movs	r0, #11
 8003074:	f003 fba7 	bl	80067c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003078:	200b      	movs	r0, #11
 800307a:	f003 fbbe 	bl	80067fa <HAL_NVIC_EnableIRQ>

}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000

0800308c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a2:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a6:	4a42      	ldr	r2, [pc, #264]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ae:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	4a3c      	ldr	r2, [pc, #240]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030c0:	f043 0320 	orr.w	r3, r3, #32
 80030c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030c6:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d6:	4a36      	ldr	r2, [pc, #216]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f6:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <MX_GPIO_Init+0x124>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8003102:	2200      	movs	r2, #0
 8003104:	2102      	movs	r1, #2
 8003106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800310a:	f004 fc2d 	bl	8007968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 800310e:	2200      	movs	r2, #0
 8003110:	f645 4107 	movw	r1, #23559	; 0x5c07
 8003114:	4827      	ldr	r0, [pc, #156]	; (80031b4 <MX_GPIO_Init+0x128>)
 8003116:	f004 fc27 	bl	8007968 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 800311a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800311e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	4619      	mov	r1, r3
 800312e:	4822      	ldr	r0, [pc, #136]	; (80031b8 <MX_GPIO_Init+0x12c>)
 8003130:	f004 fa80 	bl	8007634 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8003134:	2302      	movs	r3, #2
 8003136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003138:	2301      	movs	r3, #1
 800313a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4619      	mov	r1, r3
 800314a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800314e:	f004 fa71 	bl	8007634 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin SW_2_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin|SW_2_Pin;
 8003152:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8003156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4619      	mov	r1, r3
 8003166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800316a:	f004 fa63 	bl	8007634 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 800316e:	f645 4307 	movw	r3, #23559	; 0x5c07
 8003172:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003174:	2301      	movs	r3, #1
 8003176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4619      	mov	r1, r3
 8003186:	480b      	ldr	r0, [pc, #44]	; (80031b4 <MX_GPIO_Init+0x128>)
 8003188:	f004 fa54 	bl	8007634 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 800318c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4804      	ldr	r0, [pc, #16]	; (80031b4 <MX_GPIO_Init+0x128>)
 80031a2:	f004 fa47 	bl	8007634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031a6:	bf00      	nop
 80031a8:	3728      	adds	r7, #40	; 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	48000400 	.word	0x48000400
 80031b8:	48000800 	.word	0x48000800

080031bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031c0:	b672      	cpsid	i
}
 80031c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <Error_Handler+0x8>

080031c6 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e008      	b.n	8003200 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	2200      	movs	r2, #0
 80031f8:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3301      	adds	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	d4e9      	bmi.n	80031ee <Moving_Average_Init+0x28>
	}
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	441a      	add	r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800324e:	6839      	ldr	r1, [r7, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	1ad2      	subs	r2, r2, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003286:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800328a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	d507      	bpl.n	80032a4 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 80032a2:	e003      	b.n	80032ac <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032c4:	ee16 0a90 	vmov	r0, s13
 80032c8:	f7fd f966 	bl	8000598 <__aeabi_f2d>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80032d4:	eeb0 0a47 	vmov.f32	s0, s14
 80032d8:	eef0 0a67 	vmov.f32	s1, s15
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003312:	f7fd fc29 	bl	8000b68 <__aeabi_dcmpgt>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d006      	beq.n	800332a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8003328:	e011      	b.n	800334e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003336:	f7fd fbf9 	bl	8000b2c <__aeabi_dcmplt>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d100      	bne.n	8003342 <PID_Init+0x60>
}
 8003340:	e005      	b.n	800334e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6278      	str	r0, [r7, #36]	; 0x24
 8003360:	6239      	str	r1, [r7, #32]
 8003362:	61fa      	str	r2, [r7, #28]
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	ed87 0b04 	vstr	d0, [r7, #16]
 800336a:	ed87 1b02 	vstr	d1, [r7, #8]
 800336e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	6a3a      	ldr	r2, [r7, #32]
 800337c:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	2200      	movs	r2, #0
 8003388:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800338a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80033e0 <PID+0x88>
 800338e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80033e8 <PID+0x90>
 8003392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003394:	f000 f991 	bl	80036ba <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	2264      	movs	r2, #100	; 0x64
 800339c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800339e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80033a2:	4619      	mov	r1, r3
 80033a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033a6:	f000 fad9 	bl	800395c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80033aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80033ae:	4619      	mov	r1, r3
 80033b0:	ed97 2b00 	vldr	d2, [r7]
 80033b4:	ed97 1b02 	vldr	d1, [r7, #8]
 80033b8:	ed97 0b04 	vldr	d0, [r7, #16]
 80033bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033be:	f000 fa25 	bl	800380c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80033c2:	f001 fc6b 	bl	8004c9c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	1ad2      	subs	r2, r2, r3
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	605a      	str	r2, [r3, #4]

}
 80033d2:	bf00      	nop
 80033d4:	3728      	adds	r7, #40	; 0x28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	f3af 8000 	nop.w
 80033e0:	00000000 	.word	0x00000000
 80033e4:	406fe000 	.word	0x406fe000
	...

080033f0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80033f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f4:	b08c      	sub	sp, #48	; 0x30
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <PID_Compute+0x16>
	{
		return _FALSE;
 8003402:	2300      	movs	r3, #0
 8003404:	e136      	b.n	8003674 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003406:	f001 fc49 	bl	8004c9c <HAL_GetTick>
 800340a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	6a3a      	ldr	r2, [r7, #32]
 800341c:	429a      	cmp	r2, r3
 800341e:	d204      	bcs.n	800342a <PID_Compute+0x3a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8124 	beq.w	8003672 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800343e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003442:	f7fc ff49 	bl	80002d8 <__aeabi_dsub>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003454:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003458:	f7fc ff3e 	bl	80002d8 <__aeabi_dsub>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003474:	f7fd f8e8 	bl	8000648 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4650      	mov	r0, sl
 800347e:	4659      	mov	r1, fp
 8003480:	f7fc ff2c 	bl	80002dc <__adddf3>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800349a:	f7fd fb65 	bl	8000b68 <__aeabi_dcmpgt>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d006      	beq.n	80034b2 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80034b0:	e010      	b.n	80034d4 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80034be:	f7fd fb35 	bl	8000b2c <__aeabi_dcmplt>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d114      	bne.n	8003512 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80034f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f8:	f7fd f8a6 	bl	8000648 <__aeabi_dmul>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4650      	mov	r0, sl
 8003502:	4659      	mov	r1, fp
 8003504:	f7fc fee8 	bl	80002d8 <__aeabi_dsub>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800351e:	f7fd fb23 	bl	8000b68 <__aeabi_dcmpgt>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d006      	beq.n	8003536 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003534:	e010      	b.n	8003558 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003542:	f7fd faf3 	bl	8000b2c <__aeabi_dcmplt>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800355e:	4690      	mov	r8, r2
 8003560:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003568:	4640      	mov	r0, r8
 800356a:	4649      	mov	r1, r9
 800356c:	f7fd f86c 	bl	8000648 <__aeabi_dmul>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d017      	beq.n	80035b2 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003588:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800358c:	f7fd f85c 	bl	8000648 <__aeabi_dmul>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800359e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035a2:	f7fd f851 	bl	8000648 <__aeabi_dmul>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80035b0:	e005      	b.n	80035be <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80035ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ce:	f7fd f83b 	bl	8000648 <__aeabi_dmul>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4640      	mov	r0, r8
 80035d8:	4649      	mov	r1, r9
 80035da:	f7fc fe7d 	bl	80002d8 <__aeabi_dsub>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035e6:	f7fc fe79 	bl	80002dc <__adddf3>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80035f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035fc:	f7fd fab4 	bl	8000b68 <__aeabi_dcmpgt>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800360c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003610:	e00e      	b.n	8003630 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003618:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800361c:	f7fd fa86 	bl	8000b2c <__aeabi_dcmplt>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d004      	beq.n	8003630 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800362c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003636:	4614      	mov	r4, r2
 8003638:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800363c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003640:	4620      	mov	r0, r4
 8003642:	4629      	mov	r1, r5
 8003644:	f7fd f800 	bl	8000648 <__aeabi_dmul>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800365a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003664:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 8003672:	2300      	movs	r3, #0
	}

}
 8003674:	4618      	mov	r0, r3
 8003676:	3730      	adds	r7, #48	; 0x30
 8003678:	46bd      	mov	sp, r7
 800367a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800367e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <PID_SetMode+0x2e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fe1b 	bl	80032e2 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	705a      	strb	r2, [r3, #1]

}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6178      	str	r0, [r7, #20]
 80036c2:	ed87 0b02 	vstr	d0, [r7, #8]
 80036c6:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80036ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036d2:	f7fd fa3f 	bl	8000b54 <__aeabi_dcmpge>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d158      	bne.n	800378e <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80036dc:	6979      	ldr	r1, [r7, #20]
 80036de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 80036e6:	6979      	ldr	r1, [r7, #20]
 80036e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ec:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d04b      	beq.n	8003790 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003706:	f7fd fa2f 	bl	8000b68 <__aeabi_dcmpgt>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800371a:	e9c1 2300 	strd	r2, r3, [r1]
 800371e:	e012      	b.n	8003746 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800372e:	f7fd f9fd 	bl	8000b2c <__aeabi_dcmplt>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003742:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003752:	f7fd fa09 	bl	8000b68 <__aeabi_dcmpgt>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003762:	6979      	ldr	r1, [r7, #20]
 8003764:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003768:	e012      	b.n	8003790 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003776:	f7fd f9d9 	bl	8000b2c <__aeabi_dcmplt>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003786:	6979      	ldr	r1, [r7, #20]
 8003788:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800378c:	e000      	b.n	8003790 <PID_SetOutputLimits+0xd6>
		return;
 800378e:	bf00      	nop
		}
		else { }

	}

}
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b086      	sub	sp, #24
 800379a:	af00      	add	r7, sp, #0
 800379c:	6178      	str	r0, [r7, #20]
 800379e:	ed87 0b02 	vstr	d0, [r7, #8]
 80037a2:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80037a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037ae:	f7fd f9d1 	bl	8000b54 <__aeabi_dcmpge>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 80037b8:	6979      	ldr	r1, [r7, #20]
 80037ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037be:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 80037c2:	6979      	ldr	r1, [r7, #20]
 80037c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037c8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80037cc:	e000      	b.n	80037d0 <PID_SetILimits+0x3a>
		return;
 80037ce:	bf00      	nop
}
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b088      	sub	sp, #32
 80037da:	af00      	add	r7, sp, #0
 80037dc:	61f8      	str	r0, [r7, #28]
 80037de:	ed87 0b04 	vstr	d0, [r7, #16]
 80037e2:	ed87 1b02 	vstr	d1, [r7, #8]
 80037e6:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	789b      	ldrb	r3, [r3, #2]
 80037ee:	4619      	mov	r1, r3
 80037f0:	ed97 2b00 	vldr	d2, [r7]
 80037f4:	ed97 1b02 	vldr	d1, [r7, #8]
 80037f8:	ed97 0b04 	vldr	d0, [r7, #16]
 80037fc:	69f8      	ldr	r0, [r7, #28]
 80037fe:	f000 f805 	bl	800380c <PID_SetTunings2>
}
 8003802:	bf00      	nop
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	61f8      	str	r0, [r7, #28]
 8003814:	ed87 0b04 	vstr	d0, [r7, #16]
 8003818:	ed87 1b02 	vstr	d1, [r7, #8]
 800381c:	ed87 2b00 	vstr	d2, [r7]
 8003820:	460b      	mov	r3, r1
 8003822:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003830:	f7fd f97c 	bl	8000b2c <__aeabi_dcmplt>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 8089 	bne.w	800394e <PID_SetTunings2+0x142>
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003848:	f7fd f970 	bl	8000b2c <__aeabi_dcmplt>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d17d      	bne.n	800394e <PID_SetTunings2+0x142>
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800385e:	f7fd f965 	bl	8000b2c <__aeabi_dcmplt>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d172      	bne.n	800394e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	7efa      	ldrb	r2, [r7, #27]
 800386c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800386e:	7efb      	ldrb	r3, [r7, #27]
 8003870:	2b01      	cmp	r3, #1
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003880:	69f9      	ldr	r1, [r7, #28]
 8003882:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003886:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800388a:	69f9      	ldr	r1, [r7, #28]
 800388c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003890:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003894:	69f9      	ldr	r1, [r7, #28]
 8003896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800389a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fe56 	bl	8000554 <__aeabi_ui2d>
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <PID_SetTunings2+0x14c>)
 80038ae:	f7fc fff5 	bl	800089c <__aeabi_ddiv>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 80038ba:	69f9      	ldr	r1, [r7, #28]
 80038bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038c0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80038c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038cc:	f7fc febc 	bl	8000648 <__aeabi_dmul>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	69f9      	ldr	r1, [r7, #28]
 80038d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80038da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038e2:	f7fc ffdb 	bl	800089c <__aeabi_ddiv>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	69f9      	ldr	r1, [r7, #28]
 80038ec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d12b      	bne.n	8003950 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	f7fc fce7 	bl	80002d8 <__aeabi_dsub>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	69f9      	ldr	r1, [r7, #28]
 8003910:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800391a:	f04f 0000 	mov.w	r0, #0
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	f7fc fcd9 	bl	80002d8 <__aeabi_dsub>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	69f9      	ldr	r1, [r7, #28]
 800392c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003936:	f04f 0000 	mov.w	r0, #0
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	f7fc fccb 	bl	80002d8 <__aeabi_dsub>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	69f9      	ldr	r1, [r7, #28]
 8003948:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800394c:	e000      	b.n	8003950 <PID_SetTunings2+0x144>
		return;
 800394e:	bf00      	nop

	}

}
 8003950:	3728      	adds	r7, #40	; 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	408f4000 	.word	0x408f4000

0800395c <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d02e      	beq.n	80039ce <PID_SetControllerDirection+0x72>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	78db      	ldrb	r3, [r3, #3]
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	429a      	cmp	r2, r3
 8003978:	d029      	beq.n	80039ce <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003980:	f04f 0000 	mov.w	r0, #0
 8003984:	f04f 0100 	mov.w	r1, #0
 8003988:	f7fc fca6 	bl	80002d8 <__aeabi_dsub>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800399c:	f04f 0000 	mov.w	r0, #0
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f7fc fc98 	bl	80002d8 <__aeabi_dsub>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80039b8:	f04f 0000 	mov.w	r0, #0
 80039bc:	f04f 0100 	mov.w	r1, #0
 80039c0:	f7fc fc8a 	bl	80002d8 <__aeabi_dsub>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	70da      	strb	r2, [r3, #3]

}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 80039dc:	b5b0      	push	{r4, r5, r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	dd01      	ble.n	80039f2 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 80039ee:	2301      	movs	r3, #1
 80039f0:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	dd2e      	ble.n	8003a5c <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80039fe:	68b8      	ldr	r0, [r7, #8]
 8003a00:	f7fc fdb8 	bl	8000574 <__aeabi_i2d>
 8003a04:	4604      	mov	r4, r0
 8003a06:	460d      	mov	r5, r1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fda1 	bl	8000554 <__aeabi_ui2d>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4620      	mov	r0, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	f7fc ff3f 	bl	800089c <__aeabi_ddiv>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003a2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a30:	f7fc fe0a 	bl	8000648 <__aeabi_dmul>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003a44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a48:	f7fc ff28 	bl	800089c <__aeabi_ddiv>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	609a      	str	r2, [r3, #8]

	}

}
 8003a5c:	bf00      	nop
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bdb0      	pop	{r4, r5, r7, pc}

08003a64 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003a72:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a76:	eeb0 0a47 	vmov.f32	s0, s14
 8003a7a:	eef0 0a67 	vmov.f32	s1, s15
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003a96:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a9e:	eef0 0a67 	vmov.f32	s1, s15
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003aba:	ec43 2b17 	vmov	d7, r2, r3
}
 8003abe:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac2:	eef0 0a67 	vmov.f32	s1, s15
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_MspInit+0x44>)
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	4a0e      	ldr	r2, [pc, #56]	; (8003b14 <HAL_MspInit+0x44>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_MspInit+0x44>)
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_MspInit+0x44>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <HAL_MspInit+0x44>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6593      	str	r3, [r2, #88]	; 0x58
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_MspInit+0x44>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b06:	f005 fe51 	bl	80097ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000

08003b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b09c      	sub	sp, #112	; 0x70
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b30:	f107 0318 	add.w	r3, r7, #24
 8003b34:	2244      	movs	r2, #68	; 0x44
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f010 fc1e 	bl	801437a <memset>
  if(hadc->Instance==ADC1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b46:	d13e      	bne.n	8003bc6 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003b4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003b52:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b54:	f107 0318 	add.w	r3, r7, #24
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f006 fb65 	bl	800a228 <HAL_RCCEx_PeriphCLKConfig>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003b64:	f7ff fb2a 	bl	80031bc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003b68:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <HAL_ADC_MspInit+0x13c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	4a39      	ldr	r2, [pc, #228]	; (8003c54 <HAL_ADC_MspInit+0x13c>)
 8003b70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003b72:	4b38      	ldr	r3, [pc, #224]	; (8003c54 <HAL_ADC_MspInit+0x13c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d10b      	bne.n	8003b92 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7e:	4a36      	ldr	r2, [pc, #216]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b86:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|THERMOCOUPLE_Pin;
 8003baa:	230c      	movs	r3, #12
 8003bac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc0:	f003 fd38 	bl	8007634 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003bc4:	e041      	b.n	8003c4a <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <HAL_ADC_MspInit+0x144>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d13c      	bne.n	8003c4a <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003bd6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003bda:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bdc:	f107 0318 	add.w	r3, r7, #24
 8003be0:	4618      	mov	r0, r3
 8003be2:	f006 fb21 	bl	800a228 <HAL_RCCEx_PeriphCLKConfig>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8003bec:	f7ff fae6 	bl	80031bc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003bf0:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <HAL_ADC_MspInit+0x13c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_ADC_MspInit+0x13c>)
 8003bf8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_ADC_MspInit+0x13c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d10b      	bne.n	8003c1a <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003c08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <HAL_ADC_MspInit+0x140>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_Pin;
 8003c32:	2302      	movs	r3, #2
 8003c34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c36:	2303      	movs	r3, #3
 8003c38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);
 8003c3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c42:	4619      	mov	r1, r3
 8003c44:	4806      	ldr	r0, [pc, #24]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003c46:	f003 fcf5 	bl	8007634 <HAL_GPIO_Init>
}
 8003c4a:	bf00      	nop
 8003c4c:	3770      	adds	r7, #112	; 0x70
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20001b08 	.word	0x20001b08
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	50000100 	.word	0x50000100
 8003c60:	48001400 	.word	0x48001400

08003c64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <HAL_CRC_MspInit+0x38>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10b      	bne.n	8003c8e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <HAL_CRC_MspInit+0x3c>)
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_CRC_MspInit+0x3c>)
 8003c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c80:	6493      	str	r3, [r2, #72]	; 0x48
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_CRC_MspInit+0x3c>)
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40023000 	.word	0x40023000
 8003ca0:	40021000 	.word	0x40021000

08003ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b09c      	sub	sp, #112	; 0x70
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cbc:	f107 0318 	add.w	r3, r7, #24
 8003cc0:	2244      	movs	r2, #68	; 0x44
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f010 fb58 	bl	801437a <memset>
  if(hi2c->Instance==I2C1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2e      	ldr	r2, [pc, #184]	; (8003d88 <HAL_I2C_MspInit+0xe4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d154      	bne.n	8003d7e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003cd4:	2340      	movs	r3, #64	; 0x40
 8003cd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cdc:	f107 0318 	add.w	r3, r7, #24
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f006 faa1 	bl	800a228 <HAL_RCCEx_PeriphCLKConfig>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003cec:	f7ff fa66 	bl	80031bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf0:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <HAL_I2C_MspInit+0xe8>)
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf4:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <HAL_I2C_MspInit+0xe8>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cfc:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <HAL_I2C_MspInit+0xe8>)
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_I2C_MspInit+0xe8>)
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_I2C_MspInit+0xe8>)
 8003d0e:	f043 0302 	orr.w	r3, r3, #2
 8003d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <HAL_I2C_MspInit+0xe8>)
 8003d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d26:	2312      	movs	r3, #18
 8003d28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d32:	2304      	movs	r3, #4
 8003d34:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d40:	f003 fc78 	bl	8007634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d4a:	2312      	movs	r3, #18
 8003d4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d52:	2300      	movs	r3, #0
 8003d54:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d56:	2304      	movs	r3, #4
 8003d58:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d5e:	4619      	mov	r1, r3
 8003d60:	480b      	ldr	r0, [pc, #44]	; (8003d90 <HAL_I2C_MspInit+0xec>)
 8003d62:	f003 fc67 	bl	8007634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_I2C_MspInit+0xe8>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <HAL_I2C_MspInit+0xe8>)
 8003d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d70:	6593      	str	r3, [r2, #88]	; 0x58
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_I2C_MspInit+0xe8>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d7e:	bf00      	nop
 8003d80:	3770      	adds	r7, #112	; 0x70
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40005400 	.word	0x40005400
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	48000400 	.word	0x48000400

08003d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 0314 	add.w	r3, r7, #20
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <HAL_SPI_MspInit+0xd0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d151      	bne.n	8003e5a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003db6:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <HAL_SPI_MspInit+0xd4>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	4a2b      	ldr	r2, [pc, #172]	; (8003e68 <HAL_SPI_MspInit+0xd4>)
 8003dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc2:	4b29      	ldr	r3, [pc, #164]	; (8003e68 <HAL_SPI_MspInit+0xd4>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <HAL_SPI_MspInit+0xd4>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <HAL_SPI_MspInit+0xd4>)
 8003dd4:	f043 0302 	orr.w	r3, r3, #2
 8003dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dda:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <HAL_SPI_MspInit+0xd4>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003de6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dec:	2302      	movs	r3, #2
 8003dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df4:	2300      	movs	r3, #0
 8003df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003df8:	2305      	movs	r3, #5
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4619      	mov	r1, r3
 8003e02:	481a      	ldr	r0, [pc, #104]	; (8003e6c <HAL_SPI_MspInit+0xd8>)
 8003e04:	f003 fc16 	bl	8007634 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <HAL_SPI_MspInit+0xe0>)
 8003e0c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003e0e:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e10:	220d      	movs	r2, #13
 8003e12:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e16:	2210      	movs	r2, #16
 8003e18:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e22:	2280      	movs	r2, #128	; 0x80
 8003e24:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e34:	2220      	movs	r2, #32
 8003e36:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003e3e:	480c      	ldr	r0, [pc, #48]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e40:	f002 fefc 	bl	8006c3c <HAL_DMA_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003e4a:	f7ff f9b7 	bl	80031bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
 8003e54:	4a06      	ldr	r2, [pc, #24]	; (8003e70 <HAL_SPI_MspInit+0xdc>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003e5a:	bf00      	nop
 8003e5c:	3728      	adds	r7, #40	; 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40003800 	.word	0x40003800
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	48000400 	.word	0x48000400
 8003e70:	20001800 	.word	0x20001800
 8003e74:	40020008 	.word	0x40020008

08003e78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x5c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10c      	bne.n	8003ea4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e8a:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x60>)
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x60>)
 8003e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e94:	6613      	str	r3, [r2, #96]	; 0x60
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x60>)
 8003e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ea2:	e010      	b.n	8003ec6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <HAL_TIM_PWM_MspInit+0x64>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10b      	bne.n	8003ec6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x60>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x60>)
 8003eb4:	f043 0304 	orr.w	r3, r3, #4
 8003eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x60>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40000800 	.word	0x40000800

08003ee0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee8:	f107 0314 	add.w	r3, r7, #20
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d144      	bne.n	8003f8c <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f0e:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f36:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003f38:	f043 0302 	orr.w	r3, r3, #2
 8003f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f56:	2300      	movs	r3, #0
 8003f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8003f5e:	f107 0314 	add.w	r3, r7, #20
 8003f62:	4619      	mov	r1, r3
 8003f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f68:	f003 fb64 	bl	8007634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8003f6c:	2308      	movs	r3, #8
 8003f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	2302      	movs	r3, #2
 8003f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	4619      	mov	r1, r3
 8003f86:	4804      	ldr	r0, [pc, #16]	; (8003f98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003f88:	f003 fb54 	bl	8007634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f8c:	bf00      	nop
 8003f8e:	3728      	adds	r7, #40	; 0x28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40021000 	.word	0x40021000
 8003f98:	48000400 	.word	0x48000400

08003f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <HAL_TIM_Base_MspInit+0x5c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10c      	bne.n	8003fc8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_TIM_Base_MspInit+0x60>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <HAL_TIM_Base_MspInit+0x60>)
 8003fb4:	f043 0310 	orr.w	r3, r3, #16
 8003fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <HAL_TIM_Base_MspInit+0x60>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003fc6:	e010      	b.n	8003fea <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <HAL_TIM_Base_MspInit+0x64>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d10b      	bne.n	8003fea <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_TIM_Base_MspInit+0x60>)
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_TIM_Base_MspInit+0x60>)
 8003fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <HAL_TIM_Base_MspInit+0x60>)
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40001000 	.word	0x40001000
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40014400 	.word	0x40014400

08004004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <HAL_TIM_MspPostInit+0xa8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d11c      	bne.n	8004060 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <HAL_TIM_MspPostInit+0xac>)
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <HAL_TIM_MspPostInit+0xac>)
 800402c:	f043 0320 	orr.w	r3, r3, #32
 8004030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004032:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <HAL_TIM_MspPostInit+0xac>)
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 800403e:	2301      	movs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004042:	2302      	movs	r3, #2
 8004044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404a:	2300      	movs	r3, #0
 800404c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800404e:	2306      	movs	r3, #6
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8004052:	f107 0314 	add.w	r3, r7, #20
 8004056:	4619      	mov	r1, r3
 8004058:	4816      	ldr	r0, [pc, #88]	; (80040b4 <HAL_TIM_MspPostInit+0xb0>)
 800405a:	f003 faeb 	bl	8007634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800405e:	e020      	b.n	80040a2 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <HAL_TIM_MspPostInit+0xb4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d11b      	bne.n	80040a2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_TIM_MspPostInit+0xac>)
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <HAL_TIM_MspPostInit+0xac>)
 8004070:	f043 0302 	orr.w	r3, r3, #2
 8004074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <HAL_TIM_MspPostInit+0xac>)
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	2302      	movs	r3, #2
 8004088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004092:	2302      	movs	r3, #2
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004096:	f107 0314 	add.w	r3, r7, #20
 800409a:	4619      	mov	r1, r3
 800409c:	4807      	ldr	r0, [pc, #28]	; (80040bc <HAL_TIM_MspPostInit+0xb8>)
 800409e:	f003 fac9 	bl	8007634 <HAL_GPIO_Init>
}
 80040a2:	bf00      	nop
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40021000 	.word	0x40021000
 80040b4:	48001400 	.word	0x48001400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	48000400 	.word	0x48000400

080040c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b09a      	sub	sp, #104	; 0x68
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040d8:	f107 0310 	add.w	r3, r7, #16
 80040dc:	2244      	movs	r2, #68	; 0x44
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f010 f94a 	bl	801437a <memset>
  if(huart->Instance==USART1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <HAL_UART_MspInit+0xa8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d137      	bne.n	8004160 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040f0:	2301      	movs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040f8:	f107 0310 	add.w	r3, r7, #16
 80040fc:	4618      	mov	r0, r3
 80040fe:	f006 f893 	bl	800a228 <HAL_RCCEx_PeriphCLKConfig>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004108:	f7ff f858 	bl	80031bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800410c:	4b17      	ldr	r3, [pc, #92]	; (800416c <HAL_UART_MspInit+0xac>)
 800410e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004110:	4a16      	ldr	r2, [pc, #88]	; (800416c <HAL_UART_MspInit+0xac>)
 8004112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004116:	6613      	str	r3, [r2, #96]	; 0x60
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <HAL_UART_MspInit+0xac>)
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_UART_MspInit+0xac>)
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	4a10      	ldr	r2, [pc, #64]	; (800416c <HAL_UART_MspInit+0xac>)
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_UART_MspInit+0xac>)
 8004132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800413c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004140:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004142:	2312      	movs	r3, #18
 8004144:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414a:	2300      	movs	r3, #0
 800414c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800414e:	2307      	movs	r3, #7
 8004150:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004152:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004156:	4619      	mov	r1, r3
 8004158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800415c:	f003 fa6a 	bl	8007634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004160:	bf00      	nop
 8004162:	3768      	adds	r7, #104	; 0x68
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40013800 	.word	0x40013800
 800416c:	40021000 	.word	0x40021000

08004170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004174:	e7fe      	b.n	8004174 <NMI_Handler+0x4>

08004176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800417a:	e7fe      	b.n	800417a <HardFault_Handler+0x4>

0800417c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004180:	e7fe      	b.n	8004180 <MemManage_Handler+0x4>

08004182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004182:	b480      	push	{r7}
 8004184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004186:	e7fe      	b.n	8004186 <BusFault_Handler+0x4>

08004188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800418c:	e7fe      	b.n	800418c <UsageFault_Handler+0x4>

0800418e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041bc:	f000 fd5c 	bl	8004c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80041c8:	4802      	ldr	r0, [pc, #8]	; (80041d4 <DMA1_Channel1_IRQHandler+0x10>)
 80041ca:	f002 fe5a 	bl	8006e82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20001800 	.word	0x20001800

080041d8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80041dc:	4802      	ldr	r0, [pc, #8]	; (80041e8 <USB_LP_IRQHandler+0x10>)
 80041de:	f003 fdfd 	bl	8007ddc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20002878 	.word	0x20002878

080041ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return 1;
 80041f0:	2301      	movs	r3, #1
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <_kill>:

int _kill(int pid, int sig)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004206:	f010 f90b 	bl	8014420 <__errno>
 800420a:	4603      	mov	r3, r0
 800420c:	2216      	movs	r2, #22
 800420e:	601a      	str	r2, [r3, #0]
  return -1;
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <_exit>:

void _exit (int status)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004224:	f04f 31ff 	mov.w	r1, #4294967295
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ffe7 	bl	80041fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800422e:	e7fe      	b.n	800422e <_exit+0x12>

08004230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e00a      	b.n	8004258 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004242:	f3af 8000 	nop.w
 8004246:	4601      	mov	r1, r0
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	60ba      	str	r2, [r7, #8]
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3301      	adds	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	dbf0      	blt.n	8004242 <_read+0x12>
  }

  return len;
 8004260:	687b      	ldr	r3, [r7, #4]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e009      	b.n	8004290 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	60ba      	str	r2, [r7, #8]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3301      	adds	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	dbf1      	blt.n	800427c <_write+0x12>
  }
  return len;
 8004298:	687b      	ldr	r3, [r7, #4]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <_close>:

int _close(int file)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ca:	605a      	str	r2, [r3, #4]
  return 0;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <_isatty>:

int _isatty(int file)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042e2:	2301      	movs	r3, #1
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004314:	4a14      	ldr	r2, [pc, #80]	; (8004368 <_sbrk+0x5c>)
 8004316:	4b15      	ldr	r3, [pc, #84]	; (800436c <_sbrk+0x60>)
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004320:	4b13      	ldr	r3, [pc, #76]	; (8004370 <_sbrk+0x64>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <_sbrk+0x64>)
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <_sbrk+0x68>)
 800432c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <_sbrk+0x64>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	429a      	cmp	r2, r3
 800433a:	d207      	bcs.n	800434c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800433c:	f010 f870 	bl	8014420 <__errno>
 8004340:	4603      	mov	r3, r0
 8004342:	220c      	movs	r2, #12
 8004344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	e009      	b.n	8004360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800434c:	4b08      	ldr	r3, [pc, #32]	; (8004370 <_sbrk+0x64>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <_sbrk+0x64>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <_sbrk+0x64>)
 800435c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20008000 	.word	0x20008000
 800436c:	00000400 	.word	0x00000400
 8004370:	20001b0c 	.word	0x20001b0c
 8004374:	20002ec0 	.word	0x20002ec0

08004378 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <SystemInit+0x20>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	4a05      	ldr	r2, [pc, #20]	; (8004398 <SystemInit+0x20>)
 8004384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800439c:	480d      	ldr	r0, [pc, #52]	; (80043d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800439e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80043a0:	f7ff ffea 	bl	8004378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043a4:	480c      	ldr	r0, [pc, #48]	; (80043d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80043a6:	490d      	ldr	r1, [pc, #52]	; (80043dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80043a8:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <LoopForever+0xe>)
  movs r3, #0
 80043aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80043ac:	e002      	b.n	80043b4 <LoopCopyDataInit>

080043ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043b2:	3304      	adds	r3, #4

080043b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043b8:	d3f9      	bcc.n	80043ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043bc:	4c0a      	ldr	r4, [pc, #40]	; (80043e8 <LoopForever+0x16>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c0:	e001      	b.n	80043c6 <LoopFillZerobss>

080043c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043c4:	3204      	adds	r2, #4

080043c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043c8:	d3fb      	bcc.n	80043c2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80043ca:	f010 f82f 	bl	801442c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043ce:	f7fd fb9b 	bl	8001b08 <main>

080043d2 <LoopForever>:

LoopForever:
    b LoopForever
 80043d2:	e7fe      	b.n	80043d2 <LoopForever>
  ldr   r0, =_estack
 80043d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80043d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043dc:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 80043e0:	0801c8b0 	.word	0x0801c8b0
  ldr r2, =_sbss
 80043e4:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 80043e8:	20002ec0 	.word	0x20002ec0

080043ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80043ec:	e7fe      	b.n	80043ec <ADC1_2_IRQHandler>
	...

080043f0 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <setSPI_Size+0x54>)
 80043fc:	f993 3000 	ldrsb.w	r3, [r3]
 8004400:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004404:	429a      	cmp	r2, r3
 8004406:	d017      	beq.n	8004438 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <setSPI_Size+0x58>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <setSPI_Size+0x58>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004416:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8004418:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <setSPI_Size+0x54>)
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d104      	bne.n	8004430 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <setSPI_Size+0x58>)
 8004428:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800442c:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 800442e:	e003      	b.n	8004438 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <setSPI_Size+0x58>)
 8004432:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004436:	60da      	str	r2, [r3, #12]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	20000164 	.word	0x20000164
 8004448:	2000179c 	.word	0x2000179c

0800444c <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	460a      	mov	r2, r1
 8004456:	71fb      	strb	r3, [r7, #7]
 8004458:	4613      	mov	r3, r2
 800445a:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 800445c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ffc5 	bl	80043f0 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8004466:	4b3c      	ldr	r3, [pc, #240]	; (8004558 <setDMAMemMode+0x10c>)
 8004468:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800446c:	461a      	mov	r2, r3
 800446e:	79bb      	ldrb	r3, [r7, #6]
 8004470:	429a      	cmp	r2, r3
 8004472:	d106      	bne.n	8004482 <setDMAMemMode+0x36>
 8004474:	4b38      	ldr	r3, [pc, #224]	; (8004558 <setDMAMemMode+0x10c>)
 8004476:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800447a:	461a      	mov	r2, r3
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	429a      	cmp	r2, r3
 8004480:	d066      	beq.n	8004550 <setDMAMemMode+0x104>
    config.dma_sz =size;
 8004482:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004486:	4b34      	ldr	r3, [pc, #208]	; (8004558 <setDMAMemMode+0x10c>)
 8004488:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800448a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800448e:	4b32      	ldr	r3, [pc, #200]	; (8004558 <setDMAMemMode+0x10c>)
 8004490:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8004492:	4b32      	ldr	r3, [pc, #200]	; (800455c <setDMAMemMode+0x110>)
 8004494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <setDMAMemMode+0x110>)
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 80044a6:	bf00      	nop
 80044a8:	4b2c      	ldr	r3, [pc, #176]	; (800455c <setDMAMemMode+0x110>)
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f7      	bne.n	80044a8 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10e      	bne.n	80044dc <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <setDMAMemMode+0x110>)
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	2280      	movs	r2, #128	; 0x80
 80044c4:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <setDMAMemMode+0x110>)
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <setDMAMemMode+0x110>)
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e00d      	b.n	80044f8 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80044dc:	4b1f      	ldr	r3, [pc, #124]	; (800455c <setDMAMemMode+0x110>)
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	2200      	movs	r2, #0
 80044e2:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <setDMAMemMode+0x110>)
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <setDMAMemMode+0x110>)
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f6:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 80044f8:	79bb      	ldrb	r3, [r7, #6]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d116      	bne.n	800452c <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80044fe:	4b17      	ldr	r3, [pc, #92]	; (800455c <setDMAMemMode+0x110>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004506:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <setDMAMemMode+0x110>)
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004510:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <setDMAMemMode+0x110>)
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <setDMAMemMode+0x110>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8004528:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 800452a:	e011      	b.n	8004550 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <setDMAMemMode+0x110>)
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	2200      	movs	r2, #0
 8004532:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <setDMAMemMode+0x110>)
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	2200      	movs	r2, #0
 800453a:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 800453c:	4b07      	ldr	r3, [pc, #28]	; (800455c <setDMAMemMode+0x110>)
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <setDMAMemMode+0x110>)
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800454e:	601a      	str	r2, [r3, #0]
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000164 	.word	0x20000164
 800455c:	2000179c 	.word	0x2000179c

08004560 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 800456c:	2000      	movs	r0, #0
 800456e:	f7ff ff3f 	bl	80043f0 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_RESET);
 8004572:	2200      	movs	r2, #0
 8004574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004578:	4815      	ldr	r0, [pc, #84]	; (80045d0 <LCD_WriteCommand+0x70>)
 800457a:	f003 f9f5 	bl	8007968 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_RESET);
 800457e:	2200      	movs	r2, #0
 8004580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004584:	4812      	ldr	r0, [pc, #72]	; (80045d0 <LCD_WriteCommand+0x70>)
 8004586:	f003 f9ef 	bl	8007968 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	2201      	movs	r2, #1
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4810      	ldr	r0, [pc, #64]	; (80045d4 <LCD_WriteCommand+0x74>)
 8004594:	f006 f8e3 	bl	800a75e <HAL_SPI_Transmit>
  if(argc){
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00e      	beq.n	80045bc <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_SET);
 800459e:	2201      	movs	r2, #1
 80045a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045a4:	480a      	ldr	r0, [pc, #40]	; (80045d0 <LCD_WriteCommand+0x70>)
 80045a6:	f003 f9df 	bl	8007968 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	1c59      	adds	r1, r3, #1
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	4807      	ldr	r0, [pc, #28]	; (80045d4 <LCD_WriteCommand+0x74>)
 80045b8:	f006 f8d1 	bl	800a75e <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_SET);
 80045bc:	2201      	movs	r2, #1
 80045be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045c2:	4803      	ldr	r0, [pc, #12]	; (80045d0 <LCD_WriteCommand+0x70>)
 80045c4:	f003 f9d0 	bl	8007968 <HAL_GPIO_WritePin>
#endif
}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	48000800 	.word	0x48000800
 80045d4:	2000179c 	.word	0x2000179c

080045d8 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_SET);
 80045e2:	2201      	movs	r2, #1
 80045e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045e8:	4830      	ldr	r0, [pc, #192]	; (80046ac <LCD_WriteData+0xd4>)
 80045ea:	f003 f9bd 	bl	8007968 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_RESET);
 80045ee:	2200      	movs	r2, #0
 80045f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045f4:	482d      	ldr	r0, [pc, #180]	; (80046ac <LCD_WriteData+0xd4>)
 80045f6:	f003 f9b7 	bl	8007968 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80045fa:	e049      	b.n	8004690 <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004602:	4293      	cmp	r3, r2
 8004604:	bf28      	it	cs
 8004606:	4613      	movcs	r3, r2
 8004608:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b20      	cmp	r3, #32
 800460e:	d924      	bls.n	800465a <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8004610:	89fb      	ldrh	r3, [r7, #14]
 8004612:	461a      	mov	r2, r3
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4826      	ldr	r0, [pc, #152]	; (80046b0 <LCD_WriteData+0xd8>)
 8004618:	f006 fa16 	bl	800aa48 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 800461c:	bf00      	nop
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <LCD_WriteData+0xd8>)
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	4618      	mov	r0, r3
 8004624:	f002 fcdc 	bl	8006fe0 <HAL_DMA_GetState>
 8004628:	4603      	mov	r3, r0
 800462a:	2b01      	cmp	r3, #1
 800462c:	d1f7      	bne.n	800461e <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 800462e:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <LCD_WriteData+0xdc>)
 8004630:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d127      	bne.n	8004688 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8004638:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <LCD_WriteData+0xdc>)
 800463a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d104      	bne.n	800464c <LCD_WriteData+0x74>
          buff += chunk_size;
 8004642:	89fb      	ldrh	r3, [r7, #14]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4413      	add	r3, r2
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	e01d      	b.n	8004688 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 800464c:	89fb      	ldrh	r3, [r7, #14]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	461a      	mov	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	e016      	b.n	8004688 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800465a:	89fa      	ldrh	r2, [r7, #14]
 800465c:	f04f 33ff 	mov.w	r3, #4294967295
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4813      	ldr	r0, [pc, #76]	; (80046b0 <LCD_WriteData+0xd8>)
 8004664:	f006 f87b 	bl	800a75e <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <LCD_WriteData+0xdc>)
 800466a:	f993 3000 	ldrsb.w	r3, [r3]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d104      	bne.n	800467c <LCD_WriteData+0xa4>
        buff += chunk_size;
 8004672:	89fb      	ldrh	r3, [r7, #14]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4413      	add	r3, r2
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	e005      	b.n	8004688 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 800467c:	89fb      	ldrh	r3, [r7, #14]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8004688:	89fb      	ldrh	r3, [r7, #14]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1b2      	bne.n	80045fc <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_SET);
 8004696:	2201      	movs	r2, #1
 8004698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800469c:	4803      	ldr	r0, [pc, #12]	; (80046ac <LCD_WriteData+0xd4>)
 800469e:	f003 f963 	bl	8007968 <HAL_GPIO_WritePin>
#endif
}
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	48000800 	.word	0x48000800
 80046b0:	2000179c 	.word	0x2000179c
 80046b4:	20000164 	.word	0x20000164

080046b8 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b08b      	sub	sp, #44	; 0x2c
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4604      	mov	r4, r0
 80046c0:	4608      	mov	r0, r1
 80046c2:	4611      	mov	r1, r2
 80046c4:	461a      	mov	r2, r3
 80046c6:	4623      	mov	r3, r4
 80046c8:	80fb      	strh	r3, [r7, #6]
 80046ca:	4603      	mov	r3, r0
 80046cc:	80bb      	strh	r3, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	807b      	strh	r3, [r7, #2]
 80046d2:	4613      	mov	r3, r2
 80046d4:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046da:	887b      	ldrh	r3, [r7, #2]
 80046dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 80046de:	88bb      	ldrh	r3, [r7, #4]
 80046e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80046e2:	883b      	ldrh	r3, [r7, #0]
 80046e4:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80046e6:	232a      	movs	r3, #42	; 0x2a
 80046e8:	763b      	strb	r3, [r7, #24]
 80046ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80046ee:	121b      	asrs	r3, r3, #8
 80046f0:	b21b      	sxth	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	767b      	strb	r3, [r7, #25]
 80046f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	76bb      	strb	r3, [r7, #26]
 80046fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004700:	121b      	asrs	r3, r3, #8
 8004702:	b21b      	sxth	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	76fb      	strb	r3, [r7, #27]
 8004708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800470a:	b2db      	uxtb	r3, r3
 800470c:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800470e:	f107 0318 	add.w	r3, r7, #24
 8004712:	2104      	movs	r1, #4
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff23 	bl	8004560 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800471a:	232b      	movs	r3, #43	; 0x2b
 800471c:	743b      	strb	r3, [r7, #16]
 800471e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004722:	121b      	asrs	r3, r3, #8
 8004724:	b21b      	sxth	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	747b      	strb	r3, [r7, #17]
 800472a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800472c:	b2db      	uxtb	r3, r3
 800472e:	74bb      	strb	r3, [r7, #18]
 8004730:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004734:	121b      	asrs	r3, r3, #8
 8004736:	b21b      	sxth	r3, r3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	74fb      	strb	r3, [r7, #19]
 800473c:	8c3b      	ldrh	r3, [r7, #32]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004742:	f107 0310 	add.w	r3, r7, #16
 8004746:	2104      	movs	r1, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff09 	bl	8004560 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800474e:	232c      	movs	r3, #44	; 0x2c
 8004750:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004752:	f107 030c 	add.w	r3, r7, #12
 8004756:	2100      	movs	r1, #0
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff01 	bl	8004560 <LCD_WriteCommand>
  }
}
 800475e:	bf00      	nop
 8004760:	372c      	adds	r7, #44	; 0x2c
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
	...

08004768 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	80fb      	strh	r3, [r7, #6]
 8004772:	460b      	mov	r3, r1
 8004774:	80bb      	strh	r3, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 800477a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800477e:	2b00      	cmp	r3, #0
 8004780:	db39      	blt.n	80047f6 <LCD_DrawPixel+0x8e>
 8004782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004786:	2bef      	cmp	r3, #239	; 0xef
 8004788:	dc35      	bgt.n	80047f6 <LCD_DrawPixel+0x8e>
 800478a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	db31      	blt.n	80047f6 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 8004792:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004796:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800479a:	da2c      	bge.n	80047f6 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800479c:	887b      	ldrh	r3, [r7, #2]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	733b      	strb	r3, [r7, #12]
 80047a6:	887b      	ldrh	r3, [r7, #2]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80047ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80047b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80047b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80047bc:	f7ff ff7c 	bl	80046b8 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_SET);
 80047c0:	2201      	movs	r2, #1
 80047c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047c6:	480e      	ldr	r0, [pc, #56]	; (8004800 <LCD_DrawPixel+0x98>)
 80047c8:	f003 f8ce 	bl	8007968 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_RESET);
 80047cc:	2200      	movs	r2, #0
 80047ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047d2:	480b      	ldr	r0, [pc, #44]	; (8004800 <LCD_DrawPixel+0x98>)
 80047d4:	f003 f8c8 	bl	8007968 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80047d8:	f107 010c 	add.w	r1, r7, #12
 80047dc:	f04f 33ff 	mov.w	r3, #4294967295
 80047e0:	2202      	movs	r2, #2
 80047e2:	4808      	ldr	r0, [pc, #32]	; (8004804 <LCD_DrawPixel+0x9c>)
 80047e4:	f005 ffbb 	bl	800a75e <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_SET);
 80047e8:	2201      	movs	r2, #1
 80047ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047ee:	4804      	ldr	r0, [pc, #16]	; (8004800 <LCD_DrawPixel+0x98>)
 80047f0:	f003 f8ba 	bl	8007968 <HAL_GPIO_WritePin>
 80047f4:	e000      	b.n	80047f8 <LCD_DrawPixel+0x90>
    return;
 80047f6:	bf00      	nop
#endif
}
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	48000800 	.word	0x48000800
 8004804:	2000179c 	.word	0x2000179c

08004808 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8004808:	b580      	push	{r7, lr}
 800480a:	b094      	sub	sp, #80	; 0x50
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b20      	cmp	r3, #32
 8004818:	d905      	bls.n	8004826 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 800481a:	1cbb      	adds	r3, r7, #2
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff feda 	bl	80045d8 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8004824:	e026      	b.n	8004874 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8004826:	2300      	movs	r3, #0
 8004828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800482a:	e009      	b.n	8004840 <LCD_FillPixels+0x38>
      fill[t]=color;
 800482c:	887a      	ldrh	r2, [r7, #2]
 800482e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	3350      	adds	r3, #80	; 0x50
 8004834:	443b      	add	r3, r7
 8004836:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 800483a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483c:	3301      	adds	r3, #1
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b20      	cmp	r3, #32
 8004844:	bf28      	it	cs
 8004846:	2320      	movcs	r3, #32
 8004848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800484a:	429a      	cmp	r2, r3
 800484c:	d3ee      	bcc.n	800482c <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 800484e:	e00e      	b.n	800486e <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b20      	cmp	r3, #32
 8004854:	bf28      	it	cs
 8004856:	2320      	movcs	r3, #32
 8004858:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff feb9 	bl	80045d8 <LCD_WriteData>
      pixels-=sz;
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ed      	bne.n	8004850 <LCD_FillPixels+0x48>
}
 8004874:	bf00      	nop
 8004876:	3750      	adds	r7, #80	; 0x50
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 800487c:	b590      	push	{r4, r7, lr}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	4604      	mov	r4, r0
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	461a      	mov	r2, r3
 800488a:	4623      	mov	r3, r4
 800488c:	80fb      	strh	r3, [r7, #6]
 800488e:	4603      	mov	r3, r0
 8004890:	80bb      	strh	r3, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	807b      	strh	r3, [r7, #2]
 8004896:	4613      	mov	r3, r2
 8004898:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 800489a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d105      	bne.n	80048b0 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80048a4:	2100      	movs	r1, #0
 80048a6:	2001      	movs	r0, #1
 80048a8:	f7ff fdd0 	bl	800444c <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e014      	b.n	80048da <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80048b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80048b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80048b8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80048bc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80048c0:	f7ff fefa 	bl	80046b8 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80048c4:	2101      	movs	r1, #1
 80048c6:	2000      	movs	r0, #0
 80048c8:	f7ff fdc0 	bl	800444c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_SET);
 80048cc:	2201      	movs	r2, #1
 80048ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048d2:	4804      	ldr	r0, [pc, #16]	; (80048e4 <LCD_FillArea+0x68>)
 80048d4:	f003 f848 	bl	8007968 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <LCD_FillArea+0x6c>)
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	bf00      	nop
 80048e4:	48000800 	.word	0x48000800
 80048e8:	08004809 	.word	0x08004809

080048ec <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	461a      	mov	r2, r3
 80048fa:	4623      	mov	r3, r4
 80048fc:	80fb      	strh	r3, [r7, #6]
 80048fe:	4603      	mov	r3, r0
 8004900:	80bb      	strh	r3, [r7, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	807b      	strh	r3, [r7, #2]
 8004906:	4613      	mov	r3, r2
 8004908:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800490a:	887a      	ldrh	r2, [r7, #2]
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	3301      	adds	r3, #1
 8004912:	4619      	mov	r1, r3
 8004914:	883a      	ldrh	r2, [r7, #0]
 8004916:	88bb      	ldrh	r3, [r7, #4]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	3301      	adds	r3, #1
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8004922:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004926:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800492a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800492e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004932:	f7ff fec1 	bl	80046b8 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8004936:	2101      	movs	r1, #1
 8004938:	2000      	movs	r0, #0
 800493a:	f7ff fd87 	bl	800444c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 800493e:	8c3b      	ldrh	r3, [r7, #32]
 8004940:	4619      	mov	r1, r3
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff ff60 	bl	8004808 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8004948:	2100      	movs	r1, #0
 800494a:	2001      	movs	r0, #1
 800494c:	f7ff fd7e 	bl	800444c <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	bd90      	pop	{r4, r7, pc}

0800495a <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800495a:	b590      	push	{r4, r7, lr}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	4603      	mov	r3, r0
 8004962:	603a      	str	r2, [r7, #0]
 8004964:	80fb      	strh	r3, [r7, #6]
 8004966:	460b      	mov	r3, r1
 8004968:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	889b      	ldrh	r3, [r3, #4]
 800496e:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	88db      	ldrh	r3, [r3, #6]
 8004974:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	2bef      	cmp	r3, #239	; 0xef
 800497a:	d839      	bhi.n	80049f0 <LCD_DrawImage+0x96>
 800497c:	88bb      	ldrh	r3, [r7, #4]
 800497e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004982:	d235      	bcs.n	80049f0 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8004984:	88fa      	ldrh	r2, [r7, #6]
 8004986:	89fb      	ldrh	r3, [r7, #14]
 8004988:	4413      	add	r3, r2
 800498a:	2bf0      	cmp	r3, #240	; 0xf0
 800498c:	dc32      	bgt.n	80049f4 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 800498e:	88ba      	ldrh	r2, [r7, #4]
 8004990:	89bb      	ldrh	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004998:	dc2e      	bgt.n	80049f8 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	7a1b      	ldrb	r3, [r3, #8]
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d12c      	bne.n	80049fc <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80049a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80049a6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	4413      	add	r3, r2
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	b21c      	sxth	r4, r3
 80049b8:	88ba      	ldrh	r2, [r7, #4]
 80049ba:	89bb      	ldrh	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	b21b      	sxth	r3, r3
 80049c6:	4622      	mov	r2, r4
 80049c8:	f7ff fe76 	bl	80046b8 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80049cc:	2101      	movs	r1, #1
 80049ce:	2001      	movs	r0, #1
 80049d0:	f7ff fd3c 	bl	800444c <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	89ba      	ldrh	r2, [r7, #12]
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	4619      	mov	r1, r3
 80049e2:	f7ff fdf9 	bl	80045d8 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80049e6:	2100      	movs	r1, #0
 80049e8:	2001      	movs	r0, #1
 80049ea:	f7ff fd2f 	bl	800444c <setDMAMemMode>
 80049ee:	e006      	b.n	80049fe <LCD_DrawImage+0xa4>
    return;
 80049f0:	bf00      	nop
 80049f2:	e004      	b.n	80049fe <LCD_DrawImage+0xa4>
    return;
 80049f4:	bf00      	nop
 80049f6:	e002      	b.n	80049fe <LCD_DrawImage+0xa4>
    return;
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <LCD_DrawImage+0xa4>
    return;
 80049fc:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}

08004a04 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	80fb      	strh	r3, [r7, #6]
 8004a16:	4603      	mov	r3, r0
 8004a18:	80bb      	strh	r3, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	807b      	strh	r3, [r7, #2]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	887b      	ldrh	r3, [r7, #2]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d10a      	bne.n	8004a40 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8004a2a:	88ba      	ldrh	r2, [r7, #4]
 8004a2c:	883b      	ldrh	r3, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d918      	bls.n	8004a64 <LCD_DrawLine+0x60>
 8004a32:	88bb      	ldrh	r3, [r7, #4]
 8004a34:	81bb      	strh	r3, [r7, #12]
 8004a36:	883b      	ldrh	r3, [r7, #0]
 8004a38:	80bb      	strh	r3, [r7, #4]
 8004a3a:	89bb      	ldrh	r3, [r7, #12]
 8004a3c:	803b      	strh	r3, [r7, #0]
 8004a3e:	e011      	b.n	8004a64 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8004a40:	88ba      	ldrh	r2, [r7, #4]
 8004a42:	883b      	ldrh	r3, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d10a      	bne.n	8004a5e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8004a48:	88fa      	ldrh	r2, [r7, #6]
 8004a4a:	887b      	ldrh	r3, [r7, #2]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d909      	bls.n	8004a64 <LCD_DrawLine+0x60>
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	81fb      	strh	r3, [r7, #14]
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	80fb      	strh	r3, [r7, #6]
 8004a58:	89fb      	ldrh	r3, [r7, #14]
 8004a5a:	807b      	strh	r3, [r7, #2]
 8004a5c:	e002      	b.n	8004a64 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a62:	e009      	b.n	8004a78 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8004a64:	883c      	ldrh	r4, [r7, #0]
 8004a66:	887a      	ldrh	r2, [r7, #2]
 8004a68:	88b9      	ldrh	r1, [r7, #4]
 8004a6a:	88f8      	ldrh	r0, [r7, #6]
 8004a6c:	8c3b      	ldrh	r3, [r7, #32]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4623      	mov	r3, r4
 8004a72:	f7ff ff3b 	bl	80048ec <LCD_Fill>
  return UG_RESULT_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}

08004a80 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60ba      	str	r2, [r7, #8]
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	81fb      	strh	r3, [r7, #14]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f00a ffac 	bl	800f9f0 <UG_FontSelect>
  UG_SetForecolor(color);
 8004a98:	8b3b      	ldrh	r3, [r7, #24]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f00b faf4 	bl	8010088 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8004aa0:	8bbb      	ldrh	r3, [r7, #28]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f00b fb02 	bl	80100ac <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8004aa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004aac:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f00b fa50 	bl	800ff58 <UG_PutString>
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <LCD_setPower+0x14>
 8004ad0:	2329      	movs	r3, #41	; 0x29
 8004ad2:	e000      	b.n	8004ad6 <LCD_setPower+0x16>
 8004ad4:	2328      	movs	r3, #40	; 0x28
 8004ad6:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fd3e 	bl	8004560 <LCD_WriteCommand>
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <LCD_Update>:

static void LCD_Update(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8004af0:	2100      	movs	r1, #0
 8004af2:	2001      	movs	r0, #1
 8004af4:	f7ff fcaa 	bl	800444c <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}

08004afc <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_SET);
 8004b02:	2201      	movs	r2, #1
 8004b04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b08:	482a      	ldr	r0, [pc, #168]	; (8004bb4 <LCD_init+0xb8>)
 8004b0a:	f002 ff2d 	bl	8007968 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_RST_Pin, GPIO_PIN_RESET);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b14:	4827      	ldr	r0, [pc, #156]	; (8004bb4 <LCD_init+0xb8>)
 8004b16:	f002 ff27 	bl	8007968 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	f000 f8ca 	bl	8004cb4 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_RST_Pin, GPIO_PIN_SET);
 8004b20:	2201      	movs	r2, #1
 8004b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b26:	4823      	ldr	r0, [pc, #140]	; (8004bb4 <LCD_init+0xb8>)
 8004b28:	f002 ff1e 	bl	8007968 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8004b2c:	20c8      	movs	r0, #200	; 0xc8
 8004b2e:	f000 f8c1 	bl	8004cb4 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8004b32:	4921      	ldr	r1, [pc, #132]	; (8004bb8 <LCD_init+0xbc>)
 8004b34:	4821      	ldr	r0, [pc, #132]	; (8004bbc <LCD_init+0xc0>)
 8004b36:	f00a fec1 	bl	800f8bc <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8004b3a:	4921      	ldr	r1, [pc, #132]	; (8004bc0 <LCD_init+0xc4>)
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f00c fb4b 	bl	80111d8 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8004b42:	4920      	ldr	r1, [pc, #128]	; (8004bc4 <LCD_init+0xc8>)
 8004b44:	2001      	movs	r0, #1
 8004b46:	f00c fb47 	bl	80111d8 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8004b4a:	491f      	ldr	r1, [pc, #124]	; (8004bc8 <LCD_init+0xcc>)
 8004b4c:	2002      	movs	r0, #2
 8004b4e:	f00c fb43 	bl	80111d8 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8004b52:	491e      	ldr	r1, [pc, #120]	; (8004bcc <LCD_init+0xd0>)
 8004b54:	2003      	movs	r0, #3
 8004b56:	f00c fb3f 	bl	80111d8 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f00b fab8 	bl	80100d0 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8004b60:	2000      	movs	r0, #0
 8004b62:	f00b fac9 	bl	80100f8 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8004b66:	2300      	movs	r3, #0
 8004b68:	80fb      	strh	r3, [r7, #6]
 8004b6a:	e013      	b.n	8004b94 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <LCD_init+0xd4>)
 8004b72:	441a      	add	r2, r3
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	4916      	ldr	r1, [pc, #88]	; (8004bd0 <LCD_init+0xd4>)
 8004b78:	5ccb      	ldrb	r3, [r1, r3]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7ff fcef 	bl	8004560 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <LCD_init+0xd4>)
 8004b86:	5cd3      	ldrb	r3, [r2, r3]
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3302      	adds	r3, #2
 8004b92:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	2b4b      	cmp	r3, #75	; 0x4b
 8004b98:	d9e8      	bls.n	8004b6c <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f00a ff38 	bl	800fa10 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	f7ff ff8d 	bl	8004ac0 <LCD_setPower>
  UG_Update();
 8004ba6:	f00c fb39 	bl	801121c <UG_Update>
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	48000800 	.word	0x48000800
 8004bb8:	20000168 	.word	0x20000168
 8004bbc:	20001b10 	.word	0x20001b10
 8004bc0:	08004a05 	.word	0x08004a05
 8004bc4:	080048ed 	.word	0x080048ed
 8004bc8:	0800487d 	.word	0x0800487d
 8004bcc:	0800495b 	.word	0x0800495b
 8004bd0:	08017874 	.word	0x08017874

08004bd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bde:	2003      	movs	r0, #3
 8004be0:	f001 fde6 	bl	80067b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004be4:	200f      	movs	r0, #15
 8004be6:	f000 f80d 	bl	8004c04 <HAL_InitTick>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	71fb      	strb	r3, [r7, #7]
 8004bf4:	e001      	b.n	8004bfa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004bf6:	f7fe ff6b 	bl	8003ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bfa:	79fb      	ldrb	r3, [r7, #7]

}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004c10:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <HAL_InitTick+0x68>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d022      	beq.n	8004c5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <HAL_InitTick+0x6c>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_InitTick+0x68>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fdf2 	bl	8006816 <HAL_SYSTICK_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	d809      	bhi.n	8004c52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	f001 fdbe 	bl	80067c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <HAL_InitTick+0x70>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e007      	b.n	8004c62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e004      	b.n	8004c62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e001      	b.n	8004c62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000178 	.word	0x20000178
 8004c70:	20000160 	.word	0x20000160
 8004c74:	20000174 	.word	0x20000174

08004c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_IncTick+0x1c>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_IncTick+0x20>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a03      	ldr	r2, [pc, #12]	; (8004c94 <HAL_IncTick+0x1c>)
 8004c88:	6013      	str	r3, [r2, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	20001b84 	.word	0x20001b84
 8004c98:	20000178 	.word	0x20000178

08004c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_GetTick+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20001b84 	.word	0x20001b84

08004cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cbc:	f7ff ffee 	bl	8004c9c <HAL_GetTick>
 8004cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d004      	beq.n	8004cd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <HAL_Delay+0x40>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cd8:	bf00      	nop
 8004cda:	f7ff ffdf 	bl	8004c9c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d8f7      	bhi.n	8004cda <HAL_Delay+0x26>
  {
  }
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000178 	.word	0x20000178

08004cf8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	609a      	str	r2, [r3, #8]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3360      	adds	r3, #96	; 0x60
 8004d72:	461a      	mov	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <LL_ADC_SetOffset+0x44>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	03fff000 	.word	0x03fff000

08004da8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3360      	adds	r3, #96	; 0x60
 8004db6:	461a      	mov	r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3360      	adds	r3, #96	; 0x60
 8004de4:	461a      	mov	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b087      	sub	sp, #28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3360      	adds	r3, #96	; 0x60
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3360      	adds	r3, #96	; 0x60
 8004e50:	461a      	mov	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	615a      	str	r2, [r3, #20]
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3330      	adds	r3, #48	; 0x30
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	4413      	add	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	211f      	movs	r1, #31
 8004eee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	401a      	ands	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	0e9b      	lsrs	r3, r3, #26
 8004efa:	f003 011f 	and.w	r1, r3, #31
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3314      	adds	r3, #20
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	0e5b      	lsrs	r3, r3, #25
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	4413      	add	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	0d1b      	lsrs	r3, r3, #20
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2107      	movs	r1, #7
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	401a      	ands	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	0d1b      	lsrs	r3, r3, #20
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f003 0318 	and.w	r3, r3, #24
 8004f92:	4908      	ldr	r1, [pc, #32]	; (8004fb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004f94:	40d9      	lsrs	r1, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	400b      	ands	r3, r1
 8004f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	0007ffff 	.word	0x0007ffff

08004fb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 031f 	and.w	r3, r3, #31
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6093      	str	r3, [r2, #8]
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800500c:	d101      	bne.n	8005012 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005034:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800505c:	d101      	bne.n	8005062 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005084:	f043 0201 	orr.w	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050ac:	f043 0202 	orr.w	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <LL_ADC_IsEnabled+0x18>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <LL_ADC_IsEnabled+0x1a>
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d101      	bne.n	80050fe <LL_ADC_IsDisableOngoing+0x18>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <LL_ADC_IsDisableOngoing+0x1a>
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800511c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005120:	f043 0204 	orr.w	r2, r3, #4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d101      	bne.n	800514c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b08      	cmp	r3, #8
 800516c:	d101      	bne.n	8005172 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b089      	sub	sp, #36	; 0x24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e167      	b.n	800546a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fe fcb5 	bl	8003b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff ff19 	bl	8004ff8 <LL_ADC_IsDeepPowerDownEnabled>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff feff 	bl	8004fd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff ff34 	bl	8005048 <LL_ADC_IsInternalRegulatorEnabled>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d115      	bne.n	8005212 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff ff18 	bl	8005020 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051f0:	4ba0      	ldr	r3, [pc, #640]	; (8005474 <HAL_ADC_Init+0x2f4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	4aa0      	ldr	r2, [pc, #640]	; (8005478 <HAL_ADC_Init+0x2f8>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	099b      	lsrs	r3, r3, #6
 80051fe:	3301      	adds	r3, #1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005204:	e002      	b.n	800520c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3b01      	subs	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f9      	bne.n	8005206 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff ff16 	bl	8005048 <LL_ADC_IsInternalRegulatorEnabled>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10d      	bne.n	800523e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	f043 0210 	orr.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005232:	f043 0201 	orr.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff ff76 	bl	8005134 <LL_ADC_REG_IsConversionOngoing>
 8005248:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	2b00      	cmp	r3, #0
 8005254:	f040 8100 	bne.w	8005458 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f040 80fc 	bne.w	8005458 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005264:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005268:	f043 0202 	orr.w	r2, r3, #2
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff23 	bl	80050c0 <LL_ADC_IsEnabled>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d111      	bne.n	80052a4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005280:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005284:	f7ff ff1c 	bl	80050c0 <LL_ADC_IsEnabled>
 8005288:	4604      	mov	r4, r0
 800528a:	487c      	ldr	r0, [pc, #496]	; (800547c <HAL_ADC_Init+0x2fc>)
 800528c:	f7ff ff18 	bl	80050c0 <LL_ADC_IsEnabled>
 8005290:	4603      	mov	r3, r0
 8005292:	4323      	orrs	r3, r4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4619      	mov	r1, r3
 800529e:	4878      	ldr	r0, [pc, #480]	; (8005480 <HAL_ADC_Init+0x300>)
 80052a0:	f7ff fd2a 	bl	8004cf8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7f5b      	ldrb	r3, [r3, #29]
 80052a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80052b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80052ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d106      	bne.n	80052e0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	045b      	lsls	r3, r3, #17
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d009      	beq.n	80052fc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	4b60      	ldr	r3, [pc, #384]	; (8005484 <HAL_ADC_Init+0x304>)
 8005304:	4013      	ands	r3, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	69b9      	ldr	r1, [r7, #24]
 800530c:	430b      	orrs	r3, r1
 800530e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff ff15 	bl	800515a <LL_ADC_INJ_IsConversionOngoing>
 8005330:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d16d      	bne.n	8005414 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d16a      	bne.n	8005414 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005342:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800534a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535a:	f023 0302 	bic.w	r3, r3, #2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	430b      	orrs	r3, r1
 8005366:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d017      	beq.n	80053a0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800537e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005388:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800538c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6911      	ldr	r1, [r2, #16]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	430b      	orrs	r3, r1
 800539a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800539e:	e013      	b.n	80053c8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80053c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d118      	bne.n	8005404 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053dc:	f023 0304 	bic.w	r3, r3, #4
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053e8:	4311      	orrs	r1, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053ee:	4311      	orrs	r1, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053f4:	430a      	orrs	r2, r1
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	611a      	str	r2, [r3, #16]
 8005402:	e007      	b.n	8005414 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d10c      	bne.n	8005436 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f023 010f 	bic.w	r1, r3, #15
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	1e5a      	subs	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
 8005434:	e007      	b.n	8005446 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 020f 	bic.w	r2, r2, #15
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	65da      	str	r2, [r3, #92]	; 0x5c
 8005456:	e007      	b.n	8005468 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545c:	f043 0210 	orr.w	r2, r3, #16
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005468:	7ffb      	ldrb	r3, [r7, #31]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3724      	adds	r7, #36	; 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd90      	pop	{r4, r7, pc}
 8005472:	bf00      	nop
 8005474:	20000160 	.word	0x20000160
 8005478:	053e2d63 	.word	0x053e2d63
 800547c:	50000100 	.word	0x50000100
 8005480:	50000300 	.word	0x50000300
 8005484:	fff04007 	.word	0xfff04007

08005488 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005490:	4893      	ldr	r0, [pc, #588]	; (80056e0 <HAL_ADC_Start_IT+0x258>)
 8005492:	f7ff fd91 	bl	8004fb8 <LL_ADC_GetMultimode>
 8005496:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fe49 	bl	8005134 <LL_ADC_REG_IsConversionOngoing>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 8113 	bne.w	80056d0 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_ADC_Start_IT+0x30>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e10e      	b.n	80056d6 <HAL_ADC_Start_IT+0x24e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fdd3 	bl	800606c <ADC_Enable>
 80054c6:	4603      	mov	r3, r0
 80054c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 80fa 	bne.w	80056c6 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a7e      	ldr	r2, [pc, #504]	; (80056e4 <HAL_ADC_Start_IT+0x25c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d002      	beq.n	80054f6 <HAL_ADC_Start_IT+0x6e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	e001      	b.n	80054fa <HAL_ADC_Start_IT+0x72>
 80054f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	4293      	cmp	r3, r2
 8005500:	d002      	beq.n	8005508 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d006      	beq.n	800552e <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005524:	f023 0206 	bic.w	r2, r3, #6
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	661a      	str	r2, [r3, #96]	; 0x60
 800552c:	e002      	b.n	8005534 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	221c      	movs	r2, #28
 800553a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 021c 	bic.w	r2, r2, #28
 8005552:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d108      	bne.n	800556e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0208 	orr.w	r2, r2, #8
 800556a:	605a      	str	r2, [r3, #4]
          break;
 800556c:	e008      	b.n	8005580 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0204 	orr.w	r2, r2, #4
 800557c:	605a      	str	r2, [r3, #4]
          break;
 800557e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d107      	bne.n	8005598 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0210 	orr.w	r2, r2, #16
 8005596:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a51      	ldr	r2, [pc, #324]	; (80056e4 <HAL_ADC_Start_IT+0x25c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d002      	beq.n	80055a8 <HAL_ADC_Start_IT+0x120>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	e001      	b.n	80055ac <HAL_ADC_Start_IT+0x124>
 80055a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d008      	beq.n	80055c6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b05      	cmp	r3, #5
 80055be:	d002      	beq.n	80055c6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b09      	cmp	r3, #9
 80055c4:	d13a      	bne.n	800563c <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d02d      	beq.n	8005630 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d110      	bne.n	800560e <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0220 	bic.w	r2, r2, #32
 80055fa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800560a:	605a      	str	r2, [r3, #4]
              break;
 800560c:	e010      	b.n	8005630 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0220 	orr.w	r2, r2, #32
 800562c:	605a      	str	r2, [r3, #4]
              break;
 800562e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fd69 	bl	800510c <LL_ADC_REG_StartConversion>
 800563a:	e04b      	b.n	80056d4 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005640:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a25      	ldr	r2, [pc, #148]	; (80056e4 <HAL_ADC_Start_IT+0x25c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d002      	beq.n	8005658 <HAL_ADC_Start_IT+0x1d0>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	e001      	b.n	800565c <HAL_ADC_Start_IT+0x1d4>
 8005658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800565c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d034      	beq.n	80056d4 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005672:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b08      	cmp	r3, #8
 8005680:	d110      	bne.n	80056a4 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0220 	bic.w	r2, r2, #32
 8005690:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056a0:	605a      	str	r2, [r3, #4]
              break;
 80056a2:	e017      	b.n	80056d4 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0220 	orr.w	r2, r2, #32
 80056c2:	605a      	str	r2, [r3, #4]
              break;
 80056c4:	e006      	b.n	80056d4 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80056ce:	e001      	b.n	80056d4 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
 80056d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	50000300 	.word	0x50000300
 80056e4:	50000100 	.word	0x50000100

080056e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056f4:	4851      	ldr	r0, [pc, #324]	; (800583c <HAL_ADC_Start_DMA+0x154>)
 80056f6:	f7ff fc5f 	bl	8004fb8 <LL_ADC_GetMultimode>
 80056fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fd17 	bl	8005134 <LL_ADC_REG_IsConversionOngoing>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	f040 808f 	bne.w	800582c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_ADC_Start_DMA+0x34>
 8005718:	2302      	movs	r3, #2
 800571a:	e08a      	b.n	8005832 <HAL_ADC_Start_DMA+0x14a>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b05      	cmp	r3, #5
 800572e:	d002      	beq.n	8005736 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b09      	cmp	r3, #9
 8005734:	d173      	bne.n	800581e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fc98 	bl	800606c <ADC_Enable>
 800573c:	4603      	mov	r3, r0
 800573e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d166      	bne.n	8005814 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a38      	ldr	r2, [pc, #224]	; (8005840 <HAL_ADC_Start_DMA+0x158>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d002      	beq.n	800576a <HAL_ADC_Start_DMA+0x82>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	e001      	b.n	800576e <HAL_ADC_Start_DMA+0x86>
 800576a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	4293      	cmp	r3, r2
 8005774:	d002      	beq.n	800577c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005780:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d006      	beq.n	80057a2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005798:	f023 0206 	bic.w	r2, r3, #6
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	661a      	str	r2, [r3, #96]	; 0x60
 80057a0:	e002      	b.n	80057a8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	4a25      	ldr	r2, [pc, #148]	; (8005844 <HAL_ADC_Start_DMA+0x15c>)
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	4a24      	ldr	r2, [pc, #144]	; (8005848 <HAL_ADC_Start_DMA+0x160>)
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057bc:	4a23      	ldr	r2, [pc, #140]	; (800584c <HAL_ADC_Start_DMA+0x164>)
 80057be:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	221c      	movs	r2, #28
 80057c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0210 	orr.w	r2, r2, #16
 80057de:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3340      	adds	r3, #64	; 0x40
 80057fa:	4619      	mov	r1, r3
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f001 fac4 	bl	8006d8c <HAL_DMA_Start_IT>
 8005804:	4603      	mov	r3, r0
 8005806:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fc7d 	bl	800510c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005812:	e00d      	b.n	8005830 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800581c:	e008      	b.n	8005830 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800582a:	e001      	b.n	8005830 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800582c:	2302      	movs	r3, #2
 800582e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	50000300 	.word	0x50000300
 8005840:	50000100 	.word	0x50000100
 8005844:	08006237 	.word	0x08006237
 8005848:	0800630f 	.word	0x0800630f
 800584c:	0800632b 	.word	0x0800632b

08005850 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b0b6      	sub	sp, #216	; 0xd8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x22>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e3c8      	b.n	8006040 <HAL_ADC_ConfigChannel+0x7b4>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fc3a 	bl	8005134 <LL_ADC_REG_IsConversionOngoing>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 83ad 	bne.w	8006022 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	f7ff faf4 	bl	8004ec2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fc28 	bl	8005134 <LL_ADC_REG_IsConversionOngoing>
 80058e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fc34 	bl	800515a <LL_ADC_INJ_IsConversionOngoing>
 80058f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80058f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f040 81d9 	bne.w	8005cb2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005904:	2b00      	cmp	r3, #0
 8005906:	f040 81d4 	bne.w	8005cb2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005912:	d10f      	bne.n	8005934 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2200      	movs	r2, #0
 800591e:	4619      	mov	r1, r3
 8005920:	f7ff fafb 	bl	8004f1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff faa2 	bl	8004e76 <LL_ADC_SetSamplingTimeCommonConfig>
 8005932:	e00e      	b.n	8005952 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	6819      	ldr	r1, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	461a      	mov	r2, r3
 8005942:	f7ff faea 	bl	8004f1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2100      	movs	r1, #0
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fa92 	bl	8004e76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	08db      	lsrs	r3, r3, #3
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b04      	cmp	r3, #4
 8005972:	d022      	beq.n	80059ba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	6919      	ldr	r1, [r3, #16]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005984:	f7ff f9ec 	bl	8004d60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	6919      	ldr	r1, [r3, #16]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	461a      	mov	r2, r3
 8005996:	f7ff fa38 	bl	8004e0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d102      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x124>
 80059aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ae:	e000      	b.n	80059b2 <HAL_ADC_ConfigChannel+0x126>
 80059b0:	2300      	movs	r3, #0
 80059b2:	461a      	mov	r2, r3
 80059b4:	f7ff fa44 	bl	8004e40 <LL_ADC_SetOffsetSaturation>
 80059b8:	e17b      	b.n	8005cb2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff f9f1 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <HAL_ADC_ConfigChannel+0x15a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2100      	movs	r1, #0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff f9e6 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 80059dc:	4603      	mov	r3, r0
 80059de:	0e9b      	lsrs	r3, r3, #26
 80059e0:	f003 021f 	and.w	r2, r3, #31
 80059e4:	e01e      	b.n	8005a24 <HAL_ADC_ConfigChannel+0x198>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff f9db 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059fc:	fa93 f3a3 	rbit	r3, r3
 8005a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8005a14:	2320      	movs	r3, #32
 8005a16:	e004      	b.n	8005a22 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8005a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a1c:	fab3 f383 	clz	r3, r3
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_ADC_ConfigChannel+0x1b0>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	0e9b      	lsrs	r3, r3, #26
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	e018      	b.n	8005a6e <HAL_ADC_ConfigChannel+0x1e2>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a48:	fa93 f3a3 	rbit	r3, r3
 8005a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005a50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005a58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005a60:	2320      	movs	r3, #32
 8005a62:	e004      	b.n	8005a6e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8005a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a68:	fab3 f383 	clz	r3, r3
 8005a6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d106      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff f9aa 	bl	8004dd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff f98e 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <HAL_ADC_ConfigChannel+0x220>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff f983 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	0e9b      	lsrs	r3, r3, #26
 8005aa6:	f003 021f 	and.w	r2, r3, #31
 8005aaa:	e01e      	b.n	8005aea <HAL_ADC_ConfigChannel+0x25e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7ff f978 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ac2:	fa93 f3a3 	rbit	r3, r3
 8005ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005ad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005ada:	2320      	movs	r3, #32
 8005adc:	e004      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d105      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x276>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	0e9b      	lsrs	r3, r3, #26
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	e018      	b.n	8005b34 <HAL_ADC_ConfigChannel+0x2a8>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b0e:	fa93 f3a3 	rbit	r3, r3
 8005b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8005b26:	2320      	movs	r3, #32
 8005b28:	e004      	b.n	8005b34 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8005b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b2e:	fab3 f383 	clz	r3, r3
 8005b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d106      	bne.n	8005b46 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff f947 	bl	8004dd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff f92b 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <HAL_ADC_ConfigChannel+0x2e6>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2102      	movs	r1, #2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff f920 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	0e9b      	lsrs	r3, r3, #26
 8005b6c:	f003 021f 	and.w	r2, r3, #31
 8005b70:	e01e      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x324>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2102      	movs	r1, #2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff f915 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b88:	fa93 f3a3 	rbit	r3, r3
 8005b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	e004      	b.n	8005bae <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ba8:	fab3 f383 	clz	r3, r3
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x33c>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	0e9b      	lsrs	r3, r3, #26
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	e016      	b.n	8005bf6 <HAL_ADC_ConfigChannel+0x36a>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bd4:	fa93 f3a3 	rbit	r3, r3
 8005bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005be8:	2320      	movs	r3, #32
 8005bea:	e004      	b.n	8005bf6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bf0:	fab3 f383 	clz	r3, r3
 8005bf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d106      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2102      	movs	r1, #2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff f8e6 	bl	8004dd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2103      	movs	r1, #3
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff f8ca 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <HAL_ADC_ConfigChannel+0x3a8>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2103      	movs	r1, #3
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff f8bf 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	0e9b      	lsrs	r3, r3, #26
 8005c2e:	f003 021f 	and.w	r2, r3, #31
 8005c32:	e017      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x3d8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2103      	movs	r1, #3
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff f8b4 	bl	8004da8 <LL_ADC_GetOffsetChannel>
 8005c40:	4603      	mov	r3, r0
 8005c42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c46:	fa93 f3a3 	rbit	r3, r3
 8005c4a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c4e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8005c56:	2320      	movs	r3, #32
 8005c58:	e003      	b.n	8005c62 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8005c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5c:	fab3 f383 	clz	r3, r3
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d105      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x3f0>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	0e9b      	lsrs	r3, r3, #26
 8005c76:	f003 031f 	and.w	r3, r3, #31
 8005c7a:	e011      	b.n	8005ca0 <HAL_ADC_ConfigChannel+0x414>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c84:	fa93 f3a3 	rbit	r3, r3
 8005c88:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005c94:	2320      	movs	r3, #32
 8005c96:	e003      	b.n	8005ca0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9a:	fab3 f383 	clz	r3, r3
 8005c9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d106      	bne.n	8005cb2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2103      	movs	r1, #3
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff f891 	bl	8004dd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff fa02 	bl	80050c0 <LL_ADC_IsEnabled>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 8140 	bne.w	8005f44 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6819      	ldr	r1, [r3, #0]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f7ff f94d 	bl	8004f70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	4a8f      	ldr	r2, [pc, #572]	; (8005f18 <HAL_ADC_ConfigChannel+0x68c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	f040 8131 	bne.w	8005f44 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10b      	bne.n	8005d0a <HAL_ADC_ConfigChannel+0x47e>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	0e9b      	lsrs	r3, r3, #26
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	2b09      	cmp	r3, #9
 8005d00:	bf94      	ite	ls
 8005d02:	2301      	movls	r3, #1
 8005d04:	2300      	movhi	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	e019      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x4b2>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d12:	fa93 f3a3 	rbit	r3, r3
 8005d16:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005d18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d1a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8005d22:	2320      	movs	r3, #32
 8005d24:	e003      	b.n	8005d2e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8005d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d28:	fab3 f383 	clz	r3, r3
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	3301      	adds	r3, #1
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2b09      	cmp	r3, #9
 8005d36:	bf94      	ite	ls
 8005d38:	2301      	movls	r3, #1
 8005d3a:	2300      	movhi	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d079      	beq.n	8005e36 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x4d2>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	0e9b      	lsrs	r3, r3, #26
 8005d54:	3301      	adds	r3, #1
 8005d56:	069b      	lsls	r3, r3, #26
 8005d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d5c:	e015      	b.n	8005d8a <HAL_ADC_ConfigChannel+0x4fe>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d66:	fa93 f3a3 	rbit	r3, r3
 8005d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005d76:	2320      	movs	r3, #32
 8005d78:	e003      	b.n	8005d82 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7c:	fab3 f383 	clz	r3, r3
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	3301      	adds	r3, #1
 8005d84:	069b      	lsls	r3, r3, #26
 8005d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <HAL_ADC_ConfigChannel+0x51e>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	0e9b      	lsrs	r3, r3, #26
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	2101      	movs	r1, #1
 8005da4:	fa01 f303 	lsl.w	r3, r1, r3
 8005da8:	e017      	b.n	8005dda <HAL_ADC_ConfigChannel+0x54e>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db2:	fa93 f3a3 	rbit	r3, r3
 8005db6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005dc2:	2320      	movs	r3, #32
 8005dc4:	e003      	b.n	8005dce <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc8:	fab3 f383 	clz	r3, r3
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dda:	ea42 0103 	orr.w	r1, r2, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <HAL_ADC_ConfigChannel+0x574>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	0e9b      	lsrs	r3, r3, #26
 8005df0:	3301      	adds	r3, #1
 8005df2:	f003 021f 	and.w	r2, r3, #31
 8005df6:	4613      	mov	r3, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	4413      	add	r3, r2
 8005dfc:	051b      	lsls	r3, r3, #20
 8005dfe:	e018      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x5a6>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	fa93 f3a3 	rbit	r3, r3
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005e18:	2320      	movs	r3, #32
 8005e1a:	e003      	b.n	8005e24 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1e:	fab3 f383 	clz	r3, r3
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	3301      	adds	r3, #1
 8005e26:	f003 021f 	and.w	r2, r3, #31
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	4413      	add	r3, r2
 8005e30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e32:	430b      	orrs	r3, r1
 8005e34:	e081      	b.n	8005f3a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d107      	bne.n	8005e52 <HAL_ADC_ConfigChannel+0x5c6>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	0e9b      	lsrs	r3, r3, #26
 8005e48:	3301      	adds	r3, #1
 8005e4a:	069b      	lsls	r3, r3, #26
 8005e4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e50:	e015      	b.n	8005e7e <HAL_ADC_ConfigChannel+0x5f2>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	fa93 f3a3 	rbit	r3, r3
 8005e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	e003      	b.n	8005e76 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	fab3 f383 	clz	r3, r3
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	3301      	adds	r3, #1
 8005e78:	069b      	lsls	r3, r3, #26
 8005e7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d109      	bne.n	8005e9e <HAL_ADC_ConfigChannel+0x612>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	0e9b      	lsrs	r3, r3, #26
 8005e90:	3301      	adds	r3, #1
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2101      	movs	r1, #1
 8005e98:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9c:	e017      	b.n	8005ece <HAL_ADC_ConfigChannel+0x642>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	fa93 f3a3 	rbit	r3, r3
 8005eaa:	61fb      	str	r3, [r7, #28]
  return result;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005eb6:	2320      	movs	r3, #32
 8005eb8:	e003      	b.n	8005ec2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	fab3 f383 	clz	r3, r3
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	2101      	movs	r1, #1
 8005eca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ece:	ea42 0103 	orr.w	r1, r2, r3
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10d      	bne.n	8005efa <HAL_ADC_ConfigChannel+0x66e>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	0e9b      	lsrs	r3, r3, #26
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	f003 021f 	and.w	r2, r3, #31
 8005eea:	4613      	mov	r3, r2
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	4413      	add	r3, r2
 8005ef0:	3b1e      	subs	r3, #30
 8005ef2:	051b      	lsls	r3, r3, #20
 8005ef4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ef8:	e01e      	b.n	8005f38 <HAL_ADC_ConfigChannel+0x6ac>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	fa93 f3a3 	rbit	r3, r3
 8005f06:	613b      	str	r3, [r7, #16]
  return result;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d104      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005f12:	2320      	movs	r3, #32
 8005f14:	e006      	b.n	8005f24 <HAL_ADC_ConfigChannel+0x698>
 8005f16:	bf00      	nop
 8005f18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	fab3 f383 	clz	r3, r3
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	3301      	adds	r3, #1
 8005f26:	f003 021f 	and.w	r2, r3, #31
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	4413      	add	r3, r2
 8005f30:	3b1e      	subs	r3, #30
 8005f32:	051b      	lsls	r3, r3, #20
 8005f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f7fe ffeb 	bl	8004f1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <HAL_ADC_ConfigChannel+0x7bc>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d071      	beq.n	8006034 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f50:	483e      	ldr	r0, [pc, #248]	; (800604c <HAL_ADC_ConfigChannel+0x7c0>)
 8005f52:	f7fe fef7 	bl	8004d44 <LL_ADC_GetCommonPathInternalCh>
 8005f56:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a3c      	ldr	r2, [pc, #240]	; (8006050 <HAL_ADC_ConfigChannel+0x7c4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_ADC_ConfigChannel+0x6e2>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a3a      	ldr	r2, [pc, #232]	; (8006054 <HAL_ADC_ConfigChannel+0x7c8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d127      	bne.n	8005fbe <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d121      	bne.n	8005fbe <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f82:	d157      	bne.n	8006034 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	482f      	ldr	r0, [pc, #188]	; (800604c <HAL_ADC_ConfigChannel+0x7c0>)
 8005f90:	f7fe fec5 	bl	8004d1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f94:	4b30      	ldr	r3, [pc, #192]	; (8006058 <HAL_ADC_ConfigChannel+0x7cc>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	099b      	lsrs	r3, r3, #6
 8005f9a:	4a30      	ldr	r2, [pc, #192]	; (800605c <HAL_ADC_ConfigChannel+0x7d0>)
 8005f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa0:	099b      	lsrs	r3, r3, #6
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005fae:	e002      	b.n	8005fb6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f9      	bne.n	8005fb0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fbc:	e03a      	b.n	8006034 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a27      	ldr	r2, [pc, #156]	; (8006060 <HAL_ADC_ConfigChannel+0x7d4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d113      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10d      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <HAL_ADC_ConfigChannel+0x7d8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d02a      	beq.n	8006034 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4818      	ldr	r0, [pc, #96]	; (800604c <HAL_ADC_ConfigChannel+0x7c0>)
 8005fea:	f7fe fe98 	bl	8004d1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005fee:	e021      	b.n	8006034 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <HAL_ADC_ConfigChannel+0x7dc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d11c      	bne.n	8006034 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d116      	bne.n	8006034 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a16      	ldr	r2, [pc, #88]	; (8006064 <HAL_ADC_ConfigChannel+0x7d8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d011      	beq.n	8006034 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006018:	4619      	mov	r1, r3
 800601a:	480c      	ldr	r0, [pc, #48]	; (800604c <HAL_ADC_ConfigChannel+0x7c0>)
 800601c:	f7fe fe7f 	bl	8004d1e <LL_ADC_SetCommonPathInternalCh>
 8006020:	e008      	b.n	8006034 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	f043 0220 	orr.w	r2, r3, #32
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800603c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006040:	4618      	mov	r0, r3
 8006042:	37d8      	adds	r7, #216	; 0xd8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	80080000 	.word	0x80080000
 800604c:	50000300 	.word	0x50000300
 8006050:	c3210000 	.word	0xc3210000
 8006054:	90c00010 	.word	0x90c00010
 8006058:	20000160 	.word	0x20000160
 800605c:	053e2d63 	.word	0x053e2d63
 8006060:	c7520000 	.word	0xc7520000
 8006064:	50000100 	.word	0x50000100
 8006068:	cb840000 	.word	0xcb840000

0800606c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006074:	2300      	movs	r3, #0
 8006076:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff f81f 	bl	80050c0 <LL_ADC_IsEnabled>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d169      	bne.n	800615c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	4b36      	ldr	r3, [pc, #216]	; (8006168 <ADC_Enable+0xfc>)
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00d      	beq.n	80060b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609a:	f043 0210 	orr.w	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a6:	f043 0201 	orr.w	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e055      	b.n	800615e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe ffda 	bl	8005070 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80060bc:	482b      	ldr	r0, [pc, #172]	; (800616c <ADC_Enable+0x100>)
 80060be:	f7fe fe41 	bl	8004d44 <LL_ADC_GetCommonPathInternalCh>
 80060c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80060c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d013      	beq.n	80060f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060cc:	4b28      	ldr	r3, [pc, #160]	; (8006170 <ADC_Enable+0x104>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	099b      	lsrs	r3, r3, #6
 80060d2:	4a28      	ldr	r2, [pc, #160]	; (8006174 <ADC_Enable+0x108>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	099b      	lsrs	r3, r3, #6
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	4613      	mov	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80060e6:	e002      	b.n	80060ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f9      	bne.n	80060e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80060f4:	f7fe fdd2 	bl	8004c9c <HAL_GetTick>
 80060f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060fa:	e028      	b.n	800614e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe ffdd 	bl	80050c0 <LL_ADC_IsEnabled>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f7fe ffad 	bl	8005070 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006116:	f7fe fdc1 	bl	8004c9c <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d914      	bls.n	800614e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d00d      	beq.n	800614e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006136:	f043 0210 	orr.w	r2, r3, #16
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006142:	f043 0201 	orr.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e007      	b.n	800615e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	d1cf      	bne.n	80060fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	8000003f 	.word	0x8000003f
 800616c:	50000300 	.word	0x50000300
 8006170:	20000160 	.word	0x20000160
 8006174:	053e2d63 	.word	0x053e2d63

08006178 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe ffae 	bl	80050e6 <LL_ADC_IsDisableOngoing>
 800618a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe ff95 	bl	80050c0 <LL_ADC_IsEnabled>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d047      	beq.n	800622c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d144      	bne.n	800622c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 030d 	and.w	r3, r3, #13
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d10c      	bne.n	80061ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe ff6f 	bl	8005098 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2203      	movs	r2, #3
 80061c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80061c2:	f7fe fd6b 	bl	8004c9c <HAL_GetTick>
 80061c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80061c8:	e029      	b.n	800621e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ce:	f043 0210 	orr.w	r2, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061da:	f043 0201 	orr.w	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e023      	b.n	800622e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80061e6:	f7fe fd59 	bl	8004c9c <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d914      	bls.n	800621e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00d      	beq.n	800621e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006206:	f043 0210 	orr.w	r2, r3, #16
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006212:	f043 0201 	orr.w	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e007      	b.n	800622e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1dc      	bne.n	80061e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006248:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800624c:	2b00      	cmp	r3, #0
 800624e:	d14b      	bne.n	80062e8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006254:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d021      	beq.n	80062ae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fe14 	bl	8004e9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d032      	beq.n	80062e0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d12b      	bne.n	80062e0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d11f      	bne.n	80062e0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a4:	f043 0201 	orr.w	r2, r3, #1
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80062ac:	e018      	b.n	80062e0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d111      	bne.n	80062e0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d105      	bne.n	80062e0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d8:	f043 0201 	orr.w	r2, r3, #1
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7ff fab5 	bl	8005850 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80062e6:	e00e      	b.n	8006306 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fabf 	bl	8005878 <HAL_ADC_ErrorCallback>
}
 80062fa:	e004      	b.n	8006306 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff faa1 	bl	8005864 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006322:	bf00      	nop
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006348:	f043 0204 	orr.w	r2, r3, #4
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7ff fa91 	bl	8005878 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <LL_ADC_IsEnabled>:
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <LL_ADC_IsEnabled+0x18>
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <LL_ADC_IsEnabled+0x1a>
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <LL_ADC_StartCalibration>:
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006396:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	609a      	str	r2, [r3, #8]
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <LL_ADC_IsCalibrationOnGoing>:
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ca:	d101      	bne.n	80063d0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <LL_ADC_REG_IsConversionOngoing>:
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d101      	bne.n	80063f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800640e:	2300      	movs	r3, #0
 8006410:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_ADCEx_Calibration_Start+0x1c>
 800641c:	2302      	movs	r3, #2
 800641e:	e04d      	b.n	80064bc <HAL_ADCEx_Calibration_Start+0xb8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fea5 	bl	8006178 <ADC_Disable>
 800642e:	4603      	mov	r3, r0
 8006430:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d136      	bne.n	80064a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006440:	f023 0302 	bic.w	r3, r3, #2
 8006444:	f043 0202 	orr.w	r2, r3, #2
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff ff96 	bl	8006384 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006458:	e014      	b.n	8006484 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	3301      	adds	r3, #1
 800645e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a18      	ldr	r2, [pc, #96]	; (80064c4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d90d      	bls.n	8006484 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646c:	f023 0312 	bic.w	r3, r3, #18
 8006470:	f043 0210 	orr.w	r2, r3, #16
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e01b      	b.n	80064bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff ff94 	bl	80063b6 <LL_ADC_IsCalibrationOnGoing>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e2      	bne.n	800645a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006498:	f023 0303 	bic.w	r3, r3, #3
 800649c:	f043 0201 	orr.w	r2, r3, #1
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80064a4:	e005      	b.n	80064b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	f043 0210 	orr.w	r2, r3, #16
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	0004de01 	.word	0x0004de01

080064c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b0a1      	sub	sp, #132	; 0x84
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e08b      	b.n	80065fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80064ee:	2300      	movs	r3, #0
 80064f0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80064f2:	2300      	movs	r3, #0
 80064f4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064fe:	d102      	bne.n	8006506 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006500:	4b41      	ldr	r3, [pc, #260]	; (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006502:	60bb      	str	r3, [r7, #8]
 8006504:	e001      	b.n	800650a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006506:	2300      	movs	r3, #0
 8006508:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e06a      	b.n	80065fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff ff57 	bl	80063de <LL_ADC_REG_IsConversionOngoing>
 8006530:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff ff51 	bl	80063de <LL_ADC_REG_IsConversionOngoing>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d14c      	bne.n	80065dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006544:	2b00      	cmp	r3, #0
 8006546:	d149      	bne.n	80065dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006548:	4b30      	ldr	r3, [pc, #192]	; (800660c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800654a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d028      	beq.n	80065a6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6859      	ldr	r1, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006566:	035b      	lsls	r3, r3, #13
 8006568:	430b      	orrs	r3, r1
 800656a:	431a      	orrs	r2, r3
 800656c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006570:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006574:	f7ff fef3 	bl	800635e <LL_ADC_IsEnabled>
 8006578:	4604      	mov	r4, r0
 800657a:	4823      	ldr	r0, [pc, #140]	; (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800657c:	f7ff feef 	bl	800635e <LL_ADC_IsEnabled>
 8006580:	4603      	mov	r3, r0
 8006582:	4323      	orrs	r3, r4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d133      	bne.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006590:	f023 030f 	bic.w	r3, r3, #15
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	6811      	ldr	r1, [r2, #0]
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	6892      	ldr	r2, [r2, #8]
 800659c:	430a      	orrs	r2, r1
 800659e:	431a      	orrs	r2, r3
 80065a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065a4:	e024      	b.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80065a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065b2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80065b6:	f7ff fed2 	bl	800635e <LL_ADC_IsEnabled>
 80065ba:	4604      	mov	r4, r0
 80065bc:	4812      	ldr	r0, [pc, #72]	; (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80065be:	f7ff fece 	bl	800635e <LL_ADC_IsEnabled>
 80065c2:	4603      	mov	r3, r0
 80065c4:	4323      	orrs	r3, r4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d112      	bne.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80065ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80065d2:	f023 030f 	bic.w	r3, r3, #15
 80065d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80065d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065da:	e009      	b.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80065ee:	e000      	b.n	80065f2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80065fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3784      	adds	r7, #132	; 0x84
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}
 8006606:	bf00      	nop
 8006608:	50000100 	.word	0x50000100
 800660c:	50000300 	.word	0x50000300

08006610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <__NVIC_SetPriorityGrouping+0x44>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800662c:	4013      	ands	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800663c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006642:	4a04      	ldr	r2, [pc, #16]	; (8006654 <__NVIC_SetPriorityGrouping+0x44>)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	60d3      	str	r3, [r2, #12]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	e000ed00 	.word	0xe000ed00

08006658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800665c:	4b04      	ldr	r3, [pc, #16]	; (8006670 <__NVIC_GetPriorityGrouping+0x18>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	f003 0307 	and.w	r3, r3, #7
}
 8006666:	4618      	mov	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800667e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006682:	2b00      	cmp	r3, #0
 8006684:	db0b      	blt.n	800669e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	f003 021f 	and.w	r2, r3, #31
 800668c:	4907      	ldr	r1, [pc, #28]	; (80066ac <__NVIC_EnableIRQ+0x38>)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	2001      	movs	r0, #1
 8006696:	fa00 f202 	lsl.w	r2, r0, r2
 800669a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	e000e100 	.word	0xe000e100

080066b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	db0a      	blt.n	80066da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	490c      	ldr	r1, [pc, #48]	; (80066fc <__NVIC_SetPriority+0x4c>)
 80066ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ce:	0112      	lsls	r2, r2, #4
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	440b      	add	r3, r1
 80066d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066d8:	e00a      	b.n	80066f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	4908      	ldr	r1, [pc, #32]	; (8006700 <__NVIC_SetPriority+0x50>)
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	3b04      	subs	r3, #4
 80066e8:	0112      	lsls	r2, r2, #4
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	440b      	add	r3, r1
 80066ee:	761a      	strb	r2, [r3, #24]
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	e000e100 	.word	0xe000e100
 8006700:	e000ed00 	.word	0xe000ed00

08006704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006704:	b480      	push	{r7}
 8006706:	b089      	sub	sp, #36	; 0x24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f1c3 0307 	rsb	r3, r3, #7
 800671e:	2b04      	cmp	r3, #4
 8006720:	bf28      	it	cs
 8006722:	2304      	movcs	r3, #4
 8006724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3304      	adds	r3, #4
 800672a:	2b06      	cmp	r3, #6
 800672c:	d902      	bls.n	8006734 <NVIC_EncodePriority+0x30>
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3b03      	subs	r3, #3
 8006732:	e000      	b.n	8006736 <NVIC_EncodePriority+0x32>
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006738:	f04f 32ff 	mov.w	r2, #4294967295
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43da      	mvns	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	401a      	ands	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800674c:	f04f 31ff 	mov.w	r1, #4294967295
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	fa01 f303 	lsl.w	r3, r1, r3
 8006756:	43d9      	mvns	r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800675c:	4313      	orrs	r3, r2
         );
}
 800675e:	4618      	mov	r0, r3
 8006760:	3724      	adds	r7, #36	; 0x24
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3b01      	subs	r3, #1
 8006778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800677c:	d301      	bcc.n	8006782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800677e:	2301      	movs	r3, #1
 8006780:	e00f      	b.n	80067a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006782:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <SysTick_Config+0x40>)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3b01      	subs	r3, #1
 8006788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800678a:	210f      	movs	r1, #15
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	f7ff ff8e 	bl	80066b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <SysTick_Config+0x40>)
 8006796:	2200      	movs	r2, #0
 8006798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800679a:	4b04      	ldr	r3, [pc, #16]	; (80067ac <SysTick_Config+0x40>)
 800679c:	2207      	movs	r2, #7
 800679e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	e000e010 	.word	0xe000e010

080067b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff ff29 	bl	8006610 <__NVIC_SetPriorityGrouping>
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b086      	sub	sp, #24
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	4603      	mov	r3, r0
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
 80067d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067d4:	f7ff ff40 	bl	8006658 <__NVIC_GetPriorityGrouping>
 80067d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	6978      	ldr	r0, [r7, #20]
 80067e0:	f7ff ff90 	bl	8006704 <NVIC_EncodePriority>
 80067e4:	4602      	mov	r2, r0
 80067e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ff5f 	bl	80066b0 <__NVIC_SetPriority>
}
 80067f2:	bf00      	nop
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	4603      	mov	r3, r0
 8006802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff ff33 	bl	8006674 <__NVIC_EnableIRQ>
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff ffa4 	bl	800676c <SysTick_Config>
 8006824:	4603      	mov	r3, r0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e054      	b.n	80068ec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	7f5b      	ldrb	r3, [r3, #29]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fd fa06 	bl	8003c64 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	791b      	ldrb	r3, [r3, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10c      	bne.n	8006880 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a22      	ldr	r2, [pc, #136]	; (80068f4 <HAL_CRC_Init+0xc4>)
 800686c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0218 	bic.w	r2, r2, #24
 800687c:	609a      	str	r2, [r3, #8]
 800687e:	e00c      	b.n	800689a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6899      	ldr	r1, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	461a      	mov	r2, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f948 	bl	8006b20 <HAL_CRCEx_Polynomial_Set>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e028      	b.n	80068ec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	795b      	ldrb	r3, [r3, #5]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f04f 32ff 	mov.w	r2, #4294967295
 80068aa:	611a      	str	r2, [r3, #16]
 80068ac:	e004      	b.n	80068b8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6912      	ldr	r2, [r2, #16]
 80068b6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695a      	ldr	r2, [r3, #20]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699a      	ldr	r2, [r3, #24]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	04c11db7 	.word	0x04c11db7

080068f8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006904:	2300      	movs	r3, #0
 8006906:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2202      	movs	r2, #2
 800690c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0201 	orr.w	r2, r2, #1
 800691c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	2b03      	cmp	r3, #3
 8006924:	d006      	beq.n	8006934 <HAL_CRC_Calculate+0x3c>
 8006926:	2b03      	cmp	r3, #3
 8006928:	d829      	bhi.n	800697e <HAL_CRC_Calculate+0x86>
 800692a:	2b01      	cmp	r3, #1
 800692c:	d019      	beq.n	8006962 <HAL_CRC_Calculate+0x6a>
 800692e:	2b02      	cmp	r3, #2
 8006930:	d01e      	beq.n	8006970 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006932:	e024      	b.n	800697e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	e00a      	b.n	8006950 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	441a      	add	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	3301      	adds	r3, #1
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d3f0      	bcc.n	800693a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	613b      	str	r3, [r7, #16]
      break;
 8006960:	e00e      	b.n	8006980 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f812 	bl	8006990 <CRC_Handle_8>
 800696c:	6138      	str	r0, [r7, #16]
      break;
 800696e:	e007      	b.n	8006980 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f899 	bl	8006aac <CRC_Handle_16>
 800697a:	6138      	str	r0, [r7, #16]
      break;
 800697c:	e000      	b.n	8006980 <HAL_CRC_Calculate+0x88>
      break;
 800697e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006986:	693b      	ldr	r3, [r7, #16]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006990:	b480      	push	{r7}
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	e023      	b.n	80069ea <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	4413      	add	r3, r2
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	3301      	adds	r3, #1
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	440b      	add	r3, r1
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80069bc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	3302      	adds	r3, #2
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	440b      	add	r3, r1
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80069cc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	3303      	adds	r3, #3
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	440b      	add	r3, r1
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80069e0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80069e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	3301      	adds	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	089b      	lsrs	r3, r3, #2
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d3d6      	bcc.n	80069a2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d04d      	beq.n	8006a9a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d107      	bne.n	8006a18 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	4413      	add	r3, r2
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d116      	bne.n	8006a50 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4413      	add	r3, r2
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	b21a      	sxth	r2, r3
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	3301      	adds	r3, #1
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	440b      	add	r3, r1
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	b21b      	sxth	r3, r3
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b21b      	sxth	r3, r3
 8006a42:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	8b7a      	ldrh	r2, [r7, #26]
 8006a4e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d11f      	bne.n	8006a9a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4413      	add	r3, r2
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	b21a      	sxth	r2, r3
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	440b      	add	r3, r1
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	b21b      	sxth	r3, r3
 8006a76:	4313      	orrs	r3, r2
 8006a78:	b21b      	sxth	r3, r3
 8006a7a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	8b7a      	ldrh	r2, [r7, #26]
 8006a86:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	4413      	add	r3, r2
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3724      	adds	r7, #36	; 0x24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e013      	b.n	8006ae6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	041a      	lsls	r2, r3, #16
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	3302      	adds	r3, #2
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	440b      	add	r3, r1
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d3e6      	bcc.n	8006abe <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4413      	add	r3, r2
 8006b08:	881a      	ldrh	r2, [r3, #0]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006b30:	231f      	movs	r3, #31
 8006b32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	75fb      	strb	r3, [r7, #23]
 8006b42:	e063      	b.n	8006c0c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006b44:	bf00      	nop
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1e5a      	subs	r2, r3, #1
 8006b4a:	613a      	str	r2, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <HAL_CRCEx_Polynomial_Set+0x44>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f003 031f 	and.w	r3, r3, #31
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f0      	beq.n	8006b46 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b18      	cmp	r3, #24
 8006b68:	d846      	bhi.n	8006bf8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006b6a:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006bff 	.word	0x08006bff
 8006b74:	08006bf9 	.word	0x08006bf9
 8006b78:	08006bf9 	.word	0x08006bf9
 8006b7c:	08006bf9 	.word	0x08006bf9
 8006b80:	08006bf9 	.word	0x08006bf9
 8006b84:	08006bf9 	.word	0x08006bf9
 8006b88:	08006bf9 	.word	0x08006bf9
 8006b8c:	08006bf9 	.word	0x08006bf9
 8006b90:	08006bed 	.word	0x08006bed
 8006b94:	08006bf9 	.word	0x08006bf9
 8006b98:	08006bf9 	.word	0x08006bf9
 8006b9c:	08006bf9 	.word	0x08006bf9
 8006ba0:	08006bf9 	.word	0x08006bf9
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006bf9 	.word	0x08006bf9
 8006bac:	08006bf9 	.word	0x08006bf9
 8006bb0:	08006be1 	.word	0x08006be1
 8006bb4:	08006bf9 	.word	0x08006bf9
 8006bb8:	08006bf9 	.word	0x08006bf9
 8006bbc:	08006bf9 	.word	0x08006bf9
 8006bc0:	08006bf9 	.word	0x08006bf9
 8006bc4:	08006bf9 	.word	0x08006bf9
 8006bc8:	08006bf9 	.word	0x08006bf9
 8006bcc:	08006bf9 	.word	0x08006bf9
 8006bd0:	08006bd5 	.word	0x08006bd5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b06      	cmp	r3, #6
 8006bd8:	d913      	bls.n	8006c02 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006bde:	e010      	b.n	8006c02 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b07      	cmp	r3, #7
 8006be4:	d90f      	bls.n	8006c06 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006bea:	e00c      	b.n	8006c06 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2b0f      	cmp	r3, #15
 8006bf0:	d90b      	bls.n	8006c0a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006bf6:	e008      	b.n	8006c0a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
        break;
 8006bfc:	e006      	b.n	8006c0c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006bfe:	bf00      	nop
 8006c00:	e004      	b.n	8006c0c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c02:	bf00      	nop
 8006c04:	e002      	b.n	8006c0c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c06:	bf00      	nop
 8006c08:	e000      	b.n	8006c0c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c0a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10d      	bne.n	8006c2e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f023 0118 	bic.w	r1, r3, #24
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e08d      	b.n	8006d6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	4b47      	ldr	r3, [pc, #284]	; (8006d74 <HAL_DMA_Init+0x138>)
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d80f      	bhi.n	8006c7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4b45      	ldr	r3, [pc, #276]	; (8006d78 <HAL_DMA_Init+0x13c>)
 8006c62:	4413      	add	r3, r2
 8006c64:	4a45      	ldr	r2, [pc, #276]	; (8006d7c <HAL_DMA_Init+0x140>)
 8006c66:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6a:	091b      	lsrs	r3, r3, #4
 8006c6c:	009a      	lsls	r2, r3, #2
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a42      	ldr	r2, [pc, #264]	; (8006d80 <HAL_DMA_Init+0x144>)
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40
 8006c78:	e00e      	b.n	8006c98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4b40      	ldr	r3, [pc, #256]	; (8006d84 <HAL_DMA_Init+0x148>)
 8006c82:	4413      	add	r3, r2
 8006c84:	4a3d      	ldr	r2, [pc, #244]	; (8006d7c <HAL_DMA_Init+0x140>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	091b      	lsrs	r3, r3, #4
 8006c8c:	009a      	lsls	r2, r3, #2
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a3c      	ldr	r2, [pc, #240]	; (8006d88 <HAL_DMA_Init+0x14c>)
 8006c96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f9c4 	bl	8007078 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf8:	d102      	bne.n	8006d00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006d14:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d010      	beq.n	8006d40 <HAL_DMA_Init+0x104>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d80c      	bhi.n	8006d40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f9e4 	bl	80070f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	e008      	b.n	8006d52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40020407 	.word	0x40020407
 8006d78:	bffdfff8 	.word	0xbffdfff8
 8006d7c:	cccccccd 	.word	0xcccccccd
 8006d80:	40020000 	.word	0x40020000
 8006d84:	bffdfbf8 	.word	0xbffdfbf8
 8006d88:	40020400 	.word	0x40020400

08006d8c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <HAL_DMA_Start_IT+0x20>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e066      	b.n	8006e7a <HAL_DMA_Start_IT+0xee>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d155      	bne.n	8006e6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0201 	bic.w	r2, r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f909 	bl	8006ffc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 020e 	orr.w	r2, r2, #14
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e00f      	b.n	8006e24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0204 	bic.w	r2, r2, #4
 8006e12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 020a 	orr.w	r2, r2, #10
 8006e22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d007      	beq.n	8006e42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d007      	beq.n	8006e5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0201 	orr.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	e005      	b.n	8006e78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006e74:	2302      	movs	r3, #2
 8006e76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	2204      	movs	r2, #4
 8006ea4:	409a      	lsls	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d026      	beq.n	8006efc <HAL_DMA_IRQHandler+0x7a>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d021      	beq.n	8006efc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d107      	bne.n	8006ed6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0204 	bic.w	r2, r2, #4
 8006ed4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eda:	f003 021f 	and.w	r2, r3, #31
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2104      	movs	r1, #4
 8006ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ee8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d071      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006efa:	e06c      	b.n	8006fd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f00:	f003 031f 	and.w	r3, r3, #31
 8006f04:	2202      	movs	r2, #2
 8006f06:	409a      	lsls	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d02e      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d029      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10b      	bne.n	8006f40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 020a 	bic.w	r2, r2, #10
 8006f36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f44:	f003 021f 	and.w	r2, r3, #31
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	2102      	movs	r1, #2
 8006f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8006f52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d038      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006f6c:	e033      	b.n	8006fd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	2208      	movs	r2, #8
 8006f78:	409a      	lsls	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d02a      	beq.n	8006fd8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d025      	beq.n	8006fd8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 020e 	bic.w	r2, r2, #14
 8006f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa0:	f003 021f 	and.w	r2, r3, #31
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	2101      	movs	r1, #1
 8006faa:	fa01 f202 	lsl.w	r2, r1, r2
 8006fae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006fd6:	bf00      	nop
 8006fd8:	bf00      	nop
}
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fee:	b2db      	uxtb	r3, r3
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007012:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007024:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	f003 021f 	and.w	r2, r3, #31
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	2101      	movs	r1, #1
 8007034:	fa01 f202 	lsl.w	r2, r1, r2
 8007038:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b10      	cmp	r3, #16
 8007048:	d108      	bne.n	800705c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800705a:	e007      	b.n	800706c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	60da      	str	r2, [r3, #12]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007088:	429a      	cmp	r2, r3
 800708a:	d802      	bhi.n	8007092 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800708c:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	e001      	b.n	8007096 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007094:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	3b08      	subs	r3, #8
 80070a2:	4a12      	ldr	r2, [pc, #72]	; (80070ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80070a4:	fba2 2303 	umull	r2, r3, r2, r3
 80070a8:	091b      	lsrs	r3, r3, #4
 80070aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b0:	089b      	lsrs	r3, r3, #2
 80070b2:	009a      	lsls	r2, r3, #2
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	4413      	add	r3, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80070c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 031f 	and.w	r3, r3, #31
 80070ca:	2201      	movs	r2, #1
 80070cc:	409a      	lsls	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40020407 	.word	0x40020407
 80070e4:	40020800 	.word	0x40020800
 80070e8:	40020820 	.word	0x40020820
 80070ec:	cccccccd 	.word	0xcccccccd
 80070f0:	40020880 	.word	0x40020880

080070f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4b0b      	ldr	r3, [pc, #44]	; (8007134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	461a      	mov	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a08      	ldr	r2, [pc, #32]	; (8007138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007116:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3b01      	subs	r3, #1
 800711c:	f003 031f 	and.w	r3, r3, #31
 8007120:	2201      	movs	r2, #1
 8007122:	409a      	lsls	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007128:	bf00      	nop
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	1000823f 	.word	0x1000823f
 8007138:	40020940 	.word	0x40020940

0800713c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800714e:	4b2f      	ldr	r3, [pc, #188]	; (800720c <HAL_FLASH_Program+0xd0>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_FLASH_Program+0x1e>
 8007156:	2302      	movs	r3, #2
 8007158:	e053      	b.n	8007202 <HAL_FLASH_Program+0xc6>
 800715a:	4b2c      	ldr	r3, [pc, #176]	; (800720c <HAL_FLASH_Program+0xd0>)
 800715c:	2201      	movs	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007164:	f000 f892 	bl	800728c <FLASH_WaitForLastOperation>
 8007168:	4603      	mov	r3, r0
 800716a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d143      	bne.n	80071fa <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007172:	4b26      	ldr	r3, [pc, #152]	; (800720c <HAL_FLASH_Program+0xd0>)
 8007174:	2200      	movs	r2, #0
 8007176:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007178:	4b25      	ldr	r3, [pc, #148]	; (8007210 <HAL_FLASH_Program+0xd4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007184:	4b22      	ldr	r3, [pc, #136]	; (8007210 <HAL_FLASH_Program+0xd4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a21      	ldr	r2, [pc, #132]	; (8007210 <HAL_FLASH_Program+0xd4>)
 800718a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800718e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007190:	4b1e      	ldr	r3, [pc, #120]	; (800720c <HAL_FLASH_Program+0xd0>)
 8007192:	2202      	movs	r2, #2
 8007194:	771a      	strb	r2, [r3, #28]
 8007196:	e002      	b.n	800719e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007198:	4b1c      	ldr	r3, [pc, #112]	; (800720c <HAL_FLASH_Program+0xd0>)
 800719a:	2200      	movs	r2, #0
 800719c:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d107      	bne.n	80071b4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80071a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071a8:	68b8      	ldr	r0, [r7, #8]
 80071aa:	f000 f8c3 	bl	8007334 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80071ae:	2301      	movs	r3, #1
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	e010      	b.n	80071d6 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d002      	beq.n	80071c0 <HAL_FLASH_Program+0x84>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d10a      	bne.n	80071d6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	4619      	mov	r1, r3
 80071c4:	68b8      	ldr	r0, [r7, #8]
 80071c6:	f000 f8db 	bl	8007380 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d102      	bne.n	80071d6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80071d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80071d4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071da:	f000 f857 	bl	800728c <FLASH_WaitForLastOperation>
 80071de:	4603      	mov	r3, r0
 80071e0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80071e8:	4b09      	ldr	r3, [pc, #36]	; (8007210 <HAL_FLASH_Program+0xd4>)
 80071ea:	695a      	ldr	r2, [r3, #20]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	43db      	mvns	r3, r3
 80071f0:	4907      	ldr	r1, [pc, #28]	; (8007210 <HAL_FLASH_Program+0xd4>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80071f6:	f000 f9d3 	bl	80075a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80071fa:	4b04      	ldr	r3, [pc, #16]	; (800720c <HAL_FLASH_Program+0xd0>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007200:	7dfb      	ldrb	r3, [r7, #23]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	2000017c 	.word	0x2000017c
 8007210:	40022000 	.word	0x40022000

08007214 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800721e:	4b0b      	ldr	r3, [pc, #44]	; (800724c <HAL_FLASH_Unlock+0x38>)
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	da0b      	bge.n	800723e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007226:	4b09      	ldr	r3, [pc, #36]	; (800724c <HAL_FLASH_Unlock+0x38>)
 8007228:	4a09      	ldr	r2, [pc, #36]	; (8007250 <HAL_FLASH_Unlock+0x3c>)
 800722a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800722c:	4b07      	ldr	r3, [pc, #28]	; (800724c <HAL_FLASH_Unlock+0x38>)
 800722e:	4a09      	ldr	r2, [pc, #36]	; (8007254 <HAL_FLASH_Unlock+0x40>)
 8007230:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <HAL_FLASH_Unlock+0x38>)
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	da01      	bge.n	800723e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800723e:	79fb      	ldrb	r3, [r7, #7]
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	40022000 	.word	0x40022000
 8007250:	45670123 	.word	0x45670123
 8007254:	cdef89ab 	.word	0xcdef89ab

08007258 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007262:	4b09      	ldr	r3, [pc, #36]	; (8007288 <HAL_FLASH_Lock+0x30>)
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	4a08      	ldr	r2, [pc, #32]	; (8007288 <HAL_FLASH_Lock+0x30>)
 8007268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800726c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800726e:	4b06      	ldr	r3, [pc, #24]	; (8007288 <HAL_FLASH_Lock+0x30>)
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	da01      	bge.n	800727a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800727a:	79fb      	ldrb	r3, [r7, #7]
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	40022000 	.word	0x40022000

0800728c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007294:	f7fd fd02 	bl	8004c9c <HAL_GetTick>
 8007298:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800729a:	e009      	b.n	80072b0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800729c:	f7fd fcfe 	bl	8004c9c <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d201      	bcs.n	80072b0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e038      	b.n	8007322 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80072b0:	4b1e      	ldr	r3, [pc, #120]	; (800732c <FLASH_WaitForLastOperation+0xa0>)
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072bc:	d0ee      	beq.n	800729c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80072be:	4b1b      	ldr	r3, [pc, #108]	; (800732c <FLASH_WaitForLastOperation+0xa0>)
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80072c6:	4013      	ands	r3, r2
 80072c8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01e      	beq.n	800730e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80072d0:	4b17      	ldr	r3, [pc, #92]	; (8007330 <FLASH_WaitForLastOperation+0xa4>)
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	4a15      	ldr	r2, [pc, #84]	; (8007330 <FLASH_WaitForLastOperation+0xa4>)
 80072da:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <FLASH_WaitForLastOperation+0x6a>
 80072e6:	4b11      	ldr	r3, [pc, #68]	; (800732c <FLASH_WaitForLastOperation+0xa0>)
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80072f0:	490e      	ldr	r1, [pc, #56]	; (800732c <FLASH_WaitForLastOperation+0xa0>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	618b      	str	r3, [r1, #24]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <FLASH_WaitForLastOperation+0x7e>
 8007300:	4a0a      	ldr	r2, [pc, #40]	; (800732c <FLASH_WaitForLastOperation+0xa0>)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007308:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e009      	b.n	8007322 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800730e:	4b07      	ldr	r3, [pc, #28]	; (800732c <FLASH_WaitForLastOperation+0xa0>)
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	d102      	bne.n	8007320 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800731a:	4b04      	ldr	r3, [pc, #16]	; (800732c <FLASH_WaitForLastOperation+0xa0>)
 800731c:	2201      	movs	r2, #1
 800731e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40022000 	.word	0x40022000
 8007330:	2000017c 	.word	0x2000017c

08007334 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007340:	4b0e      	ldr	r3, [pc, #56]	; (800737c <FLASH_Program_DoubleWord+0x48>)
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	4a0d      	ldr	r2, [pc, #52]	; (800737c <FLASH_Program_DoubleWord+0x48>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007352:	f3bf 8f6f 	isb	sy
}
 8007356:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	f04f 0300 	mov.w	r3, #0
 8007364:	000a      	movs	r2, r1
 8007366:	2300      	movs	r3, #0
 8007368:	68f9      	ldr	r1, [r7, #12]
 800736a:	3104      	adds	r1, #4
 800736c:	4613      	mov	r3, r2
 800736e:	600b      	str	r3, [r1, #0]
}
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	40022000 	.word	0x40022000

08007380 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800738a:	2340      	movs	r3, #64	; 0x40
 800738c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007396:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <FLASH_Program_Fast+0x68>)
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <FLASH_Program_Fast+0x68>)
 800739c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a2:	f3ef 8310 	mrs	r3, PRIMASK
 80073a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80073a8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80073aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80073ac:	b672      	cpsid	i
}
 80073ae:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	3304      	adds	r3, #4
 80073bc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	3304      	adds	r3, #4
 80073c2:	617b      	str	r3, [r7, #20]
    row_index--;
 80073c4:	7ffb      	ldrb	r3, [r7, #31]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80073ca:	7ffb      	ldrb	r3, [r7, #31]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1ef      	bne.n	80073b0 <FLASH_Program_Fast+0x30>
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f383 8810 	msr	PRIMASK, r3
}
 80073da:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80073dc:	bf00      	nop
 80073de:	3724      	adds	r7, #36	; 0x24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	40022000 	.word	0x40022000

080073ec <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80073f6:	4b47      	ldr	r3, [pc, #284]	; (8007514 <HAL_FLASHEx_Erase+0x128>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d101      	bne.n	8007402 <HAL_FLASHEx_Erase+0x16>
 80073fe:	2302      	movs	r3, #2
 8007400:	e083      	b.n	800750a <HAL_FLASHEx_Erase+0x11e>
 8007402:	4b44      	ldr	r3, [pc, #272]	; (8007514 <HAL_FLASHEx_Erase+0x128>)
 8007404:	2201      	movs	r2, #1
 8007406:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800740c:	f7ff ff3e 	bl	800728c <FLASH_WaitForLastOperation>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d173      	bne.n	8007502 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800741a:	4b3e      	ldr	r3, [pc, #248]	; (8007514 <HAL_FLASHEx_Erase+0x128>)
 800741c:	2200      	movs	r2, #0
 800741e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007420:	4b3d      	ldr	r3, [pc, #244]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007428:	2b00      	cmp	r3, #0
 800742a:	d013      	beq.n	8007454 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800742c:	4b3a      	ldr	r3, [pc, #232]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007434:	2b00      	cmp	r3, #0
 8007436:	d009      	beq.n	800744c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007438:	4b37      	ldr	r3, [pc, #220]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a36      	ldr	r2, [pc, #216]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 800743e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007442:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007444:	4b33      	ldr	r3, [pc, #204]	; (8007514 <HAL_FLASHEx_Erase+0x128>)
 8007446:	2203      	movs	r2, #3
 8007448:	771a      	strb	r2, [r3, #28]
 800744a:	e016      	b.n	800747a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800744c:	4b31      	ldr	r3, [pc, #196]	; (8007514 <HAL_FLASHEx_Erase+0x128>)
 800744e:	2201      	movs	r2, #1
 8007450:	771a      	strb	r2, [r3, #28]
 8007452:	e012      	b.n	800747a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007454:	4b30      	ldr	r3, [pc, #192]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800745c:	2b00      	cmp	r3, #0
 800745e:	d009      	beq.n	8007474 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007460:	4b2d      	ldr	r3, [pc, #180]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a2c      	ldr	r2, [pc, #176]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 8007466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800746a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800746c:	4b29      	ldr	r3, [pc, #164]	; (8007514 <HAL_FLASHEx_Erase+0x128>)
 800746e:	2202      	movs	r2, #2
 8007470:	771a      	strb	r2, [r3, #28]
 8007472:	e002      	b.n	800747a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007474:	4b27      	ldr	r3, [pc, #156]	; (8007514 <HAL_FLASHEx_Erase+0x128>)
 8007476:	2200      	movs	r2, #0
 8007478:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d111      	bne.n	80074a6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f848 	bl	800751c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800748c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007490:	f7ff fefc 	bl	800728c <FLASH_WaitForLastOperation>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007498:	4b1f      	ldr	r3, [pc, #124]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	4a1e      	ldr	r2, [pc, #120]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 800749e:	f023 0304 	bic.w	r3, r3, #4
 80074a2:	6153      	str	r3, [r2, #20]
 80074a4:	e02b      	b.n	80074fe <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ac:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	60bb      	str	r3, [r7, #8]
 80074b4:	e01b      	b.n	80074ee <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	4619      	mov	r1, r3
 80074bc:	68b8      	ldr	r0, [r7, #8]
 80074be:	f000 f84b 	bl	8007558 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80074c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074c6:	f7ff fee1 	bl	800728c <FLASH_WaitForLastOperation>
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80074ce:	4b12      	ldr	r3, [pc, #72]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	4a11      	ldr	r2, [pc, #68]	; (8007518 <HAL_FLASHEx_Erase+0x12c>)
 80074d4:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80074d8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	601a      	str	r2, [r3, #0]
          break;
 80074e6:	e00a      	b.n	80074fe <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d3db      	bcc.n	80074b6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80074fe:	f000 f84f 	bl	80075a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007502:	4b04      	ldr	r3, [pc, #16]	; (8007514 <HAL_FLASHEx_Erase+0x128>)
 8007504:	2200      	movs	r2, #0
 8007506:	701a      	strb	r2, [r3, #0]

  return status;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	2000017c 	.word	0x2000017c
 8007518:	40022000 	.word	0x40022000

0800751c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d005      	beq.n	800753a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <FLASH_MassErase+0x38>)
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	4a08      	ldr	r2, [pc, #32]	; (8007554 <FLASH_MassErase+0x38>)
 8007534:	f043 0304 	orr.w	r3, r3, #4
 8007538:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800753a:	4b06      	ldr	r3, [pc, #24]	; (8007554 <FLASH_MassErase+0x38>)
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	4a05      	ldr	r2, [pc, #20]	; (8007554 <FLASH_MassErase+0x38>)
 8007540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007544:	6153      	str	r3, [r2, #20]
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40022000 	.word	0x40022000

08007558 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007562:	4b0e      	ldr	r3, [pc, #56]	; (800759c <FLASH_PageErase+0x44>)
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007572:	490a      	ldr	r1, [pc, #40]	; (800759c <FLASH_PageErase+0x44>)
 8007574:	4313      	orrs	r3, r2
 8007576:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007578:	4b08      	ldr	r3, [pc, #32]	; (800759c <FLASH_PageErase+0x44>)
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	4a07      	ldr	r2, [pc, #28]	; (800759c <FLASH_PageErase+0x44>)
 800757e:	f043 0302 	orr.w	r3, r3, #2
 8007582:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <FLASH_PageErase+0x44>)
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	4a04      	ldr	r2, [pc, #16]	; (800759c <FLASH_PageErase+0x44>)
 800758a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800758e:	6153      	str	r3, [r2, #20]
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	40022000 	.word	0x40022000

080075a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80075a6:	4b21      	ldr	r3, [pc, #132]	; (800762c <FLASH_FlushCaches+0x8c>)
 80075a8:	7f1b      	ldrb	r3, [r3, #28]
 80075aa:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d002      	beq.n	80075b8 <FLASH_FlushCaches+0x18>
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d117      	bne.n	80075e8 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80075b8:	4b1d      	ldr	r3, [pc, #116]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a1c      	ldr	r2, [pc, #112]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80075c4:	4b1a      	ldr	r3, [pc, #104]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a19      	ldr	r2, [pc, #100]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	4b17      	ldr	r3, [pc, #92]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a16      	ldr	r2, [pc, #88]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80075dc:	4b14      	ldr	r3, [pc, #80]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a13      	ldr	r2, [pc, #76]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d002      	beq.n	80075f4 <FLASH_FlushCaches+0x54>
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d111      	bne.n	8007618 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80075f4:	4b0e      	ldr	r3, [pc, #56]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a0d      	ldr	r2, [pc, #52]	; (8007630 <FLASH_FlushCaches+0x90>)
 80075fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <FLASH_FlushCaches+0x90>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a0a      	ldr	r2, [pc, #40]	; (8007630 <FLASH_FlushCaches+0x90>)
 8007606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800760a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800760c:	4b08      	ldr	r3, [pc, #32]	; (8007630 <FLASH_FlushCaches+0x90>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a07      	ldr	r2, [pc, #28]	; (8007630 <FLASH_FlushCaches+0x90>)
 8007612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007616:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007618:	4b04      	ldr	r3, [pc, #16]	; (800762c <FLASH_FlushCaches+0x8c>)
 800761a:	2200      	movs	r2, #0
 800761c:	771a      	strb	r2, [r3, #28]
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	2000017c 	.word	0x2000017c
 8007630:	40022000 	.word	0x40022000

08007634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007642:	e15a      	b.n	80078fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	2101      	movs	r1, #1
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	fa01 f303 	lsl.w	r3, r1, r3
 8007650:	4013      	ands	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 814c 	beq.w	80078f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	2b01      	cmp	r3, #1
 8007666:	d005      	beq.n	8007674 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007670:	2b02      	cmp	r3, #2
 8007672:	d130      	bne.n	80076d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	2203      	movs	r2, #3
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	43db      	mvns	r3, r3
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	4013      	ands	r3, r2
 800768a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076aa:	2201      	movs	r2, #1
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	fa02 f303 	lsl.w	r3, r2, r3
 80076b2:	43db      	mvns	r3, r3
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4013      	ands	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	091b      	lsrs	r3, r3, #4
 80076c0:	f003 0201 	and.w	r2, r3, #1
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d017      	beq.n	8007712 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	2203      	movs	r2, #3
 80076ee:	fa02 f303 	lsl.w	r3, r2, r3
 80076f2:	43db      	mvns	r3, r3
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4013      	ands	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	4313      	orrs	r3, r2
 800770a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d123      	bne.n	8007766 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	08da      	lsrs	r2, r3, #3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3208      	adds	r2, #8
 8007726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	220f      	movs	r2, #15
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	43db      	mvns	r3, r3
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4013      	ands	r3, r2
 8007740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	08da      	lsrs	r2, r3, #3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3208      	adds	r2, #8
 8007760:	6939      	ldr	r1, [r7, #16]
 8007762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	2203      	movs	r2, #3
 8007772:	fa02 f303 	lsl.w	r3, r2, r3
 8007776:	43db      	mvns	r3, r3
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4013      	ands	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f003 0203 	and.w	r2, r3, #3
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 80a6 	beq.w	80078f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077a8:	4b5b      	ldr	r3, [pc, #364]	; (8007918 <HAL_GPIO_Init+0x2e4>)
 80077aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ac:	4a5a      	ldr	r2, [pc, #360]	; (8007918 <HAL_GPIO_Init+0x2e4>)
 80077ae:	f043 0301 	orr.w	r3, r3, #1
 80077b2:	6613      	str	r3, [r2, #96]	; 0x60
 80077b4:	4b58      	ldr	r3, [pc, #352]	; (8007918 <HAL_GPIO_Init+0x2e4>)
 80077b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077c0:	4a56      	ldr	r2, [pc, #344]	; (800791c <HAL_GPIO_Init+0x2e8>)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	089b      	lsrs	r3, r3, #2
 80077c6:	3302      	adds	r3, #2
 80077c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	220f      	movs	r2, #15
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	43db      	mvns	r3, r3
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4013      	ands	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80077ea:	d01f      	beq.n	800782c <HAL_GPIO_Init+0x1f8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a4c      	ldr	r2, [pc, #304]	; (8007920 <HAL_GPIO_Init+0x2ec>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d019      	beq.n	8007828 <HAL_GPIO_Init+0x1f4>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a4b      	ldr	r2, [pc, #300]	; (8007924 <HAL_GPIO_Init+0x2f0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d013      	beq.n	8007824 <HAL_GPIO_Init+0x1f0>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a4a      	ldr	r2, [pc, #296]	; (8007928 <HAL_GPIO_Init+0x2f4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00d      	beq.n	8007820 <HAL_GPIO_Init+0x1ec>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a49      	ldr	r2, [pc, #292]	; (800792c <HAL_GPIO_Init+0x2f8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d007      	beq.n	800781c <HAL_GPIO_Init+0x1e8>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a48      	ldr	r2, [pc, #288]	; (8007930 <HAL_GPIO_Init+0x2fc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d101      	bne.n	8007818 <HAL_GPIO_Init+0x1e4>
 8007814:	2305      	movs	r3, #5
 8007816:	e00a      	b.n	800782e <HAL_GPIO_Init+0x1fa>
 8007818:	2306      	movs	r3, #6
 800781a:	e008      	b.n	800782e <HAL_GPIO_Init+0x1fa>
 800781c:	2304      	movs	r3, #4
 800781e:	e006      	b.n	800782e <HAL_GPIO_Init+0x1fa>
 8007820:	2303      	movs	r3, #3
 8007822:	e004      	b.n	800782e <HAL_GPIO_Init+0x1fa>
 8007824:	2302      	movs	r3, #2
 8007826:	e002      	b.n	800782e <HAL_GPIO_Init+0x1fa>
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <HAL_GPIO_Init+0x1fa>
 800782c:	2300      	movs	r3, #0
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	f002 0203 	and.w	r2, r2, #3
 8007834:	0092      	lsls	r2, r2, #2
 8007836:	4093      	lsls	r3, r2
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800783e:	4937      	ldr	r1, [pc, #220]	; (800791c <HAL_GPIO_Init+0x2e8>)
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	089b      	lsrs	r3, r3, #2
 8007844:	3302      	adds	r3, #2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800784c:	4b39      	ldr	r3, [pc, #228]	; (8007934 <HAL_GPIO_Init+0x300>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	43db      	mvns	r3, r3
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4013      	ands	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007870:	4a30      	ldr	r2, [pc, #192]	; (8007934 <HAL_GPIO_Init+0x300>)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <HAL_GPIO_Init+0x300>)
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	43db      	mvns	r3, r3
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4013      	ands	r3, r2
 8007884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800789a:	4a26      	ldr	r2, [pc, #152]	; (8007934 <HAL_GPIO_Init+0x300>)
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80078a0:	4b24      	ldr	r3, [pc, #144]	; (8007934 <HAL_GPIO_Init+0x300>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	43db      	mvns	r3, r3
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4013      	ands	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80078c4:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <HAL_GPIO_Init+0x300>)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80078ca:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <HAL_GPIO_Init+0x300>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	43db      	mvns	r3, r3
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4013      	ands	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80078ee:	4a11      	ldr	r2, [pc, #68]	; (8007934 <HAL_GPIO_Init+0x300>)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	3301      	adds	r3, #1
 80078f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	f47f ae9d 	bne.w	8007644 <HAL_GPIO_Init+0x10>
  }
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	40021000 	.word	0x40021000
 800791c:	40010000 	.word	0x40010000
 8007920:	48000400 	.word	0x48000400
 8007924:	48000800 	.word	0x48000800
 8007928:	48000c00 	.word	0x48000c00
 800792c:	48001000 	.word	0x48001000
 8007930:	48001400 	.word	0x48001400
 8007934:	40010400 	.word	0x40010400

08007938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	887b      	ldrh	r3, [r7, #2]
 800794a:	4013      	ands	r3, r2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
 8007954:	e001      	b.n	800795a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	807b      	strh	r3, [r7, #2]
 8007974:	4613      	mov	r3, r2
 8007976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007978:	787b      	ldrb	r3, [r7, #1]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800797e:	887a      	ldrh	r2, [r7, #2]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007984:	e002      	b.n	800798c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007986:	887a      	ldrh	r2, [r7, #2]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e08d      	b.n	8007ac6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fc f970 	bl	8003ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2224      	movs	r2, #36	; 0x24
 80079c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0201 	bic.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d107      	bne.n	8007a12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a0e:	609a      	str	r2, [r3, #8]
 8007a10:	e006      	b.n	8007a20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d108      	bne.n	8007a3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a36:	605a      	str	r2, [r3, #4]
 8007a38:	e007      	b.n	8007a4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	69d9      	ldr	r1, [r3, #28]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1a      	ldr	r2, [r3, #32]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0201 	orr.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d138      	bne.n	8007b56 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d101      	bne.n	8007af2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007aee:	2302      	movs	r3, #2
 8007af0:	e032      	b.n	8007b58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2224      	movs	r2, #36	; 0x24
 8007afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0201 	bic.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b20:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6819      	ldr	r1, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0201 	orr.w	r2, r2, #1
 8007b40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e000      	b.n	8007b58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b56:	2302      	movs	r3, #2
  }
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d139      	bne.n	8007bee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e033      	b.n	8007bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2224      	movs	r2, #36	; 0x24
 8007b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007bb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0201 	orr.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e000      	b.n	8007bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
  }
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e0c0      	b.n	8007d90 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f00b fb1a 	bl	801325c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f005 fac6 	bl	800d1c6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
 8007c3e:	e03e      	b.n	8007cbe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007c40:	7bfa      	ldrb	r2, [r7, #15]
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	440b      	add	r3, r1
 8007c4e:	3311      	adds	r3, #17
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007c54:	7bfa      	ldrb	r2, [r7, #15]
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	440b      	add	r3, r1
 8007c62:	3310      	adds	r3, #16
 8007c64:	7bfa      	ldrb	r2, [r7, #15]
 8007c66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007c68:	7bfa      	ldrb	r2, [r7, #15]
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	440b      	add	r3, r1
 8007c76:	3313      	adds	r3, #19
 8007c78:	2200      	movs	r2, #0
 8007c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007c7c:	7bfa      	ldrb	r2, [r7, #15]
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	440b      	add	r3, r1
 8007c8a:	3320      	adds	r3, #32
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007c90:	7bfa      	ldrb	r2, [r7, #15]
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	440b      	add	r3, r1
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	440b      	add	r3, r1
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	73fb      	strb	r3, [r7, #15]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	791b      	ldrb	r3, [r3, #4]
 8007cc2:	7bfa      	ldrb	r2, [r7, #15]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d3bb      	bcc.n	8007c40 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]
 8007ccc:	e044      	b.n	8007d58 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007cce:	7bfa      	ldrb	r2, [r7, #15]
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	00db      	lsls	r3, r3, #3
 8007cda:	440b      	add	r3, r1
 8007cdc:	f203 1351 	addw	r3, r3, #337	; 0x151
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007ce4:	7bfa      	ldrb	r2, [r7, #15]
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	440b      	add	r3, r1
 8007cf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cf6:	7bfa      	ldrb	r2, [r7, #15]
 8007cf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007cfa:	7bfa      	ldrb	r2, [r7, #15]
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	440b      	add	r3, r1
 8007d08:	f203 1353 	addw	r3, r3, #339	; 0x153
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d10:	7bfa      	ldrb	r2, [r7, #15]
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	440b      	add	r3, r1
 8007d1e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d26:	7bfa      	ldrb	r2, [r7, #15]
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	440b      	add	r3, r1
 8007d34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007d3c:	7bfa      	ldrb	r2, [r7, #15]
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	440b      	add	r3, r1
 8007d4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	3301      	adds	r3, #1
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	791b      	ldrb	r3, [r3, #4]
 8007d5c:	7bfa      	ldrb	r2, [r7, #15]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d3b5      	bcc.n	8007cce <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007d6e:	f005 fa45 	bl	800d1fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	7a9b      	ldrb	r3, [r3, #10]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d102      	bne.n	8007d8e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f001 fc41 	bl	8009610 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d101      	bne.n	8007dae <HAL_PCD_Start+0x16>
 8007daa:	2302      	movs	r3, #2
 8007dac:	e012      	b.n	8007dd4 <HAL_PCD_Start+0x3c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f005 f9ec 	bl	800d198 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f007 fcac 	bl	800f722 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f007 fcb1 	bl	800f750 <USB_ReadInterrupts>
 8007dee:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fb04 	bl	8008408 <PCD_EP_ISR_Handler>

    return;
 8007e00:	e110      	b.n	8008024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d013      	beq.n	8007e34 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e1e:	b292      	uxth	r2, r2
 8007e20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f00b faaa 	bl	801337e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f8fc 	bl	800802a <HAL_PCD_SetAddress>

    return;
 8007e32:	e0f7      	b.n	8008024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00c      	beq.n	8007e58 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e50:	b292      	uxth	r2, r2
 8007e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007e56:	e0e5      	b.n	8008024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00c      	beq.n	8007e7c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e74:	b292      	uxth	r2, r2
 8007e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007e7a:	e0d3      	b.n	8008024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d034      	beq.n	8007ef0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0204 	bic.w	r2, r2, #4
 8007e98:	b292      	uxth	r2, r2
 8007e9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0208 	bic.w	r2, r2, #8
 8007eb0:	b292      	uxth	r2, r2
 8007eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d107      	bne.n	8007ed0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ec8:	2100      	movs	r1, #0
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f00b fc4a 	bl	8013764 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f00b fa8d 	bl	80133f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ee8:	b292      	uxth	r2, r2
 8007eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007eee:	e099      	b.n	8008024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d027      	beq.n	8007f4a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0208 	orr.w	r2, r2, #8
 8007f0c:	b292      	uxth	r2, r2
 8007f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f24:	b292      	uxth	r2, r2
 8007f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0204 	orr.w	r2, r2, #4
 8007f3c:	b292      	uxth	r2, r2
 8007f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f00b fa3a 	bl	80133bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007f48:	e06c      	b.n	8008024 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d040      	beq.n	8007fd6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f66:	b292      	uxth	r2, r2
 8007f68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d12b      	bne.n	8007fce <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0204 	orr.w	r2, r2, #4
 8007f88:	b292      	uxth	r2, r2
 8007f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0208 	orr.w	r2, r2, #8
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	089b      	lsrs	r3, r3, #2
 8007fba:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f00b fbcc 	bl	8013764 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007fcc:	e02a      	b.n	8008024 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f00b f9f4 	bl	80133bc <HAL_PCD_SuspendCallback>
    return;
 8007fd4:	e026      	b.n	8008024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00f      	beq.n	8008000 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ff2:	b292      	uxth	r2, r2
 8007ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f00b f9b2 	bl	8013362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007ffe:	e011      	b.n	8008024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00c      	beq.n	8008024 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008012:	b29a      	uxth	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800801c:	b292      	uxth	r2, r2
 800801e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008022:	bf00      	nop
  }
}
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	460b      	mov	r3, r1
 8008034:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_PCD_SetAddress+0x1a>
 8008040:	2302      	movs	r3, #2
 8008042:	e012      	b.n	800806a <HAL_PCD_SetAddress+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f007 fb4d 	bl	800f6fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	4608      	mov	r0, r1
 800807c:	4611      	mov	r1, r2
 800807e:	461a      	mov	r2, r3
 8008080:	4603      	mov	r3, r0
 8008082:	70fb      	strb	r3, [r7, #3]
 8008084:	460b      	mov	r3, r1
 8008086:	803b      	strh	r3, [r7, #0]
 8008088:	4613      	mov	r3, r2
 800808a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008094:	2b00      	cmp	r3, #0
 8008096:	da0e      	bge.n	80080b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	f003 0207 	and.w	r2, r3, #7
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	3310      	adds	r3, #16
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	4413      	add	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	705a      	strb	r2, [r3, #1]
 80080b4:	e00e      	b.n	80080d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	f003 0207 	and.w	r2, r3, #7
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	4413      	add	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80080e0:	883a      	ldrh	r2, [r7, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	78ba      	ldrb	r2, [r7, #2]
 80080ea:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80080ec:	78bb      	ldrb	r3, [r7, #2]
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d102      	bne.n	80080f8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_PCD_EP_Open+0x94>
 8008102:	2302      	movs	r3, #2
 8008104:	e00e      	b.n	8008124 <HAL_PCD_EP_Open+0xb2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	4618      	mov	r0, r3
 8008116:	f005 f88f 	bl	800d238 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8008122:	7afb      	ldrb	r3, [r7, #11]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800813c:	2b00      	cmp	r3, #0
 800813e:	da0e      	bge.n	800815e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	f003 0207 	and.w	r2, r3, #7
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	3310      	adds	r3, #16
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	4413      	add	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	705a      	strb	r2, [r3, #1]
 800815c:	e00e      	b.n	800817c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800815e:	78fb      	ldrb	r3, [r7, #3]
 8008160:	f003 0207 	and.w	r2, r3, #7
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	4413      	add	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	b2da      	uxtb	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_PCD_EP_Close+0x6a>
 8008192:	2302      	movs	r3, #2
 8008194:	e00e      	b.n	80081b4 <HAL_PCD_EP_Close+0x88>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f005 fc0b 	bl	800d9c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	460b      	mov	r3, r1
 80081ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	f003 0207 	and.w	r2, r3, #7
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2200      	movs	r2, #0
 80081f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2200      	movs	r2, #0
 80081fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	f003 0307 	and.w	r3, r3, #7
 8008202:	b2da      	uxtb	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6979      	ldr	r1, [r7, #20]
 800820e:	4618      	mov	r0, r3
 8008210:	f005 fdc3 	bl	800dd9a <USB_EPStartXfer>

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	460b      	mov	r3, r1
 8008228:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	f003 0207 	and.w	r2, r3, #7
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	440b      	add	r3, r1
 800823c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008240:	681b      	ldr	r3, [r3, #0]
}
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	460b      	mov	r3, r1
 800825c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800825e:	7afb      	ldrb	r3, [r7, #11]
 8008260:	f003 0207 	and.w	r2, r3, #7
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	3310      	adds	r3, #16
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4413      	add	r3, r2
 8008272:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2200      	movs	r2, #0
 8008292:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2201      	movs	r2, #1
 8008298:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800829a:	7afb      	ldrb	r3, [r7, #11]
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6979      	ldr	r1, [r7, #20]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f005 fd74 	bl	800dd9a <USB_EPStartXfer>

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	7912      	ldrb	r2, [r2, #4]
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d901      	bls.n	80082da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e03e      	b.n	8008358 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80082da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da0e      	bge.n	8008300 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082e2:	78fb      	ldrb	r3, [r7, #3]
 80082e4:	f003 0207 	and.w	r2, r3, #7
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	3310      	adds	r3, #16
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	4413      	add	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	705a      	strb	r2, [r3, #1]
 80082fe:	e00c      	b.n	800831a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008300:	78fa      	ldrb	r2, [r7, #3]
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	4413      	add	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2201      	movs	r2, #1
 800831e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	b2da      	uxtb	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_PCD_EP_SetStall+0x7e>
 8008336:	2302      	movs	r3, #2
 8008338:	e00e      	b.n	8008358 <HAL_PCD_EP_SetStall+0x9c>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68f9      	ldr	r1, [r7, #12]
 8008348:	4618      	mov	r0, r3
 800834a:	f007 f8d7 	bl	800f4fc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	7912      	ldrb	r2, [r2, #4]
 8008376:	4293      	cmp	r3, r2
 8008378:	d901      	bls.n	800837e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e040      	b.n	8008400 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800837e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008382:	2b00      	cmp	r3, #0
 8008384:	da0e      	bge.n	80083a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008386:	78fb      	ldrb	r3, [r7, #3]
 8008388:	f003 0207 	and.w	r2, r3, #7
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	3310      	adds	r3, #16
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	4413      	add	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2201      	movs	r2, #1
 80083a0:	705a      	strb	r2, [r3, #1]
 80083a2:	e00e      	b.n	80083c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	f003 0207 	and.w	r2, r3, #7
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	4413      	add	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_PCD_EP_ClrStall+0x82>
 80083de:	2302      	movs	r3, #2
 80083e0:	e00e      	b.n	8008400 <HAL_PCD_EP_ClrStall+0xa0>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68f9      	ldr	r1, [r7, #12]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f007 f8d4 	bl	800f59e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b096      	sub	sp, #88	; 0x58
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008410:	e3ae      	b.n	8008b70 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800841a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800841e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008422:	b2db      	uxtb	r3, r3
 8008424:	f003 030f 	and.w	r3, r3, #15
 8008428:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800842c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008430:	2b00      	cmp	r3, #0
 8008432:	f040 8170 	bne.w	8008716 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008436:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800843a:	f003 0310 	and.w	r3, r3, #16
 800843e:	2b00      	cmp	r3, #0
 8008440:	d14d      	bne.n	80084de <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	b29b      	uxth	r3, r3
 800844a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	81fb      	strh	r3, [r7, #14]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	89fb      	ldrh	r3, [r7, #14]
 800845a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008462:	b29b      	uxth	r3, r3
 8008464:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3310      	adds	r3, #16
 800846a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008474:	b29b      	uxth	r3, r3
 8008476:	461a      	mov	r2, r3
 8008478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4413      	add	r3, r2
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	6812      	ldr	r2, [r2, #0]
 8008484:	4413      	add	r3, r2
 8008486:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008492:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008496:	695a      	ldr	r2, [r3, #20]
 8008498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	441a      	add	r2, r3
 800849e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80084a2:	2100      	movs	r1, #0
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f00a ff42 	bl	801332e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	7b1b      	ldrb	r3, [r3, #12]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 835d 	beq.w	8008b70 <PCD_EP_ISR_Handler+0x768>
 80084b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f040 8358 	bne.w	8008b70 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7b1b      	ldrb	r3, [r3, #12]
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	b292      	uxth	r2, r2
 80084d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	731a      	strb	r2, [r3, #12]
 80084dc:	e348      	b.n	8008b70 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084e4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80084f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80084f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d032      	beq.n	8008562 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008504:	b29b      	uxth	r3, r3
 8008506:	461a      	mov	r2, r3
 8008508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	4413      	add	r3, r2
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	4413      	add	r3, r2
 8008516:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008522:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800852e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008530:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008534:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008536:	b29b      	uxth	r3, r3
 8008538:	f007 f95c 	bl	800f7f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29a      	uxth	r2, r3
 8008544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008548:	4013      	ands	r3, r2
 800854a:	823b      	strh	r3, [r7, #16]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	8a3a      	ldrh	r2, [r7, #16]
 8008552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008556:	b292      	uxth	r2, r2
 8008558:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f00a feba 	bl	80132d4 <HAL_PCD_SetupStageCallback>
 8008560:	e306      	b.n	8008b70 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008562:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008566:	2b00      	cmp	r3, #0
 8008568:	f280 8302 	bge.w	8008b70 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29a      	uxth	r2, r3
 8008574:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008578:	4013      	ands	r3, r2
 800857a:	83fb      	strh	r3, [r7, #30]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	8bfa      	ldrh	r2, [r7, #30]
 8008582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008586:	b292      	uxth	r2, r2
 8008588:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008592:	b29b      	uxth	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	4413      	add	r3, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6812      	ldr	r2, [r2, #0]
 80085a2:	4413      	add	r3, r2
 80085a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80085ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80085b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d019      	beq.n	80085ee <PCD_EP_ISR_Handler+0x1e6>
 80085ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d015      	beq.n	80085ee <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085c8:	6959      	ldr	r1, [r3, #20]
 80085ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80085ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f007 f90e 	bl	800f7f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80085d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085da:	695a      	ldr	r2, [r3, #20]
 80085dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	441a      	add	r2, r3
 80085e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80085e6:	2100      	movs	r1, #0
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f00a fe85 	bl	80132f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80085f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80085fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008600:	2b00      	cmp	r3, #0
 8008602:	f040 82b5 	bne.w	8008b70 <PCD_EP_ISR_Handler+0x768>
 8008606:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800860a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800860e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008612:	f000 82ad 	beq.w	8008b70 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	4413      	add	r3, r2
 800862c:	61bb      	str	r3, [r7, #24]
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008640:	b29a      	uxth	r2, r3
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	801a      	strh	r2, [r3, #0]
 8008646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b3e      	cmp	r3, #62	; 0x3e
 800864c:	d91d      	bls.n	800868a <PCD_EP_ISR_Handler+0x282>
 800864e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	647b      	str	r3, [r7, #68]	; 0x44
 8008656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 031f 	and.w	r3, r3, #31
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <PCD_EP_ISR_Handler+0x260>
 8008662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008664:	3b01      	subs	r3, #1
 8008666:	647b      	str	r3, [r7, #68]	; 0x44
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29a      	uxth	r2, r3
 800866e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008670:	b29b      	uxth	r3, r3
 8008672:	029b      	lsls	r3, r3, #10
 8008674:	b29b      	uxth	r3, r3
 8008676:	4313      	orrs	r3, r2
 8008678:	b29b      	uxth	r3, r3
 800867a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008682:	b29a      	uxth	r2, r3
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	801a      	strh	r2, [r3, #0]
 8008688:	e026      	b.n	80086d8 <PCD_EP_ISR_Handler+0x2d0>
 800868a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <PCD_EP_ISR_Handler+0x2a0>
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800869c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	e017      	b.n	80086d8 <PCD_EP_ISR_Handler+0x2d0>
 80086a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	085b      	lsrs	r3, r3, #1
 80086ae:	647b      	str	r3, [r7, #68]	; 0x44
 80086b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <PCD_EP_ISR_Handler+0x2ba>
 80086bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086be:	3301      	adds	r3, #1
 80086c0:	647b      	str	r3, [r7, #68]	; 0x44
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	029b      	lsls	r3, r3, #10
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e8:	827b      	strh	r3, [r7, #18]
 80086ea:	8a7b      	ldrh	r3, [r7, #18]
 80086ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086f0:	827b      	strh	r3, [r7, #18]
 80086f2:	8a7b      	ldrh	r3, [r7, #18]
 80086f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086f8:	827b      	strh	r3, [r7, #18]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	8a7b      	ldrh	r3, [r7, #18]
 8008700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008710:	b29b      	uxth	r3, r3
 8008712:	8013      	strh	r3, [r2, #0]
 8008714:	e22c      	b.n	8008b70 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800872a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800872e:	2b00      	cmp	r3, #0
 8008730:	f280 80f6 	bge.w	8008920 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29a      	uxth	r2, r3
 8008746:	f640 738f 	movw	r3, #3983	; 0xf8f
 800874a:	4013      	ands	r3, r2
 800874c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008766:	b292      	uxth	r2, r2
 8008768:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800876a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	4413      	add	r3, r2
 800877e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008782:	7b1b      	ldrb	r3, [r3, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d123      	bne.n	80087d0 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008790:	b29b      	uxth	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	4413      	add	r3, r2
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6812      	ldr	r2, [r2, #0]
 80087a0:	4413      	add	r3, r2
 80087a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80087b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 808e 	beq.w	80088d6 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c0:	6959      	ldr	r1, [r3, #20]
 80087c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c4:	88da      	ldrh	r2, [r3, #6]
 80087c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80087ca:	f007 f813 	bl	800f7f4 <USB_ReadPMA>
 80087ce:	e082      	b.n	80088d6 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80087d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d2:	78db      	ldrb	r3, [r3, #3]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d10a      	bne.n	80087ee <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80087d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80087dc:	461a      	mov	r2, r3
 80087de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f9d3 	bl	8008b8c <HAL_PCD_EP_DB_Receive>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80087ec:	e073      	b.n	80088d6 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008808:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	461a      	mov	r2, r3
 8008812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	441a      	add	r2, r3
 800881a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800881e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800882a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800882e:	b29b      	uxth	r3, r3
 8008830:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29b      	uxth	r3, r3
 8008844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d022      	beq.n	8008892 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008854:	b29b      	uxth	r3, r3
 8008856:	461a      	mov	r2, r3
 8008858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	4413      	add	r3, r2
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6812      	ldr	r2, [r2, #0]
 8008864:	4413      	add	r3, r2
 8008866:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008870:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008874:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008878:	2b00      	cmp	r3, #0
 800887a:	d02c      	beq.n	80088d6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6818      	ldr	r0, [r3, #0]
 8008880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008882:	6959      	ldr	r1, [r3, #20]
 8008884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008886:	891a      	ldrh	r2, [r3, #8]
 8008888:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800888c:	f006 ffb2 	bl	800f7f4 <USB_ReadPMA>
 8008890:	e021      	b.n	80088d6 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800889a:	b29b      	uxth	r3, r3
 800889c:	461a      	mov	r2, r3
 800889e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	4413      	add	r3, r2
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	4413      	add	r3, r2
 80088ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80088ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d009      	beq.n	80088d6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088c8:	6959      	ldr	r1, [r3, #20]
 80088ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088cc:	895a      	ldrh	r2, [r3, #10]
 80088ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80088d2:	f006 ff8f 	bl	800f7f4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80088d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088d8:	69da      	ldr	r2, [r3, #28]
 80088da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80088de:	441a      	add	r2, r3
 80088e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80088e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e6:	695a      	ldr	r2, [r3, #20]
 80088e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80088ec:	441a      	add	r2, r3
 80088ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80088f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <PCD_EP_ISR_Handler+0x4fe>
 80088fa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80088fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	429a      	cmp	r2, r3
 8008904:	d206      	bcs.n	8008914 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f00a fcf3 	bl	80132f8 <HAL_PCD_DataOutStageCallback>
 8008912:	e005      	b.n	8008920 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800891a:	4618      	mov	r0, r3
 800891c:	f005 fa3d 	bl	800dd9a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008920:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8121 	beq.w	8008b70 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800892e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	3310      	adds	r3, #16
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	4413      	add	r3, r2
 8008940:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	441a      	add	r2, r3
 800896e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897a:	b29b      	uxth	r3, r3
 800897c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800897e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008980:	78db      	ldrb	r3, [r3, #3]
 8008982:	2b01      	cmp	r3, #1
 8008984:	f040 80a2 	bne.w	8008acc <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8008988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800898a:	2200      	movs	r2, #0
 800898c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800898e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008990:	7b1b      	ldrb	r3, [r3, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 8093 	beq.w	8008abe <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008998:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800899c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d046      	beq.n	8008a32 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80089a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a6:	785b      	ldrb	r3, [r3, #1]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d126      	bne.n	80089fa <PCD_EP_ISR_Handler+0x5f2>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	4413      	add	r3, r2
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
 80089c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	00da      	lsls	r2, r3, #3
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	4413      	add	r3, r2
 80089ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089d2:	623b      	str	r3, [r7, #32]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089de:	b29a      	uxth	r2, r3
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	801a      	strh	r2, [r3, #0]
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	801a      	strh	r2, [r3, #0]
 80089f8:	e061      	b.n	8008abe <PCD_EP_ISR_Handler+0x6b6>
 80089fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089fc:	785b      	ldrb	r3, [r3, #1]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d15d      	bne.n	8008abe <PCD_EP_ISR_Handler+0x6b6>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	461a      	mov	r2, r3
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	4413      	add	r3, r2
 8008a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	00da      	lsls	r2, r3, #3
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	4413      	add	r3, r2
 8008a24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	801a      	strh	r2, [r3, #0]
 8008a30:	e045      	b.n	8008abe <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d126      	bne.n	8008a8e <PCD_EP_ISR_Handler+0x686>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	637b      	str	r3, [r7, #52]	; 0x34
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	461a      	mov	r2, r3
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	4413      	add	r3, r2
 8008a56:	637b      	str	r3, [r7, #52]	; 0x34
 8008a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	00da      	lsls	r2, r3, #3
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a60:	4413      	add	r3, r2
 8008a62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a66:	633b      	str	r3, [r7, #48]	; 0x30
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	801a      	strh	r2, [r3, #0]
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	e017      	b.n	8008abe <PCD_EP_ISR_Handler+0x6b6>
 8008a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a90:	785b      	ldrb	r3, [r3, #1]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d113      	bne.n	8008abe <PCD_EP_ISR_Handler+0x6b6>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa4:	4413      	add	r3, r2
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	00da      	lsls	r2, r3, #3
 8008aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	2200      	movs	r2, #0
 8008abc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f00a fc32 	bl	801332e <HAL_PCD_DataInStageCallback>
 8008aca:	e051      	b.n	8008b70 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008acc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d144      	bne.n	8008b62 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	4413      	add	r3, r2
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6812      	ldr	r2, [r2, #0]
 8008af0:	4413      	add	r3, r2
 8008af2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008afc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b02:	699a      	ldr	r2, [r3, #24]
 8008b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d907      	bls.n	8008b1c <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8008b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b0e:	699a      	ldr	r2, [r3, #24]
 8008b10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008b14:	1ad2      	subs	r2, r2, r3
 8008b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b18:	619a      	str	r2, [r3, #24]
 8008b1a:	e002      	b.n	8008b22 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8008b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b1e:	2200      	movs	r2, #0
 8008b20:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d106      	bne.n	8008b38 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f00a fbfc 	bl	801332e <HAL_PCD_DataInStageCallback>
 8008b36:	e01b      	b.n	8008b70 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b3a:	695a      	ldr	r2, [r3, #20]
 8008b3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008b40:	441a      	add	r2, r3
 8008b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b44:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b48:	69da      	ldr	r2, [r3, #28]
 8008b4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008b4e:	441a      	add	r2, r3
 8008b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b52:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f005 f91d 	bl	800dd9a <USB_EPStartXfer>
 8008b60:	e006      	b.n	8008b70 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008b62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b66:	461a      	mov	r2, r3
 8008b68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f917 	bl	8008d9e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	b21b      	sxth	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f6ff ac48 	blt.w	8008412 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3758      	adds	r7, #88	; 0x58
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	4613      	mov	r3, r2
 8008b98:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008b9a:	88fb      	ldrh	r3, [r7, #6]
 8008b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d07c      	beq.n	8008c9e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	00db      	lsls	r3, r3, #3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	6812      	ldr	r2, [r2, #0]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bc8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	8b7b      	ldrh	r3, [r7, #26]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d306      	bcc.n	8008be2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	699a      	ldr	r2, [r3, #24]
 8008bd8:	8b7b      	ldrh	r3, [r7, #26]
 8008bda:	1ad2      	subs	r2, r2, r3
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	619a      	str	r2, [r3, #24]
 8008be0:	e002      	b.n	8008be8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2200      	movs	r2, #0
 8008be6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d123      	bne.n	8008c38 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0a:	833b      	strh	r3, [r7, #24]
 8008c0c:	8b3b      	ldrh	r3, [r7, #24]
 8008c0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c12:	833b      	strh	r3, [r7, #24]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	441a      	add	r2, r3
 8008c22:	8b3b      	ldrh	r3, [r7, #24]
 8008c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01f      	beq.n	8008c82 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5c:	82fb      	strh	r3, [r7, #22]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	441a      	add	r2, r3
 8008c6c:	8afb      	ldrh	r3, [r7, #22]
 8008c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008c82:	8b7b      	ldrh	r3, [r7, #26]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 8085 	beq.w	8008d94 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6959      	ldr	r1, [r3, #20]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	891a      	ldrh	r2, [r3, #8]
 8008c96:	8b7b      	ldrh	r3, [r7, #26]
 8008c98:	f006 fdac 	bl	800f7f4 <USB_ReadPMA>
 8008c9c:	e07a      	b.n	8008d94 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	6812      	ldr	r2, [r2, #0]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	8b7b      	ldrh	r3, [r7, #26]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d306      	bcc.n	8008cdc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	699a      	ldr	r2, [r3, #24]
 8008cd2:	8b7b      	ldrh	r3, [r7, #26]
 8008cd4:	1ad2      	subs	r2, r2, r3
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	619a      	str	r2, [r3, #24]
 8008cda:	e002      	b.n	8008ce2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d123      	bne.n	8008d32 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d04:	83fb      	strh	r3, [r7, #30]
 8008d06:	8bfb      	ldrh	r3, [r7, #30]
 8008d08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d0c:	83fb      	strh	r3, [r7, #30]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	441a      	add	r2, r3
 8008d1c:	8bfb      	ldrh	r3, [r7, #30]
 8008d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d11f      	bne.n	8008d7c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d56:	83bb      	strh	r3, [r7, #28]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	441a      	add	r2, r3
 8008d66:	8bbb      	ldrh	r3, [r7, #28]
 8008d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008d7c:	8b7b      	ldrh	r3, [r7, #26]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d008      	beq.n	8008d94 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	6959      	ldr	r1, [r3, #20]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	895a      	ldrh	r2, [r3, #10]
 8008d8e:	8b7b      	ldrh	r3, [r7, #26]
 8008d90:	f006 fd30 	bl	800f7f4 <USB_ReadPMA>
    }
  }

  return count;
 8008d94:	8b7b      	ldrh	r3, [r7, #26]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3720      	adds	r7, #32
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b0a4      	sub	sp, #144	; 0x90
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	4613      	mov	r3, r2
 8008daa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008dac:	88fb      	ldrh	r3, [r7, #6]
 8008dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 81db 	beq.w	800916e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	4413      	add	r3, r2
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	6812      	ldr	r2, [r2, #0]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ddc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d907      	bls.n	8008dfc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	699a      	ldr	r2, [r3, #24]
 8008df0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008df4:	1ad2      	subs	r2, r2, r3
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	619a      	str	r2, [r3, #24]
 8008dfa:	e002      	b.n	8008e02 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f040 80b9 	bne.w	8008f7e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	785b      	ldrb	r3, [r3, #1]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d126      	bne.n	8008e62 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	4413      	add	r3, r2
 8008e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	00da      	lsls	r2, r3, #3
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	4413      	add	r3, r2
 8008e36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4a:	801a      	strh	r2, [r3, #0]
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	801a      	strh	r2, [r3, #0]
 8008e60:	e01a      	b.n	8008e98 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	785b      	ldrb	r3, [r3, #1]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d116      	bne.n	8008e98 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7e:	4413      	add	r3, r2
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	00da      	lsls	r2, r3, #3
 8008e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e90:	633b      	str	r3, [r7, #48]	; 0x30
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	2200      	movs	r2, #0
 8008e96:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d126      	bne.n	8008ef4 <HAL_PCD_EP_DB_Transmit+0x156>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	4413      	add	r3, r2
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	00da      	lsls	r2, r3, #3
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ecc:	61bb      	str	r3, [r7, #24]
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	e017      	b.n	8008f24 <HAL_PCD_EP_DB_Transmit+0x186>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d113      	bne.n	8008f24 <HAL_PCD_EP_DB_Transmit+0x186>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	4413      	add	r3, r2
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	00da      	lsls	r2, r3, #3
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	4413      	add	r3, r2
 8008f18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f1c:	623b      	str	r3, [r7, #32]
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	2200      	movs	r2, #0
 8008f22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f00a f9ff 	bl	801332e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008f30:	88fb      	ldrh	r3, [r7, #6]
 8008f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 82fa 	beq.w	8009530 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	461a      	mov	r2, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f56:	82fb      	strh	r3, [r7, #22]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	441a      	add	r2, r3
 8008f66:	8afb      	ldrh	r3, [r7, #22]
 8008f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	8013      	strh	r3, [r2, #0]
 8008f7c:	e2d8      	b.n	8009530 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d021      	beq.n	8008fcc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	441a      	add	r2, r3
 8008fb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	f040 82ac 	bne.w	8009530 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	695a      	ldr	r2, [r3, #20]
 8008fdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008fe0:	441a      	add	r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	69da      	ldr	r2, [r3, #28]
 8008fea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008fee:	441a      	add	r2, r3
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	6a1a      	ldr	r2, [r3, #32]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d30b      	bcc.n	8009018 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	6a1a      	ldr	r2, [r3, #32]
 800900c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009010:	1ad2      	subs	r2, r2, r3
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	621a      	str	r2, [r3, #32]
 8009016:	e017      	b.n	8009048 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d108      	bne.n	8009032 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8009020:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009030:	e00a      	b.n	8009048 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2200      	movs	r2, #0
 8009046:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d165      	bne.n	800911c <HAL_PCD_EP_DB_Transmit+0x37e>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800905e:	b29b      	uxth	r3, r3
 8009060:	461a      	mov	r2, r3
 8009062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009064:	4413      	add	r3, r2
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	00da      	lsls	r2, r3, #3
 800906e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009070:	4413      	add	r3, r2
 8009072:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009076:	63bb      	str	r3, [r7, #56]	; 0x38
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009082:	b29a      	uxth	r2, r3
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	801a      	strh	r2, [r3, #0]
 8009088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800908c:	2b3e      	cmp	r3, #62	; 0x3e
 800908e:	d91d      	bls.n	80090cc <HAL_PCD_EP_DB_Transmit+0x32e>
 8009090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	64bb      	str	r3, [r7, #72]	; 0x48
 8009098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <HAL_PCD_EP_DB_Transmit+0x30c>
 80090a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a6:	3b01      	subs	r3, #1
 80090a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	029b      	lsls	r3, r3, #10
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	4313      	orrs	r3, r2
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	801a      	strh	r2, [r3, #0]
 80090ca:	e044      	b.n	8009156 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80090cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10a      	bne.n	80090ea <HAL_PCD_EP_DB_Transmit+0x34c>
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	b29b      	uxth	r3, r3
 80090da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	801a      	strh	r2, [r3, #0]
 80090e8:	e035      	b.n	8009156 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80090ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <HAL_PCD_EP_DB_Transmit+0x366>
 80090fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009100:	3301      	adds	r3, #1
 8009102:	64bb      	str	r3, [r7, #72]	; 0x48
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	b29a      	uxth	r2, r3
 800910a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910c:	b29b      	uxth	r3, r3
 800910e:	029b      	lsls	r3, r3, #10
 8009110:	b29b      	uxth	r3, r3
 8009112:	4313      	orrs	r3, r2
 8009114:	b29a      	uxth	r2, r3
 8009116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009118:	801a      	strh	r2, [r3, #0]
 800911a:	e01c      	b.n	8009156 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	785b      	ldrb	r3, [r3, #1]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d118      	bne.n	8009156 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	647b      	str	r3, [r7, #68]	; 0x44
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009132:	b29b      	uxth	r3, r3
 8009134:	461a      	mov	r2, r3
 8009136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009138:	4413      	add	r3, r2
 800913a:	647b      	str	r3, [r7, #68]	; 0x44
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	00da      	lsls	r2, r3, #3
 8009142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009144:	4413      	add	r3, r2
 8009146:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800914a:	643b      	str	r3, [r7, #64]	; 0x40
 800914c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009150:	b29a      	uxth	r2, r3
 8009152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009154:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6959      	ldr	r1, [r3, #20]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	891a      	ldrh	r2, [r3, #8]
 8009162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009166:	b29b      	uxth	r3, r3
 8009168:	f006 fb02 	bl	800f770 <USB_WritePMA>
 800916c:	e1e0      	b.n	8009530 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009176:	b29b      	uxth	r3, r3
 8009178:	461a      	mov	r2, r3
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	4413      	add	r3, r2
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	4413      	add	r3, r2
 8009188:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009192:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800919e:	429a      	cmp	r2, r3
 80091a0:	d307      	bcc.n	80091b2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80091aa:	1ad2      	subs	r2, r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	619a      	str	r2, [r3, #24]
 80091b0:	e002      	b.n	80091b8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2200      	movs	r2, #0
 80091b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f040 80c0 	bne.w	8009342 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d126      	bne.n	8009218 <HAL_PCD_EP_DB_Transmit+0x47a>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d8:	b29b      	uxth	r3, r3
 80091da:	461a      	mov	r2, r3
 80091dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091de:	4413      	add	r3, r2
 80091e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	00da      	lsls	r2, r3, #3
 80091e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091ea:	4413      	add	r3, r2
 80091ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80091f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009200:	801a      	strh	r2, [r3, #0]
 8009202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	b29b      	uxth	r3, r3
 8009208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800920c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009210:	b29a      	uxth	r2, r3
 8009212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009214:	801a      	strh	r2, [r3, #0]
 8009216:	e01a      	b.n	800924e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	785b      	ldrb	r3, [r3, #1]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d116      	bne.n	800924e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	667b      	str	r3, [r7, #100]	; 0x64
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800922e:	b29b      	uxth	r3, r3
 8009230:	461a      	mov	r2, r3
 8009232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009234:	4413      	add	r3, r2
 8009236:	667b      	str	r3, [r7, #100]	; 0x64
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	00da      	lsls	r2, r3, #3
 800923e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009240:	4413      	add	r3, r2
 8009242:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009246:	663b      	str	r3, [r7, #96]	; 0x60
 8009248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800924a:	2200      	movs	r2, #0
 800924c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	677b      	str	r3, [r7, #116]	; 0x74
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	785b      	ldrb	r3, [r3, #1]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d12b      	bne.n	80092b4 <HAL_PCD_EP_DB_Transmit+0x516>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800926a:	b29b      	uxth	r3, r3
 800926c:	461a      	mov	r2, r3
 800926e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009270:	4413      	add	r3, r2
 8009272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	00da      	lsls	r2, r3, #3
 800927a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927c:	4413      	add	r3, r2
 800927e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	b29b      	uxth	r3, r3
 800928e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009292:	b29a      	uxth	r2, r3
 8009294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009298:	801a      	strh	r2, [r3, #0]
 800929a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092b0:	801a      	strh	r2, [r3, #0]
 80092b2:	e017      	b.n	80092e4 <HAL_PCD_EP_DB_Transmit+0x546>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	785b      	ldrb	r3, [r3, #1]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d113      	bne.n	80092e4 <HAL_PCD_EP_DB_Transmit+0x546>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	461a      	mov	r2, r3
 80092c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092ca:	4413      	add	r3, r2
 80092cc:	677b      	str	r3, [r7, #116]	; 0x74
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	00da      	lsls	r2, r3, #3
 80092d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092d6:	4413      	add	r3, r2
 80092d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092dc:	673b      	str	r3, [r7, #112]	; 0x70
 80092de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092e0:	2200      	movs	r2, #0
 80092e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	4619      	mov	r1, r3
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f00a f81f 	bl	801332e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80092f0:	88fb      	ldrh	r3, [r7, #6]
 80092f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 811a 	bne.w	8009530 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29b      	uxth	r3, r3
 800930e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009316:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	441a      	add	r2, r3
 8009328:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800932c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800933c:	b29b      	uxth	r3, r3
 800933e:	8013      	strh	r3, [r2, #0]
 8009340:	e0f6      	b.n	8009530 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d121      	bne.n	8009390 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	b29b      	uxth	r3, r3
 800935e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009366:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	441a      	add	r2, r3
 8009378:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800937c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938c:	b29b      	uxth	r3, r3
 800938e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009396:	2b01      	cmp	r3, #1
 8009398:	f040 80ca 	bne.w	8009530 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	695a      	ldr	r2, [r3, #20]
 80093a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80093a4:	441a      	add	r2, r3
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	69da      	ldr	r2, [r3, #28]
 80093ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80093b2:	441a      	add	r2, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	6a1a      	ldr	r2, [r3, #32]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d30b      	bcc.n	80093dc <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	6a1a      	ldr	r2, [r3, #32]
 80093d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093d4:	1ad2      	subs	r2, r2, r3
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	621a      	str	r2, [r3, #32]
 80093da:	e017      	b.n	800940c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d108      	bne.n	80093f6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80093e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80093e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80093f4:	e00a      	b.n	800940c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2200      	movs	r2, #0
 8009402:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	657b      	str	r3, [r7, #84]	; 0x54
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	785b      	ldrb	r3, [r3, #1]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d165      	bne.n	80094e6 <HAL_PCD_EP_DB_Transmit+0x748>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009428:	b29b      	uxth	r3, r3
 800942a:	461a      	mov	r2, r3
 800942c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800942e:	4413      	add	r3, r2
 8009430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	00da      	lsls	r2, r3, #3
 8009438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800943a:	4413      	add	r3, r2
 800943c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009440:	65bb      	str	r3, [r7, #88]	; 0x58
 8009442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800944c:	b29a      	uxth	r2, r3
 800944e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009456:	2b3e      	cmp	r3, #62	; 0x3e
 8009458:	d91d      	bls.n	8009496 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800945a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800945e:	095b      	lsrs	r3, r3, #5
 8009460:	66bb      	str	r3, [r7, #104]	; 0x68
 8009462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009466:	f003 031f 	and.w	r3, r3, #31
 800946a:	2b00      	cmp	r3, #0
 800946c:	d102      	bne.n	8009474 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800946e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009470:	3b01      	subs	r3, #1
 8009472:	66bb      	str	r3, [r7, #104]	; 0x68
 8009474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	b29a      	uxth	r2, r3
 800947a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800947c:	b29b      	uxth	r3, r3
 800947e:	029b      	lsls	r3, r3, #10
 8009480:	b29b      	uxth	r3, r3
 8009482:	4313      	orrs	r3, r2
 8009484:	b29b      	uxth	r3, r3
 8009486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800948a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800948e:	b29a      	uxth	r2, r3
 8009490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009492:	801a      	strh	r2, [r3, #0]
 8009494:	e041      	b.n	800951a <HAL_PCD_EP_DB_Transmit+0x77c>
 8009496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <HAL_PCD_EP_DB_Transmit+0x716>
 800949e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094b0:	801a      	strh	r2, [r3, #0]
 80094b2:	e032      	b.n	800951a <HAL_PCD_EP_DB_Transmit+0x77c>
 80094b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094b8:	085b      	lsrs	r3, r3, #1
 80094ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80094bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <HAL_PCD_EP_DB_Transmit+0x730>
 80094c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094ca:	3301      	adds	r3, #1
 80094cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80094ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	029b      	lsls	r3, r3, #10
 80094da:	b29b      	uxth	r3, r3
 80094dc:	4313      	orrs	r3, r2
 80094de:	b29a      	uxth	r2, r3
 80094e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094e2:	801a      	strh	r2, [r3, #0]
 80094e4:	e019      	b.n	800951a <HAL_PCD_EP_DB_Transmit+0x77c>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	785b      	ldrb	r3, [r3, #1]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d115      	bne.n	800951a <HAL_PCD_EP_DB_Transmit+0x77c>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	461a      	mov	r2, r3
 80094fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094fc:	4413      	add	r3, r2
 80094fe:	657b      	str	r3, [r7, #84]	; 0x54
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	00da      	lsls	r2, r3, #3
 8009506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009508:	4413      	add	r3, r2
 800950a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800950e:	653b      	str	r3, [r7, #80]	; 0x50
 8009510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009514:	b29a      	uxth	r2, r3
 8009516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009518:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	6959      	ldr	r1, [r3, #20]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	895a      	ldrh	r2, [r3, #10]
 8009526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800952a:	b29b      	uxth	r3, r3
 800952c:	f006 f920 	bl	800f770 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	b29b      	uxth	r3, r3
 8009542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800954a:	82bb      	strh	r3, [r7, #20]
 800954c:	8abb      	ldrh	r3, [r7, #20]
 800954e:	f083 0310 	eor.w	r3, r3, #16
 8009552:	82bb      	strh	r3, [r7, #20]
 8009554:	8abb      	ldrh	r3, [r7, #20]
 8009556:	f083 0320 	eor.w	r3, r3, #32
 800955a:	82bb      	strh	r3, [r7, #20]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	441a      	add	r2, r3
 800956a:	8abb      	ldrh	r3, [r7, #20]
 800956c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800957c:	b29b      	uxth	r3, r3
 800957e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3790      	adds	r7, #144	; 0x90
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800958a:	b480      	push	{r7}
 800958c:	b087      	sub	sp, #28
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	607b      	str	r3, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	817b      	strh	r3, [r7, #10]
 8009598:	4613      	mov	r3, r2
 800959a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800959c:	897b      	ldrh	r3, [r7, #10]
 800959e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00b      	beq.n	80095c0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095a8:	897b      	ldrh	r3, [r7, #10]
 80095aa:	f003 0207 	and.w	r2, r3, #7
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	3310      	adds	r3, #16
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4413      	add	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	e009      	b.n	80095d4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80095c0:	897a      	ldrh	r2, [r7, #10]
 80095c2:	4613      	mov	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	4413      	add	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80095d4:	893b      	ldrh	r3, [r7, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d107      	bne.n	80095ea <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2200      	movs	r2, #0
 80095de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	80da      	strh	r2, [r3, #6]
 80095e8:	e00b      	b.n	8009602 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2201      	movs	r2, #1
 80095ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	0c1b      	lsrs	r3, r3, #16
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	371c      	adds	r7, #28
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009634:	b29b      	uxth	r3, r3
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009648:	b29b      	uxth	r3, r3
 800964a:	f043 0302 	orr.w	r3, r3, #2
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d141      	bne.n	80096f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009672:	4b4b      	ldr	r3, [pc, #300]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800967a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800967e:	d131      	bne.n	80096e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009680:	4b47      	ldr	r3, [pc, #284]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009686:	4a46      	ldr	r2, [pc, #280]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800968c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009690:	4b43      	ldr	r3, [pc, #268]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009698:	4a41      	ldr	r2, [pc, #260]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800969a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800969e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80096a0:	4b40      	ldr	r3, [pc, #256]	; (80097a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2232      	movs	r2, #50	; 0x32
 80096a6:	fb02 f303 	mul.w	r3, r2, r3
 80096aa:	4a3f      	ldr	r2, [pc, #252]	; (80097a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80096ac:	fba2 2303 	umull	r2, r3, r2, r3
 80096b0:	0c9b      	lsrs	r3, r3, #18
 80096b2:	3301      	adds	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80096b6:	e002      	b.n	80096be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80096be:	4b38      	ldr	r3, [pc, #224]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096ca:	d102      	bne.n	80096d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1f2      	bne.n	80096b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80096d2:	4b33      	ldr	r3, [pc, #204]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096de:	d158      	bne.n	8009792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e057      	b.n	8009794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80096e4:	4b2e      	ldr	r3, [pc, #184]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80096e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ea:	4a2d      	ldr	r2, [pc, #180]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80096ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80096f4:	e04d      	b.n	8009792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096fc:	d141      	bne.n	8009782 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80096fe:	4b28      	ldr	r3, [pc, #160]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800970a:	d131      	bne.n	8009770 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800970c:	4b24      	ldr	r3, [pc, #144]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800970e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009712:	4a23      	ldr	r2, [pc, #140]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800971c:	4b20      	ldr	r3, [pc, #128]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009724:	4a1e      	ldr	r2, [pc, #120]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800972a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800972c:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2232      	movs	r2, #50	; 0x32
 8009732:	fb02 f303 	mul.w	r3, r2, r3
 8009736:	4a1c      	ldr	r2, [pc, #112]	; (80097a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009738:	fba2 2303 	umull	r2, r3, r2, r3
 800973c:	0c9b      	lsrs	r3, r3, #18
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009742:	e002      	b.n	800974a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3b01      	subs	r3, #1
 8009748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800974a:	4b15      	ldr	r3, [pc, #84]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009756:	d102      	bne.n	800975e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1f2      	bne.n	8009744 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800975e:	4b10      	ldr	r3, [pc, #64]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800976a:	d112      	bne.n	8009792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800976c:	2303      	movs	r3, #3
 800976e:	e011      	b.n	8009794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009770:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009776:	4a0a      	ldr	r2, [pc, #40]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800977c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009780:	e007      	b.n	8009792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009782:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800978a:	4a05      	ldr	r2, [pc, #20]	; (80097a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800978c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009790:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	40007000 	.word	0x40007000
 80097a4:	20000160 	.word	0x20000160
 80097a8:	431bde83 	.word	0x431bde83

080097ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80097b0:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	4a04      	ldr	r2, [pc, #16]	; (80097c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80097b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097ba:	6093      	str	r3, [r2, #8]
}
 80097bc:	bf00      	nop
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	40007000 	.word	0x40007000

080097cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e2fe      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d075      	beq.n	80098d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097ea:	4b97      	ldr	r3, [pc, #604]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f003 030c 	and.w	r3, r3, #12
 80097f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80097f4:	4b94      	ldr	r3, [pc, #592]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f003 0303 	and.w	r3, r3, #3
 80097fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	2b0c      	cmp	r3, #12
 8009802:	d102      	bne.n	800980a <HAL_RCC_OscConfig+0x3e>
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2b03      	cmp	r3, #3
 8009808:	d002      	beq.n	8009810 <HAL_RCC_OscConfig+0x44>
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	2b08      	cmp	r3, #8
 800980e:	d10b      	bne.n	8009828 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009810:	4b8d      	ldr	r3, [pc, #564]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d05b      	beq.n	80098d4 <HAL_RCC_OscConfig+0x108>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d157      	bne.n	80098d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e2d9      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009830:	d106      	bne.n	8009840 <HAL_RCC_OscConfig+0x74>
 8009832:	4b85      	ldr	r3, [pc, #532]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a84      	ldr	r2, [pc, #528]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	e01d      	b.n	800987c <HAL_RCC_OscConfig+0xb0>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009848:	d10c      	bne.n	8009864 <HAL_RCC_OscConfig+0x98>
 800984a:	4b7f      	ldr	r3, [pc, #508]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a7e      	ldr	r2, [pc, #504]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	4b7c      	ldr	r3, [pc, #496]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a7b      	ldr	r2, [pc, #492]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 800985c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	e00b      	b.n	800987c <HAL_RCC_OscConfig+0xb0>
 8009864:	4b78      	ldr	r3, [pc, #480]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a77      	ldr	r2, [pc, #476]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 800986a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	4b75      	ldr	r3, [pc, #468]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a74      	ldr	r2, [pc, #464]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800987a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d013      	beq.n	80098ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009884:	f7fb fa0a 	bl	8004c9c <HAL_GetTick>
 8009888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800988a:	e008      	b.n	800989e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800988c:	f7fb fa06 	bl	8004c9c <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b64      	cmp	r3, #100	; 0x64
 8009898:	d901      	bls.n	800989e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e29e      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800989e:	4b6a      	ldr	r3, [pc, #424]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d0f0      	beq.n	800988c <HAL_RCC_OscConfig+0xc0>
 80098aa:	e014      	b.n	80098d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ac:	f7fb f9f6 	bl	8004c9c <HAL_GetTick>
 80098b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098b2:	e008      	b.n	80098c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098b4:	f7fb f9f2 	bl	8004c9c <HAL_GetTick>
 80098b8:	4602      	mov	r2, r0
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	2b64      	cmp	r3, #100	; 0x64
 80098c0:	d901      	bls.n	80098c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e28a      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098c6:	4b60      	ldr	r3, [pc, #384]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1f0      	bne.n	80098b4 <HAL_RCC_OscConfig+0xe8>
 80098d2:	e000      	b.n	80098d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0302 	and.w	r3, r3, #2
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d075      	beq.n	80099ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098e2:	4b59      	ldr	r3, [pc, #356]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f003 030c 	and.w	r3, r3, #12
 80098ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098ec:	4b56      	ldr	r3, [pc, #344]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f003 0303 	and.w	r3, r3, #3
 80098f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2b0c      	cmp	r3, #12
 80098fa:	d102      	bne.n	8009902 <HAL_RCC_OscConfig+0x136>
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d002      	beq.n	8009908 <HAL_RCC_OscConfig+0x13c>
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	2b04      	cmp	r3, #4
 8009906:	d11f      	bne.n	8009948 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009908:	4b4f      	ldr	r3, [pc, #316]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009910:	2b00      	cmp	r3, #0
 8009912:	d005      	beq.n	8009920 <HAL_RCC_OscConfig+0x154>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e25d      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009920:	4b49      	ldr	r3, [pc, #292]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	061b      	lsls	r3, r3, #24
 800992e:	4946      	ldr	r1, [pc, #280]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009930:	4313      	orrs	r3, r2
 8009932:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009934:	4b45      	ldr	r3, [pc, #276]	; (8009a4c <HAL_RCC_OscConfig+0x280>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	f7fb f963 	bl	8004c04 <HAL_InitTick>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d043      	beq.n	80099cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e249      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d023      	beq.n	8009998 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009950:	4b3d      	ldr	r3, [pc, #244]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a3c      	ldr	r2, [pc, #240]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800995a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995c:	f7fb f99e 	bl	8004c9c <HAL_GetTick>
 8009960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009964:	f7fb f99a 	bl	8004c9c <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e232      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009976:	4b34      	ldr	r3, [pc, #208]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0f0      	beq.n	8009964 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009982:	4b31      	ldr	r3, [pc, #196]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	061b      	lsls	r3, r3, #24
 8009990:	492d      	ldr	r1, [pc, #180]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009992:	4313      	orrs	r3, r2
 8009994:	604b      	str	r3, [r1, #4]
 8009996:	e01a      	b.n	80099ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009998:	4b2b      	ldr	r3, [pc, #172]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a2a      	ldr	r2, [pc, #168]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 800999e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a4:	f7fb f97a 	bl	8004c9c <HAL_GetTick>
 80099a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099aa:	e008      	b.n	80099be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ac:	f7fb f976 	bl	8004c9c <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d901      	bls.n	80099be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e20e      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099be:	4b22      	ldr	r3, [pc, #136]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1f0      	bne.n	80099ac <HAL_RCC_OscConfig+0x1e0>
 80099ca:	e000      	b.n	80099ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0308 	and.w	r3, r3, #8
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d041      	beq.n	8009a5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d01c      	beq.n	8009a1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099e2:	4b19      	ldr	r3, [pc, #100]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 80099e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099e8:	4a17      	ldr	r2, [pc, #92]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 80099ea:	f043 0301 	orr.w	r3, r3, #1
 80099ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099f2:	f7fb f953 	bl	8004c9c <HAL_GetTick>
 80099f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80099f8:	e008      	b.n	8009a0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099fa:	f7fb f94f 	bl	8004c9c <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d901      	bls.n	8009a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e1e7      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a0c:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0ef      	beq.n	80099fa <HAL_RCC_OscConfig+0x22e>
 8009a1a:	e020      	b.n	8009a5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a22:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <HAL_RCC_OscConfig+0x27c>)
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2c:	f7fb f936 	bl	8004c9c <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a32:	e00d      	b.n	8009a50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a34:	f7fb f932 	bl	8004c9c <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d906      	bls.n	8009a50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e1ca      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
 8009a46:	bf00      	nop
 8009a48:	40021000 	.word	0x40021000
 8009a4c:	20000174 	.word	0x20000174
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a50:	4b8c      	ldr	r3, [pc, #560]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a56:	f003 0302 	and.w	r3, r3, #2
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1ea      	bne.n	8009a34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0304 	and.w	r3, r3, #4
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 80a6 	beq.w	8009bb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009a70:	4b84      	ldr	r3, [pc, #528]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <HAL_RCC_OscConfig+0x2b4>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <HAL_RCC_OscConfig+0x2b6>
 8009a80:	2300      	movs	r3, #0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00d      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a86:	4b7f      	ldr	r3, [pc, #508]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8a:	4a7e      	ldr	r2, [pc, #504]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a90:	6593      	str	r3, [r2, #88]	; 0x58
 8009a92:	4b7c      	ldr	r3, [pc, #496]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aa2:	4b79      	ldr	r3, [pc, #484]	; (8009c88 <HAL_RCC_OscConfig+0x4bc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d118      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009aae:	4b76      	ldr	r3, [pc, #472]	; (8009c88 <HAL_RCC_OscConfig+0x4bc>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a75      	ldr	r2, [pc, #468]	; (8009c88 <HAL_RCC_OscConfig+0x4bc>)
 8009ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009aba:	f7fb f8ef 	bl	8004c9c <HAL_GetTick>
 8009abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ac0:	e008      	b.n	8009ad4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ac2:	f7fb f8eb 	bl	8004c9c <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d901      	bls.n	8009ad4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e183      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ad4:	4b6c      	ldr	r3, [pc, #432]	; (8009c88 <HAL_RCC_OscConfig+0x4bc>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0f0      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d108      	bne.n	8009afa <HAL_RCC_OscConfig+0x32e>
 8009ae8:	4b66      	ldr	r3, [pc, #408]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aee:	4a65      	ldr	r2, [pc, #404]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009af0:	f043 0301 	orr.w	r3, r3, #1
 8009af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009af8:	e024      	b.n	8009b44 <HAL_RCC_OscConfig+0x378>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	2b05      	cmp	r3, #5
 8009b00:	d110      	bne.n	8009b24 <HAL_RCC_OscConfig+0x358>
 8009b02:	4b60      	ldr	r3, [pc, #384]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b08:	4a5e      	ldr	r2, [pc, #376]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b0a:	f043 0304 	orr.w	r3, r3, #4
 8009b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b12:	4b5c      	ldr	r3, [pc, #368]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b18:	4a5a      	ldr	r2, [pc, #360]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b1a:	f043 0301 	orr.w	r3, r3, #1
 8009b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b22:	e00f      	b.n	8009b44 <HAL_RCC_OscConfig+0x378>
 8009b24:	4b57      	ldr	r3, [pc, #348]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b2a:	4a56      	ldr	r2, [pc, #344]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b2c:	f023 0301 	bic.w	r3, r3, #1
 8009b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b34:	4b53      	ldr	r3, [pc, #332]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b3a:	4a52      	ldr	r2, [pc, #328]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b3c:	f023 0304 	bic.w	r3, r3, #4
 8009b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d016      	beq.n	8009b7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b4c:	f7fb f8a6 	bl	8004c9c <HAL_GetTick>
 8009b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b52:	e00a      	b.n	8009b6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b54:	f7fb f8a2 	bl	8004c9c <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e138      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b6a:	4b46      	ldr	r3, [pc, #280]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b70:	f003 0302 	and.w	r3, r3, #2
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0ed      	beq.n	8009b54 <HAL_RCC_OscConfig+0x388>
 8009b78:	e015      	b.n	8009ba6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b7a:	f7fb f88f 	bl	8004c9c <HAL_GetTick>
 8009b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b80:	e00a      	b.n	8009b98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b82:	f7fb f88b 	bl	8004c9c <HAL_GetTick>
 8009b86:	4602      	mov	r2, r0
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d901      	bls.n	8009b98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e121      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b98:	4b3a      	ldr	r3, [pc, #232]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1ed      	bne.n	8009b82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ba6:	7ffb      	ldrb	r3, [r7, #31]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d105      	bne.n	8009bb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bac:	4b35      	ldr	r3, [pc, #212]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb0:	4a34      	ldr	r2, [pc, #208]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d03c      	beq.n	8009c3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01c      	beq.n	8009c06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009bcc:	4b2d      	ldr	r3, [pc, #180]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bd2:	4a2c      	ldr	r2, [pc, #176]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009bd4:	f043 0301 	orr.w	r3, r3, #1
 8009bd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bdc:	f7fb f85e 	bl	8004c9c <HAL_GetTick>
 8009be0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009be2:	e008      	b.n	8009bf6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009be4:	f7fb f85a 	bl	8004c9c <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d901      	bls.n	8009bf6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e0f2      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009bf6:	4b23      	ldr	r3, [pc, #140]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0ef      	beq.n	8009be4 <HAL_RCC_OscConfig+0x418>
 8009c04:	e01b      	b.n	8009c3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c06:	4b1f      	ldr	r3, [pc, #124]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c0c:	4a1d      	ldr	r2, [pc, #116]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009c0e:	f023 0301 	bic.w	r3, r3, #1
 8009c12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c16:	f7fb f841 	bl	8004c9c <HAL_GetTick>
 8009c1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c1c:	e008      	b.n	8009c30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c1e:	f7fb f83d 	bl	8004c9c <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d901      	bls.n	8009c30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e0d5      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c30:	4b14      	ldr	r3, [pc, #80]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1ef      	bne.n	8009c1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 80c9 	beq.w	8009dda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009c48:	4b0e      	ldr	r3, [pc, #56]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f003 030c 	and.w	r3, r3, #12
 8009c50:	2b0c      	cmp	r3, #12
 8009c52:	f000 8083 	beq.w	8009d5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d15e      	bne.n	8009d1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c5e:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a08      	ldr	r2, [pc, #32]	; (8009c84 <HAL_RCC_OscConfig+0x4b8>)
 8009c64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c6a:	f7fb f817 	bl	8004c9c <HAL_GetTick>
 8009c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c70:	e00c      	b.n	8009c8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c72:	f7fb f813 	bl	8004c9c <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d905      	bls.n	8009c8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e0ab      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
 8009c84:	40021000 	.word	0x40021000
 8009c88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c8c:	4b55      	ldr	r3, [pc, #340]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1ec      	bne.n	8009c72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c98:	4b52      	ldr	r3, [pc, #328]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009c9a:	68da      	ldr	r2, [r3, #12]
 8009c9c:	4b52      	ldr	r3, [pc, #328]	; (8009de8 <HAL_RCC_OscConfig+0x61c>)
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	6a11      	ldr	r1, [r2, #32]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ca8:	3a01      	subs	r2, #1
 8009caa:	0112      	lsls	r2, r2, #4
 8009cac:	4311      	orrs	r1, r2
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009cb2:	0212      	lsls	r2, r2, #8
 8009cb4:	4311      	orrs	r1, r2
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009cba:	0852      	lsrs	r2, r2, #1
 8009cbc:	3a01      	subs	r2, #1
 8009cbe:	0552      	lsls	r2, r2, #21
 8009cc0:	4311      	orrs	r1, r2
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009cc6:	0852      	lsrs	r2, r2, #1
 8009cc8:	3a01      	subs	r2, #1
 8009cca:	0652      	lsls	r2, r2, #25
 8009ccc:	4311      	orrs	r1, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009cd2:	06d2      	lsls	r2, r2, #27
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	4943      	ldr	r1, [pc, #268]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009cdc:	4b41      	ldr	r3, [pc, #260]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a40      	ldr	r2, [pc, #256]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ce6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009ce8:	4b3e      	ldr	r3, [pc, #248]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	4a3d      	ldr	r2, [pc, #244]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf4:	f7fa ffd2 	bl	8004c9c <HAL_GetTick>
 8009cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cfa:	e008      	b.n	8009d0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cfc:	f7fa ffce 	bl	8004c9c <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d901      	bls.n	8009d0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e066      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d0e:	4b35      	ldr	r3, [pc, #212]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0f0      	beq.n	8009cfc <HAL_RCC_OscConfig+0x530>
 8009d1a:	e05e      	b.n	8009dda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d1c:	4b31      	ldr	r3, [pc, #196]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a30      	ldr	r2, [pc, #192]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d28:	f7fa ffb8 	bl	8004c9c <HAL_GetTick>
 8009d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d2e:	e008      	b.n	8009d42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d30:	f7fa ffb4 	bl	8004c9c <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d901      	bls.n	8009d42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e04c      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d42:	4b28      	ldr	r3, [pc, #160]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1f0      	bne.n	8009d30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009d4e:	4b25      	ldr	r3, [pc, #148]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	4924      	ldr	r1, [pc, #144]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009d54:	4b25      	ldr	r3, [pc, #148]	; (8009dec <HAL_RCC_OscConfig+0x620>)
 8009d56:	4013      	ands	r3, r2
 8009d58:	60cb      	str	r3, [r1, #12]
 8009d5a:	e03e      	b.n	8009dda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d101      	bne.n	8009d68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e039      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009d68:	4b1e      	ldr	r3, [pc, #120]	; (8009de4 <HAL_RCC_OscConfig+0x618>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f003 0203 	and.w	r2, r3, #3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a1b      	ldr	r3, [r3, #32]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d12c      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	3b01      	subs	r3, #1
 8009d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d123      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d11b      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d113      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db8:	085b      	lsrs	r3, r3, #1
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d109      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dcc:	085b      	lsrs	r3, r3, #1
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d001      	beq.n	8009dda <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e000      	b.n	8009ddc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3720      	adds	r7, #32
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	40021000 	.word	0x40021000
 8009de8:	019f800c 	.word	0x019f800c
 8009dec:	feeefffc 	.word	0xfeeefffc

08009df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e11e      	b.n	800a046 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e08:	4b91      	ldr	r3, [pc, #580]	; (800a050 <HAL_RCC_ClockConfig+0x260>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 030f 	and.w	r3, r3, #15
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d910      	bls.n	8009e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e16:	4b8e      	ldr	r3, [pc, #568]	; (800a050 <HAL_RCC_ClockConfig+0x260>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f023 020f 	bic.w	r2, r3, #15
 8009e1e:	498c      	ldr	r1, [pc, #560]	; (800a050 <HAL_RCC_ClockConfig+0x260>)
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e26:	4b8a      	ldr	r3, [pc, #552]	; (800a050 <HAL_RCC_ClockConfig+0x260>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d001      	beq.n	8009e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e106      	b.n	800a046 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d073      	beq.n	8009f2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	d129      	bne.n	8009ea0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e4c:	4b81      	ldr	r3, [pc, #516]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e0f4      	b.n	800a046 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009e5c:	f000 f99e 	bl	800a19c <RCC_GetSysClockFreqFromPLLSource>
 8009e60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	4a7c      	ldr	r2, [pc, #496]	; (800a058 <HAL_RCC_ClockConfig+0x268>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d93f      	bls.n	8009eea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009e6a:	4b7a      	ldr	r3, [pc, #488]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d009      	beq.n	8009e8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d033      	beq.n	8009eea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d12f      	bne.n	8009eea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009e8a:	4b72      	ldr	r3, [pc, #456]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e92:	4a70      	ldr	r2, [pc, #448]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009e9a:	2380      	movs	r3, #128	; 0x80
 8009e9c:	617b      	str	r3, [r7, #20]
 8009e9e:	e024      	b.n	8009eea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d107      	bne.n	8009eb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ea8:	4b6a      	ldr	r3, [pc, #424]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d109      	bne.n	8009ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e0c6      	b.n	800a046 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009eb8:	4b66      	ldr	r3, [pc, #408]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e0be      	b.n	800a046 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009ec8:	f000 f8ce 	bl	800a068 <HAL_RCC_GetSysClockFreq>
 8009ecc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	4a61      	ldr	r2, [pc, #388]	; (800a058 <HAL_RCC_ClockConfig+0x268>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d909      	bls.n	8009eea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009ed6:	4b5f      	ldr	r3, [pc, #380]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ede:	4a5d      	ldr	r2, [pc, #372]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009ee6:	2380      	movs	r3, #128	; 0x80
 8009ee8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009eea:	4b5a      	ldr	r3, [pc, #360]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f023 0203 	bic.w	r2, r3, #3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	4957      	ldr	r1, [pc, #348]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009efc:	f7fa fece 	bl	8004c9c <HAL_GetTick>
 8009f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f02:	e00a      	b.n	8009f1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f04:	f7fa feca 	bl	8004c9c <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d901      	bls.n	8009f1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e095      	b.n	800a046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f1a:	4b4e      	ldr	r3, [pc, #312]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f003 020c 	and.w	r2, r3, #12
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d1eb      	bne.n	8009f04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0302 	and.w	r3, r3, #2
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d023      	beq.n	8009f80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d005      	beq.n	8009f50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f44:	4b43      	ldr	r3, [pc, #268]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	4a42      	ldr	r2, [pc, #264]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009f4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0308 	and.w	r3, r3, #8
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d007      	beq.n	8009f6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009f5c:	4b3d      	ldr	r3, [pc, #244]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f64:	4a3b      	ldr	r2, [pc, #236]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009f6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f6c:	4b39      	ldr	r3, [pc, #228]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	4936      	ldr	r1, [pc, #216]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	608b      	str	r3, [r1, #8]
 8009f7e:	e008      	b.n	8009f92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b80      	cmp	r3, #128	; 0x80
 8009f84:	d105      	bne.n	8009f92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009f86:	4b33      	ldr	r3, [pc, #204]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	4a32      	ldr	r2, [pc, #200]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f92:	4b2f      	ldr	r3, [pc, #188]	; (800a050 <HAL_RCC_ClockConfig+0x260>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d21d      	bcs.n	8009fdc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fa0:	4b2b      	ldr	r3, [pc, #172]	; (800a050 <HAL_RCC_ClockConfig+0x260>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f023 020f 	bic.w	r2, r3, #15
 8009fa8:	4929      	ldr	r1, [pc, #164]	; (800a050 <HAL_RCC_ClockConfig+0x260>)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009fb0:	f7fa fe74 	bl	8004c9c <HAL_GetTick>
 8009fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fb6:	e00a      	b.n	8009fce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fb8:	f7fa fe70 	bl	8004c9c <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d901      	bls.n	8009fce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e03b      	b.n	800a046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fce:	4b20      	ldr	r3, [pc, #128]	; (800a050 <HAL_RCC_ClockConfig+0x260>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 030f 	and.w	r3, r3, #15
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d1ed      	bne.n	8009fb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0304 	and.w	r3, r3, #4
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009fe8:	4b1a      	ldr	r3, [pc, #104]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	4917      	ldr	r1, [pc, #92]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0308 	and.w	r3, r3, #8
 800a002:	2b00      	cmp	r3, #0
 800a004:	d009      	beq.n	800a01a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a006:	4b13      	ldr	r3, [pc, #76]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	490f      	ldr	r1, [pc, #60]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 800a016:	4313      	orrs	r3, r2
 800a018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a01a:	f000 f825 	bl	800a068 <HAL_RCC_GetSysClockFreq>
 800a01e:	4602      	mov	r2, r0
 800a020:	4b0c      	ldr	r3, [pc, #48]	; (800a054 <HAL_RCC_ClockConfig+0x264>)
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	091b      	lsrs	r3, r3, #4
 800a026:	f003 030f 	and.w	r3, r3, #15
 800a02a:	490c      	ldr	r1, [pc, #48]	; (800a05c <HAL_RCC_ClockConfig+0x26c>)
 800a02c:	5ccb      	ldrb	r3, [r1, r3]
 800a02e:	f003 031f 	and.w	r3, r3, #31
 800a032:	fa22 f303 	lsr.w	r3, r2, r3
 800a036:	4a0a      	ldr	r2, [pc, #40]	; (800a060 <HAL_RCC_ClockConfig+0x270>)
 800a038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a03a:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <HAL_RCC_ClockConfig+0x274>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fa fde0 	bl	8004c04 <HAL_InitTick>
 800a044:	4603      	mov	r3, r0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	40022000 	.word	0x40022000
 800a054:	40021000 	.word	0x40021000
 800a058:	04c4b400 	.word	0x04c4b400
 800a05c:	0801785c 	.word	0x0801785c
 800a060:	20000160 	.word	0x20000160
 800a064:	20000174 	.word	0x20000174

0800a068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a06e:	4b2c      	ldr	r3, [pc, #176]	; (800a120 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f003 030c 	and.w	r3, r3, #12
 800a076:	2b04      	cmp	r3, #4
 800a078:	d102      	bne.n	800a080 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a07a:	4b2a      	ldr	r3, [pc, #168]	; (800a124 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a07c:	613b      	str	r3, [r7, #16]
 800a07e:	e047      	b.n	800a110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a080:	4b27      	ldr	r3, [pc, #156]	; (800a120 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f003 030c 	and.w	r3, r3, #12
 800a088:	2b08      	cmp	r3, #8
 800a08a:	d102      	bne.n	800a092 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a08c:	4b26      	ldr	r3, [pc, #152]	; (800a128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a08e:	613b      	str	r3, [r7, #16]
 800a090:	e03e      	b.n	800a110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a092:	4b23      	ldr	r3, [pc, #140]	; (800a120 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f003 030c 	and.w	r3, r3, #12
 800a09a:	2b0c      	cmp	r3, #12
 800a09c:	d136      	bne.n	800a10c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a09e:	4b20      	ldr	r3, [pc, #128]	; (800a120 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a0a8:	4b1d      	ldr	r3, [pc, #116]	; (800a120 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	091b      	lsrs	r3, r3, #4
 800a0ae:	f003 030f 	and.w	r3, r3, #15
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d10c      	bne.n	800a0d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a0bc:	4a1a      	ldr	r2, [pc, #104]	; (800a128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c4:	4a16      	ldr	r2, [pc, #88]	; (800a120 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0c6:	68d2      	ldr	r2, [r2, #12]
 800a0c8:	0a12      	lsrs	r2, r2, #8
 800a0ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a0ce:	fb02 f303 	mul.w	r3, r2, r3
 800a0d2:	617b      	str	r3, [r7, #20]
      break;
 800a0d4:	e00c      	b.n	800a0f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a0d6:	4a13      	ldr	r2, [pc, #76]	; (800a124 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0de:	4a10      	ldr	r2, [pc, #64]	; (800a120 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0e0:	68d2      	ldr	r2, [r2, #12]
 800a0e2:	0a12      	lsrs	r2, r2, #8
 800a0e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a0e8:	fb02 f303 	mul.w	r3, r2, r3
 800a0ec:	617b      	str	r3, [r7, #20]
      break;
 800a0ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a0f0:	4b0b      	ldr	r3, [pc, #44]	; (800a120 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	0e5b      	lsrs	r3, r3, #25
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	fbb2 f3f3 	udiv	r3, r2, r3
 800a108:	613b      	str	r3, [r7, #16]
 800a10a:	e001      	b.n	800a110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a10c:	2300      	movs	r3, #0
 800a10e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a110:	693b      	ldr	r3, [r7, #16]
}
 800a112:	4618      	mov	r0, r3
 800a114:	371c      	adds	r7, #28
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	40021000 	.word	0x40021000
 800a124:	00f42400 	.word	0x00f42400
 800a128:	007a1200 	.word	0x007a1200

0800a12c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a130:	4b03      	ldr	r3, [pc, #12]	; (800a140 <HAL_RCC_GetHCLKFreq+0x14>)
 800a132:	681b      	ldr	r3, [r3, #0]
}
 800a134:	4618      	mov	r0, r3
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	20000160 	.word	0x20000160

0800a144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a148:	f7ff fff0 	bl	800a12c <HAL_RCC_GetHCLKFreq>
 800a14c:	4602      	mov	r2, r0
 800a14e:	4b06      	ldr	r3, [pc, #24]	; (800a168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	0a1b      	lsrs	r3, r3, #8
 800a154:	f003 0307 	and.w	r3, r3, #7
 800a158:	4904      	ldr	r1, [pc, #16]	; (800a16c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a15a:	5ccb      	ldrb	r3, [r1, r3]
 800a15c:	f003 031f 	and.w	r3, r3, #31
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a164:	4618      	mov	r0, r3
 800a166:	bd80      	pop	{r7, pc}
 800a168:	40021000 	.word	0x40021000
 800a16c:	0801786c 	.word	0x0801786c

0800a170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a174:	f7ff ffda 	bl	800a12c <HAL_RCC_GetHCLKFreq>
 800a178:	4602      	mov	r2, r0
 800a17a:	4b06      	ldr	r3, [pc, #24]	; (800a194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	0adb      	lsrs	r3, r3, #11
 800a180:	f003 0307 	and.w	r3, r3, #7
 800a184:	4904      	ldr	r1, [pc, #16]	; (800a198 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a186:	5ccb      	ldrb	r3, [r1, r3]
 800a188:	f003 031f 	and.w	r3, r3, #31
 800a18c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a190:	4618      	mov	r0, r3
 800a192:	bd80      	pop	{r7, pc}
 800a194:	40021000 	.word	0x40021000
 800a198:	0801786c 	.word	0x0801786c

0800a19c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a1a2:	4b1e      	ldr	r3, [pc, #120]	; (800a21c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a1ac:	4b1b      	ldr	r3, [pc, #108]	; (800a21c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	091b      	lsrs	r3, r3, #4
 800a1b2:	f003 030f 	and.w	r3, r3, #15
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b03      	cmp	r3, #3
 800a1be:	d10c      	bne.n	800a1da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a1c0:	4a17      	ldr	r2, [pc, #92]	; (800a220 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c8:	4a14      	ldr	r2, [pc, #80]	; (800a21c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a1ca:	68d2      	ldr	r2, [r2, #12]
 800a1cc:	0a12      	lsrs	r2, r2, #8
 800a1ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a1d2:	fb02 f303 	mul.w	r3, r2, r3
 800a1d6:	617b      	str	r3, [r7, #20]
    break;
 800a1d8:	e00c      	b.n	800a1f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a1da:	4a12      	ldr	r2, [pc, #72]	; (800a224 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1e2:	4a0e      	ldr	r2, [pc, #56]	; (800a21c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a1e4:	68d2      	ldr	r2, [r2, #12]
 800a1e6:	0a12      	lsrs	r2, r2, #8
 800a1e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a1ec:	fb02 f303 	mul.w	r3, r2, r3
 800a1f0:	617b      	str	r3, [r7, #20]
    break;
 800a1f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	0e5b      	lsrs	r3, r3, #25
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	3301      	adds	r3, #1
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a20e:	687b      	ldr	r3, [r7, #4]
}
 800a210:	4618      	mov	r0, r3
 800a212:	371c      	adds	r7, #28
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	40021000 	.word	0x40021000
 800a220:	007a1200 	.word	0x007a1200
 800a224:	00f42400 	.word	0x00f42400

0800a228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a230:	2300      	movs	r3, #0
 800a232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a234:	2300      	movs	r3, #0
 800a236:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 8098 	beq.w	800a376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a246:	2300      	movs	r3, #0
 800a248:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a24a:	4b43      	ldr	r3, [pc, #268]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a24c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a24e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10d      	bne.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a256:	4b40      	ldr	r3, [pc, #256]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25a:	4a3f      	ldr	r2, [pc, #252]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a25c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a260:	6593      	str	r3, [r2, #88]	; 0x58
 800a262:	4b3d      	ldr	r3, [pc, #244]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a26a:	60bb      	str	r3, [r7, #8]
 800a26c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a26e:	2301      	movs	r3, #1
 800a270:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a272:	4b3a      	ldr	r3, [pc, #232]	; (800a35c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a39      	ldr	r2, [pc, #228]	; (800a35c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a27c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a27e:	f7fa fd0d 	bl	8004c9c <HAL_GetTick>
 800a282:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a284:	e009      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a286:	f7fa fd09 	bl	8004c9c <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	2b02      	cmp	r3, #2
 800a292:	d902      	bls.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	74fb      	strb	r3, [r7, #19]
        break;
 800a298:	e005      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a29a:	4b30      	ldr	r3, [pc, #192]	; (800a35c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0ef      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a2a6:	7cfb      	ldrb	r3, [r7, #19]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d159      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a2ac:	4b2a      	ldr	r3, [pc, #168]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d01e      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d019      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a2c8:	4b23      	ldr	r3, [pc, #140]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2d4:	4b20      	ldr	r3, [pc, #128]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2da:	4a1f      	ldr	r2, [pc, #124]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a2dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2e4:	4b1c      	ldr	r3, [pc, #112]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ea:	4a1b      	ldr	r2, [pc, #108]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a2ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a2f4:	4a18      	ldr	r2, [pc, #96]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	d016      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a306:	f7fa fcc9 	bl	8004c9c <HAL_GetTick>
 800a30a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a30c:	e00b      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a30e:	f7fa fcc5 	bl	8004c9c <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	f241 3288 	movw	r2, #5000	; 0x1388
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d902      	bls.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	74fb      	strb	r3, [r7, #19]
            break;
 800a324:	e006      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a326:	4b0c      	ldr	r3, [pc, #48]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	2b00      	cmp	r3, #0
 800a332:	d0ec      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a334:	7cfb      	ldrb	r3, [r7, #19]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10b      	bne.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a33a:	4b07      	ldr	r3, [pc, #28]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a348:	4903      	ldr	r1, [pc, #12]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a350:	e008      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a352:	7cfb      	ldrb	r3, [r7, #19]
 800a354:	74bb      	strb	r3, [r7, #18]
 800a356:	e005      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a358:	40021000 	.word	0x40021000
 800a35c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a360:	7cfb      	ldrb	r3, [r7, #19]
 800a362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a364:	7c7b      	ldrb	r3, [r7, #17]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d105      	bne.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a36a:	4ba6      	ldr	r3, [pc, #664]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a36e:	4aa5      	ldr	r2, [pc, #660]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a374:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a382:	4ba0      	ldr	r3, [pc, #640]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a388:	f023 0203 	bic.w	r2, r3, #3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	499c      	ldr	r1, [pc, #624]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a392:	4313      	orrs	r3, r2
 800a394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0302 	and.w	r3, r3, #2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00a      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a3a4:	4b97      	ldr	r3, [pc, #604]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3aa:	f023 020c 	bic.w	r2, r3, #12
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	4994      	ldr	r1, [pc, #592]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0304 	and.w	r3, r3, #4
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a3c6:	4b8f      	ldr	r3, [pc, #572]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	498b      	ldr	r1, [pc, #556]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0308 	and.w	r3, r3, #8
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00a      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a3e8:	4b86      	ldr	r3, [pc, #536]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	4983      	ldr	r1, [pc, #524]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a40a:	4b7e      	ldr	r3, [pc, #504]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a410:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	497a      	ldr	r1, [pc, #488]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00a      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a42c:	4b75      	ldr	r3, [pc, #468]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	4972      	ldr	r1, [pc, #456]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a44e:	4b6d      	ldr	r3, [pc, #436]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	4969      	ldr	r1, [pc, #420]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a470:	4b64      	ldr	r3, [pc, #400]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	4961      	ldr	r1, [pc, #388]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a492:	4b5c      	ldr	r3, [pc, #368]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a498:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	4958      	ldr	r1, [pc, #352]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d015      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a4b4:	4b53      	ldr	r3, [pc, #332]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	4950      	ldr	r1, [pc, #320]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4d2:	d105      	bne.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4d4:	4b4b      	ldr	r3, [pc, #300]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	4a4a      	ldr	r2, [pc, #296]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d015      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a4ec:	4b45      	ldr	r3, [pc, #276]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fa:	4942      	ldr	r1, [pc, #264]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a50a:	d105      	bne.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a50c:	4b3d      	ldr	r3, [pc, #244]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	4a3c      	ldr	r2, [pc, #240]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a516:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d015      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a524:	4b37      	ldr	r3, [pc, #220]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a52a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a532:	4934      	ldr	r1, [pc, #208]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a534:	4313      	orrs	r3, r2
 800a536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a542:	d105      	bne.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a544:	4b2f      	ldr	r3, [pc, #188]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	4a2e      	ldr	r2, [pc, #184]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a54a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a54e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d015      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a55c:	4b29      	ldr	r3, [pc, #164]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56a:	4926      	ldr	r1, [pc, #152]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a56c:	4313      	orrs	r3, r2
 800a56e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a57a:	d105      	bne.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a57c:	4b21      	ldr	r3, [pc, #132]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	4a20      	ldr	r2, [pc, #128]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a586:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d015      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a594:	4b1b      	ldr	r3, [pc, #108]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a59a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	4918      	ldr	r1, [pc, #96]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5b2:	d105      	bne.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5b4:	4b13      	ldr	r3, [pc, #76]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	4a12      	ldr	r2, [pc, #72]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d015      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a5cc:	4b0d      	ldr	r3, [pc, #52]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5da:	490a      	ldr	r1, [pc, #40]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5ea:	d105      	bne.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a5ec:	4b05      	ldr	r3, [pc, #20]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	4a04      	ldr	r2, [pc, #16]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a5f8:	7cbb      	ldrb	r3, [r7, #18]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	40021000 	.word	0x40021000

0800a608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e09d      	b.n	800a756 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d108      	bne.n	800a634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a62a:	d009      	beq.n	800a640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	61da      	str	r2, [r3, #28]
 800a632:	e005      	b.n	800a640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7f9 fb9a 	bl	8003d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2202      	movs	r2, #2
 800a664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a676:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a680:	d902      	bls.n	800a688 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a682:	2300      	movs	r3, #0
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	e002      	b.n	800a68e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a68c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a696:	d007      	beq.n	800a6a8 <HAL_SPI_Init+0xa0>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6a0:	d002      	beq.n	800a6a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	f003 0302 	and.w	r3, r3, #2
 800a6c2:	431a      	orrs	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	695b      	ldr	r3, [r3, #20]
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	431a      	orrs	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ea:	ea42 0103 	orr.w	r1, r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	0c1b      	lsrs	r3, r3, #16
 800a704:	f003 0204 	and.w	r2, r3, #4
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	431a      	orrs	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a716:	f003 0308 	and.w	r3, r3, #8
 800a71a:	431a      	orrs	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a724:	ea42 0103 	orr.w	r1, r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	430a      	orrs	r2, r1
 800a734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69da      	ldr	r2, [r3, #28]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b088      	sub	sp, #32
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	603b      	str	r3, [r7, #0]
 800a76a:	4613      	mov	r3, r2
 800a76c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d101      	bne.n	800a780 <HAL_SPI_Transmit+0x22>
 800a77c:	2302      	movs	r3, #2
 800a77e:	e15f      	b.n	800aa40 <HAL_SPI_Transmit+0x2e2>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a788:	f7fa fa88 	bl	8004c9c <HAL_GetTick>
 800a78c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a78e:	88fb      	ldrh	r3, [r7, #6]
 800a790:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d002      	beq.n	800a7a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a79e:	2302      	movs	r3, #2
 800a7a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a7a2:	e148      	b.n	800aa36 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <HAL_SPI_Transmit+0x52>
 800a7aa:	88fb      	ldrh	r3, [r7, #6]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a7b4:	e13f      	b.n	800aa36 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2203      	movs	r2, #3
 800a7ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	88fa      	ldrh	r2, [r7, #6]
 800a7ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	88fa      	ldrh	r2, [r7, #6]
 800a7d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a800:	d10f      	bne.n	800a822 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a810:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82c:	2b40      	cmp	r3, #64	; 0x40
 800a82e:	d007      	beq.n	800a840 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a83e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a848:	d94f      	bls.n	800a8ea <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <HAL_SPI_Transmit+0xfa>
 800a852:	8afb      	ldrh	r3, [r7, #22]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d142      	bne.n	800a8de <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85c:	881a      	ldrh	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	1c9a      	adds	r2, r3, #2
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a872:	b29b      	uxth	r3, r3
 800a874:	3b01      	subs	r3, #1
 800a876:	b29a      	uxth	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a87c:	e02f      	b.n	800a8de <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d112      	bne.n	800a8b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a890:	881a      	ldrh	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89c:	1c9a      	adds	r2, r3, #2
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8b0:	e015      	b.n	800a8de <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8b2:	f7fa f9f3 	bl	8004c9c <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d803      	bhi.n	800a8ca <HAL_SPI_Transmit+0x16c>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c8:	d102      	bne.n	800a8d0 <HAL_SPI_Transmit+0x172>
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d106      	bne.n	800a8de <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a8dc:	e0ab      	b.n	800aa36 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1ca      	bne.n	800a87e <HAL_SPI_Transmit+0x120>
 800a8e8:	e080      	b.n	800a9ec <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d002      	beq.n	800a8f8 <HAL_SPI_Transmit+0x19a>
 800a8f2:	8afb      	ldrh	r3, [r7, #22]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d174      	bne.n	800a9e2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d912      	bls.n	800a928 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a906:	881a      	ldrh	r2, [r3, #0]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a912:	1c9a      	adds	r2, r3, #2
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	3b02      	subs	r3, #2
 800a920:	b29a      	uxth	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a926:	e05c      	b.n	800a9e2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	330c      	adds	r3, #12
 800a932:	7812      	ldrb	r2, [r2, #0]
 800a934:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a944:	b29b      	uxth	r3, r3
 800a946:	3b01      	subs	r3, #1
 800a948:	b29a      	uxth	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a94e:	e048      	b.n	800a9e2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d12b      	bne.n	800a9b6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a962:	b29b      	uxth	r3, r3
 800a964:	2b01      	cmp	r3, #1
 800a966:	d912      	bls.n	800a98e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96c:	881a      	ldrh	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a978:	1c9a      	adds	r2, r3, #2
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a982:	b29b      	uxth	r3, r3
 800a984:	3b02      	subs	r3, #2
 800a986:	b29a      	uxth	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a98c:	e029      	b.n	800a9e2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	330c      	adds	r3, #12
 800a998:	7812      	ldrb	r2, [r2, #0]
 800a99a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a9b4:	e015      	b.n	800a9e2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9b6:	f7fa f971 	bl	8004c9c <HAL_GetTick>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d803      	bhi.n	800a9ce <HAL_SPI_Transmit+0x270>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9cc:	d102      	bne.n	800a9d4 <HAL_SPI_Transmit+0x276>
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d106      	bne.n	800a9e2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a9e0:	e029      	b.n	800aa36 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1b1      	bne.n	800a950 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a9ec:	69ba      	ldr	r2, [r7, #24]
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 fad7 	bl	800afa4 <SPI_EndRxTxTransaction>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2220      	movs	r2, #32
 800aa00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10a      	bne.n	800aa20 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	613b      	str	r3, [r7, #16]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	613b      	str	r3, [r7, #16]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	613b      	str	r3, [r7, #16]
 800aa1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d002      	beq.n	800aa2e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	77fb      	strb	r3, [r7, #31]
 800aa2c:	e003      	b.n	800aa36 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800aa3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3720      	adds	r7, #32
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	4613      	mov	r3, r2
 800aa54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d101      	bne.n	800aa68 <HAL_SPI_Transmit_DMA+0x20>
 800aa64:	2302      	movs	r3, #2
 800aa66:	e0d4      	b.n	800ac12 <HAL_SPI_Transmit_DMA+0x1ca>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d002      	beq.n	800aa82 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aa80:	e0c2      	b.n	800ac08 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <HAL_SPI_Transmit_DMA+0x46>
 800aa88:	88fb      	ldrh	r3, [r7, #6]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aa92:	e0b9      	b.n	800ac08 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2203      	movs	r2, #3
 800aa98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	88fa      	ldrh	r2, [r7, #6]
 800aaac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	88fa      	ldrh	r2, [r7, #6]
 800aab2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aade:	d10f      	bne.n	800ab00 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aafe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab04:	4a45      	ldr	r2, [pc, #276]	; (800ac1c <HAL_SPI_Transmit_DMA+0x1d4>)
 800ab06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab0c:	4a44      	ldr	r2, [pc, #272]	; (800ac20 <HAL_SPI_Transmit_DMA+0x1d8>)
 800ab0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab14:	4a43      	ldr	r2, [pc, #268]	; (800ac24 <HAL_SPI_Transmit_DMA+0x1dc>)
 800ab16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab2e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab38:	d82d      	bhi.n	800ab96 <HAL_SPI_Transmit_DMA+0x14e>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab44:	d127      	bne.n	800ab96 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	f003 0301 	and.w	r3, r3, #1
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10f      	bne.n	800ab74 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab62:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	085b      	lsrs	r3, r3, #1
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab72:	e010      	b.n	800ab96 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab82:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	085b      	lsrs	r3, r3, #1
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	3301      	adds	r3, #1
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9e:	4619      	mov	r1, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	330c      	adds	r3, #12
 800aba6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800abae:	f7fc f8ed 	bl	8006d8c <HAL_DMA_Start_IT>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d008      	beq.n	800abca <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abbc:	f043 0210 	orr.w	r2, r3, #16
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	75fb      	strb	r3, [r7, #23]

    goto error;
 800abc8:	e01e      	b.n	800ac08 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd4:	2b40      	cmp	r3, #64	; 0x40
 800abd6:	d007      	beq.n	800abe8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abe6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f042 0220 	orr.w	r2, r2, #32
 800abf6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f042 0202 	orr.w	r2, r2, #2
 800ac06:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	0800ad0b 	.word	0x0800ad0b
 800ac20:	0800ac65 	.word	0x0800ac65
 800ac24:	0800ad27 	.word	0x0800ad27

0800ac28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac70:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac72:	f7fa f813 	bl	8004c9c <HAL_GetTick>
 800ac76:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	2b20      	cmp	r3, #32
 800ac84:	d03b      	beq.n	800acfe <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f022 0220 	bic.w	r2, r2, #32
 800ac94:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 0202 	bic.w	r2, r2, #2
 800aca4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	2164      	movs	r1, #100	; 0x64
 800acaa:	6978      	ldr	r0, [r7, #20]
 800acac:	f000 f97a 	bl	800afa4 <SPI_EndRxTxTransaction>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d005      	beq.n	800acc2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acba:	f043 0220 	orr.w	r2, r3, #32
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10a      	bne.n	800ace0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acca:	2300      	movs	r3, #0
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	60fb      	str	r3, [r7, #12]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	2200      	movs	r2, #0
 800ace4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800acf6:	6978      	ldr	r0, [r7, #20]
 800acf8:	f7ff ffaa 	bl	800ac50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800acfc:	e002      	b.n	800ad04 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800acfe:	6978      	ldr	r0, [r7, #20]
 800ad00:	f7ff ff92 	bl	800ac28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff ff8f 	bl	800ac3c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685a      	ldr	r2, [r3, #4]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f022 0203 	bic.w	r2, r2, #3
 800ad42:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad48:	f043 0210 	orr.w	r2, r3, #16
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f7ff ff79 	bl	800ac50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad5e:	bf00      	nop
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	603b      	str	r3, [r7, #0]
 800ad74:	4613      	mov	r3, r2
 800ad76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad78:	f7f9 ff90 	bl	8004c9c <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad80:	1a9b      	subs	r3, r3, r2
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4413      	add	r3, r2
 800ad86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad88:	f7f9 ff88 	bl	8004c9c <HAL_GetTick>
 800ad8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad8e:	4b39      	ldr	r3, [pc, #228]	; (800ae74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	015b      	lsls	r3, r3, #5
 800ad94:	0d1b      	lsrs	r3, r3, #20
 800ad96:	69fa      	ldr	r2, [r7, #28]
 800ad98:	fb02 f303 	mul.w	r3, r2, r3
 800ad9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad9e:	e054      	b.n	800ae4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada6:	d050      	beq.n	800ae4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ada8:	f7f9 ff78 	bl	8004c9c <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d902      	bls.n	800adbe <SPI_WaitFlagStateUntilTimeout+0x56>
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d13d      	bne.n	800ae3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800adcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800add6:	d111      	bne.n	800adfc <SPI_WaitFlagStateUntilTimeout+0x94>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ade0:	d004      	beq.n	800adec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adea:	d107      	bne.n	800adfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae04:	d10f      	bne.n	800ae26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e017      	b.n	800ae6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	4013      	ands	r3, r2
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	bf0c      	ite	eq
 800ae5a:	2301      	moveq	r3, #1
 800ae5c:	2300      	movne	r3, #0
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	461a      	mov	r2, r3
 800ae62:	79fb      	ldrb	r3, [r7, #7]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d19b      	bne.n	800ada0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3720      	adds	r7, #32
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20000160 	.word	0x20000160

0800ae78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b08a      	sub	sp, #40	; 0x28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
 800ae84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae8a:	f7f9 ff07 	bl	8004c9c <HAL_GetTick>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae92:	1a9b      	subs	r3, r3, r2
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	4413      	add	r3, r2
 800ae98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ae9a:	f7f9 feff 	bl	8004c9c <HAL_GetTick>
 800ae9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	330c      	adds	r3, #12
 800aea6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800aea8:	4b3d      	ldr	r3, [pc, #244]	; (800afa0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	00da      	lsls	r2, r3, #3
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	0d1b      	lsrs	r3, r3, #20
 800aeb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeba:	fb02 f303 	mul.w	r3, r2, r3
 800aebe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800aec0:	e060      	b.n	800af84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aec8:	d107      	bne.n	800aeda <SPI_WaitFifoStateUntilTimeout+0x62>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d104      	bne.n	800aeda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee0:	d050      	beq.n	800af84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aee2:	f7f9 fedb 	bl	8004c9c <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d902      	bls.n	800aef8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d13d      	bne.n	800af74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af10:	d111      	bne.n	800af36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af1a:	d004      	beq.n	800af26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af24:	d107      	bne.n	800af36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af3e:	d10f      	bne.n	800af60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e010      	b.n	800af96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800af7a:	2300      	movs	r3, #0
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	3b01      	subs	r3, #1
 800af82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689a      	ldr	r2, [r3, #8]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	4013      	ands	r3, r2
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	429a      	cmp	r2, r3
 800af92:	d196      	bne.n	800aec2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3728      	adds	r7, #40	; 0x28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20000160 	.word	0x20000160

0800afa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af02      	add	r7, sp, #8
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f7ff ff5b 	bl	800ae78 <SPI_WaitFifoStateUntilTimeout>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d007      	beq.n	800afd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afcc:	f043 0220 	orr.w	r2, r3, #32
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800afd4:	2303      	movs	r3, #3
 800afd6:	e027      	b.n	800b028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2200      	movs	r2, #0
 800afe0:	2180      	movs	r1, #128	; 0x80
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f7ff fec0 	bl	800ad68 <SPI_WaitFlagStateUntilTimeout>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d007      	beq.n	800affe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff2:	f043 0220 	orr.w	r2, r3, #32
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e014      	b.n	800b028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2200      	movs	r2, #0
 800b006:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f7ff ff34 	bl	800ae78 <SPI_WaitFifoStateUntilTimeout>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d007      	beq.n	800b026 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b01a:	f043 0220 	orr.w	r2, r3, #32
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e000      	b.n	800b028 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e049      	b.n	800b0d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d106      	bne.n	800b05c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7f8 ffa0 	bl	8003f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	3304      	adds	r3, #4
 800b06c:	4619      	mov	r1, r3
 800b06e:	4610      	mov	r0, r2
 800b070:	f000 fcac 	bl	800b9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d001      	beq.n	800b0f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e04a      	b.n	800b18e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68da      	ldr	r2, [r3, #12]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f042 0201 	orr.w	r2, r2, #1
 800b10e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a21      	ldr	r2, [pc, #132]	; (800b19c <HAL_TIM_Base_Start_IT+0xbc>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d018      	beq.n	800b14c <HAL_TIM_Base_Start_IT+0x6c>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b122:	d013      	beq.n	800b14c <HAL_TIM_Base_Start_IT+0x6c>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a1d      	ldr	r2, [pc, #116]	; (800b1a0 <HAL_TIM_Base_Start_IT+0xc0>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d00e      	beq.n	800b14c <HAL_TIM_Base_Start_IT+0x6c>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a1c      	ldr	r2, [pc, #112]	; (800b1a4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d009      	beq.n	800b14c <HAL_TIM_Base_Start_IT+0x6c>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a1a      	ldr	r2, [pc, #104]	; (800b1a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d004      	beq.n	800b14c <HAL_TIM_Base_Start_IT+0x6c>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a19      	ldr	r2, [pc, #100]	; (800b1ac <HAL_TIM_Base_Start_IT+0xcc>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d115      	bne.n	800b178 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	689a      	ldr	r2, [r3, #8]
 800b152:	4b17      	ldr	r3, [pc, #92]	; (800b1b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b154:	4013      	ands	r3, r2
 800b156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b06      	cmp	r3, #6
 800b15c:	d015      	beq.n	800b18a <HAL_TIM_Base_Start_IT+0xaa>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b164:	d011      	beq.n	800b18a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f042 0201 	orr.w	r2, r2, #1
 800b174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b176:	e008      	b.n	800b18a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f042 0201 	orr.w	r2, r2, #1
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	e000      	b.n	800b18c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b18a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	40012c00 	.word	0x40012c00
 800b1a0:	40000400 	.word	0x40000400
 800b1a4:	40000800 	.word	0x40000800
 800b1a8:	40013400 	.word	0x40013400
 800b1ac:	40014000 	.word	0x40014000
 800b1b0:	00010007 	.word	0x00010007

0800b1b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e049      	b.n	800b25a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d106      	bne.n	800b1e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7f8 fe4c 	bl	8003e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	f000 fbea 	bl	800b9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d109      	bne.n	800b28c <HAL_TIM_PWM_Start_IT+0x28>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b01      	cmp	r3, #1
 800b282:	bf14      	ite	ne
 800b284:	2301      	movne	r3, #1
 800b286:	2300      	moveq	r3, #0
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	e03c      	b.n	800b306 <HAL_TIM_PWM_Start_IT+0xa2>
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	2b04      	cmp	r3, #4
 800b290:	d109      	bne.n	800b2a6 <HAL_TIM_PWM_Start_IT+0x42>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	bf14      	ite	ne
 800b29e:	2301      	movne	r3, #1
 800b2a0:	2300      	moveq	r3, #0
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	e02f      	b.n	800b306 <HAL_TIM_PWM_Start_IT+0xa2>
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	2b08      	cmp	r3, #8
 800b2aa:	d109      	bne.n	800b2c0 <HAL_TIM_PWM_Start_IT+0x5c>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	bf14      	ite	ne
 800b2b8:	2301      	movne	r3, #1
 800b2ba:	2300      	moveq	r3, #0
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	e022      	b.n	800b306 <HAL_TIM_PWM_Start_IT+0xa2>
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	2b0c      	cmp	r3, #12
 800b2c4:	d109      	bne.n	800b2da <HAL_TIM_PWM_Start_IT+0x76>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	bf14      	ite	ne
 800b2d2:	2301      	movne	r3, #1
 800b2d4:	2300      	moveq	r3, #0
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	e015      	b.n	800b306 <HAL_TIM_PWM_Start_IT+0xa2>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b10      	cmp	r3, #16
 800b2de:	d109      	bne.n	800b2f4 <HAL_TIM_PWM_Start_IT+0x90>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	bf14      	ite	ne
 800b2ec:	2301      	movne	r3, #1
 800b2ee:	2300      	moveq	r3, #0
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	e008      	b.n	800b306 <HAL_TIM_PWM_Start_IT+0xa2>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	bf14      	ite	ne
 800b300:	2301      	movne	r3, #1
 800b302:	2300      	moveq	r3, #0
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	e0e2      	b.n	800b4d4 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d104      	bne.n	800b31e <HAL_TIM_PWM_Start_IT+0xba>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b31c:	e023      	b.n	800b366 <HAL_TIM_PWM_Start_IT+0x102>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	2b04      	cmp	r3, #4
 800b322:	d104      	bne.n	800b32e <HAL_TIM_PWM_Start_IT+0xca>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2202      	movs	r2, #2
 800b328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b32c:	e01b      	b.n	800b366 <HAL_TIM_PWM_Start_IT+0x102>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b08      	cmp	r3, #8
 800b332:	d104      	bne.n	800b33e <HAL_TIM_PWM_Start_IT+0xda>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b33c:	e013      	b.n	800b366 <HAL_TIM_PWM_Start_IT+0x102>
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b0c      	cmp	r3, #12
 800b342:	d104      	bne.n	800b34e <HAL_TIM_PWM_Start_IT+0xea>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2202      	movs	r2, #2
 800b348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b34c:	e00b      	b.n	800b366 <HAL_TIM_PWM_Start_IT+0x102>
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b10      	cmp	r3, #16
 800b352:	d104      	bne.n	800b35e <HAL_TIM_PWM_Start_IT+0xfa>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2202      	movs	r2, #2
 800b358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b35c:	e003      	b.n	800b366 <HAL_TIM_PWM_Start_IT+0x102>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2202      	movs	r2, #2
 800b362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b0c      	cmp	r3, #12
 800b36a:	d841      	bhi.n	800b3f0 <HAL_TIM_PWM_Start_IT+0x18c>
 800b36c:	a201      	add	r2, pc, #4	; (adr r2, 800b374 <HAL_TIM_PWM_Start_IT+0x110>)
 800b36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b372:	bf00      	nop
 800b374:	0800b3a9 	.word	0x0800b3a9
 800b378:	0800b3f1 	.word	0x0800b3f1
 800b37c:	0800b3f1 	.word	0x0800b3f1
 800b380:	0800b3f1 	.word	0x0800b3f1
 800b384:	0800b3bb 	.word	0x0800b3bb
 800b388:	0800b3f1 	.word	0x0800b3f1
 800b38c:	0800b3f1 	.word	0x0800b3f1
 800b390:	0800b3f1 	.word	0x0800b3f1
 800b394:	0800b3cd 	.word	0x0800b3cd
 800b398:	0800b3f1 	.word	0x0800b3f1
 800b39c:	0800b3f1 	.word	0x0800b3f1
 800b3a0:	0800b3f1 	.word	0x0800b3f1
 800b3a4:	0800b3df 	.word	0x0800b3df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68da      	ldr	r2, [r3, #12]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f042 0202 	orr.w	r2, r2, #2
 800b3b6:	60da      	str	r2, [r3, #12]
      break;
 800b3b8:	e01d      	b.n	800b3f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68da      	ldr	r2, [r3, #12]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f042 0204 	orr.w	r2, r2, #4
 800b3c8:	60da      	str	r2, [r3, #12]
      break;
 800b3ca:	e014      	b.n	800b3f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68da      	ldr	r2, [r3, #12]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f042 0208 	orr.w	r2, r2, #8
 800b3da:	60da      	str	r2, [r3, #12]
      break;
 800b3dc:	e00b      	b.n	800b3f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68da      	ldr	r2, [r3, #12]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f042 0210 	orr.w	r2, r2, #16
 800b3ec:	60da      	str	r2, [r3, #12]
      break;
 800b3ee:	e002      	b.n	800b3f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f4:	bf00      	nop
  }

  if (status == HAL_OK)
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d16a      	bne.n	800b4d2 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2201      	movs	r2, #1
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	4618      	mov	r0, r3
 800b406:	f000 fe73 	bl	800c0f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a33      	ldr	r2, [pc, #204]	; (800b4dc <HAL_TIM_PWM_Start_IT+0x278>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d013      	beq.n	800b43c <HAL_TIM_PWM_Start_IT+0x1d8>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a31      	ldr	r2, [pc, #196]	; (800b4e0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d00e      	beq.n	800b43c <HAL_TIM_PWM_Start_IT+0x1d8>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a30      	ldr	r2, [pc, #192]	; (800b4e4 <HAL_TIM_PWM_Start_IT+0x280>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d009      	beq.n	800b43c <HAL_TIM_PWM_Start_IT+0x1d8>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a2e      	ldr	r2, [pc, #184]	; (800b4e8 <HAL_TIM_PWM_Start_IT+0x284>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d004      	beq.n	800b43c <HAL_TIM_PWM_Start_IT+0x1d8>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a2d      	ldr	r2, [pc, #180]	; (800b4ec <HAL_TIM_PWM_Start_IT+0x288>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d101      	bne.n	800b440 <HAL_TIM_PWM_Start_IT+0x1dc>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e000      	b.n	800b442 <HAL_TIM_PWM_Start_IT+0x1de>
 800b440:	2300      	movs	r3, #0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d007      	beq.n	800b456 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b454:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a20      	ldr	r2, [pc, #128]	; (800b4dc <HAL_TIM_PWM_Start_IT+0x278>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d018      	beq.n	800b492 <HAL_TIM_PWM_Start_IT+0x22e>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b468:	d013      	beq.n	800b492 <HAL_TIM_PWM_Start_IT+0x22e>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a20      	ldr	r2, [pc, #128]	; (800b4f0 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d00e      	beq.n	800b492 <HAL_TIM_PWM_Start_IT+0x22e>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a1e      	ldr	r2, [pc, #120]	; (800b4f4 <HAL_TIM_PWM_Start_IT+0x290>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d009      	beq.n	800b492 <HAL_TIM_PWM_Start_IT+0x22e>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a17      	ldr	r2, [pc, #92]	; (800b4e0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d004      	beq.n	800b492 <HAL_TIM_PWM_Start_IT+0x22e>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a15      	ldr	r2, [pc, #84]	; (800b4e4 <HAL_TIM_PWM_Start_IT+0x280>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d115      	bne.n	800b4be <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689a      	ldr	r2, [r3, #8]
 800b498:	4b17      	ldr	r3, [pc, #92]	; (800b4f8 <HAL_TIM_PWM_Start_IT+0x294>)
 800b49a:	4013      	ands	r3, r2
 800b49c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	2b06      	cmp	r3, #6
 800b4a2:	d015      	beq.n	800b4d0 <HAL_TIM_PWM_Start_IT+0x26c>
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4aa:	d011      	beq.n	800b4d0 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f042 0201 	orr.w	r2, r2, #1
 800b4ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4bc:	e008      	b.n	800b4d0 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f042 0201 	orr.w	r2, r2, #1
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	e000      	b.n	800b4d2 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	40012c00 	.word	0x40012c00
 800b4e0:	40013400 	.word	0x40013400
 800b4e4:	40014000 	.word	0x40014000
 800b4e8:	40014400 	.word	0x40014400
 800b4ec:	40014800 	.word	0x40014800
 800b4f0:	40000400 	.word	0x40000400
 800b4f4:	40000800 	.word	0x40000800
 800b4f8:	00010007 	.word	0x00010007

0800b4fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e097      	b.n	800b640 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7f8 fcdb 	bl	8003ee0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2202      	movs	r2, #2
 800b52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	6812      	ldr	r2, [r2, #0]
 800b53c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800b540:	f023 0307 	bic.w	r3, r3, #7
 800b544:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3304      	adds	r3, #4
 800b54e:	4619      	mov	r1, r3
 800b550:	4610      	mov	r0, r2
 800b552:	f000 fa3b 	bl	800b9cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	699b      	ldr	r3, [r3, #24]
 800b564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6a1b      	ldr	r3, [r3, #32]
 800b56c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	4313      	orrs	r3, r2
 800b576:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b57e:	f023 0303 	bic.w	r3, r3, #3
 800b582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	689a      	ldr	r2, [r3, #8]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	4313      	orrs	r3, r2
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	4313      	orrs	r3, r2
 800b594:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b59c:	f023 030c 	bic.w	r3, r3, #12
 800b5a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	68da      	ldr	r2, [r3, #12]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	021b      	lsls	r3, r3, #8
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	011a      	lsls	r2, r3, #4
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	031b      	lsls	r3, r3, #12
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b5da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b5e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	685a      	ldr	r2, [r3, #4]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2201      	movs	r2, #1
 800b612:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b658:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b660:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b668:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b670:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d110      	bne.n	800b69a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d102      	bne.n	800b684 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b67e:	7b7b      	ldrb	r3, [r7, #13]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d001      	beq.n	800b688 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e089      	b.n	800b79c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2202      	movs	r2, #2
 800b68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b698:	e031      	b.n	800b6fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b04      	cmp	r3, #4
 800b69e:	d110      	bne.n	800b6c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6a0:	7bbb      	ldrb	r3, [r7, #14]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d102      	bne.n	800b6ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b6a6:	7b3b      	ldrb	r3, [r7, #12]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d001      	beq.n	800b6b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e075      	b.n	800b79c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6c0:	e01d      	b.n	800b6fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d108      	bne.n	800b6da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6c8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d105      	bne.n	800b6da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6ce:	7b7b      	ldrb	r3, [r7, #13]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d102      	bne.n	800b6da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b6d4:	7b3b      	ldrb	r3, [r7, #12]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d001      	beq.n	800b6de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e05e      	b.n	800b79c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2202      	movs	r2, #2
 800b6e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2202      	movs	r2, #2
 800b6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d003      	beq.n	800b70c <HAL_TIM_Encoder_Start_IT+0xc4>
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2b04      	cmp	r3, #4
 800b708:	d010      	beq.n	800b72c <HAL_TIM_Encoder_Start_IT+0xe4>
 800b70a:	e01f      	b.n	800b74c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2201      	movs	r2, #1
 800b712:	2100      	movs	r1, #0
 800b714:	4618      	mov	r0, r3
 800b716:	f000 fceb 	bl	800c0f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68da      	ldr	r2, [r3, #12]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f042 0202 	orr.w	r2, r2, #2
 800b728:	60da      	str	r2, [r3, #12]
      break;
 800b72a:	e02e      	b.n	800b78a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2201      	movs	r2, #1
 800b732:	2104      	movs	r1, #4
 800b734:	4618      	mov	r0, r3
 800b736:	f000 fcdb 	bl	800c0f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68da      	ldr	r2, [r3, #12]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f042 0204 	orr.w	r2, r2, #4
 800b748:	60da      	str	r2, [r3, #12]
      break;
 800b74a:	e01e      	b.n	800b78a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2201      	movs	r2, #1
 800b752:	2100      	movs	r1, #0
 800b754:	4618      	mov	r0, r3
 800b756:	f000 fccb 	bl	800c0f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2201      	movs	r2, #1
 800b760:	2104      	movs	r1, #4
 800b762:	4618      	mov	r0, r3
 800b764:	f000 fcc4 	bl	800c0f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68da      	ldr	r2, [r3, #12]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f042 0202 	orr.w	r2, r2, #2
 800b776:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68da      	ldr	r2, [r3, #12]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f042 0204 	orr.w	r2, r2, #4
 800b786:	60da      	str	r2, [r3, #12]
      break;
 800b788:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f042 0201 	orr.w	r2, r2, #1
 800b798:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d101      	bne.n	800b7c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e0ff      	b.n	800b9c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b14      	cmp	r3, #20
 800b7ce:	f200 80f0 	bhi.w	800b9b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b7d2:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d8:	0800b82d 	.word	0x0800b82d
 800b7dc:	0800b9b3 	.word	0x0800b9b3
 800b7e0:	0800b9b3 	.word	0x0800b9b3
 800b7e4:	0800b9b3 	.word	0x0800b9b3
 800b7e8:	0800b86d 	.word	0x0800b86d
 800b7ec:	0800b9b3 	.word	0x0800b9b3
 800b7f0:	0800b9b3 	.word	0x0800b9b3
 800b7f4:	0800b9b3 	.word	0x0800b9b3
 800b7f8:	0800b8af 	.word	0x0800b8af
 800b7fc:	0800b9b3 	.word	0x0800b9b3
 800b800:	0800b9b3 	.word	0x0800b9b3
 800b804:	0800b9b3 	.word	0x0800b9b3
 800b808:	0800b8ef 	.word	0x0800b8ef
 800b80c:	0800b9b3 	.word	0x0800b9b3
 800b810:	0800b9b3 	.word	0x0800b9b3
 800b814:	0800b9b3 	.word	0x0800b9b3
 800b818:	0800b931 	.word	0x0800b931
 800b81c:	0800b9b3 	.word	0x0800b9b3
 800b820:	0800b9b3 	.word	0x0800b9b3
 800b824:	0800b9b3 	.word	0x0800b9b3
 800b828:	0800b971 	.word	0x0800b971
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68b9      	ldr	r1, [r7, #8]
 800b832:	4618      	mov	r0, r3
 800b834:	f000 f966 	bl	800bb04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	699a      	ldr	r2, [r3, #24]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f042 0208 	orr.w	r2, r2, #8
 800b846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	699a      	ldr	r2, [r3, #24]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f022 0204 	bic.w	r2, r2, #4
 800b856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6999      	ldr	r1, [r3, #24]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	691a      	ldr	r2, [r3, #16]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	430a      	orrs	r2, r1
 800b868:	619a      	str	r2, [r3, #24]
      break;
 800b86a:	e0a5      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	4618      	mov	r0, r3
 800b874:	f000 f9d6 	bl	800bc24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	699a      	ldr	r2, [r3, #24]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699a      	ldr	r2, [r3, #24]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6999      	ldr	r1, [r3, #24]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	021a      	lsls	r2, r3, #8
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	619a      	str	r2, [r3, #24]
      break;
 800b8ac:	e084      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68b9      	ldr	r1, [r7, #8]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f000 fa3f 	bl	800bd38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	69da      	ldr	r2, [r3, #28]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f042 0208 	orr.w	r2, r2, #8
 800b8c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	69da      	ldr	r2, [r3, #28]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 0204 	bic.w	r2, r2, #4
 800b8d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	69d9      	ldr	r1, [r3, #28]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	691a      	ldr	r2, [r3, #16]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	430a      	orrs	r2, r1
 800b8ea:	61da      	str	r2, [r3, #28]
      break;
 800b8ec:	e064      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68b9      	ldr	r1, [r7, #8]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 faa7 	bl	800be48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69da      	ldr	r2, [r3, #28]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69da      	ldr	r2, [r3, #28]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69d9      	ldr	r1, [r3, #28]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	021a      	lsls	r2, r3, #8
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	430a      	orrs	r2, r1
 800b92c:	61da      	str	r2, [r3, #28]
      break;
 800b92e:	e043      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	4618      	mov	r0, r3
 800b938:	f000 fb10 	bl	800bf5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f042 0208 	orr.w	r2, r2, #8
 800b94a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 0204 	bic.w	r2, r2, #4
 800b95a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	691a      	ldr	r2, [r3, #16]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b96e:	e023      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68b9      	ldr	r1, [r7, #8]
 800b976:	4618      	mov	r0, r3
 800b978:	f000 fb54 	bl	800c024 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b98a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b99a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	021a      	lsls	r2, r3, #8
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b9b0:	e002      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop

0800b9cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a42      	ldr	r2, [pc, #264]	; (800bae8 <TIM_Base_SetConfig+0x11c>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d00f      	beq.n	800ba04 <TIM_Base_SetConfig+0x38>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ea:	d00b      	beq.n	800ba04 <TIM_Base_SetConfig+0x38>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a3f      	ldr	r2, [pc, #252]	; (800baec <TIM_Base_SetConfig+0x120>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d007      	beq.n	800ba04 <TIM_Base_SetConfig+0x38>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a3e      	ldr	r2, [pc, #248]	; (800baf0 <TIM_Base_SetConfig+0x124>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d003      	beq.n	800ba04 <TIM_Base_SetConfig+0x38>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a3d      	ldr	r2, [pc, #244]	; (800baf4 <TIM_Base_SetConfig+0x128>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d108      	bne.n	800ba16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a33      	ldr	r2, [pc, #204]	; (800bae8 <TIM_Base_SetConfig+0x11c>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d01b      	beq.n	800ba56 <TIM_Base_SetConfig+0x8a>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba24:	d017      	beq.n	800ba56 <TIM_Base_SetConfig+0x8a>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a30      	ldr	r2, [pc, #192]	; (800baec <TIM_Base_SetConfig+0x120>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d013      	beq.n	800ba56 <TIM_Base_SetConfig+0x8a>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a2f      	ldr	r2, [pc, #188]	; (800baf0 <TIM_Base_SetConfig+0x124>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d00f      	beq.n	800ba56 <TIM_Base_SetConfig+0x8a>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a2e      	ldr	r2, [pc, #184]	; (800baf4 <TIM_Base_SetConfig+0x128>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d00b      	beq.n	800ba56 <TIM_Base_SetConfig+0x8a>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a2d      	ldr	r2, [pc, #180]	; (800baf8 <TIM_Base_SetConfig+0x12c>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d007      	beq.n	800ba56 <TIM_Base_SetConfig+0x8a>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a2c      	ldr	r2, [pc, #176]	; (800bafc <TIM_Base_SetConfig+0x130>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d003      	beq.n	800ba56 <TIM_Base_SetConfig+0x8a>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a2b      	ldr	r2, [pc, #172]	; (800bb00 <TIM_Base_SetConfig+0x134>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d108      	bne.n	800ba68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	695b      	ldr	r3, [r3, #20]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	689a      	ldr	r2, [r3, #8]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a16      	ldr	r2, [pc, #88]	; (800bae8 <TIM_Base_SetConfig+0x11c>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d00f      	beq.n	800bab4 <TIM_Base_SetConfig+0xe8>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a17      	ldr	r2, [pc, #92]	; (800baf4 <TIM_Base_SetConfig+0x128>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d00b      	beq.n	800bab4 <TIM_Base_SetConfig+0xe8>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a16      	ldr	r2, [pc, #88]	; (800baf8 <TIM_Base_SetConfig+0x12c>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d007      	beq.n	800bab4 <TIM_Base_SetConfig+0xe8>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a15      	ldr	r2, [pc, #84]	; (800bafc <TIM_Base_SetConfig+0x130>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d003      	beq.n	800bab4 <TIM_Base_SetConfig+0xe8>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a14      	ldr	r2, [pc, #80]	; (800bb00 <TIM_Base_SetConfig+0x134>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d103      	bne.n	800babc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	691a      	ldr	r2, [r3, #16]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d105      	bne.n	800bada <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	f023 0201 	bic.w	r2, r3, #1
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	611a      	str	r2, [r3, #16]
  }
}
 800bada:	bf00      	nop
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	40012c00 	.word	0x40012c00
 800baec:	40000400 	.word	0x40000400
 800baf0:	40000800 	.word	0x40000800
 800baf4:	40013400 	.word	0x40013400
 800baf8:	40014000 	.word	0x40014000
 800bafc:	40014400 	.word	0x40014400
 800bb00:	40014800 	.word	0x40014800

0800bb04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a1b      	ldr	r3, [r3, #32]
 800bb18:	f023 0201 	bic.w	r2, r3, #1
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f023 0303 	bic.w	r3, r3, #3
 800bb3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f023 0302 	bic.w	r3, r3, #2
 800bb50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a2c      	ldr	r2, [pc, #176]	; (800bc10 <TIM_OC1_SetConfig+0x10c>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d00f      	beq.n	800bb84 <TIM_OC1_SetConfig+0x80>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a2b      	ldr	r2, [pc, #172]	; (800bc14 <TIM_OC1_SetConfig+0x110>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d00b      	beq.n	800bb84 <TIM_OC1_SetConfig+0x80>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a2a      	ldr	r2, [pc, #168]	; (800bc18 <TIM_OC1_SetConfig+0x114>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d007      	beq.n	800bb84 <TIM_OC1_SetConfig+0x80>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a29      	ldr	r2, [pc, #164]	; (800bc1c <TIM_OC1_SetConfig+0x118>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d003      	beq.n	800bb84 <TIM_OC1_SetConfig+0x80>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a28      	ldr	r2, [pc, #160]	; (800bc20 <TIM_OC1_SetConfig+0x11c>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d10c      	bne.n	800bb9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f023 0308 	bic.w	r3, r3, #8
 800bb8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f023 0304 	bic.w	r3, r3, #4
 800bb9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a1b      	ldr	r2, [pc, #108]	; (800bc10 <TIM_OC1_SetConfig+0x10c>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d00f      	beq.n	800bbc6 <TIM_OC1_SetConfig+0xc2>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a1a      	ldr	r2, [pc, #104]	; (800bc14 <TIM_OC1_SetConfig+0x110>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d00b      	beq.n	800bbc6 <TIM_OC1_SetConfig+0xc2>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a19      	ldr	r2, [pc, #100]	; (800bc18 <TIM_OC1_SetConfig+0x114>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d007      	beq.n	800bbc6 <TIM_OC1_SetConfig+0xc2>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a18      	ldr	r2, [pc, #96]	; (800bc1c <TIM_OC1_SetConfig+0x118>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d003      	beq.n	800bbc6 <TIM_OC1_SetConfig+0xc2>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a17      	ldr	r2, [pc, #92]	; (800bc20 <TIM_OC1_SetConfig+0x11c>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d111      	bne.n	800bbea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	621a      	str	r2, [r3, #32]
}
 800bc04:	bf00      	nop
 800bc06:	371c      	adds	r7, #28
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	40012c00 	.word	0x40012c00
 800bc14:	40013400 	.word	0x40013400
 800bc18:	40014000 	.word	0x40014000
 800bc1c:	40014400 	.word	0x40014400
 800bc20:	40014800 	.word	0x40014800

0800bc24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b087      	sub	sp, #28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a1b      	ldr	r3, [r3, #32]
 800bc32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a1b      	ldr	r3, [r3, #32]
 800bc38:	f023 0210 	bic.w	r2, r3, #16
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	021b      	lsls	r3, r3, #8
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	f023 0320 	bic.w	r3, r3, #32
 800bc72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	011b      	lsls	r3, r3, #4
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a28      	ldr	r2, [pc, #160]	; (800bd24 <TIM_OC2_SetConfig+0x100>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d003      	beq.n	800bc90 <TIM_OC2_SetConfig+0x6c>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a27      	ldr	r2, [pc, #156]	; (800bd28 <TIM_OC2_SetConfig+0x104>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d10d      	bne.n	800bcac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	011b      	lsls	r3, r3, #4
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a1d      	ldr	r2, [pc, #116]	; (800bd24 <TIM_OC2_SetConfig+0x100>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d00f      	beq.n	800bcd4 <TIM_OC2_SetConfig+0xb0>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a1c      	ldr	r2, [pc, #112]	; (800bd28 <TIM_OC2_SetConfig+0x104>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d00b      	beq.n	800bcd4 <TIM_OC2_SetConfig+0xb0>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a1b      	ldr	r2, [pc, #108]	; (800bd2c <TIM_OC2_SetConfig+0x108>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d007      	beq.n	800bcd4 <TIM_OC2_SetConfig+0xb0>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a1a      	ldr	r2, [pc, #104]	; (800bd30 <TIM_OC2_SetConfig+0x10c>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d003      	beq.n	800bcd4 <TIM_OC2_SetConfig+0xb0>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a19      	ldr	r2, [pc, #100]	; (800bd34 <TIM_OC2_SetConfig+0x110>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d113      	bne.n	800bcfc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bcda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	699b      	ldr	r3, [r3, #24]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	621a      	str	r2, [r3, #32]
}
 800bd16:	bf00      	nop
 800bd18:	371c      	adds	r7, #28
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	40012c00 	.word	0x40012c00
 800bd28:	40013400 	.word	0x40013400
 800bd2c:	40014000 	.word	0x40014000
 800bd30:	40014400 	.word	0x40014400
 800bd34:	40014800 	.word	0x40014800

0800bd38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b087      	sub	sp, #28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a1b      	ldr	r3, [r3, #32]
 800bd4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	69db      	ldr	r3, [r3, #28]
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f023 0303 	bic.w	r3, r3, #3
 800bd72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	021b      	lsls	r3, r3, #8
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a27      	ldr	r2, [pc, #156]	; (800be34 <TIM_OC3_SetConfig+0xfc>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d003      	beq.n	800bda2 <TIM_OC3_SetConfig+0x6a>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4a26      	ldr	r2, [pc, #152]	; (800be38 <TIM_OC3_SetConfig+0x100>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d10d      	bne.n	800bdbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bda8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	021b      	lsls	r3, r3, #8
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bdbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a1c      	ldr	r2, [pc, #112]	; (800be34 <TIM_OC3_SetConfig+0xfc>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d00f      	beq.n	800bde6 <TIM_OC3_SetConfig+0xae>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a1b      	ldr	r2, [pc, #108]	; (800be38 <TIM_OC3_SetConfig+0x100>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d00b      	beq.n	800bde6 <TIM_OC3_SetConfig+0xae>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a1a      	ldr	r2, [pc, #104]	; (800be3c <TIM_OC3_SetConfig+0x104>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d007      	beq.n	800bde6 <TIM_OC3_SetConfig+0xae>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a19      	ldr	r2, [pc, #100]	; (800be40 <TIM_OC3_SetConfig+0x108>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d003      	beq.n	800bde6 <TIM_OC3_SetConfig+0xae>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a18      	ldr	r2, [pc, #96]	; (800be44 <TIM_OC3_SetConfig+0x10c>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d113      	bne.n	800be0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	695b      	ldr	r3, [r3, #20]
 800bdfa:	011b      	lsls	r3, r3, #4
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	011b      	lsls	r3, r3, #4
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	685a      	ldr	r2, [r3, #4]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	621a      	str	r2, [r3, #32]
}
 800be28:	bf00      	nop
 800be2a:	371c      	adds	r7, #28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	40012c00 	.word	0x40012c00
 800be38:	40013400 	.word	0x40013400
 800be3c:	40014000 	.word	0x40014000
 800be40:	40014400 	.word	0x40014400
 800be44:	40014800 	.word	0x40014800

0800be48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be48:	b480      	push	{r7}
 800be4a:	b087      	sub	sp, #28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a1b      	ldr	r3, [r3, #32]
 800be5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	021b      	lsls	r3, r3, #8
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	031b      	lsls	r3, r3, #12
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a28      	ldr	r2, [pc, #160]	; (800bf48 <TIM_OC4_SetConfig+0x100>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d003      	beq.n	800beb4 <TIM_OC4_SetConfig+0x6c>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a27      	ldr	r2, [pc, #156]	; (800bf4c <TIM_OC4_SetConfig+0x104>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d10d      	bne.n	800bed0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800beba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	031b      	lsls	r3, r3, #12
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a1d      	ldr	r2, [pc, #116]	; (800bf48 <TIM_OC4_SetConfig+0x100>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d00f      	beq.n	800bef8 <TIM_OC4_SetConfig+0xb0>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a1c      	ldr	r2, [pc, #112]	; (800bf4c <TIM_OC4_SetConfig+0x104>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d00b      	beq.n	800bef8 <TIM_OC4_SetConfig+0xb0>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a1b      	ldr	r2, [pc, #108]	; (800bf50 <TIM_OC4_SetConfig+0x108>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d007      	beq.n	800bef8 <TIM_OC4_SetConfig+0xb0>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a1a      	ldr	r2, [pc, #104]	; (800bf54 <TIM_OC4_SetConfig+0x10c>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d003      	beq.n	800bef8 <TIM_OC4_SetConfig+0xb0>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a19      	ldr	r2, [pc, #100]	; (800bf58 <TIM_OC4_SetConfig+0x110>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d113      	bne.n	800bf20 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800befe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	019b      	lsls	r3, r3, #6
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	019b      	lsls	r3, r3, #6
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	621a      	str	r2, [r3, #32]
}
 800bf3a:	bf00      	nop
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	40012c00 	.word	0x40012c00
 800bf4c:	40013400 	.word	0x40013400
 800bf50:	40014000 	.word	0x40014000
 800bf54:	40014400 	.word	0x40014400
 800bf58:	40014800 	.word	0x40014800

0800bf5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
 800bf70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	4313      	orrs	r3, r2
 800bf98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bfa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	041b      	lsls	r3, r3, #16
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a17      	ldr	r2, [pc, #92]	; (800c010 <TIM_OC5_SetConfig+0xb4>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d00f      	beq.n	800bfd6 <TIM_OC5_SetConfig+0x7a>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a16      	ldr	r2, [pc, #88]	; (800c014 <TIM_OC5_SetConfig+0xb8>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d00b      	beq.n	800bfd6 <TIM_OC5_SetConfig+0x7a>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a15      	ldr	r2, [pc, #84]	; (800c018 <TIM_OC5_SetConfig+0xbc>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d007      	beq.n	800bfd6 <TIM_OC5_SetConfig+0x7a>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a14      	ldr	r2, [pc, #80]	; (800c01c <TIM_OC5_SetConfig+0xc0>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d003      	beq.n	800bfd6 <TIM_OC5_SetConfig+0x7a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a13      	ldr	r2, [pc, #76]	; (800c020 <TIM_OC5_SetConfig+0xc4>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d109      	bne.n	800bfea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	021b      	lsls	r3, r3, #8
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	685a      	ldr	r2, [r3, #4]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	621a      	str	r2, [r3, #32]
}
 800c004:	bf00      	nop
 800c006:	371c      	adds	r7, #28
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	40012c00 	.word	0x40012c00
 800c014:	40013400 	.word	0x40013400
 800c018:	40014000 	.word	0x40014000
 800c01c:	40014400 	.word	0x40014400
 800c020:	40014800 	.word	0x40014800

0800c024 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c024:	b480      	push	{r7}
 800c026:	b087      	sub	sp, #28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a1b      	ldr	r3, [r3, #32]
 800c032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a1b      	ldr	r3, [r3, #32]
 800c038:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	021b      	lsls	r3, r3, #8
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	4313      	orrs	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c06a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	051b      	lsls	r3, r3, #20
 800c072:	693a      	ldr	r2, [r7, #16]
 800c074:	4313      	orrs	r3, r2
 800c076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a18      	ldr	r2, [pc, #96]	; (800c0dc <TIM_OC6_SetConfig+0xb8>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d00f      	beq.n	800c0a0 <TIM_OC6_SetConfig+0x7c>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a17      	ldr	r2, [pc, #92]	; (800c0e0 <TIM_OC6_SetConfig+0xbc>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d00b      	beq.n	800c0a0 <TIM_OC6_SetConfig+0x7c>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4a16      	ldr	r2, [pc, #88]	; (800c0e4 <TIM_OC6_SetConfig+0xc0>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d007      	beq.n	800c0a0 <TIM_OC6_SetConfig+0x7c>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4a15      	ldr	r2, [pc, #84]	; (800c0e8 <TIM_OC6_SetConfig+0xc4>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d003      	beq.n	800c0a0 <TIM_OC6_SetConfig+0x7c>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a14      	ldr	r2, [pc, #80]	; (800c0ec <TIM_OC6_SetConfig+0xc8>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d109      	bne.n	800c0b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c0a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	695b      	ldr	r3, [r3, #20]
 800c0ac:	029b      	lsls	r3, r3, #10
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	693a      	ldr	r2, [r7, #16]
 800c0cc:	621a      	str	r2, [r3, #32]
}
 800c0ce:	bf00      	nop
 800c0d0:	371c      	adds	r7, #28
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	40012c00 	.word	0x40012c00
 800c0e0:	40013400 	.word	0x40013400
 800c0e4:	40014000 	.word	0x40014000
 800c0e8:	40014400 	.word	0x40014400
 800c0ec:	40014800 	.word	0x40014800

0800c0f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b087      	sub	sp, #28
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	f003 031f 	and.w	r3, r3, #31
 800c102:	2201      	movs	r2, #1
 800c104:	fa02 f303 	lsl.w	r3, r2, r3
 800c108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6a1a      	ldr	r2, [r3, #32]
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	43db      	mvns	r3, r3
 800c112:	401a      	ands	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6a1a      	ldr	r2, [r3, #32]
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	f003 031f 	and.w	r3, r3, #31
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	fa01 f303 	lsl.w	r3, r1, r3
 800c128:	431a      	orrs	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	621a      	str	r2, [r3, #32]
}
 800c12e:	bf00      	nop
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
	...

0800c13c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d109      	bne.n	800c160 <HAL_TIMEx_PWMN_Start+0x24>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b01      	cmp	r3, #1
 800c156:	bf14      	ite	ne
 800c158:	2301      	movne	r3, #1
 800c15a:	2300      	moveq	r3, #0
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	e022      	b.n	800c1a6 <HAL_TIMEx_PWMN_Start+0x6a>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b04      	cmp	r3, #4
 800c164:	d109      	bne.n	800c17a <HAL_TIMEx_PWMN_Start+0x3e>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b01      	cmp	r3, #1
 800c170:	bf14      	ite	ne
 800c172:	2301      	movne	r3, #1
 800c174:	2300      	moveq	r3, #0
 800c176:	b2db      	uxtb	r3, r3
 800c178:	e015      	b.n	800c1a6 <HAL_TIMEx_PWMN_Start+0x6a>
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b08      	cmp	r3, #8
 800c17e:	d109      	bne.n	800c194 <HAL_TIMEx_PWMN_Start+0x58>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b01      	cmp	r3, #1
 800c18a:	bf14      	ite	ne
 800c18c:	2301      	movne	r3, #1
 800c18e:	2300      	moveq	r3, #0
 800c190:	b2db      	uxtb	r3, r3
 800c192:	e008      	b.n	800c1a6 <HAL_TIMEx_PWMN_Start+0x6a>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	bf14      	ite	ne
 800c1a0:	2301      	movne	r3, #1
 800c1a2:	2300      	moveq	r3, #0
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e069      	b.n	800c282 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d104      	bne.n	800c1be <HAL_TIMEx_PWMN_Start+0x82>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1bc:	e013      	b.n	800c1e6 <HAL_TIMEx_PWMN_Start+0xaa>
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	2b04      	cmp	r3, #4
 800c1c2:	d104      	bne.n	800c1ce <HAL_TIMEx_PWMN_Start+0x92>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1cc:	e00b      	b.n	800c1e6 <HAL_TIMEx_PWMN_Start+0xaa>
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	2b08      	cmp	r3, #8
 800c1d2:	d104      	bne.n	800c1de <HAL_TIMEx_PWMN_Start+0xa2>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c1dc:	e003      	b.n	800c1e6 <HAL_TIMEx_PWMN_Start+0xaa>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2202      	movs	r2, #2
 800c1e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2204      	movs	r2, #4
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f966 	bl	800c4c0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c202:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a20      	ldr	r2, [pc, #128]	; (800c28c <HAL_TIMEx_PWMN_Start+0x150>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d018      	beq.n	800c240 <HAL_TIMEx_PWMN_Start+0x104>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c216:	d013      	beq.n	800c240 <HAL_TIMEx_PWMN_Start+0x104>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a1c      	ldr	r2, [pc, #112]	; (800c290 <HAL_TIMEx_PWMN_Start+0x154>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d00e      	beq.n	800c240 <HAL_TIMEx_PWMN_Start+0x104>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a1b      	ldr	r2, [pc, #108]	; (800c294 <HAL_TIMEx_PWMN_Start+0x158>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d009      	beq.n	800c240 <HAL_TIMEx_PWMN_Start+0x104>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a19      	ldr	r2, [pc, #100]	; (800c298 <HAL_TIMEx_PWMN_Start+0x15c>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d004      	beq.n	800c240 <HAL_TIMEx_PWMN_Start+0x104>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a18      	ldr	r2, [pc, #96]	; (800c29c <HAL_TIMEx_PWMN_Start+0x160>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d115      	bne.n	800c26c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	4b16      	ldr	r3, [pc, #88]	; (800c2a0 <HAL_TIMEx_PWMN_Start+0x164>)
 800c248:	4013      	ands	r3, r2
 800c24a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b06      	cmp	r3, #6
 800c250:	d015      	beq.n	800c27e <HAL_TIMEx_PWMN_Start+0x142>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c258:	d011      	beq.n	800c27e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f042 0201 	orr.w	r2, r2, #1
 800c268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c26a:	e008      	b.n	800c27e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f042 0201 	orr.w	r2, r2, #1
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	e000      	b.n	800c280 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c27e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	40012c00 	.word	0x40012c00
 800c290:	40000400 	.word	0x40000400
 800c294:	40000800 	.word	0x40000800
 800c298:	40013400 	.word	0x40013400
 800c29c:	40014000 	.word	0x40014000
 800c2a0:	00010007 	.word	0x00010007

0800c2a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d101      	bne.n	800c2bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	e065      	b.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2202      	movs	r2, #2
 800c2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a2c      	ldr	r2, [pc, #176]	; (800c394 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d004      	beq.n	800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a2b      	ldr	r2, [pc, #172]	; (800c398 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d108      	bne.n	800c302 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c2f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c30c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	4313      	orrs	r3, r2
 800c316:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a1b      	ldr	r2, [pc, #108]	; (800c394 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d018      	beq.n	800c35c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c332:	d013      	beq.n	800c35c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a18      	ldr	r2, [pc, #96]	; (800c39c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d00e      	beq.n	800c35c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a17      	ldr	r2, [pc, #92]	; (800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d009      	beq.n	800c35c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a12      	ldr	r2, [pc, #72]	; (800c398 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d004      	beq.n	800c35c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a13      	ldr	r2, [pc, #76]	; (800c3a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d10c      	bne.n	800c376 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c386:	2300      	movs	r3, #0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	40012c00 	.word	0x40012c00
 800c398:	40013400 	.word	0x40013400
 800c39c:	40000400 	.word	0x40000400
 800c3a0:	40000800 	.word	0x40000800
 800c3a4:	40014000 	.word	0x40014000

0800c3a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d101      	bne.n	800c3c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	e073      	b.n	800c4ac <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4313      	orrs	r3, r2
 800c402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	4313      	orrs	r3, r2
 800c410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	041b      	lsls	r3, r3, #16
 800c43a:	4313      	orrs	r3, r2
 800c43c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	69db      	ldr	r3, [r3, #28]
 800c448:	4313      	orrs	r3, r2
 800c44a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a19      	ldr	r2, [pc, #100]	; (800c4b8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d004      	beq.n	800c460 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a18      	ldr	r2, [pc, #96]	; (800c4bc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d11c      	bne.n	800c49a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46a:	051b      	lsls	r3, r3, #20
 800c46c:	4313      	orrs	r3, r2
 800c46e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c488:	4313      	orrs	r3, r2
 800c48a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c496:	4313      	orrs	r3, r2
 800c498:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	40012c00 	.word	0x40012c00
 800c4bc:	40013400 	.word	0x40013400

0800c4c0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f003 030f 	and.w	r3, r3, #15
 800c4d2:	2204      	movs	r2, #4
 800c4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6a1a      	ldr	r2, [r3, #32]
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	43db      	mvns	r3, r3
 800c4e2:	401a      	ands	r2, r3
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6a1a      	ldr	r2, [r3, #32]
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	f003 030f 	and.w	r3, r3, #15
 800c4f2:	6879      	ldr	r1, [r7, #4]
 800c4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	621a      	str	r2, [r3, #32]
}
 800c4fe:	bf00      	nop
 800c500:	371c      	adds	r7, #28
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b082      	sub	sp, #8
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	e04a      	b.n	800c5b2 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c522:	2b00      	cmp	r3, #0
 800c524:	d106      	bne.n	800c534 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f7f7 fdc6 	bl	80040c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2224      	movs	r2, #36	; 0x24
 800c538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f022 0201 	bic.w	r2, r2, #1
 800c54a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c550:	2b00      	cmp	r3, #0
 800c552:	d002      	beq.n	800c55a <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fafd 	bl	800cb54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f82e 	bl	800c5bc <UART_SetConfig>
 800c560:	4603      	mov	r3, r0
 800c562:	2b01      	cmp	r3, #1
 800c564:	d101      	bne.n	800c56a <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e023      	b.n	800c5b2 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c578:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	689a      	ldr	r2, [r3, #8]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800c588:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	689a      	ldr	r2, [r3, #8]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f042 0208 	orr.w	r2, r2, #8
 800c598:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f042 0201 	orr.w	r2, r2, #1
 800c5a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fb74 	bl	800cc98 <UART_CheckIdleState>
 800c5b0:	4603      	mov	r3, r0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
	...

0800c5bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5c0:	b08c      	sub	sp, #48	; 0x30
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	689a      	ldr	r2, [r3, #8]
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	431a      	orrs	r2, r3
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	69db      	ldr	r3, [r3, #28]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	4bab      	ldr	r3, [pc, #684]	; (800c898 <UART_SetConfig+0x2dc>)
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	6812      	ldr	r2, [r2, #0]
 800c5f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5f4:	430b      	orrs	r3, r1
 800c5f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	68da      	ldr	r2, [r3, #12]
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	430a      	orrs	r2, r1
 800c60c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4aa0      	ldr	r2, [pc, #640]	; (800c89c <UART_SetConfig+0x2e0>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d004      	beq.n	800c628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	6a1b      	ldr	r3, [r3, #32]
 800c622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c624:	4313      	orrs	r3, r2
 800c626:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c632:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	6812      	ldr	r2, [r2, #0]
 800c63a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c63c:	430b      	orrs	r3, r1
 800c63e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c646:	f023 010f 	bic.w	r1, r3, #15
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	430a      	orrs	r2, r1
 800c654:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a91      	ldr	r2, [pc, #580]	; (800c8a0 <UART_SetConfig+0x2e4>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d125      	bne.n	800c6ac <UART_SetConfig+0xf0>
 800c660:	4b90      	ldr	r3, [pc, #576]	; (800c8a4 <UART_SetConfig+0x2e8>)
 800c662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c666:	f003 0303 	and.w	r3, r3, #3
 800c66a:	2b03      	cmp	r3, #3
 800c66c:	d81a      	bhi.n	800c6a4 <UART_SetConfig+0xe8>
 800c66e:	a201      	add	r2, pc, #4	; (adr r2, 800c674 <UART_SetConfig+0xb8>)
 800c670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c674:	0800c685 	.word	0x0800c685
 800c678:	0800c695 	.word	0x0800c695
 800c67c:	0800c68d 	.word	0x0800c68d
 800c680:	0800c69d 	.word	0x0800c69d
 800c684:	2301      	movs	r3, #1
 800c686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c68a:	e0d6      	b.n	800c83a <UART_SetConfig+0x27e>
 800c68c:	2302      	movs	r3, #2
 800c68e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c692:	e0d2      	b.n	800c83a <UART_SetConfig+0x27e>
 800c694:	2304      	movs	r3, #4
 800c696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c69a:	e0ce      	b.n	800c83a <UART_SetConfig+0x27e>
 800c69c:	2308      	movs	r3, #8
 800c69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6a2:	e0ca      	b.n	800c83a <UART_SetConfig+0x27e>
 800c6a4:	2310      	movs	r3, #16
 800c6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6aa:	e0c6      	b.n	800c83a <UART_SetConfig+0x27e>
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a7d      	ldr	r2, [pc, #500]	; (800c8a8 <UART_SetConfig+0x2ec>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d138      	bne.n	800c728 <UART_SetConfig+0x16c>
 800c6b6:	4b7b      	ldr	r3, [pc, #492]	; (800c8a4 <UART_SetConfig+0x2e8>)
 800c6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6bc:	f003 030c 	and.w	r3, r3, #12
 800c6c0:	2b0c      	cmp	r3, #12
 800c6c2:	d82d      	bhi.n	800c720 <UART_SetConfig+0x164>
 800c6c4:	a201      	add	r2, pc, #4	; (adr r2, 800c6cc <UART_SetConfig+0x110>)
 800c6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ca:	bf00      	nop
 800c6cc:	0800c701 	.word	0x0800c701
 800c6d0:	0800c721 	.word	0x0800c721
 800c6d4:	0800c721 	.word	0x0800c721
 800c6d8:	0800c721 	.word	0x0800c721
 800c6dc:	0800c711 	.word	0x0800c711
 800c6e0:	0800c721 	.word	0x0800c721
 800c6e4:	0800c721 	.word	0x0800c721
 800c6e8:	0800c721 	.word	0x0800c721
 800c6ec:	0800c709 	.word	0x0800c709
 800c6f0:	0800c721 	.word	0x0800c721
 800c6f4:	0800c721 	.word	0x0800c721
 800c6f8:	0800c721 	.word	0x0800c721
 800c6fc:	0800c719 	.word	0x0800c719
 800c700:	2300      	movs	r3, #0
 800c702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c706:	e098      	b.n	800c83a <UART_SetConfig+0x27e>
 800c708:	2302      	movs	r3, #2
 800c70a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c70e:	e094      	b.n	800c83a <UART_SetConfig+0x27e>
 800c710:	2304      	movs	r3, #4
 800c712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c716:	e090      	b.n	800c83a <UART_SetConfig+0x27e>
 800c718:	2308      	movs	r3, #8
 800c71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c71e:	e08c      	b.n	800c83a <UART_SetConfig+0x27e>
 800c720:	2310      	movs	r3, #16
 800c722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c726:	e088      	b.n	800c83a <UART_SetConfig+0x27e>
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a5f      	ldr	r2, [pc, #380]	; (800c8ac <UART_SetConfig+0x2f0>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d125      	bne.n	800c77e <UART_SetConfig+0x1c2>
 800c732:	4b5c      	ldr	r3, [pc, #368]	; (800c8a4 <UART_SetConfig+0x2e8>)
 800c734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c738:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c73c:	2b30      	cmp	r3, #48	; 0x30
 800c73e:	d016      	beq.n	800c76e <UART_SetConfig+0x1b2>
 800c740:	2b30      	cmp	r3, #48	; 0x30
 800c742:	d818      	bhi.n	800c776 <UART_SetConfig+0x1ba>
 800c744:	2b20      	cmp	r3, #32
 800c746:	d00a      	beq.n	800c75e <UART_SetConfig+0x1a2>
 800c748:	2b20      	cmp	r3, #32
 800c74a:	d814      	bhi.n	800c776 <UART_SetConfig+0x1ba>
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <UART_SetConfig+0x19a>
 800c750:	2b10      	cmp	r3, #16
 800c752:	d008      	beq.n	800c766 <UART_SetConfig+0x1aa>
 800c754:	e00f      	b.n	800c776 <UART_SetConfig+0x1ba>
 800c756:	2300      	movs	r3, #0
 800c758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c75c:	e06d      	b.n	800c83a <UART_SetConfig+0x27e>
 800c75e:	2302      	movs	r3, #2
 800c760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c764:	e069      	b.n	800c83a <UART_SetConfig+0x27e>
 800c766:	2304      	movs	r3, #4
 800c768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c76c:	e065      	b.n	800c83a <UART_SetConfig+0x27e>
 800c76e:	2308      	movs	r3, #8
 800c770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c774:	e061      	b.n	800c83a <UART_SetConfig+0x27e>
 800c776:	2310      	movs	r3, #16
 800c778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c77c:	e05d      	b.n	800c83a <UART_SetConfig+0x27e>
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a4b      	ldr	r2, [pc, #300]	; (800c8b0 <UART_SetConfig+0x2f4>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d125      	bne.n	800c7d4 <UART_SetConfig+0x218>
 800c788:	4b46      	ldr	r3, [pc, #280]	; (800c8a4 <UART_SetConfig+0x2e8>)
 800c78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c78e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c792:	2bc0      	cmp	r3, #192	; 0xc0
 800c794:	d016      	beq.n	800c7c4 <UART_SetConfig+0x208>
 800c796:	2bc0      	cmp	r3, #192	; 0xc0
 800c798:	d818      	bhi.n	800c7cc <UART_SetConfig+0x210>
 800c79a:	2b80      	cmp	r3, #128	; 0x80
 800c79c:	d00a      	beq.n	800c7b4 <UART_SetConfig+0x1f8>
 800c79e:	2b80      	cmp	r3, #128	; 0x80
 800c7a0:	d814      	bhi.n	800c7cc <UART_SetConfig+0x210>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <UART_SetConfig+0x1f0>
 800c7a6:	2b40      	cmp	r3, #64	; 0x40
 800c7a8:	d008      	beq.n	800c7bc <UART_SetConfig+0x200>
 800c7aa:	e00f      	b.n	800c7cc <UART_SetConfig+0x210>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7b2:	e042      	b.n	800c83a <UART_SetConfig+0x27e>
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7ba:	e03e      	b.n	800c83a <UART_SetConfig+0x27e>
 800c7bc:	2304      	movs	r3, #4
 800c7be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7c2:	e03a      	b.n	800c83a <UART_SetConfig+0x27e>
 800c7c4:	2308      	movs	r3, #8
 800c7c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7ca:	e036      	b.n	800c83a <UART_SetConfig+0x27e>
 800c7cc:	2310      	movs	r3, #16
 800c7ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7d2:	e032      	b.n	800c83a <UART_SetConfig+0x27e>
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a30      	ldr	r2, [pc, #192]	; (800c89c <UART_SetConfig+0x2e0>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d12a      	bne.n	800c834 <UART_SetConfig+0x278>
 800c7de:	4b31      	ldr	r3, [pc, #196]	; (800c8a4 <UART_SetConfig+0x2e8>)
 800c7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c7e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c7ec:	d01a      	beq.n	800c824 <UART_SetConfig+0x268>
 800c7ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c7f2:	d81b      	bhi.n	800c82c <UART_SetConfig+0x270>
 800c7f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7f8:	d00c      	beq.n	800c814 <UART_SetConfig+0x258>
 800c7fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7fe:	d815      	bhi.n	800c82c <UART_SetConfig+0x270>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d003      	beq.n	800c80c <UART_SetConfig+0x250>
 800c804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c808:	d008      	beq.n	800c81c <UART_SetConfig+0x260>
 800c80a:	e00f      	b.n	800c82c <UART_SetConfig+0x270>
 800c80c:	2300      	movs	r3, #0
 800c80e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c812:	e012      	b.n	800c83a <UART_SetConfig+0x27e>
 800c814:	2302      	movs	r3, #2
 800c816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c81a:	e00e      	b.n	800c83a <UART_SetConfig+0x27e>
 800c81c:	2304      	movs	r3, #4
 800c81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c822:	e00a      	b.n	800c83a <UART_SetConfig+0x27e>
 800c824:	2308      	movs	r3, #8
 800c826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c82a:	e006      	b.n	800c83a <UART_SetConfig+0x27e>
 800c82c:	2310      	movs	r3, #16
 800c82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c832:	e002      	b.n	800c83a <UART_SetConfig+0x27e>
 800c834:	2310      	movs	r3, #16
 800c836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a17      	ldr	r2, [pc, #92]	; (800c89c <UART_SetConfig+0x2e0>)
 800c840:	4293      	cmp	r3, r2
 800c842:	f040 80a8 	bne.w	800c996 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c84a:	2b08      	cmp	r3, #8
 800c84c:	d834      	bhi.n	800c8b8 <UART_SetConfig+0x2fc>
 800c84e:	a201      	add	r2, pc, #4	; (adr r2, 800c854 <UART_SetConfig+0x298>)
 800c850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c854:	0800c879 	.word	0x0800c879
 800c858:	0800c8b9 	.word	0x0800c8b9
 800c85c:	0800c881 	.word	0x0800c881
 800c860:	0800c8b9 	.word	0x0800c8b9
 800c864:	0800c887 	.word	0x0800c887
 800c868:	0800c8b9 	.word	0x0800c8b9
 800c86c:	0800c8b9 	.word	0x0800c8b9
 800c870:	0800c8b9 	.word	0x0800c8b9
 800c874:	0800c88f 	.word	0x0800c88f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c878:	f7fd fc64 	bl	800a144 <HAL_RCC_GetPCLK1Freq>
 800c87c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c87e:	e021      	b.n	800c8c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c880:	4b0c      	ldr	r3, [pc, #48]	; (800c8b4 <UART_SetConfig+0x2f8>)
 800c882:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c884:	e01e      	b.n	800c8c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c886:	f7fd fbef 	bl	800a068 <HAL_RCC_GetSysClockFreq>
 800c88a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c88c:	e01a      	b.n	800c8c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c88e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c894:	e016      	b.n	800c8c4 <UART_SetConfig+0x308>
 800c896:	bf00      	nop
 800c898:	cfff69f3 	.word	0xcfff69f3
 800c89c:	40008000 	.word	0x40008000
 800c8a0:	40013800 	.word	0x40013800
 800c8a4:	40021000 	.word	0x40021000
 800c8a8:	40004400 	.word	0x40004400
 800c8ac:	40004800 	.word	0x40004800
 800c8b0:	40004c00 	.word	0x40004c00
 800c8b4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c8c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 812a 	beq.w	800cb20 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d0:	4a9e      	ldr	r2, [pc, #632]	; (800cb4c <UART_SetConfig+0x590>)
 800c8d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8de:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	005b      	lsls	r3, r3, #1
 800c8e8:	4413      	add	r3, r2
 800c8ea:	69ba      	ldr	r2, [r7, #24]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d305      	bcc.n	800c8fc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8f6:	69ba      	ldr	r2, [r7, #24]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d903      	bls.n	800c904 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c902:	e10d      	b.n	800cb20 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	2200      	movs	r2, #0
 800c908:	60bb      	str	r3, [r7, #8]
 800c90a:	60fa      	str	r2, [r7, #12]
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c910:	4a8e      	ldr	r2, [pc, #568]	; (800cb4c <UART_SetConfig+0x590>)
 800c912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c916:	b29b      	uxth	r3, r3
 800c918:	2200      	movs	r2, #0
 800c91a:	603b      	str	r3, [r7, #0]
 800c91c:	607a      	str	r2, [r7, #4]
 800c91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c926:	f7f4 f9d7 	bl	8000cd8 <__aeabi_uldivmod>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	4610      	mov	r0, r2
 800c930:	4619      	mov	r1, r3
 800c932:	f04f 0200 	mov.w	r2, #0
 800c936:	f04f 0300 	mov.w	r3, #0
 800c93a:	020b      	lsls	r3, r1, #8
 800c93c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c940:	0202      	lsls	r2, r0, #8
 800c942:	6979      	ldr	r1, [r7, #20]
 800c944:	6849      	ldr	r1, [r1, #4]
 800c946:	0849      	lsrs	r1, r1, #1
 800c948:	2000      	movs	r0, #0
 800c94a:	460c      	mov	r4, r1
 800c94c:	4605      	mov	r5, r0
 800c94e:	eb12 0804 	adds.w	r8, r2, r4
 800c952:	eb43 0905 	adc.w	r9, r3, r5
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	469a      	mov	sl, r3
 800c95e:	4693      	mov	fp, r2
 800c960:	4652      	mov	r2, sl
 800c962:	465b      	mov	r3, fp
 800c964:	4640      	mov	r0, r8
 800c966:	4649      	mov	r1, r9
 800c968:	f7f4 f9b6 	bl	8000cd8 <__aeabi_uldivmod>
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	4613      	mov	r3, r2
 800c972:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c97a:	d308      	bcc.n	800c98e <UART_SetConfig+0x3d2>
 800c97c:	6a3b      	ldr	r3, [r7, #32]
 800c97e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c982:	d204      	bcs.n	800c98e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	6a3a      	ldr	r2, [r7, #32]
 800c98a:	60da      	str	r2, [r3, #12]
 800c98c:	e0c8      	b.n	800cb20 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c994:	e0c4      	b.n	800cb20 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	69db      	ldr	r3, [r3, #28]
 800c99a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c99e:	d167      	bne.n	800ca70 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800c9a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c9a4:	2b08      	cmp	r3, #8
 800c9a6:	d828      	bhi.n	800c9fa <UART_SetConfig+0x43e>
 800c9a8:	a201      	add	r2, pc, #4	; (adr r2, 800c9b0 <UART_SetConfig+0x3f4>)
 800c9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ae:	bf00      	nop
 800c9b0:	0800c9d5 	.word	0x0800c9d5
 800c9b4:	0800c9dd 	.word	0x0800c9dd
 800c9b8:	0800c9e5 	.word	0x0800c9e5
 800c9bc:	0800c9fb 	.word	0x0800c9fb
 800c9c0:	0800c9eb 	.word	0x0800c9eb
 800c9c4:	0800c9fb 	.word	0x0800c9fb
 800c9c8:	0800c9fb 	.word	0x0800c9fb
 800c9cc:	0800c9fb 	.word	0x0800c9fb
 800c9d0:	0800c9f3 	.word	0x0800c9f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9d4:	f7fd fbb6 	bl	800a144 <HAL_RCC_GetPCLK1Freq>
 800c9d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c9da:	e014      	b.n	800ca06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9dc:	f7fd fbc8 	bl	800a170 <HAL_RCC_GetPCLK2Freq>
 800c9e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c9e2:	e010      	b.n	800ca06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9e4:	4b5a      	ldr	r3, [pc, #360]	; (800cb50 <UART_SetConfig+0x594>)
 800c9e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c9e8:	e00d      	b.n	800ca06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9ea:	f7fd fb3d 	bl	800a068 <HAL_RCC_GetSysClockFreq>
 800c9ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c9f0:	e009      	b.n	800ca06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c9f8:	e005      	b.n	800ca06 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ca04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 8089 	beq.w	800cb20 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca12:	4a4e      	ldr	r2, [pc, #312]	; (800cb4c <UART_SetConfig+0x590>)
 800ca14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca18:	461a      	mov	r2, r3
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca20:	005a      	lsls	r2, r3, #1
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	085b      	lsrs	r3, r3, #1
 800ca28:	441a      	add	r2, r3
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	2b0f      	cmp	r3, #15
 800ca38:	d916      	bls.n	800ca68 <UART_SetConfig+0x4ac>
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca40:	d212      	bcs.n	800ca68 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	f023 030f 	bic.w	r3, r3, #15
 800ca4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	085b      	lsrs	r3, r3, #1
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	f003 0307 	and.w	r3, r3, #7
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	8bfb      	ldrh	r3, [r7, #30]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	8bfa      	ldrh	r2, [r7, #30]
 800ca64:	60da      	str	r2, [r3, #12]
 800ca66:	e05b      	b.n	800cb20 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ca6e:	e057      	b.n	800cb20 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca74:	2b08      	cmp	r3, #8
 800ca76:	d828      	bhi.n	800caca <UART_SetConfig+0x50e>
 800ca78:	a201      	add	r2, pc, #4	; (adr r2, 800ca80 <UART_SetConfig+0x4c4>)
 800ca7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca7e:	bf00      	nop
 800ca80:	0800caa5 	.word	0x0800caa5
 800ca84:	0800caad 	.word	0x0800caad
 800ca88:	0800cab5 	.word	0x0800cab5
 800ca8c:	0800cacb 	.word	0x0800cacb
 800ca90:	0800cabb 	.word	0x0800cabb
 800ca94:	0800cacb 	.word	0x0800cacb
 800ca98:	0800cacb 	.word	0x0800cacb
 800ca9c:	0800cacb 	.word	0x0800cacb
 800caa0:	0800cac3 	.word	0x0800cac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800caa4:	f7fd fb4e 	bl	800a144 <HAL_RCC_GetPCLK1Freq>
 800caa8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800caaa:	e014      	b.n	800cad6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800caac:	f7fd fb60 	bl	800a170 <HAL_RCC_GetPCLK2Freq>
 800cab0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cab2:	e010      	b.n	800cad6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cab4:	4b26      	ldr	r3, [pc, #152]	; (800cb50 <UART_SetConfig+0x594>)
 800cab6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cab8:	e00d      	b.n	800cad6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800caba:	f7fd fad5 	bl	800a068 <HAL_RCC_GetSysClockFreq>
 800cabe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cac0:	e009      	b.n	800cad6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cac8:	e005      	b.n	800cad6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800caca:	2300      	movs	r3, #0
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cad4:	bf00      	nop
    }

    if (pclk != 0U)
 800cad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d021      	beq.n	800cb20 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae0:	4a1a      	ldr	r2, [pc, #104]	; (800cb4c <UART_SetConfig+0x590>)
 800cae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cae6:	461a      	mov	r2, r3
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	fbb3 f2f2 	udiv	r2, r3, r2
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	085b      	lsrs	r3, r3, #1
 800caf4:	441a      	add	r2, r3
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cafe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	2b0f      	cmp	r3, #15
 800cb04:	d909      	bls.n	800cb1a <UART_SetConfig+0x55e>
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb0c:	d205      	bcs.n	800cb1a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60da      	str	r2, [r3, #12]
 800cb18:	e002      	b.n	800cb20 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2200      	movs	r2, #0
 800cb34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cb3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3730      	adds	r7, #48	; 0x30
 800cb44:	46bd      	mov	sp, r7
 800cb46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb4a:	bf00      	nop
 800cb4c:	080178c0 	.word	0x080178c0
 800cb50:	00f42400 	.word	0x00f42400

0800cb54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb60:	f003 0308 	and.w	r3, r3, #8
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00a      	beq.n	800cb7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	430a      	orrs	r2, r1
 800cb7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	430a      	orrs	r2, r1
 800cb9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba4:	f003 0302 	and.w	r3, r3, #2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00a      	beq.n	800cbc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc6:	f003 0304 	and.w	r3, r3, #4
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00a      	beq.n	800cbe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	430a      	orrs	r2, r1
 800cbe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe8:	f003 0310 	and.w	r3, r3, #16
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00a      	beq.n	800cc06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	430a      	orrs	r2, r1
 800cc04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0a:	f003 0320 	and.w	r3, r3, #32
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00a      	beq.n	800cc28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	430a      	orrs	r2, r1
 800cc26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d01a      	beq.n	800cc6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc52:	d10a      	bne.n	800cc6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	430a      	orrs	r2, r1
 800cc68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00a      	beq.n	800cc8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	430a      	orrs	r2, r1
 800cc8a:	605a      	str	r2, [r3, #4]
  }
}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b098      	sub	sp, #96	; 0x60
 800cc9c:	af02      	add	r7, sp, #8
 800cc9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cca8:	f7f7 fff8 	bl	8004c9c <HAL_GetTick>
 800ccac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0308 	and.w	r3, r3, #8
 800ccb8:	2b08      	cmp	r3, #8
 800ccba:	d12f      	bne.n	800cd1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f88e 	bl	800cdec <UART_WaitOnFlagUntilTimeout>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d022      	beq.n	800cd1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccde:	e853 3f00 	ldrex	r3, [r3]
 800cce2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccea:	653b      	str	r3, [r7, #80]	; 0x50
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccf4:	647b      	str	r3, [r7, #68]	; 0x44
 800ccf6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ccfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e6      	bne.n	800ccd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2220      	movs	r2, #32
 800cd0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e063      	b.n	800cde4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f003 0304 	and.w	r3, r3, #4
 800cd26:	2b04      	cmp	r3, #4
 800cd28:	d149      	bne.n	800cdbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd32:	2200      	movs	r2, #0
 800cd34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 f857 	bl	800cdec <UART_WaitOnFlagUntilTimeout>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d03c      	beq.n	800cdbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	e853 3f00 	ldrex	r3, [r3]
 800cd50:	623b      	str	r3, [r7, #32]
   return(result);
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd62:	633b      	str	r3, [r7, #48]	; 0x30
 800cd64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd6a:	e841 2300 	strex	r3, r2, [r1]
 800cd6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1e6      	bne.n	800cd44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3308      	adds	r3, #8
 800cd7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	e853 3f00 	ldrex	r3, [r3]
 800cd84:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f023 0301 	bic.w	r3, r3, #1
 800cd8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3308      	adds	r3, #8
 800cd94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd96:	61fa      	str	r2, [r7, #28]
 800cd98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9a:	69b9      	ldr	r1, [r7, #24]
 800cd9c:	69fa      	ldr	r2, [r7, #28]
 800cd9e:	e841 2300 	strex	r3, r2, [r1]
 800cda2:	617b      	str	r3, [r7, #20]
   return(result);
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1e5      	bne.n	800cd76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2220      	movs	r2, #32
 800cdae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e012      	b.n	800cde4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2220      	movs	r2, #32
 800cdc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2220      	movs	r2, #32
 800cdca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3758      	adds	r7, #88	; 0x58
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	603b      	str	r3, [r7, #0]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdfc:	e04f      	b.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce04:	d04b      	beq.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce06:	f7f7 ff49 	bl	8004c9c <HAL_GetTick>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	69ba      	ldr	r2, [r7, #24]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d302      	bcc.n	800ce1c <UART_WaitOnFlagUntilTimeout+0x30>
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	e04e      	b.n	800cebe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0304 	and.w	r3, r3, #4
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d037      	beq.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b80      	cmp	r3, #128	; 0x80
 800ce32:	d034      	beq.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b40      	cmp	r3, #64	; 0x40
 800ce38:	d031      	beq.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	69db      	ldr	r3, [r3, #28]
 800ce40:	f003 0308 	and.w	r3, r3, #8
 800ce44:	2b08      	cmp	r3, #8
 800ce46:	d110      	bne.n	800ce6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2208      	movs	r2, #8
 800ce4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f000 f838 	bl	800cec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2208      	movs	r2, #8
 800ce5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ce66:	2301      	movs	r3, #1
 800ce68:	e029      	b.n	800cebe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	69db      	ldr	r3, [r3, #28]
 800ce70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce78:	d111      	bne.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f000 f81e 	bl	800cec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	e00f      	b.n	800cebe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	69da      	ldr	r2, [r3, #28]
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	4013      	ands	r3, r2
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	bf0c      	ite	eq
 800ceae:	2301      	moveq	r3, #1
 800ceb0:	2300      	movne	r3, #0
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	79fb      	ldrb	r3, [r7, #7]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d0a0      	beq.n	800cdfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cec6:	b480      	push	{r7}
 800cec8:	b095      	sub	sp, #84	; 0x54
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced6:	e853 3f00 	ldrex	r3, [r3]
 800ceda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	461a      	mov	r2, r3
 800ceea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceec:	643b      	str	r3, [r7, #64]	; 0x40
 800ceee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cef4:	e841 2300 	strex	r3, r2, [r1]
 800cef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d1e6      	bne.n	800cece <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	3308      	adds	r3, #8
 800cf06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	e853 3f00 	ldrex	r3, [r3]
 800cf0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf16:	f023 0301 	bic.w	r3, r3, #1
 800cf1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	3308      	adds	r3, #8
 800cf22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2c:	e841 2300 	strex	r3, r2, [r1]
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1e3      	bne.n	800cf00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d118      	bne.n	800cf72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	e853 3f00 	ldrex	r3, [r3]
 800cf4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	f023 0310 	bic.w	r3, r3, #16
 800cf54:	647b      	str	r3, [r7, #68]	; 0x44
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf5e:	61bb      	str	r3, [r7, #24]
 800cf60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf62:	6979      	ldr	r1, [r7, #20]
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	e841 2300 	strex	r3, r2, [r1]
 800cf6a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1e6      	bne.n	800cf40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2220      	movs	r2, #32
 800cf76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cf86:	bf00      	nop
 800cf88:	3754      	adds	r7, #84	; 0x54
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b085      	sub	sp, #20
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d101      	bne.n	800cfa8 <HAL_UARTEx_DisableFifoMode+0x16>
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	e027      	b.n	800cff8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2224      	movs	r2, #36	; 0x24
 800cfb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f022 0201 	bic.w	r2, r2, #1
 800cfce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cfd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68fa      	ldr	r2, [r7, #12]
 800cfe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2220      	movs	r2, #32
 800cfea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3714      	adds	r7, #20
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d014:	2b01      	cmp	r3, #1
 800d016:	d101      	bne.n	800d01c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d018:	2302      	movs	r3, #2
 800d01a:	e02d      	b.n	800d078 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2224      	movs	r2, #36	; 0x24
 800d028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f022 0201 	bic.w	r2, r2, #1
 800d042:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	430a      	orrs	r2, r1
 800d056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 f84f 	bl	800d0fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2220      	movs	r2, #32
 800d06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d090:	2b01      	cmp	r3, #1
 800d092:	d101      	bne.n	800d098 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d094:	2302      	movs	r3, #2
 800d096:	e02d      	b.n	800d0f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2224      	movs	r2, #36	; 0x24
 800d0a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f022 0201 	bic.w	r2, r2, #1
 800d0be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f811 	bl	800d0fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2220      	movs	r2, #32
 800d0e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d108      	bne.n	800d11e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d11c:	e031      	b.n	800d182 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d11e:	2308      	movs	r3, #8
 800d120:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d122:	2308      	movs	r3, #8
 800d124:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	0e5b      	lsrs	r3, r3, #25
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	f003 0307 	and.w	r3, r3, #7
 800d134:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	0f5b      	lsrs	r3, r3, #29
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	f003 0307 	and.w	r3, r3, #7
 800d144:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d146:	7bbb      	ldrb	r3, [r7, #14]
 800d148:	7b3a      	ldrb	r2, [r7, #12]
 800d14a:	4911      	ldr	r1, [pc, #68]	; (800d190 <UARTEx_SetNbDataToProcess+0x94>)
 800d14c:	5c8a      	ldrb	r2, [r1, r2]
 800d14e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d152:	7b3a      	ldrb	r2, [r7, #12]
 800d154:	490f      	ldr	r1, [pc, #60]	; (800d194 <UARTEx_SetNbDataToProcess+0x98>)
 800d156:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d158:	fb93 f3f2 	sdiv	r3, r3, r2
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d164:	7bfb      	ldrb	r3, [r7, #15]
 800d166:	7b7a      	ldrb	r2, [r7, #13]
 800d168:	4909      	ldr	r1, [pc, #36]	; (800d190 <UARTEx_SetNbDataToProcess+0x94>)
 800d16a:	5c8a      	ldrb	r2, [r1, r2]
 800d16c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d170:	7b7a      	ldrb	r2, [r7, #13]
 800d172:	4908      	ldr	r1, [pc, #32]	; (800d194 <UARTEx_SetNbDataToProcess+0x98>)
 800d174:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d176:	fb93 f3f2 	sdiv	r3, r3, r2
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d182:	bf00      	nop
 800d184:	3714      	adds	r7, #20
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	080178d8 	.word	0x080178d8
 800d194:	080178e0 	.word	0x080178e0

0800d198 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d1a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d1ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d1c6:	b480      	push	{r7}
 800d1c8:	b085      	sub	sp, #20
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d1ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d1d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	43db      	mvns	r3, r3
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d1ee:	2300      	movs	r3, #0
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3714      	adds	r7, #20
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	1d3b      	adds	r3, r7, #4
 800d206:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2200      	movs	r2, #0
 800d226:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3714      	adds	r7, #20
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d238:	b480      	push	{r7}
 800d23a:	b09d      	sub	sp, #116	; 0x74
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d242:	2300      	movs	r3, #0
 800d244:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	881b      	ldrh	r3, [r3, #0]
 800d254:	b29b      	uxth	r3, r3
 800d256:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d25e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	78db      	ldrb	r3, [r3, #3]
 800d266:	2b03      	cmp	r3, #3
 800d268:	d81f      	bhi.n	800d2aa <USB_ActivateEndpoint+0x72>
 800d26a:	a201      	add	r2, pc, #4	; (adr r2, 800d270 <USB_ActivateEndpoint+0x38>)
 800d26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d270:	0800d281 	.word	0x0800d281
 800d274:	0800d29d 	.word	0x0800d29d
 800d278:	0800d2b3 	.word	0x0800d2b3
 800d27c:	0800d28f 	.word	0x0800d28f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d280:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d288:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d28c:	e012      	b.n	800d2b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d28e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d292:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d296:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d29a:	e00b      	b.n	800d2b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d29c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d2a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d2a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d2a8:	e004      	b.n	800d2b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800d2b0:	e000      	b.n	800d2b4 <USB_ActivateEndpoint+0x7c>
      break;
 800d2b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	441a      	add	r2, r3
 800d2be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d2c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	881b      	ldrh	r3, [r3, #0]
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	b21b      	sxth	r3, r3
 800d2e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2ee:	b21a      	sxth	r2, r3
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b21b      	sxth	r3, r3
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	b21b      	sxth	r3, r3
 800d2fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	441a      	add	r2, r3
 800d308:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d30c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	7b1b      	ldrb	r3, [r3, #12]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f040 8178 	bne.w	800d61a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	785b      	ldrb	r3, [r3, #1]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 8084 	beq.w	800d43c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	61bb      	str	r3, [r7, #24]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d33e:	b29b      	uxth	r3, r3
 800d340:	461a      	mov	r2, r3
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	4413      	add	r3, r2
 800d346:	61bb      	str	r3, [r7, #24]
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	00da      	lsls	r2, r3, #3
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	4413      	add	r3, r2
 800d352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d356:	617b      	str	r3, [r7, #20]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	88db      	ldrh	r3, [r3, #6]
 800d35c:	085b      	lsrs	r3, r3, #1
 800d35e:	b29b      	uxth	r3, r3
 800d360:	005b      	lsls	r3, r3, #1
 800d362:	b29a      	uxth	r2, r3
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	827b      	strh	r3, [r7, #18]
 800d376:	8a7b      	ldrh	r3, [r7, #18]
 800d378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d01b      	beq.n	800d3b8 <USB_ActivateEndpoint+0x180>
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d396:	823b      	strh	r3, [r7, #16]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	441a      	add	r2, r3
 800d3a2:	8a3b      	ldrh	r3, [r7, #16]
 800d3a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	78db      	ldrb	r3, [r3, #3]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d020      	beq.n	800d402 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3d6:	81bb      	strh	r3, [r7, #12]
 800d3d8:	89bb      	ldrh	r3, [r7, #12]
 800d3da:	f083 0320 	eor.w	r3, r3, #32
 800d3de:	81bb      	strh	r3, [r7, #12]
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	441a      	add	r2, r3
 800d3ea:	89bb      	ldrh	r3, [r7, #12]
 800d3ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	8013      	strh	r3, [r2, #0]
 800d400:	e2d5      	b.n	800d9ae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	881b      	ldrh	r3, [r3, #0]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d418:	81fb      	strh	r3, [r7, #14]
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	441a      	add	r2, r3
 800d424:	89fb      	ldrh	r3, [r7, #14]
 800d426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d42a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d42e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d436:	b29b      	uxth	r3, r3
 800d438:	8013      	strh	r3, [r2, #0]
 800d43a:	e2b8      	b.n	800d9ae <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	633b      	str	r3, [r7, #48]	; 0x30
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d446:	b29b      	uxth	r3, r3
 800d448:	461a      	mov	r2, r3
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	4413      	add	r3, r2
 800d44e:	633b      	str	r3, [r7, #48]	; 0x30
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	00da      	lsls	r2, r3, #3
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	4413      	add	r3, r2
 800d45a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d45e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	88db      	ldrh	r3, [r3, #6]
 800d464:	085b      	lsrs	r3, r3, #1
 800d466:	b29b      	uxth	r3, r3
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	62bb      	str	r3, [r7, #40]	; 0x28
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	461a      	mov	r2, r3
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	4413      	add	r3, r2
 800d482:	62bb      	str	r3, [r7, #40]	; 0x28
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	00da      	lsls	r2, r3, #3
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	4413      	add	r3, r2
 800d48e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d492:	627b      	str	r3, [r7, #36]	; 0x24
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	b29b      	uxth	r3, r3
 800d49a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	801a      	strh	r2, [r3, #0]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	691b      	ldr	r3, [r3, #16]
 800d4a8:	2b3e      	cmp	r3, #62	; 0x3e
 800d4aa:	d91d      	bls.n	800d4e8 <USB_ActivateEndpoint+0x2b0>
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	691b      	ldr	r3, [r3, #16]
 800d4b0:	095b      	lsrs	r3, r3, #5
 800d4b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	691b      	ldr	r3, [r3, #16]
 800d4b8:	f003 031f 	and.w	r3, r3, #31
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d102      	bne.n	800d4c6 <USB_ActivateEndpoint+0x28e>
 800d4c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	029b      	lsls	r3, r3, #10
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e4:	801a      	strh	r2, [r3, #0]
 800d4e6:	e026      	b.n	800d536 <USB_ActivateEndpoint+0x2fe>
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	691b      	ldr	r3, [r3, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <USB_ActivateEndpoint+0x2ce>
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d502:	801a      	strh	r2, [r3, #0]
 800d504:	e017      	b.n	800d536 <USB_ActivateEndpoint+0x2fe>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	691b      	ldr	r3, [r3, #16]
 800d50a:	085b      	lsrs	r3, r3, #1
 800d50c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	2b00      	cmp	r3, #0
 800d518:	d002      	beq.n	800d520 <USB_ActivateEndpoint+0x2e8>
 800d51a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d51c:	3301      	adds	r3, #1
 800d51e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	b29a      	uxth	r2, r3
 800d526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d528:	b29b      	uxth	r3, r3
 800d52a:	029b      	lsls	r3, r3, #10
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	4313      	orrs	r3, r2
 800d530:	b29a      	uxth	r2, r3
 800d532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d534:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	4413      	add	r3, r2
 800d540:	881b      	ldrh	r3, [r3, #0]
 800d542:	847b      	strh	r3, [r7, #34]	; 0x22
 800d544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d01b      	beq.n	800d586 <USB_ActivateEndpoint+0x34e>
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	4413      	add	r3, r2
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d564:	843b      	strh	r3, [r7, #32]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	441a      	add	r2, r3
 800d570:	8c3b      	ldrh	r3, [r7, #32]
 800d572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d57a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d582:	b29b      	uxth	r3, r3
 800d584:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d124      	bne.n	800d5d8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4413      	add	r3, r2
 800d598:	881b      	ldrh	r3, [r3, #0]
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5a4:	83bb      	strh	r3, [r7, #28]
 800d5a6:	8bbb      	ldrh	r3, [r7, #28]
 800d5a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d5ac:	83bb      	strh	r3, [r7, #28]
 800d5ae:	8bbb      	ldrh	r3, [r7, #28]
 800d5b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d5b4:	83bb      	strh	r3, [r7, #28]
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	441a      	add	r2, r3
 800d5c0:	8bbb      	ldrh	r3, [r7, #28]
 800d5c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	8013      	strh	r3, [r2, #0]
 800d5d6:	e1ea      	b.n	800d9ae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	4413      	add	r3, r2
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5ee:	83fb      	strh	r3, [r7, #30]
 800d5f0:	8bfb      	ldrh	r3, [r7, #30]
 800d5f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d5f6:	83fb      	strh	r3, [r7, #30]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	441a      	add	r2, r3
 800d602:	8bfb      	ldrh	r3, [r7, #30]
 800d604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d60c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d614:	b29b      	uxth	r3, r3
 800d616:	8013      	strh	r3, [r2, #0]
 800d618:	e1c9      	b.n	800d9ae <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	78db      	ldrb	r3, [r3, #3]
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d11e      	bne.n	800d660 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4413      	add	r3, r2
 800d62c:	881b      	ldrh	r3, [r3, #0]
 800d62e:	b29b      	uxth	r3, r3
 800d630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d638:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	441a      	add	r2, r3
 800d646:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d64a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d64e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d652:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	8013      	strh	r3, [r2, #0]
 800d65e:	e01d      	b.n	800d69c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	4413      	add	r3, r2
 800d66a:	881b      	ldrh	r3, [r3, #0]
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d676:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	441a      	add	r2, r3
 800d684:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d68c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d698:	b29b      	uxth	r3, r3
 800d69a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ac:	4413      	add	r3, r2
 800d6ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	00da      	lsls	r2, r3, #3
 800d6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6b8:	4413      	add	r3, r2
 800d6ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6be:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	891b      	ldrh	r3, [r3, #8]
 800d6c4:	085b      	lsrs	r3, r3, #1
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6ce:	801a      	strh	r2, [r3, #0]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	657b      	str	r3, [r7, #84]	; 0x54
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	461a      	mov	r2, r3
 800d6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6e0:	4413      	add	r3, r2
 800d6e2:	657b      	str	r3, [r7, #84]	; 0x54
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	00da      	lsls	r2, r3, #3
 800d6ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6ec:	4413      	add	r3, r2
 800d6ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d6f2:	653b      	str	r3, [r7, #80]	; 0x50
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	895b      	ldrh	r3, [r3, #10]
 800d6f8:	085b      	lsrs	r3, r3, #1
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	005b      	lsls	r3, r3, #1
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d702:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	785b      	ldrb	r3, [r3, #1]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f040 8093 	bne.w	800d834 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d71e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d726:	2b00      	cmp	r3, #0
 800d728:	d01b      	beq.n	800d762 <USB_ActivateEndpoint+0x52a>
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4413      	add	r3, r2
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	b29b      	uxth	r3, r3
 800d738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d740:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	441a      	add	r2, r3
 800d74c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d74e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d75a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d75e:	b29b      	uxth	r3, r3
 800d760:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	4413      	add	r3, r2
 800d76c:	881b      	ldrh	r3, [r3, #0]
 800d76e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d770:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d776:	2b00      	cmp	r3, #0
 800d778:	d01b      	beq.n	800d7b2 <USB_ActivateEndpoint+0x57a>
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	4413      	add	r3, r2
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	b29b      	uxth	r3, r3
 800d788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d78c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d790:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	441a      	add	r2, r3
 800d79c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d79e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	4413      	add	r3, r2
 800d7bc:	881b      	ldrh	r3, [r3, #0]
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7c8:	873b      	strh	r3, [r7, #56]	; 0x38
 800d7ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d7cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d7d0:	873b      	strh	r3, [r7, #56]	; 0x38
 800d7d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d7d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d7d8:	873b      	strh	r3, [r7, #56]	; 0x38
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	441a      	add	r2, r3
 800d7e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d7e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	b29b      	uxth	r3, r3
 800d808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d80c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d810:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	441a      	add	r2, r3
 800d81c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d81e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d82a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d82e:	b29b      	uxth	r3, r3
 800d830:	8013      	strh	r3, [r2, #0]
 800d832:	e0bc      	b.n	800d9ae <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	4413      	add	r3, r2
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d844:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d01d      	beq.n	800d88c <USB_ActivateEndpoint+0x654>
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d866:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	441a      	add	r2, r3
 800d874:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d87c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d888:	b29b      	uxth	r3, r3
 800d88a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	4413      	add	r3, r2
 800d896:	881b      	ldrh	r3, [r3, #0]
 800d898:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d89c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d01d      	beq.n	800d8e4 <USB_ActivateEndpoint+0x6ac>
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	441a      	add	r2, r3
 800d8cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	78db      	ldrb	r3, [r3, #3]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d024      	beq.n	800d936 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d902:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d906:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d90a:	f083 0320 	eor.w	r3, r3, #32
 800d90e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	441a      	add	r2, r3
 800d91c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d92c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d930:	b29b      	uxth	r3, r3
 800d932:	8013      	strh	r3, [r2, #0]
 800d934:	e01d      	b.n	800d972 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4413      	add	r3, r2
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	b29b      	uxth	r3, r3
 800d944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d94c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	441a      	add	r2, r3
 800d95a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d95e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d96a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d96e:	b29b      	uxth	r3, r3
 800d970:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4413      	add	r3, r2
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d988:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	441a      	add	r2, r3
 800d996:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d9ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3774      	adds	r7, #116	; 0x74
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop

0800d9c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b08d      	sub	sp, #52	; 0x34
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	7b1b      	ldrb	r3, [r3, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f040 808e 	bne.w	800daf0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	785b      	ldrb	r3, [r3, #1]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d044      	beq.n	800da66 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	4413      	add	r3, r2
 800d9e6:	881b      	ldrh	r3, [r3, #0]
 800d9e8:	81bb      	strh	r3, [r7, #12]
 800d9ea:	89bb      	ldrh	r3, [r7, #12]
 800d9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d01b      	beq.n	800da2c <USB_DeactivateEndpoint+0x6c>
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29b      	uxth	r3, r3
 800da02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da0a:	817b      	strh	r3, [r7, #10]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	441a      	add	r2, r3
 800da16:	897b      	ldrh	r3, [r7, #10]
 800da18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800da28:	b29b      	uxth	r3, r3
 800da2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	4413      	add	r3, r2
 800da36:	881b      	ldrh	r3, [r3, #0]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da42:	813b      	strh	r3, [r7, #8]
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	441a      	add	r2, r3
 800da4e:	893b      	ldrh	r3, [r7, #8]
 800da50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da60:	b29b      	uxth	r3, r3
 800da62:	8013      	strh	r3, [r2, #0]
 800da64:	e192      	b.n	800dd8c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4413      	add	r3, r2
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	827b      	strh	r3, [r7, #18]
 800da74:	8a7b      	ldrh	r3, [r7, #18]
 800da76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d01b      	beq.n	800dab6 <USB_DeactivateEndpoint+0xf6>
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	009b      	lsls	r3, r3, #2
 800da86:	4413      	add	r3, r2
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da94:	823b      	strh	r3, [r7, #16]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	441a      	add	r2, r3
 800daa0:	8a3b      	ldrh	r3, [r7, #16]
 800daa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800daa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800daaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800daae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4413      	add	r3, r2
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dacc:	81fb      	strh	r3, [r7, #14]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	441a      	add	r2, r3
 800dad8:	89fb      	ldrh	r3, [r7, #14]
 800dada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daea:	b29b      	uxth	r3, r3
 800daec:	8013      	strh	r3, [r2, #0]
 800daee:	e14d      	b.n	800dd8c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	785b      	ldrb	r3, [r3, #1]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f040 80a5 	bne.w	800dc44 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	843b      	strh	r3, [r7, #32]
 800db08:	8c3b      	ldrh	r3, [r7, #32]
 800db0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d01b      	beq.n	800db4a <USB_DeactivateEndpoint+0x18a>
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4413      	add	r3, r2
 800db1c:	881b      	ldrh	r3, [r3, #0]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db28:	83fb      	strh	r3, [r7, #30]
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	441a      	add	r2, r3
 800db34:	8bfb      	ldrh	r3, [r7, #30]
 800db36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800db42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db46:	b29b      	uxth	r3, r3
 800db48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	881b      	ldrh	r3, [r3, #0]
 800db56:	83bb      	strh	r3, [r7, #28]
 800db58:	8bbb      	ldrh	r3, [r7, #28]
 800db5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d01b      	beq.n	800db9a <USB_DeactivateEndpoint+0x1da>
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	009b      	lsls	r3, r3, #2
 800db6a:	4413      	add	r3, r2
 800db6c:	881b      	ldrh	r3, [r3, #0]
 800db6e:	b29b      	uxth	r3, r3
 800db70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db78:	837b      	strh	r3, [r7, #26]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	441a      	add	r2, r3
 800db84:	8b7b      	ldrh	r3, [r7, #26]
 800db86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800db96:	b29b      	uxth	r3, r3
 800db98:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	881b      	ldrh	r3, [r3, #0]
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbb0:	833b      	strh	r3, [r7, #24]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	441a      	add	r2, r3
 800dbbc:	8b3b      	ldrh	r3, [r7, #24]
 800dbbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4413      	add	r3, r2
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbe8:	82fb      	strh	r3, [r7, #22]
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	441a      	add	r2, r3
 800dbf4:	8afb      	ldrh	r3, [r7, #22]
 800dbf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc20:	82bb      	strh	r3, [r7, #20]
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	441a      	add	r2, r3
 800dc2c:	8abb      	ldrh	r3, [r7, #20]
 800dc2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	8013      	strh	r3, [r2, #0]
 800dc42:	e0a3      	b.n	800dd8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dc52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d01b      	beq.n	800dc94 <USB_DeactivateEndpoint+0x2d4>
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	4413      	add	r3, r2
 800dc66:	881b      	ldrh	r3, [r3, #0]
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	441a      	add	r2, r3
 800dc7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dc8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	881b      	ldrh	r3, [r3, #0]
 800dca0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800dca2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d01b      	beq.n	800dce4 <USB_DeactivateEndpoint+0x324>
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	4413      	add	r3, r2
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcc2:	853b      	strh	r3, [r7, #40]	; 0x28
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	441a      	add	r2, r3
 800dcce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dcd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	4413      	add	r3, r2
 800dcee:	881b      	ldrh	r3, [r3, #0]
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcfa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	441a      	add	r2, r3
 800dd06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dd14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd32:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	441a      	add	r2, r3
 800dd3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	4413      	add	r3, r2
 800dd5e:	881b      	ldrh	r3, [r3, #0]
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd6a:	847b      	strh	r3, [r7, #34]	; 0x22
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	441a      	add	r2, r3
 800dd76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800dd8c:	2300      	movs	r3, #0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3734      	adds	r7, #52	; 0x34
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr

0800dd9a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b0c2      	sub	sp, #264	; 0x108
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dda4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dda8:	6018      	str	r0, [r3, #0]
 800ddaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddb2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ddb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	785b      	ldrb	r3, [r3, #1]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	f040 86b7 	bne.w	800eb34 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ddc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	699a      	ldr	r2, [r3, #24]
 800ddd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	691b      	ldr	r3, [r3, #16]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d908      	bls.n	800ddf4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800dde2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dde6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	691b      	ldr	r3, [r3, #16]
 800ddee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ddf2:	e007      	b.n	800de04 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ddf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800de04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	7b1b      	ldrb	r3, [r3, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d13a      	bne.n	800de8a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800de14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	6959      	ldr	r1, [r3, #20]
 800de20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	88da      	ldrh	r2, [r3, #6]
 800de2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de30:	b29b      	uxth	r3, r3
 800de32:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800de36:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800de3a:	6800      	ldr	r0, [r0, #0]
 800de3c:	f001 fc98 	bl	800f770 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800de40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	613b      	str	r3, [r7, #16]
 800de4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	461a      	mov	r2, r3
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	4413      	add	r3, r2
 800de62:	613b      	str	r3, [r7, #16]
 800de64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	00da      	lsls	r2, r3, #3
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	4413      	add	r3, r2
 800de76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de80:	b29a      	uxth	r2, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	801a      	strh	r2, [r3, #0]
 800de86:	f000 be1f 	b.w	800eac8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800de8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	78db      	ldrb	r3, [r3, #3]
 800de96:	2b02      	cmp	r3, #2
 800de98:	f040 8462 	bne.w	800e760 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800de9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6a1a      	ldr	r2, [r3, #32]
 800dea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800deac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	f240 83df 	bls.w	800e678 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800deba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800debe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	881b      	ldrh	r3, [r3, #0]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dedc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dee0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800dee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800def2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	441a      	add	r2, r3
 800defe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800df02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800df0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df12:	b29b      	uxth	r3, r3
 800df14:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800df16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	6a1a      	ldr	r2, [r3, #32]
 800df22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df26:	1ad2      	subs	r2, r2, r3
 800df28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800df34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	4413      	add	r3, r2
 800df4e:	881b      	ldrh	r3, [r3, #0]
 800df50:	b29b      	uxth	r3, r3
 800df52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df56:	2b00      	cmp	r3, #0
 800df58:	f000 81c7 	beq.w	800e2ea <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800df5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	633b      	str	r3, [r7, #48]	; 0x30
 800df68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	785b      	ldrb	r3, [r3, #1]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d177      	bne.n	800e068 <USB_EPStartXfer+0x2ce>
 800df78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	62bb      	str	r3, [r7, #40]	; 0x28
 800df84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df92:	b29b      	uxth	r3, r3
 800df94:	461a      	mov	r2, r3
 800df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df98:	4413      	add	r3, r2
 800df9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800df9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	00da      	lsls	r2, r3, #3
 800dfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfac:	4413      	add	r3, r2
 800dfae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dfb2:	627b      	str	r3, [r7, #36]	; 0x24
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	881b      	ldrh	r3, [r3, #0]
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc2:	801a      	strh	r2, [r3, #0]
 800dfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfc8:	2b3e      	cmp	r3, #62	; 0x3e
 800dfca:	d921      	bls.n	800e010 <USB_EPStartXfer+0x276>
 800dfcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfd0:	095b      	lsrs	r3, r3, #5
 800dfd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dfd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfda:	f003 031f 	and.w	r3, r3, #31
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d104      	bne.n	800dfec <USB_EPStartXfer+0x252>
 800dfe2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	029b      	lsls	r3, r3, #10
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	4313      	orrs	r3, r2
 800dffe:	b29b      	uxth	r3, r3
 800e000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e008:	b29a      	uxth	r2, r3
 800e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00c:	801a      	strh	r2, [r3, #0]
 800e00e:	e050      	b.n	800e0b2 <USB_EPStartXfer+0x318>
 800e010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10a      	bne.n	800e02e <USB_EPStartXfer+0x294>
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	881b      	ldrh	r3, [r3, #0]
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e026:	b29a      	uxth	r2, r3
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	801a      	strh	r2, [r3, #0]
 800e02c:	e041      	b.n	800e0b2 <USB_EPStartXfer+0x318>
 800e02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e032:	085b      	lsrs	r3, r3, #1
 800e034:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e03c:	f003 0301 	and.w	r3, r3, #1
 800e040:	2b00      	cmp	r3, #0
 800e042:	d004      	beq.n	800e04e <USB_EPStartXfer+0x2b4>
 800e044:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e048:	3301      	adds	r3, #1
 800e04a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	b29a      	uxth	r2, r3
 800e054:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e058:	b29b      	uxth	r3, r3
 800e05a:	029b      	lsls	r3, r3, #10
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	4313      	orrs	r3, r2
 800e060:	b29a      	uxth	r2, r3
 800e062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e064:	801a      	strh	r2, [r3, #0]
 800e066:	e024      	b.n	800e0b2 <USB_EPStartXfer+0x318>
 800e068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e06c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	785b      	ldrb	r3, [r3, #1]
 800e074:	2b01      	cmp	r3, #1
 800e076:	d11c      	bne.n	800e0b2 <USB_EPStartXfer+0x318>
 800e078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e07c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e086:	b29b      	uxth	r3, r3
 800e088:	461a      	mov	r2, r3
 800e08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08c:	4413      	add	r3, r2
 800e08e:	633b      	str	r3, [r7, #48]	; 0x30
 800e090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	00da      	lsls	r2, r3, #3
 800e09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	895b      	ldrh	r3, [r3, #10]
 800e0be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6959      	ldr	r1, [r3, #20]
 800e0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e0d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e0dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e0e0:	6800      	ldr	r0, [r0, #0]
 800e0e2:	f001 fb45 	bl	800f770 <USB_WritePMA>
            ep->xfer_buff += len;
 800e0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	695a      	ldr	r2, [r3, #20]
 800e0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0f6:	441a      	add	r2, r3
 800e0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6a1a      	ldr	r2, [r3, #32]
 800e110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	691b      	ldr	r3, [r3, #16]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d90f      	bls.n	800e140 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	6a1a      	ldr	r2, [r3, #32]
 800e12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e130:	1ad2      	subs	r2, r2, r3
 800e132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	621a      	str	r2, [r3, #32]
 800e13e:	e00e      	b.n	800e15e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	6a1b      	ldr	r3, [r3, #32]
 800e14c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2200      	movs	r2, #0
 800e15c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	785b      	ldrb	r3, [r3, #1]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d177      	bne.n	800e25e <USB_EPStartXfer+0x4c4>
 800e16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	61bb      	str	r3, [r7, #24]
 800e17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e17e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e188:	b29b      	uxth	r3, r3
 800e18a:	461a      	mov	r2, r3
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	4413      	add	r3, r2
 800e190:	61bb      	str	r3, [r7, #24]
 800e192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	00da      	lsls	r2, r3, #3
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e1a8:	617b      	str	r3, [r7, #20]
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	881b      	ldrh	r3, [r3, #0]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	801a      	strh	r2, [r3, #0]
 800e1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1be:	2b3e      	cmp	r3, #62	; 0x3e
 800e1c0:	d921      	bls.n	800e206 <USB_EPStartXfer+0x46c>
 800e1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1c6:	095b      	lsrs	r3, r3, #5
 800e1c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1d0:	f003 031f 	and.w	r3, r3, #31
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d104      	bne.n	800e1e2 <USB_EPStartXfer+0x448>
 800e1d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	029b      	lsls	r3, r3, #10
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	801a      	strh	r2, [r3, #0]
 800e204:	e056      	b.n	800e2b4 <USB_EPStartXfer+0x51a>
 800e206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10a      	bne.n	800e224 <USB_EPStartXfer+0x48a>
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	881b      	ldrh	r3, [r3, #0]
 800e212:	b29b      	uxth	r3, r3
 800e214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	801a      	strh	r2, [r3, #0]
 800e222:	e047      	b.n	800e2b4 <USB_EPStartXfer+0x51a>
 800e224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e228:	085b      	lsrs	r3, r3, #1
 800e22a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e232:	f003 0301 	and.w	r3, r3, #1
 800e236:	2b00      	cmp	r3, #0
 800e238:	d004      	beq.n	800e244 <USB_EPStartXfer+0x4aa>
 800e23a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e23e:	3301      	adds	r3, #1
 800e240:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	b29a      	uxth	r2, r3
 800e24a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e24e:	b29b      	uxth	r3, r3
 800e250:	029b      	lsls	r3, r3, #10
 800e252:	b29b      	uxth	r3, r3
 800e254:	4313      	orrs	r3, r2
 800e256:	b29a      	uxth	r2, r3
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	801a      	strh	r2, [r3, #0]
 800e25c:	e02a      	b.n	800e2b4 <USB_EPStartXfer+0x51a>
 800e25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	785b      	ldrb	r3, [r3, #1]
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d122      	bne.n	800e2b4 <USB_EPStartXfer+0x51a>
 800e26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	623b      	str	r3, [r7, #32]
 800e27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e27e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e288:	b29b      	uxth	r3, r3
 800e28a:	461a      	mov	r2, r3
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	4413      	add	r3, r2
 800e290:	623b      	str	r3, [r7, #32]
 800e292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	00da      	lsls	r2, r3, #3
 800e2a0:	6a3b      	ldr	r3, [r7, #32]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e2a8:	61fb      	str	r3, [r7, #28]
 800e2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	891b      	ldrh	r3, [r3, #8]
 800e2c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	6959      	ldr	r1, [r3, #20]
 800e2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e2da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e2de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e2e2:	6800      	ldr	r0, [r0, #0]
 800e2e4:	f001 fa44 	bl	800f770 <USB_WritePMA>
 800e2e8:	e3ee      	b.n	800eac8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	785b      	ldrb	r3, [r3, #1]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d177      	bne.n	800e3ea <USB_EPStartXfer+0x650>
 800e2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	64bb      	str	r3, [r7, #72]	; 0x48
 800e306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e30a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e314:	b29b      	uxth	r3, r3
 800e316:	461a      	mov	r2, r3
 800e318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e31a:	4413      	add	r3, r2
 800e31c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	00da      	lsls	r2, r3, #3
 800e32c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e32e:	4413      	add	r3, r2
 800e330:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e334:	647b      	str	r3, [r7, #68]	; 0x44
 800e336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e338:	881b      	ldrh	r3, [r3, #0]
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e340:	b29a      	uxth	r2, r3
 800e342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e344:	801a      	strh	r2, [r3, #0]
 800e346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e34a:	2b3e      	cmp	r3, #62	; 0x3e
 800e34c:	d921      	bls.n	800e392 <USB_EPStartXfer+0x5f8>
 800e34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e352:	095b      	lsrs	r3, r3, #5
 800e354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e35c:	f003 031f 	and.w	r3, r3, #31
 800e360:	2b00      	cmp	r3, #0
 800e362:	d104      	bne.n	800e36e <USB_EPStartXfer+0x5d4>
 800e364:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e368:	3b01      	subs	r3, #1
 800e36a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e370:	881b      	ldrh	r3, [r3, #0]
 800e372:	b29a      	uxth	r2, r3
 800e374:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e378:	b29b      	uxth	r3, r3
 800e37a:	029b      	lsls	r3, r3, #10
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	4313      	orrs	r3, r2
 800e380:	b29b      	uxth	r3, r3
 800e382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e38e:	801a      	strh	r2, [r3, #0]
 800e390:	e056      	b.n	800e440 <USB_EPStartXfer+0x6a6>
 800e392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10a      	bne.n	800e3b0 <USB_EPStartXfer+0x616>
 800e39a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e39c:	881b      	ldrh	r3, [r3, #0]
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3ac:	801a      	strh	r2, [r3, #0]
 800e3ae:	e047      	b.n	800e440 <USB_EPStartXfer+0x6a6>
 800e3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3b4:	085b      	lsrs	r3, r3, #1
 800e3b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d004      	beq.n	800e3d0 <USB_EPStartXfer+0x636>
 800e3c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	029b      	lsls	r3, r3, #10
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3e6:	801a      	strh	r2, [r3, #0]
 800e3e8:	e02a      	b.n	800e440 <USB_EPStartXfer+0x6a6>
 800e3ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	785b      	ldrb	r3, [r3, #1]
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d122      	bne.n	800e440 <USB_EPStartXfer+0x6a6>
 800e3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	653b      	str	r3, [r7, #80]	; 0x50
 800e406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e40a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e414:	b29b      	uxth	r3, r3
 800e416:	461a      	mov	r2, r3
 800e418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e41a:	4413      	add	r3, r2
 800e41c:	653b      	str	r3, [r7, #80]	; 0x50
 800e41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	00da      	lsls	r2, r3, #3
 800e42c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e42e:	4413      	add	r3, r2
 800e430:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e434:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e43e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	891b      	ldrh	r3, [r3, #8]
 800e44c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	6959      	ldr	r1, [r3, #20]
 800e45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e460:	b29b      	uxth	r3, r3
 800e462:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e466:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e46a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e46e:	6800      	ldr	r0, [r0, #0]
 800e470:	f001 f97e 	bl	800f770 <USB_WritePMA>
            ep->xfer_buff += len;
 800e474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	695a      	ldr	r2, [r3, #20]
 800e480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e484:	441a      	add	r2, r3
 800e486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e48a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6a1a      	ldr	r2, [r3, #32]
 800e49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d90f      	bls.n	800e4ce <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	6a1a      	ldr	r2, [r3, #32]
 800e4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4be:	1ad2      	subs	r2, r2, r3
 800e4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	621a      	str	r2, [r3, #32]
 800e4cc:	e00e      	b.n	800e4ec <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e4ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6a1b      	ldr	r3, [r3, #32]
 800e4da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	643b      	str	r3, [r7, #64]	; 0x40
 800e4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	785b      	ldrb	r3, [r3, #1]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d177      	bne.n	800e5f8 <USB_EPStartXfer+0x85e>
 800e508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e50c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	63bb      	str	r3, [r7, #56]	; 0x38
 800e514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e522:	b29b      	uxth	r3, r3
 800e524:	461a      	mov	r2, r3
 800e526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e528:	4413      	add	r3, r2
 800e52a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	00da      	lsls	r2, r3, #3
 800e53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53c:	4413      	add	r3, r2
 800e53e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e542:	637b      	str	r3, [r7, #52]	; 0x34
 800e544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e546:	881b      	ldrh	r3, [r3, #0]
 800e548:	b29b      	uxth	r3, r3
 800e54a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e54e:	b29a      	uxth	r2, r3
 800e550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e552:	801a      	strh	r2, [r3, #0]
 800e554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e558:	2b3e      	cmp	r3, #62	; 0x3e
 800e55a:	d921      	bls.n	800e5a0 <USB_EPStartXfer+0x806>
 800e55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e560:	095b      	lsrs	r3, r3, #5
 800e562:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e56a:	f003 031f 	and.w	r3, r3, #31
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d104      	bne.n	800e57c <USB_EPStartXfer+0x7e2>
 800e572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e576:	3b01      	subs	r3, #1
 800e578:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57e:	881b      	ldrh	r3, [r3, #0]
 800e580:	b29a      	uxth	r2, r3
 800e582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e586:	b29b      	uxth	r3, r3
 800e588:	029b      	lsls	r3, r3, #10
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	4313      	orrs	r3, r2
 800e58e:	b29b      	uxth	r3, r3
 800e590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e598:	b29a      	uxth	r2, r3
 800e59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e59c:	801a      	strh	r2, [r3, #0]
 800e59e:	e050      	b.n	800e642 <USB_EPStartXfer+0x8a8>
 800e5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10a      	bne.n	800e5be <USB_EPStartXfer+0x824>
 800e5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5aa:	881b      	ldrh	r3, [r3, #0]
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5b6:	b29a      	uxth	r2, r3
 800e5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ba:	801a      	strh	r2, [r3, #0]
 800e5bc:	e041      	b.n	800e642 <USB_EPStartXfer+0x8a8>
 800e5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5c2:	085b      	lsrs	r3, r3, #1
 800e5c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5cc:	f003 0301 	and.w	r3, r3, #1
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d004      	beq.n	800e5de <USB_EPStartXfer+0x844>
 800e5d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5d8:	3301      	adds	r3, #1
 800e5da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	b29a      	uxth	r2, r3
 800e5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	029b      	lsls	r3, r3, #10
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f4:	801a      	strh	r2, [r3, #0]
 800e5f6:	e024      	b.n	800e642 <USB_EPStartXfer+0x8a8>
 800e5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	785b      	ldrb	r3, [r3, #1]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d11c      	bne.n	800e642 <USB_EPStartXfer+0x8a8>
 800e608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e60c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e616:	b29b      	uxth	r3, r3
 800e618:	461a      	mov	r2, r3
 800e61a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e61c:	4413      	add	r3, r2
 800e61e:	643b      	str	r3, [r7, #64]	; 0x40
 800e620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	00da      	lsls	r2, r3, #3
 800e62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e630:	4413      	add	r3, r2
 800e632:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e636:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e640:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	895b      	ldrh	r3, [r3, #10]
 800e64e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6959      	ldr	r1, [r3, #20]
 800e65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e662:	b29b      	uxth	r3, r3
 800e664:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e668:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e66c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e670:	6800      	ldr	r0, [r0, #0]
 800e672:	f001 f87d 	bl	800f770 <USB_WritePMA>
 800e676:	e227      	b.n	800eac8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6a1b      	ldr	r3, [r3, #32]
 800e684:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e68c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	4413      	add	r3, r2
 800e6a2:	881b      	ldrh	r3, [r3, #0]
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e6aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	441a      	add	r2, r3
 800e6cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e6d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	461a      	mov	r2, r3
 800e702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e704:	4413      	add	r3, r2
 800e706:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e70c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	00da      	lsls	r2, r3, #3
 800e716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e718:	4413      	add	r3, r2
 800e71a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e71e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e724:	b29a      	uxth	r2, r3
 800e726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e728:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e72e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	891b      	ldrh	r3, [r3, #8]
 800e736:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e73e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	6959      	ldr	r1, [r3, #20]
 800e746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e750:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e754:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e758:	6800      	ldr	r0, [r0, #0]
 800e75a:	f001 f809 	bl	800f770 <USB_WritePMA>
 800e75e:	e1b3      	b.n	800eac8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	6a1a      	ldr	r2, [r3, #32]
 800e76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e770:	1ad2      	subs	r2, r2, r3
 800e772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e78c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	4413      	add	r3, r2
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f000 80c6 	beq.w	800e932 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	673b      	str	r3, [r7, #112]	; 0x70
 800e7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	785b      	ldrb	r3, [r3, #1]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d177      	bne.n	800e8b2 <USB_EPStartXfer+0xb18>
 800e7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	461a      	mov	r2, r3
 800e7e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7e2:	4413      	add	r3, r2
 800e7e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	00da      	lsls	r2, r3, #3
 800e7f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e7fc:	667b      	str	r3, [r7, #100]	; 0x64
 800e7fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e800:	881b      	ldrh	r3, [r3, #0]
 800e802:	b29b      	uxth	r3, r3
 800e804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e808:	b29a      	uxth	r2, r3
 800e80a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e80c:	801a      	strh	r2, [r3, #0]
 800e80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e812:	2b3e      	cmp	r3, #62	; 0x3e
 800e814:	d921      	bls.n	800e85a <USB_EPStartXfer+0xac0>
 800e816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e81a:	095b      	lsrs	r3, r3, #5
 800e81c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e824:	f003 031f 	and.w	r3, r3, #31
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d104      	bne.n	800e836 <USB_EPStartXfer+0xa9c>
 800e82c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e830:	3b01      	subs	r3, #1
 800e832:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e838:	881b      	ldrh	r3, [r3, #0]
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e840:	b29b      	uxth	r3, r3
 800e842:	029b      	lsls	r3, r3, #10
 800e844:	b29b      	uxth	r3, r3
 800e846:	4313      	orrs	r3, r2
 800e848:	b29b      	uxth	r3, r3
 800e84a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e84e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e852:	b29a      	uxth	r2, r3
 800e854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e856:	801a      	strh	r2, [r3, #0]
 800e858:	e050      	b.n	800e8fc <USB_EPStartXfer+0xb62>
 800e85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d10a      	bne.n	800e878 <USB_EPStartXfer+0xade>
 800e862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e864:	881b      	ldrh	r3, [r3, #0]
 800e866:	b29b      	uxth	r3, r3
 800e868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e86c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e870:	b29a      	uxth	r2, r3
 800e872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e874:	801a      	strh	r2, [r3, #0]
 800e876:	e041      	b.n	800e8fc <USB_EPStartXfer+0xb62>
 800e878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e87c:	085b      	lsrs	r3, r3, #1
 800e87e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e886:	f003 0301 	and.w	r3, r3, #1
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d004      	beq.n	800e898 <USB_EPStartXfer+0xafe>
 800e88e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e892:	3301      	adds	r3, #1
 800e894:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e89a:	881b      	ldrh	r3, [r3, #0]
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	029b      	lsls	r3, r3, #10
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ae:	801a      	strh	r2, [r3, #0]
 800e8b0:	e024      	b.n	800e8fc <USB_EPStartXfer+0xb62>
 800e8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	785b      	ldrb	r3, [r3, #1]
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d11c      	bne.n	800e8fc <USB_EPStartXfer+0xb62>
 800e8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8d6:	4413      	add	r3, r2
 800e8d8:	673b      	str	r3, [r7, #112]	; 0x70
 800e8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	00da      	lsls	r2, r3, #3
 800e8e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8ea:	4413      	add	r3, r2
 800e8ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e8f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	895b      	ldrh	r3, [r3, #10]
 800e908:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6959      	ldr	r1, [r3, #20]
 800e918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e922:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e926:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e92a:	6800      	ldr	r0, [r0, #0]
 800e92c:	f000 ff20 	bl	800f770 <USB_WritePMA>
 800e930:	e0ca      	b.n	800eac8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	785b      	ldrb	r3, [r3, #1]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d177      	bne.n	800ea32 <USB_EPStartXfer+0xc98>
 800e942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	461a      	mov	r2, r3
 800e960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e962:	4413      	add	r3, r2
 800e964:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e96a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	00da      	lsls	r2, r3, #3
 800e974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e976:	4413      	add	r3, r2
 800e978:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e97c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e97e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e980:	881b      	ldrh	r3, [r3, #0]
 800e982:	b29b      	uxth	r3, r3
 800e984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e988:	b29a      	uxth	r2, r3
 800e98a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e98c:	801a      	strh	r2, [r3, #0]
 800e98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e992:	2b3e      	cmp	r3, #62	; 0x3e
 800e994:	d921      	bls.n	800e9da <USB_EPStartXfer+0xc40>
 800e996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e99a:	095b      	lsrs	r3, r3, #5
 800e99c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9a4:	f003 031f 	and.w	r3, r3, #31
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d104      	bne.n	800e9b6 <USB_EPStartXfer+0xc1c>
 800e9ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e9b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	029b      	lsls	r3, r3, #10
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9d6:	801a      	strh	r2, [r3, #0]
 800e9d8:	e05c      	b.n	800ea94 <USB_EPStartXfer+0xcfa>
 800e9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d10a      	bne.n	800e9f8 <USB_EPStartXfer+0xc5e>
 800e9e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9e4:	881b      	ldrh	r3, [r3, #0]
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9f4:	801a      	strh	r2, [r3, #0]
 800e9f6:	e04d      	b.n	800ea94 <USB_EPStartXfer+0xcfa>
 800e9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9fc:	085b      	lsrs	r3, r3, #1
 800e9fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ea02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea06:	f003 0301 	and.w	r3, r3, #1
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d004      	beq.n	800ea18 <USB_EPStartXfer+0xc7e>
 800ea0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ea12:	3301      	adds	r3, #1
 800ea14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ea18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea1a:	881b      	ldrh	r3, [r3, #0]
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	029b      	lsls	r3, r3, #10
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea2e:	801a      	strh	r2, [r3, #0]
 800ea30:	e030      	b.n	800ea94 <USB_EPStartXfer+0xcfa>
 800ea32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	785b      	ldrb	r3, [r3, #1]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d128      	bne.n	800ea94 <USB_EPStartXfer+0xcfa>
 800ea42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ea50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	461a      	mov	r2, r3
 800ea62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea66:	4413      	add	r3, r2
 800ea68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ea6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	00da      	lsls	r2, r3, #3
 800ea7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea7e:	4413      	add	r3, r2
 800ea80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ea84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ea94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	891b      	ldrh	r3, [r3, #8]
 800eaa0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eaa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	6959      	ldr	r1, [r3, #20]
 800eab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800eaba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eabe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eac2:	6800      	ldr	r0, [r0, #0]
 800eac4:	f000 fe54 	bl	800f770 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800eac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eacc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ead6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	4413      	add	r3, r2
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eaea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaee:	817b      	strh	r3, [r7, #10]
 800eaf0:	897b      	ldrh	r3, [r7, #10]
 800eaf2:	f083 0310 	eor.w	r3, r3, #16
 800eaf6:	817b      	strh	r3, [r7, #10]
 800eaf8:	897b      	ldrh	r3, [r7, #10]
 800eafa:	f083 0320 	eor.w	r3, r3, #32
 800eafe:	817b      	strh	r3, [r7, #10]
 800eb00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	441a      	add	r2, r3
 800eb1a:	897b      	ldrh	r3, [r7, #10]
 800eb1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	8013      	strh	r3, [r2, #0]
 800eb30:	f000 bcde 	b.w	800f4f0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800eb34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	7b1b      	ldrb	r3, [r3, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f040 80bb 	bne.w	800ecbc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800eb46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	699a      	ldr	r2, [r3, #24]
 800eb52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d917      	bls.n	800eb92 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800eb62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	691b      	ldr	r3, [r3, #16]
 800eb6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800eb72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	699a      	ldr	r2, [r3, #24]
 800eb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb82:	1ad2      	subs	r2, r2, r3
 800eb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	619a      	str	r2, [r3, #24]
 800eb90:	e00e      	b.n	800ebb0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800eb92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	699b      	ldr	r3, [r3, #24]
 800eb9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800eba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2200      	movs	r2, #0
 800ebae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ebb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ebbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	461a      	mov	r2, r3
 800ebd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ebd4:	4413      	add	r3, r2
 800ebd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ebda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	00da      	lsls	r2, r3, #3
 800ebe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ebec:	4413      	add	r3, r2
 800ebee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ebf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ebf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ebfa:	881b      	ldrh	r3, [r3, #0]
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec08:	801a      	strh	r2, [r3, #0]
 800ec0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec0e:	2b3e      	cmp	r3, #62	; 0x3e
 800ec10:	d924      	bls.n	800ec5c <USB_EPStartXfer+0xec2>
 800ec12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec16:	095b      	lsrs	r3, r3, #5
 800ec18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ec1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec20:	f003 031f 	and.w	r3, r3, #31
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d104      	bne.n	800ec32 <USB_EPStartXfer+0xe98>
 800ec28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ec32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec36:	881b      	ldrh	r3, [r3, #0]
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	029b      	lsls	r3, r3, #10
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	4313      	orrs	r3, r2
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec56:	801a      	strh	r2, [r3, #0]
 800ec58:	f000 bc10 	b.w	800f47c <USB_EPStartXfer+0x16e2>
 800ec5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d10c      	bne.n	800ec7e <USB_EPStartXfer+0xee4>
 800ec64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec7a:	801a      	strh	r2, [r3, #0]
 800ec7c:	e3fe      	b.n	800f47c <USB_EPStartXfer+0x16e2>
 800ec7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec82:	085b      	lsrs	r3, r3, #1
 800ec84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ec88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec8c:	f003 0301 	and.w	r3, r3, #1
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d004      	beq.n	800ec9e <USB_EPStartXfer+0xf04>
 800ec94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ec98:	3301      	adds	r3, #1
 800ec9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ec9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eca2:	881b      	ldrh	r3, [r3, #0]
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	029b      	lsls	r3, r3, #10
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ecb8:	801a      	strh	r2, [r3, #0]
 800ecba:	e3df      	b.n	800f47c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ecbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	78db      	ldrb	r3, [r3, #3]
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	f040 8218 	bne.w	800f0fe <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ecce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	785b      	ldrb	r3, [r3, #1]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f040 809d 	bne.w	800ee1a <USB_EPStartXfer+0x1080>
 800ece0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ece4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ecee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	461a      	mov	r2, r3
 800ed00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ed04:	4413      	add	r3, r2
 800ed06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ed0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	00da      	lsls	r2, r3, #3
 800ed18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ed1c:	4413      	add	r3, r2
 800ed1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ed22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ed26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ed2a:	881b      	ldrh	r3, [r3, #0]
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ed38:	801a      	strh	r2, [r3, #0]
 800ed3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	2b3e      	cmp	r3, #62	; 0x3e
 800ed48:	d92b      	bls.n	800eda2 <USB_EPStartXfer+0x1008>
 800ed4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	095b      	lsrs	r3, r3, #5
 800ed58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ed5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	691b      	ldr	r3, [r3, #16]
 800ed68:	f003 031f 	and.w	r3, r3, #31
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d104      	bne.n	800ed7a <USB_EPStartXfer+0xfe0>
 800ed70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed74:	3b01      	subs	r3, #1
 800ed76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ed7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ed7e:	881b      	ldrh	r3, [r3, #0]
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	029b      	lsls	r3, r3, #10
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ed9e:	801a      	strh	r2, [r3, #0]
 800eda0:	e070      	b.n	800ee84 <USB_EPStartXfer+0x10ea>
 800eda2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eda6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10c      	bne.n	800edcc <USB_EPStartXfer+0x1032>
 800edb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	b29b      	uxth	r3, r3
 800edba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800edc8:	801a      	strh	r2, [r3, #0]
 800edca:	e05b      	b.n	800ee84 <USB_EPStartXfer+0x10ea>
 800edcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	085b      	lsrs	r3, r3, #1
 800edda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800edde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ede2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	691b      	ldr	r3, [r3, #16]
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d004      	beq.n	800edfc <USB_EPStartXfer+0x1062>
 800edf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edf6:	3301      	adds	r3, #1
 800edf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800edfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee00:	881b      	ldrh	r3, [r3, #0]
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	029b      	lsls	r3, r3, #10
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee16:	801a      	strh	r2, [r3, #0]
 800ee18:	e034      	b.n	800ee84 <USB_EPStartXfer+0x10ea>
 800ee1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	785b      	ldrb	r3, [r3, #1]
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d12c      	bne.n	800ee84 <USB_EPStartXfer+0x10ea>
 800ee2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	461a      	mov	r2, r3
 800ee4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ee4e:	4413      	add	r3, r2
 800ee50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	00da      	lsls	r2, r3, #3
 800ee62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ee66:	4413      	add	r3, r2
 800ee68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ee70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	691b      	ldr	r3, [r3, #16]
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ee82:	801a      	strh	r2, [r3, #0]
 800ee84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ee92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	785b      	ldrb	r3, [r3, #1]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f040 809d 	bne.w	800efde <USB_EPStartXfer+0x1244>
 800eea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eeb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	461a      	mov	r2, r3
 800eec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eec8:	4413      	add	r3, r2
 800eeca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	00da      	lsls	r2, r3, #3
 800eedc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eee0:	4413      	add	r3, r2
 800eee2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eee6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eeea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eeee:	881b      	ldrh	r3, [r3, #0]
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eefc:	801a      	strh	r2, [r3, #0]
 800eefe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	2b3e      	cmp	r3, #62	; 0x3e
 800ef0c:	d92b      	bls.n	800ef66 <USB_EPStartXfer+0x11cc>
 800ef0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	691b      	ldr	r3, [r3, #16]
 800ef1a:	095b      	lsrs	r3, r3, #5
 800ef1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	691b      	ldr	r3, [r3, #16]
 800ef2c:	f003 031f 	and.w	r3, r3, #31
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d104      	bne.n	800ef3e <USB_EPStartXfer+0x11a4>
 800ef34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef38:	3b01      	subs	r3, #1
 800ef3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef42:	881b      	ldrh	r3, [r3, #0]
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	029b      	lsls	r3, r3, #10
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	4313      	orrs	r3, r2
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef62:	801a      	strh	r2, [r3, #0]
 800ef64:	e069      	b.n	800f03a <USB_EPStartXfer+0x12a0>
 800ef66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	691b      	ldr	r3, [r3, #16]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d10c      	bne.n	800ef90 <USB_EPStartXfer+0x11f6>
 800ef76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef7a:	881b      	ldrh	r3, [r3, #0]
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef8c:	801a      	strh	r2, [r3, #0]
 800ef8e:	e054      	b.n	800f03a <USB_EPStartXfer+0x12a0>
 800ef90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	691b      	ldr	r3, [r3, #16]
 800ef9c:	085b      	lsrs	r3, r3, #1
 800ef9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800efa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	f003 0301 	and.w	r3, r3, #1
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d004      	beq.n	800efc0 <USB_EPStartXfer+0x1226>
 800efb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efba:	3301      	adds	r3, #1
 800efbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800efc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efcc:	b29b      	uxth	r3, r3
 800efce:	029b      	lsls	r3, r3, #10
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	4313      	orrs	r3, r2
 800efd4:	b29a      	uxth	r2, r3
 800efd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800efda:	801a      	strh	r2, [r3, #0]
 800efdc:	e02d      	b.n	800f03a <USB_EPStartXfer+0x12a0>
 800efde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	785b      	ldrb	r3, [r3, #1]
 800efea:	2b01      	cmp	r3, #1
 800efec:	d125      	bne.n	800f03a <USB_EPStartXfer+0x12a0>
 800efee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800effc:	b29b      	uxth	r3, r3
 800effe:	461a      	mov	r2, r3
 800f000:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f004:	4413      	add	r3, r2
 800f006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	00da      	lsls	r2, r3, #3
 800f018:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f01c:	4413      	add	r3, r2
 800f01e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f02a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	b29a      	uxth	r2, r3
 800f034:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f038:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f03e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	69db      	ldr	r3, [r3, #28]
 800f046:	2b00      	cmp	r3, #0
 800f048:	f000 8218 	beq.w	800f47c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f04c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f050:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	4413      	add	r3, r2
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f06c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f074:	2b00      	cmp	r3, #0
 800f076:	d005      	beq.n	800f084 <USB_EPStartXfer+0x12ea>
 800f078:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10d      	bne.n	800f0a0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f084:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f040 81f5 	bne.w	800f47c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f092:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	f040 81ee 	bne.w	800f47c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f0a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	4413      	add	r3, r2
 800f0ba:	881b      	ldrh	r3, [r3, #0]
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0c6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	441a      	add	r2, r3
 800f0e4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f0e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	8013      	strh	r3, [r2, #0]
 800f0fc:	e1be      	b.n	800f47c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	78db      	ldrb	r3, [r3, #3]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	f040 81b4 	bne.w	800f478 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	699a      	ldr	r2, [r3, #24]
 800f11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	691b      	ldr	r3, [r3, #16]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d917      	bls.n	800f15c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f12c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	691b      	ldr	r3, [r3, #16]
 800f138:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800f13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	699a      	ldr	r2, [r3, #24]
 800f148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f14c:	1ad2      	subs	r2, r2, r3
 800f14e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	619a      	str	r2, [r3, #24]
 800f15a:	e00e      	b.n	800f17a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	699b      	ldr	r3, [r3, #24]
 800f168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800f16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2200      	movs	r2, #0
 800f178:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	785b      	ldrb	r3, [r3, #1]
 800f186:	2b00      	cmp	r3, #0
 800f188:	f040 8085 	bne.w	800f296 <USB_EPStartXfer+0x14fc>
 800f18c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f19e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f1b0:	4413      	add	r3, r2
 800f1b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	00da      	lsls	r2, r3, #3
 800f1c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f1c8:	4413      	add	r3, r2
 800f1ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f1ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f1d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f1e4:	801a      	strh	r2, [r3, #0]
 800f1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1ea:	2b3e      	cmp	r3, #62	; 0x3e
 800f1ec:	d923      	bls.n	800f236 <USB_EPStartXfer+0x149c>
 800f1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1f2:	095b      	lsrs	r3, r3, #5
 800f1f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1fc:	f003 031f 	and.w	r3, r3, #31
 800f200:	2b00      	cmp	r3, #0
 800f202:	d104      	bne.n	800f20e <USB_EPStartXfer+0x1474>
 800f204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f208:	3b01      	subs	r3, #1
 800f20a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f20e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f212:	881b      	ldrh	r3, [r3, #0]
 800f214:	b29a      	uxth	r2, r3
 800f216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	029b      	lsls	r3, r3, #10
 800f21e:	b29b      	uxth	r3, r3
 800f220:	4313      	orrs	r3, r2
 800f222:	b29b      	uxth	r3, r3
 800f224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f232:	801a      	strh	r2, [r3, #0]
 800f234:	e060      	b.n	800f2f8 <USB_EPStartXfer+0x155e>
 800f236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d10c      	bne.n	800f258 <USB_EPStartXfer+0x14be>
 800f23e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	b29b      	uxth	r3, r3
 800f246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f24a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f24e:	b29a      	uxth	r2, r3
 800f250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f254:	801a      	strh	r2, [r3, #0]
 800f256:	e04f      	b.n	800f2f8 <USB_EPStartXfer+0x155e>
 800f258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f25c:	085b      	lsrs	r3, r3, #1
 800f25e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f266:	f003 0301 	and.w	r3, r3, #1
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d004      	beq.n	800f278 <USB_EPStartXfer+0x14de>
 800f26e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f272:	3301      	adds	r3, #1
 800f274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f27c:	881b      	ldrh	r3, [r3, #0]
 800f27e:	b29a      	uxth	r2, r3
 800f280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f284:	b29b      	uxth	r3, r3
 800f286:	029b      	lsls	r3, r3, #10
 800f288:	b29b      	uxth	r3, r3
 800f28a:	4313      	orrs	r3, r2
 800f28c:	b29a      	uxth	r2, r3
 800f28e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f292:	801a      	strh	r2, [r3, #0]
 800f294:	e030      	b.n	800f2f8 <USB_EPStartXfer+0x155e>
 800f296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	785b      	ldrb	r3, [r3, #1]
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d128      	bne.n	800f2f8 <USB_EPStartXfer+0x155e>
 800f2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f2ca:	4413      	add	r3, r2
 800f2cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	00da      	lsls	r2, r3, #3
 800f2de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f2e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f2f6:	801a      	strh	r2, [r3, #0]
 800f2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	785b      	ldrb	r3, [r3, #1]
 800f312:	2b00      	cmp	r3, #0
 800f314:	f040 8085 	bne.w	800f422 <USB_EPStartXfer+0x1688>
 800f318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f31c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f32a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f334:	b29b      	uxth	r3, r3
 800f336:	461a      	mov	r2, r3
 800f338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f33c:	4413      	add	r3, r2
 800f33e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	00da      	lsls	r2, r3, #3
 800f350:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f354:	4413      	add	r3, r2
 800f356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f35a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f35e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f362:	881b      	ldrh	r3, [r3, #0]
 800f364:	b29b      	uxth	r3, r3
 800f366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f370:	801a      	strh	r2, [r3, #0]
 800f372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f376:	2b3e      	cmp	r3, #62	; 0x3e
 800f378:	d923      	bls.n	800f3c2 <USB_EPStartXfer+0x1628>
 800f37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f37e:	095b      	lsrs	r3, r3, #5
 800f380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f388:	f003 031f 	and.w	r3, r3, #31
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d104      	bne.n	800f39a <USB_EPStartXfer+0x1600>
 800f390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f394:	3b01      	subs	r3, #1
 800f396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f39a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f39e:	881b      	ldrh	r3, [r3, #0]
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	029b      	lsls	r3, r3, #10
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f3be:	801a      	strh	r2, [r3, #0]
 800f3c0:	e05c      	b.n	800f47c <USB_EPStartXfer+0x16e2>
 800f3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d10c      	bne.n	800f3e4 <USB_EPStartXfer+0x164a>
 800f3ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f3ce:	881b      	ldrh	r3, [r3, #0]
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f3d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f3e0:	801a      	strh	r2, [r3, #0]
 800f3e2:	e04b      	b.n	800f47c <USB_EPStartXfer+0x16e2>
 800f3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3e8:	085b      	lsrs	r3, r3, #1
 800f3ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3f2:	f003 0301 	and.w	r3, r3, #1
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <USB_EPStartXfer+0x166a>
 800f3fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f3fe:	3301      	adds	r3, #1
 800f400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f404:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f410:	b29b      	uxth	r3, r3
 800f412:	029b      	lsls	r3, r3, #10
 800f414:	b29b      	uxth	r3, r3
 800f416:	4313      	orrs	r3, r2
 800f418:	b29a      	uxth	r2, r3
 800f41a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f41e:	801a      	strh	r2, [r3, #0]
 800f420:	e02c      	b.n	800f47c <USB_EPStartXfer+0x16e2>
 800f422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	785b      	ldrb	r3, [r3, #1]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d124      	bne.n	800f47c <USB_EPStartXfer+0x16e2>
 800f432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f440:	b29b      	uxth	r3, r3
 800f442:	461a      	mov	r2, r3
 800f444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f448:	4413      	add	r3, r2
 800f44a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	00da      	lsls	r2, r3, #3
 800f45c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f460:	4413      	add	r3, r2
 800f462:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f466:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f46e:	b29a      	uxth	r2, r3
 800f470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f474:	801a      	strh	r2, [r3, #0]
 800f476:	e001      	b.n	800f47c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f478:	2301      	movs	r3, #1
 800f47a:	e03a      	b.n	800f4f2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f48a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4413      	add	r3, r2
 800f496:	881b      	ldrh	r3, [r3, #0]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f4a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f4aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f4ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f4b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f4b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f4ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	441a      	add	r2, r3
 800f4d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f4dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	785b      	ldrb	r3, [r3, #1]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d020      	beq.n	800f550 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4413      	add	r3, r2
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f524:	81bb      	strh	r3, [r7, #12]
 800f526:	89bb      	ldrh	r3, [r7, #12]
 800f528:	f083 0310 	eor.w	r3, r3, #16
 800f52c:	81bb      	strh	r3, [r7, #12]
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	441a      	add	r2, r3
 800f538:	89bb      	ldrh	r3, [r7, #12]
 800f53a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f53e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	8013      	strh	r3, [r2, #0]
 800f54e:	e01f      	b.n	800f590 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	4413      	add	r3, r2
 800f55a:	881b      	ldrh	r3, [r3, #0]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f566:	81fb      	strh	r3, [r7, #14]
 800f568:	89fb      	ldrh	r3, [r7, #14]
 800f56a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f56e:	81fb      	strh	r3, [r7, #14]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	441a      	add	r2, r3
 800f57a:	89fb      	ldrh	r3, [r7, #14]
 800f57c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3714      	adds	r7, #20
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr

0800f59e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f59e:	b480      	push	{r7}
 800f5a0:	b087      	sub	sp, #28
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	7b1b      	ldrb	r3, [r3, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f040 809d 	bne.w	800f6ec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	785b      	ldrb	r3, [r3, #1]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d04c      	beq.n	800f654 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	4413      	add	r3, r2
 800f5c4:	881b      	ldrh	r3, [r3, #0]
 800f5c6:	823b      	strh	r3, [r7, #16]
 800f5c8:	8a3b      	ldrh	r3, [r7, #16]
 800f5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d01b      	beq.n	800f60a <USB_EPClearStall+0x6c>
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	4413      	add	r3, r2
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5e8:	81fb      	strh	r3, [r7, #14]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	441a      	add	r2, r3
 800f5f4:	89fb      	ldrh	r3, [r7, #14]
 800f5f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f602:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f606:	b29b      	uxth	r3, r3
 800f608:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	78db      	ldrb	r3, [r3, #3]
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d06c      	beq.n	800f6ec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	4413      	add	r3, r2
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	b29b      	uxth	r3, r3
 800f620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f628:	81bb      	strh	r3, [r7, #12]
 800f62a:	89bb      	ldrh	r3, [r7, #12]
 800f62c:	f083 0320 	eor.w	r3, r3, #32
 800f630:	81bb      	strh	r3, [r7, #12]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	441a      	add	r2, r3
 800f63c:	89bb      	ldrh	r3, [r7, #12]
 800f63e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f64e:	b29b      	uxth	r3, r3
 800f650:	8013      	strh	r3, [r2, #0]
 800f652:	e04b      	b.n	800f6ec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	4413      	add	r3, r2
 800f65e:	881b      	ldrh	r3, [r3, #0]
 800f660:	82fb      	strh	r3, [r7, #22]
 800f662:	8afb      	ldrh	r3, [r7, #22]
 800f664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d01b      	beq.n	800f6a4 <USB_EPClearStall+0x106>
 800f66c:	687a      	ldr	r2, [r7, #4]
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4413      	add	r3, r2
 800f676:	881b      	ldrh	r3, [r3, #0]
 800f678:	b29b      	uxth	r3, r3
 800f67a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f682:	82bb      	strh	r3, [r7, #20]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	009b      	lsls	r3, r3, #2
 800f68c:	441a      	add	r2, r3
 800f68e:	8abb      	ldrh	r3, [r7, #20]
 800f690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f69c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	4413      	add	r3, r2
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6ba:	827b      	strh	r3, [r7, #18]
 800f6bc:	8a7b      	ldrh	r3, [r7, #18]
 800f6be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f6c2:	827b      	strh	r3, [r7, #18]
 800f6c4:	8a7b      	ldrh	r3, [r7, #18]
 800f6c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f6ca:	827b      	strh	r3, [r7, #18]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	441a      	add	r2, r3
 800f6d6:	8a7b      	ldrh	r3, [r7, #18]
 800f6d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	371c      	adds	r7, #28
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr

0800f6fa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f6fa:	b480      	push	{r7}
 800f6fc:	b083      	sub	sp, #12
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
 800f702:	460b      	mov	r3, r1
 800f704:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f706:	78fb      	ldrb	r3, [r7, #3]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d103      	bne.n	800f714 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2280      	movs	r2, #128	; 0x80
 800f710:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800f714:	2300      	movs	r3, #0
}
 800f716:	4618      	mov	r0, r3
 800f718:	370c      	adds	r7, #12
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f722:	b480      	push	{r7}
 800f724:	b083      	sub	sp, #12
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f730:	b29b      	uxth	r3, r3
 800f732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800f742:	2300      	movs	r3, #0
}
 800f744:	4618      	mov	r0, r3
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f75e:	b29b      	uxth	r3, r3
 800f760:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f762:	68fb      	ldr	r3, [r7, #12]
}
 800f764:	4618      	mov	r0, r3
 800f766:	3714      	adds	r7, #20
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f770:	b480      	push	{r7}
 800f772:	b08b      	sub	sp, #44	; 0x2c
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	4611      	mov	r1, r2
 800f77c:	461a      	mov	r2, r3
 800f77e:	460b      	mov	r3, r1
 800f780:	80fb      	strh	r3, [r7, #6]
 800f782:	4613      	mov	r3, r2
 800f784:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f786:	88bb      	ldrh	r3, [r7, #4]
 800f788:	3301      	adds	r3, #1
 800f78a:	085b      	lsrs	r3, r3, #1
 800f78c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f796:	88fa      	ldrh	r2, [r7, #6]
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	4413      	add	r3, r2
 800f79c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f7a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f7a2:	69bb      	ldr	r3, [r7, #24]
 800f7a4:	627b      	str	r3, [r7, #36]	; 0x24
 800f7a6:	e01b      	b.n	800f7e0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	021b      	lsls	r3, r3, #8
 800f7b6:	b21a      	sxth	r2, r3
 800f7b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	b21b      	sxth	r3, r3
 800f7c0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f7c2:	6a3b      	ldr	r3, [r7, #32]
 800f7c4:	8a7a      	ldrh	r2, [r7, #18]
 800f7c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f7c8:	6a3b      	ldr	r3, [r7, #32]
 800f7ca:	3302      	adds	r3, #2
 800f7cc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	627b      	str	r3, [r7, #36]	; 0x24
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1e0      	bne.n	800f7a8 <USB_WritePMA+0x38>
  }
}
 800f7e6:	bf00      	nop
 800f7e8:	bf00      	nop
 800f7ea:	372c      	adds	r7, #44	; 0x2c
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b08b      	sub	sp, #44	; 0x2c
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	4611      	mov	r1, r2
 800f800:	461a      	mov	r2, r3
 800f802:	460b      	mov	r3, r1
 800f804:	80fb      	strh	r3, [r7, #6]
 800f806:	4613      	mov	r3, r2
 800f808:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f80a:	88bb      	ldrh	r3, [r7, #4]
 800f80c:	085b      	lsrs	r3, r3, #1
 800f80e:	b29b      	uxth	r3, r3
 800f810:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f81a:	88fa      	ldrh	r2, [r7, #6]
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	4413      	add	r3, r2
 800f820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f824:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	627b      	str	r3, [r7, #36]	; 0x24
 800f82a:	e018      	b.n	800f85e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f82c:	6a3b      	ldr	r3, [r7, #32]
 800f82e:	881b      	ldrh	r3, [r3, #0]
 800f830:	b29b      	uxth	r3, r3
 800f832:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	3302      	adds	r3, #2
 800f838:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	b2da      	uxtb	r2, r3
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	3301      	adds	r3, #1
 800f846:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	0a1b      	lsrs	r3, r3, #8
 800f84c:	b2da      	uxtb	r2, r3
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	3301      	adds	r3, #1
 800f856:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85a:	3b01      	subs	r3, #1
 800f85c:	627b      	str	r3, [r7, #36]	; 0x24
 800f85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1e3      	bne.n	800f82c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f864:	88bb      	ldrh	r3, [r7, #4]
 800f866:	f003 0301 	and.w	r3, r3, #1
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d007      	beq.n	800f880 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800f870:	6a3b      	ldr	r3, [r7, #32]
 800f872:	881b      	ldrh	r3, [r3, #0]
 800f874:	b29b      	uxth	r3, r3
 800f876:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	b2da      	uxtb	r2, r3
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	701a      	strb	r2, [r3, #0]
  }
}
 800f880:	bf00      	nop
 800f882:	372c      	adds	r7, #44	; 0x2c
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr

0800f88c <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800f88c:	b480      	push	{r7}
 800f88e:	b085      	sub	sp, #20
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	1c5a      	adds	r2, r3, #1
 800f898:	607a      	str	r2, [r7, #4]
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800f89e:	89fb      	ldrh	r3, [r7, #14]
 800f8a0:	021b      	lsls	r3, r3, #8
 800f8a2:	b21a      	sxth	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	b21b      	sxth	r3, r3
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	b21b      	sxth	r3, r3
 800f8ae:	b29b      	uxth	r3, r3
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3714      	adds	r7, #20
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr

0800f8bc <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b085      	sub	sp, #20
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	683a      	ldr	r2, [r7, #0]
 800f8ca:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2204      	movs	r2, #4
 800f8d0:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2204      	movs	r2, #4
 800f8d6:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	1ad3      	subs	r3, r2, r3
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	b21a      	sxth	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f900:	b29a      	uxth	r2, r3
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f908:	b29b      	uxth	r3, r3
 800f90a:	1ad3      	subs	r3, r2, r3
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	3b01      	subs	r3, #1
 800f910:	b29b      	uxth	r3, r3
 800f912:	b21a      	sxth	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2201      	movs	r2, #1
 800f930:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2201      	movs	r2, #1
 800f938:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2200      	movs	r2, #0
 800f968:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2200      	movs	r2, #0
 800f96e:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800f982:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f98c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2200      	movs	r2, #0
 800f99c:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	73fb      	strb	r3, [r7, #15]
 800f9ae:	e010      	b.n	800f9d2 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	330a      	adds	r3, #10
 800f9b6:	00db      	lsls	r3, r3, #3
 800f9b8:	4413      	add	r3, r2
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800f9be:	7bfb      	ldrb	r3, [r7, #15]
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	330a      	adds	r3, #10
 800f9c4:	00db      	lsls	r3, r3, #3
 800f9c6:	4413      	add	r3, r2
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f9cc:	7bfb      	ldrb	r3, [r7, #15]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	73fb      	strb	r3, [r7, #15]
 800f9d2:	7bfb      	ldrb	r3, [r7, #15]
 800f9d4:	2b03      	cmp	r3, #3
 800f9d6:	d9eb      	bls.n	800f9b0 <UG_Init+0xf4>
   }

   gui = g;
 800f9d8:	4a04      	ldr	r2, [pc, #16]	; (800f9ec <UG_Init+0x130>)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6013      	str	r3, [r2, #0]
   return 1;
 800f9de:	2301      	movs	r3, #1
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3714      	adds	r7, #20
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	20001b88 	.word	0x20001b88

0800f9f0 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800f9f8:	4b04      	ldr	r3, [pc, #16]	; (800fa0c <UG_FontSelect+0x1c>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fa00:	bf00      	nop
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr
 800fa0c:	20001b88 	.word	0x20001b88

0800fa10 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af02      	add	r7, sp, #8
 800fa16:	4603      	mov	r3, r0
 800fa18:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800fa1a:	4b0e      	ldr	r3, [pc, #56]	; (800fa54 <UG_FillScreen+0x44>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	3b01      	subs	r3, #1
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	b21a      	sxth	r2, r3
 800fa2c:	4b09      	ldr	r3, [pc, #36]	; (800fa54 <UG_FillScreen+0x44>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	3b01      	subs	r3, #1
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	b219      	sxth	r1, r3
 800fa3e:	88fb      	ldrh	r3, [r7, #6]
 800fa40:	9300      	str	r3, [sp, #0]
 800fa42:	460b      	mov	r3, r1
 800fa44:	2100      	movs	r1, #0
 800fa46:	2000      	movs	r0, #0
 800fa48:	f000 f806 	bl	800fa58 <UG_FillFrame>
}
 800fa4c:	bf00      	nop
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	20001b88 	.word	0x20001b88

0800fa58 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fa58:	b5b0      	push	{r4, r5, r7, lr}
 800fa5a:	b086      	sub	sp, #24
 800fa5c:	af02      	add	r7, sp, #8
 800fa5e:	4604      	mov	r4, r0
 800fa60:	4608      	mov	r0, r1
 800fa62:	4611      	mov	r1, r2
 800fa64:	461a      	mov	r2, r3
 800fa66:	4623      	mov	r3, r4
 800fa68:	80fb      	strh	r3, [r7, #6]
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	80bb      	strh	r3, [r7, #4]
 800fa6e:	460b      	mov	r3, r1
 800fa70:	807b      	strh	r3, [r7, #2]
 800fa72:	4613      	mov	r3, r2
 800fa74:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800fa76:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fa7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	da05      	bge.n	800fa8e <UG_FillFrame+0x36>
     swap(x1,x2);
 800fa82:	88fb      	ldrh	r3, [r7, #6]
 800fa84:	817b      	strh	r3, [r7, #10]
 800fa86:	887b      	ldrh	r3, [r7, #2]
 800fa88:	80fb      	strh	r3, [r7, #6]
 800fa8a:	897b      	ldrh	r3, [r7, #10]
 800fa8c:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800fa8e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fa92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	da05      	bge.n	800faa6 <UG_FillFrame+0x4e>
     swap(y1,y2);
 800fa9a:	88bb      	ldrh	r3, [r7, #4]
 800fa9c:	813b      	strh	r3, [r7, #8]
 800fa9e:	883b      	ldrh	r3, [r7, #0]
 800faa0:	80bb      	strh	r3, [r7, #4]
 800faa2:	893b      	ldrh	r3, [r7, #8]
 800faa4:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800faa6:	4b24      	ldr	r3, [pc, #144]	; (800fb38 <UG_FillFrame+0xe0>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800faae:	f003 0302 	and.w	r3, r3, #2
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d012      	beq.n	800fadc <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fab6:	4b20      	ldr	r3, [pc, #128]	; (800fb38 <UG_FillFrame+0xe0>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fabc:	461d      	mov	r5, r3
 800fabe:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fac2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fac6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800faca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800face:	8c3b      	ldrh	r3, [r7, #32]
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	4623      	mov	r3, r4
 800fad4:	47a8      	blx	r5
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d028      	beq.n	800fb2e <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 800fadc:	88bb      	ldrh	r3, [r7, #4]
 800fade:	81bb      	strh	r3, [r7, #12]
 800fae0:	e01e      	b.n	800fb20 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800fae2:	88fb      	ldrh	r3, [r7, #6]
 800fae4:	81fb      	strh	r3, [r7, #14]
 800fae6:	e00f      	b.n	800fb08 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 800fae8:	4b13      	ldr	r3, [pc, #76]	; (800fb38 <UG_FillFrame+0xe0>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	8c3a      	ldrh	r2, [r7, #32]
 800faf2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800faf6:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800fafa:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800fafc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	3301      	adds	r3, #1
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	81fb      	strh	r3, [r7, #14]
 800fb08:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fb0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	dde9      	ble.n	800fae8 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800fb14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	81bb      	strh	r3, [r7, #12]
 800fb20:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fb24:	f9b7 3000 	ldrsh.w	r3, [r7]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	ddda      	ble.n	800fae2 <UG_FillFrame+0x8a>
 800fb2c:	e000      	b.n	800fb30 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fb2e:	bf00      	nop
      }
   }
}
 800fb30:	3710      	adds	r7, #16
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bdb0      	pop	{r4, r5, r7, pc}
 800fb36:	bf00      	nop
 800fb38:	20001b88 	.word	0x20001b88

0800fb3c <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fb3c:	b590      	push	{r4, r7, lr}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af02      	add	r7, sp, #8
 800fb42:	4604      	mov	r4, r0
 800fb44:	4608      	mov	r0, r1
 800fb46:	4611      	mov	r1, r2
 800fb48:	461a      	mov	r2, r3
 800fb4a:	4623      	mov	r3, r4
 800fb4c:	80fb      	strh	r3, [r7, #6]
 800fb4e:	4603      	mov	r3, r0
 800fb50:	80bb      	strh	r3, [r7, #4]
 800fb52:	460b      	mov	r3, r1
 800fb54:	807b      	strh	r3, [r7, #2]
 800fb56:	4613      	mov	r3, r2
 800fb58:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 800fb5a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800fb5e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fb62:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fb66:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fb6a:	8b3b      	ldrh	r3, [r7, #24]
 800fb6c:	9300      	str	r3, [sp, #0]
 800fb6e:	4623      	mov	r3, r4
 800fb70:	f000 f912 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 800fb74:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fb78:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fb7c:	f9b7 1000 	ldrsh.w	r1, [r7]
 800fb80:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fb84:	8b3b      	ldrh	r3, [r7, #24]
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	4623      	mov	r3, r4
 800fb8a:	f000 f905 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 800fb8e:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fb92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fb96:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fb9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fb9e:	8b3b      	ldrh	r3, [r7, #24]
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	4623      	mov	r3, r4
 800fba4:	f000 f8f8 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800fba8:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fbac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fbb0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fbb4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800fbb8:	8b3b      	ldrh	r3, [r7, #24]
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	4623      	mov	r3, r4
 800fbbe:	f000 f8eb 	bl	800fd98 <UG_DrawLine>
}
 800fbc2:	bf00      	nop
 800fbc4:	370c      	adds	r7, #12
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd90      	pop	{r4, r7, pc}
	...

0800fbcc <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 800fbcc:	b590      	push	{r4, r7, lr}
 800fbce:	b087      	sub	sp, #28
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	4608      	mov	r0, r1
 800fbd6:	4611      	mov	r1, r2
 800fbd8:	461a      	mov	r2, r3
 800fbda:	4623      	mov	r3, r4
 800fbdc:	80fb      	strh	r3, [r7, #6]
 800fbde:	4603      	mov	r3, r0
 800fbe0:	80bb      	strh	r3, [r7, #4]
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	807b      	strh	r3, [r7, #2]
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 800fbea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f2c0 80c8 	blt.w	800fd84 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 800fbf4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f2c0 80c5 	blt.w	800fd88 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 800fbfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f340 80c2 	ble.w	800fd8c <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 800fc08:	887b      	ldrh	r3, [r7, #2]
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	f1c3 0301 	rsb	r3, r3, #1
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	827b      	strh	r3, [r7, #18]
   yd = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	823b      	strh	r3, [r7, #16]
   e = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	81fb      	strh	r3, [r7, #14]
   x = r;
 800fc1e:	887b      	ldrh	r3, [r7, #2]
 800fc20:	82fb      	strh	r3, [r7, #22]
   y = 0;
 800fc22:	2300      	movs	r3, #0
 800fc24:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 800fc26:	e0a5      	b.n	800fd74 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 800fc28:	4b5a      	ldr	r3, [pc, #360]	; (800fd94 <UG_DrawCircle+0x1c8>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	88f9      	ldrh	r1, [r7, #6]
 800fc32:	8afa      	ldrh	r2, [r7, #22]
 800fc34:	1a8a      	subs	r2, r1, r2
 800fc36:	b292      	uxth	r2, r2
 800fc38:	b210      	sxth	r0, r2
 800fc3a:	88b9      	ldrh	r1, [r7, #4]
 800fc3c:	8aba      	ldrh	r2, [r7, #20]
 800fc3e:	440a      	add	r2, r1
 800fc40:	b292      	uxth	r2, r2
 800fc42:	b211      	sxth	r1, r2
 800fc44:	883a      	ldrh	r2, [r7, #0]
 800fc46:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 800fc48:	4b52      	ldr	r3, [pc, #328]	; (800fd94 <UG_DrawCircle+0x1c8>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	88f9      	ldrh	r1, [r7, #6]
 800fc52:	8afa      	ldrh	r2, [r7, #22]
 800fc54:	1a8a      	subs	r2, r1, r2
 800fc56:	b292      	uxth	r2, r2
 800fc58:	b210      	sxth	r0, r2
 800fc5a:	88b9      	ldrh	r1, [r7, #4]
 800fc5c:	8aba      	ldrh	r2, [r7, #20]
 800fc5e:	1a8a      	subs	r2, r1, r2
 800fc60:	b292      	uxth	r2, r2
 800fc62:	b211      	sxth	r1, r2
 800fc64:	883a      	ldrh	r2, [r7, #0]
 800fc66:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 800fc68:	4b4a      	ldr	r3, [pc, #296]	; (800fd94 <UG_DrawCircle+0x1c8>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	88f9      	ldrh	r1, [r7, #6]
 800fc72:	8afa      	ldrh	r2, [r7, #22]
 800fc74:	440a      	add	r2, r1
 800fc76:	b292      	uxth	r2, r2
 800fc78:	b210      	sxth	r0, r2
 800fc7a:	88b9      	ldrh	r1, [r7, #4]
 800fc7c:	8aba      	ldrh	r2, [r7, #20]
 800fc7e:	440a      	add	r2, r1
 800fc80:	b292      	uxth	r2, r2
 800fc82:	b211      	sxth	r1, r2
 800fc84:	883a      	ldrh	r2, [r7, #0]
 800fc86:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 800fc88:	4b42      	ldr	r3, [pc, #264]	; (800fd94 <UG_DrawCircle+0x1c8>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	88f9      	ldrh	r1, [r7, #6]
 800fc92:	8afa      	ldrh	r2, [r7, #22]
 800fc94:	440a      	add	r2, r1
 800fc96:	b292      	uxth	r2, r2
 800fc98:	b210      	sxth	r0, r2
 800fc9a:	88b9      	ldrh	r1, [r7, #4]
 800fc9c:	8aba      	ldrh	r2, [r7, #20]
 800fc9e:	1a8a      	subs	r2, r1, r2
 800fca0:	b292      	uxth	r2, r2
 800fca2:	b211      	sxth	r1, r2
 800fca4:	883a      	ldrh	r2, [r7, #0]
 800fca6:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 800fca8:	4b3a      	ldr	r3, [pc, #232]	; (800fd94 <UG_DrawCircle+0x1c8>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	88f9      	ldrh	r1, [r7, #6]
 800fcb2:	8aba      	ldrh	r2, [r7, #20]
 800fcb4:	1a8a      	subs	r2, r1, r2
 800fcb6:	b292      	uxth	r2, r2
 800fcb8:	b210      	sxth	r0, r2
 800fcba:	88b9      	ldrh	r1, [r7, #4]
 800fcbc:	8afa      	ldrh	r2, [r7, #22]
 800fcbe:	440a      	add	r2, r1
 800fcc0:	b292      	uxth	r2, r2
 800fcc2:	b211      	sxth	r1, r2
 800fcc4:	883a      	ldrh	r2, [r7, #0]
 800fcc6:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 800fcc8:	4b32      	ldr	r3, [pc, #200]	; (800fd94 <UG_DrawCircle+0x1c8>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	88f9      	ldrh	r1, [r7, #6]
 800fcd2:	8aba      	ldrh	r2, [r7, #20]
 800fcd4:	1a8a      	subs	r2, r1, r2
 800fcd6:	b292      	uxth	r2, r2
 800fcd8:	b210      	sxth	r0, r2
 800fcda:	88b9      	ldrh	r1, [r7, #4]
 800fcdc:	8afa      	ldrh	r2, [r7, #22]
 800fcde:	1a8a      	subs	r2, r1, r2
 800fce0:	b292      	uxth	r2, r2
 800fce2:	b211      	sxth	r1, r2
 800fce4:	883a      	ldrh	r2, [r7, #0]
 800fce6:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 800fce8:	4b2a      	ldr	r3, [pc, #168]	; (800fd94 <UG_DrawCircle+0x1c8>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	88f9      	ldrh	r1, [r7, #6]
 800fcf2:	8aba      	ldrh	r2, [r7, #20]
 800fcf4:	440a      	add	r2, r1
 800fcf6:	b292      	uxth	r2, r2
 800fcf8:	b210      	sxth	r0, r2
 800fcfa:	88b9      	ldrh	r1, [r7, #4]
 800fcfc:	8afa      	ldrh	r2, [r7, #22]
 800fcfe:	440a      	add	r2, r1
 800fd00:	b292      	uxth	r2, r2
 800fd02:	b211      	sxth	r1, r2
 800fd04:	883a      	ldrh	r2, [r7, #0]
 800fd06:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 800fd08:	4b22      	ldr	r3, [pc, #136]	; (800fd94 <UG_DrawCircle+0x1c8>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	88f9      	ldrh	r1, [r7, #6]
 800fd12:	8aba      	ldrh	r2, [r7, #20]
 800fd14:	440a      	add	r2, r1
 800fd16:	b292      	uxth	r2, r2
 800fd18:	b210      	sxth	r0, r2
 800fd1a:	88b9      	ldrh	r1, [r7, #4]
 800fd1c:	8afa      	ldrh	r2, [r7, #22]
 800fd1e:	1a8a      	subs	r2, r1, r2
 800fd20:	b292      	uxth	r2, r2
 800fd22:	b211      	sxth	r1, r2
 800fd24:	883a      	ldrh	r2, [r7, #0]
 800fd26:	4798      	blx	r3

      y++;
 800fd28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	3301      	adds	r3, #1
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	82bb      	strh	r3, [r7, #20]
      e += yd;
 800fd34:	89fa      	ldrh	r2, [r7, #14]
 800fd36:	8a3b      	ldrh	r3, [r7, #16]
 800fd38:	4413      	add	r3, r2
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 800fd3e:	8a3b      	ldrh	r3, [r7, #16]
 800fd40:	3302      	adds	r3, #2
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 800fd46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fd4a:	005a      	lsls	r2, r3, #1
 800fd4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fd50:	4413      	add	r3, r2
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	dd0e      	ble.n	800fd74 <UG_DrawCircle+0x1a8>
      {
         x--;
 800fd56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	b29b      	uxth	r3, r3
 800fd60:	82fb      	strh	r3, [r7, #22]
         e += xd;
 800fd62:	89fa      	ldrh	r2, [r7, #14]
 800fd64:	8a7b      	ldrh	r3, [r7, #18]
 800fd66:	4413      	add	r3, r2
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 800fd6c:	8a7b      	ldrh	r3, [r7, #18]
 800fd6e:	3302      	adds	r3, #2
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 800fd74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fd78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	f6bf af53 	bge.w	800fc28 <UG_DrawCircle+0x5c>
 800fd82:	e004      	b.n	800fd8e <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 800fd84:	bf00      	nop
 800fd86:	e002      	b.n	800fd8e <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 800fd88:	bf00      	nop
 800fd8a:	e000      	b.n	800fd8e <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 800fd8c:	bf00      	nop
      }
   }
}
 800fd8e:	371c      	adds	r7, #28
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd90      	pop	{r4, r7, pc}
 800fd94:	20001b88 	.word	0x20001b88

0800fd98 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fd98:	b5b0      	push	{r4, r5, r7, lr}
 800fd9a:	b08a      	sub	sp, #40	; 0x28
 800fd9c:	af02      	add	r7, sp, #8
 800fd9e:	4604      	mov	r4, r0
 800fda0:	4608      	mov	r0, r1
 800fda2:	4611      	mov	r1, r2
 800fda4:	461a      	mov	r2, r3
 800fda6:	4623      	mov	r3, r4
 800fda8:	80fb      	strh	r3, [r7, #6]
 800fdaa:	4603      	mov	r3, r0
 800fdac:	80bb      	strh	r3, [r7, #4]
 800fdae:	460b      	mov	r3, r1
 800fdb0:	807b      	strh	r3, [r7, #2]
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800fdb6:	4b67      	ldr	r3, [pc, #412]	; (800ff54 <UG_DrawLine+0x1bc>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fdbe:	f003 0302 	and.w	r3, r3, #2
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d013      	beq.n	800fdee <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fdc6:	4b63      	ldr	r3, [pc, #396]	; (800ff54 <UG_DrawLine+0x1bc>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdcc:	461d      	mov	r5, r3
 800fdce:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fdd2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fdd6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fdda:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fdde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	4623      	mov	r3, r4
 800fde4:	47a8      	blx	r5
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 80ae 	beq.w	800ff4a <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800fdee:	887a      	ldrh	r2, [r7, #2]
 800fdf0:	88fb      	ldrh	r3, [r7, #6]
 800fdf2:	1ad3      	subs	r3, r2, r3
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800fdf8:	883a      	ldrh	r2, [r7, #0]
 800fdfa:	88bb      	ldrh	r3, [r7, #4]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800fe02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	bfb8      	it	lt
 800fe0a:	425b      	neglt	r3, r3
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 800fe10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	bfb8      	it	lt
 800fe18:	425b      	neglt	r3, r3
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800fe1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	dd01      	ble.n	800fe2a <UG_DrawLine+0x92>
 800fe26:	2301      	movs	r3, #1
 800fe28:	e001      	b.n	800fe2e <UG_DrawLine+0x96>
 800fe2a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe2e:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 800fe30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	dd01      	ble.n	800fe3c <UG_DrawLine+0xa4>
 800fe38:	2301      	movs	r3, #1
 800fe3a:	e001      	b.n	800fe40 <UG_DrawLine+0xa8>
 800fe3c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe40:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 800fe42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fe46:	105b      	asrs	r3, r3, #1
 800fe48:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800fe4a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fe4e:	105b      	asrs	r3, r3, #1
 800fe50:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800fe52:	88fb      	ldrh	r3, [r7, #6]
 800fe54:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800fe56:	88bb      	ldrh	r3, [r7, #4]
 800fe58:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800fe5a:	4b3e      	ldr	r3, [pc, #248]	; (800ff54 <UG_DrawLine+0x1bc>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fe64:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fe68:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fe6c:	4798      	blx	r3

   if( dxabs >= dyabs )
 800fe6e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800fe72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	db33      	blt.n	800fee2 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	83fb      	strh	r3, [r7, #30]
 800fe7e:	e029      	b.n	800fed4 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 800fe80:	8b7a      	ldrh	r2, [r7, #26]
 800fe82:	89fb      	ldrh	r3, [r7, #14]
 800fe84:	4413      	add	r3, r2
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800fe8a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fe8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	db09      	blt.n	800feaa <UG_DrawLine+0x112>
         {
            y -= dxabs;
 800fe96:	8b7a      	ldrh	r2, [r7, #26]
 800fe98:	8a3b      	ldrh	r3, [r7, #16]
 800fe9a:	1ad3      	subs	r3, r2, r3
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800fea0:	8afa      	ldrh	r2, [r7, #22]
 800fea2:	897b      	ldrh	r3, [r7, #10]
 800fea4:	4413      	add	r3, r2
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800feaa:	8b3a      	ldrh	r2, [r7, #24]
 800feac:	89bb      	ldrh	r3, [r7, #12]
 800feae:	4413      	add	r3, r2
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 800feb4:	4b27      	ldr	r3, [pc, #156]	; (800ff54 <UG_DrawLine+0x1bc>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800febe:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fec2:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fec6:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 800fec8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fecc:	b29b      	uxth	r3, r3
 800fece:	3301      	adds	r3, #1
 800fed0:	b29b      	uxth	r3, r3
 800fed2:	83fb      	strh	r3, [r7, #30]
 800fed4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800fed8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fedc:	429a      	cmp	r2, r3
 800fede:	dbcf      	blt.n	800fe80 <UG_DrawLine+0xe8>
 800fee0:	e034      	b.n	800ff4c <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800fee2:	2300      	movs	r3, #0
 800fee4:	83fb      	strh	r3, [r7, #30]
 800fee6:	e029      	b.n	800ff3c <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800fee8:	8bba      	ldrh	r2, [r7, #28]
 800feea:	8a3b      	ldrh	r3, [r7, #16]
 800feec:	4413      	add	r3, r2
 800feee:	b29b      	uxth	r3, r3
 800fef0:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800fef2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800fef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	db09      	blt.n	800ff12 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800fefe:	8bba      	ldrh	r2, [r7, #28]
 800ff00:	89fb      	ldrh	r3, [r7, #14]
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800ff08:	8b3a      	ldrh	r2, [r7, #24]
 800ff0a:	89bb      	ldrh	r3, [r7, #12]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800ff12:	8afa      	ldrh	r2, [r7, #22]
 800ff14:	897b      	ldrh	r3, [r7, #10]
 800ff16:	4413      	add	r3, r2
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 800ff1c:	4b0d      	ldr	r3, [pc, #52]	; (800ff54 <UG_DrawLine+0x1bc>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ff26:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800ff2a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800ff2e:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 800ff30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	3301      	adds	r3, #1
 800ff38:	b29b      	uxth	r3, r3
 800ff3a:	83fb      	strh	r3, [r7, #30]
 800ff3c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ff40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	dbcf      	blt.n	800fee8 <UG_DrawLine+0x150>
 800ff48:	e000      	b.n	800ff4c <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800ff4a:	bf00      	nop
      }
   }  
}
 800ff4c:	3720      	adds	r7, #32
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bdb0      	pop	{r4, r5, r7, pc}
 800ff52:	bf00      	nop
 800ff54:	20001b88 	.word	0x20001b88

0800ff58 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800ff58:	b590      	push	{r4, r7, lr}
 800ff5a:	b087      	sub	sp, #28
 800ff5c:	af02      	add	r7, sp, #8
 800ff5e:	4603      	mov	r3, r0
 800ff60:	603a      	str	r2, [r7, #0]
 800ff62:	80fb      	strh	r3, [r7, #6]
 800ff64:	460b      	mov	r3, r1
 800ff66:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800ff68:	88fb      	ldrh	r3, [r7, #6]
 800ff6a:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800ff6c:	88bb      	ldrh	r3, [r7, #4]
 800ff6e:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800ff70:	4b44      	ldr	r3, [pc, #272]	; (8010084 <UG_PutString+0x12c>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff76:	4618      	mov	r0, r3
 800ff78:	f000 fa96 	bl	80104a8 <_UG_FontSelect>
   while ( *str != 0 )
 800ff7c:	e064      	b.n	8010048 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800ff7e:	4b41      	ldr	r3, [pc, #260]	; (8010084 <UG_PutString+0x12c>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d106      	bne.n	800ff98 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 800ff8a:	463b      	mov	r3, r7
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f000 f8c7 	bl	8010120 <_UG_DecodeUTF8>
 800ff92:	4603      	mov	r3, r0
 800ff94:	817b      	strh	r3, [r7, #10]
 800ff96:	e004      	b.n	800ffa2 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	1c5a      	adds	r2, r3, #1
 800ff9c:	603a      	str	r2, [r7, #0]
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800ffa2:	897b      	ldrh	r3, [r7, #10]
 800ffa4:	2b0a      	cmp	r3, #10
 800ffa6:	d105      	bne.n	800ffb4 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 800ffa8:	4b36      	ldr	r3, [pc, #216]	; (8010084 <UG_PutString+0x12c>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	881b      	ldrh	r3, [r3, #0]
 800ffb0:	81fb      	strh	r3, [r7, #14]
         continue;
 800ffb2:	e049      	b.n	8010048 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 800ffb4:	897b      	ldrh	r3, [r7, #10]
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f000 f929 	bl	8010210 <_UG_GetCharData>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800ffc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ffc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffca:	d100      	bne.n	800ffce <UG_PutString+0x76>
 800ffcc:	e03c      	b.n	8010048 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 800ffce:	4b2d      	ldr	r3, [pc, #180]	; (8010084 <UG_PutString+0x12c>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffd8:	4619      	mov	r1, r3
 800ffda:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ffde:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	4299      	cmp	r1, r3
 800ffe6:	dc12      	bgt.n	801000e <UG_PutString+0xb6>
      {
         xp = x;
 800ffe8:	88fb      	ldrh	r3, [r7, #6]
 800ffea:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800ffec:	4b25      	ldr	r3, [pc, #148]	; (8010084 <UG_PutString+0x12c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fff4:	b21a      	sxth	r2, r3
 800fff6:	4b23      	ldr	r3, [pc, #140]	; (8010084 <UG_PutString+0x12c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 800fffe:	b21b      	sxth	r3, r3
 8010000:	4413      	add	r3, r2
 8010002:	b21b      	sxth	r3, r3
 8010004:	b29a      	uxth	r2, r3
 8010006:	89bb      	ldrh	r3, [r7, #12]
 8010008:	4413      	add	r3, r2
 801000a:	b29b      	uxth	r3, r3
 801000c:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 801000e:	4b1d      	ldr	r3, [pc, #116]	; (8010084 <UG_PutString+0x12c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8010016:	4b1b      	ldr	r3, [pc, #108]	; (8010084 <UG_PutString+0x12c>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801001e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8010022:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8010026:	8978      	ldrh	r0, [r7, #10]
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	4623      	mov	r3, r4
 801002c:	f000 fabe 	bl	80105ac <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8010030:	4b14      	ldr	r3, [pc, #80]	; (8010084 <UG_PutString+0x12c>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8010038:	b29a      	uxth	r2, r3
 801003a:	893b      	ldrh	r3, [r7, #8]
 801003c:	4413      	add	r3, r2
 801003e:	b29a      	uxth	r2, r3
 8010040:	89fb      	ldrh	r3, [r7, #14]
 8010042:	4413      	add	r3, r2
 8010044:	b29b      	uxth	r3, r3
 8010046:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d196      	bne.n	800ff7e <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8010050:	4b0c      	ldr	r3, [pc, #48]	; (8010084 <UG_PutString+0x12c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010058:	f003 0302 	and.w	r3, r3, #2
 801005c:	2b00      	cmp	r3, #0
 801005e:	d00c      	beq.n	801007a <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8010060:	4b08      	ldr	r3, [pc, #32]	; (8010084 <UG_PutString+0x12c>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010066:	461c      	mov	r4, r3
 8010068:	f04f 33ff 	mov.w	r3, #4294967295
 801006c:	f04f 32ff 	mov.w	r2, #4294967295
 8010070:	f04f 31ff 	mov.w	r1, #4294967295
 8010074:	f04f 30ff 	mov.w	r0, #4294967295
 8010078:	47a0      	blx	r4
}
 801007a:	bf00      	nop
 801007c:	3714      	adds	r7, #20
 801007e:	46bd      	mov	sp, r7
 8010080:	bd90      	pop	{r4, r7, pc}
 8010082:	bf00      	nop
 8010084:	20001b88 	.word	0x20001b88

08010088 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	4603      	mov	r3, r0
 8010090:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8010092:	4b05      	ldr	r3, [pc, #20]	; (80100a8 <UG_SetForecolor+0x20>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	88fa      	ldrh	r2, [r7, #6]
 8010098:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 801009c:	bf00      	nop
 801009e:	370c      	adds	r7, #12
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr
 80100a8:	20001b88 	.word	0x20001b88

080100ac <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80100b6:	4b05      	ldr	r3, [pc, #20]	; (80100cc <UG_SetBackcolor+0x20>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	88fa      	ldrh	r2, [r7, #6]
 80100bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	20001b88 	.word	0x20001b88

080100d0 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	4603      	mov	r3, r0
 80100d8:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80100da:	4b06      	ldr	r3, [pc, #24]	; (80100f4 <UG_FontSetHSpace+0x24>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	88fa      	ldrh	r2, [r7, #6]
 80100e0:	b252      	sxtb	r2, r2
 80100e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80100e6:	bf00      	nop
 80100e8:	370c      	adds	r7, #12
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr
 80100f2:	bf00      	nop
 80100f4:	20001b88 	.word	0x20001b88

080100f8 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4603      	mov	r3, r0
 8010100:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8010102:	4b06      	ldr	r3, [pc, #24]	; (801011c <UG_FontSetVSpace+0x24>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	88fa      	ldrh	r2, [r7, #6]
 8010108:	b252      	sxtb	r2, r2
 801010a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 801010e:	bf00      	nop
 8010110:	370c      	adds	r7, #12
 8010112:	46bd      	mov	sp, r7
 8010114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	20001b88 	.word	0x20001b88

08010120 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]

  char c=**str;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8010130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010134:	2b00      	cmp	r3, #0
 8010136:	db07      	blt.n	8010148 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	1c5a      	adds	r2, r3, #1
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	601a      	str	r2, [r3, #0]
    return c;
 8010142:	7bfb      	ldrb	r3, [r7, #15]
 8010144:	b29b      	uxth	r3, r3
 8010146:	e05c      	b.n	8010202 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8010148:	2300      	movs	r3, #0
 801014a:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 801014c:	2300      	movs	r3, #0
 801014e:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8010150:	e04f      	b.n	80101f2 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	1c5a      	adds	r2, r3, #1
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8010164:	7bbb      	ldrb	r3, [r7, #14]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d130      	bne.n	80101cc <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 801016a:	7bfb      	ldrb	r3, [r7, #15]
 801016c:	2bdf      	cmp	r3, #223	; 0xdf
 801016e:	d806      	bhi.n	801017e <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8010170:	2301      	movs	r3, #1
 8010172:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8010174:	7bfb      	ldrb	r3, [r7, #15]
 8010176:	f003 031f 	and.w	r3, r3, #31
 801017a:	73fb      	strb	r3, [r7, #15]
 801017c:	e023      	b.n	80101c6 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 801017e:	7bfb      	ldrb	r3, [r7, #15]
 8010180:	2bef      	cmp	r3, #239	; 0xef
 8010182:	d806      	bhi.n	8010192 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8010184:	2302      	movs	r3, #2
 8010186:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8010188:	7bfb      	ldrb	r3, [r7, #15]
 801018a:	f003 030f 	and.w	r3, r3, #15
 801018e:	73fb      	strb	r3, [r7, #15]
 8010190:	e019      	b.n	80101c6 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8010192:	7bfb      	ldrb	r3, [r7, #15]
 8010194:	2bf7      	cmp	r3, #247	; 0xf7
 8010196:	d806      	bhi.n	80101a6 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8010198:	2303      	movs	r3, #3
 801019a:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 801019c:	7bfb      	ldrb	r3, [r7, #15]
 801019e:	f003 0307 	and.w	r3, r3, #7
 80101a2:	73fb      	strb	r3, [r7, #15]
 80101a4:	e00f      	b.n	80101c6 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80101a6:	7bfb      	ldrb	r3, [r7, #15]
 80101a8:	2bfb      	cmp	r3, #251	; 0xfb
 80101aa:	d806      	bhi.n	80101ba <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 80101ac:	2304      	movs	r3, #4
 80101ae:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 80101b0:	7bfb      	ldrb	r3, [r7, #15]
 80101b2:	f003 0303 	and.w	r3, r3, #3
 80101b6:	73fb      	strb	r3, [r7, #15]
 80101b8:	e005      	b.n	80101c6 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80101ba:	2305      	movs	r3, #5
 80101bc:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80101be:	7bfb      	ldrb	r3, [r7, #15]
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 80101c6:	7bfb      	ldrb	r3, [r7, #15]
 80101c8:	81bb      	strh	r3, [r7, #12]
 80101ca:	e012      	b.n	80101f2 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 80101cc:	89bb      	ldrh	r3, [r7, #12]
 80101ce:	019b      	lsls	r3, r3, #6
 80101d0:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 80101d2:	7bfb      	ldrb	r3, [r7, #15]
 80101d4:	b21b      	sxth	r3, r3
 80101d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101da:	b21a      	sxth	r2, r3
 80101dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80101e0:	4313      	orrs	r3, r2
 80101e2:	b21b      	sxth	r3, r3
 80101e4:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 80101e6:	7bbb      	ldrb	r3, [r7, #14]
 80101e8:	3b01      	subs	r3, #1
 80101ea:	73bb      	strb	r3, [r7, #14]
 80101ec:	7bbb      	ldrb	r3, [r7, #14]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d005      	beq.n	80101fe <_UG_DecodeUTF8+0xde>
  while(**str)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1aa      	bne.n	8010152 <_UG_DecodeUTF8+0x32>
 80101fc:	e000      	b.n	8010200 <_UG_DecodeUTF8+0xe0>
        break;
 80101fe:	bf00      	nop
    }
  }
  return encoding;
 8010200:	89bb      	ldrh	r3, [r7, #12]
}
 8010202:	4618      	mov	r0, r3
 8010204:	3714      	adds	r7, #20
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr
	...

08010210 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8010210:	b580      	push	{r7, lr}
 8010212:	b086      	sub	sp, #24
 8010214:	af00      	add	r7, sp, #0
 8010216:	4603      	mov	r3, r0
 8010218:	6039      	str	r1, [r7, #0]
 801021a:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 801021c:	2300      	movs	r3, #0
 801021e:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8010220:	2300      	movs	r3, #0
 8010222:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8010224:	2300      	movs	r3, #0
 8010226:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8010228:	2300      	movs	r3, #0
 801022a:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 801022c:	2300      	movs	r3, #0
 801022e:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8010230:	4b98      	ldr	r3, [pc, #608]	; (8010494 <_UG_GetCharData+0x284>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010236:	4b98      	ldr	r3, [pc, #608]	; (8010498 <_UG_GetCharData+0x288>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	429a      	cmp	r2, r3
 801023c:	d10f      	bne.n	801025e <_UG_GetCharData+0x4e>
 801023e:	4b97      	ldr	r3, [pc, #604]	; (801049c <_UG_GetCharData+0x28c>)
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	88fa      	ldrh	r2, [r7, #6]
 8010244:	429a      	cmp	r2, r3
 8010246:	d10a      	bne.n	801025e <_UG_GetCharData+0x4e>
    if(p){
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d003      	beq.n	8010256 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 801024e:	4b94      	ldr	r3, [pc, #592]	; (80104a0 <_UG_GetCharData+0x290>)
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8010256:	4b93      	ldr	r3, [pc, #588]	; (80104a4 <_UG_GetCharData+0x294>)
 8010258:	f9b3 3000 	ldrsh.w	r3, [r3]
 801025c:	e116      	b.n	801048c <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 801025e:	4b8d      	ldr	r3, [pc, #564]	; (8010494 <_UG_GetCharData+0x284>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010266:	2b00      	cmp	r3, #0
 8010268:	f000 80cc 	beq.w	8010404 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 801026c:	88fb      	ldrh	r3, [r7, #6]
 801026e:	2bfc      	cmp	r3, #252	; 0xfc
 8010270:	f300 80c8 	bgt.w	8010404 <_UG_GetCharData+0x1f4>
 8010274:	2bd6      	cmp	r3, #214	; 0xd6
 8010276:	da09      	bge.n	801028c <_UG_GetCharData+0x7c>
 8010278:	2bc4      	cmp	r3, #196	; 0xc4
 801027a:	d06c      	beq.n	8010356 <_UG_GetCharData+0x146>
 801027c:	2bc4      	cmp	r3, #196	; 0xc4
 801027e:	f300 80c1 	bgt.w	8010404 <_UG_GetCharData+0x1f4>
 8010282:	2bb0      	cmp	r3, #176	; 0xb0
 8010284:	d06d      	beq.n	8010362 <_UG_GetCharData+0x152>
 8010286:	2bb5      	cmp	r3, #181	; 0xb5
 8010288:	d068      	beq.n	801035c <_UG_GetCharData+0x14c>
 801028a:	e06e      	b.n	801036a <_UG_GetCharData+0x15a>
 801028c:	3bd6      	subs	r3, #214	; 0xd6
 801028e:	2b26      	cmp	r3, #38	; 0x26
 8010290:	f200 80b8 	bhi.w	8010404 <_UG_GetCharData+0x1f4>
 8010294:	a201      	add	r2, pc, #4	; (adr r2, 801029c <_UG_GetCharData+0x8c>)
 8010296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029a:	bf00      	nop
 801029c:	0801033f 	.word	0x0801033f
 80102a0:	08010405 	.word	0x08010405
 80102a4:	08010405 	.word	0x08010405
 80102a8:	08010405 	.word	0x08010405
 80102ac:	08010405 	.word	0x08010405
 80102b0:	08010405 	.word	0x08010405
 80102b4:	0801034b 	.word	0x0801034b
 80102b8:	08010405 	.word	0x08010405
 80102bc:	08010405 	.word	0x08010405
 80102c0:	08010405 	.word	0x08010405
 80102c4:	08010405 	.word	0x08010405
 80102c8:	08010405 	.word	0x08010405
 80102cc:	08010405 	.word	0x08010405
 80102d0:	08010405 	.word	0x08010405
 80102d4:	08010351 	.word	0x08010351
 80102d8:	08010405 	.word	0x08010405
 80102dc:	08010405 	.word	0x08010405
 80102e0:	08010405 	.word	0x08010405
 80102e4:	08010405 	.word	0x08010405
 80102e8:	08010405 	.word	0x08010405
 80102ec:	08010405 	.word	0x08010405
 80102f0:	08010405 	.word	0x08010405
 80102f4:	08010405 	.word	0x08010405
 80102f8:	08010405 	.word	0x08010405
 80102fc:	08010405 	.word	0x08010405
 8010300:	08010405 	.word	0x08010405
 8010304:	08010405 	.word	0x08010405
 8010308:	08010405 	.word	0x08010405
 801030c:	08010405 	.word	0x08010405
 8010310:	08010405 	.word	0x08010405
 8010314:	08010405 	.word	0x08010405
 8010318:	08010405 	.word	0x08010405
 801031c:	08010339 	.word	0x08010339
 8010320:	08010405 	.word	0x08010405
 8010324:	08010405 	.word	0x08010405
 8010328:	08010405 	.word	0x08010405
 801032c:	08010405 	.word	0x08010405
 8010330:	08010405 	.word	0x08010405
 8010334:	08010345 	.word	0x08010345
    {
       case 0xF6: encoding = 0x94; break; // ö
 8010338:	2394      	movs	r3, #148	; 0x94
 801033a:	80fb      	strh	r3, [r7, #6]
 801033c:	e015      	b.n	801036a <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 801033e:	2399      	movs	r3, #153	; 0x99
 8010340:	80fb      	strh	r3, [r7, #6]
 8010342:	e012      	b.n	801036a <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8010344:	2381      	movs	r3, #129	; 0x81
 8010346:	80fb      	strh	r3, [r7, #6]
 8010348:	e00f      	b.n	801036a <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 801034a:	239a      	movs	r3, #154	; 0x9a
 801034c:	80fb      	strh	r3, [r7, #6]
 801034e:	e00c      	b.n	801036a <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8010350:	2384      	movs	r3, #132	; 0x84
 8010352:	80fb      	strh	r3, [r7, #6]
 8010354:	e009      	b.n	801036a <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8010356:	238e      	movs	r3, #142	; 0x8e
 8010358:	80fb      	strh	r3, [r7, #6]
 801035a:	e006      	b.n	801036a <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 801035c:	23e6      	movs	r3, #230	; 0xe6
 801035e:	80fb      	strh	r3, [r7, #6]
 8010360:	e003      	b.n	801036a <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8010362:	23f8      	movs	r3, #248	; 0xf8
 8010364:	80fb      	strh	r3, [r7, #6]
 8010366:	bf00      	nop
 8010368:	e04c      	b.n	8010404 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 801036a:	e04b      	b.n	8010404 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 801036c:	4b49      	ldr	r3, [pc, #292]	; (8010494 <_UG_GetCharData+0x284>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010372:	8a7a      	ldrh	r2, [r7, #18]
 8010374:	0052      	lsls	r2, r2, #1
 8010376:	4413      	add	r3, r2
 8010378:	4618      	mov	r0, r3
 801037a:	f7ff fa87 	bl	800f88c <ptr_8to16>
 801037e:	4603      	mov	r3, r0
 8010380:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8010382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010386:	2b00      	cmp	r3, #0
 8010388:	da06      	bge.n	8010398 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 801038a:	89fb      	ldrh	r3, [r7, #14]
 801038c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010390:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8010392:	2301      	movs	r3, #1
 8010394:	747b      	strb	r3, [r7, #17]
 8010396:	e032      	b.n	80103fe <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8010398:	7c7b      	ldrb	r3, [r7, #17]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d021      	beq.n	80103e2 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 801039e:	88fa      	ldrh	r2, [r7, #6]
 80103a0:	8afb      	ldrh	r3, [r7, #22]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d30d      	bcc.n	80103c2 <_UG_GetCharData+0x1b2>
 80103a6:	88fa      	ldrh	r2, [r7, #6]
 80103a8:	89fb      	ldrh	r3, [r7, #14]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d809      	bhi.n	80103c2 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80103ae:	88fa      	ldrh	r2, [r7, #6]
 80103b0:	8afb      	ldrh	r3, [r7, #22]
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	8abb      	ldrh	r3, [r7, #20]
 80103b8:	4413      	add	r3, r2
 80103ba:	82bb      	strh	r3, [r7, #20]
        found=1;
 80103bc:	2301      	movs	r3, #1
 80103be:	743b      	strb	r3, [r7, #16]
        break;
 80103c0:	e02a      	b.n	8010418 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80103c2:	88fa      	ldrh	r2, [r7, #6]
 80103c4:	8afb      	ldrh	r3, [r7, #22]
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d323      	bcc.n	8010412 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80103ca:	89fa      	ldrh	r2, [r7, #14]
 80103cc:	8afb      	ldrh	r3, [r7, #22]
 80103ce:	1ad3      	subs	r3, r2, r3
 80103d0:	b29a      	uxth	r2, r3
 80103d2:	8abb      	ldrh	r3, [r7, #20]
 80103d4:	4413      	add	r3, r2
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	3301      	adds	r3, #1
 80103da:	82bb      	strh	r3, [r7, #20]
      range=0;
 80103dc:	2300      	movs	r3, #0
 80103de:	747b      	strb	r3, [r7, #17]
 80103e0:	e00d      	b.n	80103fe <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80103e2:	88fa      	ldrh	r2, [r7, #6]
 80103e4:	89fb      	ldrh	r3, [r7, #14]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d102      	bne.n	80103f0 <_UG_GetCharData+0x1e0>
      {
        found=1;
 80103ea:	2301      	movs	r3, #1
 80103ec:	743b      	strb	r3, [r7, #16]
        break;
 80103ee:	e013      	b.n	8010418 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80103f0:	88fa      	ldrh	r2, [r7, #6]
 80103f2:	89fb      	ldrh	r3, [r7, #14]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d30e      	bcc.n	8010416 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80103f8:	8abb      	ldrh	r3, [r7, #20]
 80103fa:	3301      	adds	r3, #1
 80103fc:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80103fe:	8a7b      	ldrh	r3, [r7, #18]
 8010400:	3301      	adds	r3, #1
 8010402:	827b      	strh	r3, [r7, #18]
 8010404:	4b23      	ldr	r3, [pc, #140]	; (8010494 <_UG_GetCharData+0x284>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801040a:	8a7a      	ldrh	r2, [r7, #18]
 801040c:	429a      	cmp	r2, r3
 801040e:	d3ad      	bcc.n	801036c <_UG_GetCharData+0x15c>
 8010410:	e002      	b.n	8010418 <_UG_GetCharData+0x208>
        break;
 8010412:	bf00      	nop
 8010414:	e000      	b.n	8010418 <_UG_GetCharData+0x208>
        break;
 8010416:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8010418:	7c3b      	ldrb	r3, [r7, #16]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d034      	beq.n	8010488 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 801041e:	4b1d      	ldr	r3, [pc, #116]	; (8010494 <_UG_GetCharData+0x284>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010424:	4a1c      	ldr	r2, [pc, #112]	; (8010498 <_UG_GetCharData+0x288>)
 8010426:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8010428:	4a1c      	ldr	r2, [pc, #112]	; (801049c <_UG_GetCharData+0x28c>)
 801042a:	88fb      	ldrh	r3, [r7, #6]
 801042c:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 801042e:	4b19      	ldr	r3, [pc, #100]	; (8010494 <_UG_GetCharData+0x284>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010434:	8aba      	ldrh	r2, [r7, #20]
 8010436:	4917      	ldr	r1, [pc, #92]	; (8010494 <_UG_GetCharData+0x284>)
 8010438:	6809      	ldr	r1, [r1, #0]
 801043a:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 801043c:	fb01 f202 	mul.w	r2, r1, r2
 8010440:	4413      	add	r3, r2
 8010442:	4a17      	ldr	r2, [pc, #92]	; (80104a0 <_UG_GetCharData+0x290>)
 8010444:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8010446:	4b13      	ldr	r3, [pc, #76]	; (8010494 <_UG_GetCharData+0x284>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044c:	2b00      	cmp	r3, #0
 801044e:	d009      	beq.n	8010464 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8010450:	4b10      	ldr	r3, [pc, #64]	; (8010494 <_UG_GetCharData+0x284>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010456:	8abb      	ldrh	r3, [r7, #20]
 8010458:	4413      	add	r3, r2
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	b21a      	sxth	r2, r3
 801045e:	4b11      	ldr	r3, [pc, #68]	; (80104a4 <_UG_GetCharData+0x294>)
 8010460:	801a      	strh	r2, [r3, #0]
 8010462:	e006      	b.n	8010472 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8010464:	4b0b      	ldr	r3, [pc, #44]	; (8010494 <_UG_GetCharData+0x284>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801046c:	b21a      	sxth	r2, r3
 801046e:	4b0d      	ldr	r3, [pc, #52]	; (80104a4 <_UG_GetCharData+0x294>)
 8010470:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d003      	beq.n	8010480 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8010478:	4b09      	ldr	r3, [pc, #36]	; (80104a0 <_UG_GetCharData+0x290>)
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8010480:	4b08      	ldr	r3, [pc, #32]	; (80104a4 <_UG_GetCharData+0x294>)
 8010482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010486:	e001      	b.n	801048c <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8010488:	f04f 33ff 	mov.w	r3, #4294967295
}
 801048c:	4618      	mov	r0, r3
 801048e:	3718      	adds	r7, #24
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	20001b88 	.word	0x20001b88
 8010498:	20001b8c 	.word	0x20001b8c
 801049c:	20001b90 	.word	0x20001b90
 80104a0:	20001b94 	.word	0x20001b94
 80104a4:	20001b98 	.word	0x20001b98

080104a8 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80104a8:	b590      	push	{r4, r7, lr}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80104b0:	4b3d      	ldr	r3, [pc, #244]	; (80105a8 <_UG_FontSelect+0x100>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d070      	beq.n	801059e <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80104bc:	4b3a      	ldr	r3, [pc, #232]	; (80105a8 <_UG_FontSelect+0x100>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	781a      	ldrb	r2, [r3, #0]
 80104c8:	4b37      	ldr	r3, [pc, #220]	; (80105a8 <_UG_FontSelect+0x100>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80104d0:	b2d2      	uxtb	r2, r2
 80104d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	607a      	str	r2, [r7, #4]
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	b25b      	sxtb	r3, r3
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	da01      	bge.n	80104e8 <_UG_FontSelect+0x40>
 80104e4:	2201      	movs	r2, #1
 80104e6:	e000      	b.n	80104ea <_UG_FontSelect+0x42>
 80104e8:	2200      	movs	r2, #0
 80104ea:	4b2f      	ldr	r3, [pc, #188]	; (80105a8 <_UG_FontSelect+0x100>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	b2d2      	uxtb	r2, r2
 80104f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	1c5a      	adds	r2, r3, #1
 80104f8:	607a      	str	r2, [r7, #4]
 80104fa:	4a2b      	ldr	r2, [pc, #172]	; (80105a8 <_UG_FontSelect+0x100>)
 80104fc:	6812      	ldr	r2, [r2, #0]
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	1c5a      	adds	r2, r3, #1
 8010508:	607a      	str	r2, [r7, #4]
 801050a:	4a27      	ldr	r2, [pc, #156]	; (80105a8 <_UG_FontSelect+0x100>)
 801050c:	6812      	ldr	r2, [r2, #0]
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8010514:	4b24      	ldr	r3, [pc, #144]	; (80105a8 <_UG_FontSelect+0x100>)
 8010516:	681c      	ldr	r4, [r3, #0]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f7ff f9b7 	bl	800f88c <ptr_8to16>
 801051e:	4603      	mov	r3, r0
 8010520:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	3302      	adds	r3, #2
 8010526:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8010528:	4b1f      	ldr	r3, [pc, #124]	; (80105a8 <_UG_FontSelect+0x100>)
 801052a:	681c      	ldr	r4, [r3, #0]
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7ff f9ad 	bl	800f88c <ptr_8to16>
 8010532:	4603      	mov	r3, r0
 8010534:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	3302      	adds	r3, #2
 801053a:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 801053c:	4b1a      	ldr	r3, [pc, #104]	; (80105a8 <_UG_FontSelect+0x100>)
 801053e:	681c      	ldr	r4, [r3, #0]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7ff f9a3 	bl	800f88c <ptr_8to16>
 8010546:	4603      	mov	r3, r0
 8010548:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	3302      	adds	r3, #2
 801054e:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	1c5a      	adds	r2, r3, #1
 8010554:	607a      	str	r2, [r7, #4]
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d00b      	beq.n	8010574 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 801055c:	4b12      	ldr	r3, [pc, #72]	; (80105a8 <_UG_FontSelect+0x100>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8010564:	4b10      	ldr	r3, [pc, #64]	; (80105a8 <_UG_FontSelect+0x100>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801056a:	461a      	mov	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	4413      	add	r3, r2
 8010570:	607b      	str	r3, [r7, #4]
 8010572:	e003      	b.n	801057c <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8010574:	4b0c      	ldr	r3, [pc, #48]	; (80105a8 <_UG_FontSelect+0x100>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2200      	movs	r2, #0
 801057a:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 801057c:	4b0a      	ldr	r3, [pc, #40]	; (80105a8 <_UG_FontSelect+0x100>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8010584:	4b08      	ldr	r3, [pc, #32]	; (80105a8 <_UG_FontSelect+0x100>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801058a:	005b      	lsls	r3, r3, #1
 801058c:	461a      	mov	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4413      	add	r3, r2
 8010592:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8010594:	4b04      	ldr	r3, [pc, #16]	; (80105a8 <_UG_FontSelect+0x100>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	641a      	str	r2, [r3, #64]	; 0x40
 801059c:	e000      	b.n	80105a0 <_UG_FontSelect+0xf8>
    return;
 801059e:	bf00      	nop
}
 80105a0:	370c      	adds	r7, #12
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd90      	pop	{r4, r7, pc}
 80105a6:	bf00      	nop
 80105a8:	20001b88 	.word	0x20001b88

080105ac <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80105ac:	b5b0      	push	{r4, r5, r7, lr}
 80105ae:	b08c      	sub	sp, #48	; 0x30
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	4604      	mov	r4, r0
 80105b4:	4608      	mov	r0, r1
 80105b6:	4611      	mov	r1, r2
 80105b8:	461a      	mov	r2, r3
 80105ba:	4623      	mov	r3, r4
 80105bc:	80fb      	strh	r3, [r7, #6]
 80105be:	4603      	mov	r3, r0
 80105c0:	80bb      	strh	r3, [r7, #4]
 80105c2:	460b      	mov	r3, r1
 80105c4:	807b      	strh	r3, [r7, #2]
 80105c6:	4613      	mov	r3, r2
 80105c8:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80105ce:	2300      	movs	r3, #0
 80105d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80105d2:	2300      	movs	r3, #0
 80105d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80105d6:	2300      	movs	r3, #0
 80105d8:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80105da:	4b8c      	ldr	r3, [pc, #560]	; (801080c <_UG_PutChar+0x260>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80105e2:	75fb      	strb	r3, [r7, #23]
 80105e4:	4b89      	ldr	r3, [pc, #548]	; (801080c <_UG_PutChar+0x260>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80105ec:	f003 0302 	and.w	r3, r3, #2
 80105f0:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80105f2:	2300      	movs	r3, #0
 80105f4:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 80105f6:	f107 0208 	add.w	r2, r7, #8
 80105fa:	88fb      	ldrh	r3, [r7, #6]
 80105fc:	4611      	mov	r1, r2
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff fe06 	bl	8010210 <_UG_GetCharData>
 8010604:	4603      	mov	r3, r0
 8010606:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8010608:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010610:	d102      	bne.n	8010618 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8010612:	f04f 33ff 	mov.w	r3, #4294967295
 8010616:	e226      	b.n	8010a66 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8010618:	4b7c      	ldr	r3, [pc, #496]	; (801080c <_UG_PutChar+0x260>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010620:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8010622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010624:	2b00      	cmp	r3, #0
 8010626:	d101      	bne.n	801062c <_UG_PutChar+0x80>
     return 0;
 8010628:	2300      	movs	r3, #0
 801062a:	e21c      	b.n	8010a66 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 801062c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801062e:	08db      	lsrs	r3, r3, #3
 8010630:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8010632:	4b76      	ldr	r3, [pc, #472]	; (801080c <_UG_PutChar+0x260>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801063a:	f003 0307 	and.w	r3, r3, #7
 801063e:	b2db      	uxtb	r3, r3
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <_UG_PutChar+0x9e>
 8010644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010646:	3301      	adds	r3, #1
 8010648:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 801064a:	7dbb      	ldrb	r3, [r7, #22]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d01d      	beq.n	801068c <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8010650:	4b6e      	ldr	r3, [pc, #440]	; (801080c <_UG_PutChar+0x260>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010656:	461d      	mov	r5, r3
 8010658:	88ba      	ldrh	r2, [r7, #4]
 801065a:	8abb      	ldrh	r3, [r7, #20]
 801065c:	4413      	add	r3, r2
 801065e:	b29b      	uxth	r3, r3
 8010660:	3b01      	subs	r3, #1
 8010662:	b29b      	uxth	r3, r3
 8010664:	b21c      	sxth	r4, r3
 8010666:	4b69      	ldr	r3, [pc, #420]	; (801080c <_UG_PutChar+0x260>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801066e:	b29a      	uxth	r2, r3
 8010670:	887b      	ldrh	r3, [r7, #2]
 8010672:	4413      	add	r3, r2
 8010674:	b29b      	uxth	r3, r3
 8010676:	3b01      	subs	r3, #1
 8010678:	b29b      	uxth	r3, r3
 801067a:	b21b      	sxth	r3, r3
 801067c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010680:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8010684:	4622      	mov	r2, r4
 8010686:	47a8      	blx	r5
 8010688:	4603      	mov	r3, r0
 801068a:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 801068c:	4b5f      	ldr	r3, [pc, #380]	; (801080c <_UG_PutChar+0x260>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010694:	2b00      	cmp	r3, #0
 8010696:	f040 8172 	bne.w	801097e <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 801069a:	2300      	movs	r3, #0
 801069c:	853b      	strh	r3, [r7, #40]	; 0x28
 801069e:	e0ec      	b.n	801087a <_UG_PutChar+0x2ce>
     {
       c=0;
 80106a0:	2300      	movs	r3, #0
 80106a2:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 80106a4:	2300      	movs	r3, #0
 80106a6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80106a8:	e0df      	b.n	801086a <_UG_PutChar+0x2be>
       {
         b = *data++;
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	1c5a      	adds	r2, r3, #1
 80106ae:	60ba      	str	r2, [r7, #8]
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80106b4:	2300      	movs	r3, #0
 80106b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80106b8:	e0ca      	b.n	8010850 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 80106ba:	7f7b      	ldrb	r3, [r7, #29]
 80106bc:	f003 0301 	and.w	r3, r3, #1
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d033      	beq.n	801072c <_UG_PutChar+0x180>
           {
             if(driver)
 80106c4:	7dbb      	ldrb	r3, [r7, #22]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d01f      	beq.n	801070a <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80106ca:	8c3b      	ldrh	r3, [r7, #32]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d00a      	beq.n	80106e6 <_UG_PutChar+0x13a>
 80106d0:	7dfb      	ldrb	r3, [r7, #23]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d107      	bne.n	80106e6 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80106d6:	8c3a      	ldrh	r2, [r7, #32]
 80106d8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	4610      	mov	r0, r2
 80106e0:	4798      	blx	r3
                 bpixels=0;
 80106e2:	2300      	movs	r3, #0
 80106e4:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80106e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d10a      	bne.n	8010702 <_UG_PutChar+0x156>
 80106ec:	7dfb      	ldrb	r3, [r7, #23]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d007      	beq.n	8010702 <_UG_PutChar+0x156>
               {
                 x0=x+c;
 80106f2:	88ba      	ldrh	r2, [r7, #4]
 80106f4:	8bfb      	ldrh	r3, [r7, #30]
 80106f6:	4413      	add	r3, r2
 80106f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 80106fa:	887a      	ldrh	r2, [r7, #2]
 80106fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106fe:	4413      	add	r3, r2
 8010700:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8010702:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010704:	3301      	adds	r3, #1
 8010706:	847b      	strh	r3, [r7, #34]	; 0x22
 8010708:	e096      	b.n	8010838 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 801070a:	4b40      	ldr	r3, [pc, #256]	; (801080c <_UG_PutChar+0x260>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	88b9      	ldrh	r1, [r7, #4]
 8010714:	8bfa      	ldrh	r2, [r7, #30]
 8010716:	440a      	add	r2, r1
 8010718:	b292      	uxth	r2, r2
 801071a:	b210      	sxth	r0, r2
 801071c:	8879      	ldrh	r1, [r7, #2]
 801071e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010720:	440a      	add	r2, r1
 8010722:	b292      	uxth	r2, r2
 8010724:	b211      	sxth	r1, r2
 8010726:	883a      	ldrh	r2, [r7, #0]
 8010728:	4798      	blx	r3
 801072a:	e085      	b.n	8010838 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 801072c:	7dbb      	ldrb	r3, [r7, #22]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d06e      	beq.n	8010810 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8010732:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010734:	2b00      	cmp	r3, #0
 8010736:	d064      	beq.n	8010802 <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8010738:	7dfb      	ldrb	r3, [r7, #23]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d15e      	bne.n	80107fc <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 801073e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010740:	8839      	ldrh	r1, [r7, #0]
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	4610      	mov	r0, r2
 8010746:	4798      	blx	r3
                   fpixels=0;
 8010748:	2300      	movs	r3, #0
 801074a:	847b      	strh	r3, [r7, #34]	; 0x22
 801074c:	e059      	b.n	8010802 <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 801074e:	88ba      	ldrh	r2, [r7, #4]
 8010750:	8abb      	ldrh	r3, [r7, #20]
 8010752:	4413      	add	r3, r2
 8010754:	b29a      	uxth	r2, r3
 8010756:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 801075c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801075e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010762:	429a      	cmp	r2, r3
 8010764:	d003      	beq.n	801076e <_UG_PutChar+0x1c2>
 8010766:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010768:	89fb      	ldrh	r3, [r7, #14]
 801076a:	429a      	cmp	r2, r3
 801076c:	d224      	bcs.n	80107b8 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 801076e:	4b27      	ldr	r3, [pc, #156]	; (801080c <_UG_PutChar+0x260>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010774:	461d      	mov	r5, r3
 8010776:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801077a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801077e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010780:	89fb      	ldrh	r3, [r7, #14]
 8010782:	4413      	add	r3, r2
 8010784:	b29b      	uxth	r3, r3
 8010786:	3b01      	subs	r3, #1
 8010788:	b29b      	uxth	r3, r3
 801078a:	b21c      	sxth	r4, r3
 801078c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801078e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010792:	fb92 f3f3 	sdiv	r3, r2, r3
 8010796:	b29a      	uxth	r2, r3
 8010798:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801079a:	4413      	add	r3, r2
 801079c:	b29b      	uxth	r3, r3
 801079e:	b21b      	sxth	r3, r3
 80107a0:	4622      	mov	r2, r4
 80107a2:	47a8      	blx	r5
 80107a4:	4603      	mov	r3, r0
 80107a6:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80107a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80107aa:	8839      	ldrh	r1, [r7, #0]
 80107ac:	69bb      	ldr	r3, [r7, #24]
 80107ae:	4610      	mov	r0, r2
 80107b0:	4798      	blx	r3
                       fpixels=0;
 80107b2:	2300      	movs	r3, #0
 80107b4:	847b      	strh	r3, [r7, #34]	; 0x22
 80107b6:	e021      	b.n	80107fc <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80107b8:	4b14      	ldr	r3, [pc, #80]	; (801080c <_UG_PutChar+0x260>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107be:	461c      	mov	r4, r3
 80107c0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80107c4:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80107c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80107ca:	89fb      	ldrh	r3, [r7, #14]
 80107cc:	4413      	add	r3, r2
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	3b01      	subs	r3, #1
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	b21a      	sxth	r2, r3
 80107d6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80107da:	47a0      	blx	r4
 80107dc:	4603      	mov	r3, r0
 80107de:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80107e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80107e2:	8839      	ldrh	r1, [r7, #0]
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	4610      	mov	r0, r2
 80107e8:	4798      	blx	r3
                       fpixels -= width;
 80107ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80107ec:	89fb      	ldrh	r3, [r7, #14]
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 80107f2:	88bb      	ldrh	r3, [r7, #4]
 80107f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 80107f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80107f8:	3301      	adds	r3, #1
 80107fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 80107fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d1a5      	bne.n	801074e <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8010802:	8c3b      	ldrh	r3, [r7, #32]
 8010804:	3301      	adds	r3, #1
 8010806:	843b      	strh	r3, [r7, #32]
 8010808:	e016      	b.n	8010838 <_UG_PutChar+0x28c>
 801080a:	bf00      	nop
 801080c:	20001b88 	.word	0x20001b88
             }
             else if(!trans)                           // Not accelerated output
 8010810:	7dfb      	ldrb	r3, [r7, #23]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d110      	bne.n	8010838 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8010816:	4b96      	ldr	r3, [pc, #600]	; (8010a70 <_UG_PutChar+0x4c4>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	88b9      	ldrh	r1, [r7, #4]
 8010820:	8bfa      	ldrh	r2, [r7, #30]
 8010822:	440a      	add	r2, r1
 8010824:	b292      	uxth	r2, r2
 8010826:	b210      	sxth	r0, r2
 8010828:	8879      	ldrh	r1, [r7, #2]
 801082a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801082c:	440a      	add	r2, r1
 801082e:	b292      	uxth	r2, r2
 8010830:	b211      	sxth	r1, r2
 8010832:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010836:	4798      	blx	r3
             }
           }
           b >>= 1;
 8010838:	7f7b      	ldrb	r3, [r7, #29]
 801083a:	085b      	lsrs	r3, r3, #1
 801083c:	777b      	strb	r3, [r7, #29]
           c++;
 801083e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010842:	b29b      	uxth	r3, r3
 8010844:	3301      	adds	r3, #1
 8010846:	b29b      	uxth	r3, r3
 8010848:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 801084a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801084c:	3301      	adds	r3, #1
 801084e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010850:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010852:	2b07      	cmp	r3, #7
 8010854:	d806      	bhi.n	8010864 <_UG_PutChar+0x2b8>
 8010856:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801085a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801085e:	429a      	cmp	r2, r3
 8010860:	f6ff af2b 	blt.w	80106ba <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8010864:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010866:	3301      	adds	r3, #1
 8010868:	857b      	strh	r3, [r7, #42]	; 0x2a
 801086a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801086c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801086e:	429a      	cmp	r2, r3
 8010870:	f4ff af1b 	bcc.w	80106aa <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010876:	3301      	adds	r3, #1
 8010878:	853b      	strh	r3, [r7, #40]	; 0x28
 801087a:	4b7d      	ldr	r3, [pc, #500]	; (8010a70 <_UG_PutChar+0x4c4>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010882:	b29b      	uxth	r3, r3
 8010884:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010886:	429a      	cmp	r2, r3
 8010888:	f4ff af0a 	bcc.w	80106a0 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 801088c:	7dbb      	ldrb	r3, [r7, #22]
 801088e:	2b00      	cmp	r3, #0
 8010890:	f000 80e7 	beq.w	8010a62 <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8010894:	8c3b      	ldrh	r3, [r7, #32]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d009      	beq.n	80108ae <_UG_PutChar+0x302>
 801089a:	7dfb      	ldrb	r3, [r7, #23]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d106      	bne.n	80108ae <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 80108a0:	8c3a      	ldrh	r2, [r7, #32]
 80108a2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	4610      	mov	r0, r2
 80108aa:	4798      	blx	r3
 80108ac:	e0d9      	b.n	8010a62 <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 80108ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 80d6 	beq.w	8010a62 <_UG_PutChar+0x4b6>
       {
         if(!trans)
 80108b6:	7dfb      	ldrb	r3, [r7, #23]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d15c      	bne.n	8010976 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 80108bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80108be:	8839      	ldrh	r1, [r7, #0]
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	4610      	mov	r0, r2
 80108c4:	4798      	blx	r3
 80108c6:	e0cc      	b.n	8010a62 <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 80108c8:	88ba      	ldrh	r2, [r7, #4]
 80108ca:	8abb      	ldrh	r3, [r7, #20]
 80108cc:	4413      	add	r3, r2
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 80108d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80108d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d003      	beq.n	80108e8 <_UG_PutChar+0x33c>
 80108e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80108e2:	8a3b      	ldrh	r3, [r7, #16]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d224      	bcs.n	8010932 <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80108e8:	4b61      	ldr	r3, [pc, #388]	; (8010a70 <_UG_PutChar+0x4c4>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108ee:	461d      	mov	r5, r3
 80108f0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80108f4:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80108f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80108fa:	8a3b      	ldrh	r3, [r7, #16]
 80108fc:	4413      	add	r3, r2
 80108fe:	b29b      	uxth	r3, r3
 8010900:	3b01      	subs	r3, #1
 8010902:	b29b      	uxth	r3, r3
 8010904:	b21c      	sxth	r4, r3
 8010906:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010908:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801090c:	fb92 f3f3 	sdiv	r3, r2, r3
 8010910:	b29a      	uxth	r2, r3
 8010912:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010914:	4413      	add	r3, r2
 8010916:	b29b      	uxth	r3, r3
 8010918:	b21b      	sxth	r3, r3
 801091a:	4622      	mov	r2, r4
 801091c:	47a8      	blx	r5
 801091e:	4603      	mov	r3, r0
 8010920:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010922:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010924:	8839      	ldrh	r1, [r7, #0]
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	4610      	mov	r0, r2
 801092a:	4798      	blx	r3
               fpixels=0;
 801092c:	2300      	movs	r3, #0
 801092e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010930:	e021      	b.n	8010976 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8010932:	4b4f      	ldr	r3, [pc, #316]	; (8010a70 <_UG_PutChar+0x4c4>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010938:	461c      	mov	r4, r3
 801093a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801093e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010942:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010944:	8a3b      	ldrh	r3, [r7, #16]
 8010946:	4413      	add	r3, r2
 8010948:	b29b      	uxth	r3, r3
 801094a:	3b01      	subs	r3, #1
 801094c:	b29b      	uxth	r3, r3
 801094e:	b21a      	sxth	r2, r3
 8010950:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010954:	47a0      	blx	r4
 8010956:	4603      	mov	r3, r0
 8010958:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 801095a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801095c:	8839      	ldrh	r1, [r7, #0]
 801095e:	69bb      	ldr	r3, [r7, #24]
 8010960:	4610      	mov	r0, r2
 8010962:	4798      	blx	r3
               fpixels -= width;
 8010964:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010966:	8a3b      	ldrh	r3, [r7, #16]
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 801096c:	88bb      	ldrh	r3, [r7, #4]
 801096e:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8010970:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010972:	3301      	adds	r3, #1
 8010974:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8010976:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010978:	2b00      	cmp	r3, #0
 801097a:	d1a5      	bne.n	80108c8 <_UG_PutChar+0x31c>
 801097c:	e071      	b.n	8010a62 <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 801097e:	4b3c      	ldr	r3, [pc, #240]	; (8010a70 <_UG_PutChar+0x4c4>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010986:	2b01      	cmp	r3, #1
 8010988:	d16b      	bne.n	8010a62 <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 801098a:	2300      	movs	r3, #0
 801098c:	853b      	strh	r3, [r7, #40]	; 0x28
 801098e:	e060      	b.n	8010a52 <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8010990:	2300      	movs	r3, #0
 8010992:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010994:	e04a      	b.n	8010a2c <_UG_PutChar+0x480>
       {
         b = *data++;
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	1c5a      	adds	r2, r3, #1
 801099a:	60ba      	str	r2, [r7, #8]
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80109a0:	883b      	ldrh	r3, [r7, #0]
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	7f7a      	ldrb	r2, [r7, #29]
 80109a6:	fb03 f202 	mul.w	r2, r3, r2
 80109aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	7f79      	ldrb	r1, [r7, #29]
 80109b2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80109b6:	fb01 f303 	mul.w	r3, r1, r3
 80109ba:	4413      	add	r3, r2
 80109bc:	121b      	asrs	r3, r3, #8
 80109be:	b21b      	sxth	r3, r3
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80109c4:	883b      	ldrh	r3, [r7, #0]
 80109c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80109ca:	7f79      	ldrb	r1, [r7, #29]
 80109cc:	fb03 f101 	mul.w	r1, r3, r1
 80109d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80109d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80109d8:	7f78      	ldrb	r0, [r7, #29]
 80109da:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80109de:	fb00 f303 	mul.w	r3, r0, r3
 80109e2:	440b      	add	r3, r1
 80109e4:	121b      	asrs	r3, r3, #8
 80109e6:	b21b      	sxth	r3, r3
 80109e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80109ec:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80109ee:	4313      	orrs	r3, r2
 80109f0:	b21b      	sxth	r3, r3
 80109f2:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 80109f4:	7dbb      	ldrb	r3, [r7, #22]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d005      	beq.n	8010a06 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80109fa:	8a7a      	ldrh	r2, [r7, #18]
 80109fc:	69bb      	ldr	r3, [r7, #24]
 80109fe:	4611      	mov	r1, r2
 8010a00:	2001      	movs	r0, #1
 8010a02:	4798      	blx	r3
 8010a04:	e00f      	b.n	8010a26 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8010a06:	4b1a      	ldr	r3, [pc, #104]	; (8010a70 <_UG_PutChar+0x4c4>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	88b9      	ldrh	r1, [r7, #4]
 8010a10:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010a12:	440a      	add	r2, r1
 8010a14:	b292      	uxth	r2, r2
 8010a16:	b210      	sxth	r0, r2
 8010a18:	8879      	ldrh	r1, [r7, #2]
 8010a1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010a1c:	440a      	add	r2, r1
 8010a1e:	b292      	uxth	r2, r2
 8010a20:	b211      	sxth	r1, r2
 8010a22:	8a7a      	ldrh	r2, [r7, #18]
 8010a24:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8010a26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a28:	3301      	adds	r3, #1
 8010a2a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010a2c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010a2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	dbaf      	blt.n	8010996 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	4a0d      	ldr	r2, [pc, #52]	; (8010a70 <_UG_PutChar+0x4c4>)
 8010a3a:	6812      	ldr	r2, [r2, #0]
 8010a3c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8010a40:	4611      	mov	r1, r2
 8010a42:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8010a46:	1a8a      	subs	r2, r1, r2
 8010a48:	4413      	add	r3, r2
 8010a4a:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010a4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a4e:	3301      	adds	r3, #1
 8010a50:	853b      	strh	r3, [r7, #40]	; 0x28
 8010a52:	4b07      	ldr	r3, [pc, #28]	; (8010a70 <_UG_PutChar+0x4c4>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d396      	bcc.n	8010990 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8010a62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3730      	adds	r7, #48	; 0x30
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	20001b88 	.word	0x20001b88

08010a74 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8010a74:	b480      	push	{r7}
 8010a76:	b089      	sub	sp, #36	; 0x24
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8010a7c:	4b57      	ldr	r3, [pc, #348]	; (8010bdc <_UG_ProcessTouchData+0x168>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	88db      	ldrh	r3, [r3, #6]
 8010a82:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8010a84:	4b55      	ldr	r3, [pc, #340]	; (8010bdc <_UG_ProcessTouchData+0x168>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	891b      	ldrh	r3, [r3, #8]
 8010a8a:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8010a8c:	4b53      	ldr	r3, [pc, #332]	; (8010bdc <_UG_ProcessTouchData+0x168>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	791b      	ldrb	r3, [r3, #4]
 8010a92:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	83fb      	strh	r3, [r7, #30]
 8010a9e:	e090      	b.n	8010bc2 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	685a      	ldr	r2, [r3, #4]
 8010aa4:	8bfb      	ldrh	r3, [r7, #30]
 8010aa6:	015b      	lsls	r3, r3, #5
 8010aa8:	4413      	add	r3, r2
 8010aaa:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	785b      	ldrb	r3, [r3, #1]
 8010ab6:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8010ab8:	7bfb      	ldrb	r3, [r7, #15]
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d179      	bne.n	8010bb6 <_UG_ProcessTouchData+0x142>
 8010ac2:	7bfb      	ldrb	r3, [r7, #15]
 8010ac4:	f003 0302 	and.w	r3, r3, #2
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d074      	beq.n	8010bb6 <_UG_ProcessTouchData+0x142>
 8010acc:	7bfb      	ldrb	r3, [r7, #15]
 8010ace:	f003 0308 	and.w	r3, r3, #8
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d06f      	beq.n	8010bb6 <_UG_ProcessTouchData+0x142>
 8010ad6:	7bfb      	ldrb	r3, [r7, #15]
 8010ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d16a      	bne.n	8010bb6 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8010ae0:	7dfb      	ldrb	r3, [r7, #23]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d047      	beq.n	8010b76 <_UG_ProcessTouchData+0x102>
 8010ae6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aee:	d042      	beq.n	8010b76 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010af0:	7f7b      	ldrb	r3, [r7, #29]
 8010af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d107      	bne.n	8010b0a <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8010afa:	7f7b      	ldrb	r3, [r7, #29]
 8010afc:	f043 0305 	orr.w	r3, r3, #5
 8010b00:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8010b02:	7f7b      	ldrb	r3, [r7, #29]
 8010b04:	f023 0318 	bic.w	r3, r3, #24
 8010b08:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010b0a:	7f7b      	ldrb	r3, [r7, #29]
 8010b0c:	f023 0320 	bic.w	r3, r3, #32
 8010b10:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010b18:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	db25      	blt.n	8010b6c <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010b26:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	dc1e      	bgt.n	8010b6c <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010b34:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	db17      	blt.n	8010b6c <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010b42:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	dc10      	bgt.n	8010b6c <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010b4a:	7f7b      	ldrb	r3, [r7, #29]
 8010b4c:	f043 0320 	orr.w	r3, r3, #32
 8010b50:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010b52:	7f7b      	ldrb	r3, [r7, #29]
 8010b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d107      	bne.n	8010b6c <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8010b5c:	7f7b      	ldrb	r3, [r7, #29]
 8010b5e:	f023 0304 	bic.w	r3, r3, #4
 8010b62:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8010b64:	7f7b      	ldrb	r3, [r7, #29]
 8010b66:	f043 0302 	orr.w	r3, r3, #2
 8010b6a:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8010b6c:	7f7b      	ldrb	r3, [r7, #29]
 8010b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b72:	777b      	strb	r3, [r7, #29]
 8010b74:	e01f      	b.n	8010bb6 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8010b76:	7f7b      	ldrb	r3, [r7, #29]
 8010b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d01a      	beq.n	8010bb6 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8010b80:	7f7b      	ldrb	r3, [r7, #29]
 8010b82:	f003 0320 	and.w	r3, r3, #32
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d004      	beq.n	8010b94 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8010b8a:	7f7b      	ldrb	r3, [r7, #29]
 8010b8c:	f043 0308 	orr.w	r3, r3, #8
 8010b90:	777b      	strb	r3, [r7, #29]
 8010b92:	e003      	b.n	8010b9c <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8010b94:	7f7b      	ldrb	r3, [r7, #29]
 8010b96:	f043 0310 	orr.w	r3, r3, #16
 8010b9a:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8010b9c:	7f7b      	ldrb	r3, [r7, #29]
 8010b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d003      	beq.n	8010bae <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8010ba6:	7f7b      	ldrb	r3, [r7, #29]
 8010ba8:	f043 0301 	orr.w	r3, r3, #1
 8010bac:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8010bae:	7f7b      	ldrb	r3, [r7, #29]
 8010bb0:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8010bb4:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	7f7a      	ldrb	r2, [r7, #29]
 8010bba:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8010bbc:	8bfb      	ldrh	r3, [r7, #30]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	83fb      	strh	r3, [r7, #30]
 8010bc2:	8bfa      	ldrh	r2, [r7, #30]
 8010bc4:	8abb      	ldrh	r3, [r7, #20]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	f4ff af6a 	bcc.w	8010aa0 <_UG_ProcessTouchData+0x2c>
   }
}
 8010bcc:	bf00      	nop
 8010bce:	bf00      	nop
 8010bd0:	3724      	adds	r7, #36	; 0x24
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	20001b88 	.word	0x20001b88

08010be0 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b086      	sub	sp, #24
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010bee:	2300      	movs	r3, #0
 8010bf0:	82fb      	strh	r3, [r7, #22]
 8010bf2:	e035      	b.n	8010c60 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	685a      	ldr	r2, [r3, #4]
 8010bf8:	8afb      	ldrh	r3, [r7, #22]
 8010bfa:	015b      	lsls	r3, r3, #5
 8010bfc:	4413      	add	r3, r2
 8010bfe:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	785b      	ldrb	r3, [r3, #1]
 8010c0a:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010c0c:	7bfb      	ldrb	r3, [r7, #15]
 8010c0e:	f003 0301 	and.w	r3, r3, #1
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d121      	bne.n	8010c5a <_UG_UpdateObjects+0x7a>
 8010c16:	7bfb      	ldrb	r3, [r7, #15]
 8010c18:	f003 0302 	and.w	r3, r3, #2
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d01c      	beq.n	8010c5a <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
 8010c22:	f003 0320 	and.w	r3, r3, #32
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d004      	beq.n	8010c34 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	6939      	ldr	r1, [r7, #16]
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8010c34:	7bfb      	ldrb	r3, [r7, #15]
 8010c36:	f003 0308 	and.w	r3, r3, #8
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00d      	beq.n	8010c5a <_UG_UpdateObjects+0x7a>
 8010c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	da09      	bge.n	8010c5a <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8010c46:	7bbb      	ldrb	r3, [r7, #14]
 8010c48:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d004      	beq.n	8010c5a <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	6939      	ldr	r1, [r7, #16]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8010c5a:	8afb      	ldrh	r3, [r7, #22]
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	82fb      	strh	r3, [r7, #22]
 8010c60:	8afa      	ldrh	r2, [r7, #22]
 8010c62:	8abb      	ldrh	r3, [r7, #20]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d3c5      	bcc.n	8010bf4 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8010c68:	bf00      	nop
 8010c6a:	bf00      	nop
 8010c6c:	3718      	adds	r7, #24
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
	...

08010c74 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b086      	sub	sp, #24
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8010c7c:	4b22      	ldr	r3, [pc, #136]	; (8010d08 <_UG_HandleEvents+0x94>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8010c82:	4b21      	ldr	r3, [pc, #132]	; (8010d08 <_UG_HandleEvents+0x94>)
 8010c84:	2202      	movs	r2, #2
 8010c86:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010c8e:	2300      	movs	r3, #0
 8010c90:	82fb      	strh	r3, [r7, #22]
 8010c92:	e02f      	b.n	8010cf4 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	685a      	ldr	r2, [r3, #4]
 8010c98:	8afb      	ldrh	r3, [r7, #22]
 8010c9a:	015b      	lsls	r3, r3, #5
 8010c9c:	4413      	add	r3, r2
 8010c9e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010ca6:	7bfb      	ldrb	r3, [r7, #15]
 8010ca8:	f003 0301 	and.w	r3, r3, #1
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d11e      	bne.n	8010cee <_UG_HandleEvents+0x7a>
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
 8010cb2:	f003 0302 	and.w	r3, r3, #2
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d019      	beq.n	8010cee <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	7e9b      	ldrb	r3, [r3, #26]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d015      	beq.n	8010cee <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8010cc2:	4a11      	ldr	r2, [pc, #68]	; (8010d08 <_UG_HandleEvents+0x94>)
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	7e1a      	ldrb	r2, [r3, #24]
 8010ccc:	4b0e      	ldr	r3, [pc, #56]	; (8010d08 <_UG_HandleEvents+0x94>)
 8010cce:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	7e5a      	ldrb	r2, [r3, #25]
 8010cd4:	4b0c      	ldr	r3, [pc, #48]	; (8010d08 <_UG_HandleEvents+0x94>)
 8010cd6:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	7e9a      	ldrb	r2, [r3, #26]
 8010cdc:	4b0a      	ldr	r3, [pc, #40]	; (8010d08 <_UG_HandleEvents+0x94>)
 8010cde:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ce4:	4808      	ldr	r0, [pc, #32]	; (8010d08 <_UG_HandleEvents+0x94>)
 8010ce6:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	2200      	movs	r2, #0
 8010cec:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8010cee:	8afb      	ldrh	r3, [r7, #22]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	82fb      	strh	r3, [r7, #22]
 8010cf4:	8afa      	ldrh	r2, [r7, #22]
 8010cf6:	8abb      	ldrh	r3, [r7, #20]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d3cb      	bcc.n	8010c94 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8010cfc:	bf00      	nop
 8010cfe:	bf00      	nop
 8010d00:	3718      	adds	r7, #24
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}
 8010d06:	bf00      	nop
 8010d08:	20001b9c 	.word	0x20001b9c

08010d0c <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8010d0c:	b590      	push	{r4, r7, lr}
 8010d0e:	b08f      	sub	sp, #60	; 0x3c
 8010d10:	af02      	add	r7, sp, #8
 8010d12:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f000 812c 	beq.w	8010f76 <_UG_PutText+0x26a>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f000 8127 	beq.w	8010f76 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	89db      	ldrh	r3, [r3, #14]
 8010d2c:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	895b      	ldrh	r3, [r3, #10]
 8010d32:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	3302      	adds	r3, #2
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8010d3e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8010d42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d46:	1ad2      	subs	r2, r2, r3
 8010d48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	f2c0 8114 	blt.w	8010f7a <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	891b      	ldrh	r3, [r3, #8]
 8010d56:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	899b      	ldrh	r3, [r3, #12]
 8010d5c:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	7d1b      	ldrb	r3, [r3, #20]
 8010d62:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	8adb      	ldrh	r3, [r3, #22]
 8010d68:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	8b1b      	ldrh	r3, [r3, #24]
 8010d6e:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7ff fb92 	bl	80104a8 <_UG_FontSelect>

   rc=1;
 8010d84:	2301      	movs	r3, #1
 8010d86:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010d8c:	4b80      	ldr	r3, [pc, #512]	; (8010f90 <_UG_PutText+0x284>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d107      	bne.n	8010da8 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8010d98:	f107 0308 	add.w	r3, r7, #8
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7ff f9bf 	bl	8010120 <_UG_DecodeUTF8>
 8010da2:	4603      	mov	r3, r0
 8010da4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010da6:	e004      	b.n	8010db2 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	1c5a      	adds	r2, r3, #1
 8010dac:	60ba      	str	r2, [r7, #8]
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8010db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d006      	beq.n	8010dc6 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8010db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dba:	2b0a      	cmp	r3, #10
 8010dbc:	d1e6      	bne.n	8010d8c <_UG_PutText+0x80>
 8010dbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010dc4:	e7e2      	b.n	8010d8c <_UG_PutText+0x80>
     if(!chr) break;
 8010dc6:	bf00      	nop
   }

   yp = 0;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8010dcc:	7e7b      	ldrb	r3, [r7, #25]
 8010dce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d01f      	beq.n	8010e16 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8010dd6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010dd8:	8c3b      	ldrh	r3, [r7, #32]
 8010dda:	1ad3      	subs	r3, r2, r3
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	3301      	adds	r3, #1
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8010de4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010de6:	8bfb      	ldrh	r3, [r7, #30]
 8010de8:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8010dea:	fb11 f303 	smulbb	r3, r1, r3
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	1ad3      	subs	r3, r2, r3
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8010df6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010df8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	b299      	uxth	r1, r3
 8010dfe:	8abb      	ldrh	r3, [r7, #20]
 8010e00:	fb11 f303 	smulbb	r3, r1, r3
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	1ad3      	subs	r3, r2, r3
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8010e0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	f2c0 80b4 	blt.w	8010f7e <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8010e16:	7e7b      	ldrb	r3, [r7, #25]
 8010e18:	f003 0310 	and.w	r3, r3, #16
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d003      	beq.n	8010e28 <_UG_PutText+0x11c>
 8010e20:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010e24:	105b      	asrs	r3, r3, #1
 8010e26:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8010e28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010e2a:	8c3b      	ldrh	r3, [r7, #32]
 8010e2c:	4413      	add	r3, r2
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8010e32:	2300      	movs	r3, #0
 8010e34:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010e3e:	4b54      	ldr	r3, [pc, #336]	; (8010f90 <_UG_PutText+0x284>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d107      	bne.n	8010e5a <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8010e4a:	f107 0308 	add.w	r3, r7, #8
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7ff f966 	bl	8010120 <_UG_DecodeUTF8>
 8010e54:	4603      	mov	r3, r0
 8010e56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010e58:	e004      	b.n	8010e64 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	1c5a      	adds	r2, r3, #1
 8010e5e:	60ba      	str	r2, [r7, #8]
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8010e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d01b      	beq.n	8010ea2 <_UG_PutText+0x196>
 8010e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e6c:	2b0a      	cmp	r3, #10
 8010e6e:	d018      	beq.n	8010ea2 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8010e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e72:	2100      	movs	r1, #0
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7ff f9cb 	bl	8010210 <_UG_GetCharData>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8010e7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e86:	d00a      	beq.n	8010e9e <_UG_PutText+0x192>
         sl++;
 8010e88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8010e8e:	8a7a      	ldrh	r2, [r7, #18]
 8010e90:	8afb      	ldrh	r3, [r7, #22]
 8010e92:	4413      	add	r3, r2
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010e98:	4413      	add	r3, r2
 8010e9a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010e9c:	e7cf      	b.n	8010e3e <_UG_PutText+0x132>
         if (w == -1){continue;}
 8010e9e:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010ea0:	e7cd      	b.n	8010e3e <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8010ea2:	8afb      	ldrh	r3, [r7, #22]
 8010ea4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010ea6:	1ad3      	subs	r3, r2, r3
 8010ea8:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8010eaa:	8b7a      	ldrh	r2, [r7, #26]
 8010eac:	8bbb      	ldrh	r3, [r7, #28]
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8010eb8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010eba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ebc:	1ad3      	subs	r3, r2, r3
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8010ec2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	db5b      	blt.n	8010f82 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8010eca:	7e7b      	ldrb	r3, [r7, #25]
 8010ecc:	f003 0301 	and.w	r3, r3, #1
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <_UG_PutText+0x1ce>
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	853b      	strh	r3, [r7, #40]	; 0x28
 8010ed8:	e008      	b.n	8010eec <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8010eda:	7e7b      	ldrb	r3, [r7, #25]
 8010edc:	f003 0302 	and.w	r3, r3, #2
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d003      	beq.n	8010eec <_UG_PutText+0x1e0>
 8010ee4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010ee8:	105b      	asrs	r3, r3, #1
 8010eea:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8010eec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010eee:	8bbb      	ldrh	r3, [r7, #28]
 8010ef0:	4413      	add	r3, r2
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010ef6:	4b26      	ldr	r3, [pc, #152]	; (8010f90 <_UG_PutText+0x284>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d107      	bne.n	8010f12 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8010f02:	f107 030c 	add.w	r3, r7, #12
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7ff f90a 	bl	8010120 <_UG_DecodeUTF8>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010f10:	e004      	b.n	8010f1c <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	1c5a      	adds	r2, r3, #1
 8010f16:	60fa      	str	r2, [r7, #12]
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8010f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d031      	beq.n	8010f86 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8010f22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f24:	2b0a      	cmp	r3, #10
 8010f26:	d01c      	beq.n	8010f62 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	8a1c      	ldrh	r4, [r3, #16]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	8a5b      	ldrh	r3, [r3, #18]
 8010f30:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010f34:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8010f38:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	4623      	mov	r3, r4
 8010f3e:	f7ff fb35 	bl	80105ac <_UG_PutChar>
 8010f42:	4603      	mov	r3, r0
 8010f44:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8010f46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f4e:	d0d2      	beq.n	8010ef6 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8010f50:	8a7a      	ldrh	r2, [r7, #18]
 8010f52:	8afb      	ldrh	r3, [r7, #22]
 8010f54:	4413      	add	r3, r2
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010f5a:	4413      	add	r3, r2
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010f60:	e7c9      	b.n	8010ef6 <_UG_PutText+0x1ea>
           break;
 8010f62:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8010f64:	8bfa      	ldrh	r2, [r7, #30]
 8010f66:	8abb      	ldrh	r3, [r7, #20]
 8010f68:	4413      	add	r3, r2
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010f6e:	4413      	add	r3, r2
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8010f74:	e75d      	b.n	8010e32 <_UG_PutText+0x126>
     return;
 8010f76:	bf00      	nop
 8010f78:	e006      	b.n	8010f88 <_UG_PutText+0x27c>
     return;
 8010f7a:	bf00      	nop
 8010f7c:	e004      	b.n	8010f88 <_UG_PutText+0x27c>
        return;
 8010f7e:	bf00      	nop
 8010f80:	e002      	b.n	8010f88 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8010f82:	bf00      	nop
 8010f84:	e000      	b.n	8010f88 <_UG_PutText+0x27c>
           return;
 8010f86:	bf00      	nop
   }
}
 8010f88:	3734      	adds	r7, #52	; 0x34
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd90      	pop	{r4, r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	20001b88 	.word	0x20001b88

08010f94 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8010f94:	b5b0      	push	{r4, r5, r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af02      	add	r7, sp, #8
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	4608      	mov	r0, r1
 8010f9e:	4611      	mov	r1, r2
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	4623      	mov	r3, r4
 8010fa4:	80fb      	strh	r3, [r7, #6]
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	80bb      	strh	r3, [r7, #4]
 8010faa:	460b      	mov	r3, r1
 8010fac:	807b      	strh	r3, [r7, #2]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8010fb2:	887b      	ldrh	r3, [r7, #2]
 8010fb4:	3b01      	subs	r3, #1
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	b21c      	sxth	r4, r3
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	1c9a      	adds	r2, r3, #2
 8010fbe:	61ba      	str	r2, [r7, #24]
 8010fc0:	881b      	ldrh	r3, [r3, #0]
 8010fc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010fc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8010fca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010fce:	9300      	str	r3, [sp, #0]
 8010fd0:	4613      	mov	r3, r2
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	f7fe fee0 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8010fd8:	88bb      	ldrh	r3, [r7, #4]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	b219      	sxth	r1, r3
 8010fe0:	883b      	ldrh	r3, [r7, #0]
 8010fe2:	3b01      	subs	r3, #1
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	b21c      	sxth	r4, r3
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	1c9a      	adds	r2, r3, #2
 8010fec:	61ba      	str	r2, [r7, #24]
 8010fee:	881b      	ldrh	r3, [r3, #0]
 8010ff0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010ff4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010ff8:	9300      	str	r3, [sp, #0]
 8010ffa:	4623      	mov	r3, r4
 8010ffc:	f7fe fecc 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8011000:	69bb      	ldr	r3, [r7, #24]
 8011002:	1c9a      	adds	r2, r3, #2
 8011004:	61ba      	str	r2, [r7, #24]
 8011006:	881b      	ldrh	r3, [r3, #0]
 8011008:	f9b7 4000 	ldrsh.w	r4, [r7]
 801100c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011010:	f9b7 1000 	ldrsh.w	r1, [r7]
 8011014:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	4623      	mov	r3, r4
 801101c:	f7fe febc 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8011020:	883b      	ldrh	r3, [r7, #0]
 8011022:	3b01      	subs	r3, #1
 8011024:	b29b      	uxth	r3, r3
 8011026:	b21c      	sxth	r4, r3
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	1c9a      	adds	r2, r3, #2
 801102c:	61ba      	str	r2, [r7, #24]
 801102e:	881b      	ldrh	r3, [r3, #0]
 8011030:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011034:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011038:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	4623      	mov	r3, r4
 8011040:	f7fe feaa 	bl	800fd98 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8011044:	88fb      	ldrh	r3, [r7, #6]
 8011046:	3301      	adds	r3, #1
 8011048:	b29b      	uxth	r3, r3
 801104a:	b218      	sxth	r0, r3
 801104c:	88bb      	ldrh	r3, [r7, #4]
 801104e:	3301      	adds	r3, #1
 8011050:	b29b      	uxth	r3, r3
 8011052:	b219      	sxth	r1, r3
 8011054:	887b      	ldrh	r3, [r7, #2]
 8011056:	3b02      	subs	r3, #2
 8011058:	b29b      	uxth	r3, r3
 801105a:	b21c      	sxth	r4, r3
 801105c:	88bb      	ldrh	r3, [r7, #4]
 801105e:	3301      	adds	r3, #1
 8011060:	b29b      	uxth	r3, r3
 8011062:	b21d      	sxth	r5, r3
 8011064:	69bb      	ldr	r3, [r7, #24]
 8011066:	1c9a      	adds	r2, r3, #2
 8011068:	61ba      	str	r2, [r7, #24]
 801106a:	881b      	ldrh	r3, [r3, #0]
 801106c:	9300      	str	r3, [sp, #0]
 801106e:	462b      	mov	r3, r5
 8011070:	4622      	mov	r2, r4
 8011072:	f7fe fe91 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8011076:	88fb      	ldrh	r3, [r7, #6]
 8011078:	3301      	adds	r3, #1
 801107a:	b29b      	uxth	r3, r3
 801107c:	b218      	sxth	r0, r3
 801107e:	88bb      	ldrh	r3, [r7, #4]
 8011080:	3302      	adds	r3, #2
 8011082:	b29b      	uxth	r3, r3
 8011084:	b219      	sxth	r1, r3
 8011086:	88fb      	ldrh	r3, [r7, #6]
 8011088:	3301      	adds	r3, #1
 801108a:	b29b      	uxth	r3, r3
 801108c:	b21c      	sxth	r4, r3
 801108e:	883b      	ldrh	r3, [r7, #0]
 8011090:	3b02      	subs	r3, #2
 8011092:	b29b      	uxth	r3, r3
 8011094:	b21d      	sxth	r5, r3
 8011096:	69bb      	ldr	r3, [r7, #24]
 8011098:	1c9a      	adds	r2, r3, #2
 801109a:	61ba      	str	r2, [r7, #24]
 801109c:	881b      	ldrh	r3, [r3, #0]
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	462b      	mov	r3, r5
 80110a2:	4622      	mov	r2, r4
 80110a4:	f7fe fe78 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80110a8:	88fb      	ldrh	r3, [r7, #6]
 80110aa:	3301      	adds	r3, #1
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	b218      	sxth	r0, r3
 80110b0:	883b      	ldrh	r3, [r7, #0]
 80110b2:	3b01      	subs	r3, #1
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	b219      	sxth	r1, r3
 80110b8:	887b      	ldrh	r3, [r7, #2]
 80110ba:	3b01      	subs	r3, #1
 80110bc:	b29b      	uxth	r3, r3
 80110be:	b21c      	sxth	r4, r3
 80110c0:	883b      	ldrh	r3, [r7, #0]
 80110c2:	3b01      	subs	r3, #1
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	b21d      	sxth	r5, r3
 80110c8:	69bb      	ldr	r3, [r7, #24]
 80110ca:	1c9a      	adds	r2, r3, #2
 80110cc:	61ba      	str	r2, [r7, #24]
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	462b      	mov	r3, r5
 80110d4:	4622      	mov	r2, r4
 80110d6:	f7fe fe5f 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80110da:	887b      	ldrh	r3, [r7, #2]
 80110dc:	3b01      	subs	r3, #1
 80110de:	b29b      	uxth	r3, r3
 80110e0:	b218      	sxth	r0, r3
 80110e2:	88bb      	ldrh	r3, [r7, #4]
 80110e4:	3301      	adds	r3, #1
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	b219      	sxth	r1, r3
 80110ea:	887b      	ldrh	r3, [r7, #2]
 80110ec:	3b01      	subs	r3, #1
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	b21c      	sxth	r4, r3
 80110f2:	883b      	ldrh	r3, [r7, #0]
 80110f4:	3b02      	subs	r3, #2
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	b21d      	sxth	r5, r3
 80110fa:	69bb      	ldr	r3, [r7, #24]
 80110fc:	1c9a      	adds	r2, r3, #2
 80110fe:	61ba      	str	r2, [r7, #24]
 8011100:	881b      	ldrh	r3, [r3, #0]
 8011102:	9300      	str	r3, [sp, #0]
 8011104:	462b      	mov	r3, r5
 8011106:	4622      	mov	r2, r4
 8011108:	f7fe fe46 	bl	800fd98 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 801110c:	88fb      	ldrh	r3, [r7, #6]
 801110e:	3302      	adds	r3, #2
 8011110:	b29b      	uxth	r3, r3
 8011112:	b218      	sxth	r0, r3
 8011114:	88bb      	ldrh	r3, [r7, #4]
 8011116:	3302      	adds	r3, #2
 8011118:	b29b      	uxth	r3, r3
 801111a:	b219      	sxth	r1, r3
 801111c:	887b      	ldrh	r3, [r7, #2]
 801111e:	3b03      	subs	r3, #3
 8011120:	b29b      	uxth	r3, r3
 8011122:	b21c      	sxth	r4, r3
 8011124:	88bb      	ldrh	r3, [r7, #4]
 8011126:	3302      	adds	r3, #2
 8011128:	b29b      	uxth	r3, r3
 801112a:	b21d      	sxth	r5, r3
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	1c9a      	adds	r2, r3, #2
 8011130:	61ba      	str	r2, [r7, #24]
 8011132:	881b      	ldrh	r3, [r3, #0]
 8011134:	9300      	str	r3, [sp, #0]
 8011136:	462b      	mov	r3, r5
 8011138:	4622      	mov	r2, r4
 801113a:	f7fe fe2d 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 801113e:	88fb      	ldrh	r3, [r7, #6]
 8011140:	3302      	adds	r3, #2
 8011142:	b29b      	uxth	r3, r3
 8011144:	b218      	sxth	r0, r3
 8011146:	88bb      	ldrh	r3, [r7, #4]
 8011148:	3303      	adds	r3, #3
 801114a:	b29b      	uxth	r3, r3
 801114c:	b219      	sxth	r1, r3
 801114e:	88fb      	ldrh	r3, [r7, #6]
 8011150:	3302      	adds	r3, #2
 8011152:	b29b      	uxth	r3, r3
 8011154:	b21c      	sxth	r4, r3
 8011156:	883b      	ldrh	r3, [r7, #0]
 8011158:	3b03      	subs	r3, #3
 801115a:	b29b      	uxth	r3, r3
 801115c:	b21d      	sxth	r5, r3
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	1c9a      	adds	r2, r3, #2
 8011162:	61ba      	str	r2, [r7, #24]
 8011164:	881b      	ldrh	r3, [r3, #0]
 8011166:	9300      	str	r3, [sp, #0]
 8011168:	462b      	mov	r3, r5
 801116a:	4622      	mov	r2, r4
 801116c:	f7fe fe14 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8011170:	88fb      	ldrh	r3, [r7, #6]
 8011172:	3302      	adds	r3, #2
 8011174:	b29b      	uxth	r3, r3
 8011176:	b218      	sxth	r0, r3
 8011178:	883b      	ldrh	r3, [r7, #0]
 801117a:	3b02      	subs	r3, #2
 801117c:	b29b      	uxth	r3, r3
 801117e:	b219      	sxth	r1, r3
 8011180:	887b      	ldrh	r3, [r7, #2]
 8011182:	3b02      	subs	r3, #2
 8011184:	b29b      	uxth	r3, r3
 8011186:	b21c      	sxth	r4, r3
 8011188:	883b      	ldrh	r3, [r7, #0]
 801118a:	3b02      	subs	r3, #2
 801118c:	b29b      	uxth	r3, r3
 801118e:	b21d      	sxth	r5, r3
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	1c9a      	adds	r2, r3, #2
 8011194:	61ba      	str	r2, [r7, #24]
 8011196:	881b      	ldrh	r3, [r3, #0]
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	462b      	mov	r3, r5
 801119c:	4622      	mov	r2, r4
 801119e:	f7fe fdfb 	bl	800fd98 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80111a2:	887b      	ldrh	r3, [r7, #2]
 80111a4:	3b02      	subs	r3, #2
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	b218      	sxth	r0, r3
 80111aa:	88bb      	ldrh	r3, [r7, #4]
 80111ac:	3302      	adds	r3, #2
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	b219      	sxth	r1, r3
 80111b2:	887b      	ldrh	r3, [r7, #2]
 80111b4:	3b02      	subs	r3, #2
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	b21a      	sxth	r2, r3
 80111ba:	883b      	ldrh	r3, [r7, #0]
 80111bc:	3b03      	subs	r3, #3
 80111be:	b29b      	uxth	r3, r3
 80111c0:	b21c      	sxth	r4, r3
 80111c2:	69bb      	ldr	r3, [r7, #24]
 80111c4:	881b      	ldrh	r3, [r3, #0]
 80111c6:	9300      	str	r3, [sp, #0]
 80111c8:	4623      	mov	r3, r4
 80111ca:	f7fe fde5 	bl	800fd98 <UG_DrawLine>
}
 80111ce:	bf00      	nop
 80111d0:	3708      	adds	r7, #8
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080111d8 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	4603      	mov	r3, r0
 80111e0:	6039      	str	r1, [r7, #0]
 80111e2:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80111e4:	79fb      	ldrb	r3, [r7, #7]
 80111e6:	2b03      	cmp	r3, #3
 80111e8:	d810      	bhi.n	801120c <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80111ea:	4b0b      	ldr	r3, [pc, #44]	; (8011218 <UG_DriverRegister+0x40>)
 80111ec:	681a      	ldr	r2, [r3, #0]
 80111ee:	79fb      	ldrb	r3, [r7, #7]
 80111f0:	330a      	adds	r3, #10
 80111f2:	00db      	lsls	r3, r3, #3
 80111f4:	4413      	add	r3, r2
 80111f6:	683a      	ldr	r2, [r7, #0]
 80111f8:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80111fa:	4b07      	ldr	r3, [pc, #28]	; (8011218 <UG_DriverRegister+0x40>)
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	79fb      	ldrb	r3, [r7, #7]
 8011200:	330a      	adds	r3, #10
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	4413      	add	r3, r2
 8011206:	2203      	movs	r2, #3
 8011208:	721a      	strb	r2, [r3, #8]
 801120a:	e000      	b.n	801120e <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 801120c:	bf00      	nop
}
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr
 8011218:	20001b88 	.word	0x20001b88

0801121c <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8011222:	4b5e      	ldr	r3, [pc, #376]	; (801139c <UG_Update+0x180>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801122a:	f003 0301 	and.w	r3, r3, #1
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00a      	beq.n	8011248 <UG_Update+0x2c>
 8011232:	4b5a      	ldr	r3, [pc, #360]	; (801139c <UG_Update+0x180>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 801123a:	4b58      	ldr	r3, [pc, #352]	; (801139c <UG_Update+0x180>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f022 0201 	bic.w	r2, r2, #1
 8011242:	b2d2      	uxtb	r2, r2
 8011244:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8011248:	4b54      	ldr	r3, [pc, #336]	; (801139c <UG_Update+0x180>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	68da      	ldr	r2, [r3, #12]
 801124e:	4b53      	ldr	r3, [pc, #332]	; (801139c <UG_Update+0x180>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	691b      	ldr	r3, [r3, #16]
 8011254:	429a      	cmp	r2, r3
 8011256:	d071      	beq.n	801133c <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8011258:	4b50      	ldr	r3, [pc, #320]	; (801139c <UG_Update+0x180>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d06c      	beq.n	801133c <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8011262:	4b4e      	ldr	r3, [pc, #312]	; (801139c <UG_Update+0x180>)
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	4b4d      	ldr	r3, [pc, #308]	; (801139c <UG_Update+0x180>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	6912      	ldr	r2, [r2, #16]
 801126c:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 801126e:	4b4b      	ldr	r3, [pc, #300]	; (801139c <UG_Update+0x180>)
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	4b4a      	ldr	r3, [pc, #296]	; (801139c <UG_Update+0x180>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	68d2      	ldr	r2, [r2, #12]
 8011278:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 801127a:	4b48      	ldr	r3, [pc, #288]	; (801139c <UG_Update+0x180>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	695b      	ldr	r3, [r3, #20]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d045      	beq.n	8011310 <UG_Update+0xf4>
 8011284:	4b45      	ldr	r3, [pc, #276]	; (801139c <UG_Update+0x180>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	695b      	ldr	r3, [r3, #20]
 801128a:	7d9b      	ldrb	r3, [r3, #22]
 801128c:	f003 0302 	and.w	r3, r3, #2
 8011290:	2b00      	cmp	r3, #0
 8011292:	d03d      	beq.n	8011310 <UG_Update+0xf4>
 8011294:	4b41      	ldr	r3, [pc, #260]	; (801139c <UG_Update+0x180>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	695b      	ldr	r3, [r3, #20]
 801129a:	7a1b      	ldrb	r3, [r3, #8]
 801129c:	f003 0308 	and.w	r3, r3, #8
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d035      	beq.n	8011310 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80112a4:	4b3d      	ldr	r3, [pc, #244]	; (801139c <UG_Update+0x180>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	695b      	ldr	r3, [r3, #20]
 80112aa:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80112ae:	4b3b      	ldr	r3, [pc, #236]	; (801139c <UG_Update+0x180>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	691b      	ldr	r3, [r3, #16]
 80112b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d123      	bne.n	8011304 <UG_Update+0xe8>
 80112bc:	4b37      	ldr	r3, [pc, #220]	; (801139c <UG_Update+0x180>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	695b      	ldr	r3, [r3, #20]
 80112c2:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80112c6:	4b35      	ldr	r3, [pc, #212]	; (801139c <UG_Update+0x180>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	691b      	ldr	r3, [r3, #16]
 80112cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d117      	bne.n	8011304 <UG_Update+0xe8>
 80112d4:	4b31      	ldr	r3, [pc, #196]	; (801139c <UG_Update+0x180>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	695b      	ldr	r3, [r3, #20]
 80112da:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80112de:	4b2f      	ldr	r3, [pc, #188]	; (801139c <UG_Update+0x180>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	691b      	ldr	r3, [r3, #16]
 80112e4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d10b      	bne.n	8011304 <UG_Update+0xe8>
 80112ec:	4b2b      	ldr	r3, [pc, #172]	; (801139c <UG_Update+0x180>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	695b      	ldr	r3, [r3, #20]
 80112f2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80112f6:	4b29      	ldr	r3, [pc, #164]	; (801139c <UG_Update+0x180>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	691b      	ldr	r3, [r3, #16]
 80112fc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011300:	429a      	cmp	r2, r3
 8011302:	d005      	beq.n	8011310 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8011304:	4b25      	ldr	r3, [pc, #148]	; (801139c <UG_Update+0x180>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	695b      	ldr	r3, [r3, #20]
 801130a:	4618      	mov	r0, r3
 801130c:	f000 f848 	bl	80113a0 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8011310:	4b22      	ldr	r3, [pc, #136]	; (801139c <UG_Update+0x180>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	691b      	ldr	r3, [r3, #16]
 8011316:	7a1a      	ldrb	r2, [r3, #8]
 8011318:	4b20      	ldr	r3, [pc, #128]	; (801139c <UG_Update+0x180>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	691b      	ldr	r3, [r3, #16]
 801131e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011322:	b2d2      	uxtb	r2, r2
 8011324:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8011326:	4b1d      	ldr	r3, [pc, #116]	; (801139c <UG_Update+0x180>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	691b      	ldr	r3, [r3, #16]
 801132c:	7a1a      	ldrb	r2, [r3, #8]
 801132e:	4b1b      	ldr	r3, [pc, #108]	; (801139c <UG_Update+0x180>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	691b      	ldr	r3, [r3, #16]
 8011334:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8011338:	b2d2      	uxtb	r2, r2
 801133a:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 801133c:	4b17      	ldr	r3, [pc, #92]	; (801139c <UG_Update+0x180>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d01b      	beq.n	801137e <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8011346:	4b15      	ldr	r3, [pc, #84]	; (801139c <UG_Update+0x180>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	691b      	ldr	r3, [r3, #16]
 801134c:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	7a1b      	ldrb	r3, [r3, #8]
 8011352:	f003 0320 	and.w	r3, r3, #32
 8011356:	2b00      	cmp	r3, #0
 8011358:	d002      	beq.n	8011360 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f000 f8ca 	bl	80114f4 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	7a1b      	ldrb	r3, [r3, #8]
 8011364:	f003 0308 	and.w	r3, r3, #8
 8011368:	2b00      	cmp	r3, #0
 801136a:	d008      	beq.n	801137e <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7ff fb81 	bl	8010a74 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f7ff fc34 	bl	8010be0 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f7ff fc7b 	bl	8010c74 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 801137e:	4b07      	ldr	r3, [pc, #28]	; (801139c <UG_Update+0x180>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d004      	beq.n	8011394 <UG_Update+0x178>
     gui->device->flush();
 801138a:	4b04      	ldr	r3, [pc, #16]	; (801139c <UG_Update+0x180>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	689b      	ldr	r3, [r3, #8]
 8011392:	4798      	blx	r3
   }
}
 8011394:	bf00      	nop
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	20001b88 	.word	0x20001b88

080113a0 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 80113a0:	b590      	push	{r4, r7, lr}
 80113a2:	b08f      	sub	sp, #60	; 0x3c
 80113a4:	af02      	add	r7, sp, #8
 80113a6:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	f000 809a 	beq.w	80114e4 <_UG_WindowDrawTitle+0x144>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	7a1b      	ldrb	r3, [r3, #8]
 80113b4:	f003 0302 	and.w	r3, r3, #2
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	f000 8093 	beq.w	80114e4 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	89db      	ldrh	r3, [r3, #14]
 80113c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	8a1b      	ldrh	r3, [r3, #16]
 80113c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	8a5b      	ldrh	r3, [r3, #18]
 80113ce:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	8a9b      	ldrh	r3, [r3, #20]
 80113d4:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	7d9b      	ldrb	r3, [r3, #22]
 80113da:	f003 0301 	and.w	r3, r3, #1
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00f      	beq.n	8011402 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 80113e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80113e4:	3303      	adds	r3, #3
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 80113ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113ec:	3303      	adds	r3, #3
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 80113f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80113f4:	3b03      	subs	r3, #3
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 80113fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80113fc:	3b03      	subs	r3, #3
 80113fe:	b29b      	uxth	r3, r3
 8011400:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8011402:	4b3b      	ldr	r3, [pc, #236]	; (80114f0 <_UG_WindowDrawTitle+0x150>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	691b      	ldr	r3, [r3, #16]
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	429a      	cmp	r2, r3
 801140c:	d106      	bne.n	801141c <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011412:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011418:	83bb      	strh	r3, [r7, #28]
 801141a:	e005      	b.n	8011428 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011420:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011426:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801142e:	b29a      	uxth	r2, r3
 8011430:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011432:	4413      	add	r3, r2
 8011434:	b29b      	uxth	r3, r3
 8011436:	3b01      	subs	r3, #1
 8011438:	b29b      	uxth	r3, r3
 801143a:	b21c      	sxth	r4, r3
 801143c:	8bfb      	ldrh	r3, [r7, #30]
 801143e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8011442:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8011446:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	4623      	mov	r3, r4
 801144e:	f7fe fb03 	bl	800fa58 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	699b      	ldr	r3, [r3, #24]
 8011456:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	69db      	ldr	r3, [r3, #28]
 801145c:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 801145e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011460:	3303      	adds	r3, #3
 8011462:	b29b      	uxth	r3, r3
 8011464:	b21b      	sxth	r3, r3
 8011466:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8011468:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801146a:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 801146c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801146e:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011476:	b29a      	uxth	r2, r3
 8011478:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801147a:	4413      	add	r3, r2
 801147c:	b29b      	uxth	r3, r3
 801147e:	3b01      	subs	r3, #1
 8011480:	b29b      	uxth	r3, r3
 8011482:	b21b      	sxth	r3, r3
 8011484:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801148c:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8011496:	b21b      	sxth	r3, r3
 8011498:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 80114a0:	b21b      	sxth	r3, r3
 80114a2:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 80114a4:	f107 030c 	add.w	r3, r7, #12
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7ff fc2f 	bl	8010d0c <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80114b4:	b29a      	uxth	r2, r3
 80114b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114b8:	4413      	add	r3, r2
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	b219      	sxth	r1, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114c8:	4413      	add	r3, r2
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	b21b      	sxth	r3, r3
 80114ce:	f649 5413 	movw	r4, #40211	; 0x9d13
 80114d2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80114d6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80114da:	9400      	str	r4, [sp, #0]
 80114dc:	f7fe fc5c 	bl	800fd98 <UG_DrawLine>
      return UG_RESULT_OK;
 80114e0:	2300      	movs	r3, #0
 80114e2:	e001      	b.n	80114e8 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 80114e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3734      	adds	r7, #52	; 0x34
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd90      	pop	{r4, r7, pc}
 80114f0:	20001b88 	.word	0x20001b88

080114f4 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80114f4:	b590      	push	{r4, r7, lr}
 80114f6:	b089      	sub	sp, #36	; 0x24
 80114f8:	af02      	add	r7, sp, #8
 80114fa:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	89db      	ldrh	r3, [r3, #14]
 8011500:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	8a1b      	ldrh	r3, [r3, #16]
 8011506:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	8a5b      	ldrh	r3, [r3, #18]
 801150c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	8a9b      	ldrh	r3, [r3, #20]
 8011512:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	7a1b      	ldrb	r3, [r3, #8]
 8011518:	f023 0320 	bic.w	r3, r3, #32
 801151c:	b2da      	uxtb	r2, r3
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	7a1b      	ldrb	r3, [r3, #8]
 8011526:	f003 0308 	and.w	r3, r3, #8
 801152a:	2b00      	cmp	r3, #0
 801152c:	f000 8084 	beq.w	8011638 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	7d9b      	ldrb	r3, [r3, #22]
 8011534:	f003 0301 	and.w	r3, r3, #1
 8011538:	2b00      	cmp	r3, #0
 801153a:	d021      	beq.n	8011580 <_UG_WindowUpdate+0x8c>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	7a1b      	ldrb	r3, [r3, #8]
 8011540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011544:	2b00      	cmp	r3, #0
 8011546:	d11b      	bne.n	8011580 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8011548:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801154c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011550:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8011554:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8011558:	4c43      	ldr	r4, [pc, #268]	; (8011668 <_UG_WindowUpdate+0x174>)
 801155a:	9400      	str	r4, [sp, #0]
 801155c:	f7ff fd1a 	bl	8010f94 <_UG_DrawObjectFrame>
         xs+=3;
 8011560:	8abb      	ldrh	r3, [r7, #20]
 8011562:	3303      	adds	r3, #3
 8011564:	b29b      	uxth	r3, r3
 8011566:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8011568:	8a7b      	ldrh	r3, [r7, #18]
 801156a:	3303      	adds	r3, #3
 801156c:	b29b      	uxth	r3, r3
 801156e:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8011570:	8a3b      	ldrh	r3, [r7, #16]
 8011572:	3b03      	subs	r3, #3
 8011574:	b29b      	uxth	r3, r3
 8011576:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8011578:	89fb      	ldrh	r3, [r7, #14]
 801157a:	3b03      	subs	r3, #3
 801157c:	b29b      	uxth	r3, r3
 801157e:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	7d9b      	ldrb	r3, [r3, #22]
 8011584:	f003 0302 	and.w	r3, r3, #2
 8011588:	2b00      	cmp	r3, #0
 801158a:	d01a      	beq.n	80115c2 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f7ff ff07 	bl	80113a0 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011598:	b29a      	uxth	r2, r3
 801159a:	8a7b      	ldrh	r3, [r7, #18]
 801159c:	4413      	add	r3, r2
 801159e:	b29b      	uxth	r3, r3
 80115a0:	3301      	adds	r3, #1
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	7a1b      	ldrb	r3, [r3, #8]
 80115aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d007      	beq.n	80115c2 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	7a1b      	ldrb	r3, [r3, #8]
 80115b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115ba:	b2da      	uxtb	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	721a      	strb	r2, [r3, #8]
            return;
 80115c0:	e04e      	b.n	8011660 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	899b      	ldrh	r3, [r3, #12]
 80115c6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80115ca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80115ce:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80115d2:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80115d6:	9300      	str	r3, [sp, #0]
 80115d8:	4623      	mov	r3, r4
 80115da:	f7fe fa3d 	bl	800fa58 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 80115e4:	2300      	movs	r3, #0
 80115e6:	82fb      	strh	r3, [r7, #22]
 80115e8:	e021      	b.n	801162e <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	685a      	ldr	r2, [r3, #4]
 80115ee:	8afb      	ldrh	r3, [r7, #22]
 80115f0:	015b      	lsls	r3, r3, #5
 80115f2:	4413      	add	r3, r2
 80115f4:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	f003 0301 	and.w	r3, r3, #1
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d112      	bne.n	8011628 <_UG_WindowUpdate+0x134>
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	f003 0302 	and.w	r3, r3, #2
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00c      	beq.n	8011628 <_UG_WindowUpdate+0x134>
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	f003 0308 	and.w	r3, r3, #8
 8011616:	2b00      	cmp	r3, #0
 8011618:	d006      	beq.n	8011628 <_UG_WindowUpdate+0x134>
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011622:	b2da      	uxtb	r2, r3
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8011628:	8afb      	ldrh	r3, [r7, #22]
 801162a:	3301      	adds	r3, #1
 801162c:	82fb      	strh	r3, [r7, #22]
 801162e:	8afa      	ldrh	r2, [r7, #22]
 8011630:	89bb      	ldrh	r3, [r7, #12]
 8011632:	429a      	cmp	r2, r3
 8011634:	d3d9      	bcc.n	80115ea <_UG_WindowUpdate+0xf6>
 8011636:	e013      	b.n	8011660 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8011650:	4b06      	ldr	r3, [pc, #24]	; (801166c <_UG_WindowUpdate+0x178>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	4623      	mov	r3, r4
 801165c:	f7fe f9fc 	bl	800fa58 <UG_FillFrame>
   }
}
 8011660:	371c      	adds	r7, #28
 8011662:	46bd      	mov	sp, r7
 8011664:	bd90      	pop	{r4, r7, pc}
 8011666:	bf00      	nop
 8011668:	0801c4d4 	.word	0x0801c4d4
 801166c:	20001b88 	.word	0x20001b88

08011670 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	460b      	mov	r3, r1
 801167a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801167c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011680:	f002 f8a6 	bl	80137d0 <USBD_static_malloc>
 8011684:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d105      	bne.n	8011698 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011694:	2302      	movs	r3, #2
 8011696:	e066      	b.n	8011766 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	68fa      	ldr	r2, [r7, #12]
 801169c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	7c1b      	ldrb	r3, [r3, #16]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d119      	bne.n	80116dc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80116a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116ac:	2202      	movs	r2, #2
 80116ae:	2181      	movs	r1, #129	; 0x81
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f001 ff34 	bl	801351e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2201      	movs	r2, #1
 80116ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80116bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116c0:	2202      	movs	r2, #2
 80116c2:	2101      	movs	r1, #1
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f001 ff2a 	bl	801351e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2201      	movs	r2, #1
 80116ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2210      	movs	r2, #16
 80116d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80116da:	e016      	b.n	801170a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80116dc:	2340      	movs	r3, #64	; 0x40
 80116de:	2202      	movs	r2, #2
 80116e0:	2181      	movs	r1, #129	; 0x81
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f001 ff1b 	bl	801351e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2201      	movs	r2, #1
 80116ec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80116ee:	2340      	movs	r3, #64	; 0x40
 80116f0:	2202      	movs	r2, #2
 80116f2:	2101      	movs	r1, #1
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f001 ff12 	bl	801351e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2201      	movs	r2, #1
 80116fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2210      	movs	r2, #16
 8011706:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801170a:	2308      	movs	r3, #8
 801170c:	2203      	movs	r2, #3
 801170e:	2182      	movs	r1, #130	; 0x82
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f001 ff04 	bl	801351e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2201      	movs	r2, #1
 801171a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2200      	movs	r2, #0
 801172c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2200      	movs	r2, #0
 8011734:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	7c1b      	ldrb	r3, [r3, #16]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d109      	bne.n	8011754 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011746:	f44f 7300 	mov.w	r3, #512	; 0x200
 801174a:	2101      	movs	r1, #1
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f001 ffd5 	bl	80136fc <USBD_LL_PrepareReceive>
 8011752:	e007      	b.n	8011764 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801175a:	2340      	movs	r3, #64	; 0x40
 801175c:	2101      	movs	r1, #1
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f001 ffcc 	bl	80136fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011764:	2300      	movs	r3, #0
}
 8011766:	4618      	mov	r0, r3
 8011768:	3710      	adds	r7, #16
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}

0801176e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801176e:	b580      	push	{r7, lr}
 8011770:	b082      	sub	sp, #8
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
 8011776:	460b      	mov	r3, r1
 8011778:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801177a:	2181      	movs	r1, #129	; 0x81
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f001 fef4 	bl	801356a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011788:	2101      	movs	r1, #1
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f001 feed 	bl	801356a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2200      	movs	r2, #0
 8011794:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011798:	2182      	movs	r1, #130	; 0x82
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f001 fee5 	bl	801356a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00e      	beq.n	80117d8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117ca:	4618      	mov	r0, r3
 80117cc:	f002 f80e 	bl	80137ec <USBD_static_free>
    pdev->pClassData = NULL;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2200      	movs	r2, #0
 80117d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80117d8:	2300      	movs	r3, #0
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3708      	adds	r7, #8
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}
	...

080117e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80117f6:	2300      	movs	r3, #0
 80117f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80117fa:	2300      	movs	r3, #0
 80117fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80117fe:	2300      	movs	r3, #0
 8011800:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d101      	bne.n	801180c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011808:	2303      	movs	r3, #3
 801180a:	e0af      	b.n	801196c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011814:	2b00      	cmp	r3, #0
 8011816:	d03f      	beq.n	8011898 <USBD_CDC_Setup+0xb4>
 8011818:	2b20      	cmp	r3, #32
 801181a:	f040 809f 	bne.w	801195c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	88db      	ldrh	r3, [r3, #6]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d02e      	beq.n	8011884 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	b25b      	sxtb	r3, r3
 801182c:	2b00      	cmp	r3, #0
 801182e:	da16      	bge.n	801185e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011836:	689b      	ldr	r3, [r3, #8]
 8011838:	683a      	ldr	r2, [r7, #0]
 801183a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801183c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801183e:	683a      	ldr	r2, [r7, #0]
 8011840:	88d2      	ldrh	r2, [r2, #6]
 8011842:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	88db      	ldrh	r3, [r3, #6]
 8011848:	2b07      	cmp	r3, #7
 801184a:	bf28      	it	cs
 801184c:	2307      	movcs	r3, #7
 801184e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	89fa      	ldrh	r2, [r7, #14]
 8011854:	4619      	mov	r1, r3
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f001 fa9f 	bl	8012d9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801185c:	e085      	b.n	801196a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	785a      	ldrb	r2, [r3, #1]
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	88db      	ldrh	r3, [r3, #6]
 801186c:	b2da      	uxtb	r2, r3
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011874:	6939      	ldr	r1, [r7, #16]
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	88db      	ldrh	r3, [r3, #6]
 801187a:	461a      	mov	r2, r3
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f001 fab8 	bl	8012df2 <USBD_CtlPrepareRx>
      break;
 8011882:	e072      	b.n	801196a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801188a:	689b      	ldr	r3, [r3, #8]
 801188c:	683a      	ldr	r2, [r7, #0]
 801188e:	7850      	ldrb	r0, [r2, #1]
 8011890:	2200      	movs	r2, #0
 8011892:	6839      	ldr	r1, [r7, #0]
 8011894:	4798      	blx	r3
      break;
 8011896:	e068      	b.n	801196a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	785b      	ldrb	r3, [r3, #1]
 801189c:	2b0b      	cmp	r3, #11
 801189e:	d852      	bhi.n	8011946 <USBD_CDC_Setup+0x162>
 80118a0:	a201      	add	r2, pc, #4	; (adr r2, 80118a8 <USBD_CDC_Setup+0xc4>)
 80118a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118a6:	bf00      	nop
 80118a8:	080118d9 	.word	0x080118d9
 80118ac:	08011955 	.word	0x08011955
 80118b0:	08011947 	.word	0x08011947
 80118b4:	08011947 	.word	0x08011947
 80118b8:	08011947 	.word	0x08011947
 80118bc:	08011947 	.word	0x08011947
 80118c0:	08011947 	.word	0x08011947
 80118c4:	08011947 	.word	0x08011947
 80118c8:	08011947 	.word	0x08011947
 80118cc:	08011947 	.word	0x08011947
 80118d0:	08011903 	.word	0x08011903
 80118d4:	0801192d 	.word	0x0801192d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b03      	cmp	r3, #3
 80118e2:	d107      	bne.n	80118f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80118e4:	f107 030a 	add.w	r3, r7, #10
 80118e8:	2202      	movs	r2, #2
 80118ea:	4619      	mov	r1, r3
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f001 fa54 	bl	8012d9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80118f2:	e032      	b.n	801195a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80118f4:	6839      	ldr	r1, [r7, #0]
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f001 f9de 	bl	8012cb8 <USBD_CtlError>
            ret = USBD_FAIL;
 80118fc:	2303      	movs	r3, #3
 80118fe:	75fb      	strb	r3, [r7, #23]
          break;
 8011900:	e02b      	b.n	801195a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011908:	b2db      	uxtb	r3, r3
 801190a:	2b03      	cmp	r3, #3
 801190c:	d107      	bne.n	801191e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801190e:	f107 030d 	add.w	r3, r7, #13
 8011912:	2201      	movs	r2, #1
 8011914:	4619      	mov	r1, r3
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f001 fa3f 	bl	8012d9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801191c:	e01d      	b.n	801195a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801191e:	6839      	ldr	r1, [r7, #0]
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f001 f9c9 	bl	8012cb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8011926:	2303      	movs	r3, #3
 8011928:	75fb      	strb	r3, [r7, #23]
          break;
 801192a:	e016      	b.n	801195a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011932:	b2db      	uxtb	r3, r3
 8011934:	2b03      	cmp	r3, #3
 8011936:	d00f      	beq.n	8011958 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011938:	6839      	ldr	r1, [r7, #0]
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f001 f9bc 	bl	8012cb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8011940:	2303      	movs	r3, #3
 8011942:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011944:	e008      	b.n	8011958 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011946:	6839      	ldr	r1, [r7, #0]
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f001 f9b5 	bl	8012cb8 <USBD_CtlError>
          ret = USBD_FAIL;
 801194e:	2303      	movs	r3, #3
 8011950:	75fb      	strb	r3, [r7, #23]
          break;
 8011952:	e002      	b.n	801195a <USBD_CDC_Setup+0x176>
          break;
 8011954:	bf00      	nop
 8011956:	e008      	b.n	801196a <USBD_CDC_Setup+0x186>
          break;
 8011958:	bf00      	nop
      }
      break;
 801195a:	e006      	b.n	801196a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801195c:	6839      	ldr	r1, [r7, #0]
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f001 f9aa 	bl	8012cb8 <USBD_CtlError>
      ret = USBD_FAIL;
 8011964:	2303      	movs	r3, #3
 8011966:	75fb      	strb	r3, [r7, #23]
      break;
 8011968:	bf00      	nop
  }

  return (uint8_t)ret;
 801196a:	7dfb      	ldrb	r3, [r7, #23]
}
 801196c:	4618      	mov	r0, r3
 801196e:	3718      	adds	r7, #24
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}

08011974 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	460b      	mov	r3, r1
 801197e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011986:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801198e:	2b00      	cmp	r3, #0
 8011990:	d101      	bne.n	8011996 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011992:	2303      	movs	r3, #3
 8011994:	e04f      	b.n	8011a36 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801199c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801199e:	78fa      	ldrb	r2, [r7, #3]
 80119a0:	6879      	ldr	r1, [r7, #4]
 80119a2:	4613      	mov	r3, r2
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	4413      	add	r3, r2
 80119a8:	009b      	lsls	r3, r3, #2
 80119aa:	440b      	add	r3, r1
 80119ac:	3318      	adds	r3, #24
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d029      	beq.n	8011a08 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80119b4:	78fa      	ldrb	r2, [r7, #3]
 80119b6:	6879      	ldr	r1, [r7, #4]
 80119b8:	4613      	mov	r3, r2
 80119ba:	009b      	lsls	r3, r3, #2
 80119bc:	4413      	add	r3, r2
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	440b      	add	r3, r1
 80119c2:	3318      	adds	r3, #24
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	78f9      	ldrb	r1, [r7, #3]
 80119c8:	68f8      	ldr	r0, [r7, #12]
 80119ca:	460b      	mov	r3, r1
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	440b      	add	r3, r1
 80119d0:	00db      	lsls	r3, r3, #3
 80119d2:	4403      	add	r3, r0
 80119d4:	3320      	adds	r3, #32
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80119dc:	fb01 f303 	mul.w	r3, r1, r3
 80119e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d110      	bne.n	8011a08 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80119e6:	78fa      	ldrb	r2, [r7, #3]
 80119e8:	6879      	ldr	r1, [r7, #4]
 80119ea:	4613      	mov	r3, r2
 80119ec:	009b      	lsls	r3, r3, #2
 80119ee:	4413      	add	r3, r2
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	440b      	add	r3, r1
 80119f4:	3318      	adds	r3, #24
 80119f6:	2200      	movs	r2, #0
 80119f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80119fa:	78f9      	ldrb	r1, [r7, #3]
 80119fc:	2300      	movs	r3, #0
 80119fe:	2200      	movs	r2, #0
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f001 fe5a 	bl	80136ba <USBD_LL_Transmit>
 8011a06:	e015      	b.n	8011a34 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a16:	691b      	ldr	r3, [r3, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d00b      	beq.n	8011a34 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a22:	691b      	ldr	r3, [r3, #16]
 8011a24:	68ba      	ldr	r2, [r7, #8]
 8011a26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011a2a:	68ba      	ldr	r2, [r7, #8]
 8011a2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011a30:	78fa      	ldrb	r2, [r7, #3]
 8011a32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011a34:	2300      	movs	r3, #0
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3710      	adds	r7, #16
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}

08011a3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011a3e:	b580      	push	{r7, lr}
 8011a40:	b084      	sub	sp, #16
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	6078      	str	r0, [r7, #4]
 8011a46:	460b      	mov	r3, r1
 8011a48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d101      	bne.n	8011a60 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011a5c:	2303      	movs	r3, #3
 8011a5e:	e015      	b.n	8011a8c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011a60:	78fb      	ldrb	r3, [r7, #3]
 8011a62:	4619      	mov	r1, r3
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f001 fe6a 	bl	801373e <USBD_LL_GetRxDataSize>
 8011a6a:	4602      	mov	r2, r0
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	68fa      	ldr	r2, [r7, #12]
 8011a7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011a80:	68fa      	ldr	r2, [r7, #12]
 8011a82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011a86:	4611      	mov	r1, r2
 8011a88:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011a8a:	2300      	movs	r3, #0
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3710      	adds	r7, #16
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011aa2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d101      	bne.n	8011aae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011aaa:	2303      	movs	r3, #3
 8011aac:	e01b      	b.n	8011ae6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d015      	beq.n	8011ae4 <USBD_CDC_EP0_RxReady+0x50>
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011abe:	2bff      	cmp	r3, #255	; 0xff
 8011ac0:	d010      	beq.n	8011ae4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011ac8:	689b      	ldr	r3, [r3, #8]
 8011aca:	68fa      	ldr	r2, [r7, #12]
 8011acc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011ad0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011ad2:	68fa      	ldr	r2, [r7, #12]
 8011ad4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011ad8:	b292      	uxth	r2, r2
 8011ada:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	22ff      	movs	r2, #255	; 0xff
 8011ae0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011ae4:	2300      	movs	r3, #0
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
	...

08011af0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011af0:	b480      	push	{r7}
 8011af2:	b083      	sub	sp, #12
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2243      	movs	r2, #67	; 0x43
 8011afc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011afe:	4b03      	ldr	r3, [pc, #12]	; (8011b0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr
 8011b0c:	20000224 	.word	0x20000224

08011b10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2243      	movs	r2, #67	; 0x43
 8011b1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011b1e:	4b03      	ldr	r3, [pc, #12]	; (8011b2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	370c      	adds	r7, #12
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	200001e0 	.word	0x200001e0

08011b30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2243      	movs	r2, #67	; 0x43
 8011b3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011b3e:	4b03      	ldr	r3, [pc, #12]	; (8011b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	370c      	adds	r7, #12
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr
 8011b4c:	20000268 	.word	0x20000268

08011b50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	220a      	movs	r2, #10
 8011b5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011b5e:	4b03      	ldr	r3, [pc, #12]	; (8011b6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	370c      	adds	r7, #12
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr
 8011b6c:	2000019c 	.word	0x2000019c

08011b70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b083      	sub	sp, #12
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d101      	bne.n	8011b84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011b80:	2303      	movs	r3, #3
 8011b82:	e004      	b.n	8011b8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	683a      	ldr	r2, [r7, #0]
 8011b88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011b8c:	2300      	movs	r3, #0
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	370c      	adds	r7, #12
 8011b92:	46bd      	mov	sp, r7
 8011b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b98:	4770      	bx	lr

08011b9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011b9a:	b480      	push	{r7}
 8011b9c:	b087      	sub	sp, #28
 8011b9e:	af00      	add	r7, sp, #0
 8011ba0:	60f8      	str	r0, [r7, #12]
 8011ba2:	60b9      	str	r1, [r7, #8]
 8011ba4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d101      	bne.n	8011bb8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011bb4:	2303      	movs	r3, #3
 8011bb6:	e008      	b.n	8011bca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	68ba      	ldr	r2, [r7, #8]
 8011bbc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011bc8:	2300      	movs	r3, #0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	371c      	adds	r7, #28
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr

08011bd6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011bd6:	b480      	push	{r7}
 8011bd8:	b085      	sub	sp, #20
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6078      	str	r0, [r7, #4]
 8011bde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011be6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d101      	bne.n	8011bf2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011bee:	2303      	movs	r3, #3
 8011bf0:	e004      	b.n	8011bfc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	683a      	ldr	r2, [r7, #0]
 8011bf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3714      	adds	r7, #20
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d101      	bne.n	8011c26 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011c22:	2303      	movs	r3, #3
 8011c24:	e016      	b.n	8011c54 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	7c1b      	ldrb	r3, [r3, #16]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d109      	bne.n	8011c42 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011c38:	2101      	movs	r1, #1
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f001 fd5e 	bl	80136fc <USBD_LL_PrepareReceive>
 8011c40:	e007      	b.n	8011c52 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011c48:	2340      	movs	r3, #64	; 0x40
 8011c4a:	2101      	movs	r1, #1
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f001 fd55 	bl	80136fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011c52:	2300      	movs	r3, #0
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	3710      	adds	r7, #16
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}

08011c5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b086      	sub	sp, #24
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	4613      	mov	r3, r2
 8011c68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d101      	bne.n	8011c74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011c70:	2303      	movs	r3, #3
 8011c72:	e01f      	b.n	8011cb4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	2200      	movs	r2, #0
 8011c78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2200      	movs	r2, #0
 8011c88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d003      	beq.n	8011c9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	79fa      	ldrb	r2, [r7, #7]
 8011ca6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011ca8:	68f8      	ldr	r0, [r7, #12]
 8011caa:	f001 fbbd 	bl	8013428 <USBD_LL_Init>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3718      	adds	r7, #24
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d101      	bne.n	8011cd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011cd0:	2303      	movs	r3, #3
 8011cd2:	e016      	b.n	8011d02 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	683a      	ldr	r2, [r7, #0]
 8011cd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00b      	beq.n	8011d00 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cf0:	f107 020e 	add.w	r2, r7, #14
 8011cf4:	4610      	mov	r0, r2
 8011cf6:	4798      	blx	r3
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011d00:	2300      	movs	r3, #0
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3710      	adds	r7, #16
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011d0a:	b580      	push	{r7, lr}
 8011d0c:	b082      	sub	sp, #8
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f001 fbe8 	bl	80134e8 <USBD_LL_Start>
 8011d18:	4603      	mov	r3, r0
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3708      	adds	r7, #8
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}

08011d22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011d22:	b480      	push	{r7}
 8011d24:	b083      	sub	sp, #12
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011d2a:	2300      	movs	r3, #0
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	460b      	mov	r3, r1
 8011d42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011d44:	2303      	movs	r3, #3
 8011d46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d009      	beq.n	8011d66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	78fa      	ldrb	r2, [r7, #3]
 8011d5c:	4611      	mov	r1, r2
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	4798      	blx	r3
 8011d62:	4603      	mov	r3, r0
 8011d64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	460b      	mov	r3, r1
 8011d7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d007      	beq.n	8011d96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	78fa      	ldrb	r2, [r7, #3]
 8011d90:	4611      	mov	r1, r2
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	4798      	blx	r3
  }

  return USBD_OK;
 8011d96:	2300      	movs	r3, #0
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3708      	adds	r7, #8
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011db0:	6839      	ldr	r1, [r7, #0]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 ff46 	bl	8012c44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2201      	movs	r2, #1
 8011dbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011dd4:	f003 031f 	and.w	r3, r3, #31
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d01a      	beq.n	8011e12 <USBD_LL_SetupStage+0x72>
 8011ddc:	2b02      	cmp	r3, #2
 8011dde:	d822      	bhi.n	8011e26 <USBD_LL_SetupStage+0x86>
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d002      	beq.n	8011dea <USBD_LL_SetupStage+0x4a>
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d00a      	beq.n	8011dfe <USBD_LL_SetupStage+0x5e>
 8011de8:	e01d      	b.n	8011e26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011df0:	4619      	mov	r1, r3
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f000 f9ee 	bl	80121d4 <USBD_StdDevReq>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8011dfc:	e020      	b.n	8011e40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011e04:	4619      	mov	r1, r3
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 fa52 	bl	80122b0 <USBD_StdItfReq>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8011e10:	e016      	b.n	8011e40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011e18:	4619      	mov	r1, r3
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 fa91 	bl	8012342 <USBD_StdEPReq>
 8011e20:	4603      	mov	r3, r0
 8011e22:	73fb      	strb	r3, [r7, #15]
      break;
 8011e24:	e00c      	b.n	8011e40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011e2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	4619      	mov	r1, r3
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f001 fbb7 	bl	80135a8 <USBD_LL_StallEP>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8011e3e:	bf00      	nop
  }

  return ret;
 8011e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3710      	adds	r7, #16
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011e4a:	b580      	push	{r7, lr}
 8011e4c:	b086      	sub	sp, #24
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	60f8      	str	r0, [r7, #12]
 8011e52:	460b      	mov	r3, r1
 8011e54:	607a      	str	r2, [r7, #4]
 8011e56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011e58:	7afb      	ldrb	r3, [r7, #11]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d138      	bne.n	8011ed0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011e64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e6c:	2b03      	cmp	r3, #3
 8011e6e:	d14a      	bne.n	8011f06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	689a      	ldr	r2, [r3, #8]
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d913      	bls.n	8011ea4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	689a      	ldr	r2, [r3, #8]
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	1ad2      	subs	r2, r2, r3
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	68da      	ldr	r2, [r3, #12]
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	689b      	ldr	r3, [r3, #8]
 8011e92:	4293      	cmp	r3, r2
 8011e94:	bf28      	it	cs
 8011e96:	4613      	movcs	r3, r2
 8011e98:	461a      	mov	r2, r3
 8011e9a:	6879      	ldr	r1, [r7, #4]
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f000 ffc5 	bl	8012e2c <USBD_CtlContinueRx>
 8011ea2:	e030      	b.n	8011f06 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	2b03      	cmp	r3, #3
 8011eae:	d10b      	bne.n	8011ec8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eb6:	691b      	ldr	r3, [r3, #16]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d005      	beq.n	8011ec8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ec2:	691b      	ldr	r3, [r3, #16]
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011ec8:	68f8      	ldr	r0, [r7, #12]
 8011eca:	f000 ffc0 	bl	8012e4e <USBD_CtlSendStatus>
 8011ece:	e01a      	b.n	8011f06 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	d114      	bne.n	8011f06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ee2:	699b      	ldr	r3, [r3, #24]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00e      	beq.n	8011f06 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eee:	699b      	ldr	r3, [r3, #24]
 8011ef0:	7afa      	ldrb	r2, [r7, #11]
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	4798      	blx	r3
 8011ef8:	4603      	mov	r3, r0
 8011efa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011efc:	7dfb      	ldrb	r3, [r7, #23]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d001      	beq.n	8011f06 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011f02:	7dfb      	ldrb	r3, [r7, #23]
 8011f04:	e000      	b.n	8011f08 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011f06:	2300      	movs	r3, #0
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3718      	adds	r7, #24
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b086      	sub	sp, #24
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	460b      	mov	r3, r1
 8011f1a:	607a      	str	r2, [r7, #4]
 8011f1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011f1e:	7afb      	ldrb	r3, [r7, #11]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d16b      	bne.n	8011ffc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	3314      	adds	r3, #20
 8011f28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011f30:	2b02      	cmp	r3, #2
 8011f32:	d156      	bne.n	8011fe2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	689a      	ldr	r2, [r3, #8]
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d914      	bls.n	8011f6a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	689a      	ldr	r2, [r3, #8]
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	1ad2      	subs	r2, r2, r3
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	689b      	ldr	r3, [r3, #8]
 8011f52:	461a      	mov	r2, r3
 8011f54:	6879      	ldr	r1, [r7, #4]
 8011f56:	68f8      	ldr	r0, [r7, #12]
 8011f58:	f000 ff3a 	bl	8012dd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	2200      	movs	r2, #0
 8011f60:	2100      	movs	r1, #0
 8011f62:	68f8      	ldr	r0, [r7, #12]
 8011f64:	f001 fbca 	bl	80136fc <USBD_LL_PrepareReceive>
 8011f68:	e03b      	b.n	8011fe2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011f6a:	693b      	ldr	r3, [r7, #16]
 8011f6c:	68da      	ldr	r2, [r3, #12]
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	689b      	ldr	r3, [r3, #8]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d11c      	bne.n	8011fb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	685a      	ldr	r2, [r3, #4]
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d316      	bcc.n	8011fb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	685a      	ldr	r2, [r3, #4]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d20f      	bcs.n	8011fb0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011f90:	2200      	movs	r2, #0
 8011f92:	2100      	movs	r1, #0
 8011f94:	68f8      	ldr	r0, [r7, #12]
 8011f96:	f000 ff1b 	bl	8012dd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	2100      	movs	r1, #0
 8011fa8:	68f8      	ldr	r0, [r7, #12]
 8011faa:	f001 fba7 	bl	80136fc <USBD_LL_PrepareReceive>
 8011fae:	e018      	b.n	8011fe2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	2b03      	cmp	r3, #3
 8011fba:	d10b      	bne.n	8011fd4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d005      	beq.n	8011fd4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011fd4:	2180      	movs	r1, #128	; 0x80
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	f001 fae6 	bl	80135a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011fdc:	68f8      	ldr	r0, [r7, #12]
 8011fde:	f000 ff49 	bl	8012e74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011fe8:	2b01      	cmp	r3, #1
 8011fea:	d122      	bne.n	8012032 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	f7ff fe98 	bl	8011d22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011ffa:	e01a      	b.n	8012032 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012002:	b2db      	uxtb	r3, r3
 8012004:	2b03      	cmp	r3, #3
 8012006:	d114      	bne.n	8012032 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801200e:	695b      	ldr	r3, [r3, #20]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d00e      	beq.n	8012032 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801201a:	695b      	ldr	r3, [r3, #20]
 801201c:	7afa      	ldrb	r2, [r7, #11]
 801201e:	4611      	mov	r1, r2
 8012020:	68f8      	ldr	r0, [r7, #12]
 8012022:	4798      	blx	r3
 8012024:	4603      	mov	r3, r0
 8012026:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012028:	7dfb      	ldrb	r3, [r7, #23]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d001      	beq.n	8012032 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801202e:	7dfb      	ldrb	r3, [r7, #23]
 8012030:	e000      	b.n	8012034 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012032:	2300      	movs	r3, #0
}
 8012034:	4618      	mov	r0, r3
 8012036:	3718      	adds	r7, #24
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2201      	movs	r2, #1
 8012048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2200      	movs	r2, #0
 8012058:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012068:	2b00      	cmp	r3, #0
 801206a:	d101      	bne.n	8012070 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801206c:	2303      	movs	r3, #3
 801206e:	e02f      	b.n	80120d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012076:	2b00      	cmp	r3, #0
 8012078:	d00f      	beq.n	801209a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d009      	beq.n	801209a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	6852      	ldr	r2, [r2, #4]
 8012092:	b2d2      	uxtb	r2, r2
 8012094:	4611      	mov	r1, r2
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801209a:	2340      	movs	r3, #64	; 0x40
 801209c:	2200      	movs	r2, #0
 801209e:	2100      	movs	r1, #0
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f001 fa3c 	bl	801351e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2201      	movs	r2, #1
 80120aa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2240      	movs	r2, #64	; 0x40
 80120b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80120b6:	2340      	movs	r3, #64	; 0x40
 80120b8:	2200      	movs	r2, #0
 80120ba:	2180      	movs	r1, #128	; 0x80
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f001 fa2e 	bl	801351e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2201      	movs	r2, #1
 80120c6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2240      	movs	r2, #64	; 0x40
 80120cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80120ce:	2300      	movs	r3, #0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3708      	adds	r7, #8
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80120d8:	b480      	push	{r7}
 80120da:	b083      	sub	sp, #12
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	460b      	mov	r3, r1
 80120e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	78fa      	ldrb	r2, [r7, #3]
 80120e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80120ea:	2300      	movs	r3, #0
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	370c      	adds	r7, #12
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012106:	b2da      	uxtb	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2204      	movs	r2, #4
 8012112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012116:	2300      	movs	r3, #0
}
 8012118:	4618      	mov	r0, r3
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012132:	b2db      	uxtb	r3, r3
 8012134:	2b04      	cmp	r3, #4
 8012136:	d106      	bne.n	8012146 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801213e:	b2da      	uxtb	r2, r3
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012146:	2300      	movs	r3, #0
}
 8012148:	4618      	mov	r0, r3
 801214a:	370c      	adds	r7, #12
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr

08012154 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012162:	2b00      	cmp	r3, #0
 8012164:	d101      	bne.n	801216a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012166:	2303      	movs	r3, #3
 8012168:	e012      	b.n	8012190 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012170:	b2db      	uxtb	r3, r3
 8012172:	2b03      	cmp	r3, #3
 8012174:	d10b      	bne.n	801218e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801217c:	69db      	ldr	r3, [r3, #28]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d005      	beq.n	801218e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012188:	69db      	ldr	r3, [r3, #28]
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801218e:	2300      	movs	r3, #0
}
 8012190:	4618      	mov	r0, r3
 8012192:	3708      	adds	r7, #8
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012198:	b480      	push	{r7}
 801219a:	b087      	sub	sp, #28
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	3301      	adds	r3, #1
 80121ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80121b6:	8a3b      	ldrh	r3, [r7, #16]
 80121b8:	021b      	lsls	r3, r3, #8
 80121ba:	b21a      	sxth	r2, r3
 80121bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121c0:	4313      	orrs	r3, r2
 80121c2:	b21b      	sxth	r3, r3
 80121c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80121c6:	89fb      	ldrh	r3, [r7, #14]
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	371c      	adds	r7, #28
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr

080121d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80121de:	2300      	movs	r3, #0
 80121e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121ea:	2b40      	cmp	r3, #64	; 0x40
 80121ec:	d005      	beq.n	80121fa <USBD_StdDevReq+0x26>
 80121ee:	2b40      	cmp	r3, #64	; 0x40
 80121f0:	d853      	bhi.n	801229a <USBD_StdDevReq+0xc6>
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d00b      	beq.n	801220e <USBD_StdDevReq+0x3a>
 80121f6:	2b20      	cmp	r3, #32
 80121f8:	d14f      	bne.n	801229a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012200:	689b      	ldr	r3, [r3, #8]
 8012202:	6839      	ldr	r1, [r7, #0]
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	4798      	blx	r3
 8012208:	4603      	mov	r3, r0
 801220a:	73fb      	strb	r3, [r7, #15]
      break;
 801220c:	e04a      	b.n	80122a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	785b      	ldrb	r3, [r3, #1]
 8012212:	2b09      	cmp	r3, #9
 8012214:	d83b      	bhi.n	801228e <USBD_StdDevReq+0xba>
 8012216:	a201      	add	r2, pc, #4	; (adr r2, 801221c <USBD_StdDevReq+0x48>)
 8012218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801221c:	08012271 	.word	0x08012271
 8012220:	08012285 	.word	0x08012285
 8012224:	0801228f 	.word	0x0801228f
 8012228:	0801227b 	.word	0x0801227b
 801222c:	0801228f 	.word	0x0801228f
 8012230:	0801224f 	.word	0x0801224f
 8012234:	08012245 	.word	0x08012245
 8012238:	0801228f 	.word	0x0801228f
 801223c:	08012267 	.word	0x08012267
 8012240:	08012259 	.word	0x08012259
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012244:	6839      	ldr	r1, [r7, #0]
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 f9de 	bl	8012608 <USBD_GetDescriptor>
          break;
 801224c:	e024      	b.n	8012298 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801224e:	6839      	ldr	r1, [r7, #0]
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 fb6d 	bl	8012930 <USBD_SetAddress>
          break;
 8012256:	e01f      	b.n	8012298 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012258:	6839      	ldr	r1, [r7, #0]
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 fbac 	bl	80129b8 <USBD_SetConfig>
 8012260:	4603      	mov	r3, r0
 8012262:	73fb      	strb	r3, [r7, #15]
          break;
 8012264:	e018      	b.n	8012298 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012266:	6839      	ldr	r1, [r7, #0]
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f000 fc4b 	bl	8012b04 <USBD_GetConfig>
          break;
 801226e:	e013      	b.n	8012298 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012270:	6839      	ldr	r1, [r7, #0]
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f000 fc7c 	bl	8012b70 <USBD_GetStatus>
          break;
 8012278:	e00e      	b.n	8012298 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801227a:	6839      	ldr	r1, [r7, #0]
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 fcab 	bl	8012bd8 <USBD_SetFeature>
          break;
 8012282:	e009      	b.n	8012298 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012284:	6839      	ldr	r1, [r7, #0]
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f000 fcba 	bl	8012c00 <USBD_ClrFeature>
          break;
 801228c:	e004      	b.n	8012298 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801228e:	6839      	ldr	r1, [r7, #0]
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f000 fd11 	bl	8012cb8 <USBD_CtlError>
          break;
 8012296:	bf00      	nop
      }
      break;
 8012298:	e004      	b.n	80122a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801229a:	6839      	ldr	r1, [r7, #0]
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f000 fd0b 	bl	8012cb8 <USBD_CtlError>
      break;
 80122a2:	bf00      	nop
  }

  return ret;
 80122a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3710      	adds	r7, #16
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop

080122b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b084      	sub	sp, #16
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80122ba:	2300      	movs	r3, #0
 80122bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80122c6:	2b40      	cmp	r3, #64	; 0x40
 80122c8:	d005      	beq.n	80122d6 <USBD_StdItfReq+0x26>
 80122ca:	2b40      	cmp	r3, #64	; 0x40
 80122cc:	d82f      	bhi.n	801232e <USBD_StdItfReq+0x7e>
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d001      	beq.n	80122d6 <USBD_StdItfReq+0x26>
 80122d2:	2b20      	cmp	r3, #32
 80122d4:	d12b      	bne.n	801232e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	3b01      	subs	r3, #1
 80122e0:	2b02      	cmp	r3, #2
 80122e2:	d81d      	bhi.n	8012320 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	889b      	ldrh	r3, [r3, #4]
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	2b01      	cmp	r3, #1
 80122ec:	d813      	bhi.n	8012316 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122f4:	689b      	ldr	r3, [r3, #8]
 80122f6:	6839      	ldr	r1, [r7, #0]
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	4798      	blx	r3
 80122fc:	4603      	mov	r3, r0
 80122fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	88db      	ldrh	r3, [r3, #6]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d110      	bne.n	801232a <USBD_StdItfReq+0x7a>
 8012308:	7bfb      	ldrb	r3, [r7, #15]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d10d      	bne.n	801232a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f000 fd9d 	bl	8012e4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012314:	e009      	b.n	801232a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012316:	6839      	ldr	r1, [r7, #0]
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f000 fccd 	bl	8012cb8 <USBD_CtlError>
          break;
 801231e:	e004      	b.n	801232a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012320:	6839      	ldr	r1, [r7, #0]
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f000 fcc8 	bl	8012cb8 <USBD_CtlError>
          break;
 8012328:	e000      	b.n	801232c <USBD_StdItfReq+0x7c>
          break;
 801232a:	bf00      	nop
      }
      break;
 801232c:	e004      	b.n	8012338 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801232e:	6839      	ldr	r1, [r7, #0]
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 fcc1 	bl	8012cb8 <USBD_CtlError>
      break;
 8012336:	bf00      	nop
  }

  return ret;
 8012338:	7bfb      	ldrb	r3, [r7, #15]
}
 801233a:	4618      	mov	r0, r3
 801233c:	3710      	adds	r7, #16
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}

08012342 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012342:	b580      	push	{r7, lr}
 8012344:	b084      	sub	sp, #16
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
 801234a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801234c:	2300      	movs	r3, #0
 801234e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	889b      	ldrh	r3, [r3, #4]
 8012354:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801235e:	2b40      	cmp	r3, #64	; 0x40
 8012360:	d007      	beq.n	8012372 <USBD_StdEPReq+0x30>
 8012362:	2b40      	cmp	r3, #64	; 0x40
 8012364:	f200 8145 	bhi.w	80125f2 <USBD_StdEPReq+0x2b0>
 8012368:	2b00      	cmp	r3, #0
 801236a:	d00c      	beq.n	8012386 <USBD_StdEPReq+0x44>
 801236c:	2b20      	cmp	r3, #32
 801236e:	f040 8140 	bne.w	80125f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012378:	689b      	ldr	r3, [r3, #8]
 801237a:	6839      	ldr	r1, [r7, #0]
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	4798      	blx	r3
 8012380:	4603      	mov	r3, r0
 8012382:	73fb      	strb	r3, [r7, #15]
      break;
 8012384:	e13a      	b.n	80125fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	785b      	ldrb	r3, [r3, #1]
 801238a:	2b03      	cmp	r3, #3
 801238c:	d007      	beq.n	801239e <USBD_StdEPReq+0x5c>
 801238e:	2b03      	cmp	r3, #3
 8012390:	f300 8129 	bgt.w	80125e6 <USBD_StdEPReq+0x2a4>
 8012394:	2b00      	cmp	r3, #0
 8012396:	d07f      	beq.n	8012498 <USBD_StdEPReq+0x156>
 8012398:	2b01      	cmp	r3, #1
 801239a:	d03c      	beq.n	8012416 <USBD_StdEPReq+0xd4>
 801239c:	e123      	b.n	80125e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	2b02      	cmp	r3, #2
 80123a8:	d002      	beq.n	80123b0 <USBD_StdEPReq+0x6e>
 80123aa:	2b03      	cmp	r3, #3
 80123ac:	d016      	beq.n	80123dc <USBD_StdEPReq+0x9a>
 80123ae:	e02c      	b.n	801240a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123b0:	7bbb      	ldrb	r3, [r7, #14]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d00d      	beq.n	80123d2 <USBD_StdEPReq+0x90>
 80123b6:	7bbb      	ldrb	r3, [r7, #14]
 80123b8:	2b80      	cmp	r3, #128	; 0x80
 80123ba:	d00a      	beq.n	80123d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80123bc:	7bbb      	ldrb	r3, [r7, #14]
 80123be:	4619      	mov	r1, r3
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f001 f8f1 	bl	80135a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80123c6:	2180      	movs	r1, #128	; 0x80
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f001 f8ed 	bl	80135a8 <USBD_LL_StallEP>
 80123ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80123d0:	e020      	b.n	8012414 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80123d2:	6839      	ldr	r1, [r7, #0]
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 fc6f 	bl	8012cb8 <USBD_CtlError>
              break;
 80123da:	e01b      	b.n	8012414 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	885b      	ldrh	r3, [r3, #2]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d10e      	bne.n	8012402 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80123e4:	7bbb      	ldrb	r3, [r7, #14]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d00b      	beq.n	8012402 <USBD_StdEPReq+0xc0>
 80123ea:	7bbb      	ldrb	r3, [r7, #14]
 80123ec:	2b80      	cmp	r3, #128	; 0x80
 80123ee:	d008      	beq.n	8012402 <USBD_StdEPReq+0xc0>
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	88db      	ldrh	r3, [r3, #6]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d104      	bne.n	8012402 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80123f8:	7bbb      	ldrb	r3, [r7, #14]
 80123fa:	4619      	mov	r1, r3
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f001 f8d3 	bl	80135a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f000 fd23 	bl	8012e4e <USBD_CtlSendStatus>

              break;
 8012408:	e004      	b.n	8012414 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801240a:	6839      	ldr	r1, [r7, #0]
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f000 fc53 	bl	8012cb8 <USBD_CtlError>
              break;
 8012412:	bf00      	nop
          }
          break;
 8012414:	e0ec      	b.n	80125f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801241c:	b2db      	uxtb	r3, r3
 801241e:	2b02      	cmp	r3, #2
 8012420:	d002      	beq.n	8012428 <USBD_StdEPReq+0xe6>
 8012422:	2b03      	cmp	r3, #3
 8012424:	d016      	beq.n	8012454 <USBD_StdEPReq+0x112>
 8012426:	e030      	b.n	801248a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012428:	7bbb      	ldrb	r3, [r7, #14]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d00d      	beq.n	801244a <USBD_StdEPReq+0x108>
 801242e:	7bbb      	ldrb	r3, [r7, #14]
 8012430:	2b80      	cmp	r3, #128	; 0x80
 8012432:	d00a      	beq.n	801244a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012434:	7bbb      	ldrb	r3, [r7, #14]
 8012436:	4619      	mov	r1, r3
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f001 f8b5 	bl	80135a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801243e:	2180      	movs	r1, #128	; 0x80
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f001 f8b1 	bl	80135a8 <USBD_LL_StallEP>
 8012446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012448:	e025      	b.n	8012496 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801244a:	6839      	ldr	r1, [r7, #0]
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f000 fc33 	bl	8012cb8 <USBD_CtlError>
              break;
 8012452:	e020      	b.n	8012496 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	885b      	ldrh	r3, [r3, #2]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d11b      	bne.n	8012494 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801245c:	7bbb      	ldrb	r3, [r7, #14]
 801245e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012462:	2b00      	cmp	r3, #0
 8012464:	d004      	beq.n	8012470 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012466:	7bbb      	ldrb	r3, [r7, #14]
 8012468:	4619      	mov	r1, r3
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f001 f8bb 	bl	80135e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f000 fcec 	bl	8012e4e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801247c:	689b      	ldr	r3, [r3, #8]
 801247e:	6839      	ldr	r1, [r7, #0]
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	4798      	blx	r3
 8012484:	4603      	mov	r3, r0
 8012486:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012488:	e004      	b.n	8012494 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801248a:	6839      	ldr	r1, [r7, #0]
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 fc13 	bl	8012cb8 <USBD_CtlError>
              break;
 8012492:	e000      	b.n	8012496 <USBD_StdEPReq+0x154>
              break;
 8012494:	bf00      	nop
          }
          break;
 8012496:	e0ab      	b.n	80125f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	2b02      	cmp	r3, #2
 80124a2:	d002      	beq.n	80124aa <USBD_StdEPReq+0x168>
 80124a4:	2b03      	cmp	r3, #3
 80124a6:	d032      	beq.n	801250e <USBD_StdEPReq+0x1cc>
 80124a8:	e097      	b.n	80125da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80124aa:	7bbb      	ldrb	r3, [r7, #14]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d007      	beq.n	80124c0 <USBD_StdEPReq+0x17e>
 80124b0:	7bbb      	ldrb	r3, [r7, #14]
 80124b2:	2b80      	cmp	r3, #128	; 0x80
 80124b4:	d004      	beq.n	80124c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80124b6:	6839      	ldr	r1, [r7, #0]
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f000 fbfd 	bl	8012cb8 <USBD_CtlError>
                break;
 80124be:	e091      	b.n	80125e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80124c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	da0b      	bge.n	80124e0 <USBD_StdEPReq+0x19e>
 80124c8:	7bbb      	ldrb	r3, [r7, #14]
 80124ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80124ce:	4613      	mov	r3, r2
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	4413      	add	r3, r2
 80124d4:	009b      	lsls	r3, r3, #2
 80124d6:	3310      	adds	r3, #16
 80124d8:	687a      	ldr	r2, [r7, #4]
 80124da:	4413      	add	r3, r2
 80124dc:	3304      	adds	r3, #4
 80124de:	e00b      	b.n	80124f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80124e0:	7bbb      	ldrb	r3, [r7, #14]
 80124e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80124e6:	4613      	mov	r3, r2
 80124e8:	009b      	lsls	r3, r3, #2
 80124ea:	4413      	add	r3, r2
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80124f2:	687a      	ldr	r2, [r7, #4]
 80124f4:	4413      	add	r3, r2
 80124f6:	3304      	adds	r3, #4
 80124f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	2200      	movs	r2, #0
 80124fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	2202      	movs	r2, #2
 8012504:	4619      	mov	r1, r3
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f000 fc47 	bl	8012d9a <USBD_CtlSendData>
              break;
 801250c:	e06a      	b.n	80125e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801250e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012512:	2b00      	cmp	r3, #0
 8012514:	da11      	bge.n	801253a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012516:	7bbb      	ldrb	r3, [r7, #14]
 8012518:	f003 020f 	and.w	r2, r3, #15
 801251c:	6879      	ldr	r1, [r7, #4]
 801251e:	4613      	mov	r3, r2
 8012520:	009b      	lsls	r3, r3, #2
 8012522:	4413      	add	r3, r2
 8012524:	009b      	lsls	r3, r3, #2
 8012526:	440b      	add	r3, r1
 8012528:	3324      	adds	r3, #36	; 0x24
 801252a:	881b      	ldrh	r3, [r3, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d117      	bne.n	8012560 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012530:	6839      	ldr	r1, [r7, #0]
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f000 fbc0 	bl	8012cb8 <USBD_CtlError>
                  break;
 8012538:	e054      	b.n	80125e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801253a:	7bbb      	ldrb	r3, [r7, #14]
 801253c:	f003 020f 	and.w	r2, r3, #15
 8012540:	6879      	ldr	r1, [r7, #4]
 8012542:	4613      	mov	r3, r2
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	4413      	add	r3, r2
 8012548:	009b      	lsls	r3, r3, #2
 801254a:	440b      	add	r3, r1
 801254c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d104      	bne.n	8012560 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012556:	6839      	ldr	r1, [r7, #0]
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f000 fbad 	bl	8012cb8 <USBD_CtlError>
                  break;
 801255e:	e041      	b.n	80125e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012564:	2b00      	cmp	r3, #0
 8012566:	da0b      	bge.n	8012580 <USBD_StdEPReq+0x23e>
 8012568:	7bbb      	ldrb	r3, [r7, #14]
 801256a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801256e:	4613      	mov	r3, r2
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	4413      	add	r3, r2
 8012574:	009b      	lsls	r3, r3, #2
 8012576:	3310      	adds	r3, #16
 8012578:	687a      	ldr	r2, [r7, #4]
 801257a:	4413      	add	r3, r2
 801257c:	3304      	adds	r3, #4
 801257e:	e00b      	b.n	8012598 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012580:	7bbb      	ldrb	r3, [r7, #14]
 8012582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012586:	4613      	mov	r3, r2
 8012588:	009b      	lsls	r3, r3, #2
 801258a:	4413      	add	r3, r2
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012592:	687a      	ldr	r2, [r7, #4]
 8012594:	4413      	add	r3, r2
 8012596:	3304      	adds	r3, #4
 8012598:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801259a:	7bbb      	ldrb	r3, [r7, #14]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d002      	beq.n	80125a6 <USBD_StdEPReq+0x264>
 80125a0:	7bbb      	ldrb	r3, [r7, #14]
 80125a2:	2b80      	cmp	r3, #128	; 0x80
 80125a4:	d103      	bne.n	80125ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	2200      	movs	r2, #0
 80125aa:	601a      	str	r2, [r3, #0]
 80125ac:	e00e      	b.n	80125cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80125ae:	7bbb      	ldrb	r3, [r7, #14]
 80125b0:	4619      	mov	r1, r3
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f001 f836 	bl	8013624 <USBD_LL_IsStallEP>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d003      	beq.n	80125c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	2201      	movs	r2, #1
 80125c2:	601a      	str	r2, [r3, #0]
 80125c4:	e002      	b.n	80125cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	2200      	movs	r2, #0
 80125ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	2202      	movs	r2, #2
 80125d0:	4619      	mov	r1, r3
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f000 fbe1 	bl	8012d9a <USBD_CtlSendData>
              break;
 80125d8:	e004      	b.n	80125e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80125da:	6839      	ldr	r1, [r7, #0]
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f000 fb6b 	bl	8012cb8 <USBD_CtlError>
              break;
 80125e2:	bf00      	nop
          }
          break;
 80125e4:	e004      	b.n	80125f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80125e6:	6839      	ldr	r1, [r7, #0]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 fb65 	bl	8012cb8 <USBD_CtlError>
          break;
 80125ee:	bf00      	nop
      }
      break;
 80125f0:	e004      	b.n	80125fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80125f2:	6839      	ldr	r1, [r7, #0]
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f000 fb5f 	bl	8012cb8 <USBD_CtlError>
      break;
 80125fa:	bf00      	nop
  }

  return ret;
 80125fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
	...

08012608 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012612:	2300      	movs	r3, #0
 8012614:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012616:	2300      	movs	r3, #0
 8012618:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801261a:	2300      	movs	r3, #0
 801261c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	885b      	ldrh	r3, [r3, #2]
 8012622:	0a1b      	lsrs	r3, r3, #8
 8012624:	b29b      	uxth	r3, r3
 8012626:	3b01      	subs	r3, #1
 8012628:	2b0e      	cmp	r3, #14
 801262a:	f200 8152 	bhi.w	80128d2 <USBD_GetDescriptor+0x2ca>
 801262e:	a201      	add	r2, pc, #4	; (adr r2, 8012634 <USBD_GetDescriptor+0x2c>)
 8012630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012634:	080126a5 	.word	0x080126a5
 8012638:	080126bd 	.word	0x080126bd
 801263c:	080126fd 	.word	0x080126fd
 8012640:	080128d3 	.word	0x080128d3
 8012644:	080128d3 	.word	0x080128d3
 8012648:	08012873 	.word	0x08012873
 801264c:	0801289f 	.word	0x0801289f
 8012650:	080128d3 	.word	0x080128d3
 8012654:	080128d3 	.word	0x080128d3
 8012658:	080128d3 	.word	0x080128d3
 801265c:	080128d3 	.word	0x080128d3
 8012660:	080128d3 	.word	0x080128d3
 8012664:	080128d3 	.word	0x080128d3
 8012668:	080128d3 	.word	0x080128d3
 801266c:	08012671 	.word	0x08012671
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012676:	69db      	ldr	r3, [r3, #28]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00b      	beq.n	8012694 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012682:	69db      	ldr	r3, [r3, #28]
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	7c12      	ldrb	r2, [r2, #16]
 8012688:	f107 0108 	add.w	r1, r7, #8
 801268c:	4610      	mov	r0, r2
 801268e:	4798      	blx	r3
 8012690:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012692:	e126      	b.n	80128e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012694:	6839      	ldr	r1, [r7, #0]
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f000 fb0e 	bl	8012cb8 <USBD_CtlError>
        err++;
 801269c:	7afb      	ldrb	r3, [r7, #11]
 801269e:	3301      	adds	r3, #1
 80126a0:	72fb      	strb	r3, [r7, #11]
      break;
 80126a2:	e11e      	b.n	80128e2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	7c12      	ldrb	r2, [r2, #16]
 80126b0:	f107 0108 	add.w	r1, r7, #8
 80126b4:	4610      	mov	r0, r2
 80126b6:	4798      	blx	r3
 80126b8:	60f8      	str	r0, [r7, #12]
      break;
 80126ba:	e112      	b.n	80128e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	7c1b      	ldrb	r3, [r3, #16]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d10d      	bne.n	80126e0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126cc:	f107 0208 	add.w	r2, r7, #8
 80126d0:	4610      	mov	r0, r2
 80126d2:	4798      	blx	r3
 80126d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	3301      	adds	r3, #1
 80126da:	2202      	movs	r2, #2
 80126dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80126de:	e100      	b.n	80128e2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126e8:	f107 0208 	add.w	r2, r7, #8
 80126ec:	4610      	mov	r0, r2
 80126ee:	4798      	blx	r3
 80126f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	3301      	adds	r3, #1
 80126f6:	2202      	movs	r2, #2
 80126f8:	701a      	strb	r2, [r3, #0]
      break;
 80126fa:	e0f2      	b.n	80128e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	885b      	ldrh	r3, [r3, #2]
 8012700:	b2db      	uxtb	r3, r3
 8012702:	2b05      	cmp	r3, #5
 8012704:	f200 80ac 	bhi.w	8012860 <USBD_GetDescriptor+0x258>
 8012708:	a201      	add	r2, pc, #4	; (adr r2, 8012710 <USBD_GetDescriptor+0x108>)
 801270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801270e:	bf00      	nop
 8012710:	08012729 	.word	0x08012729
 8012714:	0801275d 	.word	0x0801275d
 8012718:	08012791 	.word	0x08012791
 801271c:	080127c5 	.word	0x080127c5
 8012720:	080127f9 	.word	0x080127f9
 8012724:	0801282d 	.word	0x0801282d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d00b      	beq.n	801274c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	7c12      	ldrb	r2, [r2, #16]
 8012740:	f107 0108 	add.w	r1, r7, #8
 8012744:	4610      	mov	r0, r2
 8012746:	4798      	blx	r3
 8012748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801274a:	e091      	b.n	8012870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801274c:	6839      	ldr	r1, [r7, #0]
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f000 fab2 	bl	8012cb8 <USBD_CtlError>
            err++;
 8012754:	7afb      	ldrb	r3, [r7, #11]
 8012756:	3301      	adds	r3, #1
 8012758:	72fb      	strb	r3, [r7, #11]
          break;
 801275a:	e089      	b.n	8012870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012762:	689b      	ldr	r3, [r3, #8]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00b      	beq.n	8012780 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801276e:	689b      	ldr	r3, [r3, #8]
 8012770:	687a      	ldr	r2, [r7, #4]
 8012772:	7c12      	ldrb	r2, [r2, #16]
 8012774:	f107 0108 	add.w	r1, r7, #8
 8012778:	4610      	mov	r0, r2
 801277a:	4798      	blx	r3
 801277c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801277e:	e077      	b.n	8012870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012780:	6839      	ldr	r1, [r7, #0]
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	f000 fa98 	bl	8012cb8 <USBD_CtlError>
            err++;
 8012788:	7afb      	ldrb	r3, [r7, #11]
 801278a:	3301      	adds	r3, #1
 801278c:	72fb      	strb	r3, [r7, #11]
          break;
 801278e:	e06f      	b.n	8012870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d00b      	beq.n	80127b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	7c12      	ldrb	r2, [r2, #16]
 80127a8:	f107 0108 	add.w	r1, r7, #8
 80127ac:	4610      	mov	r0, r2
 80127ae:	4798      	blx	r3
 80127b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127b2:	e05d      	b.n	8012870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80127b4:	6839      	ldr	r1, [r7, #0]
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 fa7e 	bl	8012cb8 <USBD_CtlError>
            err++;
 80127bc:	7afb      	ldrb	r3, [r7, #11]
 80127be:	3301      	adds	r3, #1
 80127c0:	72fb      	strb	r3, [r7, #11]
          break;
 80127c2:	e055      	b.n	8012870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127ca:	691b      	ldr	r3, [r3, #16]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d00b      	beq.n	80127e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127d6:	691b      	ldr	r3, [r3, #16]
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	7c12      	ldrb	r2, [r2, #16]
 80127dc:	f107 0108 	add.w	r1, r7, #8
 80127e0:	4610      	mov	r0, r2
 80127e2:	4798      	blx	r3
 80127e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127e6:	e043      	b.n	8012870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80127e8:	6839      	ldr	r1, [r7, #0]
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f000 fa64 	bl	8012cb8 <USBD_CtlError>
            err++;
 80127f0:	7afb      	ldrb	r3, [r7, #11]
 80127f2:	3301      	adds	r3, #1
 80127f4:	72fb      	strb	r3, [r7, #11]
          break;
 80127f6:	e03b      	b.n	8012870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127fe:	695b      	ldr	r3, [r3, #20]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00b      	beq.n	801281c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801280a:	695b      	ldr	r3, [r3, #20]
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	7c12      	ldrb	r2, [r2, #16]
 8012810:	f107 0108 	add.w	r1, r7, #8
 8012814:	4610      	mov	r0, r2
 8012816:	4798      	blx	r3
 8012818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801281a:	e029      	b.n	8012870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801281c:	6839      	ldr	r1, [r7, #0]
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f000 fa4a 	bl	8012cb8 <USBD_CtlError>
            err++;
 8012824:	7afb      	ldrb	r3, [r7, #11]
 8012826:	3301      	adds	r3, #1
 8012828:	72fb      	strb	r3, [r7, #11]
          break;
 801282a:	e021      	b.n	8012870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012832:	699b      	ldr	r3, [r3, #24]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d00b      	beq.n	8012850 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801283e:	699b      	ldr	r3, [r3, #24]
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	7c12      	ldrb	r2, [r2, #16]
 8012844:	f107 0108 	add.w	r1, r7, #8
 8012848:	4610      	mov	r0, r2
 801284a:	4798      	blx	r3
 801284c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801284e:	e00f      	b.n	8012870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012850:	6839      	ldr	r1, [r7, #0]
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f000 fa30 	bl	8012cb8 <USBD_CtlError>
            err++;
 8012858:	7afb      	ldrb	r3, [r7, #11]
 801285a:	3301      	adds	r3, #1
 801285c:	72fb      	strb	r3, [r7, #11]
          break;
 801285e:	e007      	b.n	8012870 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012860:	6839      	ldr	r1, [r7, #0]
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 fa28 	bl	8012cb8 <USBD_CtlError>
          err++;
 8012868:	7afb      	ldrb	r3, [r7, #11]
 801286a:	3301      	adds	r3, #1
 801286c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801286e:	bf00      	nop
      }
      break;
 8012870:	e037      	b.n	80128e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	7c1b      	ldrb	r3, [r3, #16]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d109      	bne.n	801288e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012882:	f107 0208 	add.w	r2, r7, #8
 8012886:	4610      	mov	r0, r2
 8012888:	4798      	blx	r3
 801288a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801288c:	e029      	b.n	80128e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801288e:	6839      	ldr	r1, [r7, #0]
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f000 fa11 	bl	8012cb8 <USBD_CtlError>
        err++;
 8012896:	7afb      	ldrb	r3, [r7, #11]
 8012898:	3301      	adds	r3, #1
 801289a:	72fb      	strb	r3, [r7, #11]
      break;
 801289c:	e021      	b.n	80128e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	7c1b      	ldrb	r3, [r3, #16]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d10d      	bne.n	80128c2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128ae:	f107 0208 	add.w	r2, r7, #8
 80128b2:	4610      	mov	r0, r2
 80128b4:	4798      	blx	r3
 80128b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	3301      	adds	r3, #1
 80128bc:	2207      	movs	r2, #7
 80128be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80128c0:	e00f      	b.n	80128e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80128c2:	6839      	ldr	r1, [r7, #0]
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 f9f7 	bl	8012cb8 <USBD_CtlError>
        err++;
 80128ca:	7afb      	ldrb	r3, [r7, #11]
 80128cc:	3301      	adds	r3, #1
 80128ce:	72fb      	strb	r3, [r7, #11]
      break;
 80128d0:	e007      	b.n	80128e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80128d2:	6839      	ldr	r1, [r7, #0]
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 f9ef 	bl	8012cb8 <USBD_CtlError>
      err++;
 80128da:	7afb      	ldrb	r3, [r7, #11]
 80128dc:	3301      	adds	r3, #1
 80128de:	72fb      	strb	r3, [r7, #11]
      break;
 80128e0:	bf00      	nop
  }

  if (err != 0U)
 80128e2:	7afb      	ldrb	r3, [r7, #11]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d11e      	bne.n	8012926 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	88db      	ldrh	r3, [r3, #6]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d016      	beq.n	801291e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80128f0:	893b      	ldrh	r3, [r7, #8]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d00e      	beq.n	8012914 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	88da      	ldrh	r2, [r3, #6]
 80128fa:	893b      	ldrh	r3, [r7, #8]
 80128fc:	4293      	cmp	r3, r2
 80128fe:	bf28      	it	cs
 8012900:	4613      	movcs	r3, r2
 8012902:	b29b      	uxth	r3, r3
 8012904:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012906:	893b      	ldrh	r3, [r7, #8]
 8012908:	461a      	mov	r2, r3
 801290a:	68f9      	ldr	r1, [r7, #12]
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f000 fa44 	bl	8012d9a <USBD_CtlSendData>
 8012912:	e009      	b.n	8012928 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012914:	6839      	ldr	r1, [r7, #0]
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f000 f9ce 	bl	8012cb8 <USBD_CtlError>
 801291c:	e004      	b.n	8012928 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 fa95 	bl	8012e4e <USBD_CtlSendStatus>
 8012924:	e000      	b.n	8012928 <USBD_GetDescriptor+0x320>
    return;
 8012926:	bf00      	nop
  }
}
 8012928:	3710      	adds	r7, #16
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop

08012930 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	889b      	ldrh	r3, [r3, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d131      	bne.n	80129a6 <USBD_SetAddress+0x76>
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	88db      	ldrh	r3, [r3, #6]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d12d      	bne.n	80129a6 <USBD_SetAddress+0x76>
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	885b      	ldrh	r3, [r3, #2]
 801294e:	2b7f      	cmp	r3, #127	; 0x7f
 8012950:	d829      	bhi.n	80129a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	885b      	ldrh	r3, [r3, #2]
 8012956:	b2db      	uxtb	r3, r3
 8012958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801295c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012964:	b2db      	uxtb	r3, r3
 8012966:	2b03      	cmp	r3, #3
 8012968:	d104      	bne.n	8012974 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801296a:	6839      	ldr	r1, [r7, #0]
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f000 f9a3 	bl	8012cb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012972:	e01d      	b.n	80129b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	7bfa      	ldrb	r2, [r7, #15]
 8012978:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801297c:	7bfb      	ldrb	r3, [r7, #15]
 801297e:	4619      	mov	r1, r3
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f000 fe7b 	bl	801367c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f000 fa61 	bl	8012e4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801298c:	7bfb      	ldrb	r3, [r7, #15]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d004      	beq.n	801299c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2202      	movs	r2, #2
 8012996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801299a:	e009      	b.n	80129b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2201      	movs	r2, #1
 80129a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129a4:	e004      	b.n	80129b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80129a6:	6839      	ldr	r1, [r7, #0]
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f000 f985 	bl	8012cb8 <USBD_CtlError>
  }
}
 80129ae:	bf00      	nop
 80129b0:	bf00      	nop
 80129b2:	3710      	adds	r7, #16
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b084      	sub	sp, #16
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80129c2:	2300      	movs	r3, #0
 80129c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	885b      	ldrh	r3, [r3, #2]
 80129ca:	b2da      	uxtb	r2, r3
 80129cc:	4b4c      	ldr	r3, [pc, #304]	; (8012b00 <USBD_SetConfig+0x148>)
 80129ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80129d0:	4b4b      	ldr	r3, [pc, #300]	; (8012b00 <USBD_SetConfig+0x148>)
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d905      	bls.n	80129e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80129d8:	6839      	ldr	r1, [r7, #0]
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 f96c 	bl	8012cb8 <USBD_CtlError>
    return USBD_FAIL;
 80129e0:	2303      	movs	r3, #3
 80129e2:	e088      	b.n	8012af6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129ea:	b2db      	uxtb	r3, r3
 80129ec:	2b02      	cmp	r3, #2
 80129ee:	d002      	beq.n	80129f6 <USBD_SetConfig+0x3e>
 80129f0:	2b03      	cmp	r3, #3
 80129f2:	d025      	beq.n	8012a40 <USBD_SetConfig+0x88>
 80129f4:	e071      	b.n	8012ada <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80129f6:	4b42      	ldr	r3, [pc, #264]	; (8012b00 <USBD_SetConfig+0x148>)
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d01c      	beq.n	8012a38 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80129fe:	4b40      	ldr	r3, [pc, #256]	; (8012b00 <USBD_SetConfig+0x148>)
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	461a      	mov	r2, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a08:	4b3d      	ldr	r3, [pc, #244]	; (8012b00 <USBD_SetConfig+0x148>)
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f7ff f992 	bl	8011d38 <USBD_SetClassConfig>
 8012a14:	4603      	mov	r3, r0
 8012a16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012a18:	7bfb      	ldrb	r3, [r7, #15]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d004      	beq.n	8012a28 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012a1e:	6839      	ldr	r1, [r7, #0]
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 f949 	bl	8012cb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012a26:	e065      	b.n	8012af4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f000 fa10 	bl	8012e4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2203      	movs	r2, #3
 8012a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012a36:	e05d      	b.n	8012af4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f000 fa08 	bl	8012e4e <USBD_CtlSendStatus>
      break;
 8012a3e:	e059      	b.n	8012af4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012a40:	4b2f      	ldr	r3, [pc, #188]	; (8012b00 <USBD_SetConfig+0x148>)
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d112      	bne.n	8012a6e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2202      	movs	r2, #2
 8012a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012a50:	4b2b      	ldr	r3, [pc, #172]	; (8012b00 <USBD_SetConfig+0x148>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	461a      	mov	r2, r3
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012a5a:	4b29      	ldr	r3, [pc, #164]	; (8012b00 <USBD_SetConfig+0x148>)
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	4619      	mov	r1, r3
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7ff f985 	bl	8011d70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 f9f1 	bl	8012e4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012a6c:	e042      	b.n	8012af4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012a6e:	4b24      	ldr	r3, [pc, #144]	; (8012b00 <USBD_SetConfig+0x148>)
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	461a      	mov	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	685b      	ldr	r3, [r3, #4]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d02a      	beq.n	8012ad2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	4619      	mov	r1, r3
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f7ff f973 	bl	8011d70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012a8a:	4b1d      	ldr	r3, [pc, #116]	; (8012b00 <USBD_SetConfig+0x148>)
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	461a      	mov	r2, r3
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a94:	4b1a      	ldr	r3, [pc, #104]	; (8012b00 <USBD_SetConfig+0x148>)
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	4619      	mov	r1, r3
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7ff f94c 	bl	8011d38 <USBD_SetClassConfig>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012aa4:	7bfb      	ldrb	r3, [r7, #15]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d00f      	beq.n	8012aca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012aaa:	6839      	ldr	r1, [r7, #0]
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f000 f903 	bl	8012cb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	b2db      	uxtb	r3, r3
 8012ab8:	4619      	mov	r1, r3
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7ff f958 	bl	8011d70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2202      	movs	r2, #2
 8012ac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012ac8:	e014      	b.n	8012af4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 f9bf 	bl	8012e4e <USBD_CtlSendStatus>
      break;
 8012ad0:	e010      	b.n	8012af4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f000 f9bb 	bl	8012e4e <USBD_CtlSendStatus>
      break;
 8012ad8:	e00c      	b.n	8012af4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012ada:	6839      	ldr	r1, [r7, #0]
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f000 f8eb 	bl	8012cb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012ae2:	4b07      	ldr	r3, [pc, #28]	; (8012b00 <USBD_SetConfig+0x148>)
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f7ff f941 	bl	8011d70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012aee:	2303      	movs	r3, #3
 8012af0:	73fb      	strb	r3, [r7, #15]
      break;
 8012af2:	bf00      	nop
  }

  return ret;
 8012af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3710      	adds	r7, #16
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	20001ba4 	.word	0x20001ba4

08012b04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b082      	sub	sp, #8
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	88db      	ldrh	r3, [r3, #6]
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d004      	beq.n	8012b20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012b16:	6839      	ldr	r1, [r7, #0]
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 f8cd 	bl	8012cb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012b1e:	e023      	b.n	8012b68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	2b02      	cmp	r3, #2
 8012b2a:	dc02      	bgt.n	8012b32 <USBD_GetConfig+0x2e>
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	dc03      	bgt.n	8012b38 <USBD_GetConfig+0x34>
 8012b30:	e015      	b.n	8012b5e <USBD_GetConfig+0x5a>
 8012b32:	2b03      	cmp	r3, #3
 8012b34:	d00b      	beq.n	8012b4e <USBD_GetConfig+0x4a>
 8012b36:	e012      	b.n	8012b5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	3308      	adds	r3, #8
 8012b42:	2201      	movs	r2, #1
 8012b44:	4619      	mov	r1, r3
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f000 f927 	bl	8012d9a <USBD_CtlSendData>
        break;
 8012b4c:	e00c      	b.n	8012b68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	3304      	adds	r3, #4
 8012b52:	2201      	movs	r2, #1
 8012b54:	4619      	mov	r1, r3
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 f91f 	bl	8012d9a <USBD_CtlSendData>
        break;
 8012b5c:	e004      	b.n	8012b68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012b5e:	6839      	ldr	r1, [r7, #0]
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 f8a9 	bl	8012cb8 <USBD_CtlError>
        break;
 8012b66:	bf00      	nop
}
 8012b68:	bf00      	nop
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	3b01      	subs	r3, #1
 8012b84:	2b02      	cmp	r3, #2
 8012b86:	d81e      	bhi.n	8012bc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	88db      	ldrh	r3, [r3, #6]
 8012b8c:	2b02      	cmp	r3, #2
 8012b8e:	d004      	beq.n	8012b9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012b90:	6839      	ldr	r1, [r7, #0]
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f000 f890 	bl	8012cb8 <USBD_CtlError>
        break;
 8012b98:	e01a      	b.n	8012bd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d005      	beq.n	8012bb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	f043 0202 	orr.w	r2, r3, #2
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	330c      	adds	r3, #12
 8012bba:	2202      	movs	r2, #2
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f000 f8eb 	bl	8012d9a <USBD_CtlSendData>
      break;
 8012bc4:	e004      	b.n	8012bd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012bc6:	6839      	ldr	r1, [r7, #0]
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f000 f875 	bl	8012cb8 <USBD_CtlError>
      break;
 8012bce:	bf00      	nop
  }
}
 8012bd0:	bf00      	nop
 8012bd2:	3708      	adds	r7, #8
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	885b      	ldrh	r3, [r3, #2]
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d106      	bne.n	8012bf8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2201      	movs	r2, #1
 8012bee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 f92b 	bl	8012e4e <USBD_CtlSendStatus>
  }
}
 8012bf8:	bf00      	nop
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	3b01      	subs	r3, #1
 8012c14:	2b02      	cmp	r3, #2
 8012c16:	d80b      	bhi.n	8012c30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	885b      	ldrh	r3, [r3, #2]
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d10c      	bne.n	8012c3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2200      	movs	r2, #0
 8012c24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f000 f910 	bl	8012e4e <USBD_CtlSendStatus>
      }
      break;
 8012c2e:	e004      	b.n	8012c3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012c30:	6839      	ldr	r1, [r7, #0]
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f000 f840 	bl	8012cb8 <USBD_CtlError>
      break;
 8012c38:	e000      	b.n	8012c3c <USBD_ClrFeature+0x3c>
      break;
 8012c3a:	bf00      	nop
  }
}
 8012c3c:	bf00      	nop
 8012c3e:	3708      	adds	r7, #8
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}

08012c44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	781a      	ldrb	r2, [r3, #0]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	781a      	ldrb	r2, [r3, #0]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012c6e:	68f8      	ldr	r0, [r7, #12]
 8012c70:	f7ff fa92 	bl	8012198 <SWAPBYTE>
 8012c74:	4603      	mov	r3, r0
 8012c76:	461a      	mov	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	3301      	adds	r3, #1
 8012c86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f7ff fa85 	bl	8012198 <SWAPBYTE>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	461a      	mov	r2, r3
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	3301      	adds	r3, #1
 8012c9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012ca2:	68f8      	ldr	r0, [r7, #12]
 8012ca4:	f7ff fa78 	bl	8012198 <SWAPBYTE>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	461a      	mov	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	80da      	strh	r2, [r3, #6]
}
 8012cb0:	bf00      	nop
 8012cb2:	3710      	adds	r7, #16
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012cc2:	2180      	movs	r1, #128	; 0x80
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f000 fc6f 	bl	80135a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012cca:	2100      	movs	r1, #0
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f000 fc6b 	bl	80135a8 <USBD_LL_StallEP>
}
 8012cd2:	bf00      	nop
 8012cd4:	3708      	adds	r7, #8
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}

08012cda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012cda:	b580      	push	{r7, lr}
 8012cdc:	b086      	sub	sp, #24
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	60f8      	str	r0, [r7, #12]
 8012ce2:	60b9      	str	r1, [r7, #8]
 8012ce4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d036      	beq.n	8012d5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012cf4:	6938      	ldr	r0, [r7, #16]
 8012cf6:	f000 f836 	bl	8012d66 <USBD_GetLen>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	3301      	adds	r3, #1
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	b29a      	uxth	r2, r3
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012d08:	7dfb      	ldrb	r3, [r7, #23]
 8012d0a:	68ba      	ldr	r2, [r7, #8]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	7812      	ldrb	r2, [r2, #0]
 8012d12:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d14:	7dfb      	ldrb	r3, [r7, #23]
 8012d16:	3301      	adds	r3, #1
 8012d18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012d1a:	7dfb      	ldrb	r3, [r7, #23]
 8012d1c:	68ba      	ldr	r2, [r7, #8]
 8012d1e:	4413      	add	r3, r2
 8012d20:	2203      	movs	r2, #3
 8012d22:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d24:	7dfb      	ldrb	r3, [r7, #23]
 8012d26:	3301      	adds	r3, #1
 8012d28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012d2a:	e013      	b.n	8012d54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012d2c:	7dfb      	ldrb	r3, [r7, #23]
 8012d2e:	68ba      	ldr	r2, [r7, #8]
 8012d30:	4413      	add	r3, r2
 8012d32:	693a      	ldr	r2, [r7, #16]
 8012d34:	7812      	ldrb	r2, [r2, #0]
 8012d36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	613b      	str	r3, [r7, #16]
    idx++;
 8012d3e:	7dfb      	ldrb	r3, [r7, #23]
 8012d40:	3301      	adds	r3, #1
 8012d42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012d44:	7dfb      	ldrb	r3, [r7, #23]
 8012d46:	68ba      	ldr	r2, [r7, #8]
 8012d48:	4413      	add	r3, r2
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8012d4e:	7dfb      	ldrb	r3, [r7, #23]
 8012d50:	3301      	adds	r3, #1
 8012d52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d1e7      	bne.n	8012d2c <USBD_GetString+0x52>
 8012d5c:	e000      	b.n	8012d60 <USBD_GetString+0x86>
    return;
 8012d5e:	bf00      	nop
  }
}
 8012d60:	3718      	adds	r7, #24
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}

08012d66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012d66:	b480      	push	{r7}
 8012d68:	b085      	sub	sp, #20
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012d76:	e005      	b.n	8012d84 <USBD_GetLen+0x1e>
  {
    len++;
 8012d78:	7bfb      	ldrb	r3, [r7, #15]
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	3301      	adds	r3, #1
 8012d82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d1f5      	bne.n	8012d78 <USBD_GetLen+0x12>
  }

  return len;
 8012d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3714      	adds	r7, #20
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr

08012d9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b084      	sub	sp, #16
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	60f8      	str	r0, [r7, #12]
 8012da2:	60b9      	str	r1, [r7, #8]
 8012da4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2202      	movs	r2, #2
 8012daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	68ba      	ldr	r2, [r7, #8]
 8012dbe:	2100      	movs	r1, #0
 8012dc0:	68f8      	ldr	r0, [r7, #12]
 8012dc2:	f000 fc7a 	bl	80136ba <USBD_LL_Transmit>

  return USBD_OK;
 8012dc6:	2300      	movs	r3, #0
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3710      	adds	r7, #16
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b084      	sub	sp, #16
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	68ba      	ldr	r2, [r7, #8]
 8012de0:	2100      	movs	r1, #0
 8012de2:	68f8      	ldr	r0, [r7, #12]
 8012de4:	f000 fc69 	bl	80136ba <USBD_LL_Transmit>

  return USBD_OK;
 8012de8:	2300      	movs	r3, #0
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3710      	adds	r7, #16
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}

08012df2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012df2:	b580      	push	{r7, lr}
 8012df4:	b084      	sub	sp, #16
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	60f8      	str	r0, [r7, #12]
 8012dfa:	60b9      	str	r1, [r7, #8]
 8012dfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	2203      	movs	r2, #3
 8012e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	687a      	ldr	r2, [r7, #4]
 8012e0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	68ba      	ldr	r2, [r7, #8]
 8012e1a:	2100      	movs	r1, #0
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	f000 fc6d 	bl	80136fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e22:	2300      	movs	r3, #0
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3710      	adds	r7, #16
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60f8      	str	r0, [r7, #12]
 8012e34:	60b9      	str	r1, [r7, #8]
 8012e36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	68ba      	ldr	r2, [r7, #8]
 8012e3c:	2100      	movs	r1, #0
 8012e3e:	68f8      	ldr	r0, [r7, #12]
 8012e40:	f000 fc5c 	bl	80136fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e44:	2300      	movs	r3, #0
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3710      	adds	r7, #16
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b082      	sub	sp, #8
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2204      	movs	r2, #4
 8012e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012e5e:	2300      	movs	r3, #0
 8012e60:	2200      	movs	r2, #0
 8012e62:	2100      	movs	r1, #0
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f000 fc28 	bl	80136ba <USBD_LL_Transmit>

  return USBD_OK;
 8012e6a:	2300      	movs	r3, #0
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3708      	adds	r7, #8
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}

08012e74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2205      	movs	r2, #5
 8012e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012e84:	2300      	movs	r3, #0
 8012e86:	2200      	movs	r2, #0
 8012e88:	2100      	movs	r1, #0
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f000 fc36 	bl	80136fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e90:	2300      	movs	r3, #0
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3708      	adds	r7, #8
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}
	...

08012e9c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	4912      	ldr	r1, [pc, #72]	; (8012eec <MX_USB_Device_Init+0x50>)
 8012ea4:	4812      	ldr	r0, [pc, #72]	; (8012ef0 <MX_USB_Device_Init+0x54>)
 8012ea6:	f7fe fed9 	bl	8011c5c <USBD_Init>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d001      	beq.n	8012eb4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012eb0:	f7f0 f984 	bl	80031bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012eb4:	490f      	ldr	r1, [pc, #60]	; (8012ef4 <MX_USB_Device_Init+0x58>)
 8012eb6:	480e      	ldr	r0, [pc, #56]	; (8012ef0 <MX_USB_Device_Init+0x54>)
 8012eb8:	f7fe ff00 	bl	8011cbc <USBD_RegisterClass>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d001      	beq.n	8012ec6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012ec2:	f7f0 f97b 	bl	80031bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012ec6:	490c      	ldr	r1, [pc, #48]	; (8012ef8 <MX_USB_Device_Init+0x5c>)
 8012ec8:	4809      	ldr	r0, [pc, #36]	; (8012ef0 <MX_USB_Device_Init+0x54>)
 8012eca:	f7fe fe51 	bl	8011b70 <USBD_CDC_RegisterInterface>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d001      	beq.n	8012ed8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012ed4:	f7f0 f972 	bl	80031bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012ed8:	4805      	ldr	r0, [pc, #20]	; (8012ef0 <MX_USB_Device_Init+0x54>)
 8012eda:	f7fe ff16 	bl	8011d0a <USBD_Start>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d001      	beq.n	8012ee8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012ee4:	f7f0 f96a 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012ee8:	bf00      	nop
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	200002c0 	.word	0x200002c0
 8012ef0:	20001ba8 	.word	0x20001ba8
 8012ef4:	200001a8 	.word	0x200001a8
 8012ef8:	200002ac 	.word	0x200002ac

08012efc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012f00:	2200      	movs	r2, #0
 8012f02:	4905      	ldr	r1, [pc, #20]	; (8012f18 <CDC_Init_FS+0x1c>)
 8012f04:	4805      	ldr	r0, [pc, #20]	; (8012f1c <CDC_Init_FS+0x20>)
 8012f06:	f7fe fe48 	bl	8011b9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012f0a:	4905      	ldr	r1, [pc, #20]	; (8012f20 <CDC_Init_FS+0x24>)
 8012f0c:	4803      	ldr	r0, [pc, #12]	; (8012f1c <CDC_Init_FS+0x20>)
 8012f0e:	f7fe fe62 	bl	8011bd6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012f12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	20002278 	.word	0x20002278
 8012f1c:	20001ba8 	.word	0x20001ba8
 8012f20:	20001e78 	.word	0x20001e78

08012f24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012f24:	b480      	push	{r7}
 8012f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012f28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f32:	4770      	bx	lr

08012f34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012f34:	b480      	push	{r7}
 8012f36:	b083      	sub	sp, #12
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	6039      	str	r1, [r7, #0]
 8012f3e:	71fb      	strb	r3, [r7, #7]
 8012f40:	4613      	mov	r3, r2
 8012f42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012f44:	79fb      	ldrb	r3, [r7, #7]
 8012f46:	2b23      	cmp	r3, #35	; 0x23
 8012f48:	d84a      	bhi.n	8012fe0 <CDC_Control_FS+0xac>
 8012f4a:	a201      	add	r2, pc, #4	; (adr r2, 8012f50 <CDC_Control_FS+0x1c>)
 8012f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f50:	08012fe1 	.word	0x08012fe1
 8012f54:	08012fe1 	.word	0x08012fe1
 8012f58:	08012fe1 	.word	0x08012fe1
 8012f5c:	08012fe1 	.word	0x08012fe1
 8012f60:	08012fe1 	.word	0x08012fe1
 8012f64:	08012fe1 	.word	0x08012fe1
 8012f68:	08012fe1 	.word	0x08012fe1
 8012f6c:	08012fe1 	.word	0x08012fe1
 8012f70:	08012fe1 	.word	0x08012fe1
 8012f74:	08012fe1 	.word	0x08012fe1
 8012f78:	08012fe1 	.word	0x08012fe1
 8012f7c:	08012fe1 	.word	0x08012fe1
 8012f80:	08012fe1 	.word	0x08012fe1
 8012f84:	08012fe1 	.word	0x08012fe1
 8012f88:	08012fe1 	.word	0x08012fe1
 8012f8c:	08012fe1 	.word	0x08012fe1
 8012f90:	08012fe1 	.word	0x08012fe1
 8012f94:	08012fe1 	.word	0x08012fe1
 8012f98:	08012fe1 	.word	0x08012fe1
 8012f9c:	08012fe1 	.word	0x08012fe1
 8012fa0:	08012fe1 	.word	0x08012fe1
 8012fa4:	08012fe1 	.word	0x08012fe1
 8012fa8:	08012fe1 	.word	0x08012fe1
 8012fac:	08012fe1 	.word	0x08012fe1
 8012fb0:	08012fe1 	.word	0x08012fe1
 8012fb4:	08012fe1 	.word	0x08012fe1
 8012fb8:	08012fe1 	.word	0x08012fe1
 8012fbc:	08012fe1 	.word	0x08012fe1
 8012fc0:	08012fe1 	.word	0x08012fe1
 8012fc4:	08012fe1 	.word	0x08012fe1
 8012fc8:	08012fe1 	.word	0x08012fe1
 8012fcc:	08012fe1 	.word	0x08012fe1
 8012fd0:	08012fe1 	.word	0x08012fe1
 8012fd4:	08012fe1 	.word	0x08012fe1
 8012fd8:	08012fe1 	.word	0x08012fe1
 8012fdc:	08012fe1 	.word	0x08012fe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012fe0:	bf00      	nop
  }

  return (USBD_OK);
 8012fe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	370c      	adds	r7, #12
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fee:	4770      	bx	lr

08012ff0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012ffa:	6879      	ldr	r1, [r7, #4]
 8012ffc:	4805      	ldr	r0, [pc, #20]	; (8013014 <CDC_Receive_FS+0x24>)
 8012ffe:	f7fe fdea 	bl	8011bd6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013002:	4804      	ldr	r0, [pc, #16]	; (8013014 <CDC_Receive_FS+0x24>)
 8013004:	f7fe fe00 	bl	8011c08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013008:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801300a:	4618      	mov	r0, r3
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	20001ba8 	.word	0x20001ba8

08013018 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013018:	b480      	push	{r7}
 801301a:	b087      	sub	sp, #28
 801301c:	af00      	add	r7, sp, #0
 801301e:	60f8      	str	r0, [r7, #12]
 8013020:	60b9      	str	r1, [r7, #8]
 8013022:	4613      	mov	r3, r2
 8013024:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013026:	2300      	movs	r3, #0
 8013028:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801302a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801302e:	4618      	mov	r0, r3
 8013030:	371c      	adds	r7, #28
 8013032:	46bd      	mov	sp, r7
 8013034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013038:	4770      	bx	lr
	...

0801303c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801303c:	b480      	push	{r7}
 801303e:	b083      	sub	sp, #12
 8013040:	af00      	add	r7, sp, #0
 8013042:	4603      	mov	r3, r0
 8013044:	6039      	str	r1, [r7, #0]
 8013046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	2212      	movs	r2, #18
 801304c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801304e:	4b03      	ldr	r3, [pc, #12]	; (801305c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8013050:	4618      	mov	r0, r3
 8013052:	370c      	adds	r7, #12
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr
 801305c:	200002e0 	.word	0x200002e0

08013060 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013060:	b480      	push	{r7}
 8013062:	b083      	sub	sp, #12
 8013064:	af00      	add	r7, sp, #0
 8013066:	4603      	mov	r3, r0
 8013068:	6039      	str	r1, [r7, #0]
 801306a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	2204      	movs	r2, #4
 8013070:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013072:	4b03      	ldr	r3, [pc, #12]	; (8013080 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8013074:	4618      	mov	r0, r3
 8013076:	370c      	adds	r7, #12
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr
 8013080:	200002f4 	.word	0x200002f4

08013084 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	4603      	mov	r3, r0
 801308c:	6039      	str	r1, [r7, #0]
 801308e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013090:	79fb      	ldrb	r3, [r7, #7]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d105      	bne.n	80130a2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8013096:	683a      	ldr	r2, [r7, #0]
 8013098:	4907      	ldr	r1, [pc, #28]	; (80130b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 801309a:	4808      	ldr	r0, [pc, #32]	; (80130bc <USBD_CDC_ProductStrDescriptor+0x38>)
 801309c:	f7ff fe1d 	bl	8012cda <USBD_GetString>
 80130a0:	e004      	b.n	80130ac <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80130a2:	683a      	ldr	r2, [r7, #0]
 80130a4:	4904      	ldr	r1, [pc, #16]	; (80130b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80130a6:	4805      	ldr	r0, [pc, #20]	; (80130bc <USBD_CDC_ProductStrDescriptor+0x38>)
 80130a8:	f7ff fe17 	bl	8012cda <USBD_GetString>
  }
  return USBD_StrDesc;
 80130ac:	4b02      	ldr	r3, [pc, #8]	; (80130b8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3708      	adds	r7, #8
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	20002678 	.word	0x20002678
 80130bc:	08017814 	.word	0x08017814

080130c0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	4603      	mov	r3, r0
 80130c8:	6039      	str	r1, [r7, #0]
 80130ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80130cc:	683a      	ldr	r2, [r7, #0]
 80130ce:	4904      	ldr	r1, [pc, #16]	; (80130e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80130d0:	4804      	ldr	r0, [pc, #16]	; (80130e4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80130d2:	f7ff fe02 	bl	8012cda <USBD_GetString>
  return USBD_StrDesc;
 80130d6:	4b02      	ldr	r3, [pc, #8]	; (80130e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80130d8:	4618      	mov	r0, r3
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	20002678 	.word	0x20002678
 80130e4:	0801782c 	.word	0x0801782c

080130e8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b082      	sub	sp, #8
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	4603      	mov	r3, r0
 80130f0:	6039      	str	r1, [r7, #0]
 80130f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	221a      	movs	r2, #26
 80130f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80130fa:	f000 f843 	bl	8013184 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80130fe:	4b02      	ldr	r3, [pc, #8]	; (8013108 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8013100:	4618      	mov	r0, r3
 8013102:	3708      	adds	r7, #8
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}
 8013108:	200002f8 	.word	0x200002f8

0801310c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b082      	sub	sp, #8
 8013110:	af00      	add	r7, sp, #0
 8013112:	4603      	mov	r3, r0
 8013114:	6039      	str	r1, [r7, #0]
 8013116:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013118:	79fb      	ldrb	r3, [r7, #7]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d105      	bne.n	801312a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801311e:	683a      	ldr	r2, [r7, #0]
 8013120:	4907      	ldr	r1, [pc, #28]	; (8013140 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013122:	4808      	ldr	r0, [pc, #32]	; (8013144 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013124:	f7ff fdd9 	bl	8012cda <USBD_GetString>
 8013128:	e004      	b.n	8013134 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801312a:	683a      	ldr	r2, [r7, #0]
 801312c:	4904      	ldr	r1, [pc, #16]	; (8013140 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801312e:	4805      	ldr	r0, [pc, #20]	; (8013144 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013130:	f7ff fdd3 	bl	8012cda <USBD_GetString>
  }
  return USBD_StrDesc;
 8013134:	4b02      	ldr	r3, [pc, #8]	; (8013140 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8013136:	4618      	mov	r0, r3
 8013138:	3708      	adds	r7, #8
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	20002678 	.word	0x20002678
 8013144:	08017840 	.word	0x08017840

08013148 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b082      	sub	sp, #8
 801314c:	af00      	add	r7, sp, #0
 801314e:	4603      	mov	r3, r0
 8013150:	6039      	str	r1, [r7, #0]
 8013152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013154:	79fb      	ldrb	r3, [r7, #7]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d105      	bne.n	8013166 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801315a:	683a      	ldr	r2, [r7, #0]
 801315c:	4907      	ldr	r1, [pc, #28]	; (801317c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801315e:	4808      	ldr	r0, [pc, #32]	; (8013180 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013160:	f7ff fdbb 	bl	8012cda <USBD_GetString>
 8013164:	e004      	b.n	8013170 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013166:	683a      	ldr	r2, [r7, #0]
 8013168:	4904      	ldr	r1, [pc, #16]	; (801317c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801316a:	4805      	ldr	r0, [pc, #20]	; (8013180 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801316c:	f7ff fdb5 	bl	8012cda <USBD_GetString>
  }
  return USBD_StrDesc;
 8013170:	4b02      	ldr	r3, [pc, #8]	; (801317c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8013172:	4618      	mov	r0, r3
 8013174:	3708      	adds	r7, #8
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
 801317a:	bf00      	nop
 801317c:	20002678 	.word	0x20002678
 8013180:	0801784c 	.word	0x0801784c

08013184 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b084      	sub	sp, #16
 8013188:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801318a:	4b0f      	ldr	r3, [pc, #60]	; (80131c8 <Get_SerialNum+0x44>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013190:	4b0e      	ldr	r3, [pc, #56]	; (80131cc <Get_SerialNum+0x48>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013196:	4b0e      	ldr	r3, [pc, #56]	; (80131d0 <Get_SerialNum+0x4c>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801319c:	68fa      	ldr	r2, [r7, #12]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	4413      	add	r3, r2
 80131a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d009      	beq.n	80131be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80131aa:	2208      	movs	r2, #8
 80131ac:	4909      	ldr	r1, [pc, #36]	; (80131d4 <Get_SerialNum+0x50>)
 80131ae:	68f8      	ldr	r0, [r7, #12]
 80131b0:	f000 f814 	bl	80131dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80131b4:	2204      	movs	r2, #4
 80131b6:	4908      	ldr	r1, [pc, #32]	; (80131d8 <Get_SerialNum+0x54>)
 80131b8:	68b8      	ldr	r0, [r7, #8]
 80131ba:	f000 f80f 	bl	80131dc <IntToUnicode>
  }
}
 80131be:	bf00      	nop
 80131c0:	3710      	adds	r7, #16
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	1fff7590 	.word	0x1fff7590
 80131cc:	1fff7594 	.word	0x1fff7594
 80131d0:	1fff7598 	.word	0x1fff7598
 80131d4:	200002fa 	.word	0x200002fa
 80131d8:	2000030a 	.word	0x2000030a

080131dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80131dc:	b480      	push	{r7}
 80131de:	b087      	sub	sp, #28
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	60f8      	str	r0, [r7, #12]
 80131e4:	60b9      	str	r1, [r7, #8]
 80131e6:	4613      	mov	r3, r2
 80131e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80131ea:	2300      	movs	r3, #0
 80131ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80131ee:	2300      	movs	r3, #0
 80131f0:	75fb      	strb	r3, [r7, #23]
 80131f2:	e027      	b.n	8013244 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	0f1b      	lsrs	r3, r3, #28
 80131f8:	2b09      	cmp	r3, #9
 80131fa:	d80b      	bhi.n	8013214 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	0f1b      	lsrs	r3, r3, #28
 8013200:	b2da      	uxtb	r2, r3
 8013202:	7dfb      	ldrb	r3, [r7, #23]
 8013204:	005b      	lsls	r3, r3, #1
 8013206:	4619      	mov	r1, r3
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	440b      	add	r3, r1
 801320c:	3230      	adds	r2, #48	; 0x30
 801320e:	b2d2      	uxtb	r2, r2
 8013210:	701a      	strb	r2, [r3, #0]
 8013212:	e00a      	b.n	801322a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	0f1b      	lsrs	r3, r3, #28
 8013218:	b2da      	uxtb	r2, r3
 801321a:	7dfb      	ldrb	r3, [r7, #23]
 801321c:	005b      	lsls	r3, r3, #1
 801321e:	4619      	mov	r1, r3
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	440b      	add	r3, r1
 8013224:	3237      	adds	r2, #55	; 0x37
 8013226:	b2d2      	uxtb	r2, r2
 8013228:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	011b      	lsls	r3, r3, #4
 801322e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013230:	7dfb      	ldrb	r3, [r7, #23]
 8013232:	005b      	lsls	r3, r3, #1
 8013234:	3301      	adds	r3, #1
 8013236:	68ba      	ldr	r2, [r7, #8]
 8013238:	4413      	add	r3, r2
 801323a:	2200      	movs	r2, #0
 801323c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801323e:	7dfb      	ldrb	r3, [r7, #23]
 8013240:	3301      	adds	r3, #1
 8013242:	75fb      	strb	r3, [r7, #23]
 8013244:	7dfa      	ldrb	r2, [r7, #23]
 8013246:	79fb      	ldrb	r3, [r7, #7]
 8013248:	429a      	cmp	r2, r3
 801324a:	d3d3      	bcc.n	80131f4 <IntToUnicode+0x18>
  }
}
 801324c:	bf00      	nop
 801324e:	bf00      	nop
 8013250:	371c      	adds	r7, #28
 8013252:	46bd      	mov	sp, r7
 8013254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013258:	4770      	bx	lr
	...

0801325c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b094      	sub	sp, #80	; 0x50
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013264:	f107 030c 	add.w	r3, r7, #12
 8013268:	2244      	movs	r2, #68	; 0x44
 801326a:	2100      	movs	r1, #0
 801326c:	4618      	mov	r0, r3
 801326e:	f001 f884 	bl	801437a <memset>
  if(pcdHandle->Instance==USB)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	4a15      	ldr	r2, [pc, #84]	; (80132cc <HAL_PCD_MspInit+0x70>)
 8013278:	4293      	cmp	r3, r2
 801327a:	d122      	bne.n	80132c2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801327c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013280:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013282:	2300      	movs	r3, #0
 8013284:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013286:	f107 030c 	add.w	r3, r7, #12
 801328a:	4618      	mov	r0, r3
 801328c:	f7f6 ffcc 	bl	800a228 <HAL_RCCEx_PeriphCLKConfig>
 8013290:	4603      	mov	r3, r0
 8013292:	2b00      	cmp	r3, #0
 8013294:	d001      	beq.n	801329a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8013296:	f7ef ff91 	bl	80031bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801329a:	4b0d      	ldr	r3, [pc, #52]	; (80132d0 <HAL_PCD_MspInit+0x74>)
 801329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801329e:	4a0c      	ldr	r2, [pc, #48]	; (80132d0 <HAL_PCD_MspInit+0x74>)
 80132a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80132a4:	6593      	str	r3, [r2, #88]	; 0x58
 80132a6:	4b0a      	ldr	r3, [pc, #40]	; (80132d0 <HAL_PCD_MspInit+0x74>)
 80132a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80132ae:	60bb      	str	r3, [r7, #8]
 80132b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80132b2:	2200      	movs	r2, #0
 80132b4:	2100      	movs	r1, #0
 80132b6:	2014      	movs	r0, #20
 80132b8:	f7f3 fa85 	bl	80067c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80132bc:	2014      	movs	r0, #20
 80132be:	f7f3 fa9c 	bl	80067fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80132c2:	bf00      	nop
 80132c4:	3750      	adds	r7, #80	; 0x50
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	40005c00 	.word	0x40005c00
 80132d0:	40021000 	.word	0x40021000

080132d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80132e8:	4619      	mov	r1, r3
 80132ea:	4610      	mov	r0, r2
 80132ec:	f7fe fd58 	bl	8011da0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80132f0:	bf00      	nop
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}

080132f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	460b      	mov	r3, r1
 8013302:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801330a:	78fa      	ldrb	r2, [r7, #3]
 801330c:	6879      	ldr	r1, [r7, #4]
 801330e:	4613      	mov	r3, r2
 8013310:	009b      	lsls	r3, r3, #2
 8013312:	4413      	add	r3, r2
 8013314:	00db      	lsls	r3, r3, #3
 8013316:	440b      	add	r3, r1
 8013318:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801331c:	681a      	ldr	r2, [r3, #0]
 801331e:	78fb      	ldrb	r3, [r7, #3]
 8013320:	4619      	mov	r1, r3
 8013322:	f7fe fd92 	bl	8011e4a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8013326:	bf00      	nop
 8013328:	3708      	adds	r7, #8
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}

0801332e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801332e:	b580      	push	{r7, lr}
 8013330:	b082      	sub	sp, #8
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
 8013336:	460b      	mov	r3, r1
 8013338:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8013340:	78fa      	ldrb	r2, [r7, #3]
 8013342:	6879      	ldr	r1, [r7, #4]
 8013344:	4613      	mov	r3, r2
 8013346:	009b      	lsls	r3, r3, #2
 8013348:	4413      	add	r3, r2
 801334a:	00db      	lsls	r3, r3, #3
 801334c:	440b      	add	r3, r1
 801334e:	3324      	adds	r3, #36	; 0x24
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	78fb      	ldrb	r3, [r7, #3]
 8013354:	4619      	mov	r1, r3
 8013356:	f7fe fddb 	bl	8011f10 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801335a:	bf00      	nop
 801335c:	3708      	adds	r7, #8
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013362:	b580      	push	{r7, lr}
 8013364:	b082      	sub	sp, #8
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013370:	4618      	mov	r0, r3
 8013372:	f7fe feef 	bl	8012154 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8013376:	bf00      	nop
 8013378:	3708      	adds	r7, #8
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}

0801337e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801337e:	b580      	push	{r7, lr}
 8013380:	b084      	sub	sp, #16
 8013382:	af00      	add	r7, sp, #0
 8013384:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013386:	2301      	movs	r3, #1
 8013388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	795b      	ldrb	r3, [r3, #5]
 801338e:	2b02      	cmp	r3, #2
 8013390:	d001      	beq.n	8013396 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013392:	f7ef ff13 	bl	80031bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801339c:	7bfa      	ldrb	r2, [r7, #15]
 801339e:	4611      	mov	r1, r2
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7fe fe99 	bl	80120d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7fe fe45 	bl	801203c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80133b2:	bf00      	nop
 80133b4:	3710      	adds	r7, #16
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
	...

080133bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7fe fe94 	bl	80120f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	7a5b      	ldrb	r3, [r3, #9]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d005      	beq.n	80133e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80133d8:	4b04      	ldr	r3, [pc, #16]	; (80133ec <HAL_PCD_SuspendCallback+0x30>)
 80133da:	691b      	ldr	r3, [r3, #16]
 80133dc:	4a03      	ldr	r2, [pc, #12]	; (80133ec <HAL_PCD_SuspendCallback+0x30>)
 80133de:	f043 0306 	orr.w	r3, r3, #6
 80133e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80133e4:	bf00      	nop
 80133e6:	3708      	adds	r7, #8
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	e000ed00 	.word	0xe000ed00

080133f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	7a5b      	ldrb	r3, [r3, #9]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d007      	beq.n	8013410 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013400:	4b08      	ldr	r3, [pc, #32]	; (8013424 <HAL_PCD_ResumeCallback+0x34>)
 8013402:	691b      	ldr	r3, [r3, #16]
 8013404:	4a07      	ldr	r2, [pc, #28]	; (8013424 <HAL_PCD_ResumeCallback+0x34>)
 8013406:	f023 0306 	bic.w	r3, r3, #6
 801340a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801340c:	f000 f9f8 	bl	8013800 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013416:	4618      	mov	r0, r3
 8013418:	f7fe fe84 	bl	8012124 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801341c:	bf00      	nop
 801341e:	3708      	adds	r7, #8
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}
 8013424:	e000ed00 	.word	0xe000ed00

08013428 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013430:	4a2b      	ldr	r2, [pc, #172]	; (80134e0 <USBD_LL_Init+0xb8>)
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	4a29      	ldr	r2, [pc, #164]	; (80134e0 <USBD_LL_Init+0xb8>)
 801343c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8013440:	4b27      	ldr	r3, [pc, #156]	; (80134e0 <USBD_LL_Init+0xb8>)
 8013442:	4a28      	ldr	r2, [pc, #160]	; (80134e4 <USBD_LL_Init+0xbc>)
 8013444:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013446:	4b26      	ldr	r3, [pc, #152]	; (80134e0 <USBD_LL_Init+0xb8>)
 8013448:	2208      	movs	r2, #8
 801344a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801344c:	4b24      	ldr	r3, [pc, #144]	; (80134e0 <USBD_LL_Init+0xb8>)
 801344e:	2202      	movs	r2, #2
 8013450:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013452:	4b23      	ldr	r3, [pc, #140]	; (80134e0 <USBD_LL_Init+0xb8>)
 8013454:	2202      	movs	r2, #2
 8013456:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013458:	4b21      	ldr	r3, [pc, #132]	; (80134e0 <USBD_LL_Init+0xb8>)
 801345a:	2200      	movs	r2, #0
 801345c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801345e:	4b20      	ldr	r3, [pc, #128]	; (80134e0 <USBD_LL_Init+0xb8>)
 8013460:	2200      	movs	r2, #0
 8013462:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013464:	4b1e      	ldr	r3, [pc, #120]	; (80134e0 <USBD_LL_Init+0xb8>)
 8013466:	2200      	movs	r2, #0
 8013468:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801346a:	4b1d      	ldr	r3, [pc, #116]	; (80134e0 <USBD_LL_Init+0xb8>)
 801346c:	2200      	movs	r2, #0
 801346e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013470:	481b      	ldr	r0, [pc, #108]	; (80134e0 <USBD_LL_Init+0xb8>)
 8013472:	f7f4 fbc3 	bl	8007bfc <HAL_PCD_Init>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	d001      	beq.n	8013480 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801347c:	f7ef fe9e 	bl	80031bc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013486:	2318      	movs	r3, #24
 8013488:	2200      	movs	r2, #0
 801348a:	2100      	movs	r1, #0
 801348c:	f7f6 f87d 	bl	800958a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013496:	2358      	movs	r3, #88	; 0x58
 8013498:	2200      	movs	r2, #0
 801349a:	2180      	movs	r1, #128	; 0x80
 801349c:	f7f6 f875 	bl	800958a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134a6:	23c0      	movs	r3, #192	; 0xc0
 80134a8:	2200      	movs	r2, #0
 80134aa:	2181      	movs	r1, #129	; 0x81
 80134ac:	f7f6 f86d 	bl	800958a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80134ba:	2200      	movs	r2, #0
 80134bc:	2101      	movs	r1, #1
 80134be:	f7f6 f864 	bl	800958a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134cc:	2200      	movs	r2, #0
 80134ce:	2182      	movs	r1, #130	; 0x82
 80134d0:	f7f6 f85b 	bl	800958a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80134d4:	2300      	movs	r3, #0
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3708      	adds	r7, #8
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	20002878 	.word	0x20002878
 80134e4:	40005c00 	.word	0x40005c00

080134e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134f0:	2300      	movs	r3, #0
 80134f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134f4:	2300      	movs	r3, #0
 80134f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134fe:	4618      	mov	r0, r3
 8013500:	f7f4 fc4a 	bl	8007d98 <HAL_PCD_Start>
 8013504:	4603      	mov	r3, r0
 8013506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013508:	7bfb      	ldrb	r3, [r7, #15]
 801350a:	4618      	mov	r0, r3
 801350c:	f000 f97e 	bl	801380c <USBD_Get_USB_Status>
 8013510:	4603      	mov	r3, r0
 8013512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013514:	7bbb      	ldrb	r3, [r7, #14]
}
 8013516:	4618      	mov	r0, r3
 8013518:	3710      	adds	r7, #16
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}

0801351e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801351e:	b580      	push	{r7, lr}
 8013520:	b084      	sub	sp, #16
 8013522:	af00      	add	r7, sp, #0
 8013524:	6078      	str	r0, [r7, #4]
 8013526:	4608      	mov	r0, r1
 8013528:	4611      	mov	r1, r2
 801352a:	461a      	mov	r2, r3
 801352c:	4603      	mov	r3, r0
 801352e:	70fb      	strb	r3, [r7, #3]
 8013530:	460b      	mov	r3, r1
 8013532:	70bb      	strb	r3, [r7, #2]
 8013534:	4613      	mov	r3, r2
 8013536:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013538:	2300      	movs	r3, #0
 801353a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801353c:	2300      	movs	r3, #0
 801353e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013546:	78bb      	ldrb	r3, [r7, #2]
 8013548:	883a      	ldrh	r2, [r7, #0]
 801354a:	78f9      	ldrb	r1, [r7, #3]
 801354c:	f7f4 fd91 	bl	8008072 <HAL_PCD_EP_Open>
 8013550:	4603      	mov	r3, r0
 8013552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013554:	7bfb      	ldrb	r3, [r7, #15]
 8013556:	4618      	mov	r0, r3
 8013558:	f000 f958 	bl	801380c <USBD_Get_USB_Status>
 801355c:	4603      	mov	r3, r0
 801355e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013560:	7bbb      	ldrb	r3, [r7, #14]
}
 8013562:	4618      	mov	r0, r3
 8013564:	3710      	adds	r7, #16
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801356a:	b580      	push	{r7, lr}
 801356c:	b084      	sub	sp, #16
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
 8013572:	460b      	mov	r3, r1
 8013574:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013576:	2300      	movs	r3, #0
 8013578:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801357a:	2300      	movs	r3, #0
 801357c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013584:	78fa      	ldrb	r2, [r7, #3]
 8013586:	4611      	mov	r1, r2
 8013588:	4618      	mov	r0, r3
 801358a:	f7f4 fdcf 	bl	800812c <HAL_PCD_EP_Close>
 801358e:	4603      	mov	r3, r0
 8013590:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013592:	7bfb      	ldrb	r3, [r7, #15]
 8013594:	4618      	mov	r0, r3
 8013596:	f000 f939 	bl	801380c <USBD_Get_USB_Status>
 801359a:	4603      	mov	r3, r0
 801359c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801359e:	7bbb      	ldrb	r3, [r7, #14]
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3710      	adds	r7, #16
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}

080135a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	460b      	mov	r3, r1
 80135b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135b4:	2300      	movs	r3, #0
 80135b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135b8:	2300      	movs	r3, #0
 80135ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80135c2:	78fa      	ldrb	r2, [r7, #3]
 80135c4:	4611      	mov	r1, r2
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7f4 fe78 	bl	80082bc <HAL_PCD_EP_SetStall>
 80135cc:	4603      	mov	r3, r0
 80135ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135d0:	7bfb      	ldrb	r3, [r7, #15]
 80135d2:	4618      	mov	r0, r3
 80135d4:	f000 f91a 	bl	801380c <USBD_Get_USB_Status>
 80135d8:	4603      	mov	r3, r0
 80135da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80135dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}

080135e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135e6:	b580      	push	{r7, lr}
 80135e8:	b084      	sub	sp, #16
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	6078      	str	r0, [r7, #4]
 80135ee:	460b      	mov	r3, r1
 80135f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135f2:	2300      	movs	r3, #0
 80135f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135f6:	2300      	movs	r3, #0
 80135f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013600:	78fa      	ldrb	r2, [r7, #3]
 8013602:	4611      	mov	r1, r2
 8013604:	4618      	mov	r0, r3
 8013606:	f7f4 feab 	bl	8008360 <HAL_PCD_EP_ClrStall>
 801360a:	4603      	mov	r3, r0
 801360c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801360e:	7bfb      	ldrb	r3, [r7, #15]
 8013610:	4618      	mov	r0, r3
 8013612:	f000 f8fb 	bl	801380c <USBD_Get_USB_Status>
 8013616:	4603      	mov	r3, r0
 8013618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801361a:	7bbb      	ldrb	r3, [r7, #14]
}
 801361c:	4618      	mov	r0, r3
 801361e:	3710      	adds	r7, #16
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013624:	b480      	push	{r7}
 8013626:	b085      	sub	sp, #20
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	460b      	mov	r3, r1
 801362e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013636:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801363c:	2b00      	cmp	r3, #0
 801363e:	da0b      	bge.n	8013658 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013640:	78fb      	ldrb	r3, [r7, #3]
 8013642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013646:	68f9      	ldr	r1, [r7, #12]
 8013648:	4613      	mov	r3, r2
 801364a:	009b      	lsls	r3, r3, #2
 801364c:	4413      	add	r3, r2
 801364e:	00db      	lsls	r3, r3, #3
 8013650:	440b      	add	r3, r1
 8013652:	3312      	adds	r3, #18
 8013654:	781b      	ldrb	r3, [r3, #0]
 8013656:	e00b      	b.n	8013670 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013658:	78fb      	ldrb	r3, [r7, #3]
 801365a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801365e:	68f9      	ldr	r1, [r7, #12]
 8013660:	4613      	mov	r3, r2
 8013662:	009b      	lsls	r3, r3, #2
 8013664:	4413      	add	r3, r2
 8013666:	00db      	lsls	r3, r3, #3
 8013668:	440b      	add	r3, r1
 801366a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 801366e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013670:	4618      	mov	r0, r3
 8013672:	3714      	adds	r7, #20
 8013674:	46bd      	mov	sp, r7
 8013676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367a:	4770      	bx	lr

0801367c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b084      	sub	sp, #16
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	460b      	mov	r3, r1
 8013686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013688:	2300      	movs	r3, #0
 801368a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801368c:	2300      	movs	r3, #0
 801368e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013696:	78fa      	ldrb	r2, [r7, #3]
 8013698:	4611      	mov	r1, r2
 801369a:	4618      	mov	r0, r3
 801369c:	f7f4 fcc5 	bl	800802a <HAL_PCD_SetAddress>
 80136a0:	4603      	mov	r3, r0
 80136a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136a4:	7bfb      	ldrb	r3, [r7, #15]
 80136a6:	4618      	mov	r0, r3
 80136a8:	f000 f8b0 	bl	801380c <USBD_Get_USB_Status>
 80136ac:	4603      	mov	r3, r0
 80136ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	3710      	adds	r7, #16
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}

080136ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80136ba:	b580      	push	{r7, lr}
 80136bc:	b086      	sub	sp, #24
 80136be:	af00      	add	r7, sp, #0
 80136c0:	60f8      	str	r0, [r7, #12]
 80136c2:	607a      	str	r2, [r7, #4]
 80136c4:	603b      	str	r3, [r7, #0]
 80136c6:	460b      	mov	r3, r1
 80136c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136ca:	2300      	movs	r3, #0
 80136cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136ce:	2300      	movs	r3, #0
 80136d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80136d8:	7af9      	ldrb	r1, [r7, #11]
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	f7f4 fdb6 	bl	800824e <HAL_PCD_EP_Transmit>
 80136e2:	4603      	mov	r3, r0
 80136e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136e6:	7dfb      	ldrb	r3, [r7, #23]
 80136e8:	4618      	mov	r0, r3
 80136ea:	f000 f88f 	bl	801380c <USBD_Get_USB_Status>
 80136ee:	4603      	mov	r3, r0
 80136f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80136f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3718      	adds	r7, #24
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}

080136fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b086      	sub	sp, #24
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	607a      	str	r2, [r7, #4]
 8013706:	603b      	str	r3, [r7, #0]
 8013708:	460b      	mov	r3, r1
 801370a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801370c:	2300      	movs	r3, #0
 801370e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013710:	2300      	movs	r3, #0
 8013712:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801371a:	7af9      	ldrb	r1, [r7, #11]
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	f7f4 fd4c 	bl	80081bc <HAL_PCD_EP_Receive>
 8013724:	4603      	mov	r3, r0
 8013726:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013728:	7dfb      	ldrb	r3, [r7, #23]
 801372a:	4618      	mov	r0, r3
 801372c:	f000 f86e 	bl	801380c <USBD_Get_USB_Status>
 8013730:	4603      	mov	r3, r0
 8013732:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013734:	7dbb      	ldrb	r3, [r7, #22]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3718      	adds	r7, #24
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801373e:	b580      	push	{r7, lr}
 8013740:	b082      	sub	sp, #8
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
 8013746:	460b      	mov	r3, r1
 8013748:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013750:	78fa      	ldrb	r2, [r7, #3]
 8013752:	4611      	mov	r1, r2
 8013754:	4618      	mov	r0, r3
 8013756:	f7f4 fd62 	bl	800821e <HAL_PCD_EP_GetRxCount>
 801375a:	4603      	mov	r3, r0
}
 801375c:	4618      	mov	r0, r3
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	460b      	mov	r3, r1
 801376e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013770:	78fb      	ldrb	r3, [r7, #3]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d002      	beq.n	801377c <HAL_PCDEx_LPM_Callback+0x18>
 8013776:	2b01      	cmp	r3, #1
 8013778:	d013      	beq.n	80137a2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801377a:	e023      	b.n	80137c4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	7a5b      	ldrb	r3, [r3, #9]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d007      	beq.n	8013794 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013784:	f000 f83c 	bl	8013800 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013788:	4b10      	ldr	r3, [pc, #64]	; (80137cc <HAL_PCDEx_LPM_Callback+0x68>)
 801378a:	691b      	ldr	r3, [r3, #16]
 801378c:	4a0f      	ldr	r2, [pc, #60]	; (80137cc <HAL_PCDEx_LPM_Callback+0x68>)
 801378e:	f023 0306 	bic.w	r3, r3, #6
 8013792:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801379a:	4618      	mov	r0, r3
 801379c:	f7fe fcc2 	bl	8012124 <USBD_LL_Resume>
    break;
 80137a0:	e010      	b.n	80137c4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7fe fca5 	bl	80120f8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	7a5b      	ldrb	r3, [r3, #9]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d005      	beq.n	80137c2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80137b6:	4b05      	ldr	r3, [pc, #20]	; (80137cc <HAL_PCDEx_LPM_Callback+0x68>)
 80137b8:	691b      	ldr	r3, [r3, #16]
 80137ba:	4a04      	ldr	r2, [pc, #16]	; (80137cc <HAL_PCDEx_LPM_Callback+0x68>)
 80137bc:	f043 0306 	orr.w	r3, r3, #6
 80137c0:	6113      	str	r3, [r2, #16]
    break;
 80137c2:	bf00      	nop
}
 80137c4:	bf00      	nop
 80137c6:	3708      	adds	r7, #8
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	e000ed00 	.word	0xe000ed00

080137d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80137d0:	b480      	push	{r7}
 80137d2:	b083      	sub	sp, #12
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80137d8:	4b03      	ldr	r3, [pc, #12]	; (80137e8 <USBD_static_malloc+0x18>)
}
 80137da:	4618      	mov	r0, r3
 80137dc:	370c      	adds	r7, #12
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr
 80137e6:	bf00      	nop
 80137e8:	20002b54 	.word	0x20002b54

080137ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]

}
 80137f4:	bf00      	nop
 80137f6:	370c      	adds	r7, #12
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr

08013800 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013804:	f7ef f862 	bl	80028cc <SystemClock_Config>
}
 8013808:	bf00      	nop
 801380a:	bd80      	pop	{r7, pc}

0801380c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801380c:	b480      	push	{r7}
 801380e:	b085      	sub	sp, #20
 8013810:	af00      	add	r7, sp, #0
 8013812:	4603      	mov	r3, r0
 8013814:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013816:	2300      	movs	r3, #0
 8013818:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801381a:	79fb      	ldrb	r3, [r7, #7]
 801381c:	2b03      	cmp	r3, #3
 801381e:	d817      	bhi.n	8013850 <USBD_Get_USB_Status+0x44>
 8013820:	a201      	add	r2, pc, #4	; (adr r2, 8013828 <USBD_Get_USB_Status+0x1c>)
 8013822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013826:	bf00      	nop
 8013828:	08013839 	.word	0x08013839
 801382c:	0801383f 	.word	0x0801383f
 8013830:	08013845 	.word	0x08013845
 8013834:	0801384b 	.word	0x0801384b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013838:	2300      	movs	r3, #0
 801383a:	73fb      	strb	r3, [r7, #15]
    break;
 801383c:	e00b      	b.n	8013856 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801383e:	2303      	movs	r3, #3
 8013840:	73fb      	strb	r3, [r7, #15]
    break;
 8013842:	e008      	b.n	8013856 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013844:	2301      	movs	r3, #1
 8013846:	73fb      	strb	r3, [r7, #15]
    break;
 8013848:	e005      	b.n	8013856 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801384a:	2303      	movs	r3, #3
 801384c:	73fb      	strb	r3, [r7, #15]
    break;
 801384e:	e002      	b.n	8013856 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013850:	2303      	movs	r3, #3
 8013852:	73fb      	strb	r3, [r7, #15]
    break;
 8013854:	bf00      	nop
  }
  return usb_status;
 8013856:	7bfb      	ldrb	r3, [r7, #15]
}
 8013858:	4618      	mov	r0, r3
 801385a:	3714      	adds	r7, #20
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr

08013864 <__cvt>:
 8013864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013868:	ec55 4b10 	vmov	r4, r5, d0
 801386c:	2d00      	cmp	r5, #0
 801386e:	460e      	mov	r6, r1
 8013870:	4619      	mov	r1, r3
 8013872:	462b      	mov	r3, r5
 8013874:	bfbb      	ittet	lt
 8013876:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801387a:	461d      	movlt	r5, r3
 801387c:	2300      	movge	r3, #0
 801387e:	232d      	movlt	r3, #45	; 0x2d
 8013880:	700b      	strb	r3, [r1, #0]
 8013882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013884:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013888:	4691      	mov	r9, r2
 801388a:	f023 0820 	bic.w	r8, r3, #32
 801388e:	bfbc      	itt	lt
 8013890:	4622      	movlt	r2, r4
 8013892:	4614      	movlt	r4, r2
 8013894:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013898:	d005      	beq.n	80138a6 <__cvt+0x42>
 801389a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801389e:	d100      	bne.n	80138a2 <__cvt+0x3e>
 80138a0:	3601      	adds	r6, #1
 80138a2:	2102      	movs	r1, #2
 80138a4:	e000      	b.n	80138a8 <__cvt+0x44>
 80138a6:	2103      	movs	r1, #3
 80138a8:	ab03      	add	r3, sp, #12
 80138aa:	9301      	str	r3, [sp, #4]
 80138ac:	ab02      	add	r3, sp, #8
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	ec45 4b10 	vmov	d0, r4, r5
 80138b4:	4653      	mov	r3, sl
 80138b6:	4632      	mov	r2, r6
 80138b8:	f000 fe6a 	bl	8014590 <_dtoa_r>
 80138bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80138c0:	4607      	mov	r7, r0
 80138c2:	d102      	bne.n	80138ca <__cvt+0x66>
 80138c4:	f019 0f01 	tst.w	r9, #1
 80138c8:	d022      	beq.n	8013910 <__cvt+0xac>
 80138ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80138ce:	eb07 0906 	add.w	r9, r7, r6
 80138d2:	d110      	bne.n	80138f6 <__cvt+0x92>
 80138d4:	783b      	ldrb	r3, [r7, #0]
 80138d6:	2b30      	cmp	r3, #48	; 0x30
 80138d8:	d10a      	bne.n	80138f0 <__cvt+0x8c>
 80138da:	2200      	movs	r2, #0
 80138dc:	2300      	movs	r3, #0
 80138de:	4620      	mov	r0, r4
 80138e0:	4629      	mov	r1, r5
 80138e2:	f7ed f919 	bl	8000b18 <__aeabi_dcmpeq>
 80138e6:	b918      	cbnz	r0, 80138f0 <__cvt+0x8c>
 80138e8:	f1c6 0601 	rsb	r6, r6, #1
 80138ec:	f8ca 6000 	str.w	r6, [sl]
 80138f0:	f8da 3000 	ldr.w	r3, [sl]
 80138f4:	4499      	add	r9, r3
 80138f6:	2200      	movs	r2, #0
 80138f8:	2300      	movs	r3, #0
 80138fa:	4620      	mov	r0, r4
 80138fc:	4629      	mov	r1, r5
 80138fe:	f7ed f90b 	bl	8000b18 <__aeabi_dcmpeq>
 8013902:	b108      	cbz	r0, 8013908 <__cvt+0xa4>
 8013904:	f8cd 900c 	str.w	r9, [sp, #12]
 8013908:	2230      	movs	r2, #48	; 0x30
 801390a:	9b03      	ldr	r3, [sp, #12]
 801390c:	454b      	cmp	r3, r9
 801390e:	d307      	bcc.n	8013920 <__cvt+0xbc>
 8013910:	9b03      	ldr	r3, [sp, #12]
 8013912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013914:	1bdb      	subs	r3, r3, r7
 8013916:	4638      	mov	r0, r7
 8013918:	6013      	str	r3, [r2, #0]
 801391a:	b004      	add	sp, #16
 801391c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013920:	1c59      	adds	r1, r3, #1
 8013922:	9103      	str	r1, [sp, #12]
 8013924:	701a      	strb	r2, [r3, #0]
 8013926:	e7f0      	b.n	801390a <__cvt+0xa6>

08013928 <__exponent>:
 8013928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801392a:	4603      	mov	r3, r0
 801392c:	2900      	cmp	r1, #0
 801392e:	bfb8      	it	lt
 8013930:	4249      	neglt	r1, r1
 8013932:	f803 2b02 	strb.w	r2, [r3], #2
 8013936:	bfb4      	ite	lt
 8013938:	222d      	movlt	r2, #45	; 0x2d
 801393a:	222b      	movge	r2, #43	; 0x2b
 801393c:	2909      	cmp	r1, #9
 801393e:	7042      	strb	r2, [r0, #1]
 8013940:	dd2a      	ble.n	8013998 <__exponent+0x70>
 8013942:	f10d 0207 	add.w	r2, sp, #7
 8013946:	4617      	mov	r7, r2
 8013948:	260a      	movs	r6, #10
 801394a:	4694      	mov	ip, r2
 801394c:	fb91 f5f6 	sdiv	r5, r1, r6
 8013950:	fb06 1415 	mls	r4, r6, r5, r1
 8013954:	3430      	adds	r4, #48	; 0x30
 8013956:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801395a:	460c      	mov	r4, r1
 801395c:	2c63      	cmp	r4, #99	; 0x63
 801395e:	f102 32ff 	add.w	r2, r2, #4294967295
 8013962:	4629      	mov	r1, r5
 8013964:	dcf1      	bgt.n	801394a <__exponent+0x22>
 8013966:	3130      	adds	r1, #48	; 0x30
 8013968:	f1ac 0402 	sub.w	r4, ip, #2
 801396c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013970:	1c41      	adds	r1, r0, #1
 8013972:	4622      	mov	r2, r4
 8013974:	42ba      	cmp	r2, r7
 8013976:	d30a      	bcc.n	801398e <__exponent+0x66>
 8013978:	f10d 0209 	add.w	r2, sp, #9
 801397c:	eba2 020c 	sub.w	r2, r2, ip
 8013980:	42bc      	cmp	r4, r7
 8013982:	bf88      	it	hi
 8013984:	2200      	movhi	r2, #0
 8013986:	4413      	add	r3, r2
 8013988:	1a18      	subs	r0, r3, r0
 801398a:	b003      	add	sp, #12
 801398c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801398e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013992:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013996:	e7ed      	b.n	8013974 <__exponent+0x4c>
 8013998:	2330      	movs	r3, #48	; 0x30
 801399a:	3130      	adds	r1, #48	; 0x30
 801399c:	7083      	strb	r3, [r0, #2]
 801399e:	70c1      	strb	r1, [r0, #3]
 80139a0:	1d03      	adds	r3, r0, #4
 80139a2:	e7f1      	b.n	8013988 <__exponent+0x60>

080139a4 <_printf_float>:
 80139a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a8:	ed2d 8b02 	vpush	{d8}
 80139ac:	b08d      	sub	sp, #52	; 0x34
 80139ae:	460c      	mov	r4, r1
 80139b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80139b4:	4616      	mov	r6, r2
 80139b6:	461f      	mov	r7, r3
 80139b8:	4605      	mov	r5, r0
 80139ba:	f000 fce7 	bl	801438c <_localeconv_r>
 80139be:	f8d0 a000 	ldr.w	sl, [r0]
 80139c2:	4650      	mov	r0, sl
 80139c4:	f7ec fc7c 	bl	80002c0 <strlen>
 80139c8:	2300      	movs	r3, #0
 80139ca:	930a      	str	r3, [sp, #40]	; 0x28
 80139cc:	6823      	ldr	r3, [r4, #0]
 80139ce:	9305      	str	r3, [sp, #20]
 80139d0:	f8d8 3000 	ldr.w	r3, [r8]
 80139d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80139d8:	3307      	adds	r3, #7
 80139da:	f023 0307 	bic.w	r3, r3, #7
 80139de:	f103 0208 	add.w	r2, r3, #8
 80139e2:	f8c8 2000 	str.w	r2, [r8]
 80139e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80139ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80139ee:	9307      	str	r3, [sp, #28]
 80139f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80139f4:	ee08 0a10 	vmov	s16, r0
 80139f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80139fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a00:	4b9e      	ldr	r3, [pc, #632]	; (8013c7c <_printf_float+0x2d8>)
 8013a02:	f04f 32ff 	mov.w	r2, #4294967295
 8013a06:	f7ed f8b9 	bl	8000b7c <__aeabi_dcmpun>
 8013a0a:	bb88      	cbnz	r0, 8013a70 <_printf_float+0xcc>
 8013a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a10:	4b9a      	ldr	r3, [pc, #616]	; (8013c7c <_printf_float+0x2d8>)
 8013a12:	f04f 32ff 	mov.w	r2, #4294967295
 8013a16:	f7ed f893 	bl	8000b40 <__aeabi_dcmple>
 8013a1a:	bb48      	cbnz	r0, 8013a70 <_printf_float+0xcc>
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	2300      	movs	r3, #0
 8013a20:	4640      	mov	r0, r8
 8013a22:	4649      	mov	r1, r9
 8013a24:	f7ed f882 	bl	8000b2c <__aeabi_dcmplt>
 8013a28:	b110      	cbz	r0, 8013a30 <_printf_float+0x8c>
 8013a2a:	232d      	movs	r3, #45	; 0x2d
 8013a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a30:	4a93      	ldr	r2, [pc, #588]	; (8013c80 <_printf_float+0x2dc>)
 8013a32:	4b94      	ldr	r3, [pc, #592]	; (8013c84 <_printf_float+0x2e0>)
 8013a34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013a38:	bf94      	ite	ls
 8013a3a:	4690      	movls	r8, r2
 8013a3c:	4698      	movhi	r8, r3
 8013a3e:	2303      	movs	r3, #3
 8013a40:	6123      	str	r3, [r4, #16]
 8013a42:	9b05      	ldr	r3, [sp, #20]
 8013a44:	f023 0304 	bic.w	r3, r3, #4
 8013a48:	6023      	str	r3, [r4, #0]
 8013a4a:	f04f 0900 	mov.w	r9, #0
 8013a4e:	9700      	str	r7, [sp, #0]
 8013a50:	4633      	mov	r3, r6
 8013a52:	aa0b      	add	r2, sp, #44	; 0x2c
 8013a54:	4621      	mov	r1, r4
 8013a56:	4628      	mov	r0, r5
 8013a58:	f000 f9da 	bl	8013e10 <_printf_common>
 8013a5c:	3001      	adds	r0, #1
 8013a5e:	f040 8090 	bne.w	8013b82 <_printf_float+0x1de>
 8013a62:	f04f 30ff 	mov.w	r0, #4294967295
 8013a66:	b00d      	add	sp, #52	; 0x34
 8013a68:	ecbd 8b02 	vpop	{d8}
 8013a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a70:	4642      	mov	r2, r8
 8013a72:	464b      	mov	r3, r9
 8013a74:	4640      	mov	r0, r8
 8013a76:	4649      	mov	r1, r9
 8013a78:	f7ed f880 	bl	8000b7c <__aeabi_dcmpun>
 8013a7c:	b140      	cbz	r0, 8013a90 <_printf_float+0xec>
 8013a7e:	464b      	mov	r3, r9
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	bfbc      	itt	lt
 8013a84:	232d      	movlt	r3, #45	; 0x2d
 8013a86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013a8a:	4a7f      	ldr	r2, [pc, #508]	; (8013c88 <_printf_float+0x2e4>)
 8013a8c:	4b7f      	ldr	r3, [pc, #508]	; (8013c8c <_printf_float+0x2e8>)
 8013a8e:	e7d1      	b.n	8013a34 <_printf_float+0x90>
 8013a90:	6863      	ldr	r3, [r4, #4]
 8013a92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013a96:	9206      	str	r2, [sp, #24]
 8013a98:	1c5a      	adds	r2, r3, #1
 8013a9a:	d13f      	bne.n	8013b1c <_printf_float+0x178>
 8013a9c:	2306      	movs	r3, #6
 8013a9e:	6063      	str	r3, [r4, #4]
 8013aa0:	9b05      	ldr	r3, [sp, #20]
 8013aa2:	6861      	ldr	r1, [r4, #4]
 8013aa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	9303      	str	r3, [sp, #12]
 8013aac:	ab0a      	add	r3, sp, #40	; 0x28
 8013aae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013ab2:	ab09      	add	r3, sp, #36	; 0x24
 8013ab4:	ec49 8b10 	vmov	d0, r8, r9
 8013ab8:	9300      	str	r3, [sp, #0]
 8013aba:	6022      	str	r2, [r4, #0]
 8013abc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	f7ff fecf 	bl	8013864 <__cvt>
 8013ac6:	9b06      	ldr	r3, [sp, #24]
 8013ac8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013aca:	2b47      	cmp	r3, #71	; 0x47
 8013acc:	4680      	mov	r8, r0
 8013ace:	d108      	bne.n	8013ae2 <_printf_float+0x13e>
 8013ad0:	1cc8      	adds	r0, r1, #3
 8013ad2:	db02      	blt.n	8013ada <_printf_float+0x136>
 8013ad4:	6863      	ldr	r3, [r4, #4]
 8013ad6:	4299      	cmp	r1, r3
 8013ad8:	dd41      	ble.n	8013b5e <_printf_float+0x1ba>
 8013ada:	f1ab 0302 	sub.w	r3, fp, #2
 8013ade:	fa5f fb83 	uxtb.w	fp, r3
 8013ae2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013ae6:	d820      	bhi.n	8013b2a <_printf_float+0x186>
 8013ae8:	3901      	subs	r1, #1
 8013aea:	465a      	mov	r2, fp
 8013aec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013af0:	9109      	str	r1, [sp, #36]	; 0x24
 8013af2:	f7ff ff19 	bl	8013928 <__exponent>
 8013af6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013af8:	1813      	adds	r3, r2, r0
 8013afa:	2a01      	cmp	r2, #1
 8013afc:	4681      	mov	r9, r0
 8013afe:	6123      	str	r3, [r4, #16]
 8013b00:	dc02      	bgt.n	8013b08 <_printf_float+0x164>
 8013b02:	6822      	ldr	r2, [r4, #0]
 8013b04:	07d2      	lsls	r2, r2, #31
 8013b06:	d501      	bpl.n	8013b0c <_printf_float+0x168>
 8013b08:	3301      	adds	r3, #1
 8013b0a:	6123      	str	r3, [r4, #16]
 8013b0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d09c      	beq.n	8013a4e <_printf_float+0xaa>
 8013b14:	232d      	movs	r3, #45	; 0x2d
 8013b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b1a:	e798      	b.n	8013a4e <_printf_float+0xaa>
 8013b1c:	9a06      	ldr	r2, [sp, #24]
 8013b1e:	2a47      	cmp	r2, #71	; 0x47
 8013b20:	d1be      	bne.n	8013aa0 <_printf_float+0xfc>
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d1bc      	bne.n	8013aa0 <_printf_float+0xfc>
 8013b26:	2301      	movs	r3, #1
 8013b28:	e7b9      	b.n	8013a9e <_printf_float+0xfa>
 8013b2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013b2e:	d118      	bne.n	8013b62 <_printf_float+0x1be>
 8013b30:	2900      	cmp	r1, #0
 8013b32:	6863      	ldr	r3, [r4, #4]
 8013b34:	dd0b      	ble.n	8013b4e <_printf_float+0x1aa>
 8013b36:	6121      	str	r1, [r4, #16]
 8013b38:	b913      	cbnz	r3, 8013b40 <_printf_float+0x19c>
 8013b3a:	6822      	ldr	r2, [r4, #0]
 8013b3c:	07d0      	lsls	r0, r2, #31
 8013b3e:	d502      	bpl.n	8013b46 <_printf_float+0x1a2>
 8013b40:	3301      	adds	r3, #1
 8013b42:	440b      	add	r3, r1
 8013b44:	6123      	str	r3, [r4, #16]
 8013b46:	65a1      	str	r1, [r4, #88]	; 0x58
 8013b48:	f04f 0900 	mov.w	r9, #0
 8013b4c:	e7de      	b.n	8013b0c <_printf_float+0x168>
 8013b4e:	b913      	cbnz	r3, 8013b56 <_printf_float+0x1b2>
 8013b50:	6822      	ldr	r2, [r4, #0]
 8013b52:	07d2      	lsls	r2, r2, #31
 8013b54:	d501      	bpl.n	8013b5a <_printf_float+0x1b6>
 8013b56:	3302      	adds	r3, #2
 8013b58:	e7f4      	b.n	8013b44 <_printf_float+0x1a0>
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	e7f2      	b.n	8013b44 <_printf_float+0x1a0>
 8013b5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b64:	4299      	cmp	r1, r3
 8013b66:	db05      	blt.n	8013b74 <_printf_float+0x1d0>
 8013b68:	6823      	ldr	r3, [r4, #0]
 8013b6a:	6121      	str	r1, [r4, #16]
 8013b6c:	07d8      	lsls	r0, r3, #31
 8013b6e:	d5ea      	bpl.n	8013b46 <_printf_float+0x1a2>
 8013b70:	1c4b      	adds	r3, r1, #1
 8013b72:	e7e7      	b.n	8013b44 <_printf_float+0x1a0>
 8013b74:	2900      	cmp	r1, #0
 8013b76:	bfd4      	ite	le
 8013b78:	f1c1 0202 	rsble	r2, r1, #2
 8013b7c:	2201      	movgt	r2, #1
 8013b7e:	4413      	add	r3, r2
 8013b80:	e7e0      	b.n	8013b44 <_printf_float+0x1a0>
 8013b82:	6823      	ldr	r3, [r4, #0]
 8013b84:	055a      	lsls	r2, r3, #21
 8013b86:	d407      	bmi.n	8013b98 <_printf_float+0x1f4>
 8013b88:	6923      	ldr	r3, [r4, #16]
 8013b8a:	4642      	mov	r2, r8
 8013b8c:	4631      	mov	r1, r6
 8013b8e:	4628      	mov	r0, r5
 8013b90:	47b8      	blx	r7
 8013b92:	3001      	adds	r0, #1
 8013b94:	d12c      	bne.n	8013bf0 <_printf_float+0x24c>
 8013b96:	e764      	b.n	8013a62 <_printf_float+0xbe>
 8013b98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013b9c:	f240 80e0 	bls.w	8013d60 <_printf_float+0x3bc>
 8013ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	f7ec ffb6 	bl	8000b18 <__aeabi_dcmpeq>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d034      	beq.n	8013c1a <_printf_float+0x276>
 8013bb0:	4a37      	ldr	r2, [pc, #220]	; (8013c90 <_printf_float+0x2ec>)
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	4631      	mov	r1, r6
 8013bb6:	4628      	mov	r0, r5
 8013bb8:	47b8      	blx	r7
 8013bba:	3001      	adds	r0, #1
 8013bbc:	f43f af51 	beq.w	8013a62 <_printf_float+0xbe>
 8013bc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	db02      	blt.n	8013bce <_printf_float+0x22a>
 8013bc8:	6823      	ldr	r3, [r4, #0]
 8013bca:	07d8      	lsls	r0, r3, #31
 8013bcc:	d510      	bpl.n	8013bf0 <_printf_float+0x24c>
 8013bce:	ee18 3a10 	vmov	r3, s16
 8013bd2:	4652      	mov	r2, sl
 8013bd4:	4631      	mov	r1, r6
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	47b8      	blx	r7
 8013bda:	3001      	adds	r0, #1
 8013bdc:	f43f af41 	beq.w	8013a62 <_printf_float+0xbe>
 8013be0:	f04f 0800 	mov.w	r8, #0
 8013be4:	f104 091a 	add.w	r9, r4, #26
 8013be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bea:	3b01      	subs	r3, #1
 8013bec:	4543      	cmp	r3, r8
 8013bee:	dc09      	bgt.n	8013c04 <_printf_float+0x260>
 8013bf0:	6823      	ldr	r3, [r4, #0]
 8013bf2:	079b      	lsls	r3, r3, #30
 8013bf4:	f100 8107 	bmi.w	8013e06 <_printf_float+0x462>
 8013bf8:	68e0      	ldr	r0, [r4, #12]
 8013bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bfc:	4298      	cmp	r0, r3
 8013bfe:	bfb8      	it	lt
 8013c00:	4618      	movlt	r0, r3
 8013c02:	e730      	b.n	8013a66 <_printf_float+0xc2>
 8013c04:	2301      	movs	r3, #1
 8013c06:	464a      	mov	r2, r9
 8013c08:	4631      	mov	r1, r6
 8013c0a:	4628      	mov	r0, r5
 8013c0c:	47b8      	blx	r7
 8013c0e:	3001      	adds	r0, #1
 8013c10:	f43f af27 	beq.w	8013a62 <_printf_float+0xbe>
 8013c14:	f108 0801 	add.w	r8, r8, #1
 8013c18:	e7e6      	b.n	8013be8 <_printf_float+0x244>
 8013c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	dc39      	bgt.n	8013c94 <_printf_float+0x2f0>
 8013c20:	4a1b      	ldr	r2, [pc, #108]	; (8013c90 <_printf_float+0x2ec>)
 8013c22:	2301      	movs	r3, #1
 8013c24:	4631      	mov	r1, r6
 8013c26:	4628      	mov	r0, r5
 8013c28:	47b8      	blx	r7
 8013c2a:	3001      	adds	r0, #1
 8013c2c:	f43f af19 	beq.w	8013a62 <_printf_float+0xbe>
 8013c30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013c34:	4313      	orrs	r3, r2
 8013c36:	d102      	bne.n	8013c3e <_printf_float+0x29a>
 8013c38:	6823      	ldr	r3, [r4, #0]
 8013c3a:	07d9      	lsls	r1, r3, #31
 8013c3c:	d5d8      	bpl.n	8013bf0 <_printf_float+0x24c>
 8013c3e:	ee18 3a10 	vmov	r3, s16
 8013c42:	4652      	mov	r2, sl
 8013c44:	4631      	mov	r1, r6
 8013c46:	4628      	mov	r0, r5
 8013c48:	47b8      	blx	r7
 8013c4a:	3001      	adds	r0, #1
 8013c4c:	f43f af09 	beq.w	8013a62 <_printf_float+0xbe>
 8013c50:	f04f 0900 	mov.w	r9, #0
 8013c54:	f104 0a1a 	add.w	sl, r4, #26
 8013c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c5a:	425b      	negs	r3, r3
 8013c5c:	454b      	cmp	r3, r9
 8013c5e:	dc01      	bgt.n	8013c64 <_printf_float+0x2c0>
 8013c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c62:	e792      	b.n	8013b8a <_printf_float+0x1e6>
 8013c64:	2301      	movs	r3, #1
 8013c66:	4652      	mov	r2, sl
 8013c68:	4631      	mov	r1, r6
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	47b8      	blx	r7
 8013c6e:	3001      	adds	r0, #1
 8013c70:	f43f aef7 	beq.w	8013a62 <_printf_float+0xbe>
 8013c74:	f109 0901 	add.w	r9, r9, #1
 8013c78:	e7ee      	b.n	8013c58 <_printf_float+0x2b4>
 8013c7a:	bf00      	nop
 8013c7c:	7fefffff 	.word	0x7fefffff
 8013c80:	0801c4ec 	.word	0x0801c4ec
 8013c84:	0801c4f0 	.word	0x0801c4f0
 8013c88:	0801c4f4 	.word	0x0801c4f4
 8013c8c:	0801c4f8 	.word	0x0801c4f8
 8013c90:	0801c4fc 	.word	0x0801c4fc
 8013c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	bfa8      	it	ge
 8013c9c:	461a      	movge	r2, r3
 8013c9e:	2a00      	cmp	r2, #0
 8013ca0:	4691      	mov	r9, r2
 8013ca2:	dc37      	bgt.n	8013d14 <_printf_float+0x370>
 8013ca4:	f04f 0b00 	mov.w	fp, #0
 8013ca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013cac:	f104 021a 	add.w	r2, r4, #26
 8013cb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013cb2:	9305      	str	r3, [sp, #20]
 8013cb4:	eba3 0309 	sub.w	r3, r3, r9
 8013cb8:	455b      	cmp	r3, fp
 8013cba:	dc33      	bgt.n	8013d24 <_printf_float+0x380>
 8013cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	db3b      	blt.n	8013d3c <_printf_float+0x398>
 8013cc4:	6823      	ldr	r3, [r4, #0]
 8013cc6:	07da      	lsls	r2, r3, #31
 8013cc8:	d438      	bmi.n	8013d3c <_printf_float+0x398>
 8013cca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013cce:	eba2 0903 	sub.w	r9, r2, r3
 8013cd2:	9b05      	ldr	r3, [sp, #20]
 8013cd4:	1ad2      	subs	r2, r2, r3
 8013cd6:	4591      	cmp	r9, r2
 8013cd8:	bfa8      	it	ge
 8013cda:	4691      	movge	r9, r2
 8013cdc:	f1b9 0f00 	cmp.w	r9, #0
 8013ce0:	dc35      	bgt.n	8013d4e <_printf_float+0x3aa>
 8013ce2:	f04f 0800 	mov.w	r8, #0
 8013ce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013cea:	f104 0a1a 	add.w	sl, r4, #26
 8013cee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cf2:	1a9b      	subs	r3, r3, r2
 8013cf4:	eba3 0309 	sub.w	r3, r3, r9
 8013cf8:	4543      	cmp	r3, r8
 8013cfa:	f77f af79 	ble.w	8013bf0 <_printf_float+0x24c>
 8013cfe:	2301      	movs	r3, #1
 8013d00:	4652      	mov	r2, sl
 8013d02:	4631      	mov	r1, r6
 8013d04:	4628      	mov	r0, r5
 8013d06:	47b8      	blx	r7
 8013d08:	3001      	adds	r0, #1
 8013d0a:	f43f aeaa 	beq.w	8013a62 <_printf_float+0xbe>
 8013d0e:	f108 0801 	add.w	r8, r8, #1
 8013d12:	e7ec      	b.n	8013cee <_printf_float+0x34a>
 8013d14:	4613      	mov	r3, r2
 8013d16:	4631      	mov	r1, r6
 8013d18:	4642      	mov	r2, r8
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	47b8      	blx	r7
 8013d1e:	3001      	adds	r0, #1
 8013d20:	d1c0      	bne.n	8013ca4 <_printf_float+0x300>
 8013d22:	e69e      	b.n	8013a62 <_printf_float+0xbe>
 8013d24:	2301      	movs	r3, #1
 8013d26:	4631      	mov	r1, r6
 8013d28:	4628      	mov	r0, r5
 8013d2a:	9205      	str	r2, [sp, #20]
 8013d2c:	47b8      	blx	r7
 8013d2e:	3001      	adds	r0, #1
 8013d30:	f43f ae97 	beq.w	8013a62 <_printf_float+0xbe>
 8013d34:	9a05      	ldr	r2, [sp, #20]
 8013d36:	f10b 0b01 	add.w	fp, fp, #1
 8013d3a:	e7b9      	b.n	8013cb0 <_printf_float+0x30c>
 8013d3c:	ee18 3a10 	vmov	r3, s16
 8013d40:	4652      	mov	r2, sl
 8013d42:	4631      	mov	r1, r6
 8013d44:	4628      	mov	r0, r5
 8013d46:	47b8      	blx	r7
 8013d48:	3001      	adds	r0, #1
 8013d4a:	d1be      	bne.n	8013cca <_printf_float+0x326>
 8013d4c:	e689      	b.n	8013a62 <_printf_float+0xbe>
 8013d4e:	9a05      	ldr	r2, [sp, #20]
 8013d50:	464b      	mov	r3, r9
 8013d52:	4442      	add	r2, r8
 8013d54:	4631      	mov	r1, r6
 8013d56:	4628      	mov	r0, r5
 8013d58:	47b8      	blx	r7
 8013d5a:	3001      	adds	r0, #1
 8013d5c:	d1c1      	bne.n	8013ce2 <_printf_float+0x33e>
 8013d5e:	e680      	b.n	8013a62 <_printf_float+0xbe>
 8013d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d62:	2a01      	cmp	r2, #1
 8013d64:	dc01      	bgt.n	8013d6a <_printf_float+0x3c6>
 8013d66:	07db      	lsls	r3, r3, #31
 8013d68:	d53a      	bpl.n	8013de0 <_printf_float+0x43c>
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	4642      	mov	r2, r8
 8013d6e:	4631      	mov	r1, r6
 8013d70:	4628      	mov	r0, r5
 8013d72:	47b8      	blx	r7
 8013d74:	3001      	adds	r0, #1
 8013d76:	f43f ae74 	beq.w	8013a62 <_printf_float+0xbe>
 8013d7a:	ee18 3a10 	vmov	r3, s16
 8013d7e:	4652      	mov	r2, sl
 8013d80:	4631      	mov	r1, r6
 8013d82:	4628      	mov	r0, r5
 8013d84:	47b8      	blx	r7
 8013d86:	3001      	adds	r0, #1
 8013d88:	f43f ae6b 	beq.w	8013a62 <_printf_float+0xbe>
 8013d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013d90:	2200      	movs	r2, #0
 8013d92:	2300      	movs	r3, #0
 8013d94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013d98:	f7ec febe 	bl	8000b18 <__aeabi_dcmpeq>
 8013d9c:	b9d8      	cbnz	r0, 8013dd6 <_printf_float+0x432>
 8013d9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013da2:	f108 0201 	add.w	r2, r8, #1
 8013da6:	4631      	mov	r1, r6
 8013da8:	4628      	mov	r0, r5
 8013daa:	47b8      	blx	r7
 8013dac:	3001      	adds	r0, #1
 8013dae:	d10e      	bne.n	8013dce <_printf_float+0x42a>
 8013db0:	e657      	b.n	8013a62 <_printf_float+0xbe>
 8013db2:	2301      	movs	r3, #1
 8013db4:	4652      	mov	r2, sl
 8013db6:	4631      	mov	r1, r6
 8013db8:	4628      	mov	r0, r5
 8013dba:	47b8      	blx	r7
 8013dbc:	3001      	adds	r0, #1
 8013dbe:	f43f ae50 	beq.w	8013a62 <_printf_float+0xbe>
 8013dc2:	f108 0801 	add.w	r8, r8, #1
 8013dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dc8:	3b01      	subs	r3, #1
 8013dca:	4543      	cmp	r3, r8
 8013dcc:	dcf1      	bgt.n	8013db2 <_printf_float+0x40e>
 8013dce:	464b      	mov	r3, r9
 8013dd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013dd4:	e6da      	b.n	8013b8c <_printf_float+0x1e8>
 8013dd6:	f04f 0800 	mov.w	r8, #0
 8013dda:	f104 0a1a 	add.w	sl, r4, #26
 8013dde:	e7f2      	b.n	8013dc6 <_printf_float+0x422>
 8013de0:	2301      	movs	r3, #1
 8013de2:	4642      	mov	r2, r8
 8013de4:	e7df      	b.n	8013da6 <_printf_float+0x402>
 8013de6:	2301      	movs	r3, #1
 8013de8:	464a      	mov	r2, r9
 8013dea:	4631      	mov	r1, r6
 8013dec:	4628      	mov	r0, r5
 8013dee:	47b8      	blx	r7
 8013df0:	3001      	adds	r0, #1
 8013df2:	f43f ae36 	beq.w	8013a62 <_printf_float+0xbe>
 8013df6:	f108 0801 	add.w	r8, r8, #1
 8013dfa:	68e3      	ldr	r3, [r4, #12]
 8013dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013dfe:	1a5b      	subs	r3, r3, r1
 8013e00:	4543      	cmp	r3, r8
 8013e02:	dcf0      	bgt.n	8013de6 <_printf_float+0x442>
 8013e04:	e6f8      	b.n	8013bf8 <_printf_float+0x254>
 8013e06:	f04f 0800 	mov.w	r8, #0
 8013e0a:	f104 0919 	add.w	r9, r4, #25
 8013e0e:	e7f4      	b.n	8013dfa <_printf_float+0x456>

08013e10 <_printf_common>:
 8013e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e14:	4616      	mov	r6, r2
 8013e16:	4699      	mov	r9, r3
 8013e18:	688a      	ldr	r2, [r1, #8]
 8013e1a:	690b      	ldr	r3, [r1, #16]
 8013e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013e20:	4293      	cmp	r3, r2
 8013e22:	bfb8      	it	lt
 8013e24:	4613      	movlt	r3, r2
 8013e26:	6033      	str	r3, [r6, #0]
 8013e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013e2c:	4607      	mov	r7, r0
 8013e2e:	460c      	mov	r4, r1
 8013e30:	b10a      	cbz	r2, 8013e36 <_printf_common+0x26>
 8013e32:	3301      	adds	r3, #1
 8013e34:	6033      	str	r3, [r6, #0]
 8013e36:	6823      	ldr	r3, [r4, #0]
 8013e38:	0699      	lsls	r1, r3, #26
 8013e3a:	bf42      	ittt	mi
 8013e3c:	6833      	ldrmi	r3, [r6, #0]
 8013e3e:	3302      	addmi	r3, #2
 8013e40:	6033      	strmi	r3, [r6, #0]
 8013e42:	6825      	ldr	r5, [r4, #0]
 8013e44:	f015 0506 	ands.w	r5, r5, #6
 8013e48:	d106      	bne.n	8013e58 <_printf_common+0x48>
 8013e4a:	f104 0a19 	add.w	sl, r4, #25
 8013e4e:	68e3      	ldr	r3, [r4, #12]
 8013e50:	6832      	ldr	r2, [r6, #0]
 8013e52:	1a9b      	subs	r3, r3, r2
 8013e54:	42ab      	cmp	r3, r5
 8013e56:	dc26      	bgt.n	8013ea6 <_printf_common+0x96>
 8013e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013e5c:	1e13      	subs	r3, r2, #0
 8013e5e:	6822      	ldr	r2, [r4, #0]
 8013e60:	bf18      	it	ne
 8013e62:	2301      	movne	r3, #1
 8013e64:	0692      	lsls	r2, r2, #26
 8013e66:	d42b      	bmi.n	8013ec0 <_printf_common+0xb0>
 8013e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e6c:	4649      	mov	r1, r9
 8013e6e:	4638      	mov	r0, r7
 8013e70:	47c0      	blx	r8
 8013e72:	3001      	adds	r0, #1
 8013e74:	d01e      	beq.n	8013eb4 <_printf_common+0xa4>
 8013e76:	6823      	ldr	r3, [r4, #0]
 8013e78:	6922      	ldr	r2, [r4, #16]
 8013e7a:	f003 0306 	and.w	r3, r3, #6
 8013e7e:	2b04      	cmp	r3, #4
 8013e80:	bf02      	ittt	eq
 8013e82:	68e5      	ldreq	r5, [r4, #12]
 8013e84:	6833      	ldreq	r3, [r6, #0]
 8013e86:	1aed      	subeq	r5, r5, r3
 8013e88:	68a3      	ldr	r3, [r4, #8]
 8013e8a:	bf0c      	ite	eq
 8013e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e90:	2500      	movne	r5, #0
 8013e92:	4293      	cmp	r3, r2
 8013e94:	bfc4      	itt	gt
 8013e96:	1a9b      	subgt	r3, r3, r2
 8013e98:	18ed      	addgt	r5, r5, r3
 8013e9a:	2600      	movs	r6, #0
 8013e9c:	341a      	adds	r4, #26
 8013e9e:	42b5      	cmp	r5, r6
 8013ea0:	d11a      	bne.n	8013ed8 <_printf_common+0xc8>
 8013ea2:	2000      	movs	r0, #0
 8013ea4:	e008      	b.n	8013eb8 <_printf_common+0xa8>
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	4652      	mov	r2, sl
 8013eaa:	4649      	mov	r1, r9
 8013eac:	4638      	mov	r0, r7
 8013eae:	47c0      	blx	r8
 8013eb0:	3001      	adds	r0, #1
 8013eb2:	d103      	bne.n	8013ebc <_printf_common+0xac>
 8013eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ebc:	3501      	adds	r5, #1
 8013ebe:	e7c6      	b.n	8013e4e <_printf_common+0x3e>
 8013ec0:	18e1      	adds	r1, r4, r3
 8013ec2:	1c5a      	adds	r2, r3, #1
 8013ec4:	2030      	movs	r0, #48	; 0x30
 8013ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013eca:	4422      	add	r2, r4
 8013ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ed4:	3302      	adds	r3, #2
 8013ed6:	e7c7      	b.n	8013e68 <_printf_common+0x58>
 8013ed8:	2301      	movs	r3, #1
 8013eda:	4622      	mov	r2, r4
 8013edc:	4649      	mov	r1, r9
 8013ede:	4638      	mov	r0, r7
 8013ee0:	47c0      	blx	r8
 8013ee2:	3001      	adds	r0, #1
 8013ee4:	d0e6      	beq.n	8013eb4 <_printf_common+0xa4>
 8013ee6:	3601      	adds	r6, #1
 8013ee8:	e7d9      	b.n	8013e9e <_printf_common+0x8e>
	...

08013eec <_printf_i>:
 8013eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef0:	7e0f      	ldrb	r7, [r1, #24]
 8013ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013ef4:	2f78      	cmp	r7, #120	; 0x78
 8013ef6:	4691      	mov	r9, r2
 8013ef8:	4680      	mov	r8, r0
 8013efa:	460c      	mov	r4, r1
 8013efc:	469a      	mov	sl, r3
 8013efe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f02:	d807      	bhi.n	8013f14 <_printf_i+0x28>
 8013f04:	2f62      	cmp	r7, #98	; 0x62
 8013f06:	d80a      	bhi.n	8013f1e <_printf_i+0x32>
 8013f08:	2f00      	cmp	r7, #0
 8013f0a:	f000 80d4 	beq.w	80140b6 <_printf_i+0x1ca>
 8013f0e:	2f58      	cmp	r7, #88	; 0x58
 8013f10:	f000 80c0 	beq.w	8014094 <_printf_i+0x1a8>
 8013f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f1c:	e03a      	b.n	8013f94 <_printf_i+0xa8>
 8013f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013f22:	2b15      	cmp	r3, #21
 8013f24:	d8f6      	bhi.n	8013f14 <_printf_i+0x28>
 8013f26:	a101      	add	r1, pc, #4	; (adr r1, 8013f2c <_printf_i+0x40>)
 8013f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f2c:	08013f85 	.word	0x08013f85
 8013f30:	08013f99 	.word	0x08013f99
 8013f34:	08013f15 	.word	0x08013f15
 8013f38:	08013f15 	.word	0x08013f15
 8013f3c:	08013f15 	.word	0x08013f15
 8013f40:	08013f15 	.word	0x08013f15
 8013f44:	08013f99 	.word	0x08013f99
 8013f48:	08013f15 	.word	0x08013f15
 8013f4c:	08013f15 	.word	0x08013f15
 8013f50:	08013f15 	.word	0x08013f15
 8013f54:	08013f15 	.word	0x08013f15
 8013f58:	0801409d 	.word	0x0801409d
 8013f5c:	08013fc5 	.word	0x08013fc5
 8013f60:	08014057 	.word	0x08014057
 8013f64:	08013f15 	.word	0x08013f15
 8013f68:	08013f15 	.word	0x08013f15
 8013f6c:	080140bf 	.word	0x080140bf
 8013f70:	08013f15 	.word	0x08013f15
 8013f74:	08013fc5 	.word	0x08013fc5
 8013f78:	08013f15 	.word	0x08013f15
 8013f7c:	08013f15 	.word	0x08013f15
 8013f80:	0801405f 	.word	0x0801405f
 8013f84:	682b      	ldr	r3, [r5, #0]
 8013f86:	1d1a      	adds	r2, r3, #4
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	602a      	str	r2, [r5, #0]
 8013f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013f94:	2301      	movs	r3, #1
 8013f96:	e09f      	b.n	80140d8 <_printf_i+0x1ec>
 8013f98:	6820      	ldr	r0, [r4, #0]
 8013f9a:	682b      	ldr	r3, [r5, #0]
 8013f9c:	0607      	lsls	r7, r0, #24
 8013f9e:	f103 0104 	add.w	r1, r3, #4
 8013fa2:	6029      	str	r1, [r5, #0]
 8013fa4:	d501      	bpl.n	8013faa <_printf_i+0xbe>
 8013fa6:	681e      	ldr	r6, [r3, #0]
 8013fa8:	e003      	b.n	8013fb2 <_printf_i+0xc6>
 8013faa:	0646      	lsls	r6, r0, #25
 8013fac:	d5fb      	bpl.n	8013fa6 <_printf_i+0xba>
 8013fae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013fb2:	2e00      	cmp	r6, #0
 8013fb4:	da03      	bge.n	8013fbe <_printf_i+0xd2>
 8013fb6:	232d      	movs	r3, #45	; 0x2d
 8013fb8:	4276      	negs	r6, r6
 8013fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fbe:	485a      	ldr	r0, [pc, #360]	; (8014128 <_printf_i+0x23c>)
 8013fc0:	230a      	movs	r3, #10
 8013fc2:	e012      	b.n	8013fea <_printf_i+0xfe>
 8013fc4:	682b      	ldr	r3, [r5, #0]
 8013fc6:	6820      	ldr	r0, [r4, #0]
 8013fc8:	1d19      	adds	r1, r3, #4
 8013fca:	6029      	str	r1, [r5, #0]
 8013fcc:	0605      	lsls	r5, r0, #24
 8013fce:	d501      	bpl.n	8013fd4 <_printf_i+0xe8>
 8013fd0:	681e      	ldr	r6, [r3, #0]
 8013fd2:	e002      	b.n	8013fda <_printf_i+0xee>
 8013fd4:	0641      	lsls	r1, r0, #25
 8013fd6:	d5fb      	bpl.n	8013fd0 <_printf_i+0xe4>
 8013fd8:	881e      	ldrh	r6, [r3, #0]
 8013fda:	4853      	ldr	r0, [pc, #332]	; (8014128 <_printf_i+0x23c>)
 8013fdc:	2f6f      	cmp	r7, #111	; 0x6f
 8013fde:	bf0c      	ite	eq
 8013fe0:	2308      	moveq	r3, #8
 8013fe2:	230a      	movne	r3, #10
 8013fe4:	2100      	movs	r1, #0
 8013fe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013fea:	6865      	ldr	r5, [r4, #4]
 8013fec:	60a5      	str	r5, [r4, #8]
 8013fee:	2d00      	cmp	r5, #0
 8013ff0:	bfa2      	ittt	ge
 8013ff2:	6821      	ldrge	r1, [r4, #0]
 8013ff4:	f021 0104 	bicge.w	r1, r1, #4
 8013ff8:	6021      	strge	r1, [r4, #0]
 8013ffa:	b90e      	cbnz	r6, 8014000 <_printf_i+0x114>
 8013ffc:	2d00      	cmp	r5, #0
 8013ffe:	d04b      	beq.n	8014098 <_printf_i+0x1ac>
 8014000:	4615      	mov	r5, r2
 8014002:	fbb6 f1f3 	udiv	r1, r6, r3
 8014006:	fb03 6711 	mls	r7, r3, r1, r6
 801400a:	5dc7      	ldrb	r7, [r0, r7]
 801400c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014010:	4637      	mov	r7, r6
 8014012:	42bb      	cmp	r3, r7
 8014014:	460e      	mov	r6, r1
 8014016:	d9f4      	bls.n	8014002 <_printf_i+0x116>
 8014018:	2b08      	cmp	r3, #8
 801401a:	d10b      	bne.n	8014034 <_printf_i+0x148>
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	07de      	lsls	r6, r3, #31
 8014020:	d508      	bpl.n	8014034 <_printf_i+0x148>
 8014022:	6923      	ldr	r3, [r4, #16]
 8014024:	6861      	ldr	r1, [r4, #4]
 8014026:	4299      	cmp	r1, r3
 8014028:	bfde      	ittt	le
 801402a:	2330      	movle	r3, #48	; 0x30
 801402c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014030:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014034:	1b52      	subs	r2, r2, r5
 8014036:	6122      	str	r2, [r4, #16]
 8014038:	f8cd a000 	str.w	sl, [sp]
 801403c:	464b      	mov	r3, r9
 801403e:	aa03      	add	r2, sp, #12
 8014040:	4621      	mov	r1, r4
 8014042:	4640      	mov	r0, r8
 8014044:	f7ff fee4 	bl	8013e10 <_printf_common>
 8014048:	3001      	adds	r0, #1
 801404a:	d14a      	bne.n	80140e2 <_printf_i+0x1f6>
 801404c:	f04f 30ff 	mov.w	r0, #4294967295
 8014050:	b004      	add	sp, #16
 8014052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014056:	6823      	ldr	r3, [r4, #0]
 8014058:	f043 0320 	orr.w	r3, r3, #32
 801405c:	6023      	str	r3, [r4, #0]
 801405e:	4833      	ldr	r0, [pc, #204]	; (801412c <_printf_i+0x240>)
 8014060:	2778      	movs	r7, #120	; 0x78
 8014062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014066:	6823      	ldr	r3, [r4, #0]
 8014068:	6829      	ldr	r1, [r5, #0]
 801406a:	061f      	lsls	r7, r3, #24
 801406c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014070:	d402      	bmi.n	8014078 <_printf_i+0x18c>
 8014072:	065f      	lsls	r7, r3, #25
 8014074:	bf48      	it	mi
 8014076:	b2b6      	uxthmi	r6, r6
 8014078:	07df      	lsls	r7, r3, #31
 801407a:	bf48      	it	mi
 801407c:	f043 0320 	orrmi.w	r3, r3, #32
 8014080:	6029      	str	r1, [r5, #0]
 8014082:	bf48      	it	mi
 8014084:	6023      	strmi	r3, [r4, #0]
 8014086:	b91e      	cbnz	r6, 8014090 <_printf_i+0x1a4>
 8014088:	6823      	ldr	r3, [r4, #0]
 801408a:	f023 0320 	bic.w	r3, r3, #32
 801408e:	6023      	str	r3, [r4, #0]
 8014090:	2310      	movs	r3, #16
 8014092:	e7a7      	b.n	8013fe4 <_printf_i+0xf8>
 8014094:	4824      	ldr	r0, [pc, #144]	; (8014128 <_printf_i+0x23c>)
 8014096:	e7e4      	b.n	8014062 <_printf_i+0x176>
 8014098:	4615      	mov	r5, r2
 801409a:	e7bd      	b.n	8014018 <_printf_i+0x12c>
 801409c:	682b      	ldr	r3, [r5, #0]
 801409e:	6826      	ldr	r6, [r4, #0]
 80140a0:	6961      	ldr	r1, [r4, #20]
 80140a2:	1d18      	adds	r0, r3, #4
 80140a4:	6028      	str	r0, [r5, #0]
 80140a6:	0635      	lsls	r5, r6, #24
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	d501      	bpl.n	80140b0 <_printf_i+0x1c4>
 80140ac:	6019      	str	r1, [r3, #0]
 80140ae:	e002      	b.n	80140b6 <_printf_i+0x1ca>
 80140b0:	0670      	lsls	r0, r6, #25
 80140b2:	d5fb      	bpl.n	80140ac <_printf_i+0x1c0>
 80140b4:	8019      	strh	r1, [r3, #0]
 80140b6:	2300      	movs	r3, #0
 80140b8:	6123      	str	r3, [r4, #16]
 80140ba:	4615      	mov	r5, r2
 80140bc:	e7bc      	b.n	8014038 <_printf_i+0x14c>
 80140be:	682b      	ldr	r3, [r5, #0]
 80140c0:	1d1a      	adds	r2, r3, #4
 80140c2:	602a      	str	r2, [r5, #0]
 80140c4:	681d      	ldr	r5, [r3, #0]
 80140c6:	6862      	ldr	r2, [r4, #4]
 80140c8:	2100      	movs	r1, #0
 80140ca:	4628      	mov	r0, r5
 80140cc:	f7ec f8a8 	bl	8000220 <memchr>
 80140d0:	b108      	cbz	r0, 80140d6 <_printf_i+0x1ea>
 80140d2:	1b40      	subs	r0, r0, r5
 80140d4:	6060      	str	r0, [r4, #4]
 80140d6:	6863      	ldr	r3, [r4, #4]
 80140d8:	6123      	str	r3, [r4, #16]
 80140da:	2300      	movs	r3, #0
 80140dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140e0:	e7aa      	b.n	8014038 <_printf_i+0x14c>
 80140e2:	6923      	ldr	r3, [r4, #16]
 80140e4:	462a      	mov	r2, r5
 80140e6:	4649      	mov	r1, r9
 80140e8:	4640      	mov	r0, r8
 80140ea:	47d0      	blx	sl
 80140ec:	3001      	adds	r0, #1
 80140ee:	d0ad      	beq.n	801404c <_printf_i+0x160>
 80140f0:	6823      	ldr	r3, [r4, #0]
 80140f2:	079b      	lsls	r3, r3, #30
 80140f4:	d413      	bmi.n	801411e <_printf_i+0x232>
 80140f6:	68e0      	ldr	r0, [r4, #12]
 80140f8:	9b03      	ldr	r3, [sp, #12]
 80140fa:	4298      	cmp	r0, r3
 80140fc:	bfb8      	it	lt
 80140fe:	4618      	movlt	r0, r3
 8014100:	e7a6      	b.n	8014050 <_printf_i+0x164>
 8014102:	2301      	movs	r3, #1
 8014104:	4632      	mov	r2, r6
 8014106:	4649      	mov	r1, r9
 8014108:	4640      	mov	r0, r8
 801410a:	47d0      	blx	sl
 801410c:	3001      	adds	r0, #1
 801410e:	d09d      	beq.n	801404c <_printf_i+0x160>
 8014110:	3501      	adds	r5, #1
 8014112:	68e3      	ldr	r3, [r4, #12]
 8014114:	9903      	ldr	r1, [sp, #12]
 8014116:	1a5b      	subs	r3, r3, r1
 8014118:	42ab      	cmp	r3, r5
 801411a:	dcf2      	bgt.n	8014102 <_printf_i+0x216>
 801411c:	e7eb      	b.n	80140f6 <_printf_i+0x20a>
 801411e:	2500      	movs	r5, #0
 8014120:	f104 0619 	add.w	r6, r4, #25
 8014124:	e7f5      	b.n	8014112 <_printf_i+0x226>
 8014126:	bf00      	nop
 8014128:	0801c4fe 	.word	0x0801c4fe
 801412c:	0801c50f 	.word	0x0801c50f

08014130 <std>:
 8014130:	2300      	movs	r3, #0
 8014132:	b510      	push	{r4, lr}
 8014134:	4604      	mov	r4, r0
 8014136:	e9c0 3300 	strd	r3, r3, [r0]
 801413a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801413e:	6083      	str	r3, [r0, #8]
 8014140:	8181      	strh	r1, [r0, #12]
 8014142:	6643      	str	r3, [r0, #100]	; 0x64
 8014144:	81c2      	strh	r2, [r0, #14]
 8014146:	6183      	str	r3, [r0, #24]
 8014148:	4619      	mov	r1, r3
 801414a:	2208      	movs	r2, #8
 801414c:	305c      	adds	r0, #92	; 0x5c
 801414e:	f000 f914 	bl	801437a <memset>
 8014152:	4b0d      	ldr	r3, [pc, #52]	; (8014188 <std+0x58>)
 8014154:	6263      	str	r3, [r4, #36]	; 0x24
 8014156:	4b0d      	ldr	r3, [pc, #52]	; (801418c <std+0x5c>)
 8014158:	62a3      	str	r3, [r4, #40]	; 0x28
 801415a:	4b0d      	ldr	r3, [pc, #52]	; (8014190 <std+0x60>)
 801415c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801415e:	4b0d      	ldr	r3, [pc, #52]	; (8014194 <std+0x64>)
 8014160:	6323      	str	r3, [r4, #48]	; 0x30
 8014162:	4b0d      	ldr	r3, [pc, #52]	; (8014198 <std+0x68>)
 8014164:	6224      	str	r4, [r4, #32]
 8014166:	429c      	cmp	r4, r3
 8014168:	d006      	beq.n	8014178 <std+0x48>
 801416a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801416e:	4294      	cmp	r4, r2
 8014170:	d002      	beq.n	8014178 <std+0x48>
 8014172:	33d0      	adds	r3, #208	; 0xd0
 8014174:	429c      	cmp	r4, r3
 8014176:	d105      	bne.n	8014184 <std+0x54>
 8014178:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014180:	f000 b978 	b.w	8014474 <__retarget_lock_init_recursive>
 8014184:	bd10      	pop	{r4, pc}
 8014186:	bf00      	nop
 8014188:	080142f5 	.word	0x080142f5
 801418c:	08014317 	.word	0x08014317
 8014190:	0801434f 	.word	0x0801434f
 8014194:	08014373 	.word	0x08014373
 8014198:	20002d74 	.word	0x20002d74

0801419c <stdio_exit_handler>:
 801419c:	4a02      	ldr	r2, [pc, #8]	; (80141a8 <stdio_exit_handler+0xc>)
 801419e:	4903      	ldr	r1, [pc, #12]	; (80141ac <stdio_exit_handler+0x10>)
 80141a0:	4803      	ldr	r0, [pc, #12]	; (80141b0 <stdio_exit_handler+0x14>)
 80141a2:	f000 b869 	b.w	8014278 <_fwalk_sglue>
 80141a6:	bf00      	nop
 80141a8:	20000314 	.word	0x20000314
 80141ac:	08015e29 	.word	0x08015e29
 80141b0:	20000320 	.word	0x20000320

080141b4 <cleanup_stdio>:
 80141b4:	6841      	ldr	r1, [r0, #4]
 80141b6:	4b0c      	ldr	r3, [pc, #48]	; (80141e8 <cleanup_stdio+0x34>)
 80141b8:	4299      	cmp	r1, r3
 80141ba:	b510      	push	{r4, lr}
 80141bc:	4604      	mov	r4, r0
 80141be:	d001      	beq.n	80141c4 <cleanup_stdio+0x10>
 80141c0:	f001 fe32 	bl	8015e28 <_fflush_r>
 80141c4:	68a1      	ldr	r1, [r4, #8]
 80141c6:	4b09      	ldr	r3, [pc, #36]	; (80141ec <cleanup_stdio+0x38>)
 80141c8:	4299      	cmp	r1, r3
 80141ca:	d002      	beq.n	80141d2 <cleanup_stdio+0x1e>
 80141cc:	4620      	mov	r0, r4
 80141ce:	f001 fe2b 	bl	8015e28 <_fflush_r>
 80141d2:	68e1      	ldr	r1, [r4, #12]
 80141d4:	4b06      	ldr	r3, [pc, #24]	; (80141f0 <cleanup_stdio+0x3c>)
 80141d6:	4299      	cmp	r1, r3
 80141d8:	d004      	beq.n	80141e4 <cleanup_stdio+0x30>
 80141da:	4620      	mov	r0, r4
 80141dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141e0:	f001 be22 	b.w	8015e28 <_fflush_r>
 80141e4:	bd10      	pop	{r4, pc}
 80141e6:	bf00      	nop
 80141e8:	20002d74 	.word	0x20002d74
 80141ec:	20002ddc 	.word	0x20002ddc
 80141f0:	20002e44 	.word	0x20002e44

080141f4 <global_stdio_init.part.0>:
 80141f4:	b510      	push	{r4, lr}
 80141f6:	4b0b      	ldr	r3, [pc, #44]	; (8014224 <global_stdio_init.part.0+0x30>)
 80141f8:	4c0b      	ldr	r4, [pc, #44]	; (8014228 <global_stdio_init.part.0+0x34>)
 80141fa:	4a0c      	ldr	r2, [pc, #48]	; (801422c <global_stdio_init.part.0+0x38>)
 80141fc:	601a      	str	r2, [r3, #0]
 80141fe:	4620      	mov	r0, r4
 8014200:	2200      	movs	r2, #0
 8014202:	2104      	movs	r1, #4
 8014204:	f7ff ff94 	bl	8014130 <std>
 8014208:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801420c:	2201      	movs	r2, #1
 801420e:	2109      	movs	r1, #9
 8014210:	f7ff ff8e 	bl	8014130 <std>
 8014214:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014218:	2202      	movs	r2, #2
 801421a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801421e:	2112      	movs	r1, #18
 8014220:	f7ff bf86 	b.w	8014130 <std>
 8014224:	20002eac 	.word	0x20002eac
 8014228:	20002d74 	.word	0x20002d74
 801422c:	0801419d 	.word	0x0801419d

08014230 <__sfp_lock_acquire>:
 8014230:	4801      	ldr	r0, [pc, #4]	; (8014238 <__sfp_lock_acquire+0x8>)
 8014232:	f000 b920 	b.w	8014476 <__retarget_lock_acquire_recursive>
 8014236:	bf00      	nop
 8014238:	20002eb5 	.word	0x20002eb5

0801423c <__sfp_lock_release>:
 801423c:	4801      	ldr	r0, [pc, #4]	; (8014244 <__sfp_lock_release+0x8>)
 801423e:	f000 b91b 	b.w	8014478 <__retarget_lock_release_recursive>
 8014242:	bf00      	nop
 8014244:	20002eb5 	.word	0x20002eb5

08014248 <__sinit>:
 8014248:	b510      	push	{r4, lr}
 801424a:	4604      	mov	r4, r0
 801424c:	f7ff fff0 	bl	8014230 <__sfp_lock_acquire>
 8014250:	6a23      	ldr	r3, [r4, #32]
 8014252:	b11b      	cbz	r3, 801425c <__sinit+0x14>
 8014254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014258:	f7ff bff0 	b.w	801423c <__sfp_lock_release>
 801425c:	4b04      	ldr	r3, [pc, #16]	; (8014270 <__sinit+0x28>)
 801425e:	6223      	str	r3, [r4, #32]
 8014260:	4b04      	ldr	r3, [pc, #16]	; (8014274 <__sinit+0x2c>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d1f5      	bne.n	8014254 <__sinit+0xc>
 8014268:	f7ff ffc4 	bl	80141f4 <global_stdio_init.part.0>
 801426c:	e7f2      	b.n	8014254 <__sinit+0xc>
 801426e:	bf00      	nop
 8014270:	080141b5 	.word	0x080141b5
 8014274:	20002eac 	.word	0x20002eac

08014278 <_fwalk_sglue>:
 8014278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801427c:	4607      	mov	r7, r0
 801427e:	4688      	mov	r8, r1
 8014280:	4614      	mov	r4, r2
 8014282:	2600      	movs	r6, #0
 8014284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014288:	f1b9 0901 	subs.w	r9, r9, #1
 801428c:	d505      	bpl.n	801429a <_fwalk_sglue+0x22>
 801428e:	6824      	ldr	r4, [r4, #0]
 8014290:	2c00      	cmp	r4, #0
 8014292:	d1f7      	bne.n	8014284 <_fwalk_sglue+0xc>
 8014294:	4630      	mov	r0, r6
 8014296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801429a:	89ab      	ldrh	r3, [r5, #12]
 801429c:	2b01      	cmp	r3, #1
 801429e:	d907      	bls.n	80142b0 <_fwalk_sglue+0x38>
 80142a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80142a4:	3301      	adds	r3, #1
 80142a6:	d003      	beq.n	80142b0 <_fwalk_sglue+0x38>
 80142a8:	4629      	mov	r1, r5
 80142aa:	4638      	mov	r0, r7
 80142ac:	47c0      	blx	r8
 80142ae:	4306      	orrs	r6, r0
 80142b0:	3568      	adds	r5, #104	; 0x68
 80142b2:	e7e9      	b.n	8014288 <_fwalk_sglue+0x10>

080142b4 <siprintf>:
 80142b4:	b40e      	push	{r1, r2, r3}
 80142b6:	b500      	push	{lr}
 80142b8:	b09c      	sub	sp, #112	; 0x70
 80142ba:	ab1d      	add	r3, sp, #116	; 0x74
 80142bc:	9002      	str	r0, [sp, #8]
 80142be:	9006      	str	r0, [sp, #24]
 80142c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80142c4:	4809      	ldr	r0, [pc, #36]	; (80142ec <siprintf+0x38>)
 80142c6:	9107      	str	r1, [sp, #28]
 80142c8:	9104      	str	r1, [sp, #16]
 80142ca:	4909      	ldr	r1, [pc, #36]	; (80142f0 <siprintf+0x3c>)
 80142cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80142d0:	9105      	str	r1, [sp, #20]
 80142d2:	6800      	ldr	r0, [r0, #0]
 80142d4:	9301      	str	r3, [sp, #4]
 80142d6:	a902      	add	r1, sp, #8
 80142d8:	f001 fc22 	bl	8015b20 <_svfiprintf_r>
 80142dc:	9b02      	ldr	r3, [sp, #8]
 80142de:	2200      	movs	r2, #0
 80142e0:	701a      	strb	r2, [r3, #0]
 80142e2:	b01c      	add	sp, #112	; 0x70
 80142e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80142e8:	b003      	add	sp, #12
 80142ea:	4770      	bx	lr
 80142ec:	2000036c 	.word	0x2000036c
 80142f0:	ffff0208 	.word	0xffff0208

080142f4 <__sread>:
 80142f4:	b510      	push	{r4, lr}
 80142f6:	460c      	mov	r4, r1
 80142f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142fc:	f000 f86c 	bl	80143d8 <_read_r>
 8014300:	2800      	cmp	r0, #0
 8014302:	bfab      	itete	ge
 8014304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014306:	89a3      	ldrhlt	r3, [r4, #12]
 8014308:	181b      	addge	r3, r3, r0
 801430a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801430e:	bfac      	ite	ge
 8014310:	6563      	strge	r3, [r4, #84]	; 0x54
 8014312:	81a3      	strhlt	r3, [r4, #12]
 8014314:	bd10      	pop	{r4, pc}

08014316 <__swrite>:
 8014316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801431a:	461f      	mov	r7, r3
 801431c:	898b      	ldrh	r3, [r1, #12]
 801431e:	05db      	lsls	r3, r3, #23
 8014320:	4605      	mov	r5, r0
 8014322:	460c      	mov	r4, r1
 8014324:	4616      	mov	r6, r2
 8014326:	d505      	bpl.n	8014334 <__swrite+0x1e>
 8014328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801432c:	2302      	movs	r3, #2
 801432e:	2200      	movs	r2, #0
 8014330:	f000 f840 	bl	80143b4 <_lseek_r>
 8014334:	89a3      	ldrh	r3, [r4, #12]
 8014336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801433a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801433e:	81a3      	strh	r3, [r4, #12]
 8014340:	4632      	mov	r2, r6
 8014342:	463b      	mov	r3, r7
 8014344:	4628      	mov	r0, r5
 8014346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801434a:	f000 b857 	b.w	80143fc <_write_r>

0801434e <__sseek>:
 801434e:	b510      	push	{r4, lr}
 8014350:	460c      	mov	r4, r1
 8014352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014356:	f000 f82d 	bl	80143b4 <_lseek_r>
 801435a:	1c43      	adds	r3, r0, #1
 801435c:	89a3      	ldrh	r3, [r4, #12]
 801435e:	bf15      	itete	ne
 8014360:	6560      	strne	r0, [r4, #84]	; 0x54
 8014362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801436a:	81a3      	strheq	r3, [r4, #12]
 801436c:	bf18      	it	ne
 801436e:	81a3      	strhne	r3, [r4, #12]
 8014370:	bd10      	pop	{r4, pc}

08014372 <__sclose>:
 8014372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014376:	f000 b80d 	b.w	8014394 <_close_r>

0801437a <memset>:
 801437a:	4402      	add	r2, r0
 801437c:	4603      	mov	r3, r0
 801437e:	4293      	cmp	r3, r2
 8014380:	d100      	bne.n	8014384 <memset+0xa>
 8014382:	4770      	bx	lr
 8014384:	f803 1b01 	strb.w	r1, [r3], #1
 8014388:	e7f9      	b.n	801437e <memset+0x4>
	...

0801438c <_localeconv_r>:
 801438c:	4800      	ldr	r0, [pc, #0]	; (8014390 <_localeconv_r+0x4>)
 801438e:	4770      	bx	lr
 8014390:	20000460 	.word	0x20000460

08014394 <_close_r>:
 8014394:	b538      	push	{r3, r4, r5, lr}
 8014396:	4d06      	ldr	r5, [pc, #24]	; (80143b0 <_close_r+0x1c>)
 8014398:	2300      	movs	r3, #0
 801439a:	4604      	mov	r4, r0
 801439c:	4608      	mov	r0, r1
 801439e:	602b      	str	r3, [r5, #0]
 80143a0:	f7ef ff7f 	bl	80042a2 <_close>
 80143a4:	1c43      	adds	r3, r0, #1
 80143a6:	d102      	bne.n	80143ae <_close_r+0x1a>
 80143a8:	682b      	ldr	r3, [r5, #0]
 80143aa:	b103      	cbz	r3, 80143ae <_close_r+0x1a>
 80143ac:	6023      	str	r3, [r4, #0]
 80143ae:	bd38      	pop	{r3, r4, r5, pc}
 80143b0:	20002eb0 	.word	0x20002eb0

080143b4 <_lseek_r>:
 80143b4:	b538      	push	{r3, r4, r5, lr}
 80143b6:	4d07      	ldr	r5, [pc, #28]	; (80143d4 <_lseek_r+0x20>)
 80143b8:	4604      	mov	r4, r0
 80143ba:	4608      	mov	r0, r1
 80143bc:	4611      	mov	r1, r2
 80143be:	2200      	movs	r2, #0
 80143c0:	602a      	str	r2, [r5, #0]
 80143c2:	461a      	mov	r2, r3
 80143c4:	f7ef ff94 	bl	80042f0 <_lseek>
 80143c8:	1c43      	adds	r3, r0, #1
 80143ca:	d102      	bne.n	80143d2 <_lseek_r+0x1e>
 80143cc:	682b      	ldr	r3, [r5, #0]
 80143ce:	b103      	cbz	r3, 80143d2 <_lseek_r+0x1e>
 80143d0:	6023      	str	r3, [r4, #0]
 80143d2:	bd38      	pop	{r3, r4, r5, pc}
 80143d4:	20002eb0 	.word	0x20002eb0

080143d8 <_read_r>:
 80143d8:	b538      	push	{r3, r4, r5, lr}
 80143da:	4d07      	ldr	r5, [pc, #28]	; (80143f8 <_read_r+0x20>)
 80143dc:	4604      	mov	r4, r0
 80143de:	4608      	mov	r0, r1
 80143e0:	4611      	mov	r1, r2
 80143e2:	2200      	movs	r2, #0
 80143e4:	602a      	str	r2, [r5, #0]
 80143e6:	461a      	mov	r2, r3
 80143e8:	f7ef ff22 	bl	8004230 <_read>
 80143ec:	1c43      	adds	r3, r0, #1
 80143ee:	d102      	bne.n	80143f6 <_read_r+0x1e>
 80143f0:	682b      	ldr	r3, [r5, #0]
 80143f2:	b103      	cbz	r3, 80143f6 <_read_r+0x1e>
 80143f4:	6023      	str	r3, [r4, #0]
 80143f6:	bd38      	pop	{r3, r4, r5, pc}
 80143f8:	20002eb0 	.word	0x20002eb0

080143fc <_write_r>:
 80143fc:	b538      	push	{r3, r4, r5, lr}
 80143fe:	4d07      	ldr	r5, [pc, #28]	; (801441c <_write_r+0x20>)
 8014400:	4604      	mov	r4, r0
 8014402:	4608      	mov	r0, r1
 8014404:	4611      	mov	r1, r2
 8014406:	2200      	movs	r2, #0
 8014408:	602a      	str	r2, [r5, #0]
 801440a:	461a      	mov	r2, r3
 801440c:	f7ef ff2d 	bl	800426a <_write>
 8014410:	1c43      	adds	r3, r0, #1
 8014412:	d102      	bne.n	801441a <_write_r+0x1e>
 8014414:	682b      	ldr	r3, [r5, #0]
 8014416:	b103      	cbz	r3, 801441a <_write_r+0x1e>
 8014418:	6023      	str	r3, [r4, #0]
 801441a:	bd38      	pop	{r3, r4, r5, pc}
 801441c:	20002eb0 	.word	0x20002eb0

08014420 <__errno>:
 8014420:	4b01      	ldr	r3, [pc, #4]	; (8014428 <__errno+0x8>)
 8014422:	6818      	ldr	r0, [r3, #0]
 8014424:	4770      	bx	lr
 8014426:	bf00      	nop
 8014428:	2000036c 	.word	0x2000036c

0801442c <__libc_init_array>:
 801442c:	b570      	push	{r4, r5, r6, lr}
 801442e:	4d0d      	ldr	r5, [pc, #52]	; (8014464 <__libc_init_array+0x38>)
 8014430:	4c0d      	ldr	r4, [pc, #52]	; (8014468 <__libc_init_array+0x3c>)
 8014432:	1b64      	subs	r4, r4, r5
 8014434:	10a4      	asrs	r4, r4, #2
 8014436:	2600      	movs	r6, #0
 8014438:	42a6      	cmp	r6, r4
 801443a:	d109      	bne.n	8014450 <__libc_init_array+0x24>
 801443c:	4d0b      	ldr	r5, [pc, #44]	; (801446c <__libc_init_array+0x40>)
 801443e:	4c0c      	ldr	r4, [pc, #48]	; (8014470 <__libc_init_array+0x44>)
 8014440:	f003 f952 	bl	80176e8 <_init>
 8014444:	1b64      	subs	r4, r4, r5
 8014446:	10a4      	asrs	r4, r4, #2
 8014448:	2600      	movs	r6, #0
 801444a:	42a6      	cmp	r6, r4
 801444c:	d105      	bne.n	801445a <__libc_init_array+0x2e>
 801444e:	bd70      	pop	{r4, r5, r6, pc}
 8014450:	f855 3b04 	ldr.w	r3, [r5], #4
 8014454:	4798      	blx	r3
 8014456:	3601      	adds	r6, #1
 8014458:	e7ee      	b.n	8014438 <__libc_init_array+0xc>
 801445a:	f855 3b04 	ldr.w	r3, [r5], #4
 801445e:	4798      	blx	r3
 8014460:	3601      	adds	r6, #1
 8014462:	e7f2      	b.n	801444a <__libc_init_array+0x1e>
 8014464:	0801c8a8 	.word	0x0801c8a8
 8014468:	0801c8a8 	.word	0x0801c8a8
 801446c:	0801c8a8 	.word	0x0801c8a8
 8014470:	0801c8ac 	.word	0x0801c8ac

08014474 <__retarget_lock_init_recursive>:
 8014474:	4770      	bx	lr

08014476 <__retarget_lock_acquire_recursive>:
 8014476:	4770      	bx	lr

08014478 <__retarget_lock_release_recursive>:
 8014478:	4770      	bx	lr

0801447a <quorem>:
 801447a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801447e:	6903      	ldr	r3, [r0, #16]
 8014480:	690c      	ldr	r4, [r1, #16]
 8014482:	42a3      	cmp	r3, r4
 8014484:	4607      	mov	r7, r0
 8014486:	db7e      	blt.n	8014586 <quorem+0x10c>
 8014488:	3c01      	subs	r4, #1
 801448a:	f101 0814 	add.w	r8, r1, #20
 801448e:	f100 0514 	add.w	r5, r0, #20
 8014492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014496:	9301      	str	r3, [sp, #4]
 8014498:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801449c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80144a0:	3301      	adds	r3, #1
 80144a2:	429a      	cmp	r2, r3
 80144a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80144a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80144ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80144b0:	d331      	bcc.n	8014516 <quorem+0x9c>
 80144b2:	f04f 0e00 	mov.w	lr, #0
 80144b6:	4640      	mov	r0, r8
 80144b8:	46ac      	mov	ip, r5
 80144ba:	46f2      	mov	sl, lr
 80144bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80144c0:	b293      	uxth	r3, r2
 80144c2:	fb06 e303 	mla	r3, r6, r3, lr
 80144c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80144ca:	0c1a      	lsrs	r2, r3, #16
 80144cc:	b29b      	uxth	r3, r3
 80144ce:	ebaa 0303 	sub.w	r3, sl, r3
 80144d2:	f8dc a000 	ldr.w	sl, [ip]
 80144d6:	fa13 f38a 	uxtah	r3, r3, sl
 80144da:	fb06 220e 	mla	r2, r6, lr, r2
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	9b00      	ldr	r3, [sp, #0]
 80144e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80144e6:	b292      	uxth	r2, r2
 80144e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80144ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80144f4:	4581      	cmp	r9, r0
 80144f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144fa:	f84c 3b04 	str.w	r3, [ip], #4
 80144fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014502:	d2db      	bcs.n	80144bc <quorem+0x42>
 8014504:	f855 300b 	ldr.w	r3, [r5, fp]
 8014508:	b92b      	cbnz	r3, 8014516 <quorem+0x9c>
 801450a:	9b01      	ldr	r3, [sp, #4]
 801450c:	3b04      	subs	r3, #4
 801450e:	429d      	cmp	r5, r3
 8014510:	461a      	mov	r2, r3
 8014512:	d32c      	bcc.n	801456e <quorem+0xf4>
 8014514:	613c      	str	r4, [r7, #16]
 8014516:	4638      	mov	r0, r7
 8014518:	f001 f9a8 	bl	801586c <__mcmp>
 801451c:	2800      	cmp	r0, #0
 801451e:	db22      	blt.n	8014566 <quorem+0xec>
 8014520:	3601      	adds	r6, #1
 8014522:	4629      	mov	r1, r5
 8014524:	2000      	movs	r0, #0
 8014526:	f858 2b04 	ldr.w	r2, [r8], #4
 801452a:	f8d1 c000 	ldr.w	ip, [r1]
 801452e:	b293      	uxth	r3, r2
 8014530:	1ac3      	subs	r3, r0, r3
 8014532:	0c12      	lsrs	r2, r2, #16
 8014534:	fa13 f38c 	uxtah	r3, r3, ip
 8014538:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801453c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014540:	b29b      	uxth	r3, r3
 8014542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014546:	45c1      	cmp	r9, r8
 8014548:	f841 3b04 	str.w	r3, [r1], #4
 801454c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014550:	d2e9      	bcs.n	8014526 <quorem+0xac>
 8014552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801455a:	b922      	cbnz	r2, 8014566 <quorem+0xec>
 801455c:	3b04      	subs	r3, #4
 801455e:	429d      	cmp	r5, r3
 8014560:	461a      	mov	r2, r3
 8014562:	d30a      	bcc.n	801457a <quorem+0x100>
 8014564:	613c      	str	r4, [r7, #16]
 8014566:	4630      	mov	r0, r6
 8014568:	b003      	add	sp, #12
 801456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801456e:	6812      	ldr	r2, [r2, #0]
 8014570:	3b04      	subs	r3, #4
 8014572:	2a00      	cmp	r2, #0
 8014574:	d1ce      	bne.n	8014514 <quorem+0x9a>
 8014576:	3c01      	subs	r4, #1
 8014578:	e7c9      	b.n	801450e <quorem+0x94>
 801457a:	6812      	ldr	r2, [r2, #0]
 801457c:	3b04      	subs	r3, #4
 801457e:	2a00      	cmp	r2, #0
 8014580:	d1f0      	bne.n	8014564 <quorem+0xea>
 8014582:	3c01      	subs	r4, #1
 8014584:	e7eb      	b.n	801455e <quorem+0xe4>
 8014586:	2000      	movs	r0, #0
 8014588:	e7ee      	b.n	8014568 <quorem+0xee>
 801458a:	0000      	movs	r0, r0
 801458c:	0000      	movs	r0, r0
	...

08014590 <_dtoa_r>:
 8014590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014594:	ed2d 8b04 	vpush	{d8-d9}
 8014598:	69c5      	ldr	r5, [r0, #28]
 801459a:	b093      	sub	sp, #76	; 0x4c
 801459c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80145a0:	ec57 6b10 	vmov	r6, r7, d0
 80145a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80145a8:	9107      	str	r1, [sp, #28]
 80145aa:	4604      	mov	r4, r0
 80145ac:	920a      	str	r2, [sp, #40]	; 0x28
 80145ae:	930d      	str	r3, [sp, #52]	; 0x34
 80145b0:	b975      	cbnz	r5, 80145d0 <_dtoa_r+0x40>
 80145b2:	2010      	movs	r0, #16
 80145b4:	f000 fe2a 	bl	801520c <malloc>
 80145b8:	4602      	mov	r2, r0
 80145ba:	61e0      	str	r0, [r4, #28]
 80145bc:	b920      	cbnz	r0, 80145c8 <_dtoa_r+0x38>
 80145be:	4bae      	ldr	r3, [pc, #696]	; (8014878 <_dtoa_r+0x2e8>)
 80145c0:	21ef      	movs	r1, #239	; 0xef
 80145c2:	48ae      	ldr	r0, [pc, #696]	; (801487c <_dtoa_r+0x2ec>)
 80145c4:	f001 fc90 	bl	8015ee8 <__assert_func>
 80145c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80145cc:	6005      	str	r5, [r0, #0]
 80145ce:	60c5      	str	r5, [r0, #12]
 80145d0:	69e3      	ldr	r3, [r4, #28]
 80145d2:	6819      	ldr	r1, [r3, #0]
 80145d4:	b151      	cbz	r1, 80145ec <_dtoa_r+0x5c>
 80145d6:	685a      	ldr	r2, [r3, #4]
 80145d8:	604a      	str	r2, [r1, #4]
 80145da:	2301      	movs	r3, #1
 80145dc:	4093      	lsls	r3, r2
 80145de:	608b      	str	r3, [r1, #8]
 80145e0:	4620      	mov	r0, r4
 80145e2:	f000 ff07 	bl	80153f4 <_Bfree>
 80145e6:	69e3      	ldr	r3, [r4, #28]
 80145e8:	2200      	movs	r2, #0
 80145ea:	601a      	str	r2, [r3, #0]
 80145ec:	1e3b      	subs	r3, r7, #0
 80145ee:	bfbb      	ittet	lt
 80145f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80145f4:	9303      	strlt	r3, [sp, #12]
 80145f6:	2300      	movge	r3, #0
 80145f8:	2201      	movlt	r2, #1
 80145fa:	bfac      	ite	ge
 80145fc:	f8c8 3000 	strge.w	r3, [r8]
 8014600:	f8c8 2000 	strlt.w	r2, [r8]
 8014604:	4b9e      	ldr	r3, [pc, #632]	; (8014880 <_dtoa_r+0x2f0>)
 8014606:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801460a:	ea33 0308 	bics.w	r3, r3, r8
 801460e:	d11b      	bne.n	8014648 <_dtoa_r+0xb8>
 8014610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014612:	f242 730f 	movw	r3, #9999	; 0x270f
 8014616:	6013      	str	r3, [r2, #0]
 8014618:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801461c:	4333      	orrs	r3, r6
 801461e:	f000 8593 	beq.w	8015148 <_dtoa_r+0xbb8>
 8014622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014624:	b963      	cbnz	r3, 8014640 <_dtoa_r+0xb0>
 8014626:	4b97      	ldr	r3, [pc, #604]	; (8014884 <_dtoa_r+0x2f4>)
 8014628:	e027      	b.n	801467a <_dtoa_r+0xea>
 801462a:	4b97      	ldr	r3, [pc, #604]	; (8014888 <_dtoa_r+0x2f8>)
 801462c:	9300      	str	r3, [sp, #0]
 801462e:	3308      	adds	r3, #8
 8014630:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014632:	6013      	str	r3, [r2, #0]
 8014634:	9800      	ldr	r0, [sp, #0]
 8014636:	b013      	add	sp, #76	; 0x4c
 8014638:	ecbd 8b04 	vpop	{d8-d9}
 801463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014640:	4b90      	ldr	r3, [pc, #576]	; (8014884 <_dtoa_r+0x2f4>)
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	3303      	adds	r3, #3
 8014646:	e7f3      	b.n	8014630 <_dtoa_r+0xa0>
 8014648:	ed9d 7b02 	vldr	d7, [sp, #8]
 801464c:	2200      	movs	r2, #0
 801464e:	ec51 0b17 	vmov	r0, r1, d7
 8014652:	eeb0 8a47 	vmov.f32	s16, s14
 8014656:	eef0 8a67 	vmov.f32	s17, s15
 801465a:	2300      	movs	r3, #0
 801465c:	f7ec fa5c 	bl	8000b18 <__aeabi_dcmpeq>
 8014660:	4681      	mov	r9, r0
 8014662:	b160      	cbz	r0, 801467e <_dtoa_r+0xee>
 8014664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014666:	2301      	movs	r3, #1
 8014668:	6013      	str	r3, [r2, #0]
 801466a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801466c:	2b00      	cmp	r3, #0
 801466e:	f000 8568 	beq.w	8015142 <_dtoa_r+0xbb2>
 8014672:	4b86      	ldr	r3, [pc, #536]	; (801488c <_dtoa_r+0x2fc>)
 8014674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014676:	6013      	str	r3, [r2, #0]
 8014678:	3b01      	subs	r3, #1
 801467a:	9300      	str	r3, [sp, #0]
 801467c:	e7da      	b.n	8014634 <_dtoa_r+0xa4>
 801467e:	aa10      	add	r2, sp, #64	; 0x40
 8014680:	a911      	add	r1, sp, #68	; 0x44
 8014682:	4620      	mov	r0, r4
 8014684:	eeb0 0a48 	vmov.f32	s0, s16
 8014688:	eef0 0a68 	vmov.f32	s1, s17
 801468c:	f001 f994 	bl	80159b8 <__d2b>
 8014690:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014694:	4682      	mov	sl, r0
 8014696:	2d00      	cmp	r5, #0
 8014698:	d07f      	beq.n	801479a <_dtoa_r+0x20a>
 801469a:	ee18 3a90 	vmov	r3, s17
 801469e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80146a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80146a6:	ec51 0b18 	vmov	r0, r1, d8
 80146aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80146ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80146b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80146b6:	4619      	mov	r1, r3
 80146b8:	2200      	movs	r2, #0
 80146ba:	4b75      	ldr	r3, [pc, #468]	; (8014890 <_dtoa_r+0x300>)
 80146bc:	f7eb fe0c 	bl	80002d8 <__aeabi_dsub>
 80146c0:	a367      	add	r3, pc, #412	; (adr r3, 8014860 <_dtoa_r+0x2d0>)
 80146c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c6:	f7eb ffbf 	bl	8000648 <__aeabi_dmul>
 80146ca:	a367      	add	r3, pc, #412	; (adr r3, 8014868 <_dtoa_r+0x2d8>)
 80146cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d0:	f7eb fe04 	bl	80002dc <__adddf3>
 80146d4:	4606      	mov	r6, r0
 80146d6:	4628      	mov	r0, r5
 80146d8:	460f      	mov	r7, r1
 80146da:	f7eb ff4b 	bl	8000574 <__aeabi_i2d>
 80146de:	a364      	add	r3, pc, #400	; (adr r3, 8014870 <_dtoa_r+0x2e0>)
 80146e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e4:	f7eb ffb0 	bl	8000648 <__aeabi_dmul>
 80146e8:	4602      	mov	r2, r0
 80146ea:	460b      	mov	r3, r1
 80146ec:	4630      	mov	r0, r6
 80146ee:	4639      	mov	r1, r7
 80146f0:	f7eb fdf4 	bl	80002dc <__adddf3>
 80146f4:	4606      	mov	r6, r0
 80146f6:	460f      	mov	r7, r1
 80146f8:	f7ec fa56 	bl	8000ba8 <__aeabi_d2iz>
 80146fc:	2200      	movs	r2, #0
 80146fe:	4683      	mov	fp, r0
 8014700:	2300      	movs	r3, #0
 8014702:	4630      	mov	r0, r6
 8014704:	4639      	mov	r1, r7
 8014706:	f7ec fa11 	bl	8000b2c <__aeabi_dcmplt>
 801470a:	b148      	cbz	r0, 8014720 <_dtoa_r+0x190>
 801470c:	4658      	mov	r0, fp
 801470e:	f7eb ff31 	bl	8000574 <__aeabi_i2d>
 8014712:	4632      	mov	r2, r6
 8014714:	463b      	mov	r3, r7
 8014716:	f7ec f9ff 	bl	8000b18 <__aeabi_dcmpeq>
 801471a:	b908      	cbnz	r0, 8014720 <_dtoa_r+0x190>
 801471c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014720:	f1bb 0f16 	cmp.w	fp, #22
 8014724:	d857      	bhi.n	80147d6 <_dtoa_r+0x246>
 8014726:	4b5b      	ldr	r3, [pc, #364]	; (8014894 <_dtoa_r+0x304>)
 8014728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014730:	ec51 0b18 	vmov	r0, r1, d8
 8014734:	f7ec f9fa 	bl	8000b2c <__aeabi_dcmplt>
 8014738:	2800      	cmp	r0, #0
 801473a:	d04e      	beq.n	80147da <_dtoa_r+0x24a>
 801473c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014740:	2300      	movs	r3, #0
 8014742:	930c      	str	r3, [sp, #48]	; 0x30
 8014744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014746:	1b5b      	subs	r3, r3, r5
 8014748:	1e5a      	subs	r2, r3, #1
 801474a:	bf45      	ittet	mi
 801474c:	f1c3 0301 	rsbmi	r3, r3, #1
 8014750:	9305      	strmi	r3, [sp, #20]
 8014752:	2300      	movpl	r3, #0
 8014754:	2300      	movmi	r3, #0
 8014756:	9206      	str	r2, [sp, #24]
 8014758:	bf54      	ite	pl
 801475a:	9305      	strpl	r3, [sp, #20]
 801475c:	9306      	strmi	r3, [sp, #24]
 801475e:	f1bb 0f00 	cmp.w	fp, #0
 8014762:	db3c      	blt.n	80147de <_dtoa_r+0x24e>
 8014764:	9b06      	ldr	r3, [sp, #24]
 8014766:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801476a:	445b      	add	r3, fp
 801476c:	9306      	str	r3, [sp, #24]
 801476e:	2300      	movs	r3, #0
 8014770:	9308      	str	r3, [sp, #32]
 8014772:	9b07      	ldr	r3, [sp, #28]
 8014774:	2b09      	cmp	r3, #9
 8014776:	d868      	bhi.n	801484a <_dtoa_r+0x2ba>
 8014778:	2b05      	cmp	r3, #5
 801477a:	bfc4      	itt	gt
 801477c:	3b04      	subgt	r3, #4
 801477e:	9307      	strgt	r3, [sp, #28]
 8014780:	9b07      	ldr	r3, [sp, #28]
 8014782:	f1a3 0302 	sub.w	r3, r3, #2
 8014786:	bfcc      	ite	gt
 8014788:	2500      	movgt	r5, #0
 801478a:	2501      	movle	r5, #1
 801478c:	2b03      	cmp	r3, #3
 801478e:	f200 8085 	bhi.w	801489c <_dtoa_r+0x30c>
 8014792:	e8df f003 	tbb	[pc, r3]
 8014796:	3b2e      	.short	0x3b2e
 8014798:	5839      	.short	0x5839
 801479a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801479e:	441d      	add	r5, r3
 80147a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80147a4:	2b20      	cmp	r3, #32
 80147a6:	bfc1      	itttt	gt
 80147a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80147ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80147b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80147b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80147b8:	bfd6      	itet	le
 80147ba:	f1c3 0320 	rsble	r3, r3, #32
 80147be:	ea48 0003 	orrgt.w	r0, r8, r3
 80147c2:	fa06 f003 	lslle.w	r0, r6, r3
 80147c6:	f7eb fec5 	bl	8000554 <__aeabi_ui2d>
 80147ca:	2201      	movs	r2, #1
 80147cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80147d0:	3d01      	subs	r5, #1
 80147d2:	920e      	str	r2, [sp, #56]	; 0x38
 80147d4:	e76f      	b.n	80146b6 <_dtoa_r+0x126>
 80147d6:	2301      	movs	r3, #1
 80147d8:	e7b3      	b.n	8014742 <_dtoa_r+0x1b2>
 80147da:	900c      	str	r0, [sp, #48]	; 0x30
 80147dc:	e7b2      	b.n	8014744 <_dtoa_r+0x1b4>
 80147de:	9b05      	ldr	r3, [sp, #20]
 80147e0:	eba3 030b 	sub.w	r3, r3, fp
 80147e4:	9305      	str	r3, [sp, #20]
 80147e6:	f1cb 0300 	rsb	r3, fp, #0
 80147ea:	9308      	str	r3, [sp, #32]
 80147ec:	2300      	movs	r3, #0
 80147ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80147f0:	e7bf      	b.n	8014772 <_dtoa_r+0x1e2>
 80147f2:	2300      	movs	r3, #0
 80147f4:	9309      	str	r3, [sp, #36]	; 0x24
 80147f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	dc52      	bgt.n	80148a2 <_dtoa_r+0x312>
 80147fc:	2301      	movs	r3, #1
 80147fe:	9301      	str	r3, [sp, #4]
 8014800:	9304      	str	r3, [sp, #16]
 8014802:	461a      	mov	r2, r3
 8014804:	920a      	str	r2, [sp, #40]	; 0x28
 8014806:	e00b      	b.n	8014820 <_dtoa_r+0x290>
 8014808:	2301      	movs	r3, #1
 801480a:	e7f3      	b.n	80147f4 <_dtoa_r+0x264>
 801480c:	2300      	movs	r3, #0
 801480e:	9309      	str	r3, [sp, #36]	; 0x24
 8014810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014812:	445b      	add	r3, fp
 8014814:	9301      	str	r3, [sp, #4]
 8014816:	3301      	adds	r3, #1
 8014818:	2b01      	cmp	r3, #1
 801481a:	9304      	str	r3, [sp, #16]
 801481c:	bfb8      	it	lt
 801481e:	2301      	movlt	r3, #1
 8014820:	69e0      	ldr	r0, [r4, #28]
 8014822:	2100      	movs	r1, #0
 8014824:	2204      	movs	r2, #4
 8014826:	f102 0614 	add.w	r6, r2, #20
 801482a:	429e      	cmp	r6, r3
 801482c:	d93d      	bls.n	80148aa <_dtoa_r+0x31a>
 801482e:	6041      	str	r1, [r0, #4]
 8014830:	4620      	mov	r0, r4
 8014832:	f000 fd9f 	bl	8015374 <_Balloc>
 8014836:	9000      	str	r0, [sp, #0]
 8014838:	2800      	cmp	r0, #0
 801483a:	d139      	bne.n	80148b0 <_dtoa_r+0x320>
 801483c:	4b16      	ldr	r3, [pc, #88]	; (8014898 <_dtoa_r+0x308>)
 801483e:	4602      	mov	r2, r0
 8014840:	f240 11af 	movw	r1, #431	; 0x1af
 8014844:	e6bd      	b.n	80145c2 <_dtoa_r+0x32>
 8014846:	2301      	movs	r3, #1
 8014848:	e7e1      	b.n	801480e <_dtoa_r+0x27e>
 801484a:	2501      	movs	r5, #1
 801484c:	2300      	movs	r3, #0
 801484e:	9307      	str	r3, [sp, #28]
 8014850:	9509      	str	r5, [sp, #36]	; 0x24
 8014852:	f04f 33ff 	mov.w	r3, #4294967295
 8014856:	9301      	str	r3, [sp, #4]
 8014858:	9304      	str	r3, [sp, #16]
 801485a:	2200      	movs	r2, #0
 801485c:	2312      	movs	r3, #18
 801485e:	e7d1      	b.n	8014804 <_dtoa_r+0x274>
 8014860:	636f4361 	.word	0x636f4361
 8014864:	3fd287a7 	.word	0x3fd287a7
 8014868:	8b60c8b3 	.word	0x8b60c8b3
 801486c:	3fc68a28 	.word	0x3fc68a28
 8014870:	509f79fb 	.word	0x509f79fb
 8014874:	3fd34413 	.word	0x3fd34413
 8014878:	0801c52d 	.word	0x0801c52d
 801487c:	0801c544 	.word	0x0801c544
 8014880:	7ff00000 	.word	0x7ff00000
 8014884:	0801c529 	.word	0x0801c529
 8014888:	0801c520 	.word	0x0801c520
 801488c:	0801c4fd 	.word	0x0801c4fd
 8014890:	3ff80000 	.word	0x3ff80000
 8014894:	0801c630 	.word	0x0801c630
 8014898:	0801c59c 	.word	0x0801c59c
 801489c:	2301      	movs	r3, #1
 801489e:	9309      	str	r3, [sp, #36]	; 0x24
 80148a0:	e7d7      	b.n	8014852 <_dtoa_r+0x2c2>
 80148a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148a4:	9301      	str	r3, [sp, #4]
 80148a6:	9304      	str	r3, [sp, #16]
 80148a8:	e7ba      	b.n	8014820 <_dtoa_r+0x290>
 80148aa:	3101      	adds	r1, #1
 80148ac:	0052      	lsls	r2, r2, #1
 80148ae:	e7ba      	b.n	8014826 <_dtoa_r+0x296>
 80148b0:	69e3      	ldr	r3, [r4, #28]
 80148b2:	9a00      	ldr	r2, [sp, #0]
 80148b4:	601a      	str	r2, [r3, #0]
 80148b6:	9b04      	ldr	r3, [sp, #16]
 80148b8:	2b0e      	cmp	r3, #14
 80148ba:	f200 80a8 	bhi.w	8014a0e <_dtoa_r+0x47e>
 80148be:	2d00      	cmp	r5, #0
 80148c0:	f000 80a5 	beq.w	8014a0e <_dtoa_r+0x47e>
 80148c4:	f1bb 0f00 	cmp.w	fp, #0
 80148c8:	dd38      	ble.n	801493c <_dtoa_r+0x3ac>
 80148ca:	4bc0      	ldr	r3, [pc, #768]	; (8014bcc <_dtoa_r+0x63c>)
 80148cc:	f00b 020f 	and.w	r2, fp, #15
 80148d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80148d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80148dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80148e0:	d019      	beq.n	8014916 <_dtoa_r+0x386>
 80148e2:	4bbb      	ldr	r3, [pc, #748]	; (8014bd0 <_dtoa_r+0x640>)
 80148e4:	ec51 0b18 	vmov	r0, r1, d8
 80148e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80148ec:	f7eb ffd6 	bl	800089c <__aeabi_ddiv>
 80148f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80148f4:	f008 080f 	and.w	r8, r8, #15
 80148f8:	2503      	movs	r5, #3
 80148fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014bd0 <_dtoa_r+0x640>
 80148fe:	f1b8 0f00 	cmp.w	r8, #0
 8014902:	d10a      	bne.n	801491a <_dtoa_r+0x38a>
 8014904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014908:	4632      	mov	r2, r6
 801490a:	463b      	mov	r3, r7
 801490c:	f7eb ffc6 	bl	800089c <__aeabi_ddiv>
 8014910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014914:	e02b      	b.n	801496e <_dtoa_r+0x3de>
 8014916:	2502      	movs	r5, #2
 8014918:	e7ef      	b.n	80148fa <_dtoa_r+0x36a>
 801491a:	f018 0f01 	tst.w	r8, #1
 801491e:	d008      	beq.n	8014932 <_dtoa_r+0x3a2>
 8014920:	4630      	mov	r0, r6
 8014922:	4639      	mov	r1, r7
 8014924:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014928:	f7eb fe8e 	bl	8000648 <__aeabi_dmul>
 801492c:	3501      	adds	r5, #1
 801492e:	4606      	mov	r6, r0
 8014930:	460f      	mov	r7, r1
 8014932:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014936:	f109 0908 	add.w	r9, r9, #8
 801493a:	e7e0      	b.n	80148fe <_dtoa_r+0x36e>
 801493c:	f000 809f 	beq.w	8014a7e <_dtoa_r+0x4ee>
 8014940:	f1cb 0600 	rsb	r6, fp, #0
 8014944:	4ba1      	ldr	r3, [pc, #644]	; (8014bcc <_dtoa_r+0x63c>)
 8014946:	4fa2      	ldr	r7, [pc, #648]	; (8014bd0 <_dtoa_r+0x640>)
 8014948:	f006 020f 	and.w	r2, r6, #15
 801494c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014954:	ec51 0b18 	vmov	r0, r1, d8
 8014958:	f7eb fe76 	bl	8000648 <__aeabi_dmul>
 801495c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014960:	1136      	asrs	r6, r6, #4
 8014962:	2300      	movs	r3, #0
 8014964:	2502      	movs	r5, #2
 8014966:	2e00      	cmp	r6, #0
 8014968:	d17e      	bne.n	8014a68 <_dtoa_r+0x4d8>
 801496a:	2b00      	cmp	r3, #0
 801496c:	d1d0      	bne.n	8014910 <_dtoa_r+0x380>
 801496e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014970:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014974:	2b00      	cmp	r3, #0
 8014976:	f000 8084 	beq.w	8014a82 <_dtoa_r+0x4f2>
 801497a:	4b96      	ldr	r3, [pc, #600]	; (8014bd4 <_dtoa_r+0x644>)
 801497c:	2200      	movs	r2, #0
 801497e:	4640      	mov	r0, r8
 8014980:	4649      	mov	r1, r9
 8014982:	f7ec f8d3 	bl	8000b2c <__aeabi_dcmplt>
 8014986:	2800      	cmp	r0, #0
 8014988:	d07b      	beq.n	8014a82 <_dtoa_r+0x4f2>
 801498a:	9b04      	ldr	r3, [sp, #16]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d078      	beq.n	8014a82 <_dtoa_r+0x4f2>
 8014990:	9b01      	ldr	r3, [sp, #4]
 8014992:	2b00      	cmp	r3, #0
 8014994:	dd39      	ble.n	8014a0a <_dtoa_r+0x47a>
 8014996:	4b90      	ldr	r3, [pc, #576]	; (8014bd8 <_dtoa_r+0x648>)
 8014998:	2200      	movs	r2, #0
 801499a:	4640      	mov	r0, r8
 801499c:	4649      	mov	r1, r9
 801499e:	f7eb fe53 	bl	8000648 <__aeabi_dmul>
 80149a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149a6:	9e01      	ldr	r6, [sp, #4]
 80149a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80149ac:	3501      	adds	r5, #1
 80149ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80149b2:	4628      	mov	r0, r5
 80149b4:	f7eb fdde 	bl	8000574 <__aeabi_i2d>
 80149b8:	4642      	mov	r2, r8
 80149ba:	464b      	mov	r3, r9
 80149bc:	f7eb fe44 	bl	8000648 <__aeabi_dmul>
 80149c0:	4b86      	ldr	r3, [pc, #536]	; (8014bdc <_dtoa_r+0x64c>)
 80149c2:	2200      	movs	r2, #0
 80149c4:	f7eb fc8a 	bl	80002dc <__adddf3>
 80149c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80149cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149d0:	9303      	str	r3, [sp, #12]
 80149d2:	2e00      	cmp	r6, #0
 80149d4:	d158      	bne.n	8014a88 <_dtoa_r+0x4f8>
 80149d6:	4b82      	ldr	r3, [pc, #520]	; (8014be0 <_dtoa_r+0x650>)
 80149d8:	2200      	movs	r2, #0
 80149da:	4640      	mov	r0, r8
 80149dc:	4649      	mov	r1, r9
 80149de:	f7eb fc7b 	bl	80002d8 <__aeabi_dsub>
 80149e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80149e6:	4680      	mov	r8, r0
 80149e8:	4689      	mov	r9, r1
 80149ea:	f7ec f8bd 	bl	8000b68 <__aeabi_dcmpgt>
 80149ee:	2800      	cmp	r0, #0
 80149f0:	f040 8296 	bne.w	8014f20 <_dtoa_r+0x990>
 80149f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80149f8:	4640      	mov	r0, r8
 80149fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80149fe:	4649      	mov	r1, r9
 8014a00:	f7ec f894 	bl	8000b2c <__aeabi_dcmplt>
 8014a04:	2800      	cmp	r0, #0
 8014a06:	f040 8289 	bne.w	8014f1c <_dtoa_r+0x98c>
 8014a0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	f2c0 814e 	blt.w	8014cb2 <_dtoa_r+0x722>
 8014a16:	f1bb 0f0e 	cmp.w	fp, #14
 8014a1a:	f300 814a 	bgt.w	8014cb2 <_dtoa_r+0x722>
 8014a1e:	4b6b      	ldr	r3, [pc, #428]	; (8014bcc <_dtoa_r+0x63c>)
 8014a20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	f280 80dc 	bge.w	8014be8 <_dtoa_r+0x658>
 8014a30:	9b04      	ldr	r3, [sp, #16]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	f300 80d8 	bgt.w	8014be8 <_dtoa_r+0x658>
 8014a38:	f040 826f 	bne.w	8014f1a <_dtoa_r+0x98a>
 8014a3c:	4b68      	ldr	r3, [pc, #416]	; (8014be0 <_dtoa_r+0x650>)
 8014a3e:	2200      	movs	r2, #0
 8014a40:	4640      	mov	r0, r8
 8014a42:	4649      	mov	r1, r9
 8014a44:	f7eb fe00 	bl	8000648 <__aeabi_dmul>
 8014a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a4c:	f7ec f882 	bl	8000b54 <__aeabi_dcmpge>
 8014a50:	9e04      	ldr	r6, [sp, #16]
 8014a52:	4637      	mov	r7, r6
 8014a54:	2800      	cmp	r0, #0
 8014a56:	f040 8245 	bne.w	8014ee4 <_dtoa_r+0x954>
 8014a5a:	9d00      	ldr	r5, [sp, #0]
 8014a5c:	2331      	movs	r3, #49	; 0x31
 8014a5e:	f805 3b01 	strb.w	r3, [r5], #1
 8014a62:	f10b 0b01 	add.w	fp, fp, #1
 8014a66:	e241      	b.n	8014eec <_dtoa_r+0x95c>
 8014a68:	07f2      	lsls	r2, r6, #31
 8014a6a:	d505      	bpl.n	8014a78 <_dtoa_r+0x4e8>
 8014a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a70:	f7eb fdea 	bl	8000648 <__aeabi_dmul>
 8014a74:	3501      	adds	r5, #1
 8014a76:	2301      	movs	r3, #1
 8014a78:	1076      	asrs	r6, r6, #1
 8014a7a:	3708      	adds	r7, #8
 8014a7c:	e773      	b.n	8014966 <_dtoa_r+0x3d6>
 8014a7e:	2502      	movs	r5, #2
 8014a80:	e775      	b.n	801496e <_dtoa_r+0x3de>
 8014a82:	9e04      	ldr	r6, [sp, #16]
 8014a84:	465f      	mov	r7, fp
 8014a86:	e792      	b.n	80149ae <_dtoa_r+0x41e>
 8014a88:	9900      	ldr	r1, [sp, #0]
 8014a8a:	4b50      	ldr	r3, [pc, #320]	; (8014bcc <_dtoa_r+0x63c>)
 8014a8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014a90:	4431      	add	r1, r6
 8014a92:	9102      	str	r1, [sp, #8]
 8014a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a96:	eeb0 9a47 	vmov.f32	s18, s14
 8014a9a:	eef0 9a67 	vmov.f32	s19, s15
 8014a9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014aa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014aa6:	2900      	cmp	r1, #0
 8014aa8:	d044      	beq.n	8014b34 <_dtoa_r+0x5a4>
 8014aaa:	494e      	ldr	r1, [pc, #312]	; (8014be4 <_dtoa_r+0x654>)
 8014aac:	2000      	movs	r0, #0
 8014aae:	f7eb fef5 	bl	800089c <__aeabi_ddiv>
 8014ab2:	ec53 2b19 	vmov	r2, r3, d9
 8014ab6:	f7eb fc0f 	bl	80002d8 <__aeabi_dsub>
 8014aba:	9d00      	ldr	r5, [sp, #0]
 8014abc:	ec41 0b19 	vmov	d9, r0, r1
 8014ac0:	4649      	mov	r1, r9
 8014ac2:	4640      	mov	r0, r8
 8014ac4:	f7ec f870 	bl	8000ba8 <__aeabi_d2iz>
 8014ac8:	4606      	mov	r6, r0
 8014aca:	f7eb fd53 	bl	8000574 <__aeabi_i2d>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	4640      	mov	r0, r8
 8014ad4:	4649      	mov	r1, r9
 8014ad6:	f7eb fbff 	bl	80002d8 <__aeabi_dsub>
 8014ada:	3630      	adds	r6, #48	; 0x30
 8014adc:	f805 6b01 	strb.w	r6, [r5], #1
 8014ae0:	ec53 2b19 	vmov	r2, r3, d9
 8014ae4:	4680      	mov	r8, r0
 8014ae6:	4689      	mov	r9, r1
 8014ae8:	f7ec f820 	bl	8000b2c <__aeabi_dcmplt>
 8014aec:	2800      	cmp	r0, #0
 8014aee:	d164      	bne.n	8014bba <_dtoa_r+0x62a>
 8014af0:	4642      	mov	r2, r8
 8014af2:	464b      	mov	r3, r9
 8014af4:	4937      	ldr	r1, [pc, #220]	; (8014bd4 <_dtoa_r+0x644>)
 8014af6:	2000      	movs	r0, #0
 8014af8:	f7eb fbee 	bl	80002d8 <__aeabi_dsub>
 8014afc:	ec53 2b19 	vmov	r2, r3, d9
 8014b00:	f7ec f814 	bl	8000b2c <__aeabi_dcmplt>
 8014b04:	2800      	cmp	r0, #0
 8014b06:	f040 80b6 	bne.w	8014c76 <_dtoa_r+0x6e6>
 8014b0a:	9b02      	ldr	r3, [sp, #8]
 8014b0c:	429d      	cmp	r5, r3
 8014b0e:	f43f af7c 	beq.w	8014a0a <_dtoa_r+0x47a>
 8014b12:	4b31      	ldr	r3, [pc, #196]	; (8014bd8 <_dtoa_r+0x648>)
 8014b14:	ec51 0b19 	vmov	r0, r1, d9
 8014b18:	2200      	movs	r2, #0
 8014b1a:	f7eb fd95 	bl	8000648 <__aeabi_dmul>
 8014b1e:	4b2e      	ldr	r3, [pc, #184]	; (8014bd8 <_dtoa_r+0x648>)
 8014b20:	ec41 0b19 	vmov	d9, r0, r1
 8014b24:	2200      	movs	r2, #0
 8014b26:	4640      	mov	r0, r8
 8014b28:	4649      	mov	r1, r9
 8014b2a:	f7eb fd8d 	bl	8000648 <__aeabi_dmul>
 8014b2e:	4680      	mov	r8, r0
 8014b30:	4689      	mov	r9, r1
 8014b32:	e7c5      	b.n	8014ac0 <_dtoa_r+0x530>
 8014b34:	ec51 0b17 	vmov	r0, r1, d7
 8014b38:	f7eb fd86 	bl	8000648 <__aeabi_dmul>
 8014b3c:	9b02      	ldr	r3, [sp, #8]
 8014b3e:	9d00      	ldr	r5, [sp, #0]
 8014b40:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b42:	ec41 0b19 	vmov	d9, r0, r1
 8014b46:	4649      	mov	r1, r9
 8014b48:	4640      	mov	r0, r8
 8014b4a:	f7ec f82d 	bl	8000ba8 <__aeabi_d2iz>
 8014b4e:	4606      	mov	r6, r0
 8014b50:	f7eb fd10 	bl	8000574 <__aeabi_i2d>
 8014b54:	3630      	adds	r6, #48	; 0x30
 8014b56:	4602      	mov	r2, r0
 8014b58:	460b      	mov	r3, r1
 8014b5a:	4640      	mov	r0, r8
 8014b5c:	4649      	mov	r1, r9
 8014b5e:	f7eb fbbb 	bl	80002d8 <__aeabi_dsub>
 8014b62:	f805 6b01 	strb.w	r6, [r5], #1
 8014b66:	9b02      	ldr	r3, [sp, #8]
 8014b68:	429d      	cmp	r5, r3
 8014b6a:	4680      	mov	r8, r0
 8014b6c:	4689      	mov	r9, r1
 8014b6e:	f04f 0200 	mov.w	r2, #0
 8014b72:	d124      	bne.n	8014bbe <_dtoa_r+0x62e>
 8014b74:	4b1b      	ldr	r3, [pc, #108]	; (8014be4 <_dtoa_r+0x654>)
 8014b76:	ec51 0b19 	vmov	r0, r1, d9
 8014b7a:	f7eb fbaf 	bl	80002dc <__adddf3>
 8014b7e:	4602      	mov	r2, r0
 8014b80:	460b      	mov	r3, r1
 8014b82:	4640      	mov	r0, r8
 8014b84:	4649      	mov	r1, r9
 8014b86:	f7eb ffef 	bl	8000b68 <__aeabi_dcmpgt>
 8014b8a:	2800      	cmp	r0, #0
 8014b8c:	d173      	bne.n	8014c76 <_dtoa_r+0x6e6>
 8014b8e:	ec53 2b19 	vmov	r2, r3, d9
 8014b92:	4914      	ldr	r1, [pc, #80]	; (8014be4 <_dtoa_r+0x654>)
 8014b94:	2000      	movs	r0, #0
 8014b96:	f7eb fb9f 	bl	80002d8 <__aeabi_dsub>
 8014b9a:	4602      	mov	r2, r0
 8014b9c:	460b      	mov	r3, r1
 8014b9e:	4640      	mov	r0, r8
 8014ba0:	4649      	mov	r1, r9
 8014ba2:	f7eb ffc3 	bl	8000b2c <__aeabi_dcmplt>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	f43f af2f 	beq.w	8014a0a <_dtoa_r+0x47a>
 8014bac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014bae:	1e6b      	subs	r3, r5, #1
 8014bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014bb6:	2b30      	cmp	r3, #48	; 0x30
 8014bb8:	d0f8      	beq.n	8014bac <_dtoa_r+0x61c>
 8014bba:	46bb      	mov	fp, r7
 8014bbc:	e04a      	b.n	8014c54 <_dtoa_r+0x6c4>
 8014bbe:	4b06      	ldr	r3, [pc, #24]	; (8014bd8 <_dtoa_r+0x648>)
 8014bc0:	f7eb fd42 	bl	8000648 <__aeabi_dmul>
 8014bc4:	4680      	mov	r8, r0
 8014bc6:	4689      	mov	r9, r1
 8014bc8:	e7bd      	b.n	8014b46 <_dtoa_r+0x5b6>
 8014bca:	bf00      	nop
 8014bcc:	0801c630 	.word	0x0801c630
 8014bd0:	0801c608 	.word	0x0801c608
 8014bd4:	3ff00000 	.word	0x3ff00000
 8014bd8:	40240000 	.word	0x40240000
 8014bdc:	401c0000 	.word	0x401c0000
 8014be0:	40140000 	.word	0x40140000
 8014be4:	3fe00000 	.word	0x3fe00000
 8014be8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014bec:	9d00      	ldr	r5, [sp, #0]
 8014bee:	4642      	mov	r2, r8
 8014bf0:	464b      	mov	r3, r9
 8014bf2:	4630      	mov	r0, r6
 8014bf4:	4639      	mov	r1, r7
 8014bf6:	f7eb fe51 	bl	800089c <__aeabi_ddiv>
 8014bfa:	f7eb ffd5 	bl	8000ba8 <__aeabi_d2iz>
 8014bfe:	9001      	str	r0, [sp, #4]
 8014c00:	f7eb fcb8 	bl	8000574 <__aeabi_i2d>
 8014c04:	4642      	mov	r2, r8
 8014c06:	464b      	mov	r3, r9
 8014c08:	f7eb fd1e 	bl	8000648 <__aeabi_dmul>
 8014c0c:	4602      	mov	r2, r0
 8014c0e:	460b      	mov	r3, r1
 8014c10:	4630      	mov	r0, r6
 8014c12:	4639      	mov	r1, r7
 8014c14:	f7eb fb60 	bl	80002d8 <__aeabi_dsub>
 8014c18:	9e01      	ldr	r6, [sp, #4]
 8014c1a:	9f04      	ldr	r7, [sp, #16]
 8014c1c:	3630      	adds	r6, #48	; 0x30
 8014c1e:	f805 6b01 	strb.w	r6, [r5], #1
 8014c22:	9e00      	ldr	r6, [sp, #0]
 8014c24:	1bae      	subs	r6, r5, r6
 8014c26:	42b7      	cmp	r7, r6
 8014c28:	4602      	mov	r2, r0
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	d134      	bne.n	8014c98 <_dtoa_r+0x708>
 8014c2e:	f7eb fb55 	bl	80002dc <__adddf3>
 8014c32:	4642      	mov	r2, r8
 8014c34:	464b      	mov	r3, r9
 8014c36:	4606      	mov	r6, r0
 8014c38:	460f      	mov	r7, r1
 8014c3a:	f7eb ff95 	bl	8000b68 <__aeabi_dcmpgt>
 8014c3e:	b9c8      	cbnz	r0, 8014c74 <_dtoa_r+0x6e4>
 8014c40:	4642      	mov	r2, r8
 8014c42:	464b      	mov	r3, r9
 8014c44:	4630      	mov	r0, r6
 8014c46:	4639      	mov	r1, r7
 8014c48:	f7eb ff66 	bl	8000b18 <__aeabi_dcmpeq>
 8014c4c:	b110      	cbz	r0, 8014c54 <_dtoa_r+0x6c4>
 8014c4e:	9b01      	ldr	r3, [sp, #4]
 8014c50:	07db      	lsls	r3, r3, #31
 8014c52:	d40f      	bmi.n	8014c74 <_dtoa_r+0x6e4>
 8014c54:	4651      	mov	r1, sl
 8014c56:	4620      	mov	r0, r4
 8014c58:	f000 fbcc 	bl	80153f4 <_Bfree>
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c60:	702b      	strb	r3, [r5, #0]
 8014c62:	f10b 0301 	add.w	r3, fp, #1
 8014c66:	6013      	str	r3, [r2, #0]
 8014c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	f43f ace2 	beq.w	8014634 <_dtoa_r+0xa4>
 8014c70:	601d      	str	r5, [r3, #0]
 8014c72:	e4df      	b.n	8014634 <_dtoa_r+0xa4>
 8014c74:	465f      	mov	r7, fp
 8014c76:	462b      	mov	r3, r5
 8014c78:	461d      	mov	r5, r3
 8014c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c7e:	2a39      	cmp	r2, #57	; 0x39
 8014c80:	d106      	bne.n	8014c90 <_dtoa_r+0x700>
 8014c82:	9a00      	ldr	r2, [sp, #0]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d1f7      	bne.n	8014c78 <_dtoa_r+0x6e8>
 8014c88:	9900      	ldr	r1, [sp, #0]
 8014c8a:	2230      	movs	r2, #48	; 0x30
 8014c8c:	3701      	adds	r7, #1
 8014c8e:	700a      	strb	r2, [r1, #0]
 8014c90:	781a      	ldrb	r2, [r3, #0]
 8014c92:	3201      	adds	r2, #1
 8014c94:	701a      	strb	r2, [r3, #0]
 8014c96:	e790      	b.n	8014bba <_dtoa_r+0x62a>
 8014c98:	4ba3      	ldr	r3, [pc, #652]	; (8014f28 <_dtoa_r+0x998>)
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f7eb fcd4 	bl	8000648 <__aeabi_dmul>
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	4606      	mov	r6, r0
 8014ca6:	460f      	mov	r7, r1
 8014ca8:	f7eb ff36 	bl	8000b18 <__aeabi_dcmpeq>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	d09e      	beq.n	8014bee <_dtoa_r+0x65e>
 8014cb0:	e7d0      	b.n	8014c54 <_dtoa_r+0x6c4>
 8014cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cb4:	2a00      	cmp	r2, #0
 8014cb6:	f000 80ca 	beq.w	8014e4e <_dtoa_r+0x8be>
 8014cba:	9a07      	ldr	r2, [sp, #28]
 8014cbc:	2a01      	cmp	r2, #1
 8014cbe:	f300 80ad 	bgt.w	8014e1c <_dtoa_r+0x88c>
 8014cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014cc4:	2a00      	cmp	r2, #0
 8014cc6:	f000 80a5 	beq.w	8014e14 <_dtoa_r+0x884>
 8014cca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014cce:	9e08      	ldr	r6, [sp, #32]
 8014cd0:	9d05      	ldr	r5, [sp, #20]
 8014cd2:	9a05      	ldr	r2, [sp, #20]
 8014cd4:	441a      	add	r2, r3
 8014cd6:	9205      	str	r2, [sp, #20]
 8014cd8:	9a06      	ldr	r2, [sp, #24]
 8014cda:	2101      	movs	r1, #1
 8014cdc:	441a      	add	r2, r3
 8014cde:	4620      	mov	r0, r4
 8014ce0:	9206      	str	r2, [sp, #24]
 8014ce2:	f000 fc3d 	bl	8015560 <__i2b>
 8014ce6:	4607      	mov	r7, r0
 8014ce8:	b165      	cbz	r5, 8014d04 <_dtoa_r+0x774>
 8014cea:	9b06      	ldr	r3, [sp, #24]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	dd09      	ble.n	8014d04 <_dtoa_r+0x774>
 8014cf0:	42ab      	cmp	r3, r5
 8014cf2:	9a05      	ldr	r2, [sp, #20]
 8014cf4:	bfa8      	it	ge
 8014cf6:	462b      	movge	r3, r5
 8014cf8:	1ad2      	subs	r2, r2, r3
 8014cfa:	9205      	str	r2, [sp, #20]
 8014cfc:	9a06      	ldr	r2, [sp, #24]
 8014cfe:	1aed      	subs	r5, r5, r3
 8014d00:	1ad3      	subs	r3, r2, r3
 8014d02:	9306      	str	r3, [sp, #24]
 8014d04:	9b08      	ldr	r3, [sp, #32]
 8014d06:	b1f3      	cbz	r3, 8014d46 <_dtoa_r+0x7b6>
 8014d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	f000 80a3 	beq.w	8014e56 <_dtoa_r+0x8c6>
 8014d10:	2e00      	cmp	r6, #0
 8014d12:	dd10      	ble.n	8014d36 <_dtoa_r+0x7a6>
 8014d14:	4639      	mov	r1, r7
 8014d16:	4632      	mov	r2, r6
 8014d18:	4620      	mov	r0, r4
 8014d1a:	f000 fce1 	bl	80156e0 <__pow5mult>
 8014d1e:	4652      	mov	r2, sl
 8014d20:	4601      	mov	r1, r0
 8014d22:	4607      	mov	r7, r0
 8014d24:	4620      	mov	r0, r4
 8014d26:	f000 fc31 	bl	801558c <__multiply>
 8014d2a:	4651      	mov	r1, sl
 8014d2c:	4680      	mov	r8, r0
 8014d2e:	4620      	mov	r0, r4
 8014d30:	f000 fb60 	bl	80153f4 <_Bfree>
 8014d34:	46c2      	mov	sl, r8
 8014d36:	9b08      	ldr	r3, [sp, #32]
 8014d38:	1b9a      	subs	r2, r3, r6
 8014d3a:	d004      	beq.n	8014d46 <_dtoa_r+0x7b6>
 8014d3c:	4651      	mov	r1, sl
 8014d3e:	4620      	mov	r0, r4
 8014d40:	f000 fcce 	bl	80156e0 <__pow5mult>
 8014d44:	4682      	mov	sl, r0
 8014d46:	2101      	movs	r1, #1
 8014d48:	4620      	mov	r0, r4
 8014d4a:	f000 fc09 	bl	8015560 <__i2b>
 8014d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	4606      	mov	r6, r0
 8014d54:	f340 8081 	ble.w	8014e5a <_dtoa_r+0x8ca>
 8014d58:	461a      	mov	r2, r3
 8014d5a:	4601      	mov	r1, r0
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f000 fcbf 	bl	80156e0 <__pow5mult>
 8014d62:	9b07      	ldr	r3, [sp, #28]
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	4606      	mov	r6, r0
 8014d68:	dd7a      	ble.n	8014e60 <_dtoa_r+0x8d0>
 8014d6a:	f04f 0800 	mov.w	r8, #0
 8014d6e:	6933      	ldr	r3, [r6, #16]
 8014d70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014d74:	6918      	ldr	r0, [r3, #16]
 8014d76:	f000 fba5 	bl	80154c4 <__hi0bits>
 8014d7a:	f1c0 0020 	rsb	r0, r0, #32
 8014d7e:	9b06      	ldr	r3, [sp, #24]
 8014d80:	4418      	add	r0, r3
 8014d82:	f010 001f 	ands.w	r0, r0, #31
 8014d86:	f000 8094 	beq.w	8014eb2 <_dtoa_r+0x922>
 8014d8a:	f1c0 0320 	rsb	r3, r0, #32
 8014d8e:	2b04      	cmp	r3, #4
 8014d90:	f340 8085 	ble.w	8014e9e <_dtoa_r+0x90e>
 8014d94:	9b05      	ldr	r3, [sp, #20]
 8014d96:	f1c0 001c 	rsb	r0, r0, #28
 8014d9a:	4403      	add	r3, r0
 8014d9c:	9305      	str	r3, [sp, #20]
 8014d9e:	9b06      	ldr	r3, [sp, #24]
 8014da0:	4403      	add	r3, r0
 8014da2:	4405      	add	r5, r0
 8014da4:	9306      	str	r3, [sp, #24]
 8014da6:	9b05      	ldr	r3, [sp, #20]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	dd05      	ble.n	8014db8 <_dtoa_r+0x828>
 8014dac:	4651      	mov	r1, sl
 8014dae:	461a      	mov	r2, r3
 8014db0:	4620      	mov	r0, r4
 8014db2:	f000 fcef 	bl	8015794 <__lshift>
 8014db6:	4682      	mov	sl, r0
 8014db8:	9b06      	ldr	r3, [sp, #24]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	dd05      	ble.n	8014dca <_dtoa_r+0x83a>
 8014dbe:	4631      	mov	r1, r6
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f000 fce6 	bl	8015794 <__lshift>
 8014dc8:	4606      	mov	r6, r0
 8014dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d072      	beq.n	8014eb6 <_dtoa_r+0x926>
 8014dd0:	4631      	mov	r1, r6
 8014dd2:	4650      	mov	r0, sl
 8014dd4:	f000 fd4a 	bl	801586c <__mcmp>
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	da6c      	bge.n	8014eb6 <_dtoa_r+0x926>
 8014ddc:	2300      	movs	r3, #0
 8014dde:	4651      	mov	r1, sl
 8014de0:	220a      	movs	r2, #10
 8014de2:	4620      	mov	r0, r4
 8014de4:	f000 fb28 	bl	8015438 <__multadd>
 8014de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014dee:	4682      	mov	sl, r0
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	f000 81b0 	beq.w	8015156 <_dtoa_r+0xbc6>
 8014df6:	2300      	movs	r3, #0
 8014df8:	4639      	mov	r1, r7
 8014dfa:	220a      	movs	r2, #10
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	f000 fb1b 	bl	8015438 <__multadd>
 8014e02:	9b01      	ldr	r3, [sp, #4]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	4607      	mov	r7, r0
 8014e08:	f300 8096 	bgt.w	8014f38 <_dtoa_r+0x9a8>
 8014e0c:	9b07      	ldr	r3, [sp, #28]
 8014e0e:	2b02      	cmp	r3, #2
 8014e10:	dc59      	bgt.n	8014ec6 <_dtoa_r+0x936>
 8014e12:	e091      	b.n	8014f38 <_dtoa_r+0x9a8>
 8014e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014e1a:	e758      	b.n	8014cce <_dtoa_r+0x73e>
 8014e1c:	9b04      	ldr	r3, [sp, #16]
 8014e1e:	1e5e      	subs	r6, r3, #1
 8014e20:	9b08      	ldr	r3, [sp, #32]
 8014e22:	42b3      	cmp	r3, r6
 8014e24:	bfbf      	itttt	lt
 8014e26:	9b08      	ldrlt	r3, [sp, #32]
 8014e28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8014e2a:	9608      	strlt	r6, [sp, #32]
 8014e2c:	1af3      	sublt	r3, r6, r3
 8014e2e:	bfb4      	ite	lt
 8014e30:	18d2      	addlt	r2, r2, r3
 8014e32:	1b9e      	subge	r6, r3, r6
 8014e34:	9b04      	ldr	r3, [sp, #16]
 8014e36:	bfbc      	itt	lt
 8014e38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8014e3a:	2600      	movlt	r6, #0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	bfb7      	itett	lt
 8014e40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8014e44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014e48:	1a9d      	sublt	r5, r3, r2
 8014e4a:	2300      	movlt	r3, #0
 8014e4c:	e741      	b.n	8014cd2 <_dtoa_r+0x742>
 8014e4e:	9e08      	ldr	r6, [sp, #32]
 8014e50:	9d05      	ldr	r5, [sp, #20]
 8014e52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014e54:	e748      	b.n	8014ce8 <_dtoa_r+0x758>
 8014e56:	9a08      	ldr	r2, [sp, #32]
 8014e58:	e770      	b.n	8014d3c <_dtoa_r+0x7ac>
 8014e5a:	9b07      	ldr	r3, [sp, #28]
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	dc19      	bgt.n	8014e94 <_dtoa_r+0x904>
 8014e60:	9b02      	ldr	r3, [sp, #8]
 8014e62:	b9bb      	cbnz	r3, 8014e94 <_dtoa_r+0x904>
 8014e64:	9b03      	ldr	r3, [sp, #12]
 8014e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e6a:	b99b      	cbnz	r3, 8014e94 <_dtoa_r+0x904>
 8014e6c:	9b03      	ldr	r3, [sp, #12]
 8014e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e72:	0d1b      	lsrs	r3, r3, #20
 8014e74:	051b      	lsls	r3, r3, #20
 8014e76:	b183      	cbz	r3, 8014e9a <_dtoa_r+0x90a>
 8014e78:	9b05      	ldr	r3, [sp, #20]
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	9305      	str	r3, [sp, #20]
 8014e7e:	9b06      	ldr	r3, [sp, #24]
 8014e80:	3301      	adds	r3, #1
 8014e82:	9306      	str	r3, [sp, #24]
 8014e84:	f04f 0801 	mov.w	r8, #1
 8014e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	f47f af6f 	bne.w	8014d6e <_dtoa_r+0x7de>
 8014e90:	2001      	movs	r0, #1
 8014e92:	e774      	b.n	8014d7e <_dtoa_r+0x7ee>
 8014e94:	f04f 0800 	mov.w	r8, #0
 8014e98:	e7f6      	b.n	8014e88 <_dtoa_r+0x8f8>
 8014e9a:	4698      	mov	r8, r3
 8014e9c:	e7f4      	b.n	8014e88 <_dtoa_r+0x8f8>
 8014e9e:	d082      	beq.n	8014da6 <_dtoa_r+0x816>
 8014ea0:	9a05      	ldr	r2, [sp, #20]
 8014ea2:	331c      	adds	r3, #28
 8014ea4:	441a      	add	r2, r3
 8014ea6:	9205      	str	r2, [sp, #20]
 8014ea8:	9a06      	ldr	r2, [sp, #24]
 8014eaa:	441a      	add	r2, r3
 8014eac:	441d      	add	r5, r3
 8014eae:	9206      	str	r2, [sp, #24]
 8014eb0:	e779      	b.n	8014da6 <_dtoa_r+0x816>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	e7f4      	b.n	8014ea0 <_dtoa_r+0x910>
 8014eb6:	9b04      	ldr	r3, [sp, #16]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	dc37      	bgt.n	8014f2c <_dtoa_r+0x99c>
 8014ebc:	9b07      	ldr	r3, [sp, #28]
 8014ebe:	2b02      	cmp	r3, #2
 8014ec0:	dd34      	ble.n	8014f2c <_dtoa_r+0x99c>
 8014ec2:	9b04      	ldr	r3, [sp, #16]
 8014ec4:	9301      	str	r3, [sp, #4]
 8014ec6:	9b01      	ldr	r3, [sp, #4]
 8014ec8:	b963      	cbnz	r3, 8014ee4 <_dtoa_r+0x954>
 8014eca:	4631      	mov	r1, r6
 8014ecc:	2205      	movs	r2, #5
 8014ece:	4620      	mov	r0, r4
 8014ed0:	f000 fab2 	bl	8015438 <__multadd>
 8014ed4:	4601      	mov	r1, r0
 8014ed6:	4606      	mov	r6, r0
 8014ed8:	4650      	mov	r0, sl
 8014eda:	f000 fcc7 	bl	801586c <__mcmp>
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	f73f adbb 	bgt.w	8014a5a <_dtoa_r+0x4ca>
 8014ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ee6:	9d00      	ldr	r5, [sp, #0]
 8014ee8:	ea6f 0b03 	mvn.w	fp, r3
 8014eec:	f04f 0800 	mov.w	r8, #0
 8014ef0:	4631      	mov	r1, r6
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	f000 fa7e 	bl	80153f4 <_Bfree>
 8014ef8:	2f00      	cmp	r7, #0
 8014efa:	f43f aeab 	beq.w	8014c54 <_dtoa_r+0x6c4>
 8014efe:	f1b8 0f00 	cmp.w	r8, #0
 8014f02:	d005      	beq.n	8014f10 <_dtoa_r+0x980>
 8014f04:	45b8      	cmp	r8, r7
 8014f06:	d003      	beq.n	8014f10 <_dtoa_r+0x980>
 8014f08:	4641      	mov	r1, r8
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	f000 fa72 	bl	80153f4 <_Bfree>
 8014f10:	4639      	mov	r1, r7
 8014f12:	4620      	mov	r0, r4
 8014f14:	f000 fa6e 	bl	80153f4 <_Bfree>
 8014f18:	e69c      	b.n	8014c54 <_dtoa_r+0x6c4>
 8014f1a:	2600      	movs	r6, #0
 8014f1c:	4637      	mov	r7, r6
 8014f1e:	e7e1      	b.n	8014ee4 <_dtoa_r+0x954>
 8014f20:	46bb      	mov	fp, r7
 8014f22:	4637      	mov	r7, r6
 8014f24:	e599      	b.n	8014a5a <_dtoa_r+0x4ca>
 8014f26:	bf00      	nop
 8014f28:	40240000 	.word	0x40240000
 8014f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	f000 80c8 	beq.w	80150c4 <_dtoa_r+0xb34>
 8014f34:	9b04      	ldr	r3, [sp, #16]
 8014f36:	9301      	str	r3, [sp, #4]
 8014f38:	2d00      	cmp	r5, #0
 8014f3a:	dd05      	ble.n	8014f48 <_dtoa_r+0x9b8>
 8014f3c:	4639      	mov	r1, r7
 8014f3e:	462a      	mov	r2, r5
 8014f40:	4620      	mov	r0, r4
 8014f42:	f000 fc27 	bl	8015794 <__lshift>
 8014f46:	4607      	mov	r7, r0
 8014f48:	f1b8 0f00 	cmp.w	r8, #0
 8014f4c:	d05b      	beq.n	8015006 <_dtoa_r+0xa76>
 8014f4e:	6879      	ldr	r1, [r7, #4]
 8014f50:	4620      	mov	r0, r4
 8014f52:	f000 fa0f 	bl	8015374 <_Balloc>
 8014f56:	4605      	mov	r5, r0
 8014f58:	b928      	cbnz	r0, 8014f66 <_dtoa_r+0x9d6>
 8014f5a:	4b83      	ldr	r3, [pc, #524]	; (8015168 <_dtoa_r+0xbd8>)
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014f62:	f7ff bb2e 	b.w	80145c2 <_dtoa_r+0x32>
 8014f66:	693a      	ldr	r2, [r7, #16]
 8014f68:	3202      	adds	r2, #2
 8014f6a:	0092      	lsls	r2, r2, #2
 8014f6c:	f107 010c 	add.w	r1, r7, #12
 8014f70:	300c      	adds	r0, #12
 8014f72:	f000 ffab 	bl	8015ecc <memcpy>
 8014f76:	2201      	movs	r2, #1
 8014f78:	4629      	mov	r1, r5
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	f000 fc0a 	bl	8015794 <__lshift>
 8014f80:	9b00      	ldr	r3, [sp, #0]
 8014f82:	3301      	adds	r3, #1
 8014f84:	9304      	str	r3, [sp, #16]
 8014f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f8a:	4413      	add	r3, r2
 8014f8c:	9308      	str	r3, [sp, #32]
 8014f8e:	9b02      	ldr	r3, [sp, #8]
 8014f90:	f003 0301 	and.w	r3, r3, #1
 8014f94:	46b8      	mov	r8, r7
 8014f96:	9306      	str	r3, [sp, #24]
 8014f98:	4607      	mov	r7, r0
 8014f9a:	9b04      	ldr	r3, [sp, #16]
 8014f9c:	4631      	mov	r1, r6
 8014f9e:	3b01      	subs	r3, #1
 8014fa0:	4650      	mov	r0, sl
 8014fa2:	9301      	str	r3, [sp, #4]
 8014fa4:	f7ff fa69 	bl	801447a <quorem>
 8014fa8:	4641      	mov	r1, r8
 8014faa:	9002      	str	r0, [sp, #8]
 8014fac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014fb0:	4650      	mov	r0, sl
 8014fb2:	f000 fc5b 	bl	801586c <__mcmp>
 8014fb6:	463a      	mov	r2, r7
 8014fb8:	9005      	str	r0, [sp, #20]
 8014fba:	4631      	mov	r1, r6
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	f000 fc71 	bl	80158a4 <__mdiff>
 8014fc2:	68c2      	ldr	r2, [r0, #12]
 8014fc4:	4605      	mov	r5, r0
 8014fc6:	bb02      	cbnz	r2, 801500a <_dtoa_r+0xa7a>
 8014fc8:	4601      	mov	r1, r0
 8014fca:	4650      	mov	r0, sl
 8014fcc:	f000 fc4e 	bl	801586c <__mcmp>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	4629      	mov	r1, r5
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8014fd8:	f000 fa0c 	bl	80153f4 <_Bfree>
 8014fdc:	9b07      	ldr	r3, [sp, #28]
 8014fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fe0:	9d04      	ldr	r5, [sp, #16]
 8014fe2:	ea43 0102 	orr.w	r1, r3, r2
 8014fe6:	9b06      	ldr	r3, [sp, #24]
 8014fe8:	4319      	orrs	r1, r3
 8014fea:	d110      	bne.n	801500e <_dtoa_r+0xa7e>
 8014fec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014ff0:	d029      	beq.n	8015046 <_dtoa_r+0xab6>
 8014ff2:	9b05      	ldr	r3, [sp, #20]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	dd02      	ble.n	8014ffe <_dtoa_r+0xa6e>
 8014ff8:	9b02      	ldr	r3, [sp, #8]
 8014ffa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014ffe:	9b01      	ldr	r3, [sp, #4]
 8015000:	f883 9000 	strb.w	r9, [r3]
 8015004:	e774      	b.n	8014ef0 <_dtoa_r+0x960>
 8015006:	4638      	mov	r0, r7
 8015008:	e7ba      	b.n	8014f80 <_dtoa_r+0x9f0>
 801500a:	2201      	movs	r2, #1
 801500c:	e7e1      	b.n	8014fd2 <_dtoa_r+0xa42>
 801500e:	9b05      	ldr	r3, [sp, #20]
 8015010:	2b00      	cmp	r3, #0
 8015012:	db04      	blt.n	801501e <_dtoa_r+0xa8e>
 8015014:	9907      	ldr	r1, [sp, #28]
 8015016:	430b      	orrs	r3, r1
 8015018:	9906      	ldr	r1, [sp, #24]
 801501a:	430b      	orrs	r3, r1
 801501c:	d120      	bne.n	8015060 <_dtoa_r+0xad0>
 801501e:	2a00      	cmp	r2, #0
 8015020:	dded      	ble.n	8014ffe <_dtoa_r+0xa6e>
 8015022:	4651      	mov	r1, sl
 8015024:	2201      	movs	r2, #1
 8015026:	4620      	mov	r0, r4
 8015028:	f000 fbb4 	bl	8015794 <__lshift>
 801502c:	4631      	mov	r1, r6
 801502e:	4682      	mov	sl, r0
 8015030:	f000 fc1c 	bl	801586c <__mcmp>
 8015034:	2800      	cmp	r0, #0
 8015036:	dc03      	bgt.n	8015040 <_dtoa_r+0xab0>
 8015038:	d1e1      	bne.n	8014ffe <_dtoa_r+0xa6e>
 801503a:	f019 0f01 	tst.w	r9, #1
 801503e:	d0de      	beq.n	8014ffe <_dtoa_r+0xa6e>
 8015040:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015044:	d1d8      	bne.n	8014ff8 <_dtoa_r+0xa68>
 8015046:	9a01      	ldr	r2, [sp, #4]
 8015048:	2339      	movs	r3, #57	; 0x39
 801504a:	7013      	strb	r3, [r2, #0]
 801504c:	462b      	mov	r3, r5
 801504e:	461d      	mov	r5, r3
 8015050:	3b01      	subs	r3, #1
 8015052:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015056:	2a39      	cmp	r2, #57	; 0x39
 8015058:	d06c      	beq.n	8015134 <_dtoa_r+0xba4>
 801505a:	3201      	adds	r2, #1
 801505c:	701a      	strb	r2, [r3, #0]
 801505e:	e747      	b.n	8014ef0 <_dtoa_r+0x960>
 8015060:	2a00      	cmp	r2, #0
 8015062:	dd07      	ble.n	8015074 <_dtoa_r+0xae4>
 8015064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015068:	d0ed      	beq.n	8015046 <_dtoa_r+0xab6>
 801506a:	9a01      	ldr	r2, [sp, #4]
 801506c:	f109 0301 	add.w	r3, r9, #1
 8015070:	7013      	strb	r3, [r2, #0]
 8015072:	e73d      	b.n	8014ef0 <_dtoa_r+0x960>
 8015074:	9b04      	ldr	r3, [sp, #16]
 8015076:	9a08      	ldr	r2, [sp, #32]
 8015078:	f803 9c01 	strb.w	r9, [r3, #-1]
 801507c:	4293      	cmp	r3, r2
 801507e:	d043      	beq.n	8015108 <_dtoa_r+0xb78>
 8015080:	4651      	mov	r1, sl
 8015082:	2300      	movs	r3, #0
 8015084:	220a      	movs	r2, #10
 8015086:	4620      	mov	r0, r4
 8015088:	f000 f9d6 	bl	8015438 <__multadd>
 801508c:	45b8      	cmp	r8, r7
 801508e:	4682      	mov	sl, r0
 8015090:	f04f 0300 	mov.w	r3, #0
 8015094:	f04f 020a 	mov.w	r2, #10
 8015098:	4641      	mov	r1, r8
 801509a:	4620      	mov	r0, r4
 801509c:	d107      	bne.n	80150ae <_dtoa_r+0xb1e>
 801509e:	f000 f9cb 	bl	8015438 <__multadd>
 80150a2:	4680      	mov	r8, r0
 80150a4:	4607      	mov	r7, r0
 80150a6:	9b04      	ldr	r3, [sp, #16]
 80150a8:	3301      	adds	r3, #1
 80150aa:	9304      	str	r3, [sp, #16]
 80150ac:	e775      	b.n	8014f9a <_dtoa_r+0xa0a>
 80150ae:	f000 f9c3 	bl	8015438 <__multadd>
 80150b2:	4639      	mov	r1, r7
 80150b4:	4680      	mov	r8, r0
 80150b6:	2300      	movs	r3, #0
 80150b8:	220a      	movs	r2, #10
 80150ba:	4620      	mov	r0, r4
 80150bc:	f000 f9bc 	bl	8015438 <__multadd>
 80150c0:	4607      	mov	r7, r0
 80150c2:	e7f0      	b.n	80150a6 <_dtoa_r+0xb16>
 80150c4:	9b04      	ldr	r3, [sp, #16]
 80150c6:	9301      	str	r3, [sp, #4]
 80150c8:	9d00      	ldr	r5, [sp, #0]
 80150ca:	4631      	mov	r1, r6
 80150cc:	4650      	mov	r0, sl
 80150ce:	f7ff f9d4 	bl	801447a <quorem>
 80150d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80150d6:	9b00      	ldr	r3, [sp, #0]
 80150d8:	f805 9b01 	strb.w	r9, [r5], #1
 80150dc:	1aea      	subs	r2, r5, r3
 80150de:	9b01      	ldr	r3, [sp, #4]
 80150e0:	4293      	cmp	r3, r2
 80150e2:	dd07      	ble.n	80150f4 <_dtoa_r+0xb64>
 80150e4:	4651      	mov	r1, sl
 80150e6:	2300      	movs	r3, #0
 80150e8:	220a      	movs	r2, #10
 80150ea:	4620      	mov	r0, r4
 80150ec:	f000 f9a4 	bl	8015438 <__multadd>
 80150f0:	4682      	mov	sl, r0
 80150f2:	e7ea      	b.n	80150ca <_dtoa_r+0xb3a>
 80150f4:	9b01      	ldr	r3, [sp, #4]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	bfc8      	it	gt
 80150fa:	461d      	movgt	r5, r3
 80150fc:	9b00      	ldr	r3, [sp, #0]
 80150fe:	bfd8      	it	le
 8015100:	2501      	movle	r5, #1
 8015102:	441d      	add	r5, r3
 8015104:	f04f 0800 	mov.w	r8, #0
 8015108:	4651      	mov	r1, sl
 801510a:	2201      	movs	r2, #1
 801510c:	4620      	mov	r0, r4
 801510e:	f000 fb41 	bl	8015794 <__lshift>
 8015112:	4631      	mov	r1, r6
 8015114:	4682      	mov	sl, r0
 8015116:	f000 fba9 	bl	801586c <__mcmp>
 801511a:	2800      	cmp	r0, #0
 801511c:	dc96      	bgt.n	801504c <_dtoa_r+0xabc>
 801511e:	d102      	bne.n	8015126 <_dtoa_r+0xb96>
 8015120:	f019 0f01 	tst.w	r9, #1
 8015124:	d192      	bne.n	801504c <_dtoa_r+0xabc>
 8015126:	462b      	mov	r3, r5
 8015128:	461d      	mov	r5, r3
 801512a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801512e:	2a30      	cmp	r2, #48	; 0x30
 8015130:	d0fa      	beq.n	8015128 <_dtoa_r+0xb98>
 8015132:	e6dd      	b.n	8014ef0 <_dtoa_r+0x960>
 8015134:	9a00      	ldr	r2, [sp, #0]
 8015136:	429a      	cmp	r2, r3
 8015138:	d189      	bne.n	801504e <_dtoa_r+0xabe>
 801513a:	f10b 0b01 	add.w	fp, fp, #1
 801513e:	2331      	movs	r3, #49	; 0x31
 8015140:	e796      	b.n	8015070 <_dtoa_r+0xae0>
 8015142:	4b0a      	ldr	r3, [pc, #40]	; (801516c <_dtoa_r+0xbdc>)
 8015144:	f7ff ba99 	b.w	801467a <_dtoa_r+0xea>
 8015148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801514a:	2b00      	cmp	r3, #0
 801514c:	f47f aa6d 	bne.w	801462a <_dtoa_r+0x9a>
 8015150:	4b07      	ldr	r3, [pc, #28]	; (8015170 <_dtoa_r+0xbe0>)
 8015152:	f7ff ba92 	b.w	801467a <_dtoa_r+0xea>
 8015156:	9b01      	ldr	r3, [sp, #4]
 8015158:	2b00      	cmp	r3, #0
 801515a:	dcb5      	bgt.n	80150c8 <_dtoa_r+0xb38>
 801515c:	9b07      	ldr	r3, [sp, #28]
 801515e:	2b02      	cmp	r3, #2
 8015160:	f73f aeb1 	bgt.w	8014ec6 <_dtoa_r+0x936>
 8015164:	e7b0      	b.n	80150c8 <_dtoa_r+0xb38>
 8015166:	bf00      	nop
 8015168:	0801c59c 	.word	0x0801c59c
 801516c:	0801c4fc 	.word	0x0801c4fc
 8015170:	0801c520 	.word	0x0801c520

08015174 <_free_r>:
 8015174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015176:	2900      	cmp	r1, #0
 8015178:	d044      	beq.n	8015204 <_free_r+0x90>
 801517a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801517e:	9001      	str	r0, [sp, #4]
 8015180:	2b00      	cmp	r3, #0
 8015182:	f1a1 0404 	sub.w	r4, r1, #4
 8015186:	bfb8      	it	lt
 8015188:	18e4      	addlt	r4, r4, r3
 801518a:	f000 f8e7 	bl	801535c <__malloc_lock>
 801518e:	4a1e      	ldr	r2, [pc, #120]	; (8015208 <_free_r+0x94>)
 8015190:	9801      	ldr	r0, [sp, #4]
 8015192:	6813      	ldr	r3, [r2, #0]
 8015194:	b933      	cbnz	r3, 80151a4 <_free_r+0x30>
 8015196:	6063      	str	r3, [r4, #4]
 8015198:	6014      	str	r4, [r2, #0]
 801519a:	b003      	add	sp, #12
 801519c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80151a0:	f000 b8e2 	b.w	8015368 <__malloc_unlock>
 80151a4:	42a3      	cmp	r3, r4
 80151a6:	d908      	bls.n	80151ba <_free_r+0x46>
 80151a8:	6825      	ldr	r5, [r4, #0]
 80151aa:	1961      	adds	r1, r4, r5
 80151ac:	428b      	cmp	r3, r1
 80151ae:	bf01      	itttt	eq
 80151b0:	6819      	ldreq	r1, [r3, #0]
 80151b2:	685b      	ldreq	r3, [r3, #4]
 80151b4:	1949      	addeq	r1, r1, r5
 80151b6:	6021      	streq	r1, [r4, #0]
 80151b8:	e7ed      	b.n	8015196 <_free_r+0x22>
 80151ba:	461a      	mov	r2, r3
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	b10b      	cbz	r3, 80151c4 <_free_r+0x50>
 80151c0:	42a3      	cmp	r3, r4
 80151c2:	d9fa      	bls.n	80151ba <_free_r+0x46>
 80151c4:	6811      	ldr	r1, [r2, #0]
 80151c6:	1855      	adds	r5, r2, r1
 80151c8:	42a5      	cmp	r5, r4
 80151ca:	d10b      	bne.n	80151e4 <_free_r+0x70>
 80151cc:	6824      	ldr	r4, [r4, #0]
 80151ce:	4421      	add	r1, r4
 80151d0:	1854      	adds	r4, r2, r1
 80151d2:	42a3      	cmp	r3, r4
 80151d4:	6011      	str	r1, [r2, #0]
 80151d6:	d1e0      	bne.n	801519a <_free_r+0x26>
 80151d8:	681c      	ldr	r4, [r3, #0]
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	6053      	str	r3, [r2, #4]
 80151de:	440c      	add	r4, r1
 80151e0:	6014      	str	r4, [r2, #0]
 80151e2:	e7da      	b.n	801519a <_free_r+0x26>
 80151e4:	d902      	bls.n	80151ec <_free_r+0x78>
 80151e6:	230c      	movs	r3, #12
 80151e8:	6003      	str	r3, [r0, #0]
 80151ea:	e7d6      	b.n	801519a <_free_r+0x26>
 80151ec:	6825      	ldr	r5, [r4, #0]
 80151ee:	1961      	adds	r1, r4, r5
 80151f0:	428b      	cmp	r3, r1
 80151f2:	bf04      	itt	eq
 80151f4:	6819      	ldreq	r1, [r3, #0]
 80151f6:	685b      	ldreq	r3, [r3, #4]
 80151f8:	6063      	str	r3, [r4, #4]
 80151fa:	bf04      	itt	eq
 80151fc:	1949      	addeq	r1, r1, r5
 80151fe:	6021      	streq	r1, [r4, #0]
 8015200:	6054      	str	r4, [r2, #4]
 8015202:	e7ca      	b.n	801519a <_free_r+0x26>
 8015204:	b003      	add	sp, #12
 8015206:	bd30      	pop	{r4, r5, pc}
 8015208:	20002eb8 	.word	0x20002eb8

0801520c <malloc>:
 801520c:	4b02      	ldr	r3, [pc, #8]	; (8015218 <malloc+0xc>)
 801520e:	4601      	mov	r1, r0
 8015210:	6818      	ldr	r0, [r3, #0]
 8015212:	f000 b823 	b.w	801525c <_malloc_r>
 8015216:	bf00      	nop
 8015218:	2000036c 	.word	0x2000036c

0801521c <sbrk_aligned>:
 801521c:	b570      	push	{r4, r5, r6, lr}
 801521e:	4e0e      	ldr	r6, [pc, #56]	; (8015258 <sbrk_aligned+0x3c>)
 8015220:	460c      	mov	r4, r1
 8015222:	6831      	ldr	r1, [r6, #0]
 8015224:	4605      	mov	r5, r0
 8015226:	b911      	cbnz	r1, 801522e <sbrk_aligned+0x12>
 8015228:	f000 fe40 	bl	8015eac <_sbrk_r>
 801522c:	6030      	str	r0, [r6, #0]
 801522e:	4621      	mov	r1, r4
 8015230:	4628      	mov	r0, r5
 8015232:	f000 fe3b 	bl	8015eac <_sbrk_r>
 8015236:	1c43      	adds	r3, r0, #1
 8015238:	d00a      	beq.n	8015250 <sbrk_aligned+0x34>
 801523a:	1cc4      	adds	r4, r0, #3
 801523c:	f024 0403 	bic.w	r4, r4, #3
 8015240:	42a0      	cmp	r0, r4
 8015242:	d007      	beq.n	8015254 <sbrk_aligned+0x38>
 8015244:	1a21      	subs	r1, r4, r0
 8015246:	4628      	mov	r0, r5
 8015248:	f000 fe30 	bl	8015eac <_sbrk_r>
 801524c:	3001      	adds	r0, #1
 801524e:	d101      	bne.n	8015254 <sbrk_aligned+0x38>
 8015250:	f04f 34ff 	mov.w	r4, #4294967295
 8015254:	4620      	mov	r0, r4
 8015256:	bd70      	pop	{r4, r5, r6, pc}
 8015258:	20002ebc 	.word	0x20002ebc

0801525c <_malloc_r>:
 801525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015260:	1ccd      	adds	r5, r1, #3
 8015262:	f025 0503 	bic.w	r5, r5, #3
 8015266:	3508      	adds	r5, #8
 8015268:	2d0c      	cmp	r5, #12
 801526a:	bf38      	it	cc
 801526c:	250c      	movcc	r5, #12
 801526e:	2d00      	cmp	r5, #0
 8015270:	4607      	mov	r7, r0
 8015272:	db01      	blt.n	8015278 <_malloc_r+0x1c>
 8015274:	42a9      	cmp	r1, r5
 8015276:	d905      	bls.n	8015284 <_malloc_r+0x28>
 8015278:	230c      	movs	r3, #12
 801527a:	603b      	str	r3, [r7, #0]
 801527c:	2600      	movs	r6, #0
 801527e:	4630      	mov	r0, r6
 8015280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015284:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015358 <_malloc_r+0xfc>
 8015288:	f000 f868 	bl	801535c <__malloc_lock>
 801528c:	f8d8 3000 	ldr.w	r3, [r8]
 8015290:	461c      	mov	r4, r3
 8015292:	bb5c      	cbnz	r4, 80152ec <_malloc_r+0x90>
 8015294:	4629      	mov	r1, r5
 8015296:	4638      	mov	r0, r7
 8015298:	f7ff ffc0 	bl	801521c <sbrk_aligned>
 801529c:	1c43      	adds	r3, r0, #1
 801529e:	4604      	mov	r4, r0
 80152a0:	d155      	bne.n	801534e <_malloc_r+0xf2>
 80152a2:	f8d8 4000 	ldr.w	r4, [r8]
 80152a6:	4626      	mov	r6, r4
 80152a8:	2e00      	cmp	r6, #0
 80152aa:	d145      	bne.n	8015338 <_malloc_r+0xdc>
 80152ac:	2c00      	cmp	r4, #0
 80152ae:	d048      	beq.n	8015342 <_malloc_r+0xe6>
 80152b0:	6823      	ldr	r3, [r4, #0]
 80152b2:	4631      	mov	r1, r6
 80152b4:	4638      	mov	r0, r7
 80152b6:	eb04 0903 	add.w	r9, r4, r3
 80152ba:	f000 fdf7 	bl	8015eac <_sbrk_r>
 80152be:	4581      	cmp	r9, r0
 80152c0:	d13f      	bne.n	8015342 <_malloc_r+0xe6>
 80152c2:	6821      	ldr	r1, [r4, #0]
 80152c4:	1a6d      	subs	r5, r5, r1
 80152c6:	4629      	mov	r1, r5
 80152c8:	4638      	mov	r0, r7
 80152ca:	f7ff ffa7 	bl	801521c <sbrk_aligned>
 80152ce:	3001      	adds	r0, #1
 80152d0:	d037      	beq.n	8015342 <_malloc_r+0xe6>
 80152d2:	6823      	ldr	r3, [r4, #0]
 80152d4:	442b      	add	r3, r5
 80152d6:	6023      	str	r3, [r4, #0]
 80152d8:	f8d8 3000 	ldr.w	r3, [r8]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d038      	beq.n	8015352 <_malloc_r+0xf6>
 80152e0:	685a      	ldr	r2, [r3, #4]
 80152e2:	42a2      	cmp	r2, r4
 80152e4:	d12b      	bne.n	801533e <_malloc_r+0xe2>
 80152e6:	2200      	movs	r2, #0
 80152e8:	605a      	str	r2, [r3, #4]
 80152ea:	e00f      	b.n	801530c <_malloc_r+0xb0>
 80152ec:	6822      	ldr	r2, [r4, #0]
 80152ee:	1b52      	subs	r2, r2, r5
 80152f0:	d41f      	bmi.n	8015332 <_malloc_r+0xd6>
 80152f2:	2a0b      	cmp	r2, #11
 80152f4:	d917      	bls.n	8015326 <_malloc_r+0xca>
 80152f6:	1961      	adds	r1, r4, r5
 80152f8:	42a3      	cmp	r3, r4
 80152fa:	6025      	str	r5, [r4, #0]
 80152fc:	bf18      	it	ne
 80152fe:	6059      	strne	r1, [r3, #4]
 8015300:	6863      	ldr	r3, [r4, #4]
 8015302:	bf08      	it	eq
 8015304:	f8c8 1000 	streq.w	r1, [r8]
 8015308:	5162      	str	r2, [r4, r5]
 801530a:	604b      	str	r3, [r1, #4]
 801530c:	4638      	mov	r0, r7
 801530e:	f104 060b 	add.w	r6, r4, #11
 8015312:	f000 f829 	bl	8015368 <__malloc_unlock>
 8015316:	f026 0607 	bic.w	r6, r6, #7
 801531a:	1d23      	adds	r3, r4, #4
 801531c:	1af2      	subs	r2, r6, r3
 801531e:	d0ae      	beq.n	801527e <_malloc_r+0x22>
 8015320:	1b9b      	subs	r3, r3, r6
 8015322:	50a3      	str	r3, [r4, r2]
 8015324:	e7ab      	b.n	801527e <_malloc_r+0x22>
 8015326:	42a3      	cmp	r3, r4
 8015328:	6862      	ldr	r2, [r4, #4]
 801532a:	d1dd      	bne.n	80152e8 <_malloc_r+0x8c>
 801532c:	f8c8 2000 	str.w	r2, [r8]
 8015330:	e7ec      	b.n	801530c <_malloc_r+0xb0>
 8015332:	4623      	mov	r3, r4
 8015334:	6864      	ldr	r4, [r4, #4]
 8015336:	e7ac      	b.n	8015292 <_malloc_r+0x36>
 8015338:	4634      	mov	r4, r6
 801533a:	6876      	ldr	r6, [r6, #4]
 801533c:	e7b4      	b.n	80152a8 <_malloc_r+0x4c>
 801533e:	4613      	mov	r3, r2
 8015340:	e7cc      	b.n	80152dc <_malloc_r+0x80>
 8015342:	230c      	movs	r3, #12
 8015344:	603b      	str	r3, [r7, #0]
 8015346:	4638      	mov	r0, r7
 8015348:	f000 f80e 	bl	8015368 <__malloc_unlock>
 801534c:	e797      	b.n	801527e <_malloc_r+0x22>
 801534e:	6025      	str	r5, [r4, #0]
 8015350:	e7dc      	b.n	801530c <_malloc_r+0xb0>
 8015352:	605b      	str	r3, [r3, #4]
 8015354:	deff      	udf	#255	; 0xff
 8015356:	bf00      	nop
 8015358:	20002eb8 	.word	0x20002eb8

0801535c <__malloc_lock>:
 801535c:	4801      	ldr	r0, [pc, #4]	; (8015364 <__malloc_lock+0x8>)
 801535e:	f7ff b88a 	b.w	8014476 <__retarget_lock_acquire_recursive>
 8015362:	bf00      	nop
 8015364:	20002eb4 	.word	0x20002eb4

08015368 <__malloc_unlock>:
 8015368:	4801      	ldr	r0, [pc, #4]	; (8015370 <__malloc_unlock+0x8>)
 801536a:	f7ff b885 	b.w	8014478 <__retarget_lock_release_recursive>
 801536e:	bf00      	nop
 8015370:	20002eb4 	.word	0x20002eb4

08015374 <_Balloc>:
 8015374:	b570      	push	{r4, r5, r6, lr}
 8015376:	69c6      	ldr	r6, [r0, #28]
 8015378:	4604      	mov	r4, r0
 801537a:	460d      	mov	r5, r1
 801537c:	b976      	cbnz	r6, 801539c <_Balloc+0x28>
 801537e:	2010      	movs	r0, #16
 8015380:	f7ff ff44 	bl	801520c <malloc>
 8015384:	4602      	mov	r2, r0
 8015386:	61e0      	str	r0, [r4, #28]
 8015388:	b920      	cbnz	r0, 8015394 <_Balloc+0x20>
 801538a:	4b18      	ldr	r3, [pc, #96]	; (80153ec <_Balloc+0x78>)
 801538c:	4818      	ldr	r0, [pc, #96]	; (80153f0 <_Balloc+0x7c>)
 801538e:	216b      	movs	r1, #107	; 0x6b
 8015390:	f000 fdaa 	bl	8015ee8 <__assert_func>
 8015394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015398:	6006      	str	r6, [r0, #0]
 801539a:	60c6      	str	r6, [r0, #12]
 801539c:	69e6      	ldr	r6, [r4, #28]
 801539e:	68f3      	ldr	r3, [r6, #12]
 80153a0:	b183      	cbz	r3, 80153c4 <_Balloc+0x50>
 80153a2:	69e3      	ldr	r3, [r4, #28]
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80153aa:	b9b8      	cbnz	r0, 80153dc <_Balloc+0x68>
 80153ac:	2101      	movs	r1, #1
 80153ae:	fa01 f605 	lsl.w	r6, r1, r5
 80153b2:	1d72      	adds	r2, r6, #5
 80153b4:	0092      	lsls	r2, r2, #2
 80153b6:	4620      	mov	r0, r4
 80153b8:	f000 fdb4 	bl	8015f24 <_calloc_r>
 80153bc:	b160      	cbz	r0, 80153d8 <_Balloc+0x64>
 80153be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80153c2:	e00e      	b.n	80153e2 <_Balloc+0x6e>
 80153c4:	2221      	movs	r2, #33	; 0x21
 80153c6:	2104      	movs	r1, #4
 80153c8:	4620      	mov	r0, r4
 80153ca:	f000 fdab 	bl	8015f24 <_calloc_r>
 80153ce:	69e3      	ldr	r3, [r4, #28]
 80153d0:	60f0      	str	r0, [r6, #12]
 80153d2:	68db      	ldr	r3, [r3, #12]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d1e4      	bne.n	80153a2 <_Balloc+0x2e>
 80153d8:	2000      	movs	r0, #0
 80153da:	bd70      	pop	{r4, r5, r6, pc}
 80153dc:	6802      	ldr	r2, [r0, #0]
 80153de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80153e2:	2300      	movs	r3, #0
 80153e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80153e8:	e7f7      	b.n	80153da <_Balloc+0x66>
 80153ea:	bf00      	nop
 80153ec:	0801c52d 	.word	0x0801c52d
 80153f0:	0801c5ad 	.word	0x0801c5ad

080153f4 <_Bfree>:
 80153f4:	b570      	push	{r4, r5, r6, lr}
 80153f6:	69c6      	ldr	r6, [r0, #28]
 80153f8:	4605      	mov	r5, r0
 80153fa:	460c      	mov	r4, r1
 80153fc:	b976      	cbnz	r6, 801541c <_Bfree+0x28>
 80153fe:	2010      	movs	r0, #16
 8015400:	f7ff ff04 	bl	801520c <malloc>
 8015404:	4602      	mov	r2, r0
 8015406:	61e8      	str	r0, [r5, #28]
 8015408:	b920      	cbnz	r0, 8015414 <_Bfree+0x20>
 801540a:	4b09      	ldr	r3, [pc, #36]	; (8015430 <_Bfree+0x3c>)
 801540c:	4809      	ldr	r0, [pc, #36]	; (8015434 <_Bfree+0x40>)
 801540e:	218f      	movs	r1, #143	; 0x8f
 8015410:	f000 fd6a 	bl	8015ee8 <__assert_func>
 8015414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015418:	6006      	str	r6, [r0, #0]
 801541a:	60c6      	str	r6, [r0, #12]
 801541c:	b13c      	cbz	r4, 801542e <_Bfree+0x3a>
 801541e:	69eb      	ldr	r3, [r5, #28]
 8015420:	6862      	ldr	r2, [r4, #4]
 8015422:	68db      	ldr	r3, [r3, #12]
 8015424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015428:	6021      	str	r1, [r4, #0]
 801542a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801542e:	bd70      	pop	{r4, r5, r6, pc}
 8015430:	0801c52d 	.word	0x0801c52d
 8015434:	0801c5ad 	.word	0x0801c5ad

08015438 <__multadd>:
 8015438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801543c:	690d      	ldr	r5, [r1, #16]
 801543e:	4607      	mov	r7, r0
 8015440:	460c      	mov	r4, r1
 8015442:	461e      	mov	r6, r3
 8015444:	f101 0c14 	add.w	ip, r1, #20
 8015448:	2000      	movs	r0, #0
 801544a:	f8dc 3000 	ldr.w	r3, [ip]
 801544e:	b299      	uxth	r1, r3
 8015450:	fb02 6101 	mla	r1, r2, r1, r6
 8015454:	0c1e      	lsrs	r6, r3, #16
 8015456:	0c0b      	lsrs	r3, r1, #16
 8015458:	fb02 3306 	mla	r3, r2, r6, r3
 801545c:	b289      	uxth	r1, r1
 801545e:	3001      	adds	r0, #1
 8015460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015464:	4285      	cmp	r5, r0
 8015466:	f84c 1b04 	str.w	r1, [ip], #4
 801546a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801546e:	dcec      	bgt.n	801544a <__multadd+0x12>
 8015470:	b30e      	cbz	r6, 80154b6 <__multadd+0x7e>
 8015472:	68a3      	ldr	r3, [r4, #8]
 8015474:	42ab      	cmp	r3, r5
 8015476:	dc19      	bgt.n	80154ac <__multadd+0x74>
 8015478:	6861      	ldr	r1, [r4, #4]
 801547a:	4638      	mov	r0, r7
 801547c:	3101      	adds	r1, #1
 801547e:	f7ff ff79 	bl	8015374 <_Balloc>
 8015482:	4680      	mov	r8, r0
 8015484:	b928      	cbnz	r0, 8015492 <__multadd+0x5a>
 8015486:	4602      	mov	r2, r0
 8015488:	4b0c      	ldr	r3, [pc, #48]	; (80154bc <__multadd+0x84>)
 801548a:	480d      	ldr	r0, [pc, #52]	; (80154c0 <__multadd+0x88>)
 801548c:	21ba      	movs	r1, #186	; 0xba
 801548e:	f000 fd2b 	bl	8015ee8 <__assert_func>
 8015492:	6922      	ldr	r2, [r4, #16]
 8015494:	3202      	adds	r2, #2
 8015496:	f104 010c 	add.w	r1, r4, #12
 801549a:	0092      	lsls	r2, r2, #2
 801549c:	300c      	adds	r0, #12
 801549e:	f000 fd15 	bl	8015ecc <memcpy>
 80154a2:	4621      	mov	r1, r4
 80154a4:	4638      	mov	r0, r7
 80154a6:	f7ff ffa5 	bl	80153f4 <_Bfree>
 80154aa:	4644      	mov	r4, r8
 80154ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80154b0:	3501      	adds	r5, #1
 80154b2:	615e      	str	r6, [r3, #20]
 80154b4:	6125      	str	r5, [r4, #16]
 80154b6:	4620      	mov	r0, r4
 80154b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154bc:	0801c59c 	.word	0x0801c59c
 80154c0:	0801c5ad 	.word	0x0801c5ad

080154c4 <__hi0bits>:
 80154c4:	0c03      	lsrs	r3, r0, #16
 80154c6:	041b      	lsls	r3, r3, #16
 80154c8:	b9d3      	cbnz	r3, 8015500 <__hi0bits+0x3c>
 80154ca:	0400      	lsls	r0, r0, #16
 80154cc:	2310      	movs	r3, #16
 80154ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80154d2:	bf04      	itt	eq
 80154d4:	0200      	lsleq	r0, r0, #8
 80154d6:	3308      	addeq	r3, #8
 80154d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80154dc:	bf04      	itt	eq
 80154de:	0100      	lsleq	r0, r0, #4
 80154e0:	3304      	addeq	r3, #4
 80154e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80154e6:	bf04      	itt	eq
 80154e8:	0080      	lsleq	r0, r0, #2
 80154ea:	3302      	addeq	r3, #2
 80154ec:	2800      	cmp	r0, #0
 80154ee:	db05      	blt.n	80154fc <__hi0bits+0x38>
 80154f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80154f4:	f103 0301 	add.w	r3, r3, #1
 80154f8:	bf08      	it	eq
 80154fa:	2320      	moveq	r3, #32
 80154fc:	4618      	mov	r0, r3
 80154fe:	4770      	bx	lr
 8015500:	2300      	movs	r3, #0
 8015502:	e7e4      	b.n	80154ce <__hi0bits+0xa>

08015504 <__lo0bits>:
 8015504:	6803      	ldr	r3, [r0, #0]
 8015506:	f013 0207 	ands.w	r2, r3, #7
 801550a:	d00c      	beq.n	8015526 <__lo0bits+0x22>
 801550c:	07d9      	lsls	r1, r3, #31
 801550e:	d422      	bmi.n	8015556 <__lo0bits+0x52>
 8015510:	079a      	lsls	r2, r3, #30
 8015512:	bf49      	itett	mi
 8015514:	085b      	lsrmi	r3, r3, #1
 8015516:	089b      	lsrpl	r3, r3, #2
 8015518:	6003      	strmi	r3, [r0, #0]
 801551a:	2201      	movmi	r2, #1
 801551c:	bf5c      	itt	pl
 801551e:	6003      	strpl	r3, [r0, #0]
 8015520:	2202      	movpl	r2, #2
 8015522:	4610      	mov	r0, r2
 8015524:	4770      	bx	lr
 8015526:	b299      	uxth	r1, r3
 8015528:	b909      	cbnz	r1, 801552e <__lo0bits+0x2a>
 801552a:	0c1b      	lsrs	r3, r3, #16
 801552c:	2210      	movs	r2, #16
 801552e:	b2d9      	uxtb	r1, r3
 8015530:	b909      	cbnz	r1, 8015536 <__lo0bits+0x32>
 8015532:	3208      	adds	r2, #8
 8015534:	0a1b      	lsrs	r3, r3, #8
 8015536:	0719      	lsls	r1, r3, #28
 8015538:	bf04      	itt	eq
 801553a:	091b      	lsreq	r3, r3, #4
 801553c:	3204      	addeq	r2, #4
 801553e:	0799      	lsls	r1, r3, #30
 8015540:	bf04      	itt	eq
 8015542:	089b      	lsreq	r3, r3, #2
 8015544:	3202      	addeq	r2, #2
 8015546:	07d9      	lsls	r1, r3, #31
 8015548:	d403      	bmi.n	8015552 <__lo0bits+0x4e>
 801554a:	085b      	lsrs	r3, r3, #1
 801554c:	f102 0201 	add.w	r2, r2, #1
 8015550:	d003      	beq.n	801555a <__lo0bits+0x56>
 8015552:	6003      	str	r3, [r0, #0]
 8015554:	e7e5      	b.n	8015522 <__lo0bits+0x1e>
 8015556:	2200      	movs	r2, #0
 8015558:	e7e3      	b.n	8015522 <__lo0bits+0x1e>
 801555a:	2220      	movs	r2, #32
 801555c:	e7e1      	b.n	8015522 <__lo0bits+0x1e>
	...

08015560 <__i2b>:
 8015560:	b510      	push	{r4, lr}
 8015562:	460c      	mov	r4, r1
 8015564:	2101      	movs	r1, #1
 8015566:	f7ff ff05 	bl	8015374 <_Balloc>
 801556a:	4602      	mov	r2, r0
 801556c:	b928      	cbnz	r0, 801557a <__i2b+0x1a>
 801556e:	4b05      	ldr	r3, [pc, #20]	; (8015584 <__i2b+0x24>)
 8015570:	4805      	ldr	r0, [pc, #20]	; (8015588 <__i2b+0x28>)
 8015572:	f240 1145 	movw	r1, #325	; 0x145
 8015576:	f000 fcb7 	bl	8015ee8 <__assert_func>
 801557a:	2301      	movs	r3, #1
 801557c:	6144      	str	r4, [r0, #20]
 801557e:	6103      	str	r3, [r0, #16]
 8015580:	bd10      	pop	{r4, pc}
 8015582:	bf00      	nop
 8015584:	0801c59c 	.word	0x0801c59c
 8015588:	0801c5ad 	.word	0x0801c5ad

0801558c <__multiply>:
 801558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015590:	4691      	mov	r9, r2
 8015592:	690a      	ldr	r2, [r1, #16]
 8015594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015598:	429a      	cmp	r2, r3
 801559a:	bfb8      	it	lt
 801559c:	460b      	movlt	r3, r1
 801559e:	460c      	mov	r4, r1
 80155a0:	bfbc      	itt	lt
 80155a2:	464c      	movlt	r4, r9
 80155a4:	4699      	movlt	r9, r3
 80155a6:	6927      	ldr	r7, [r4, #16]
 80155a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80155ac:	68a3      	ldr	r3, [r4, #8]
 80155ae:	6861      	ldr	r1, [r4, #4]
 80155b0:	eb07 060a 	add.w	r6, r7, sl
 80155b4:	42b3      	cmp	r3, r6
 80155b6:	b085      	sub	sp, #20
 80155b8:	bfb8      	it	lt
 80155ba:	3101      	addlt	r1, #1
 80155bc:	f7ff feda 	bl	8015374 <_Balloc>
 80155c0:	b930      	cbnz	r0, 80155d0 <__multiply+0x44>
 80155c2:	4602      	mov	r2, r0
 80155c4:	4b44      	ldr	r3, [pc, #272]	; (80156d8 <__multiply+0x14c>)
 80155c6:	4845      	ldr	r0, [pc, #276]	; (80156dc <__multiply+0x150>)
 80155c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80155cc:	f000 fc8c 	bl	8015ee8 <__assert_func>
 80155d0:	f100 0514 	add.w	r5, r0, #20
 80155d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80155d8:	462b      	mov	r3, r5
 80155da:	2200      	movs	r2, #0
 80155dc:	4543      	cmp	r3, r8
 80155de:	d321      	bcc.n	8015624 <__multiply+0x98>
 80155e0:	f104 0314 	add.w	r3, r4, #20
 80155e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80155e8:	f109 0314 	add.w	r3, r9, #20
 80155ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80155f0:	9202      	str	r2, [sp, #8]
 80155f2:	1b3a      	subs	r2, r7, r4
 80155f4:	3a15      	subs	r2, #21
 80155f6:	f022 0203 	bic.w	r2, r2, #3
 80155fa:	3204      	adds	r2, #4
 80155fc:	f104 0115 	add.w	r1, r4, #21
 8015600:	428f      	cmp	r7, r1
 8015602:	bf38      	it	cc
 8015604:	2204      	movcc	r2, #4
 8015606:	9201      	str	r2, [sp, #4]
 8015608:	9a02      	ldr	r2, [sp, #8]
 801560a:	9303      	str	r3, [sp, #12]
 801560c:	429a      	cmp	r2, r3
 801560e:	d80c      	bhi.n	801562a <__multiply+0x9e>
 8015610:	2e00      	cmp	r6, #0
 8015612:	dd03      	ble.n	801561c <__multiply+0x90>
 8015614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015618:	2b00      	cmp	r3, #0
 801561a:	d05b      	beq.n	80156d4 <__multiply+0x148>
 801561c:	6106      	str	r6, [r0, #16]
 801561e:	b005      	add	sp, #20
 8015620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015624:	f843 2b04 	str.w	r2, [r3], #4
 8015628:	e7d8      	b.n	80155dc <__multiply+0x50>
 801562a:	f8b3 a000 	ldrh.w	sl, [r3]
 801562e:	f1ba 0f00 	cmp.w	sl, #0
 8015632:	d024      	beq.n	801567e <__multiply+0xf2>
 8015634:	f104 0e14 	add.w	lr, r4, #20
 8015638:	46a9      	mov	r9, r5
 801563a:	f04f 0c00 	mov.w	ip, #0
 801563e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015642:	f8d9 1000 	ldr.w	r1, [r9]
 8015646:	fa1f fb82 	uxth.w	fp, r2
 801564a:	b289      	uxth	r1, r1
 801564c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015654:	f8d9 2000 	ldr.w	r2, [r9]
 8015658:	4461      	add	r1, ip
 801565a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801565e:	fb0a c20b 	mla	r2, sl, fp, ip
 8015662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015666:	b289      	uxth	r1, r1
 8015668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801566c:	4577      	cmp	r7, lr
 801566e:	f849 1b04 	str.w	r1, [r9], #4
 8015672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015676:	d8e2      	bhi.n	801563e <__multiply+0xb2>
 8015678:	9a01      	ldr	r2, [sp, #4]
 801567a:	f845 c002 	str.w	ip, [r5, r2]
 801567e:	9a03      	ldr	r2, [sp, #12]
 8015680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015684:	3304      	adds	r3, #4
 8015686:	f1b9 0f00 	cmp.w	r9, #0
 801568a:	d021      	beq.n	80156d0 <__multiply+0x144>
 801568c:	6829      	ldr	r1, [r5, #0]
 801568e:	f104 0c14 	add.w	ip, r4, #20
 8015692:	46ae      	mov	lr, r5
 8015694:	f04f 0a00 	mov.w	sl, #0
 8015698:	f8bc b000 	ldrh.w	fp, [ip]
 801569c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80156a0:	fb09 220b 	mla	r2, r9, fp, r2
 80156a4:	4452      	add	r2, sl
 80156a6:	b289      	uxth	r1, r1
 80156a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80156ac:	f84e 1b04 	str.w	r1, [lr], #4
 80156b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80156b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80156b8:	f8be 1000 	ldrh.w	r1, [lr]
 80156bc:	fb09 110a 	mla	r1, r9, sl, r1
 80156c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80156c4:	4567      	cmp	r7, ip
 80156c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80156ca:	d8e5      	bhi.n	8015698 <__multiply+0x10c>
 80156cc:	9a01      	ldr	r2, [sp, #4]
 80156ce:	50a9      	str	r1, [r5, r2]
 80156d0:	3504      	adds	r5, #4
 80156d2:	e799      	b.n	8015608 <__multiply+0x7c>
 80156d4:	3e01      	subs	r6, #1
 80156d6:	e79b      	b.n	8015610 <__multiply+0x84>
 80156d8:	0801c59c 	.word	0x0801c59c
 80156dc:	0801c5ad 	.word	0x0801c5ad

080156e0 <__pow5mult>:
 80156e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156e4:	4615      	mov	r5, r2
 80156e6:	f012 0203 	ands.w	r2, r2, #3
 80156ea:	4606      	mov	r6, r0
 80156ec:	460f      	mov	r7, r1
 80156ee:	d007      	beq.n	8015700 <__pow5mult+0x20>
 80156f0:	4c25      	ldr	r4, [pc, #148]	; (8015788 <__pow5mult+0xa8>)
 80156f2:	3a01      	subs	r2, #1
 80156f4:	2300      	movs	r3, #0
 80156f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80156fa:	f7ff fe9d 	bl	8015438 <__multadd>
 80156fe:	4607      	mov	r7, r0
 8015700:	10ad      	asrs	r5, r5, #2
 8015702:	d03d      	beq.n	8015780 <__pow5mult+0xa0>
 8015704:	69f4      	ldr	r4, [r6, #28]
 8015706:	b97c      	cbnz	r4, 8015728 <__pow5mult+0x48>
 8015708:	2010      	movs	r0, #16
 801570a:	f7ff fd7f 	bl	801520c <malloc>
 801570e:	4602      	mov	r2, r0
 8015710:	61f0      	str	r0, [r6, #28]
 8015712:	b928      	cbnz	r0, 8015720 <__pow5mult+0x40>
 8015714:	4b1d      	ldr	r3, [pc, #116]	; (801578c <__pow5mult+0xac>)
 8015716:	481e      	ldr	r0, [pc, #120]	; (8015790 <__pow5mult+0xb0>)
 8015718:	f240 11b3 	movw	r1, #435	; 0x1b3
 801571c:	f000 fbe4 	bl	8015ee8 <__assert_func>
 8015720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015724:	6004      	str	r4, [r0, #0]
 8015726:	60c4      	str	r4, [r0, #12]
 8015728:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801572c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015730:	b94c      	cbnz	r4, 8015746 <__pow5mult+0x66>
 8015732:	f240 2171 	movw	r1, #625	; 0x271
 8015736:	4630      	mov	r0, r6
 8015738:	f7ff ff12 	bl	8015560 <__i2b>
 801573c:	2300      	movs	r3, #0
 801573e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015742:	4604      	mov	r4, r0
 8015744:	6003      	str	r3, [r0, #0]
 8015746:	f04f 0900 	mov.w	r9, #0
 801574a:	07eb      	lsls	r3, r5, #31
 801574c:	d50a      	bpl.n	8015764 <__pow5mult+0x84>
 801574e:	4639      	mov	r1, r7
 8015750:	4622      	mov	r2, r4
 8015752:	4630      	mov	r0, r6
 8015754:	f7ff ff1a 	bl	801558c <__multiply>
 8015758:	4639      	mov	r1, r7
 801575a:	4680      	mov	r8, r0
 801575c:	4630      	mov	r0, r6
 801575e:	f7ff fe49 	bl	80153f4 <_Bfree>
 8015762:	4647      	mov	r7, r8
 8015764:	106d      	asrs	r5, r5, #1
 8015766:	d00b      	beq.n	8015780 <__pow5mult+0xa0>
 8015768:	6820      	ldr	r0, [r4, #0]
 801576a:	b938      	cbnz	r0, 801577c <__pow5mult+0x9c>
 801576c:	4622      	mov	r2, r4
 801576e:	4621      	mov	r1, r4
 8015770:	4630      	mov	r0, r6
 8015772:	f7ff ff0b 	bl	801558c <__multiply>
 8015776:	6020      	str	r0, [r4, #0]
 8015778:	f8c0 9000 	str.w	r9, [r0]
 801577c:	4604      	mov	r4, r0
 801577e:	e7e4      	b.n	801574a <__pow5mult+0x6a>
 8015780:	4638      	mov	r0, r7
 8015782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015786:	bf00      	nop
 8015788:	0801c6f8 	.word	0x0801c6f8
 801578c:	0801c52d 	.word	0x0801c52d
 8015790:	0801c5ad 	.word	0x0801c5ad

08015794 <__lshift>:
 8015794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015798:	460c      	mov	r4, r1
 801579a:	6849      	ldr	r1, [r1, #4]
 801579c:	6923      	ldr	r3, [r4, #16]
 801579e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80157a2:	68a3      	ldr	r3, [r4, #8]
 80157a4:	4607      	mov	r7, r0
 80157a6:	4691      	mov	r9, r2
 80157a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80157ac:	f108 0601 	add.w	r6, r8, #1
 80157b0:	42b3      	cmp	r3, r6
 80157b2:	db0b      	blt.n	80157cc <__lshift+0x38>
 80157b4:	4638      	mov	r0, r7
 80157b6:	f7ff fddd 	bl	8015374 <_Balloc>
 80157ba:	4605      	mov	r5, r0
 80157bc:	b948      	cbnz	r0, 80157d2 <__lshift+0x3e>
 80157be:	4602      	mov	r2, r0
 80157c0:	4b28      	ldr	r3, [pc, #160]	; (8015864 <__lshift+0xd0>)
 80157c2:	4829      	ldr	r0, [pc, #164]	; (8015868 <__lshift+0xd4>)
 80157c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80157c8:	f000 fb8e 	bl	8015ee8 <__assert_func>
 80157cc:	3101      	adds	r1, #1
 80157ce:	005b      	lsls	r3, r3, #1
 80157d0:	e7ee      	b.n	80157b0 <__lshift+0x1c>
 80157d2:	2300      	movs	r3, #0
 80157d4:	f100 0114 	add.w	r1, r0, #20
 80157d8:	f100 0210 	add.w	r2, r0, #16
 80157dc:	4618      	mov	r0, r3
 80157de:	4553      	cmp	r3, sl
 80157e0:	db33      	blt.n	801584a <__lshift+0xb6>
 80157e2:	6920      	ldr	r0, [r4, #16]
 80157e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80157e8:	f104 0314 	add.w	r3, r4, #20
 80157ec:	f019 091f 	ands.w	r9, r9, #31
 80157f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80157f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80157f8:	d02b      	beq.n	8015852 <__lshift+0xbe>
 80157fa:	f1c9 0e20 	rsb	lr, r9, #32
 80157fe:	468a      	mov	sl, r1
 8015800:	2200      	movs	r2, #0
 8015802:	6818      	ldr	r0, [r3, #0]
 8015804:	fa00 f009 	lsl.w	r0, r0, r9
 8015808:	4310      	orrs	r0, r2
 801580a:	f84a 0b04 	str.w	r0, [sl], #4
 801580e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015812:	459c      	cmp	ip, r3
 8015814:	fa22 f20e 	lsr.w	r2, r2, lr
 8015818:	d8f3      	bhi.n	8015802 <__lshift+0x6e>
 801581a:	ebac 0304 	sub.w	r3, ip, r4
 801581e:	3b15      	subs	r3, #21
 8015820:	f023 0303 	bic.w	r3, r3, #3
 8015824:	3304      	adds	r3, #4
 8015826:	f104 0015 	add.w	r0, r4, #21
 801582a:	4584      	cmp	ip, r0
 801582c:	bf38      	it	cc
 801582e:	2304      	movcc	r3, #4
 8015830:	50ca      	str	r2, [r1, r3]
 8015832:	b10a      	cbz	r2, 8015838 <__lshift+0xa4>
 8015834:	f108 0602 	add.w	r6, r8, #2
 8015838:	3e01      	subs	r6, #1
 801583a:	4638      	mov	r0, r7
 801583c:	612e      	str	r6, [r5, #16]
 801583e:	4621      	mov	r1, r4
 8015840:	f7ff fdd8 	bl	80153f4 <_Bfree>
 8015844:	4628      	mov	r0, r5
 8015846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801584a:	f842 0f04 	str.w	r0, [r2, #4]!
 801584e:	3301      	adds	r3, #1
 8015850:	e7c5      	b.n	80157de <__lshift+0x4a>
 8015852:	3904      	subs	r1, #4
 8015854:	f853 2b04 	ldr.w	r2, [r3], #4
 8015858:	f841 2f04 	str.w	r2, [r1, #4]!
 801585c:	459c      	cmp	ip, r3
 801585e:	d8f9      	bhi.n	8015854 <__lshift+0xc0>
 8015860:	e7ea      	b.n	8015838 <__lshift+0xa4>
 8015862:	bf00      	nop
 8015864:	0801c59c 	.word	0x0801c59c
 8015868:	0801c5ad 	.word	0x0801c5ad

0801586c <__mcmp>:
 801586c:	b530      	push	{r4, r5, lr}
 801586e:	6902      	ldr	r2, [r0, #16]
 8015870:	690c      	ldr	r4, [r1, #16]
 8015872:	1b12      	subs	r2, r2, r4
 8015874:	d10e      	bne.n	8015894 <__mcmp+0x28>
 8015876:	f100 0314 	add.w	r3, r0, #20
 801587a:	3114      	adds	r1, #20
 801587c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015880:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015884:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015888:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801588c:	42a5      	cmp	r5, r4
 801588e:	d003      	beq.n	8015898 <__mcmp+0x2c>
 8015890:	d305      	bcc.n	801589e <__mcmp+0x32>
 8015892:	2201      	movs	r2, #1
 8015894:	4610      	mov	r0, r2
 8015896:	bd30      	pop	{r4, r5, pc}
 8015898:	4283      	cmp	r3, r0
 801589a:	d3f3      	bcc.n	8015884 <__mcmp+0x18>
 801589c:	e7fa      	b.n	8015894 <__mcmp+0x28>
 801589e:	f04f 32ff 	mov.w	r2, #4294967295
 80158a2:	e7f7      	b.n	8015894 <__mcmp+0x28>

080158a4 <__mdiff>:
 80158a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158a8:	460c      	mov	r4, r1
 80158aa:	4606      	mov	r6, r0
 80158ac:	4611      	mov	r1, r2
 80158ae:	4620      	mov	r0, r4
 80158b0:	4690      	mov	r8, r2
 80158b2:	f7ff ffdb 	bl	801586c <__mcmp>
 80158b6:	1e05      	subs	r5, r0, #0
 80158b8:	d110      	bne.n	80158dc <__mdiff+0x38>
 80158ba:	4629      	mov	r1, r5
 80158bc:	4630      	mov	r0, r6
 80158be:	f7ff fd59 	bl	8015374 <_Balloc>
 80158c2:	b930      	cbnz	r0, 80158d2 <__mdiff+0x2e>
 80158c4:	4b3a      	ldr	r3, [pc, #232]	; (80159b0 <__mdiff+0x10c>)
 80158c6:	4602      	mov	r2, r0
 80158c8:	f240 2137 	movw	r1, #567	; 0x237
 80158cc:	4839      	ldr	r0, [pc, #228]	; (80159b4 <__mdiff+0x110>)
 80158ce:	f000 fb0b 	bl	8015ee8 <__assert_func>
 80158d2:	2301      	movs	r3, #1
 80158d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80158d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158dc:	bfa4      	itt	ge
 80158de:	4643      	movge	r3, r8
 80158e0:	46a0      	movge	r8, r4
 80158e2:	4630      	mov	r0, r6
 80158e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80158e8:	bfa6      	itte	ge
 80158ea:	461c      	movge	r4, r3
 80158ec:	2500      	movge	r5, #0
 80158ee:	2501      	movlt	r5, #1
 80158f0:	f7ff fd40 	bl	8015374 <_Balloc>
 80158f4:	b920      	cbnz	r0, 8015900 <__mdiff+0x5c>
 80158f6:	4b2e      	ldr	r3, [pc, #184]	; (80159b0 <__mdiff+0x10c>)
 80158f8:	4602      	mov	r2, r0
 80158fa:	f240 2145 	movw	r1, #581	; 0x245
 80158fe:	e7e5      	b.n	80158cc <__mdiff+0x28>
 8015900:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015904:	6926      	ldr	r6, [r4, #16]
 8015906:	60c5      	str	r5, [r0, #12]
 8015908:	f104 0914 	add.w	r9, r4, #20
 801590c:	f108 0514 	add.w	r5, r8, #20
 8015910:	f100 0e14 	add.w	lr, r0, #20
 8015914:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015918:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801591c:	f108 0210 	add.w	r2, r8, #16
 8015920:	46f2      	mov	sl, lr
 8015922:	2100      	movs	r1, #0
 8015924:	f859 3b04 	ldr.w	r3, [r9], #4
 8015928:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801592c:	fa11 f88b 	uxtah	r8, r1, fp
 8015930:	b299      	uxth	r1, r3
 8015932:	0c1b      	lsrs	r3, r3, #16
 8015934:	eba8 0801 	sub.w	r8, r8, r1
 8015938:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801593c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015940:	fa1f f888 	uxth.w	r8, r8
 8015944:	1419      	asrs	r1, r3, #16
 8015946:	454e      	cmp	r6, r9
 8015948:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801594c:	f84a 3b04 	str.w	r3, [sl], #4
 8015950:	d8e8      	bhi.n	8015924 <__mdiff+0x80>
 8015952:	1b33      	subs	r3, r6, r4
 8015954:	3b15      	subs	r3, #21
 8015956:	f023 0303 	bic.w	r3, r3, #3
 801595a:	3304      	adds	r3, #4
 801595c:	3415      	adds	r4, #21
 801595e:	42a6      	cmp	r6, r4
 8015960:	bf38      	it	cc
 8015962:	2304      	movcc	r3, #4
 8015964:	441d      	add	r5, r3
 8015966:	4473      	add	r3, lr
 8015968:	469e      	mov	lr, r3
 801596a:	462e      	mov	r6, r5
 801596c:	4566      	cmp	r6, ip
 801596e:	d30e      	bcc.n	801598e <__mdiff+0xea>
 8015970:	f10c 0203 	add.w	r2, ip, #3
 8015974:	1b52      	subs	r2, r2, r5
 8015976:	f022 0203 	bic.w	r2, r2, #3
 801597a:	3d03      	subs	r5, #3
 801597c:	45ac      	cmp	ip, r5
 801597e:	bf38      	it	cc
 8015980:	2200      	movcc	r2, #0
 8015982:	4413      	add	r3, r2
 8015984:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015988:	b17a      	cbz	r2, 80159aa <__mdiff+0x106>
 801598a:	6107      	str	r7, [r0, #16]
 801598c:	e7a4      	b.n	80158d8 <__mdiff+0x34>
 801598e:	f856 8b04 	ldr.w	r8, [r6], #4
 8015992:	fa11 f288 	uxtah	r2, r1, r8
 8015996:	1414      	asrs	r4, r2, #16
 8015998:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801599c:	b292      	uxth	r2, r2
 801599e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80159a2:	f84e 2b04 	str.w	r2, [lr], #4
 80159a6:	1421      	asrs	r1, r4, #16
 80159a8:	e7e0      	b.n	801596c <__mdiff+0xc8>
 80159aa:	3f01      	subs	r7, #1
 80159ac:	e7ea      	b.n	8015984 <__mdiff+0xe0>
 80159ae:	bf00      	nop
 80159b0:	0801c59c 	.word	0x0801c59c
 80159b4:	0801c5ad 	.word	0x0801c5ad

080159b8 <__d2b>:
 80159b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80159bc:	460f      	mov	r7, r1
 80159be:	2101      	movs	r1, #1
 80159c0:	ec59 8b10 	vmov	r8, r9, d0
 80159c4:	4616      	mov	r6, r2
 80159c6:	f7ff fcd5 	bl	8015374 <_Balloc>
 80159ca:	4604      	mov	r4, r0
 80159cc:	b930      	cbnz	r0, 80159dc <__d2b+0x24>
 80159ce:	4602      	mov	r2, r0
 80159d0:	4b24      	ldr	r3, [pc, #144]	; (8015a64 <__d2b+0xac>)
 80159d2:	4825      	ldr	r0, [pc, #148]	; (8015a68 <__d2b+0xb0>)
 80159d4:	f240 310f 	movw	r1, #783	; 0x30f
 80159d8:	f000 fa86 	bl	8015ee8 <__assert_func>
 80159dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80159e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80159e4:	bb2d      	cbnz	r5, 8015a32 <__d2b+0x7a>
 80159e6:	9301      	str	r3, [sp, #4]
 80159e8:	f1b8 0300 	subs.w	r3, r8, #0
 80159ec:	d026      	beq.n	8015a3c <__d2b+0x84>
 80159ee:	4668      	mov	r0, sp
 80159f0:	9300      	str	r3, [sp, #0]
 80159f2:	f7ff fd87 	bl	8015504 <__lo0bits>
 80159f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80159fa:	b1e8      	cbz	r0, 8015a38 <__d2b+0x80>
 80159fc:	f1c0 0320 	rsb	r3, r0, #32
 8015a00:	fa02 f303 	lsl.w	r3, r2, r3
 8015a04:	430b      	orrs	r3, r1
 8015a06:	40c2      	lsrs	r2, r0
 8015a08:	6163      	str	r3, [r4, #20]
 8015a0a:	9201      	str	r2, [sp, #4]
 8015a0c:	9b01      	ldr	r3, [sp, #4]
 8015a0e:	61a3      	str	r3, [r4, #24]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	bf14      	ite	ne
 8015a14:	2202      	movne	r2, #2
 8015a16:	2201      	moveq	r2, #1
 8015a18:	6122      	str	r2, [r4, #16]
 8015a1a:	b1bd      	cbz	r5, 8015a4c <__d2b+0x94>
 8015a1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015a20:	4405      	add	r5, r0
 8015a22:	603d      	str	r5, [r7, #0]
 8015a24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015a28:	6030      	str	r0, [r6, #0]
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	b003      	add	sp, #12
 8015a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015a36:	e7d6      	b.n	80159e6 <__d2b+0x2e>
 8015a38:	6161      	str	r1, [r4, #20]
 8015a3a:	e7e7      	b.n	8015a0c <__d2b+0x54>
 8015a3c:	a801      	add	r0, sp, #4
 8015a3e:	f7ff fd61 	bl	8015504 <__lo0bits>
 8015a42:	9b01      	ldr	r3, [sp, #4]
 8015a44:	6163      	str	r3, [r4, #20]
 8015a46:	3020      	adds	r0, #32
 8015a48:	2201      	movs	r2, #1
 8015a4a:	e7e5      	b.n	8015a18 <__d2b+0x60>
 8015a4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015a50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015a54:	6038      	str	r0, [r7, #0]
 8015a56:	6918      	ldr	r0, [r3, #16]
 8015a58:	f7ff fd34 	bl	80154c4 <__hi0bits>
 8015a5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015a60:	e7e2      	b.n	8015a28 <__d2b+0x70>
 8015a62:	bf00      	nop
 8015a64:	0801c59c 	.word	0x0801c59c
 8015a68:	0801c5ad 	.word	0x0801c5ad

08015a6c <__ssputs_r>:
 8015a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a70:	688e      	ldr	r6, [r1, #8]
 8015a72:	461f      	mov	r7, r3
 8015a74:	42be      	cmp	r6, r7
 8015a76:	680b      	ldr	r3, [r1, #0]
 8015a78:	4682      	mov	sl, r0
 8015a7a:	460c      	mov	r4, r1
 8015a7c:	4690      	mov	r8, r2
 8015a7e:	d82c      	bhi.n	8015ada <__ssputs_r+0x6e>
 8015a80:	898a      	ldrh	r2, [r1, #12]
 8015a82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015a86:	d026      	beq.n	8015ad6 <__ssputs_r+0x6a>
 8015a88:	6965      	ldr	r5, [r4, #20]
 8015a8a:	6909      	ldr	r1, [r1, #16]
 8015a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a90:	eba3 0901 	sub.w	r9, r3, r1
 8015a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015a98:	1c7b      	adds	r3, r7, #1
 8015a9a:	444b      	add	r3, r9
 8015a9c:	106d      	asrs	r5, r5, #1
 8015a9e:	429d      	cmp	r5, r3
 8015aa0:	bf38      	it	cc
 8015aa2:	461d      	movcc	r5, r3
 8015aa4:	0553      	lsls	r3, r2, #21
 8015aa6:	d527      	bpl.n	8015af8 <__ssputs_r+0x8c>
 8015aa8:	4629      	mov	r1, r5
 8015aaa:	f7ff fbd7 	bl	801525c <_malloc_r>
 8015aae:	4606      	mov	r6, r0
 8015ab0:	b360      	cbz	r0, 8015b0c <__ssputs_r+0xa0>
 8015ab2:	6921      	ldr	r1, [r4, #16]
 8015ab4:	464a      	mov	r2, r9
 8015ab6:	f000 fa09 	bl	8015ecc <memcpy>
 8015aba:	89a3      	ldrh	r3, [r4, #12]
 8015abc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ac4:	81a3      	strh	r3, [r4, #12]
 8015ac6:	6126      	str	r6, [r4, #16]
 8015ac8:	6165      	str	r5, [r4, #20]
 8015aca:	444e      	add	r6, r9
 8015acc:	eba5 0509 	sub.w	r5, r5, r9
 8015ad0:	6026      	str	r6, [r4, #0]
 8015ad2:	60a5      	str	r5, [r4, #8]
 8015ad4:	463e      	mov	r6, r7
 8015ad6:	42be      	cmp	r6, r7
 8015ad8:	d900      	bls.n	8015adc <__ssputs_r+0x70>
 8015ada:	463e      	mov	r6, r7
 8015adc:	6820      	ldr	r0, [r4, #0]
 8015ade:	4632      	mov	r2, r6
 8015ae0:	4641      	mov	r1, r8
 8015ae2:	f000 f9c9 	bl	8015e78 <memmove>
 8015ae6:	68a3      	ldr	r3, [r4, #8]
 8015ae8:	1b9b      	subs	r3, r3, r6
 8015aea:	60a3      	str	r3, [r4, #8]
 8015aec:	6823      	ldr	r3, [r4, #0]
 8015aee:	4433      	add	r3, r6
 8015af0:	6023      	str	r3, [r4, #0]
 8015af2:	2000      	movs	r0, #0
 8015af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015af8:	462a      	mov	r2, r5
 8015afa:	f000 fa3b 	bl	8015f74 <_realloc_r>
 8015afe:	4606      	mov	r6, r0
 8015b00:	2800      	cmp	r0, #0
 8015b02:	d1e0      	bne.n	8015ac6 <__ssputs_r+0x5a>
 8015b04:	6921      	ldr	r1, [r4, #16]
 8015b06:	4650      	mov	r0, sl
 8015b08:	f7ff fb34 	bl	8015174 <_free_r>
 8015b0c:	230c      	movs	r3, #12
 8015b0e:	f8ca 3000 	str.w	r3, [sl]
 8015b12:	89a3      	ldrh	r3, [r4, #12]
 8015b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b18:	81a3      	strh	r3, [r4, #12]
 8015b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015b1e:	e7e9      	b.n	8015af4 <__ssputs_r+0x88>

08015b20 <_svfiprintf_r>:
 8015b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b24:	4698      	mov	r8, r3
 8015b26:	898b      	ldrh	r3, [r1, #12]
 8015b28:	061b      	lsls	r3, r3, #24
 8015b2a:	b09d      	sub	sp, #116	; 0x74
 8015b2c:	4607      	mov	r7, r0
 8015b2e:	460d      	mov	r5, r1
 8015b30:	4614      	mov	r4, r2
 8015b32:	d50e      	bpl.n	8015b52 <_svfiprintf_r+0x32>
 8015b34:	690b      	ldr	r3, [r1, #16]
 8015b36:	b963      	cbnz	r3, 8015b52 <_svfiprintf_r+0x32>
 8015b38:	2140      	movs	r1, #64	; 0x40
 8015b3a:	f7ff fb8f 	bl	801525c <_malloc_r>
 8015b3e:	6028      	str	r0, [r5, #0]
 8015b40:	6128      	str	r0, [r5, #16]
 8015b42:	b920      	cbnz	r0, 8015b4e <_svfiprintf_r+0x2e>
 8015b44:	230c      	movs	r3, #12
 8015b46:	603b      	str	r3, [r7, #0]
 8015b48:	f04f 30ff 	mov.w	r0, #4294967295
 8015b4c:	e0d0      	b.n	8015cf0 <_svfiprintf_r+0x1d0>
 8015b4e:	2340      	movs	r3, #64	; 0x40
 8015b50:	616b      	str	r3, [r5, #20]
 8015b52:	2300      	movs	r3, #0
 8015b54:	9309      	str	r3, [sp, #36]	; 0x24
 8015b56:	2320      	movs	r3, #32
 8015b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b60:	2330      	movs	r3, #48	; 0x30
 8015b62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015d08 <_svfiprintf_r+0x1e8>
 8015b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b6a:	f04f 0901 	mov.w	r9, #1
 8015b6e:	4623      	mov	r3, r4
 8015b70:	469a      	mov	sl, r3
 8015b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b76:	b10a      	cbz	r2, 8015b7c <_svfiprintf_r+0x5c>
 8015b78:	2a25      	cmp	r2, #37	; 0x25
 8015b7a:	d1f9      	bne.n	8015b70 <_svfiprintf_r+0x50>
 8015b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8015b80:	d00b      	beq.n	8015b9a <_svfiprintf_r+0x7a>
 8015b82:	465b      	mov	r3, fp
 8015b84:	4622      	mov	r2, r4
 8015b86:	4629      	mov	r1, r5
 8015b88:	4638      	mov	r0, r7
 8015b8a:	f7ff ff6f 	bl	8015a6c <__ssputs_r>
 8015b8e:	3001      	adds	r0, #1
 8015b90:	f000 80a9 	beq.w	8015ce6 <_svfiprintf_r+0x1c6>
 8015b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b96:	445a      	add	r2, fp
 8015b98:	9209      	str	r2, [sp, #36]	; 0x24
 8015b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	f000 80a1 	beq.w	8015ce6 <_svfiprintf_r+0x1c6>
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8015baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015bae:	f10a 0a01 	add.w	sl, sl, #1
 8015bb2:	9304      	str	r3, [sp, #16]
 8015bb4:	9307      	str	r3, [sp, #28]
 8015bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015bba:	931a      	str	r3, [sp, #104]	; 0x68
 8015bbc:	4654      	mov	r4, sl
 8015bbe:	2205      	movs	r2, #5
 8015bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bc4:	4850      	ldr	r0, [pc, #320]	; (8015d08 <_svfiprintf_r+0x1e8>)
 8015bc6:	f7ea fb2b 	bl	8000220 <memchr>
 8015bca:	9a04      	ldr	r2, [sp, #16]
 8015bcc:	b9d8      	cbnz	r0, 8015c06 <_svfiprintf_r+0xe6>
 8015bce:	06d0      	lsls	r0, r2, #27
 8015bd0:	bf44      	itt	mi
 8015bd2:	2320      	movmi	r3, #32
 8015bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bd8:	0711      	lsls	r1, r2, #28
 8015bda:	bf44      	itt	mi
 8015bdc:	232b      	movmi	r3, #43	; 0x2b
 8015bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015be2:	f89a 3000 	ldrb.w	r3, [sl]
 8015be6:	2b2a      	cmp	r3, #42	; 0x2a
 8015be8:	d015      	beq.n	8015c16 <_svfiprintf_r+0xf6>
 8015bea:	9a07      	ldr	r2, [sp, #28]
 8015bec:	4654      	mov	r4, sl
 8015bee:	2000      	movs	r0, #0
 8015bf0:	f04f 0c0a 	mov.w	ip, #10
 8015bf4:	4621      	mov	r1, r4
 8015bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015bfa:	3b30      	subs	r3, #48	; 0x30
 8015bfc:	2b09      	cmp	r3, #9
 8015bfe:	d94d      	bls.n	8015c9c <_svfiprintf_r+0x17c>
 8015c00:	b1b0      	cbz	r0, 8015c30 <_svfiprintf_r+0x110>
 8015c02:	9207      	str	r2, [sp, #28]
 8015c04:	e014      	b.n	8015c30 <_svfiprintf_r+0x110>
 8015c06:	eba0 0308 	sub.w	r3, r0, r8
 8015c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8015c0e:	4313      	orrs	r3, r2
 8015c10:	9304      	str	r3, [sp, #16]
 8015c12:	46a2      	mov	sl, r4
 8015c14:	e7d2      	b.n	8015bbc <_svfiprintf_r+0x9c>
 8015c16:	9b03      	ldr	r3, [sp, #12]
 8015c18:	1d19      	adds	r1, r3, #4
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	9103      	str	r1, [sp, #12]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	bfbb      	ittet	lt
 8015c22:	425b      	neglt	r3, r3
 8015c24:	f042 0202 	orrlt.w	r2, r2, #2
 8015c28:	9307      	strge	r3, [sp, #28]
 8015c2a:	9307      	strlt	r3, [sp, #28]
 8015c2c:	bfb8      	it	lt
 8015c2e:	9204      	strlt	r2, [sp, #16]
 8015c30:	7823      	ldrb	r3, [r4, #0]
 8015c32:	2b2e      	cmp	r3, #46	; 0x2e
 8015c34:	d10c      	bne.n	8015c50 <_svfiprintf_r+0x130>
 8015c36:	7863      	ldrb	r3, [r4, #1]
 8015c38:	2b2a      	cmp	r3, #42	; 0x2a
 8015c3a:	d134      	bne.n	8015ca6 <_svfiprintf_r+0x186>
 8015c3c:	9b03      	ldr	r3, [sp, #12]
 8015c3e:	1d1a      	adds	r2, r3, #4
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	9203      	str	r2, [sp, #12]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	bfb8      	it	lt
 8015c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c4c:	3402      	adds	r4, #2
 8015c4e:	9305      	str	r3, [sp, #20]
 8015c50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015d18 <_svfiprintf_r+0x1f8>
 8015c54:	7821      	ldrb	r1, [r4, #0]
 8015c56:	2203      	movs	r2, #3
 8015c58:	4650      	mov	r0, sl
 8015c5a:	f7ea fae1 	bl	8000220 <memchr>
 8015c5e:	b138      	cbz	r0, 8015c70 <_svfiprintf_r+0x150>
 8015c60:	9b04      	ldr	r3, [sp, #16]
 8015c62:	eba0 000a 	sub.w	r0, r0, sl
 8015c66:	2240      	movs	r2, #64	; 0x40
 8015c68:	4082      	lsls	r2, r0
 8015c6a:	4313      	orrs	r3, r2
 8015c6c:	3401      	adds	r4, #1
 8015c6e:	9304      	str	r3, [sp, #16]
 8015c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c74:	4825      	ldr	r0, [pc, #148]	; (8015d0c <_svfiprintf_r+0x1ec>)
 8015c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c7a:	2206      	movs	r2, #6
 8015c7c:	f7ea fad0 	bl	8000220 <memchr>
 8015c80:	2800      	cmp	r0, #0
 8015c82:	d038      	beq.n	8015cf6 <_svfiprintf_r+0x1d6>
 8015c84:	4b22      	ldr	r3, [pc, #136]	; (8015d10 <_svfiprintf_r+0x1f0>)
 8015c86:	bb1b      	cbnz	r3, 8015cd0 <_svfiprintf_r+0x1b0>
 8015c88:	9b03      	ldr	r3, [sp, #12]
 8015c8a:	3307      	adds	r3, #7
 8015c8c:	f023 0307 	bic.w	r3, r3, #7
 8015c90:	3308      	adds	r3, #8
 8015c92:	9303      	str	r3, [sp, #12]
 8015c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c96:	4433      	add	r3, r6
 8015c98:	9309      	str	r3, [sp, #36]	; 0x24
 8015c9a:	e768      	b.n	8015b6e <_svfiprintf_r+0x4e>
 8015c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ca0:	460c      	mov	r4, r1
 8015ca2:	2001      	movs	r0, #1
 8015ca4:	e7a6      	b.n	8015bf4 <_svfiprintf_r+0xd4>
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	3401      	adds	r4, #1
 8015caa:	9305      	str	r3, [sp, #20]
 8015cac:	4619      	mov	r1, r3
 8015cae:	f04f 0c0a 	mov.w	ip, #10
 8015cb2:	4620      	mov	r0, r4
 8015cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cb8:	3a30      	subs	r2, #48	; 0x30
 8015cba:	2a09      	cmp	r2, #9
 8015cbc:	d903      	bls.n	8015cc6 <_svfiprintf_r+0x1a6>
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d0c6      	beq.n	8015c50 <_svfiprintf_r+0x130>
 8015cc2:	9105      	str	r1, [sp, #20]
 8015cc4:	e7c4      	b.n	8015c50 <_svfiprintf_r+0x130>
 8015cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cca:	4604      	mov	r4, r0
 8015ccc:	2301      	movs	r3, #1
 8015cce:	e7f0      	b.n	8015cb2 <_svfiprintf_r+0x192>
 8015cd0:	ab03      	add	r3, sp, #12
 8015cd2:	9300      	str	r3, [sp, #0]
 8015cd4:	462a      	mov	r2, r5
 8015cd6:	4b0f      	ldr	r3, [pc, #60]	; (8015d14 <_svfiprintf_r+0x1f4>)
 8015cd8:	a904      	add	r1, sp, #16
 8015cda:	4638      	mov	r0, r7
 8015cdc:	f7fd fe62 	bl	80139a4 <_printf_float>
 8015ce0:	1c42      	adds	r2, r0, #1
 8015ce2:	4606      	mov	r6, r0
 8015ce4:	d1d6      	bne.n	8015c94 <_svfiprintf_r+0x174>
 8015ce6:	89ab      	ldrh	r3, [r5, #12]
 8015ce8:	065b      	lsls	r3, r3, #25
 8015cea:	f53f af2d 	bmi.w	8015b48 <_svfiprintf_r+0x28>
 8015cee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cf0:	b01d      	add	sp, #116	; 0x74
 8015cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf6:	ab03      	add	r3, sp, #12
 8015cf8:	9300      	str	r3, [sp, #0]
 8015cfa:	462a      	mov	r2, r5
 8015cfc:	4b05      	ldr	r3, [pc, #20]	; (8015d14 <_svfiprintf_r+0x1f4>)
 8015cfe:	a904      	add	r1, sp, #16
 8015d00:	4638      	mov	r0, r7
 8015d02:	f7fe f8f3 	bl	8013eec <_printf_i>
 8015d06:	e7eb      	b.n	8015ce0 <_svfiprintf_r+0x1c0>
 8015d08:	0801c704 	.word	0x0801c704
 8015d0c:	0801c70e 	.word	0x0801c70e
 8015d10:	080139a5 	.word	0x080139a5
 8015d14:	08015a6d 	.word	0x08015a6d
 8015d18:	0801c70a 	.word	0x0801c70a

08015d1c <__sflush_r>:
 8015d1c:	898a      	ldrh	r2, [r1, #12]
 8015d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d22:	4605      	mov	r5, r0
 8015d24:	0710      	lsls	r0, r2, #28
 8015d26:	460c      	mov	r4, r1
 8015d28:	d458      	bmi.n	8015ddc <__sflush_r+0xc0>
 8015d2a:	684b      	ldr	r3, [r1, #4]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	dc05      	bgt.n	8015d3c <__sflush_r+0x20>
 8015d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	dc02      	bgt.n	8015d3c <__sflush_r+0x20>
 8015d36:	2000      	movs	r0, #0
 8015d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d3e:	2e00      	cmp	r6, #0
 8015d40:	d0f9      	beq.n	8015d36 <__sflush_r+0x1a>
 8015d42:	2300      	movs	r3, #0
 8015d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d48:	682f      	ldr	r7, [r5, #0]
 8015d4a:	6a21      	ldr	r1, [r4, #32]
 8015d4c:	602b      	str	r3, [r5, #0]
 8015d4e:	d032      	beq.n	8015db6 <__sflush_r+0x9a>
 8015d50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d52:	89a3      	ldrh	r3, [r4, #12]
 8015d54:	075a      	lsls	r2, r3, #29
 8015d56:	d505      	bpl.n	8015d64 <__sflush_r+0x48>
 8015d58:	6863      	ldr	r3, [r4, #4]
 8015d5a:	1ac0      	subs	r0, r0, r3
 8015d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d5e:	b10b      	cbz	r3, 8015d64 <__sflush_r+0x48>
 8015d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d62:	1ac0      	subs	r0, r0, r3
 8015d64:	2300      	movs	r3, #0
 8015d66:	4602      	mov	r2, r0
 8015d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d6a:	6a21      	ldr	r1, [r4, #32]
 8015d6c:	4628      	mov	r0, r5
 8015d6e:	47b0      	blx	r6
 8015d70:	1c43      	adds	r3, r0, #1
 8015d72:	89a3      	ldrh	r3, [r4, #12]
 8015d74:	d106      	bne.n	8015d84 <__sflush_r+0x68>
 8015d76:	6829      	ldr	r1, [r5, #0]
 8015d78:	291d      	cmp	r1, #29
 8015d7a:	d82b      	bhi.n	8015dd4 <__sflush_r+0xb8>
 8015d7c:	4a29      	ldr	r2, [pc, #164]	; (8015e24 <__sflush_r+0x108>)
 8015d7e:	410a      	asrs	r2, r1
 8015d80:	07d6      	lsls	r6, r2, #31
 8015d82:	d427      	bmi.n	8015dd4 <__sflush_r+0xb8>
 8015d84:	2200      	movs	r2, #0
 8015d86:	6062      	str	r2, [r4, #4]
 8015d88:	04d9      	lsls	r1, r3, #19
 8015d8a:	6922      	ldr	r2, [r4, #16]
 8015d8c:	6022      	str	r2, [r4, #0]
 8015d8e:	d504      	bpl.n	8015d9a <__sflush_r+0x7e>
 8015d90:	1c42      	adds	r2, r0, #1
 8015d92:	d101      	bne.n	8015d98 <__sflush_r+0x7c>
 8015d94:	682b      	ldr	r3, [r5, #0]
 8015d96:	b903      	cbnz	r3, 8015d9a <__sflush_r+0x7e>
 8015d98:	6560      	str	r0, [r4, #84]	; 0x54
 8015d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d9c:	602f      	str	r7, [r5, #0]
 8015d9e:	2900      	cmp	r1, #0
 8015da0:	d0c9      	beq.n	8015d36 <__sflush_r+0x1a>
 8015da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015da6:	4299      	cmp	r1, r3
 8015da8:	d002      	beq.n	8015db0 <__sflush_r+0x94>
 8015daa:	4628      	mov	r0, r5
 8015dac:	f7ff f9e2 	bl	8015174 <_free_r>
 8015db0:	2000      	movs	r0, #0
 8015db2:	6360      	str	r0, [r4, #52]	; 0x34
 8015db4:	e7c0      	b.n	8015d38 <__sflush_r+0x1c>
 8015db6:	2301      	movs	r3, #1
 8015db8:	4628      	mov	r0, r5
 8015dba:	47b0      	blx	r6
 8015dbc:	1c41      	adds	r1, r0, #1
 8015dbe:	d1c8      	bne.n	8015d52 <__sflush_r+0x36>
 8015dc0:	682b      	ldr	r3, [r5, #0]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d0c5      	beq.n	8015d52 <__sflush_r+0x36>
 8015dc6:	2b1d      	cmp	r3, #29
 8015dc8:	d001      	beq.n	8015dce <__sflush_r+0xb2>
 8015dca:	2b16      	cmp	r3, #22
 8015dcc:	d101      	bne.n	8015dd2 <__sflush_r+0xb6>
 8015dce:	602f      	str	r7, [r5, #0]
 8015dd0:	e7b1      	b.n	8015d36 <__sflush_r+0x1a>
 8015dd2:	89a3      	ldrh	r3, [r4, #12]
 8015dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dd8:	81a3      	strh	r3, [r4, #12]
 8015dda:	e7ad      	b.n	8015d38 <__sflush_r+0x1c>
 8015ddc:	690f      	ldr	r7, [r1, #16]
 8015dde:	2f00      	cmp	r7, #0
 8015de0:	d0a9      	beq.n	8015d36 <__sflush_r+0x1a>
 8015de2:	0793      	lsls	r3, r2, #30
 8015de4:	680e      	ldr	r6, [r1, #0]
 8015de6:	bf08      	it	eq
 8015de8:	694b      	ldreq	r3, [r1, #20]
 8015dea:	600f      	str	r7, [r1, #0]
 8015dec:	bf18      	it	ne
 8015dee:	2300      	movne	r3, #0
 8015df0:	eba6 0807 	sub.w	r8, r6, r7
 8015df4:	608b      	str	r3, [r1, #8]
 8015df6:	f1b8 0f00 	cmp.w	r8, #0
 8015dfa:	dd9c      	ble.n	8015d36 <__sflush_r+0x1a>
 8015dfc:	6a21      	ldr	r1, [r4, #32]
 8015dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e00:	4643      	mov	r3, r8
 8015e02:	463a      	mov	r2, r7
 8015e04:	4628      	mov	r0, r5
 8015e06:	47b0      	blx	r6
 8015e08:	2800      	cmp	r0, #0
 8015e0a:	dc06      	bgt.n	8015e1a <__sflush_r+0xfe>
 8015e0c:	89a3      	ldrh	r3, [r4, #12]
 8015e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e12:	81a3      	strh	r3, [r4, #12]
 8015e14:	f04f 30ff 	mov.w	r0, #4294967295
 8015e18:	e78e      	b.n	8015d38 <__sflush_r+0x1c>
 8015e1a:	4407      	add	r7, r0
 8015e1c:	eba8 0800 	sub.w	r8, r8, r0
 8015e20:	e7e9      	b.n	8015df6 <__sflush_r+0xda>
 8015e22:	bf00      	nop
 8015e24:	dfbffffe 	.word	0xdfbffffe

08015e28 <_fflush_r>:
 8015e28:	b538      	push	{r3, r4, r5, lr}
 8015e2a:	690b      	ldr	r3, [r1, #16]
 8015e2c:	4605      	mov	r5, r0
 8015e2e:	460c      	mov	r4, r1
 8015e30:	b913      	cbnz	r3, 8015e38 <_fflush_r+0x10>
 8015e32:	2500      	movs	r5, #0
 8015e34:	4628      	mov	r0, r5
 8015e36:	bd38      	pop	{r3, r4, r5, pc}
 8015e38:	b118      	cbz	r0, 8015e42 <_fflush_r+0x1a>
 8015e3a:	6a03      	ldr	r3, [r0, #32]
 8015e3c:	b90b      	cbnz	r3, 8015e42 <_fflush_r+0x1a>
 8015e3e:	f7fe fa03 	bl	8014248 <__sinit>
 8015e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d0f3      	beq.n	8015e32 <_fflush_r+0xa>
 8015e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015e4c:	07d0      	lsls	r0, r2, #31
 8015e4e:	d404      	bmi.n	8015e5a <_fflush_r+0x32>
 8015e50:	0599      	lsls	r1, r3, #22
 8015e52:	d402      	bmi.n	8015e5a <_fflush_r+0x32>
 8015e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e56:	f7fe fb0e 	bl	8014476 <__retarget_lock_acquire_recursive>
 8015e5a:	4628      	mov	r0, r5
 8015e5c:	4621      	mov	r1, r4
 8015e5e:	f7ff ff5d 	bl	8015d1c <__sflush_r>
 8015e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e64:	07da      	lsls	r2, r3, #31
 8015e66:	4605      	mov	r5, r0
 8015e68:	d4e4      	bmi.n	8015e34 <_fflush_r+0xc>
 8015e6a:	89a3      	ldrh	r3, [r4, #12]
 8015e6c:	059b      	lsls	r3, r3, #22
 8015e6e:	d4e1      	bmi.n	8015e34 <_fflush_r+0xc>
 8015e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e72:	f7fe fb01 	bl	8014478 <__retarget_lock_release_recursive>
 8015e76:	e7dd      	b.n	8015e34 <_fflush_r+0xc>

08015e78 <memmove>:
 8015e78:	4288      	cmp	r0, r1
 8015e7a:	b510      	push	{r4, lr}
 8015e7c:	eb01 0402 	add.w	r4, r1, r2
 8015e80:	d902      	bls.n	8015e88 <memmove+0x10>
 8015e82:	4284      	cmp	r4, r0
 8015e84:	4623      	mov	r3, r4
 8015e86:	d807      	bhi.n	8015e98 <memmove+0x20>
 8015e88:	1e43      	subs	r3, r0, #1
 8015e8a:	42a1      	cmp	r1, r4
 8015e8c:	d008      	beq.n	8015ea0 <memmove+0x28>
 8015e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015e96:	e7f8      	b.n	8015e8a <memmove+0x12>
 8015e98:	4402      	add	r2, r0
 8015e9a:	4601      	mov	r1, r0
 8015e9c:	428a      	cmp	r2, r1
 8015e9e:	d100      	bne.n	8015ea2 <memmove+0x2a>
 8015ea0:	bd10      	pop	{r4, pc}
 8015ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015eaa:	e7f7      	b.n	8015e9c <memmove+0x24>

08015eac <_sbrk_r>:
 8015eac:	b538      	push	{r3, r4, r5, lr}
 8015eae:	4d06      	ldr	r5, [pc, #24]	; (8015ec8 <_sbrk_r+0x1c>)
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	4604      	mov	r4, r0
 8015eb4:	4608      	mov	r0, r1
 8015eb6:	602b      	str	r3, [r5, #0]
 8015eb8:	f7ee fa28 	bl	800430c <_sbrk>
 8015ebc:	1c43      	adds	r3, r0, #1
 8015ebe:	d102      	bne.n	8015ec6 <_sbrk_r+0x1a>
 8015ec0:	682b      	ldr	r3, [r5, #0]
 8015ec2:	b103      	cbz	r3, 8015ec6 <_sbrk_r+0x1a>
 8015ec4:	6023      	str	r3, [r4, #0]
 8015ec6:	bd38      	pop	{r3, r4, r5, pc}
 8015ec8:	20002eb0 	.word	0x20002eb0

08015ecc <memcpy>:
 8015ecc:	440a      	add	r2, r1
 8015ece:	4291      	cmp	r1, r2
 8015ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8015ed4:	d100      	bne.n	8015ed8 <memcpy+0xc>
 8015ed6:	4770      	bx	lr
 8015ed8:	b510      	push	{r4, lr}
 8015eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ee2:	4291      	cmp	r1, r2
 8015ee4:	d1f9      	bne.n	8015eda <memcpy+0xe>
 8015ee6:	bd10      	pop	{r4, pc}

08015ee8 <__assert_func>:
 8015ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015eea:	4614      	mov	r4, r2
 8015eec:	461a      	mov	r2, r3
 8015eee:	4b09      	ldr	r3, [pc, #36]	; (8015f14 <__assert_func+0x2c>)
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	4605      	mov	r5, r0
 8015ef4:	68d8      	ldr	r0, [r3, #12]
 8015ef6:	b14c      	cbz	r4, 8015f0c <__assert_func+0x24>
 8015ef8:	4b07      	ldr	r3, [pc, #28]	; (8015f18 <__assert_func+0x30>)
 8015efa:	9100      	str	r1, [sp, #0]
 8015efc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f00:	4906      	ldr	r1, [pc, #24]	; (8015f1c <__assert_func+0x34>)
 8015f02:	462b      	mov	r3, r5
 8015f04:	f000 f872 	bl	8015fec <fiprintf>
 8015f08:	f000 f882 	bl	8016010 <abort>
 8015f0c:	4b04      	ldr	r3, [pc, #16]	; (8015f20 <__assert_func+0x38>)
 8015f0e:	461c      	mov	r4, r3
 8015f10:	e7f3      	b.n	8015efa <__assert_func+0x12>
 8015f12:	bf00      	nop
 8015f14:	2000036c 	.word	0x2000036c
 8015f18:	0801c71f 	.word	0x0801c71f
 8015f1c:	0801c72c 	.word	0x0801c72c
 8015f20:	0801c75a 	.word	0x0801c75a

08015f24 <_calloc_r>:
 8015f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f26:	fba1 2402 	umull	r2, r4, r1, r2
 8015f2a:	b94c      	cbnz	r4, 8015f40 <_calloc_r+0x1c>
 8015f2c:	4611      	mov	r1, r2
 8015f2e:	9201      	str	r2, [sp, #4]
 8015f30:	f7ff f994 	bl	801525c <_malloc_r>
 8015f34:	9a01      	ldr	r2, [sp, #4]
 8015f36:	4605      	mov	r5, r0
 8015f38:	b930      	cbnz	r0, 8015f48 <_calloc_r+0x24>
 8015f3a:	4628      	mov	r0, r5
 8015f3c:	b003      	add	sp, #12
 8015f3e:	bd30      	pop	{r4, r5, pc}
 8015f40:	220c      	movs	r2, #12
 8015f42:	6002      	str	r2, [r0, #0]
 8015f44:	2500      	movs	r5, #0
 8015f46:	e7f8      	b.n	8015f3a <_calloc_r+0x16>
 8015f48:	4621      	mov	r1, r4
 8015f4a:	f7fe fa16 	bl	801437a <memset>
 8015f4e:	e7f4      	b.n	8015f3a <_calloc_r+0x16>

08015f50 <__ascii_mbtowc>:
 8015f50:	b082      	sub	sp, #8
 8015f52:	b901      	cbnz	r1, 8015f56 <__ascii_mbtowc+0x6>
 8015f54:	a901      	add	r1, sp, #4
 8015f56:	b142      	cbz	r2, 8015f6a <__ascii_mbtowc+0x1a>
 8015f58:	b14b      	cbz	r3, 8015f6e <__ascii_mbtowc+0x1e>
 8015f5a:	7813      	ldrb	r3, [r2, #0]
 8015f5c:	600b      	str	r3, [r1, #0]
 8015f5e:	7812      	ldrb	r2, [r2, #0]
 8015f60:	1e10      	subs	r0, r2, #0
 8015f62:	bf18      	it	ne
 8015f64:	2001      	movne	r0, #1
 8015f66:	b002      	add	sp, #8
 8015f68:	4770      	bx	lr
 8015f6a:	4610      	mov	r0, r2
 8015f6c:	e7fb      	b.n	8015f66 <__ascii_mbtowc+0x16>
 8015f6e:	f06f 0001 	mvn.w	r0, #1
 8015f72:	e7f8      	b.n	8015f66 <__ascii_mbtowc+0x16>

08015f74 <_realloc_r>:
 8015f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f78:	4680      	mov	r8, r0
 8015f7a:	4614      	mov	r4, r2
 8015f7c:	460e      	mov	r6, r1
 8015f7e:	b921      	cbnz	r1, 8015f8a <_realloc_r+0x16>
 8015f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f84:	4611      	mov	r1, r2
 8015f86:	f7ff b969 	b.w	801525c <_malloc_r>
 8015f8a:	b92a      	cbnz	r2, 8015f98 <_realloc_r+0x24>
 8015f8c:	f7ff f8f2 	bl	8015174 <_free_r>
 8015f90:	4625      	mov	r5, r4
 8015f92:	4628      	mov	r0, r5
 8015f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f98:	f000 f841 	bl	801601e <_malloc_usable_size_r>
 8015f9c:	4284      	cmp	r4, r0
 8015f9e:	4607      	mov	r7, r0
 8015fa0:	d802      	bhi.n	8015fa8 <_realloc_r+0x34>
 8015fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015fa6:	d812      	bhi.n	8015fce <_realloc_r+0x5a>
 8015fa8:	4621      	mov	r1, r4
 8015faa:	4640      	mov	r0, r8
 8015fac:	f7ff f956 	bl	801525c <_malloc_r>
 8015fb0:	4605      	mov	r5, r0
 8015fb2:	2800      	cmp	r0, #0
 8015fb4:	d0ed      	beq.n	8015f92 <_realloc_r+0x1e>
 8015fb6:	42bc      	cmp	r4, r7
 8015fb8:	4622      	mov	r2, r4
 8015fba:	4631      	mov	r1, r6
 8015fbc:	bf28      	it	cs
 8015fbe:	463a      	movcs	r2, r7
 8015fc0:	f7ff ff84 	bl	8015ecc <memcpy>
 8015fc4:	4631      	mov	r1, r6
 8015fc6:	4640      	mov	r0, r8
 8015fc8:	f7ff f8d4 	bl	8015174 <_free_r>
 8015fcc:	e7e1      	b.n	8015f92 <_realloc_r+0x1e>
 8015fce:	4635      	mov	r5, r6
 8015fd0:	e7df      	b.n	8015f92 <_realloc_r+0x1e>

08015fd2 <__ascii_wctomb>:
 8015fd2:	b149      	cbz	r1, 8015fe8 <__ascii_wctomb+0x16>
 8015fd4:	2aff      	cmp	r2, #255	; 0xff
 8015fd6:	bf85      	ittet	hi
 8015fd8:	238a      	movhi	r3, #138	; 0x8a
 8015fda:	6003      	strhi	r3, [r0, #0]
 8015fdc:	700a      	strbls	r2, [r1, #0]
 8015fde:	f04f 30ff 	movhi.w	r0, #4294967295
 8015fe2:	bf98      	it	ls
 8015fe4:	2001      	movls	r0, #1
 8015fe6:	4770      	bx	lr
 8015fe8:	4608      	mov	r0, r1
 8015fea:	4770      	bx	lr

08015fec <fiprintf>:
 8015fec:	b40e      	push	{r1, r2, r3}
 8015fee:	b503      	push	{r0, r1, lr}
 8015ff0:	4601      	mov	r1, r0
 8015ff2:	ab03      	add	r3, sp, #12
 8015ff4:	4805      	ldr	r0, [pc, #20]	; (801600c <fiprintf+0x20>)
 8015ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ffa:	6800      	ldr	r0, [r0, #0]
 8015ffc:	9301      	str	r3, [sp, #4]
 8015ffe:	f000 f83f 	bl	8016080 <_vfiprintf_r>
 8016002:	b002      	add	sp, #8
 8016004:	f85d eb04 	ldr.w	lr, [sp], #4
 8016008:	b003      	add	sp, #12
 801600a:	4770      	bx	lr
 801600c:	2000036c 	.word	0x2000036c

08016010 <abort>:
 8016010:	b508      	push	{r3, lr}
 8016012:	2006      	movs	r0, #6
 8016014:	f000 fa0c 	bl	8016430 <raise>
 8016018:	2001      	movs	r0, #1
 801601a:	f7ee f8ff 	bl	800421c <_exit>

0801601e <_malloc_usable_size_r>:
 801601e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016022:	1f18      	subs	r0, r3, #4
 8016024:	2b00      	cmp	r3, #0
 8016026:	bfbc      	itt	lt
 8016028:	580b      	ldrlt	r3, [r1, r0]
 801602a:	18c0      	addlt	r0, r0, r3
 801602c:	4770      	bx	lr

0801602e <__sfputc_r>:
 801602e:	6893      	ldr	r3, [r2, #8]
 8016030:	3b01      	subs	r3, #1
 8016032:	2b00      	cmp	r3, #0
 8016034:	b410      	push	{r4}
 8016036:	6093      	str	r3, [r2, #8]
 8016038:	da08      	bge.n	801604c <__sfputc_r+0x1e>
 801603a:	6994      	ldr	r4, [r2, #24]
 801603c:	42a3      	cmp	r3, r4
 801603e:	db01      	blt.n	8016044 <__sfputc_r+0x16>
 8016040:	290a      	cmp	r1, #10
 8016042:	d103      	bne.n	801604c <__sfputc_r+0x1e>
 8016044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016048:	f000 b934 	b.w	80162b4 <__swbuf_r>
 801604c:	6813      	ldr	r3, [r2, #0]
 801604e:	1c58      	adds	r0, r3, #1
 8016050:	6010      	str	r0, [r2, #0]
 8016052:	7019      	strb	r1, [r3, #0]
 8016054:	4608      	mov	r0, r1
 8016056:	f85d 4b04 	ldr.w	r4, [sp], #4
 801605a:	4770      	bx	lr

0801605c <__sfputs_r>:
 801605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801605e:	4606      	mov	r6, r0
 8016060:	460f      	mov	r7, r1
 8016062:	4614      	mov	r4, r2
 8016064:	18d5      	adds	r5, r2, r3
 8016066:	42ac      	cmp	r4, r5
 8016068:	d101      	bne.n	801606e <__sfputs_r+0x12>
 801606a:	2000      	movs	r0, #0
 801606c:	e007      	b.n	801607e <__sfputs_r+0x22>
 801606e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016072:	463a      	mov	r2, r7
 8016074:	4630      	mov	r0, r6
 8016076:	f7ff ffda 	bl	801602e <__sfputc_r>
 801607a:	1c43      	adds	r3, r0, #1
 801607c:	d1f3      	bne.n	8016066 <__sfputs_r+0xa>
 801607e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016080 <_vfiprintf_r>:
 8016080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016084:	460d      	mov	r5, r1
 8016086:	b09d      	sub	sp, #116	; 0x74
 8016088:	4614      	mov	r4, r2
 801608a:	4698      	mov	r8, r3
 801608c:	4606      	mov	r6, r0
 801608e:	b118      	cbz	r0, 8016098 <_vfiprintf_r+0x18>
 8016090:	6a03      	ldr	r3, [r0, #32]
 8016092:	b90b      	cbnz	r3, 8016098 <_vfiprintf_r+0x18>
 8016094:	f7fe f8d8 	bl	8014248 <__sinit>
 8016098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801609a:	07d9      	lsls	r1, r3, #31
 801609c:	d405      	bmi.n	80160aa <_vfiprintf_r+0x2a>
 801609e:	89ab      	ldrh	r3, [r5, #12]
 80160a0:	059a      	lsls	r2, r3, #22
 80160a2:	d402      	bmi.n	80160aa <_vfiprintf_r+0x2a>
 80160a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160a6:	f7fe f9e6 	bl	8014476 <__retarget_lock_acquire_recursive>
 80160aa:	89ab      	ldrh	r3, [r5, #12]
 80160ac:	071b      	lsls	r3, r3, #28
 80160ae:	d501      	bpl.n	80160b4 <_vfiprintf_r+0x34>
 80160b0:	692b      	ldr	r3, [r5, #16]
 80160b2:	b99b      	cbnz	r3, 80160dc <_vfiprintf_r+0x5c>
 80160b4:	4629      	mov	r1, r5
 80160b6:	4630      	mov	r0, r6
 80160b8:	f000 f93a 	bl	8016330 <__swsetup_r>
 80160bc:	b170      	cbz	r0, 80160dc <_vfiprintf_r+0x5c>
 80160be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160c0:	07dc      	lsls	r4, r3, #31
 80160c2:	d504      	bpl.n	80160ce <_vfiprintf_r+0x4e>
 80160c4:	f04f 30ff 	mov.w	r0, #4294967295
 80160c8:	b01d      	add	sp, #116	; 0x74
 80160ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160ce:	89ab      	ldrh	r3, [r5, #12]
 80160d0:	0598      	lsls	r0, r3, #22
 80160d2:	d4f7      	bmi.n	80160c4 <_vfiprintf_r+0x44>
 80160d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160d6:	f7fe f9cf 	bl	8014478 <__retarget_lock_release_recursive>
 80160da:	e7f3      	b.n	80160c4 <_vfiprintf_r+0x44>
 80160dc:	2300      	movs	r3, #0
 80160de:	9309      	str	r3, [sp, #36]	; 0x24
 80160e0:	2320      	movs	r3, #32
 80160e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80160ea:	2330      	movs	r3, #48	; 0x30
 80160ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80162a0 <_vfiprintf_r+0x220>
 80160f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160f4:	f04f 0901 	mov.w	r9, #1
 80160f8:	4623      	mov	r3, r4
 80160fa:	469a      	mov	sl, r3
 80160fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016100:	b10a      	cbz	r2, 8016106 <_vfiprintf_r+0x86>
 8016102:	2a25      	cmp	r2, #37	; 0x25
 8016104:	d1f9      	bne.n	80160fa <_vfiprintf_r+0x7a>
 8016106:	ebba 0b04 	subs.w	fp, sl, r4
 801610a:	d00b      	beq.n	8016124 <_vfiprintf_r+0xa4>
 801610c:	465b      	mov	r3, fp
 801610e:	4622      	mov	r2, r4
 8016110:	4629      	mov	r1, r5
 8016112:	4630      	mov	r0, r6
 8016114:	f7ff ffa2 	bl	801605c <__sfputs_r>
 8016118:	3001      	adds	r0, #1
 801611a:	f000 80a9 	beq.w	8016270 <_vfiprintf_r+0x1f0>
 801611e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016120:	445a      	add	r2, fp
 8016122:	9209      	str	r2, [sp, #36]	; 0x24
 8016124:	f89a 3000 	ldrb.w	r3, [sl]
 8016128:	2b00      	cmp	r3, #0
 801612a:	f000 80a1 	beq.w	8016270 <_vfiprintf_r+0x1f0>
 801612e:	2300      	movs	r3, #0
 8016130:	f04f 32ff 	mov.w	r2, #4294967295
 8016134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016138:	f10a 0a01 	add.w	sl, sl, #1
 801613c:	9304      	str	r3, [sp, #16]
 801613e:	9307      	str	r3, [sp, #28]
 8016140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016144:	931a      	str	r3, [sp, #104]	; 0x68
 8016146:	4654      	mov	r4, sl
 8016148:	2205      	movs	r2, #5
 801614a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801614e:	4854      	ldr	r0, [pc, #336]	; (80162a0 <_vfiprintf_r+0x220>)
 8016150:	f7ea f866 	bl	8000220 <memchr>
 8016154:	9a04      	ldr	r2, [sp, #16]
 8016156:	b9d8      	cbnz	r0, 8016190 <_vfiprintf_r+0x110>
 8016158:	06d1      	lsls	r1, r2, #27
 801615a:	bf44      	itt	mi
 801615c:	2320      	movmi	r3, #32
 801615e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016162:	0713      	lsls	r3, r2, #28
 8016164:	bf44      	itt	mi
 8016166:	232b      	movmi	r3, #43	; 0x2b
 8016168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801616c:	f89a 3000 	ldrb.w	r3, [sl]
 8016170:	2b2a      	cmp	r3, #42	; 0x2a
 8016172:	d015      	beq.n	80161a0 <_vfiprintf_r+0x120>
 8016174:	9a07      	ldr	r2, [sp, #28]
 8016176:	4654      	mov	r4, sl
 8016178:	2000      	movs	r0, #0
 801617a:	f04f 0c0a 	mov.w	ip, #10
 801617e:	4621      	mov	r1, r4
 8016180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016184:	3b30      	subs	r3, #48	; 0x30
 8016186:	2b09      	cmp	r3, #9
 8016188:	d94d      	bls.n	8016226 <_vfiprintf_r+0x1a6>
 801618a:	b1b0      	cbz	r0, 80161ba <_vfiprintf_r+0x13a>
 801618c:	9207      	str	r2, [sp, #28]
 801618e:	e014      	b.n	80161ba <_vfiprintf_r+0x13a>
 8016190:	eba0 0308 	sub.w	r3, r0, r8
 8016194:	fa09 f303 	lsl.w	r3, r9, r3
 8016198:	4313      	orrs	r3, r2
 801619a:	9304      	str	r3, [sp, #16]
 801619c:	46a2      	mov	sl, r4
 801619e:	e7d2      	b.n	8016146 <_vfiprintf_r+0xc6>
 80161a0:	9b03      	ldr	r3, [sp, #12]
 80161a2:	1d19      	adds	r1, r3, #4
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	9103      	str	r1, [sp, #12]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	bfbb      	ittet	lt
 80161ac:	425b      	neglt	r3, r3
 80161ae:	f042 0202 	orrlt.w	r2, r2, #2
 80161b2:	9307      	strge	r3, [sp, #28]
 80161b4:	9307      	strlt	r3, [sp, #28]
 80161b6:	bfb8      	it	lt
 80161b8:	9204      	strlt	r2, [sp, #16]
 80161ba:	7823      	ldrb	r3, [r4, #0]
 80161bc:	2b2e      	cmp	r3, #46	; 0x2e
 80161be:	d10c      	bne.n	80161da <_vfiprintf_r+0x15a>
 80161c0:	7863      	ldrb	r3, [r4, #1]
 80161c2:	2b2a      	cmp	r3, #42	; 0x2a
 80161c4:	d134      	bne.n	8016230 <_vfiprintf_r+0x1b0>
 80161c6:	9b03      	ldr	r3, [sp, #12]
 80161c8:	1d1a      	adds	r2, r3, #4
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	9203      	str	r2, [sp, #12]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	bfb8      	it	lt
 80161d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80161d6:	3402      	adds	r4, #2
 80161d8:	9305      	str	r3, [sp, #20]
 80161da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80162b0 <_vfiprintf_r+0x230>
 80161de:	7821      	ldrb	r1, [r4, #0]
 80161e0:	2203      	movs	r2, #3
 80161e2:	4650      	mov	r0, sl
 80161e4:	f7ea f81c 	bl	8000220 <memchr>
 80161e8:	b138      	cbz	r0, 80161fa <_vfiprintf_r+0x17a>
 80161ea:	9b04      	ldr	r3, [sp, #16]
 80161ec:	eba0 000a 	sub.w	r0, r0, sl
 80161f0:	2240      	movs	r2, #64	; 0x40
 80161f2:	4082      	lsls	r2, r0
 80161f4:	4313      	orrs	r3, r2
 80161f6:	3401      	adds	r4, #1
 80161f8:	9304      	str	r3, [sp, #16]
 80161fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161fe:	4829      	ldr	r0, [pc, #164]	; (80162a4 <_vfiprintf_r+0x224>)
 8016200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016204:	2206      	movs	r2, #6
 8016206:	f7ea f80b 	bl	8000220 <memchr>
 801620a:	2800      	cmp	r0, #0
 801620c:	d03f      	beq.n	801628e <_vfiprintf_r+0x20e>
 801620e:	4b26      	ldr	r3, [pc, #152]	; (80162a8 <_vfiprintf_r+0x228>)
 8016210:	bb1b      	cbnz	r3, 801625a <_vfiprintf_r+0x1da>
 8016212:	9b03      	ldr	r3, [sp, #12]
 8016214:	3307      	adds	r3, #7
 8016216:	f023 0307 	bic.w	r3, r3, #7
 801621a:	3308      	adds	r3, #8
 801621c:	9303      	str	r3, [sp, #12]
 801621e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016220:	443b      	add	r3, r7
 8016222:	9309      	str	r3, [sp, #36]	; 0x24
 8016224:	e768      	b.n	80160f8 <_vfiprintf_r+0x78>
 8016226:	fb0c 3202 	mla	r2, ip, r2, r3
 801622a:	460c      	mov	r4, r1
 801622c:	2001      	movs	r0, #1
 801622e:	e7a6      	b.n	801617e <_vfiprintf_r+0xfe>
 8016230:	2300      	movs	r3, #0
 8016232:	3401      	adds	r4, #1
 8016234:	9305      	str	r3, [sp, #20]
 8016236:	4619      	mov	r1, r3
 8016238:	f04f 0c0a 	mov.w	ip, #10
 801623c:	4620      	mov	r0, r4
 801623e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016242:	3a30      	subs	r2, #48	; 0x30
 8016244:	2a09      	cmp	r2, #9
 8016246:	d903      	bls.n	8016250 <_vfiprintf_r+0x1d0>
 8016248:	2b00      	cmp	r3, #0
 801624a:	d0c6      	beq.n	80161da <_vfiprintf_r+0x15a>
 801624c:	9105      	str	r1, [sp, #20]
 801624e:	e7c4      	b.n	80161da <_vfiprintf_r+0x15a>
 8016250:	fb0c 2101 	mla	r1, ip, r1, r2
 8016254:	4604      	mov	r4, r0
 8016256:	2301      	movs	r3, #1
 8016258:	e7f0      	b.n	801623c <_vfiprintf_r+0x1bc>
 801625a:	ab03      	add	r3, sp, #12
 801625c:	9300      	str	r3, [sp, #0]
 801625e:	462a      	mov	r2, r5
 8016260:	4b12      	ldr	r3, [pc, #72]	; (80162ac <_vfiprintf_r+0x22c>)
 8016262:	a904      	add	r1, sp, #16
 8016264:	4630      	mov	r0, r6
 8016266:	f7fd fb9d 	bl	80139a4 <_printf_float>
 801626a:	4607      	mov	r7, r0
 801626c:	1c78      	adds	r0, r7, #1
 801626e:	d1d6      	bne.n	801621e <_vfiprintf_r+0x19e>
 8016270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016272:	07d9      	lsls	r1, r3, #31
 8016274:	d405      	bmi.n	8016282 <_vfiprintf_r+0x202>
 8016276:	89ab      	ldrh	r3, [r5, #12]
 8016278:	059a      	lsls	r2, r3, #22
 801627a:	d402      	bmi.n	8016282 <_vfiprintf_r+0x202>
 801627c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801627e:	f7fe f8fb 	bl	8014478 <__retarget_lock_release_recursive>
 8016282:	89ab      	ldrh	r3, [r5, #12]
 8016284:	065b      	lsls	r3, r3, #25
 8016286:	f53f af1d 	bmi.w	80160c4 <_vfiprintf_r+0x44>
 801628a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801628c:	e71c      	b.n	80160c8 <_vfiprintf_r+0x48>
 801628e:	ab03      	add	r3, sp, #12
 8016290:	9300      	str	r3, [sp, #0]
 8016292:	462a      	mov	r2, r5
 8016294:	4b05      	ldr	r3, [pc, #20]	; (80162ac <_vfiprintf_r+0x22c>)
 8016296:	a904      	add	r1, sp, #16
 8016298:	4630      	mov	r0, r6
 801629a:	f7fd fe27 	bl	8013eec <_printf_i>
 801629e:	e7e4      	b.n	801626a <_vfiprintf_r+0x1ea>
 80162a0:	0801c704 	.word	0x0801c704
 80162a4:	0801c70e 	.word	0x0801c70e
 80162a8:	080139a5 	.word	0x080139a5
 80162ac:	0801605d 	.word	0x0801605d
 80162b0:	0801c70a 	.word	0x0801c70a

080162b4 <__swbuf_r>:
 80162b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162b6:	460e      	mov	r6, r1
 80162b8:	4614      	mov	r4, r2
 80162ba:	4605      	mov	r5, r0
 80162bc:	b118      	cbz	r0, 80162c6 <__swbuf_r+0x12>
 80162be:	6a03      	ldr	r3, [r0, #32]
 80162c0:	b90b      	cbnz	r3, 80162c6 <__swbuf_r+0x12>
 80162c2:	f7fd ffc1 	bl	8014248 <__sinit>
 80162c6:	69a3      	ldr	r3, [r4, #24]
 80162c8:	60a3      	str	r3, [r4, #8]
 80162ca:	89a3      	ldrh	r3, [r4, #12]
 80162cc:	071a      	lsls	r2, r3, #28
 80162ce:	d525      	bpl.n	801631c <__swbuf_r+0x68>
 80162d0:	6923      	ldr	r3, [r4, #16]
 80162d2:	b31b      	cbz	r3, 801631c <__swbuf_r+0x68>
 80162d4:	6823      	ldr	r3, [r4, #0]
 80162d6:	6922      	ldr	r2, [r4, #16]
 80162d8:	1a98      	subs	r0, r3, r2
 80162da:	6963      	ldr	r3, [r4, #20]
 80162dc:	b2f6      	uxtb	r6, r6
 80162de:	4283      	cmp	r3, r0
 80162e0:	4637      	mov	r7, r6
 80162e2:	dc04      	bgt.n	80162ee <__swbuf_r+0x3a>
 80162e4:	4621      	mov	r1, r4
 80162e6:	4628      	mov	r0, r5
 80162e8:	f7ff fd9e 	bl	8015e28 <_fflush_r>
 80162ec:	b9e0      	cbnz	r0, 8016328 <__swbuf_r+0x74>
 80162ee:	68a3      	ldr	r3, [r4, #8]
 80162f0:	3b01      	subs	r3, #1
 80162f2:	60a3      	str	r3, [r4, #8]
 80162f4:	6823      	ldr	r3, [r4, #0]
 80162f6:	1c5a      	adds	r2, r3, #1
 80162f8:	6022      	str	r2, [r4, #0]
 80162fa:	701e      	strb	r6, [r3, #0]
 80162fc:	6962      	ldr	r2, [r4, #20]
 80162fe:	1c43      	adds	r3, r0, #1
 8016300:	429a      	cmp	r2, r3
 8016302:	d004      	beq.n	801630e <__swbuf_r+0x5a>
 8016304:	89a3      	ldrh	r3, [r4, #12]
 8016306:	07db      	lsls	r3, r3, #31
 8016308:	d506      	bpl.n	8016318 <__swbuf_r+0x64>
 801630a:	2e0a      	cmp	r6, #10
 801630c:	d104      	bne.n	8016318 <__swbuf_r+0x64>
 801630e:	4621      	mov	r1, r4
 8016310:	4628      	mov	r0, r5
 8016312:	f7ff fd89 	bl	8015e28 <_fflush_r>
 8016316:	b938      	cbnz	r0, 8016328 <__swbuf_r+0x74>
 8016318:	4638      	mov	r0, r7
 801631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801631c:	4621      	mov	r1, r4
 801631e:	4628      	mov	r0, r5
 8016320:	f000 f806 	bl	8016330 <__swsetup_r>
 8016324:	2800      	cmp	r0, #0
 8016326:	d0d5      	beq.n	80162d4 <__swbuf_r+0x20>
 8016328:	f04f 37ff 	mov.w	r7, #4294967295
 801632c:	e7f4      	b.n	8016318 <__swbuf_r+0x64>
	...

08016330 <__swsetup_r>:
 8016330:	b538      	push	{r3, r4, r5, lr}
 8016332:	4b2a      	ldr	r3, [pc, #168]	; (80163dc <__swsetup_r+0xac>)
 8016334:	4605      	mov	r5, r0
 8016336:	6818      	ldr	r0, [r3, #0]
 8016338:	460c      	mov	r4, r1
 801633a:	b118      	cbz	r0, 8016344 <__swsetup_r+0x14>
 801633c:	6a03      	ldr	r3, [r0, #32]
 801633e:	b90b      	cbnz	r3, 8016344 <__swsetup_r+0x14>
 8016340:	f7fd ff82 	bl	8014248 <__sinit>
 8016344:	89a3      	ldrh	r3, [r4, #12]
 8016346:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801634a:	0718      	lsls	r0, r3, #28
 801634c:	d422      	bmi.n	8016394 <__swsetup_r+0x64>
 801634e:	06d9      	lsls	r1, r3, #27
 8016350:	d407      	bmi.n	8016362 <__swsetup_r+0x32>
 8016352:	2309      	movs	r3, #9
 8016354:	602b      	str	r3, [r5, #0]
 8016356:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801635a:	81a3      	strh	r3, [r4, #12]
 801635c:	f04f 30ff 	mov.w	r0, #4294967295
 8016360:	e034      	b.n	80163cc <__swsetup_r+0x9c>
 8016362:	0758      	lsls	r0, r3, #29
 8016364:	d512      	bpl.n	801638c <__swsetup_r+0x5c>
 8016366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016368:	b141      	cbz	r1, 801637c <__swsetup_r+0x4c>
 801636a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801636e:	4299      	cmp	r1, r3
 8016370:	d002      	beq.n	8016378 <__swsetup_r+0x48>
 8016372:	4628      	mov	r0, r5
 8016374:	f7fe fefe 	bl	8015174 <_free_r>
 8016378:	2300      	movs	r3, #0
 801637a:	6363      	str	r3, [r4, #52]	; 0x34
 801637c:	89a3      	ldrh	r3, [r4, #12]
 801637e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016382:	81a3      	strh	r3, [r4, #12]
 8016384:	2300      	movs	r3, #0
 8016386:	6063      	str	r3, [r4, #4]
 8016388:	6923      	ldr	r3, [r4, #16]
 801638a:	6023      	str	r3, [r4, #0]
 801638c:	89a3      	ldrh	r3, [r4, #12]
 801638e:	f043 0308 	orr.w	r3, r3, #8
 8016392:	81a3      	strh	r3, [r4, #12]
 8016394:	6923      	ldr	r3, [r4, #16]
 8016396:	b94b      	cbnz	r3, 80163ac <__swsetup_r+0x7c>
 8016398:	89a3      	ldrh	r3, [r4, #12]
 801639a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801639e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163a2:	d003      	beq.n	80163ac <__swsetup_r+0x7c>
 80163a4:	4621      	mov	r1, r4
 80163a6:	4628      	mov	r0, r5
 80163a8:	f000 f884 	bl	80164b4 <__smakebuf_r>
 80163ac:	89a0      	ldrh	r0, [r4, #12]
 80163ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80163b2:	f010 0301 	ands.w	r3, r0, #1
 80163b6:	d00a      	beq.n	80163ce <__swsetup_r+0x9e>
 80163b8:	2300      	movs	r3, #0
 80163ba:	60a3      	str	r3, [r4, #8]
 80163bc:	6963      	ldr	r3, [r4, #20]
 80163be:	425b      	negs	r3, r3
 80163c0:	61a3      	str	r3, [r4, #24]
 80163c2:	6923      	ldr	r3, [r4, #16]
 80163c4:	b943      	cbnz	r3, 80163d8 <__swsetup_r+0xa8>
 80163c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80163ca:	d1c4      	bne.n	8016356 <__swsetup_r+0x26>
 80163cc:	bd38      	pop	{r3, r4, r5, pc}
 80163ce:	0781      	lsls	r1, r0, #30
 80163d0:	bf58      	it	pl
 80163d2:	6963      	ldrpl	r3, [r4, #20]
 80163d4:	60a3      	str	r3, [r4, #8]
 80163d6:	e7f4      	b.n	80163c2 <__swsetup_r+0x92>
 80163d8:	2000      	movs	r0, #0
 80163da:	e7f7      	b.n	80163cc <__swsetup_r+0x9c>
 80163dc:	2000036c 	.word	0x2000036c

080163e0 <_raise_r>:
 80163e0:	291f      	cmp	r1, #31
 80163e2:	b538      	push	{r3, r4, r5, lr}
 80163e4:	4604      	mov	r4, r0
 80163e6:	460d      	mov	r5, r1
 80163e8:	d904      	bls.n	80163f4 <_raise_r+0x14>
 80163ea:	2316      	movs	r3, #22
 80163ec:	6003      	str	r3, [r0, #0]
 80163ee:	f04f 30ff 	mov.w	r0, #4294967295
 80163f2:	bd38      	pop	{r3, r4, r5, pc}
 80163f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80163f6:	b112      	cbz	r2, 80163fe <_raise_r+0x1e>
 80163f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80163fc:	b94b      	cbnz	r3, 8016412 <_raise_r+0x32>
 80163fe:	4620      	mov	r0, r4
 8016400:	f000 f830 	bl	8016464 <_getpid_r>
 8016404:	462a      	mov	r2, r5
 8016406:	4601      	mov	r1, r0
 8016408:	4620      	mov	r0, r4
 801640a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801640e:	f000 b817 	b.w	8016440 <_kill_r>
 8016412:	2b01      	cmp	r3, #1
 8016414:	d00a      	beq.n	801642c <_raise_r+0x4c>
 8016416:	1c59      	adds	r1, r3, #1
 8016418:	d103      	bne.n	8016422 <_raise_r+0x42>
 801641a:	2316      	movs	r3, #22
 801641c:	6003      	str	r3, [r0, #0]
 801641e:	2001      	movs	r0, #1
 8016420:	e7e7      	b.n	80163f2 <_raise_r+0x12>
 8016422:	2400      	movs	r4, #0
 8016424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016428:	4628      	mov	r0, r5
 801642a:	4798      	blx	r3
 801642c:	2000      	movs	r0, #0
 801642e:	e7e0      	b.n	80163f2 <_raise_r+0x12>

08016430 <raise>:
 8016430:	4b02      	ldr	r3, [pc, #8]	; (801643c <raise+0xc>)
 8016432:	4601      	mov	r1, r0
 8016434:	6818      	ldr	r0, [r3, #0]
 8016436:	f7ff bfd3 	b.w	80163e0 <_raise_r>
 801643a:	bf00      	nop
 801643c:	2000036c 	.word	0x2000036c

08016440 <_kill_r>:
 8016440:	b538      	push	{r3, r4, r5, lr}
 8016442:	4d07      	ldr	r5, [pc, #28]	; (8016460 <_kill_r+0x20>)
 8016444:	2300      	movs	r3, #0
 8016446:	4604      	mov	r4, r0
 8016448:	4608      	mov	r0, r1
 801644a:	4611      	mov	r1, r2
 801644c:	602b      	str	r3, [r5, #0]
 801644e:	f7ed fed5 	bl	80041fc <_kill>
 8016452:	1c43      	adds	r3, r0, #1
 8016454:	d102      	bne.n	801645c <_kill_r+0x1c>
 8016456:	682b      	ldr	r3, [r5, #0]
 8016458:	b103      	cbz	r3, 801645c <_kill_r+0x1c>
 801645a:	6023      	str	r3, [r4, #0]
 801645c:	bd38      	pop	{r3, r4, r5, pc}
 801645e:	bf00      	nop
 8016460:	20002eb0 	.word	0x20002eb0

08016464 <_getpid_r>:
 8016464:	f7ed bec2 	b.w	80041ec <_getpid>

08016468 <__swhatbuf_r>:
 8016468:	b570      	push	{r4, r5, r6, lr}
 801646a:	460c      	mov	r4, r1
 801646c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016470:	2900      	cmp	r1, #0
 8016472:	b096      	sub	sp, #88	; 0x58
 8016474:	4615      	mov	r5, r2
 8016476:	461e      	mov	r6, r3
 8016478:	da0d      	bge.n	8016496 <__swhatbuf_r+0x2e>
 801647a:	89a3      	ldrh	r3, [r4, #12]
 801647c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016480:	f04f 0100 	mov.w	r1, #0
 8016484:	bf0c      	ite	eq
 8016486:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801648a:	2340      	movne	r3, #64	; 0x40
 801648c:	2000      	movs	r0, #0
 801648e:	6031      	str	r1, [r6, #0]
 8016490:	602b      	str	r3, [r5, #0]
 8016492:	b016      	add	sp, #88	; 0x58
 8016494:	bd70      	pop	{r4, r5, r6, pc}
 8016496:	466a      	mov	r2, sp
 8016498:	f000 f848 	bl	801652c <_fstat_r>
 801649c:	2800      	cmp	r0, #0
 801649e:	dbec      	blt.n	801647a <__swhatbuf_r+0x12>
 80164a0:	9901      	ldr	r1, [sp, #4]
 80164a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80164a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80164aa:	4259      	negs	r1, r3
 80164ac:	4159      	adcs	r1, r3
 80164ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164b2:	e7eb      	b.n	801648c <__swhatbuf_r+0x24>

080164b4 <__smakebuf_r>:
 80164b4:	898b      	ldrh	r3, [r1, #12]
 80164b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80164b8:	079d      	lsls	r5, r3, #30
 80164ba:	4606      	mov	r6, r0
 80164bc:	460c      	mov	r4, r1
 80164be:	d507      	bpl.n	80164d0 <__smakebuf_r+0x1c>
 80164c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80164c4:	6023      	str	r3, [r4, #0]
 80164c6:	6123      	str	r3, [r4, #16]
 80164c8:	2301      	movs	r3, #1
 80164ca:	6163      	str	r3, [r4, #20]
 80164cc:	b002      	add	sp, #8
 80164ce:	bd70      	pop	{r4, r5, r6, pc}
 80164d0:	ab01      	add	r3, sp, #4
 80164d2:	466a      	mov	r2, sp
 80164d4:	f7ff ffc8 	bl	8016468 <__swhatbuf_r>
 80164d8:	9900      	ldr	r1, [sp, #0]
 80164da:	4605      	mov	r5, r0
 80164dc:	4630      	mov	r0, r6
 80164de:	f7fe febd 	bl	801525c <_malloc_r>
 80164e2:	b948      	cbnz	r0, 80164f8 <__smakebuf_r+0x44>
 80164e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164e8:	059a      	lsls	r2, r3, #22
 80164ea:	d4ef      	bmi.n	80164cc <__smakebuf_r+0x18>
 80164ec:	f023 0303 	bic.w	r3, r3, #3
 80164f0:	f043 0302 	orr.w	r3, r3, #2
 80164f4:	81a3      	strh	r3, [r4, #12]
 80164f6:	e7e3      	b.n	80164c0 <__smakebuf_r+0xc>
 80164f8:	89a3      	ldrh	r3, [r4, #12]
 80164fa:	6020      	str	r0, [r4, #0]
 80164fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016500:	81a3      	strh	r3, [r4, #12]
 8016502:	9b00      	ldr	r3, [sp, #0]
 8016504:	6163      	str	r3, [r4, #20]
 8016506:	9b01      	ldr	r3, [sp, #4]
 8016508:	6120      	str	r0, [r4, #16]
 801650a:	b15b      	cbz	r3, 8016524 <__smakebuf_r+0x70>
 801650c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016510:	4630      	mov	r0, r6
 8016512:	f000 f81d 	bl	8016550 <_isatty_r>
 8016516:	b128      	cbz	r0, 8016524 <__smakebuf_r+0x70>
 8016518:	89a3      	ldrh	r3, [r4, #12]
 801651a:	f023 0303 	bic.w	r3, r3, #3
 801651e:	f043 0301 	orr.w	r3, r3, #1
 8016522:	81a3      	strh	r3, [r4, #12]
 8016524:	89a3      	ldrh	r3, [r4, #12]
 8016526:	431d      	orrs	r5, r3
 8016528:	81a5      	strh	r5, [r4, #12]
 801652a:	e7cf      	b.n	80164cc <__smakebuf_r+0x18>

0801652c <_fstat_r>:
 801652c:	b538      	push	{r3, r4, r5, lr}
 801652e:	4d07      	ldr	r5, [pc, #28]	; (801654c <_fstat_r+0x20>)
 8016530:	2300      	movs	r3, #0
 8016532:	4604      	mov	r4, r0
 8016534:	4608      	mov	r0, r1
 8016536:	4611      	mov	r1, r2
 8016538:	602b      	str	r3, [r5, #0]
 801653a:	f7ed febe 	bl	80042ba <_fstat>
 801653e:	1c43      	adds	r3, r0, #1
 8016540:	d102      	bne.n	8016548 <_fstat_r+0x1c>
 8016542:	682b      	ldr	r3, [r5, #0]
 8016544:	b103      	cbz	r3, 8016548 <_fstat_r+0x1c>
 8016546:	6023      	str	r3, [r4, #0]
 8016548:	bd38      	pop	{r3, r4, r5, pc}
 801654a:	bf00      	nop
 801654c:	20002eb0 	.word	0x20002eb0

08016550 <_isatty_r>:
 8016550:	b538      	push	{r3, r4, r5, lr}
 8016552:	4d06      	ldr	r5, [pc, #24]	; (801656c <_isatty_r+0x1c>)
 8016554:	2300      	movs	r3, #0
 8016556:	4604      	mov	r4, r0
 8016558:	4608      	mov	r0, r1
 801655a:	602b      	str	r3, [r5, #0]
 801655c:	f7ed febd 	bl	80042da <_isatty>
 8016560:	1c43      	adds	r3, r0, #1
 8016562:	d102      	bne.n	801656a <_isatty_r+0x1a>
 8016564:	682b      	ldr	r3, [r5, #0]
 8016566:	b103      	cbz	r3, 801656a <_isatty_r+0x1a>
 8016568:	6023      	str	r3, [r4, #0]
 801656a:	bd38      	pop	{r3, r4, r5, pc}
 801656c:	20002eb0 	.word	0x20002eb0

08016570 <fmod>:
 8016570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016572:	ed2d 8b02 	vpush	{d8}
 8016576:	ec57 6b10 	vmov	r6, r7, d0
 801657a:	ec55 4b11 	vmov	r4, r5, d1
 801657e:	f000 f8e9 	bl	8016754 <__ieee754_fmod>
 8016582:	4622      	mov	r2, r4
 8016584:	462b      	mov	r3, r5
 8016586:	4630      	mov	r0, r6
 8016588:	4639      	mov	r1, r7
 801658a:	eeb0 8a40 	vmov.f32	s16, s0
 801658e:	eef0 8a60 	vmov.f32	s17, s1
 8016592:	f7ea faf3 	bl	8000b7c <__aeabi_dcmpun>
 8016596:	b990      	cbnz	r0, 80165be <fmod+0x4e>
 8016598:	2200      	movs	r2, #0
 801659a:	2300      	movs	r3, #0
 801659c:	4620      	mov	r0, r4
 801659e:	4629      	mov	r1, r5
 80165a0:	f7ea faba 	bl	8000b18 <__aeabi_dcmpeq>
 80165a4:	b158      	cbz	r0, 80165be <fmod+0x4e>
 80165a6:	f7fd ff3b 	bl	8014420 <__errno>
 80165aa:	2321      	movs	r3, #33	; 0x21
 80165ac:	6003      	str	r3, [r0, #0]
 80165ae:	2200      	movs	r2, #0
 80165b0:	2300      	movs	r3, #0
 80165b2:	4610      	mov	r0, r2
 80165b4:	4619      	mov	r1, r3
 80165b6:	f7ea f971 	bl	800089c <__aeabi_ddiv>
 80165ba:	ec41 0b18 	vmov	d8, r0, r1
 80165be:	eeb0 0a48 	vmov.f32	s0, s16
 80165c2:	eef0 0a68 	vmov.f32	s1, s17
 80165c6:	ecbd 8b02 	vpop	{d8}
 80165ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080165cc <pow>:
 80165cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ce:	ed2d 8b02 	vpush	{d8}
 80165d2:	eeb0 8a40 	vmov.f32	s16, s0
 80165d6:	eef0 8a60 	vmov.f32	s17, s1
 80165da:	ec55 4b11 	vmov	r4, r5, d1
 80165de:	f000 f9c7 	bl	8016970 <__ieee754_pow>
 80165e2:	4622      	mov	r2, r4
 80165e4:	462b      	mov	r3, r5
 80165e6:	4620      	mov	r0, r4
 80165e8:	4629      	mov	r1, r5
 80165ea:	ec57 6b10 	vmov	r6, r7, d0
 80165ee:	f7ea fac5 	bl	8000b7c <__aeabi_dcmpun>
 80165f2:	2800      	cmp	r0, #0
 80165f4:	d13b      	bne.n	801666e <pow+0xa2>
 80165f6:	ec51 0b18 	vmov	r0, r1, d8
 80165fa:	2200      	movs	r2, #0
 80165fc:	2300      	movs	r3, #0
 80165fe:	f7ea fa8b 	bl	8000b18 <__aeabi_dcmpeq>
 8016602:	b1b8      	cbz	r0, 8016634 <pow+0x68>
 8016604:	2200      	movs	r2, #0
 8016606:	2300      	movs	r3, #0
 8016608:	4620      	mov	r0, r4
 801660a:	4629      	mov	r1, r5
 801660c:	f7ea fa84 	bl	8000b18 <__aeabi_dcmpeq>
 8016610:	2800      	cmp	r0, #0
 8016612:	d146      	bne.n	80166a2 <pow+0xd6>
 8016614:	ec45 4b10 	vmov	d0, r4, r5
 8016618:	f000 f848 	bl	80166ac <finite>
 801661c:	b338      	cbz	r0, 801666e <pow+0xa2>
 801661e:	2200      	movs	r2, #0
 8016620:	2300      	movs	r3, #0
 8016622:	4620      	mov	r0, r4
 8016624:	4629      	mov	r1, r5
 8016626:	f7ea fa81 	bl	8000b2c <__aeabi_dcmplt>
 801662a:	b300      	cbz	r0, 801666e <pow+0xa2>
 801662c:	f7fd fef8 	bl	8014420 <__errno>
 8016630:	2322      	movs	r3, #34	; 0x22
 8016632:	e01b      	b.n	801666c <pow+0xa0>
 8016634:	ec47 6b10 	vmov	d0, r6, r7
 8016638:	f000 f838 	bl	80166ac <finite>
 801663c:	b9e0      	cbnz	r0, 8016678 <pow+0xac>
 801663e:	eeb0 0a48 	vmov.f32	s0, s16
 8016642:	eef0 0a68 	vmov.f32	s1, s17
 8016646:	f000 f831 	bl	80166ac <finite>
 801664a:	b1a8      	cbz	r0, 8016678 <pow+0xac>
 801664c:	ec45 4b10 	vmov	d0, r4, r5
 8016650:	f000 f82c 	bl	80166ac <finite>
 8016654:	b180      	cbz	r0, 8016678 <pow+0xac>
 8016656:	4632      	mov	r2, r6
 8016658:	463b      	mov	r3, r7
 801665a:	4630      	mov	r0, r6
 801665c:	4639      	mov	r1, r7
 801665e:	f7ea fa8d 	bl	8000b7c <__aeabi_dcmpun>
 8016662:	2800      	cmp	r0, #0
 8016664:	d0e2      	beq.n	801662c <pow+0x60>
 8016666:	f7fd fedb 	bl	8014420 <__errno>
 801666a:	2321      	movs	r3, #33	; 0x21
 801666c:	6003      	str	r3, [r0, #0]
 801666e:	ecbd 8b02 	vpop	{d8}
 8016672:	ec47 6b10 	vmov	d0, r6, r7
 8016676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016678:	2200      	movs	r2, #0
 801667a:	2300      	movs	r3, #0
 801667c:	4630      	mov	r0, r6
 801667e:	4639      	mov	r1, r7
 8016680:	f7ea fa4a 	bl	8000b18 <__aeabi_dcmpeq>
 8016684:	2800      	cmp	r0, #0
 8016686:	d0f2      	beq.n	801666e <pow+0xa2>
 8016688:	eeb0 0a48 	vmov.f32	s0, s16
 801668c:	eef0 0a68 	vmov.f32	s1, s17
 8016690:	f000 f80c 	bl	80166ac <finite>
 8016694:	2800      	cmp	r0, #0
 8016696:	d0ea      	beq.n	801666e <pow+0xa2>
 8016698:	ec45 4b10 	vmov	d0, r4, r5
 801669c:	f000 f806 	bl	80166ac <finite>
 80166a0:	e7c3      	b.n	801662a <pow+0x5e>
 80166a2:	4f01      	ldr	r7, [pc, #4]	; (80166a8 <pow+0xdc>)
 80166a4:	2600      	movs	r6, #0
 80166a6:	e7e2      	b.n	801666e <pow+0xa2>
 80166a8:	3ff00000 	.word	0x3ff00000

080166ac <finite>:
 80166ac:	b082      	sub	sp, #8
 80166ae:	ed8d 0b00 	vstr	d0, [sp]
 80166b2:	9801      	ldr	r0, [sp, #4]
 80166b4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80166b8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80166bc:	0fc0      	lsrs	r0, r0, #31
 80166be:	b002      	add	sp, #8
 80166c0:	4770      	bx	lr
	...

080166c4 <round>:
 80166c4:	ec53 2b10 	vmov	r2, r3, d0
 80166c8:	b570      	push	{r4, r5, r6, lr}
 80166ca:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80166ce:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80166d2:	2813      	cmp	r0, #19
 80166d4:	ee10 5a10 	vmov	r5, s0
 80166d8:	4619      	mov	r1, r3
 80166da:	dc18      	bgt.n	801670e <round+0x4a>
 80166dc:	2800      	cmp	r0, #0
 80166de:	da09      	bge.n	80166f4 <round+0x30>
 80166e0:	3001      	adds	r0, #1
 80166e2:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80166e6:	d103      	bne.n	80166f0 <round+0x2c>
 80166e8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80166ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80166f0:	2300      	movs	r3, #0
 80166f2:	e02a      	b.n	801674a <round+0x86>
 80166f4:	4c16      	ldr	r4, [pc, #88]	; (8016750 <round+0x8c>)
 80166f6:	4104      	asrs	r4, r0
 80166f8:	ea03 0604 	and.w	r6, r3, r4
 80166fc:	4316      	orrs	r6, r2
 80166fe:	d011      	beq.n	8016724 <round+0x60>
 8016700:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016704:	4103      	asrs	r3, r0
 8016706:	440b      	add	r3, r1
 8016708:	ea23 0104 	bic.w	r1, r3, r4
 801670c:	e7f0      	b.n	80166f0 <round+0x2c>
 801670e:	2833      	cmp	r0, #51	; 0x33
 8016710:	dd0b      	ble.n	801672a <round+0x66>
 8016712:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016716:	d105      	bne.n	8016724 <round+0x60>
 8016718:	ee10 0a10 	vmov	r0, s0
 801671c:	f7e9 fdde 	bl	80002dc <__adddf3>
 8016720:	4602      	mov	r2, r0
 8016722:	460b      	mov	r3, r1
 8016724:	ec43 2b10 	vmov	d0, r2, r3
 8016728:	bd70      	pop	{r4, r5, r6, pc}
 801672a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801672e:	f04f 34ff 	mov.w	r4, #4294967295
 8016732:	40f4      	lsrs	r4, r6
 8016734:	4214      	tst	r4, r2
 8016736:	d0f5      	beq.n	8016724 <round+0x60>
 8016738:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801673c:	2301      	movs	r3, #1
 801673e:	4083      	lsls	r3, r0
 8016740:	195b      	adds	r3, r3, r5
 8016742:	bf28      	it	cs
 8016744:	3101      	addcs	r1, #1
 8016746:	ea23 0304 	bic.w	r3, r3, r4
 801674a:	461a      	mov	r2, r3
 801674c:	460b      	mov	r3, r1
 801674e:	e7e9      	b.n	8016724 <round+0x60>
 8016750:	000fffff 	.word	0x000fffff

08016754 <__ieee754_fmod>:
 8016754:	ec53 2b11 	vmov	r2, r3, d1
 8016758:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016760:	ea5c 0402 	orrs.w	r4, ip, r2
 8016764:	ec51 0b10 	vmov	r0, r1, d0
 8016768:	ee11 7a10 	vmov	r7, s2
 801676c:	ee11 ea10 	vmov	lr, s2
 8016770:	461e      	mov	r6, r3
 8016772:	d00c      	beq.n	801678e <__ieee754_fmod+0x3a>
 8016774:	4c78      	ldr	r4, [pc, #480]	; (8016958 <__ieee754_fmod+0x204>)
 8016776:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801677a:	45a0      	cmp	r8, r4
 801677c:	4689      	mov	r9, r1
 801677e:	dc06      	bgt.n	801678e <__ieee754_fmod+0x3a>
 8016780:	4254      	negs	r4, r2
 8016782:	4d76      	ldr	r5, [pc, #472]	; (801695c <__ieee754_fmod+0x208>)
 8016784:	4314      	orrs	r4, r2
 8016786:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801678a:	42ac      	cmp	r4, r5
 801678c:	d909      	bls.n	80167a2 <__ieee754_fmod+0x4e>
 801678e:	f7e9 ff5b 	bl	8000648 <__aeabi_dmul>
 8016792:	4602      	mov	r2, r0
 8016794:	460b      	mov	r3, r1
 8016796:	f7ea f881 	bl	800089c <__aeabi_ddiv>
 801679a:	ec41 0b10 	vmov	d0, r0, r1
 801679e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167a2:	45e0      	cmp	r8, ip
 80167a4:	ee10 aa10 	vmov	sl, s0
 80167a8:	ee10 4a10 	vmov	r4, s0
 80167ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80167b0:	dc09      	bgt.n	80167c6 <__ieee754_fmod+0x72>
 80167b2:	dbf2      	blt.n	801679a <__ieee754_fmod+0x46>
 80167b4:	4290      	cmp	r0, r2
 80167b6:	d3f0      	bcc.n	801679a <__ieee754_fmod+0x46>
 80167b8:	d105      	bne.n	80167c6 <__ieee754_fmod+0x72>
 80167ba:	4b69      	ldr	r3, [pc, #420]	; (8016960 <__ieee754_fmod+0x20c>)
 80167bc:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80167c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167c4:	e7e9      	b.n	801679a <__ieee754_fmod+0x46>
 80167c6:	4a65      	ldr	r2, [pc, #404]	; (801695c <__ieee754_fmod+0x208>)
 80167c8:	ea19 0f02 	tst.w	r9, r2
 80167cc:	d148      	bne.n	8016860 <__ieee754_fmod+0x10c>
 80167ce:	f1b8 0f00 	cmp.w	r8, #0
 80167d2:	d13d      	bne.n	8016850 <__ieee754_fmod+0xfc>
 80167d4:	4963      	ldr	r1, [pc, #396]	; (8016964 <__ieee754_fmod+0x210>)
 80167d6:	4653      	mov	r3, sl
 80167d8:	2b00      	cmp	r3, #0
 80167da:	dc36      	bgt.n	801684a <__ieee754_fmod+0xf6>
 80167dc:	4216      	tst	r6, r2
 80167de:	d14f      	bne.n	8016880 <__ieee754_fmod+0x12c>
 80167e0:	f1bc 0f00 	cmp.w	ip, #0
 80167e4:	d144      	bne.n	8016870 <__ieee754_fmod+0x11c>
 80167e6:	4a5f      	ldr	r2, [pc, #380]	; (8016964 <__ieee754_fmod+0x210>)
 80167e8:	463b      	mov	r3, r7
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	dc3d      	bgt.n	801686a <__ieee754_fmod+0x116>
 80167ee:	485e      	ldr	r0, [pc, #376]	; (8016968 <__ieee754_fmod+0x214>)
 80167f0:	4281      	cmp	r1, r0
 80167f2:	db4a      	blt.n	801688a <__ieee754_fmod+0x136>
 80167f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80167f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80167fc:	485a      	ldr	r0, [pc, #360]	; (8016968 <__ieee754_fmod+0x214>)
 80167fe:	4282      	cmp	r2, r0
 8016800:	db57      	blt.n	80168b2 <__ieee754_fmod+0x15e>
 8016802:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8016806:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801680a:	1a89      	subs	r1, r1, r2
 801680c:	1b98      	subs	r0, r3, r6
 801680e:	eba4 070e 	sub.w	r7, r4, lr
 8016812:	2900      	cmp	r1, #0
 8016814:	d162      	bne.n	80168dc <__ieee754_fmod+0x188>
 8016816:	4574      	cmp	r4, lr
 8016818:	bf38      	it	cc
 801681a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801681e:	2800      	cmp	r0, #0
 8016820:	bfa4      	itt	ge
 8016822:	463c      	movge	r4, r7
 8016824:	4603      	movge	r3, r0
 8016826:	ea53 0104 	orrs.w	r1, r3, r4
 801682a:	d0c6      	beq.n	80167ba <__ieee754_fmod+0x66>
 801682c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016830:	db69      	blt.n	8016906 <__ieee754_fmod+0x1b2>
 8016832:	494d      	ldr	r1, [pc, #308]	; (8016968 <__ieee754_fmod+0x214>)
 8016834:	428a      	cmp	r2, r1
 8016836:	db6c      	blt.n	8016912 <__ieee754_fmod+0x1be>
 8016838:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801683c:	432b      	orrs	r3, r5
 801683e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8016842:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016846:	4620      	mov	r0, r4
 8016848:	e7a7      	b.n	801679a <__ieee754_fmod+0x46>
 801684a:	3901      	subs	r1, #1
 801684c:	005b      	lsls	r3, r3, #1
 801684e:	e7c3      	b.n	80167d8 <__ieee754_fmod+0x84>
 8016850:	4945      	ldr	r1, [pc, #276]	; (8016968 <__ieee754_fmod+0x214>)
 8016852:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8016856:	2b00      	cmp	r3, #0
 8016858:	ddc0      	ble.n	80167dc <__ieee754_fmod+0x88>
 801685a:	3901      	subs	r1, #1
 801685c:	005b      	lsls	r3, r3, #1
 801685e:	e7fa      	b.n	8016856 <__ieee754_fmod+0x102>
 8016860:	ea4f 5128 	mov.w	r1, r8, asr #20
 8016864:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016868:	e7b8      	b.n	80167dc <__ieee754_fmod+0x88>
 801686a:	3a01      	subs	r2, #1
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	e7bc      	b.n	80167ea <__ieee754_fmod+0x96>
 8016870:	4a3d      	ldr	r2, [pc, #244]	; (8016968 <__ieee754_fmod+0x214>)
 8016872:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8016876:	2b00      	cmp	r3, #0
 8016878:	ddb9      	ble.n	80167ee <__ieee754_fmod+0x9a>
 801687a:	3a01      	subs	r2, #1
 801687c:	005b      	lsls	r3, r3, #1
 801687e:	e7fa      	b.n	8016876 <__ieee754_fmod+0x122>
 8016880:	ea4f 522c 	mov.w	r2, ip, asr #20
 8016884:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016888:	e7b1      	b.n	80167ee <__ieee754_fmod+0x9a>
 801688a:	1a40      	subs	r0, r0, r1
 801688c:	281f      	cmp	r0, #31
 801688e:	dc0a      	bgt.n	80168a6 <__ieee754_fmod+0x152>
 8016890:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8016894:	fa08 f800 	lsl.w	r8, r8, r0
 8016898:	fa2a f303 	lsr.w	r3, sl, r3
 801689c:	ea43 0308 	orr.w	r3, r3, r8
 80168a0:	fa0a f400 	lsl.w	r4, sl, r0
 80168a4:	e7aa      	b.n	80167fc <__ieee754_fmod+0xa8>
 80168a6:	4b31      	ldr	r3, [pc, #196]	; (801696c <__ieee754_fmod+0x218>)
 80168a8:	1a5b      	subs	r3, r3, r1
 80168aa:	fa0a f303 	lsl.w	r3, sl, r3
 80168ae:	2400      	movs	r4, #0
 80168b0:	e7a4      	b.n	80167fc <__ieee754_fmod+0xa8>
 80168b2:	1a80      	subs	r0, r0, r2
 80168b4:	281f      	cmp	r0, #31
 80168b6:	dc0a      	bgt.n	80168ce <__ieee754_fmod+0x17a>
 80168b8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80168bc:	fa0c fc00 	lsl.w	ip, ip, r0
 80168c0:	fa27 f606 	lsr.w	r6, r7, r6
 80168c4:	ea46 060c 	orr.w	r6, r6, ip
 80168c8:	fa07 fe00 	lsl.w	lr, r7, r0
 80168cc:	e79d      	b.n	801680a <__ieee754_fmod+0xb6>
 80168ce:	4e27      	ldr	r6, [pc, #156]	; (801696c <__ieee754_fmod+0x218>)
 80168d0:	1ab6      	subs	r6, r6, r2
 80168d2:	fa07 f606 	lsl.w	r6, r7, r6
 80168d6:	f04f 0e00 	mov.w	lr, #0
 80168da:	e796      	b.n	801680a <__ieee754_fmod+0xb6>
 80168dc:	4574      	cmp	r4, lr
 80168de:	bf38      	it	cc
 80168e0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80168e4:	2800      	cmp	r0, #0
 80168e6:	da05      	bge.n	80168f4 <__ieee754_fmod+0x1a0>
 80168e8:	0fe0      	lsrs	r0, r4, #31
 80168ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80168ee:	0064      	lsls	r4, r4, #1
 80168f0:	3901      	subs	r1, #1
 80168f2:	e78b      	b.n	801680c <__ieee754_fmod+0xb8>
 80168f4:	ea50 0307 	orrs.w	r3, r0, r7
 80168f8:	f43f af5f 	beq.w	80167ba <__ieee754_fmod+0x66>
 80168fc:	0ffb      	lsrs	r3, r7, #31
 80168fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8016902:	007c      	lsls	r4, r7, #1
 8016904:	e7f4      	b.n	80168f0 <__ieee754_fmod+0x19c>
 8016906:	0fe1      	lsrs	r1, r4, #31
 8016908:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801690c:	0064      	lsls	r4, r4, #1
 801690e:	3a01      	subs	r2, #1
 8016910:	e78c      	b.n	801682c <__ieee754_fmod+0xd8>
 8016912:	1a89      	subs	r1, r1, r2
 8016914:	2914      	cmp	r1, #20
 8016916:	dc0a      	bgt.n	801692e <__ieee754_fmod+0x1da>
 8016918:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801691c:	fa03 f202 	lsl.w	r2, r3, r2
 8016920:	40cc      	lsrs	r4, r1
 8016922:	4322      	orrs	r2, r4
 8016924:	410b      	asrs	r3, r1
 8016926:	ea43 0105 	orr.w	r1, r3, r5
 801692a:	4610      	mov	r0, r2
 801692c:	e735      	b.n	801679a <__ieee754_fmod+0x46>
 801692e:	291f      	cmp	r1, #31
 8016930:	dc07      	bgt.n	8016942 <__ieee754_fmod+0x1ee>
 8016932:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8016936:	40cc      	lsrs	r4, r1
 8016938:	fa03 f202 	lsl.w	r2, r3, r2
 801693c:	4322      	orrs	r2, r4
 801693e:	462b      	mov	r3, r5
 8016940:	e7f1      	b.n	8016926 <__ieee754_fmod+0x1d2>
 8016942:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8016946:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801694a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801694e:	32e2      	adds	r2, #226	; 0xe2
 8016950:	fa43 f202 	asr.w	r2, r3, r2
 8016954:	e7f3      	b.n	801693e <__ieee754_fmod+0x1ea>
 8016956:	bf00      	nop
 8016958:	7fefffff 	.word	0x7fefffff
 801695c:	7ff00000 	.word	0x7ff00000
 8016960:	0801c860 	.word	0x0801c860
 8016964:	fffffbed 	.word	0xfffffbed
 8016968:	fffffc02 	.word	0xfffffc02
 801696c:	fffffbe2 	.word	0xfffffbe2

08016970 <__ieee754_pow>:
 8016970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016974:	ed2d 8b06 	vpush	{d8-d10}
 8016978:	b089      	sub	sp, #36	; 0x24
 801697a:	ed8d 1b00 	vstr	d1, [sp]
 801697e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016982:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016986:	ea58 0102 	orrs.w	r1, r8, r2
 801698a:	ec57 6b10 	vmov	r6, r7, d0
 801698e:	d115      	bne.n	80169bc <__ieee754_pow+0x4c>
 8016990:	19b3      	adds	r3, r6, r6
 8016992:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8016996:	4152      	adcs	r2, r2
 8016998:	4299      	cmp	r1, r3
 801699a:	4b89      	ldr	r3, [pc, #548]	; (8016bc0 <__ieee754_pow+0x250>)
 801699c:	4193      	sbcs	r3, r2
 801699e:	f080 84d1 	bcs.w	8017344 <__ieee754_pow+0x9d4>
 80169a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80169a6:	4630      	mov	r0, r6
 80169a8:	4639      	mov	r1, r7
 80169aa:	f7e9 fc97 	bl	80002dc <__adddf3>
 80169ae:	ec41 0b10 	vmov	d0, r0, r1
 80169b2:	b009      	add	sp, #36	; 0x24
 80169b4:	ecbd 8b06 	vpop	{d8-d10}
 80169b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169bc:	4b81      	ldr	r3, [pc, #516]	; (8016bc4 <__ieee754_pow+0x254>)
 80169be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80169c2:	429c      	cmp	r4, r3
 80169c4:	ee10 aa10 	vmov	sl, s0
 80169c8:	463d      	mov	r5, r7
 80169ca:	dc06      	bgt.n	80169da <__ieee754_pow+0x6a>
 80169cc:	d101      	bne.n	80169d2 <__ieee754_pow+0x62>
 80169ce:	2e00      	cmp	r6, #0
 80169d0:	d1e7      	bne.n	80169a2 <__ieee754_pow+0x32>
 80169d2:	4598      	cmp	r8, r3
 80169d4:	dc01      	bgt.n	80169da <__ieee754_pow+0x6a>
 80169d6:	d10f      	bne.n	80169f8 <__ieee754_pow+0x88>
 80169d8:	b172      	cbz	r2, 80169f8 <__ieee754_pow+0x88>
 80169da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80169de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80169e2:	ea55 050a 	orrs.w	r5, r5, sl
 80169e6:	d1dc      	bne.n	80169a2 <__ieee754_pow+0x32>
 80169e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80169ec:	18db      	adds	r3, r3, r3
 80169ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80169f2:	4152      	adcs	r2, r2
 80169f4:	429d      	cmp	r5, r3
 80169f6:	e7d0      	b.n	801699a <__ieee754_pow+0x2a>
 80169f8:	2d00      	cmp	r5, #0
 80169fa:	da3b      	bge.n	8016a74 <__ieee754_pow+0x104>
 80169fc:	4b72      	ldr	r3, [pc, #456]	; (8016bc8 <__ieee754_pow+0x258>)
 80169fe:	4598      	cmp	r8, r3
 8016a00:	dc51      	bgt.n	8016aa6 <__ieee754_pow+0x136>
 8016a02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016a06:	4598      	cmp	r8, r3
 8016a08:	f340 84ab 	ble.w	8017362 <__ieee754_pow+0x9f2>
 8016a0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016a10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016a14:	2b14      	cmp	r3, #20
 8016a16:	dd0f      	ble.n	8016a38 <__ieee754_pow+0xc8>
 8016a18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016a1c:	fa22 f103 	lsr.w	r1, r2, r3
 8016a20:	fa01 f303 	lsl.w	r3, r1, r3
 8016a24:	4293      	cmp	r3, r2
 8016a26:	f040 849c 	bne.w	8017362 <__ieee754_pow+0x9f2>
 8016a2a:	f001 0101 	and.w	r1, r1, #1
 8016a2e:	f1c1 0302 	rsb	r3, r1, #2
 8016a32:	9304      	str	r3, [sp, #16]
 8016a34:	b182      	cbz	r2, 8016a58 <__ieee754_pow+0xe8>
 8016a36:	e05f      	b.n	8016af8 <__ieee754_pow+0x188>
 8016a38:	2a00      	cmp	r2, #0
 8016a3a:	d15b      	bne.n	8016af4 <__ieee754_pow+0x184>
 8016a3c:	f1c3 0314 	rsb	r3, r3, #20
 8016a40:	fa48 f103 	asr.w	r1, r8, r3
 8016a44:	fa01 f303 	lsl.w	r3, r1, r3
 8016a48:	4543      	cmp	r3, r8
 8016a4a:	f040 8487 	bne.w	801735c <__ieee754_pow+0x9ec>
 8016a4e:	f001 0101 	and.w	r1, r1, #1
 8016a52:	f1c1 0302 	rsb	r3, r1, #2
 8016a56:	9304      	str	r3, [sp, #16]
 8016a58:	4b5c      	ldr	r3, [pc, #368]	; (8016bcc <__ieee754_pow+0x25c>)
 8016a5a:	4598      	cmp	r8, r3
 8016a5c:	d132      	bne.n	8016ac4 <__ieee754_pow+0x154>
 8016a5e:	f1b9 0f00 	cmp.w	r9, #0
 8016a62:	f280 8477 	bge.w	8017354 <__ieee754_pow+0x9e4>
 8016a66:	4959      	ldr	r1, [pc, #356]	; (8016bcc <__ieee754_pow+0x25c>)
 8016a68:	4632      	mov	r2, r6
 8016a6a:	463b      	mov	r3, r7
 8016a6c:	2000      	movs	r0, #0
 8016a6e:	f7e9 ff15 	bl	800089c <__aeabi_ddiv>
 8016a72:	e79c      	b.n	80169ae <__ieee754_pow+0x3e>
 8016a74:	2300      	movs	r3, #0
 8016a76:	9304      	str	r3, [sp, #16]
 8016a78:	2a00      	cmp	r2, #0
 8016a7a:	d13d      	bne.n	8016af8 <__ieee754_pow+0x188>
 8016a7c:	4b51      	ldr	r3, [pc, #324]	; (8016bc4 <__ieee754_pow+0x254>)
 8016a7e:	4598      	cmp	r8, r3
 8016a80:	d1ea      	bne.n	8016a58 <__ieee754_pow+0xe8>
 8016a82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016a86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016a8a:	ea53 030a 	orrs.w	r3, r3, sl
 8016a8e:	f000 8459 	beq.w	8017344 <__ieee754_pow+0x9d4>
 8016a92:	4b4f      	ldr	r3, [pc, #316]	; (8016bd0 <__ieee754_pow+0x260>)
 8016a94:	429c      	cmp	r4, r3
 8016a96:	dd08      	ble.n	8016aaa <__ieee754_pow+0x13a>
 8016a98:	f1b9 0f00 	cmp.w	r9, #0
 8016a9c:	f2c0 8456 	blt.w	801734c <__ieee754_pow+0x9dc>
 8016aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016aa4:	e783      	b.n	80169ae <__ieee754_pow+0x3e>
 8016aa6:	2302      	movs	r3, #2
 8016aa8:	e7e5      	b.n	8016a76 <__ieee754_pow+0x106>
 8016aaa:	f1b9 0f00 	cmp.w	r9, #0
 8016aae:	f04f 0000 	mov.w	r0, #0
 8016ab2:	f04f 0100 	mov.w	r1, #0
 8016ab6:	f6bf af7a 	bge.w	80169ae <__ieee754_pow+0x3e>
 8016aba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016abe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016ac2:	e774      	b.n	80169ae <__ieee754_pow+0x3e>
 8016ac4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016ac8:	d106      	bne.n	8016ad8 <__ieee754_pow+0x168>
 8016aca:	4632      	mov	r2, r6
 8016acc:	463b      	mov	r3, r7
 8016ace:	4630      	mov	r0, r6
 8016ad0:	4639      	mov	r1, r7
 8016ad2:	f7e9 fdb9 	bl	8000648 <__aeabi_dmul>
 8016ad6:	e76a      	b.n	80169ae <__ieee754_pow+0x3e>
 8016ad8:	4b3e      	ldr	r3, [pc, #248]	; (8016bd4 <__ieee754_pow+0x264>)
 8016ada:	4599      	cmp	r9, r3
 8016adc:	d10c      	bne.n	8016af8 <__ieee754_pow+0x188>
 8016ade:	2d00      	cmp	r5, #0
 8016ae0:	db0a      	blt.n	8016af8 <__ieee754_pow+0x188>
 8016ae2:	ec47 6b10 	vmov	d0, r6, r7
 8016ae6:	b009      	add	sp, #36	; 0x24
 8016ae8:	ecbd 8b06 	vpop	{d8-d10}
 8016aec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af0:	f000 bd20 	b.w	8017534 <__ieee754_sqrt>
 8016af4:	2300      	movs	r3, #0
 8016af6:	9304      	str	r3, [sp, #16]
 8016af8:	ec47 6b10 	vmov	d0, r6, r7
 8016afc:	f000 fc62 	bl	80173c4 <fabs>
 8016b00:	ec51 0b10 	vmov	r0, r1, d0
 8016b04:	f1ba 0f00 	cmp.w	sl, #0
 8016b08:	d129      	bne.n	8016b5e <__ieee754_pow+0x1ee>
 8016b0a:	b124      	cbz	r4, 8016b16 <__ieee754_pow+0x1a6>
 8016b0c:	4b2f      	ldr	r3, [pc, #188]	; (8016bcc <__ieee754_pow+0x25c>)
 8016b0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016b12:	429a      	cmp	r2, r3
 8016b14:	d123      	bne.n	8016b5e <__ieee754_pow+0x1ee>
 8016b16:	f1b9 0f00 	cmp.w	r9, #0
 8016b1a:	da05      	bge.n	8016b28 <__ieee754_pow+0x1b8>
 8016b1c:	4602      	mov	r2, r0
 8016b1e:	460b      	mov	r3, r1
 8016b20:	2000      	movs	r0, #0
 8016b22:	492a      	ldr	r1, [pc, #168]	; (8016bcc <__ieee754_pow+0x25c>)
 8016b24:	f7e9 feba 	bl	800089c <__aeabi_ddiv>
 8016b28:	2d00      	cmp	r5, #0
 8016b2a:	f6bf af40 	bge.w	80169ae <__ieee754_pow+0x3e>
 8016b2e:	9b04      	ldr	r3, [sp, #16]
 8016b30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016b34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016b38:	431c      	orrs	r4, r3
 8016b3a:	d108      	bne.n	8016b4e <__ieee754_pow+0x1de>
 8016b3c:	4602      	mov	r2, r0
 8016b3e:	460b      	mov	r3, r1
 8016b40:	4610      	mov	r0, r2
 8016b42:	4619      	mov	r1, r3
 8016b44:	f7e9 fbc8 	bl	80002d8 <__aeabi_dsub>
 8016b48:	4602      	mov	r2, r0
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	e78f      	b.n	8016a6e <__ieee754_pow+0xfe>
 8016b4e:	9b04      	ldr	r3, [sp, #16]
 8016b50:	2b01      	cmp	r3, #1
 8016b52:	f47f af2c 	bne.w	80169ae <__ieee754_pow+0x3e>
 8016b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b5a:	4619      	mov	r1, r3
 8016b5c:	e727      	b.n	80169ae <__ieee754_pow+0x3e>
 8016b5e:	0feb      	lsrs	r3, r5, #31
 8016b60:	3b01      	subs	r3, #1
 8016b62:	9306      	str	r3, [sp, #24]
 8016b64:	9a06      	ldr	r2, [sp, #24]
 8016b66:	9b04      	ldr	r3, [sp, #16]
 8016b68:	4313      	orrs	r3, r2
 8016b6a:	d102      	bne.n	8016b72 <__ieee754_pow+0x202>
 8016b6c:	4632      	mov	r2, r6
 8016b6e:	463b      	mov	r3, r7
 8016b70:	e7e6      	b.n	8016b40 <__ieee754_pow+0x1d0>
 8016b72:	4b19      	ldr	r3, [pc, #100]	; (8016bd8 <__ieee754_pow+0x268>)
 8016b74:	4598      	cmp	r8, r3
 8016b76:	f340 80fb 	ble.w	8016d70 <__ieee754_pow+0x400>
 8016b7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016b7e:	4598      	cmp	r8, r3
 8016b80:	4b13      	ldr	r3, [pc, #76]	; (8016bd0 <__ieee754_pow+0x260>)
 8016b82:	dd0c      	ble.n	8016b9e <__ieee754_pow+0x22e>
 8016b84:	429c      	cmp	r4, r3
 8016b86:	dc0f      	bgt.n	8016ba8 <__ieee754_pow+0x238>
 8016b88:	f1b9 0f00 	cmp.w	r9, #0
 8016b8c:	da0f      	bge.n	8016bae <__ieee754_pow+0x23e>
 8016b8e:	2000      	movs	r0, #0
 8016b90:	b009      	add	sp, #36	; 0x24
 8016b92:	ecbd 8b06 	vpop	{d8-d10}
 8016b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b9a:	f000 bcc2 	b.w	8017522 <__math_oflow>
 8016b9e:	429c      	cmp	r4, r3
 8016ba0:	dbf2      	blt.n	8016b88 <__ieee754_pow+0x218>
 8016ba2:	4b0a      	ldr	r3, [pc, #40]	; (8016bcc <__ieee754_pow+0x25c>)
 8016ba4:	429c      	cmp	r4, r3
 8016ba6:	dd19      	ble.n	8016bdc <__ieee754_pow+0x26c>
 8016ba8:	f1b9 0f00 	cmp.w	r9, #0
 8016bac:	dcef      	bgt.n	8016b8e <__ieee754_pow+0x21e>
 8016bae:	2000      	movs	r0, #0
 8016bb0:	b009      	add	sp, #36	; 0x24
 8016bb2:	ecbd 8b06 	vpop	{d8-d10}
 8016bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bba:	f000 bca9 	b.w	8017510 <__math_uflow>
 8016bbe:	bf00      	nop
 8016bc0:	fff00000 	.word	0xfff00000
 8016bc4:	7ff00000 	.word	0x7ff00000
 8016bc8:	433fffff 	.word	0x433fffff
 8016bcc:	3ff00000 	.word	0x3ff00000
 8016bd0:	3fefffff 	.word	0x3fefffff
 8016bd4:	3fe00000 	.word	0x3fe00000
 8016bd8:	41e00000 	.word	0x41e00000
 8016bdc:	4b60      	ldr	r3, [pc, #384]	; (8016d60 <__ieee754_pow+0x3f0>)
 8016bde:	2200      	movs	r2, #0
 8016be0:	f7e9 fb7a 	bl	80002d8 <__aeabi_dsub>
 8016be4:	a354      	add	r3, pc, #336	; (adr r3, 8016d38 <__ieee754_pow+0x3c8>)
 8016be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bea:	4604      	mov	r4, r0
 8016bec:	460d      	mov	r5, r1
 8016bee:	f7e9 fd2b 	bl	8000648 <__aeabi_dmul>
 8016bf2:	a353      	add	r3, pc, #332	; (adr r3, 8016d40 <__ieee754_pow+0x3d0>)
 8016bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf8:	4606      	mov	r6, r0
 8016bfa:	460f      	mov	r7, r1
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	4629      	mov	r1, r5
 8016c00:	f7e9 fd22 	bl	8000648 <__aeabi_dmul>
 8016c04:	4b57      	ldr	r3, [pc, #348]	; (8016d64 <__ieee754_pow+0x3f4>)
 8016c06:	4682      	mov	sl, r0
 8016c08:	468b      	mov	fp, r1
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	4629      	mov	r1, r5
 8016c10:	f7e9 fd1a 	bl	8000648 <__aeabi_dmul>
 8016c14:	4602      	mov	r2, r0
 8016c16:	460b      	mov	r3, r1
 8016c18:	a14b      	add	r1, pc, #300	; (adr r1, 8016d48 <__ieee754_pow+0x3d8>)
 8016c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c1e:	f7e9 fb5b 	bl	80002d8 <__aeabi_dsub>
 8016c22:	4622      	mov	r2, r4
 8016c24:	462b      	mov	r3, r5
 8016c26:	f7e9 fd0f 	bl	8000648 <__aeabi_dmul>
 8016c2a:	4602      	mov	r2, r0
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	2000      	movs	r0, #0
 8016c30:	494d      	ldr	r1, [pc, #308]	; (8016d68 <__ieee754_pow+0x3f8>)
 8016c32:	f7e9 fb51 	bl	80002d8 <__aeabi_dsub>
 8016c36:	4622      	mov	r2, r4
 8016c38:	4680      	mov	r8, r0
 8016c3a:	4689      	mov	r9, r1
 8016c3c:	462b      	mov	r3, r5
 8016c3e:	4620      	mov	r0, r4
 8016c40:	4629      	mov	r1, r5
 8016c42:	f7e9 fd01 	bl	8000648 <__aeabi_dmul>
 8016c46:	4602      	mov	r2, r0
 8016c48:	460b      	mov	r3, r1
 8016c4a:	4640      	mov	r0, r8
 8016c4c:	4649      	mov	r1, r9
 8016c4e:	f7e9 fcfb 	bl	8000648 <__aeabi_dmul>
 8016c52:	a33f      	add	r3, pc, #252	; (adr r3, 8016d50 <__ieee754_pow+0x3e0>)
 8016c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c58:	f7e9 fcf6 	bl	8000648 <__aeabi_dmul>
 8016c5c:	4602      	mov	r2, r0
 8016c5e:	460b      	mov	r3, r1
 8016c60:	4650      	mov	r0, sl
 8016c62:	4659      	mov	r1, fp
 8016c64:	f7e9 fb38 	bl	80002d8 <__aeabi_dsub>
 8016c68:	4602      	mov	r2, r0
 8016c6a:	460b      	mov	r3, r1
 8016c6c:	4680      	mov	r8, r0
 8016c6e:	4689      	mov	r9, r1
 8016c70:	4630      	mov	r0, r6
 8016c72:	4639      	mov	r1, r7
 8016c74:	f7e9 fb32 	bl	80002dc <__adddf3>
 8016c78:	2000      	movs	r0, #0
 8016c7a:	4632      	mov	r2, r6
 8016c7c:	463b      	mov	r3, r7
 8016c7e:	4604      	mov	r4, r0
 8016c80:	460d      	mov	r5, r1
 8016c82:	f7e9 fb29 	bl	80002d8 <__aeabi_dsub>
 8016c86:	4602      	mov	r2, r0
 8016c88:	460b      	mov	r3, r1
 8016c8a:	4640      	mov	r0, r8
 8016c8c:	4649      	mov	r1, r9
 8016c8e:	f7e9 fb23 	bl	80002d8 <__aeabi_dsub>
 8016c92:	9b04      	ldr	r3, [sp, #16]
 8016c94:	9a06      	ldr	r2, [sp, #24]
 8016c96:	3b01      	subs	r3, #1
 8016c98:	4313      	orrs	r3, r2
 8016c9a:	4682      	mov	sl, r0
 8016c9c:	468b      	mov	fp, r1
 8016c9e:	f040 81e7 	bne.w	8017070 <__ieee754_pow+0x700>
 8016ca2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016d58 <__ieee754_pow+0x3e8>
 8016ca6:	eeb0 8a47 	vmov.f32	s16, s14
 8016caa:	eef0 8a67 	vmov.f32	s17, s15
 8016cae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016cb2:	2600      	movs	r6, #0
 8016cb4:	4632      	mov	r2, r6
 8016cb6:	463b      	mov	r3, r7
 8016cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016cbc:	f7e9 fb0c 	bl	80002d8 <__aeabi_dsub>
 8016cc0:	4622      	mov	r2, r4
 8016cc2:	462b      	mov	r3, r5
 8016cc4:	f7e9 fcc0 	bl	8000648 <__aeabi_dmul>
 8016cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ccc:	4680      	mov	r8, r0
 8016cce:	4689      	mov	r9, r1
 8016cd0:	4650      	mov	r0, sl
 8016cd2:	4659      	mov	r1, fp
 8016cd4:	f7e9 fcb8 	bl	8000648 <__aeabi_dmul>
 8016cd8:	4602      	mov	r2, r0
 8016cda:	460b      	mov	r3, r1
 8016cdc:	4640      	mov	r0, r8
 8016cde:	4649      	mov	r1, r9
 8016ce0:	f7e9 fafc 	bl	80002dc <__adddf3>
 8016ce4:	4632      	mov	r2, r6
 8016ce6:	463b      	mov	r3, r7
 8016ce8:	4680      	mov	r8, r0
 8016cea:	4689      	mov	r9, r1
 8016cec:	4620      	mov	r0, r4
 8016cee:	4629      	mov	r1, r5
 8016cf0:	f7e9 fcaa 	bl	8000648 <__aeabi_dmul>
 8016cf4:	460b      	mov	r3, r1
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	460d      	mov	r5, r1
 8016cfa:	4602      	mov	r2, r0
 8016cfc:	4649      	mov	r1, r9
 8016cfe:	4640      	mov	r0, r8
 8016d00:	f7e9 faec 	bl	80002dc <__adddf3>
 8016d04:	4b19      	ldr	r3, [pc, #100]	; (8016d6c <__ieee754_pow+0x3fc>)
 8016d06:	4299      	cmp	r1, r3
 8016d08:	ec45 4b19 	vmov	d9, r4, r5
 8016d0c:	4606      	mov	r6, r0
 8016d0e:	460f      	mov	r7, r1
 8016d10:	468b      	mov	fp, r1
 8016d12:	f340 82f0 	ble.w	80172f6 <__ieee754_pow+0x986>
 8016d16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016d1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016d1e:	4303      	orrs	r3, r0
 8016d20:	f000 81e4 	beq.w	80170ec <__ieee754_pow+0x77c>
 8016d24:	ec51 0b18 	vmov	r0, r1, d8
 8016d28:	2200      	movs	r2, #0
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	f7e9 fefe 	bl	8000b2c <__aeabi_dcmplt>
 8016d30:	3800      	subs	r0, #0
 8016d32:	bf18      	it	ne
 8016d34:	2001      	movne	r0, #1
 8016d36:	e72b      	b.n	8016b90 <__ieee754_pow+0x220>
 8016d38:	60000000 	.word	0x60000000
 8016d3c:	3ff71547 	.word	0x3ff71547
 8016d40:	f85ddf44 	.word	0xf85ddf44
 8016d44:	3e54ae0b 	.word	0x3e54ae0b
 8016d48:	55555555 	.word	0x55555555
 8016d4c:	3fd55555 	.word	0x3fd55555
 8016d50:	652b82fe 	.word	0x652b82fe
 8016d54:	3ff71547 	.word	0x3ff71547
 8016d58:	00000000 	.word	0x00000000
 8016d5c:	bff00000 	.word	0xbff00000
 8016d60:	3ff00000 	.word	0x3ff00000
 8016d64:	3fd00000 	.word	0x3fd00000
 8016d68:	3fe00000 	.word	0x3fe00000
 8016d6c:	408fffff 	.word	0x408fffff
 8016d70:	4bd5      	ldr	r3, [pc, #852]	; (80170c8 <__ieee754_pow+0x758>)
 8016d72:	402b      	ands	r3, r5
 8016d74:	2200      	movs	r2, #0
 8016d76:	b92b      	cbnz	r3, 8016d84 <__ieee754_pow+0x414>
 8016d78:	4bd4      	ldr	r3, [pc, #848]	; (80170cc <__ieee754_pow+0x75c>)
 8016d7a:	f7e9 fc65 	bl	8000648 <__aeabi_dmul>
 8016d7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016d82:	460c      	mov	r4, r1
 8016d84:	1523      	asrs	r3, r4, #20
 8016d86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016d8a:	4413      	add	r3, r2
 8016d8c:	9305      	str	r3, [sp, #20]
 8016d8e:	4bd0      	ldr	r3, [pc, #832]	; (80170d0 <__ieee754_pow+0x760>)
 8016d90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016d94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016d98:	429c      	cmp	r4, r3
 8016d9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016d9e:	dd08      	ble.n	8016db2 <__ieee754_pow+0x442>
 8016da0:	4bcc      	ldr	r3, [pc, #816]	; (80170d4 <__ieee754_pow+0x764>)
 8016da2:	429c      	cmp	r4, r3
 8016da4:	f340 8162 	ble.w	801706c <__ieee754_pow+0x6fc>
 8016da8:	9b05      	ldr	r3, [sp, #20]
 8016daa:	3301      	adds	r3, #1
 8016dac:	9305      	str	r3, [sp, #20]
 8016dae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016db2:	2400      	movs	r4, #0
 8016db4:	00e3      	lsls	r3, r4, #3
 8016db6:	9307      	str	r3, [sp, #28]
 8016db8:	4bc7      	ldr	r3, [pc, #796]	; (80170d8 <__ieee754_pow+0x768>)
 8016dba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016dbe:	ed93 7b00 	vldr	d7, [r3]
 8016dc2:	4629      	mov	r1, r5
 8016dc4:	ec53 2b17 	vmov	r2, r3, d7
 8016dc8:	eeb0 9a47 	vmov.f32	s18, s14
 8016dcc:	eef0 9a67 	vmov.f32	s19, s15
 8016dd0:	4682      	mov	sl, r0
 8016dd2:	f7e9 fa81 	bl	80002d8 <__aeabi_dsub>
 8016dd6:	4652      	mov	r2, sl
 8016dd8:	4606      	mov	r6, r0
 8016dda:	460f      	mov	r7, r1
 8016ddc:	462b      	mov	r3, r5
 8016dde:	ec51 0b19 	vmov	r0, r1, d9
 8016de2:	f7e9 fa7b 	bl	80002dc <__adddf3>
 8016de6:	4602      	mov	r2, r0
 8016de8:	460b      	mov	r3, r1
 8016dea:	2000      	movs	r0, #0
 8016dec:	49bb      	ldr	r1, [pc, #748]	; (80170dc <__ieee754_pow+0x76c>)
 8016dee:	f7e9 fd55 	bl	800089c <__aeabi_ddiv>
 8016df2:	ec41 0b1a 	vmov	d10, r0, r1
 8016df6:	4602      	mov	r2, r0
 8016df8:	460b      	mov	r3, r1
 8016dfa:	4630      	mov	r0, r6
 8016dfc:	4639      	mov	r1, r7
 8016dfe:	f7e9 fc23 	bl	8000648 <__aeabi_dmul>
 8016e02:	2300      	movs	r3, #0
 8016e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016e08:	9302      	str	r3, [sp, #8]
 8016e0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016e0e:	46ab      	mov	fp, r5
 8016e10:	106d      	asrs	r5, r5, #1
 8016e12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016e16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016e1a:	ec41 0b18 	vmov	d8, r0, r1
 8016e1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016e22:	2200      	movs	r2, #0
 8016e24:	4640      	mov	r0, r8
 8016e26:	4649      	mov	r1, r9
 8016e28:	4614      	mov	r4, r2
 8016e2a:	461d      	mov	r5, r3
 8016e2c:	f7e9 fc0c 	bl	8000648 <__aeabi_dmul>
 8016e30:	4602      	mov	r2, r0
 8016e32:	460b      	mov	r3, r1
 8016e34:	4630      	mov	r0, r6
 8016e36:	4639      	mov	r1, r7
 8016e38:	f7e9 fa4e 	bl	80002d8 <__aeabi_dsub>
 8016e3c:	ec53 2b19 	vmov	r2, r3, d9
 8016e40:	4606      	mov	r6, r0
 8016e42:	460f      	mov	r7, r1
 8016e44:	4620      	mov	r0, r4
 8016e46:	4629      	mov	r1, r5
 8016e48:	f7e9 fa46 	bl	80002d8 <__aeabi_dsub>
 8016e4c:	4602      	mov	r2, r0
 8016e4e:	460b      	mov	r3, r1
 8016e50:	4650      	mov	r0, sl
 8016e52:	4659      	mov	r1, fp
 8016e54:	f7e9 fa40 	bl	80002d8 <__aeabi_dsub>
 8016e58:	4642      	mov	r2, r8
 8016e5a:	464b      	mov	r3, r9
 8016e5c:	f7e9 fbf4 	bl	8000648 <__aeabi_dmul>
 8016e60:	4602      	mov	r2, r0
 8016e62:	460b      	mov	r3, r1
 8016e64:	4630      	mov	r0, r6
 8016e66:	4639      	mov	r1, r7
 8016e68:	f7e9 fa36 	bl	80002d8 <__aeabi_dsub>
 8016e6c:	ec53 2b1a 	vmov	r2, r3, d10
 8016e70:	f7e9 fbea 	bl	8000648 <__aeabi_dmul>
 8016e74:	ec53 2b18 	vmov	r2, r3, d8
 8016e78:	ec41 0b19 	vmov	d9, r0, r1
 8016e7c:	ec51 0b18 	vmov	r0, r1, d8
 8016e80:	f7e9 fbe2 	bl	8000648 <__aeabi_dmul>
 8016e84:	a37c      	add	r3, pc, #496	; (adr r3, 8017078 <__ieee754_pow+0x708>)
 8016e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e8a:	4604      	mov	r4, r0
 8016e8c:	460d      	mov	r5, r1
 8016e8e:	f7e9 fbdb 	bl	8000648 <__aeabi_dmul>
 8016e92:	a37b      	add	r3, pc, #492	; (adr r3, 8017080 <__ieee754_pow+0x710>)
 8016e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e98:	f7e9 fa20 	bl	80002dc <__adddf3>
 8016e9c:	4622      	mov	r2, r4
 8016e9e:	462b      	mov	r3, r5
 8016ea0:	f7e9 fbd2 	bl	8000648 <__aeabi_dmul>
 8016ea4:	a378      	add	r3, pc, #480	; (adr r3, 8017088 <__ieee754_pow+0x718>)
 8016ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eaa:	f7e9 fa17 	bl	80002dc <__adddf3>
 8016eae:	4622      	mov	r2, r4
 8016eb0:	462b      	mov	r3, r5
 8016eb2:	f7e9 fbc9 	bl	8000648 <__aeabi_dmul>
 8016eb6:	a376      	add	r3, pc, #472	; (adr r3, 8017090 <__ieee754_pow+0x720>)
 8016eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ebc:	f7e9 fa0e 	bl	80002dc <__adddf3>
 8016ec0:	4622      	mov	r2, r4
 8016ec2:	462b      	mov	r3, r5
 8016ec4:	f7e9 fbc0 	bl	8000648 <__aeabi_dmul>
 8016ec8:	a373      	add	r3, pc, #460	; (adr r3, 8017098 <__ieee754_pow+0x728>)
 8016eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ece:	f7e9 fa05 	bl	80002dc <__adddf3>
 8016ed2:	4622      	mov	r2, r4
 8016ed4:	462b      	mov	r3, r5
 8016ed6:	f7e9 fbb7 	bl	8000648 <__aeabi_dmul>
 8016eda:	a371      	add	r3, pc, #452	; (adr r3, 80170a0 <__ieee754_pow+0x730>)
 8016edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee0:	f7e9 f9fc 	bl	80002dc <__adddf3>
 8016ee4:	4622      	mov	r2, r4
 8016ee6:	4606      	mov	r6, r0
 8016ee8:	460f      	mov	r7, r1
 8016eea:	462b      	mov	r3, r5
 8016eec:	4620      	mov	r0, r4
 8016eee:	4629      	mov	r1, r5
 8016ef0:	f7e9 fbaa 	bl	8000648 <__aeabi_dmul>
 8016ef4:	4602      	mov	r2, r0
 8016ef6:	460b      	mov	r3, r1
 8016ef8:	4630      	mov	r0, r6
 8016efa:	4639      	mov	r1, r7
 8016efc:	f7e9 fba4 	bl	8000648 <__aeabi_dmul>
 8016f00:	4642      	mov	r2, r8
 8016f02:	4604      	mov	r4, r0
 8016f04:	460d      	mov	r5, r1
 8016f06:	464b      	mov	r3, r9
 8016f08:	ec51 0b18 	vmov	r0, r1, d8
 8016f0c:	f7e9 f9e6 	bl	80002dc <__adddf3>
 8016f10:	ec53 2b19 	vmov	r2, r3, d9
 8016f14:	f7e9 fb98 	bl	8000648 <__aeabi_dmul>
 8016f18:	4622      	mov	r2, r4
 8016f1a:	462b      	mov	r3, r5
 8016f1c:	f7e9 f9de 	bl	80002dc <__adddf3>
 8016f20:	4642      	mov	r2, r8
 8016f22:	4682      	mov	sl, r0
 8016f24:	468b      	mov	fp, r1
 8016f26:	464b      	mov	r3, r9
 8016f28:	4640      	mov	r0, r8
 8016f2a:	4649      	mov	r1, r9
 8016f2c:	f7e9 fb8c 	bl	8000648 <__aeabi_dmul>
 8016f30:	4b6b      	ldr	r3, [pc, #428]	; (80170e0 <__ieee754_pow+0x770>)
 8016f32:	2200      	movs	r2, #0
 8016f34:	4606      	mov	r6, r0
 8016f36:	460f      	mov	r7, r1
 8016f38:	f7e9 f9d0 	bl	80002dc <__adddf3>
 8016f3c:	4652      	mov	r2, sl
 8016f3e:	465b      	mov	r3, fp
 8016f40:	f7e9 f9cc 	bl	80002dc <__adddf3>
 8016f44:	2000      	movs	r0, #0
 8016f46:	4604      	mov	r4, r0
 8016f48:	460d      	mov	r5, r1
 8016f4a:	4602      	mov	r2, r0
 8016f4c:	460b      	mov	r3, r1
 8016f4e:	4640      	mov	r0, r8
 8016f50:	4649      	mov	r1, r9
 8016f52:	f7e9 fb79 	bl	8000648 <__aeabi_dmul>
 8016f56:	4b62      	ldr	r3, [pc, #392]	; (80170e0 <__ieee754_pow+0x770>)
 8016f58:	4680      	mov	r8, r0
 8016f5a:	4689      	mov	r9, r1
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	4620      	mov	r0, r4
 8016f60:	4629      	mov	r1, r5
 8016f62:	f7e9 f9b9 	bl	80002d8 <__aeabi_dsub>
 8016f66:	4632      	mov	r2, r6
 8016f68:	463b      	mov	r3, r7
 8016f6a:	f7e9 f9b5 	bl	80002d8 <__aeabi_dsub>
 8016f6e:	4602      	mov	r2, r0
 8016f70:	460b      	mov	r3, r1
 8016f72:	4650      	mov	r0, sl
 8016f74:	4659      	mov	r1, fp
 8016f76:	f7e9 f9af 	bl	80002d8 <__aeabi_dsub>
 8016f7a:	ec53 2b18 	vmov	r2, r3, d8
 8016f7e:	f7e9 fb63 	bl	8000648 <__aeabi_dmul>
 8016f82:	4622      	mov	r2, r4
 8016f84:	4606      	mov	r6, r0
 8016f86:	460f      	mov	r7, r1
 8016f88:	462b      	mov	r3, r5
 8016f8a:	ec51 0b19 	vmov	r0, r1, d9
 8016f8e:	f7e9 fb5b 	bl	8000648 <__aeabi_dmul>
 8016f92:	4602      	mov	r2, r0
 8016f94:	460b      	mov	r3, r1
 8016f96:	4630      	mov	r0, r6
 8016f98:	4639      	mov	r1, r7
 8016f9a:	f7e9 f99f 	bl	80002dc <__adddf3>
 8016f9e:	4606      	mov	r6, r0
 8016fa0:	460f      	mov	r7, r1
 8016fa2:	4602      	mov	r2, r0
 8016fa4:	460b      	mov	r3, r1
 8016fa6:	4640      	mov	r0, r8
 8016fa8:	4649      	mov	r1, r9
 8016faa:	f7e9 f997 	bl	80002dc <__adddf3>
 8016fae:	a33e      	add	r3, pc, #248	; (adr r3, 80170a8 <__ieee754_pow+0x738>)
 8016fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb4:	2000      	movs	r0, #0
 8016fb6:	4604      	mov	r4, r0
 8016fb8:	460d      	mov	r5, r1
 8016fba:	f7e9 fb45 	bl	8000648 <__aeabi_dmul>
 8016fbe:	4642      	mov	r2, r8
 8016fc0:	ec41 0b18 	vmov	d8, r0, r1
 8016fc4:	464b      	mov	r3, r9
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	4629      	mov	r1, r5
 8016fca:	f7e9 f985 	bl	80002d8 <__aeabi_dsub>
 8016fce:	4602      	mov	r2, r0
 8016fd0:	460b      	mov	r3, r1
 8016fd2:	4630      	mov	r0, r6
 8016fd4:	4639      	mov	r1, r7
 8016fd6:	f7e9 f97f 	bl	80002d8 <__aeabi_dsub>
 8016fda:	a335      	add	r3, pc, #212	; (adr r3, 80170b0 <__ieee754_pow+0x740>)
 8016fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe0:	f7e9 fb32 	bl	8000648 <__aeabi_dmul>
 8016fe4:	a334      	add	r3, pc, #208	; (adr r3, 80170b8 <__ieee754_pow+0x748>)
 8016fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fea:	4606      	mov	r6, r0
 8016fec:	460f      	mov	r7, r1
 8016fee:	4620      	mov	r0, r4
 8016ff0:	4629      	mov	r1, r5
 8016ff2:	f7e9 fb29 	bl	8000648 <__aeabi_dmul>
 8016ff6:	4602      	mov	r2, r0
 8016ff8:	460b      	mov	r3, r1
 8016ffa:	4630      	mov	r0, r6
 8016ffc:	4639      	mov	r1, r7
 8016ffe:	f7e9 f96d 	bl	80002dc <__adddf3>
 8017002:	9a07      	ldr	r2, [sp, #28]
 8017004:	4b37      	ldr	r3, [pc, #220]	; (80170e4 <__ieee754_pow+0x774>)
 8017006:	4413      	add	r3, r2
 8017008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700c:	f7e9 f966 	bl	80002dc <__adddf3>
 8017010:	4682      	mov	sl, r0
 8017012:	9805      	ldr	r0, [sp, #20]
 8017014:	468b      	mov	fp, r1
 8017016:	f7e9 faad 	bl	8000574 <__aeabi_i2d>
 801701a:	9a07      	ldr	r2, [sp, #28]
 801701c:	4b32      	ldr	r3, [pc, #200]	; (80170e8 <__ieee754_pow+0x778>)
 801701e:	4413      	add	r3, r2
 8017020:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017024:	4606      	mov	r6, r0
 8017026:	460f      	mov	r7, r1
 8017028:	4652      	mov	r2, sl
 801702a:	465b      	mov	r3, fp
 801702c:	ec51 0b18 	vmov	r0, r1, d8
 8017030:	f7e9 f954 	bl	80002dc <__adddf3>
 8017034:	4642      	mov	r2, r8
 8017036:	464b      	mov	r3, r9
 8017038:	f7e9 f950 	bl	80002dc <__adddf3>
 801703c:	4632      	mov	r2, r6
 801703e:	463b      	mov	r3, r7
 8017040:	f7e9 f94c 	bl	80002dc <__adddf3>
 8017044:	2000      	movs	r0, #0
 8017046:	4632      	mov	r2, r6
 8017048:	463b      	mov	r3, r7
 801704a:	4604      	mov	r4, r0
 801704c:	460d      	mov	r5, r1
 801704e:	f7e9 f943 	bl	80002d8 <__aeabi_dsub>
 8017052:	4642      	mov	r2, r8
 8017054:	464b      	mov	r3, r9
 8017056:	f7e9 f93f 	bl	80002d8 <__aeabi_dsub>
 801705a:	ec53 2b18 	vmov	r2, r3, d8
 801705e:	f7e9 f93b 	bl	80002d8 <__aeabi_dsub>
 8017062:	4602      	mov	r2, r0
 8017064:	460b      	mov	r3, r1
 8017066:	4650      	mov	r0, sl
 8017068:	4659      	mov	r1, fp
 801706a:	e610      	b.n	8016c8e <__ieee754_pow+0x31e>
 801706c:	2401      	movs	r4, #1
 801706e:	e6a1      	b.n	8016db4 <__ieee754_pow+0x444>
 8017070:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80170c0 <__ieee754_pow+0x750>
 8017074:	e617      	b.n	8016ca6 <__ieee754_pow+0x336>
 8017076:	bf00      	nop
 8017078:	4a454eef 	.word	0x4a454eef
 801707c:	3fca7e28 	.word	0x3fca7e28
 8017080:	93c9db65 	.word	0x93c9db65
 8017084:	3fcd864a 	.word	0x3fcd864a
 8017088:	a91d4101 	.word	0xa91d4101
 801708c:	3fd17460 	.word	0x3fd17460
 8017090:	518f264d 	.word	0x518f264d
 8017094:	3fd55555 	.word	0x3fd55555
 8017098:	db6fabff 	.word	0xdb6fabff
 801709c:	3fdb6db6 	.word	0x3fdb6db6
 80170a0:	33333303 	.word	0x33333303
 80170a4:	3fe33333 	.word	0x3fe33333
 80170a8:	e0000000 	.word	0xe0000000
 80170ac:	3feec709 	.word	0x3feec709
 80170b0:	dc3a03fd 	.word	0xdc3a03fd
 80170b4:	3feec709 	.word	0x3feec709
 80170b8:	145b01f5 	.word	0x145b01f5
 80170bc:	be3e2fe0 	.word	0xbe3e2fe0
 80170c0:	00000000 	.word	0x00000000
 80170c4:	3ff00000 	.word	0x3ff00000
 80170c8:	7ff00000 	.word	0x7ff00000
 80170cc:	43400000 	.word	0x43400000
 80170d0:	0003988e 	.word	0x0003988e
 80170d4:	000bb679 	.word	0x000bb679
 80170d8:	0801c870 	.word	0x0801c870
 80170dc:	3ff00000 	.word	0x3ff00000
 80170e0:	40080000 	.word	0x40080000
 80170e4:	0801c890 	.word	0x0801c890
 80170e8:	0801c880 	.word	0x0801c880
 80170ec:	a3b3      	add	r3, pc, #716	; (adr r3, 80173bc <__ieee754_pow+0xa4c>)
 80170ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170f2:	4640      	mov	r0, r8
 80170f4:	4649      	mov	r1, r9
 80170f6:	f7e9 f8f1 	bl	80002dc <__adddf3>
 80170fa:	4622      	mov	r2, r4
 80170fc:	ec41 0b1a 	vmov	d10, r0, r1
 8017100:	462b      	mov	r3, r5
 8017102:	4630      	mov	r0, r6
 8017104:	4639      	mov	r1, r7
 8017106:	f7e9 f8e7 	bl	80002d8 <__aeabi_dsub>
 801710a:	4602      	mov	r2, r0
 801710c:	460b      	mov	r3, r1
 801710e:	ec51 0b1a 	vmov	r0, r1, d10
 8017112:	f7e9 fd29 	bl	8000b68 <__aeabi_dcmpgt>
 8017116:	2800      	cmp	r0, #0
 8017118:	f47f ae04 	bne.w	8016d24 <__ieee754_pow+0x3b4>
 801711c:	4aa2      	ldr	r2, [pc, #648]	; (80173a8 <__ieee754_pow+0xa38>)
 801711e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017122:	4293      	cmp	r3, r2
 8017124:	f340 8107 	ble.w	8017336 <__ieee754_pow+0x9c6>
 8017128:	151b      	asrs	r3, r3, #20
 801712a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801712e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8017132:	fa4a fa03 	asr.w	sl, sl, r3
 8017136:	44da      	add	sl, fp
 8017138:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801713c:	489b      	ldr	r0, [pc, #620]	; (80173ac <__ieee754_pow+0xa3c>)
 801713e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017142:	4108      	asrs	r0, r1
 8017144:	ea00 030a 	and.w	r3, r0, sl
 8017148:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801714c:	f1c1 0114 	rsb	r1, r1, #20
 8017150:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017154:	fa4a fa01 	asr.w	sl, sl, r1
 8017158:	f1bb 0f00 	cmp.w	fp, #0
 801715c:	f04f 0200 	mov.w	r2, #0
 8017160:	4620      	mov	r0, r4
 8017162:	4629      	mov	r1, r5
 8017164:	bfb8      	it	lt
 8017166:	f1ca 0a00 	rsblt	sl, sl, #0
 801716a:	f7e9 f8b5 	bl	80002d8 <__aeabi_dsub>
 801716e:	ec41 0b19 	vmov	d9, r0, r1
 8017172:	4642      	mov	r2, r8
 8017174:	464b      	mov	r3, r9
 8017176:	ec51 0b19 	vmov	r0, r1, d9
 801717a:	f7e9 f8af 	bl	80002dc <__adddf3>
 801717e:	a37a      	add	r3, pc, #488	; (adr r3, 8017368 <__ieee754_pow+0x9f8>)
 8017180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017184:	2000      	movs	r0, #0
 8017186:	4604      	mov	r4, r0
 8017188:	460d      	mov	r5, r1
 801718a:	f7e9 fa5d 	bl	8000648 <__aeabi_dmul>
 801718e:	ec53 2b19 	vmov	r2, r3, d9
 8017192:	4606      	mov	r6, r0
 8017194:	460f      	mov	r7, r1
 8017196:	4620      	mov	r0, r4
 8017198:	4629      	mov	r1, r5
 801719a:	f7e9 f89d 	bl	80002d8 <__aeabi_dsub>
 801719e:	4602      	mov	r2, r0
 80171a0:	460b      	mov	r3, r1
 80171a2:	4640      	mov	r0, r8
 80171a4:	4649      	mov	r1, r9
 80171a6:	f7e9 f897 	bl	80002d8 <__aeabi_dsub>
 80171aa:	a371      	add	r3, pc, #452	; (adr r3, 8017370 <__ieee754_pow+0xa00>)
 80171ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b0:	f7e9 fa4a 	bl	8000648 <__aeabi_dmul>
 80171b4:	a370      	add	r3, pc, #448	; (adr r3, 8017378 <__ieee754_pow+0xa08>)
 80171b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ba:	4680      	mov	r8, r0
 80171bc:	4689      	mov	r9, r1
 80171be:	4620      	mov	r0, r4
 80171c0:	4629      	mov	r1, r5
 80171c2:	f7e9 fa41 	bl	8000648 <__aeabi_dmul>
 80171c6:	4602      	mov	r2, r0
 80171c8:	460b      	mov	r3, r1
 80171ca:	4640      	mov	r0, r8
 80171cc:	4649      	mov	r1, r9
 80171ce:	f7e9 f885 	bl	80002dc <__adddf3>
 80171d2:	4604      	mov	r4, r0
 80171d4:	460d      	mov	r5, r1
 80171d6:	4602      	mov	r2, r0
 80171d8:	460b      	mov	r3, r1
 80171da:	4630      	mov	r0, r6
 80171dc:	4639      	mov	r1, r7
 80171de:	f7e9 f87d 	bl	80002dc <__adddf3>
 80171e2:	4632      	mov	r2, r6
 80171e4:	463b      	mov	r3, r7
 80171e6:	4680      	mov	r8, r0
 80171e8:	4689      	mov	r9, r1
 80171ea:	f7e9 f875 	bl	80002d8 <__aeabi_dsub>
 80171ee:	4602      	mov	r2, r0
 80171f0:	460b      	mov	r3, r1
 80171f2:	4620      	mov	r0, r4
 80171f4:	4629      	mov	r1, r5
 80171f6:	f7e9 f86f 	bl	80002d8 <__aeabi_dsub>
 80171fa:	4642      	mov	r2, r8
 80171fc:	4606      	mov	r6, r0
 80171fe:	460f      	mov	r7, r1
 8017200:	464b      	mov	r3, r9
 8017202:	4640      	mov	r0, r8
 8017204:	4649      	mov	r1, r9
 8017206:	f7e9 fa1f 	bl	8000648 <__aeabi_dmul>
 801720a:	a35d      	add	r3, pc, #372	; (adr r3, 8017380 <__ieee754_pow+0xa10>)
 801720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017210:	4604      	mov	r4, r0
 8017212:	460d      	mov	r5, r1
 8017214:	f7e9 fa18 	bl	8000648 <__aeabi_dmul>
 8017218:	a35b      	add	r3, pc, #364	; (adr r3, 8017388 <__ieee754_pow+0xa18>)
 801721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801721e:	f7e9 f85b 	bl	80002d8 <__aeabi_dsub>
 8017222:	4622      	mov	r2, r4
 8017224:	462b      	mov	r3, r5
 8017226:	f7e9 fa0f 	bl	8000648 <__aeabi_dmul>
 801722a:	a359      	add	r3, pc, #356	; (adr r3, 8017390 <__ieee754_pow+0xa20>)
 801722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017230:	f7e9 f854 	bl	80002dc <__adddf3>
 8017234:	4622      	mov	r2, r4
 8017236:	462b      	mov	r3, r5
 8017238:	f7e9 fa06 	bl	8000648 <__aeabi_dmul>
 801723c:	a356      	add	r3, pc, #344	; (adr r3, 8017398 <__ieee754_pow+0xa28>)
 801723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017242:	f7e9 f849 	bl	80002d8 <__aeabi_dsub>
 8017246:	4622      	mov	r2, r4
 8017248:	462b      	mov	r3, r5
 801724a:	f7e9 f9fd 	bl	8000648 <__aeabi_dmul>
 801724e:	a354      	add	r3, pc, #336	; (adr r3, 80173a0 <__ieee754_pow+0xa30>)
 8017250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017254:	f7e9 f842 	bl	80002dc <__adddf3>
 8017258:	4622      	mov	r2, r4
 801725a:	462b      	mov	r3, r5
 801725c:	f7e9 f9f4 	bl	8000648 <__aeabi_dmul>
 8017260:	4602      	mov	r2, r0
 8017262:	460b      	mov	r3, r1
 8017264:	4640      	mov	r0, r8
 8017266:	4649      	mov	r1, r9
 8017268:	f7e9 f836 	bl	80002d8 <__aeabi_dsub>
 801726c:	4604      	mov	r4, r0
 801726e:	460d      	mov	r5, r1
 8017270:	4602      	mov	r2, r0
 8017272:	460b      	mov	r3, r1
 8017274:	4640      	mov	r0, r8
 8017276:	4649      	mov	r1, r9
 8017278:	f7e9 f9e6 	bl	8000648 <__aeabi_dmul>
 801727c:	2200      	movs	r2, #0
 801727e:	ec41 0b19 	vmov	d9, r0, r1
 8017282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017286:	4620      	mov	r0, r4
 8017288:	4629      	mov	r1, r5
 801728a:	f7e9 f825 	bl	80002d8 <__aeabi_dsub>
 801728e:	4602      	mov	r2, r0
 8017290:	460b      	mov	r3, r1
 8017292:	ec51 0b19 	vmov	r0, r1, d9
 8017296:	f7e9 fb01 	bl	800089c <__aeabi_ddiv>
 801729a:	4632      	mov	r2, r6
 801729c:	4604      	mov	r4, r0
 801729e:	460d      	mov	r5, r1
 80172a0:	463b      	mov	r3, r7
 80172a2:	4640      	mov	r0, r8
 80172a4:	4649      	mov	r1, r9
 80172a6:	f7e9 f9cf 	bl	8000648 <__aeabi_dmul>
 80172aa:	4632      	mov	r2, r6
 80172ac:	463b      	mov	r3, r7
 80172ae:	f7e9 f815 	bl	80002dc <__adddf3>
 80172b2:	4602      	mov	r2, r0
 80172b4:	460b      	mov	r3, r1
 80172b6:	4620      	mov	r0, r4
 80172b8:	4629      	mov	r1, r5
 80172ba:	f7e9 f80d 	bl	80002d8 <__aeabi_dsub>
 80172be:	4642      	mov	r2, r8
 80172c0:	464b      	mov	r3, r9
 80172c2:	f7e9 f809 	bl	80002d8 <__aeabi_dsub>
 80172c6:	460b      	mov	r3, r1
 80172c8:	4602      	mov	r2, r0
 80172ca:	4939      	ldr	r1, [pc, #228]	; (80173b0 <__ieee754_pow+0xa40>)
 80172cc:	2000      	movs	r0, #0
 80172ce:	f7e9 f803 	bl	80002d8 <__aeabi_dsub>
 80172d2:	ec41 0b10 	vmov	d0, r0, r1
 80172d6:	ee10 3a90 	vmov	r3, s1
 80172da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80172de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80172e2:	da2b      	bge.n	801733c <__ieee754_pow+0x9cc>
 80172e4:	4650      	mov	r0, sl
 80172e6:	f000 f877 	bl	80173d8 <scalbn>
 80172ea:	ec51 0b10 	vmov	r0, r1, d0
 80172ee:	ec53 2b18 	vmov	r2, r3, d8
 80172f2:	f7ff bbee 	b.w	8016ad2 <__ieee754_pow+0x162>
 80172f6:	4b2f      	ldr	r3, [pc, #188]	; (80173b4 <__ieee754_pow+0xa44>)
 80172f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80172fc:	429e      	cmp	r6, r3
 80172fe:	f77f af0d 	ble.w	801711c <__ieee754_pow+0x7ac>
 8017302:	4b2d      	ldr	r3, [pc, #180]	; (80173b8 <__ieee754_pow+0xa48>)
 8017304:	440b      	add	r3, r1
 8017306:	4303      	orrs	r3, r0
 8017308:	d009      	beq.n	801731e <__ieee754_pow+0x9ae>
 801730a:	ec51 0b18 	vmov	r0, r1, d8
 801730e:	2200      	movs	r2, #0
 8017310:	2300      	movs	r3, #0
 8017312:	f7e9 fc0b 	bl	8000b2c <__aeabi_dcmplt>
 8017316:	3800      	subs	r0, #0
 8017318:	bf18      	it	ne
 801731a:	2001      	movne	r0, #1
 801731c:	e448      	b.n	8016bb0 <__ieee754_pow+0x240>
 801731e:	4622      	mov	r2, r4
 8017320:	462b      	mov	r3, r5
 8017322:	f7e8 ffd9 	bl	80002d8 <__aeabi_dsub>
 8017326:	4642      	mov	r2, r8
 8017328:	464b      	mov	r3, r9
 801732a:	f7e9 fc13 	bl	8000b54 <__aeabi_dcmpge>
 801732e:	2800      	cmp	r0, #0
 8017330:	f43f aef4 	beq.w	801711c <__ieee754_pow+0x7ac>
 8017334:	e7e9      	b.n	801730a <__ieee754_pow+0x99a>
 8017336:	f04f 0a00 	mov.w	sl, #0
 801733a:	e71a      	b.n	8017172 <__ieee754_pow+0x802>
 801733c:	ec51 0b10 	vmov	r0, r1, d0
 8017340:	4619      	mov	r1, r3
 8017342:	e7d4      	b.n	80172ee <__ieee754_pow+0x97e>
 8017344:	491a      	ldr	r1, [pc, #104]	; (80173b0 <__ieee754_pow+0xa40>)
 8017346:	2000      	movs	r0, #0
 8017348:	f7ff bb31 	b.w	80169ae <__ieee754_pow+0x3e>
 801734c:	2000      	movs	r0, #0
 801734e:	2100      	movs	r1, #0
 8017350:	f7ff bb2d 	b.w	80169ae <__ieee754_pow+0x3e>
 8017354:	4630      	mov	r0, r6
 8017356:	4639      	mov	r1, r7
 8017358:	f7ff bb29 	b.w	80169ae <__ieee754_pow+0x3e>
 801735c:	9204      	str	r2, [sp, #16]
 801735e:	f7ff bb7b 	b.w	8016a58 <__ieee754_pow+0xe8>
 8017362:	2300      	movs	r3, #0
 8017364:	f7ff bb65 	b.w	8016a32 <__ieee754_pow+0xc2>
 8017368:	00000000 	.word	0x00000000
 801736c:	3fe62e43 	.word	0x3fe62e43
 8017370:	fefa39ef 	.word	0xfefa39ef
 8017374:	3fe62e42 	.word	0x3fe62e42
 8017378:	0ca86c39 	.word	0x0ca86c39
 801737c:	be205c61 	.word	0xbe205c61
 8017380:	72bea4d0 	.word	0x72bea4d0
 8017384:	3e663769 	.word	0x3e663769
 8017388:	c5d26bf1 	.word	0xc5d26bf1
 801738c:	3ebbbd41 	.word	0x3ebbbd41
 8017390:	af25de2c 	.word	0xaf25de2c
 8017394:	3f11566a 	.word	0x3f11566a
 8017398:	16bebd93 	.word	0x16bebd93
 801739c:	3f66c16c 	.word	0x3f66c16c
 80173a0:	5555553e 	.word	0x5555553e
 80173a4:	3fc55555 	.word	0x3fc55555
 80173a8:	3fe00000 	.word	0x3fe00000
 80173ac:	fff00000 	.word	0xfff00000
 80173b0:	3ff00000 	.word	0x3ff00000
 80173b4:	4090cbff 	.word	0x4090cbff
 80173b8:	3f6f3400 	.word	0x3f6f3400
 80173bc:	652b82fe 	.word	0x652b82fe
 80173c0:	3c971547 	.word	0x3c971547

080173c4 <fabs>:
 80173c4:	ec51 0b10 	vmov	r0, r1, d0
 80173c8:	ee10 2a10 	vmov	r2, s0
 80173cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80173d0:	ec43 2b10 	vmov	d0, r2, r3
 80173d4:	4770      	bx	lr
	...

080173d8 <scalbn>:
 80173d8:	b570      	push	{r4, r5, r6, lr}
 80173da:	ec55 4b10 	vmov	r4, r5, d0
 80173de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80173e2:	4606      	mov	r6, r0
 80173e4:	462b      	mov	r3, r5
 80173e6:	b999      	cbnz	r1, 8017410 <scalbn+0x38>
 80173e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80173ec:	4323      	orrs	r3, r4
 80173ee:	d03f      	beq.n	8017470 <scalbn+0x98>
 80173f0:	4b35      	ldr	r3, [pc, #212]	; (80174c8 <scalbn+0xf0>)
 80173f2:	4629      	mov	r1, r5
 80173f4:	ee10 0a10 	vmov	r0, s0
 80173f8:	2200      	movs	r2, #0
 80173fa:	f7e9 f925 	bl	8000648 <__aeabi_dmul>
 80173fe:	4b33      	ldr	r3, [pc, #204]	; (80174cc <scalbn+0xf4>)
 8017400:	429e      	cmp	r6, r3
 8017402:	4604      	mov	r4, r0
 8017404:	460d      	mov	r5, r1
 8017406:	da10      	bge.n	801742a <scalbn+0x52>
 8017408:	a327      	add	r3, pc, #156	; (adr r3, 80174a8 <scalbn+0xd0>)
 801740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801740e:	e01f      	b.n	8017450 <scalbn+0x78>
 8017410:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017414:	4291      	cmp	r1, r2
 8017416:	d10c      	bne.n	8017432 <scalbn+0x5a>
 8017418:	ee10 2a10 	vmov	r2, s0
 801741c:	4620      	mov	r0, r4
 801741e:	4629      	mov	r1, r5
 8017420:	f7e8 ff5c 	bl	80002dc <__adddf3>
 8017424:	4604      	mov	r4, r0
 8017426:	460d      	mov	r5, r1
 8017428:	e022      	b.n	8017470 <scalbn+0x98>
 801742a:	460b      	mov	r3, r1
 801742c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017430:	3936      	subs	r1, #54	; 0x36
 8017432:	f24c 3250 	movw	r2, #50000	; 0xc350
 8017436:	4296      	cmp	r6, r2
 8017438:	dd0d      	ble.n	8017456 <scalbn+0x7e>
 801743a:	2d00      	cmp	r5, #0
 801743c:	a11c      	add	r1, pc, #112	; (adr r1, 80174b0 <scalbn+0xd8>)
 801743e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017442:	da02      	bge.n	801744a <scalbn+0x72>
 8017444:	a11c      	add	r1, pc, #112	; (adr r1, 80174b8 <scalbn+0xe0>)
 8017446:	e9d1 0100 	ldrd	r0, r1, [r1]
 801744a:	a319      	add	r3, pc, #100	; (adr r3, 80174b0 <scalbn+0xd8>)
 801744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017450:	f7e9 f8fa 	bl	8000648 <__aeabi_dmul>
 8017454:	e7e6      	b.n	8017424 <scalbn+0x4c>
 8017456:	1872      	adds	r2, r6, r1
 8017458:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801745c:	428a      	cmp	r2, r1
 801745e:	dcec      	bgt.n	801743a <scalbn+0x62>
 8017460:	2a00      	cmp	r2, #0
 8017462:	dd08      	ble.n	8017476 <scalbn+0x9e>
 8017464:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801746c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017470:	ec45 4b10 	vmov	d0, r4, r5
 8017474:	bd70      	pop	{r4, r5, r6, pc}
 8017476:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801747a:	da08      	bge.n	801748e <scalbn+0xb6>
 801747c:	2d00      	cmp	r5, #0
 801747e:	a10a      	add	r1, pc, #40	; (adr r1, 80174a8 <scalbn+0xd0>)
 8017480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017484:	dac0      	bge.n	8017408 <scalbn+0x30>
 8017486:	a10e      	add	r1, pc, #56	; (adr r1, 80174c0 <scalbn+0xe8>)
 8017488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801748c:	e7bc      	b.n	8017408 <scalbn+0x30>
 801748e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017492:	3236      	adds	r2, #54	; 0x36
 8017494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017498:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801749c:	4620      	mov	r0, r4
 801749e:	4b0c      	ldr	r3, [pc, #48]	; (80174d0 <scalbn+0xf8>)
 80174a0:	2200      	movs	r2, #0
 80174a2:	e7d5      	b.n	8017450 <scalbn+0x78>
 80174a4:	f3af 8000 	nop.w
 80174a8:	c2f8f359 	.word	0xc2f8f359
 80174ac:	01a56e1f 	.word	0x01a56e1f
 80174b0:	8800759c 	.word	0x8800759c
 80174b4:	7e37e43c 	.word	0x7e37e43c
 80174b8:	8800759c 	.word	0x8800759c
 80174bc:	fe37e43c 	.word	0xfe37e43c
 80174c0:	c2f8f359 	.word	0xc2f8f359
 80174c4:	81a56e1f 	.word	0x81a56e1f
 80174c8:	43500000 	.word	0x43500000
 80174cc:	ffff3cb0 	.word	0xffff3cb0
 80174d0:	3c900000 	.word	0x3c900000

080174d4 <with_errno>:
 80174d4:	b570      	push	{r4, r5, r6, lr}
 80174d6:	4604      	mov	r4, r0
 80174d8:	460d      	mov	r5, r1
 80174da:	4616      	mov	r6, r2
 80174dc:	f7fc ffa0 	bl	8014420 <__errno>
 80174e0:	4629      	mov	r1, r5
 80174e2:	6006      	str	r6, [r0, #0]
 80174e4:	4620      	mov	r0, r4
 80174e6:	bd70      	pop	{r4, r5, r6, pc}

080174e8 <xflow>:
 80174e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174ea:	4614      	mov	r4, r2
 80174ec:	461d      	mov	r5, r3
 80174ee:	b108      	cbz	r0, 80174f4 <xflow+0xc>
 80174f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80174f4:	e9cd 2300 	strd	r2, r3, [sp]
 80174f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80174fc:	4620      	mov	r0, r4
 80174fe:	4629      	mov	r1, r5
 8017500:	f7e9 f8a2 	bl	8000648 <__aeabi_dmul>
 8017504:	2222      	movs	r2, #34	; 0x22
 8017506:	b003      	add	sp, #12
 8017508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801750c:	f7ff bfe2 	b.w	80174d4 <with_errno>

08017510 <__math_uflow>:
 8017510:	b508      	push	{r3, lr}
 8017512:	2200      	movs	r2, #0
 8017514:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017518:	f7ff ffe6 	bl	80174e8 <xflow>
 801751c:	ec41 0b10 	vmov	d0, r0, r1
 8017520:	bd08      	pop	{r3, pc}

08017522 <__math_oflow>:
 8017522:	b508      	push	{r3, lr}
 8017524:	2200      	movs	r2, #0
 8017526:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801752a:	f7ff ffdd 	bl	80174e8 <xflow>
 801752e:	ec41 0b10 	vmov	d0, r0, r1
 8017532:	bd08      	pop	{r3, pc}

08017534 <__ieee754_sqrt>:
 8017534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017538:	ec55 4b10 	vmov	r4, r5, d0
 801753c:	4e67      	ldr	r6, [pc, #412]	; (80176dc <__ieee754_sqrt+0x1a8>)
 801753e:	43ae      	bics	r6, r5
 8017540:	ee10 0a10 	vmov	r0, s0
 8017544:	ee10 2a10 	vmov	r2, s0
 8017548:	4629      	mov	r1, r5
 801754a:	462b      	mov	r3, r5
 801754c:	d10d      	bne.n	801756a <__ieee754_sqrt+0x36>
 801754e:	f7e9 f87b 	bl	8000648 <__aeabi_dmul>
 8017552:	4602      	mov	r2, r0
 8017554:	460b      	mov	r3, r1
 8017556:	4620      	mov	r0, r4
 8017558:	4629      	mov	r1, r5
 801755a:	f7e8 febf 	bl	80002dc <__adddf3>
 801755e:	4604      	mov	r4, r0
 8017560:	460d      	mov	r5, r1
 8017562:	ec45 4b10 	vmov	d0, r4, r5
 8017566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801756a:	2d00      	cmp	r5, #0
 801756c:	dc0b      	bgt.n	8017586 <__ieee754_sqrt+0x52>
 801756e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017572:	4326      	orrs	r6, r4
 8017574:	d0f5      	beq.n	8017562 <__ieee754_sqrt+0x2e>
 8017576:	b135      	cbz	r5, 8017586 <__ieee754_sqrt+0x52>
 8017578:	f7e8 feae 	bl	80002d8 <__aeabi_dsub>
 801757c:	4602      	mov	r2, r0
 801757e:	460b      	mov	r3, r1
 8017580:	f7e9 f98c 	bl	800089c <__aeabi_ddiv>
 8017584:	e7eb      	b.n	801755e <__ieee754_sqrt+0x2a>
 8017586:	1509      	asrs	r1, r1, #20
 8017588:	f000 808d 	beq.w	80176a6 <__ieee754_sqrt+0x172>
 801758c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017590:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8017594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017598:	07c9      	lsls	r1, r1, #31
 801759a:	bf5c      	itt	pl
 801759c:	005b      	lslpl	r3, r3, #1
 801759e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80175a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80175a6:	bf58      	it	pl
 80175a8:	0052      	lslpl	r2, r2, #1
 80175aa:	2500      	movs	r5, #0
 80175ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80175b0:	1076      	asrs	r6, r6, #1
 80175b2:	0052      	lsls	r2, r2, #1
 80175b4:	f04f 0e16 	mov.w	lr, #22
 80175b8:	46ac      	mov	ip, r5
 80175ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80175be:	eb0c 0001 	add.w	r0, ip, r1
 80175c2:	4298      	cmp	r0, r3
 80175c4:	bfde      	ittt	le
 80175c6:	1a1b      	suble	r3, r3, r0
 80175c8:	eb00 0c01 	addle.w	ip, r0, r1
 80175cc:	186d      	addle	r5, r5, r1
 80175ce:	005b      	lsls	r3, r3, #1
 80175d0:	f1be 0e01 	subs.w	lr, lr, #1
 80175d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80175d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80175dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80175e0:	d1ed      	bne.n	80175be <__ieee754_sqrt+0x8a>
 80175e2:	4674      	mov	r4, lr
 80175e4:	2720      	movs	r7, #32
 80175e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80175ea:	4563      	cmp	r3, ip
 80175ec:	eb01 000e 	add.w	r0, r1, lr
 80175f0:	dc02      	bgt.n	80175f8 <__ieee754_sqrt+0xc4>
 80175f2:	d113      	bne.n	801761c <__ieee754_sqrt+0xe8>
 80175f4:	4290      	cmp	r0, r2
 80175f6:	d811      	bhi.n	801761c <__ieee754_sqrt+0xe8>
 80175f8:	2800      	cmp	r0, #0
 80175fa:	eb00 0e01 	add.w	lr, r0, r1
 80175fe:	da57      	bge.n	80176b0 <__ieee754_sqrt+0x17c>
 8017600:	f1be 0f00 	cmp.w	lr, #0
 8017604:	db54      	blt.n	80176b0 <__ieee754_sqrt+0x17c>
 8017606:	f10c 0801 	add.w	r8, ip, #1
 801760a:	eba3 030c 	sub.w	r3, r3, ip
 801760e:	4290      	cmp	r0, r2
 8017610:	bf88      	it	hi
 8017612:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8017616:	1a12      	subs	r2, r2, r0
 8017618:	440c      	add	r4, r1
 801761a:	46c4      	mov	ip, r8
 801761c:	005b      	lsls	r3, r3, #1
 801761e:	3f01      	subs	r7, #1
 8017620:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8017624:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8017628:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801762c:	d1dd      	bne.n	80175ea <__ieee754_sqrt+0xb6>
 801762e:	4313      	orrs	r3, r2
 8017630:	d01b      	beq.n	801766a <__ieee754_sqrt+0x136>
 8017632:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80176e0 <__ieee754_sqrt+0x1ac>
 8017636:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80176e4 <__ieee754_sqrt+0x1b0>
 801763a:	e9da 0100 	ldrd	r0, r1, [sl]
 801763e:	e9db 2300 	ldrd	r2, r3, [fp]
 8017642:	f7e8 fe49 	bl	80002d8 <__aeabi_dsub>
 8017646:	e9da 8900 	ldrd	r8, r9, [sl]
 801764a:	4602      	mov	r2, r0
 801764c:	460b      	mov	r3, r1
 801764e:	4640      	mov	r0, r8
 8017650:	4649      	mov	r1, r9
 8017652:	f7e9 fa75 	bl	8000b40 <__aeabi_dcmple>
 8017656:	b140      	cbz	r0, 801766a <__ieee754_sqrt+0x136>
 8017658:	f1b4 3fff 	cmp.w	r4, #4294967295
 801765c:	e9da 0100 	ldrd	r0, r1, [sl]
 8017660:	e9db 2300 	ldrd	r2, r3, [fp]
 8017664:	d126      	bne.n	80176b4 <__ieee754_sqrt+0x180>
 8017666:	3501      	adds	r5, #1
 8017668:	463c      	mov	r4, r7
 801766a:	106a      	asrs	r2, r5, #1
 801766c:	0863      	lsrs	r3, r4, #1
 801766e:	07e9      	lsls	r1, r5, #31
 8017670:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017674:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017678:	bf48      	it	mi
 801767a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801767e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8017682:	461c      	mov	r4, r3
 8017684:	e76d      	b.n	8017562 <__ieee754_sqrt+0x2e>
 8017686:	0ad3      	lsrs	r3, r2, #11
 8017688:	3815      	subs	r0, #21
 801768a:	0552      	lsls	r2, r2, #21
 801768c:	2b00      	cmp	r3, #0
 801768e:	d0fa      	beq.n	8017686 <__ieee754_sqrt+0x152>
 8017690:	02dc      	lsls	r4, r3, #11
 8017692:	d50a      	bpl.n	80176aa <__ieee754_sqrt+0x176>
 8017694:	f1c1 0420 	rsb	r4, r1, #32
 8017698:	fa22 f404 	lsr.w	r4, r2, r4
 801769c:	1e4d      	subs	r5, r1, #1
 801769e:	408a      	lsls	r2, r1
 80176a0:	4323      	orrs	r3, r4
 80176a2:	1b41      	subs	r1, r0, r5
 80176a4:	e772      	b.n	801758c <__ieee754_sqrt+0x58>
 80176a6:	4608      	mov	r0, r1
 80176a8:	e7f0      	b.n	801768c <__ieee754_sqrt+0x158>
 80176aa:	005b      	lsls	r3, r3, #1
 80176ac:	3101      	adds	r1, #1
 80176ae:	e7ef      	b.n	8017690 <__ieee754_sqrt+0x15c>
 80176b0:	46e0      	mov	r8, ip
 80176b2:	e7aa      	b.n	801760a <__ieee754_sqrt+0xd6>
 80176b4:	f7e8 fe12 	bl	80002dc <__adddf3>
 80176b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80176bc:	4602      	mov	r2, r0
 80176be:	460b      	mov	r3, r1
 80176c0:	4640      	mov	r0, r8
 80176c2:	4649      	mov	r1, r9
 80176c4:	f7e9 fa32 	bl	8000b2c <__aeabi_dcmplt>
 80176c8:	b120      	cbz	r0, 80176d4 <__ieee754_sqrt+0x1a0>
 80176ca:	1ca0      	adds	r0, r4, #2
 80176cc:	bf08      	it	eq
 80176ce:	3501      	addeq	r5, #1
 80176d0:	3402      	adds	r4, #2
 80176d2:	e7ca      	b.n	801766a <__ieee754_sqrt+0x136>
 80176d4:	3401      	adds	r4, #1
 80176d6:	f024 0401 	bic.w	r4, r4, #1
 80176da:	e7c6      	b.n	801766a <__ieee754_sqrt+0x136>
 80176dc:	7ff00000 	.word	0x7ff00000
 80176e0:	200004e0 	.word	0x200004e0
 80176e4:	200004e8 	.word	0x200004e8

080176e8 <_init>:
 80176e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ea:	bf00      	nop
 80176ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176ee:	bc08      	pop	{r3}
 80176f0:	469e      	mov	lr, r3
 80176f2:	4770      	bx	lr

080176f4 <_fini>:
 80176f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f6:	bf00      	nop
 80176f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176fa:	bc08      	pop	{r3}
 80176fc:	469e      	mov	lr, r3
 80176fe:	4770      	bx	lr
